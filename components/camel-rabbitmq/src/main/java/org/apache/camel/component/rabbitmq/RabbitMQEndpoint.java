begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|AMQP
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"rabbitmq"
argument_list|,
name|title
operator|=
literal|"RabbitMQ"
argument_list|,
name|syntax
operator|=
literal|"rabbitmq:hostname:portNumber/exchangeName"
argument_list|,
name|consumerClass
operator|=
name|RabbitMQConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"messaging"
argument_list|)
DECL|class|RabbitMQEndpoint
specifier|public
class|class
name|RabbitMQEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|AsyncEndpoint
block|{
comment|// header to indicate that the message body needs to be de-serialized
DECL|field|SERIALIZE_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|SERIALIZE_HEADER
init|=
literal|"CamelSerialize"
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|hostname
specifier|private
name|String
name|hostname
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|defaultValue
operator|=
literal|"5672"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|portNumber
specifier|private
name|int
name|portNumber
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|exchangeName
specifier|private
name|String
name|exchangeName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
name|ConnectionFactory
operator|.
name|DEFAULT_USER
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|username
specifier|private
name|String
name|username
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_USER
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
name|ConnectionFactory
operator|.
name|DEFAULT_PASS
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_PASS
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
name|ConnectionFactory
operator|.
name|DEFAULT_VHOST
argument_list|)
DECL|field|vhost
specifier|private
name|String
name|vhost
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_VHOST
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|threadPoolSize
specifier|private
name|int
name|threadPoolSize
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoAck
specifier|private
name|boolean
name|autoAck
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoDelete
specifier|private
name|boolean
name|autoDelete
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|durable
specifier|private
name|boolean
name|durable
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|bridgeEndpoint
specifier|private
name|boolean
name|bridgeEndpoint
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|queue
specifier|private
name|String
name|queue
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"direct"
argument_list|,
name|enums
operator|=
literal|"direct,fanout,headers,topic"
argument_list|)
DECL|field|exchangeType
specifier|private
name|String
name|exchangeType
init|=
literal|"direct"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|routingKey
specifier|private
name|String
name|routingKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|skipQueueDeclare
specifier|private
name|boolean
name|skipQueueDeclare
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|skipQueueBind
specifier|private
name|boolean
name|skipQueueBind
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|skipExchangeDeclare
specifier|private
name|boolean
name|skipExchangeDeclare
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|addresses
specifier|private
name|Address
index|[]
name|addresses
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
DECL|field|connectionTimeout
specifier|private
name|int
name|connectionTimeout
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_CHANNEL_MAX
argument_list|)
DECL|field|requestedChannelMax
specifier|private
name|int
name|requestedChannelMax
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_CHANNEL_MAX
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_FRAME_MAX
argument_list|)
DECL|field|requestedFrameMax
specifier|private
name|int
name|requestedFrameMax
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_FRAME_MAX
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_HEARTBEAT
argument_list|)
DECL|field|requestedHeartbeat
specifier|private
name|int
name|requestedHeartbeat
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_HEARTBEAT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|sslProtocol
specifier|private
name|String
name|sslProtocol
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|trustManager
specifier|private
name|TrustManager
name|trustManager
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|clientProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|connectionFactory
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|automaticRecoveryEnabled
specifier|private
name|Boolean
name|automaticRecoveryEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|networkRecoveryInterval
specifier|private
name|Integer
name|networkRecoveryInterval
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|topologyRecoveryEnabled
specifier|private
name|Boolean
name|topologyRecoveryEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchEnabled
specifier|private
name|boolean
name|prefetchEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchSize
specifier|private
name|int
name|prefetchSize
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchCount
specifier|private
name|int
name|prefetchCount
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchGlobal
specifier|private
name|boolean
name|prefetchGlobal
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|)
DECL|field|concurrentConsumers
specifier|private
name|int
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|declare
specifier|private
name|boolean
name|declare
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|deadLetterExchange
specifier|private
name|String
name|deadLetterExchange
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|deadLetterRoutingKey
specifier|private
name|String
name|deadLetterRoutingKey
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|deadLetterQueue
specifier|private
name|String
name|deadLetterQueue
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"direct"
argument_list|,
name|enums
operator|=
literal|"direct,fanout,headers,topic"
argument_list|)
DECL|field|deadLetterExchangeType
specifier|private
name|String
name|deadLetterExchangeType
init|=
literal|"direct"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|channelPoolMaxSize
specifier|private
name|int
name|channelPoolMaxSize
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"1000"
argument_list|)
DECL|field|channelPoolMaxWait
specifier|private
name|long
name|channelPoolMaxWait
init|=
literal|1000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|mandatory
specifier|private
name|boolean
name|mandatory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|immediate
specifier|private
name|boolean
name|immediate
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|queueArgsConfigurer
specifier|private
name|ArgsConfigurer
name|queueArgsConfigurer
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|exchangeArgsConfigurer
specifier|private
name|ArgsConfigurer
name|exchangeArgsConfigurer
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|requestTimeout
specifier|private
name|long
name|requestTimeout
init|=
literal|20000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|requestTimeoutCheckerInterval
specifier|private
name|long
name|requestTimeoutCheckerInterval
init|=
literal|1000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|transferException
specifier|private
name|boolean
name|transferException
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|publisherAcknowledgements
specifier|private
name|boolean
name|publisherAcknowledgements
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|publisherAcknowledgementsTimeout
specifier|private
name|long
name|publisherAcknowledgementsTimeout
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|guaranteedDeliveries
specifier|private
name|boolean
name|guaranteedDeliveries
decl_stmt|;
comment|// camel-jms supports this setting but it is not currently configurable in camel-rabbitmq
DECL|field|useMessageIDAsCorrelationID
specifier|private
name|boolean
name|useMessageIDAsCorrelationID
init|=
literal|true
decl_stmt|;
comment|// camel-jms supports this setting but it is not currently configurable in camel-rabbitmq
DECL|field|replyToType
specifier|private
name|String
name|replyToType
init|=
name|ReplyToType
operator|.
name|Temporary
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// camel-jms supports this setting but it is not currently configurable in camel-rabbitmq
DECL|field|replyTo
specifier|private
name|String
name|replyTo
decl_stmt|;
DECL|field|messageConverter
specifier|private
specifier|final
name|RabbitMQMessageConverter
name|messageConverter
init|=
operator|new
name|RabbitMQMessageConverter
argument_list|()
decl_stmt|;
DECL|field|factoryCreator
specifier|private
specifier|final
name|RabbitMQConnectionFactorySupport
name|factoryCreator
init|=
operator|new
name|RabbitMQConnectionFactorySupport
argument_list|()
decl_stmt|;
DECL|field|declareSupport
specifier|private
specifier|final
name|RabbitMQDeclareSupport
name|declareSupport
init|=
operator|new
name|RabbitMQDeclareSupport
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|method|RabbitMQEndpoint ()
specifier|public
name|RabbitMQEndpoint
parameter_list|()
block|{     }
DECL|method|RabbitMQEndpoint (String endpointUri, RabbitMQComponent component)
specifier|public
name|RabbitMQEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|RabbitMQComponent
name|component
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|RabbitMQEndpoint (String endpointUri, RabbitMQComponent component, ConnectionFactory connectionFactory)
specifier|public
name|RabbitMQEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|RabbitMQComponent
name|component
parameter_list|,
name|ConnectionFactory
name|connectionFactory
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
DECL|method|createRabbitExchange (Envelope envelope, AMQP.BasicProperties properties, byte[] body)
specifier|public
name|Exchange
name|createRabbitExchange
parameter_list|(
name|Envelope
name|envelope
parameter_list|,
name|AMQP
operator|.
name|BasicProperties
name|properties
parameter_list|,
name|byte
index|[]
name|body
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|super
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|messageConverter
operator|.
name|populateRabbitExchange
argument_list|(
name|exchange
argument_list|,
name|envelope
argument_list|,
name|properties
argument_list|,
name|body
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
comment|/**      * Gets the message converter to convert between rabbit and camel      */
DECL|method|getMessageConverter ()
specifier|protected
name|RabbitMQMessageConverter
name|getMessageConverter
parameter_list|()
block|{
return|return
name|messageConverter
return|;
block|}
comment|/**      * Sends the body that is on the exchange      */
DECL|method|publishExchangeToChannel (Exchange camelExchange, Channel channel, String routingKey)
specifier|public
name|void
name|publishExchangeToChannel
parameter_list|(
name|Exchange
name|camelExchange
parameter_list|,
name|Channel
name|channel
parameter_list|,
name|String
name|routingKey
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|RabbitMQMessagePublisher
argument_list|(
name|camelExchange
argument_list|,
name|channel
argument_list|,
name|routingKey
argument_list|,
name|this
argument_list|)
operator|.
name|publish
argument_list|()
expr_stmt|;
block|}
comment|/**      * Extracts name of the rabbitmq exchange      */
DECL|method|getExchangeName (Message msg)
specifier|protected
name|String
name|getExchangeName
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|String
name|exchangeName
init|=
name|msg
operator|.
name|getHeader
argument_list|(
name|RabbitMQConstants
operator|.
name|EXCHANGE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// If it is BridgeEndpoint we should ignore the message header of EXCHANGE_NAME
if|if
condition|(
name|exchangeName
operator|==
literal|null
operator|||
name|isBridgeEndpoint
argument_list|()
condition|)
block|{
name|exchangeName
operator|=
name|getExchangeName
argument_list|()
expr_stmt|;
block|}
return|return
name|exchangeName
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|RabbitMQConsumer
name|consumer
init|=
operator|new
name|RabbitMQConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
DECL|method|connect (ExecutorService executor)
specifier|public
name|Connection
name|connect
parameter_list|(
name|ExecutorService
name|executor
parameter_list|)
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
if|if
condition|(
name|getAddresses
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|getOrCreateConnectionFactory
argument_list|()
operator|.
name|newConnection
argument_list|(
name|executor
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getOrCreateConnectionFactory
argument_list|()
operator|.
name|newConnection
argument_list|(
name|executor
argument_list|,
name|getAddresses
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * If needed, declare Exchange, declare Queue and bind them with Routing Key      */
DECL|method|declareExchangeAndQueue (Channel channel)
specifier|public
name|void
name|declareExchangeAndQueue
parameter_list|(
name|Channel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|declareSupport
operator|.
name|declareAndBindExchangesAndQueuesUsing
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
DECL|method|getOrCreateConnectionFactory ()
specifier|private
name|ConnectionFactory
name|getOrCreateConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|connectionFactory
operator|==
literal|null
condition|)
block|{
name|connectionFactory
operator|=
name|factoryCreator
operator|.
name|createFactoryFor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|connectionFactory
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RabbitMQProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|createExecutor ()
specifier|protected
name|ExecutorService
name|createExecutor
parameter_list|()
block|{
if|if
condition|(
name|getCamelContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newFixedThreadPool
argument_list|(
name|this
argument_list|,
literal|"RabbitMQConsumer"
argument_list|,
name|getThreadPoolSize
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|getThreadPoolSize
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/**      * Username in case of authenticated access      */
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * Password for authenticated access      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getVhost ()
specifier|public
name|String
name|getVhost
parameter_list|()
block|{
return|return
name|vhost
return|;
block|}
comment|/**      * The vhost for the channel      */
DECL|method|setVhost (String vhost)
specifier|public
name|void
name|setVhost
parameter_list|(
name|String
name|vhost
parameter_list|)
block|{
name|this
operator|.
name|vhost
operator|=
name|vhost
expr_stmt|;
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/**      * The hostname of the running rabbitmq instance or cluster.      */
DECL|method|setHostname (String hostname)
specifier|public
name|void
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
DECL|method|getThreadPoolSize ()
specifier|public
name|int
name|getThreadPoolSize
parameter_list|()
block|{
return|return
name|threadPoolSize
return|;
block|}
comment|/**      * The consumer uses a Thread Pool Executor with a fixed number of threads. This setting allows you to set that number of threads.      */
DECL|method|setThreadPoolSize (int threadPoolSize)
specifier|public
name|void
name|setThreadPoolSize
parameter_list|(
name|int
name|threadPoolSize
parameter_list|)
block|{
name|this
operator|.
name|threadPoolSize
operator|=
name|threadPoolSize
expr_stmt|;
block|}
DECL|method|getPortNumber ()
specifier|public
name|int
name|getPortNumber
parameter_list|()
block|{
return|return
name|portNumber
return|;
block|}
comment|/**      * Port number for the host with the running rabbitmq instance or cluster. Default value is 5672.      */
DECL|method|setPortNumber (int portNumber)
specifier|public
name|void
name|setPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
name|this
operator|.
name|portNumber
operator|=
name|portNumber
expr_stmt|;
block|}
DECL|method|isAutoAck ()
specifier|public
name|boolean
name|isAutoAck
parameter_list|()
block|{
return|return
name|autoAck
return|;
block|}
comment|/**      * If messages should be auto acknowledged      */
DECL|method|setAutoAck (boolean autoAck)
specifier|public
name|void
name|setAutoAck
parameter_list|(
name|boolean
name|autoAck
parameter_list|)
block|{
name|this
operator|.
name|autoAck
operator|=
name|autoAck
expr_stmt|;
block|}
DECL|method|isAutoDelete ()
specifier|public
name|boolean
name|isAutoDelete
parameter_list|()
block|{
return|return
name|autoDelete
return|;
block|}
comment|/**      * If it is true, the exchange will be deleted when it is no longer in use      */
DECL|method|setAutoDelete (boolean autoDelete)
specifier|public
name|void
name|setAutoDelete
parameter_list|(
name|boolean
name|autoDelete
parameter_list|)
block|{
name|this
operator|.
name|autoDelete
operator|=
name|autoDelete
expr_stmt|;
block|}
DECL|method|isDurable ()
specifier|public
name|boolean
name|isDurable
parameter_list|()
block|{
return|return
name|durable
return|;
block|}
comment|/**      * If we are declaring a durable exchange (the exchange will survive a server restart)      */
DECL|method|setDurable (boolean durable)
specifier|public
name|void
name|setDurable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|this
operator|.
name|durable
operator|=
name|durable
expr_stmt|;
block|}
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
comment|/**      * The queue to receive messages from      */
DECL|method|setQueue (String queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
DECL|method|getExchangeName ()
specifier|public
name|String
name|getExchangeName
parameter_list|()
block|{
return|return
name|exchangeName
return|;
block|}
comment|/**      * The exchange name determines which exchange produced messages will sent to.      * In the case of consumers, the exchange name determines which exchange the queue will bind to.      */
DECL|method|setExchangeName (String exchangeName)
specifier|public
name|void
name|setExchangeName
parameter_list|(
name|String
name|exchangeName
parameter_list|)
block|{
name|this
operator|.
name|exchangeName
operator|=
name|exchangeName
expr_stmt|;
block|}
DECL|method|getExchangeType ()
specifier|public
name|String
name|getExchangeType
parameter_list|()
block|{
return|return
name|exchangeType
return|;
block|}
comment|/**      * The exchange type such as direct or topic.      */
DECL|method|setExchangeType (String exchangeType)
specifier|public
name|void
name|setExchangeType
parameter_list|(
name|String
name|exchangeType
parameter_list|)
block|{
name|this
operator|.
name|exchangeType
operator|=
name|exchangeType
expr_stmt|;
block|}
DECL|method|getRoutingKey ()
specifier|public
name|String
name|getRoutingKey
parameter_list|()
block|{
return|return
name|routingKey
return|;
block|}
comment|/**      * The routing key to use when binding a consumer queue to the exchange.      * For producer routing keys, you set the header rabbitmq.ROUTING_KEY.      */
DECL|method|setRoutingKey (String routingKey)
specifier|public
name|void
name|setRoutingKey
parameter_list|(
name|String
name|routingKey
parameter_list|)
block|{
name|this
operator|.
name|routingKey
operator|=
name|routingKey
expr_stmt|;
block|}
comment|/**      * If true the producer will not declare and bind a queue.      * This can be used for directing messages via an existing routing key.      */
DECL|method|setSkipQueueDeclare (boolean skipQueueDeclare)
specifier|public
name|void
name|setSkipQueueDeclare
parameter_list|(
name|boolean
name|skipQueueDeclare
parameter_list|)
block|{
name|this
operator|.
name|skipQueueDeclare
operator|=
name|skipQueueDeclare
expr_stmt|;
block|}
DECL|method|isSkipQueueDeclare ()
specifier|public
name|boolean
name|isSkipQueueDeclare
parameter_list|()
block|{
return|return
name|skipQueueDeclare
return|;
block|}
comment|/**      * If true the queue will not be bound to the exchange after declaring it      * @return      */
DECL|method|isSkipQueueBind ()
specifier|public
name|boolean
name|isSkipQueueBind
parameter_list|()
block|{
return|return
name|skipQueueBind
return|;
block|}
DECL|method|setSkipQueueBind (boolean skipQueueBind)
specifier|public
name|void
name|setSkipQueueBind
parameter_list|(
name|boolean
name|skipQueueBind
parameter_list|)
block|{
name|this
operator|.
name|skipQueueBind
operator|=
name|skipQueueBind
expr_stmt|;
block|}
comment|/**      * This can be used if we need to declare the queue but not the exchange      */
DECL|method|setSkipExchangeDeclare (boolean skipExchangeDeclare)
specifier|public
name|void
name|setSkipExchangeDeclare
parameter_list|(
name|boolean
name|skipExchangeDeclare
parameter_list|)
block|{
name|this
operator|.
name|skipExchangeDeclare
operator|=
name|skipExchangeDeclare
expr_stmt|;
block|}
DECL|method|isSkipExchangeDeclare ()
specifier|public
name|boolean
name|isSkipExchangeDeclare
parameter_list|()
block|{
return|return
name|skipExchangeDeclare
return|;
block|}
comment|/**      * If the bridgeEndpoint is true, the producer will ignore the message header of "rabbitmq.EXCHANGE_NAME" and "rabbitmq.ROUTING_KEY"      */
DECL|method|setBridgeEndpoint (boolean bridgeEndpoint)
specifier|public
name|void
name|setBridgeEndpoint
parameter_list|(
name|boolean
name|bridgeEndpoint
parameter_list|)
block|{
name|this
operator|.
name|bridgeEndpoint
operator|=
name|bridgeEndpoint
expr_stmt|;
block|}
DECL|method|isBridgeEndpoint ()
specifier|public
name|boolean
name|isBridgeEndpoint
parameter_list|()
block|{
return|return
name|bridgeEndpoint
return|;
block|}
comment|/**      * If this option is set, camel-rabbitmq will try to create connection based on the setting of option addresses.      * The addresses value is a string which looks like "server1:12345, server2:12345"      */
DECL|method|setAddresses (String addresses)
specifier|public
name|void
name|setAddresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|Address
index|[]
name|addressArray
init|=
name|Address
operator|.
name|parseAddresses
argument_list|(
name|addresses
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressArray
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|addresses
operator|=
name|addressArray
expr_stmt|;
block|}
block|}
DECL|method|getAddresses ()
specifier|public
name|Address
index|[]
name|getAddresses
parameter_list|()
block|{
return|return
name|addresses
return|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|int
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
comment|/**      * Connection timeout      */
DECL|method|setConnectionTimeout (int connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getRequestedChannelMax ()
specifier|public
name|int
name|getRequestedChannelMax
parameter_list|()
block|{
return|return
name|requestedChannelMax
return|;
block|}
comment|/**      * Connection requested channel max (max number of channels offered)      */
DECL|method|setRequestedChannelMax (int requestedChannelMax)
specifier|public
name|void
name|setRequestedChannelMax
parameter_list|(
name|int
name|requestedChannelMax
parameter_list|)
block|{
name|this
operator|.
name|requestedChannelMax
operator|=
name|requestedChannelMax
expr_stmt|;
block|}
DECL|method|getRequestedFrameMax ()
specifier|public
name|int
name|getRequestedFrameMax
parameter_list|()
block|{
return|return
name|requestedFrameMax
return|;
block|}
comment|/**      * Connection requested frame max (max size of frame offered)      */
DECL|method|setRequestedFrameMax (int requestedFrameMax)
specifier|public
name|void
name|setRequestedFrameMax
parameter_list|(
name|int
name|requestedFrameMax
parameter_list|)
block|{
name|this
operator|.
name|requestedFrameMax
operator|=
name|requestedFrameMax
expr_stmt|;
block|}
DECL|method|getRequestedHeartbeat ()
specifier|public
name|int
name|getRequestedHeartbeat
parameter_list|()
block|{
return|return
name|requestedHeartbeat
return|;
block|}
comment|/**      * Connection requested heartbeat (heart-beat in seconds offered)      */
DECL|method|setRequestedHeartbeat (int requestedHeartbeat)
specifier|public
name|void
name|setRequestedHeartbeat
parameter_list|(
name|int
name|requestedHeartbeat
parameter_list|)
block|{
name|this
operator|.
name|requestedHeartbeat
operator|=
name|requestedHeartbeat
expr_stmt|;
block|}
DECL|method|getSslProtocol ()
specifier|public
name|String
name|getSslProtocol
parameter_list|()
block|{
return|return
name|sslProtocol
return|;
block|}
comment|/**      * Enables SSL on connection, accepted value are `true`, `TLS` and 'SSLv3`      */
DECL|method|setSslProtocol (String sslProtocol)
specifier|public
name|void
name|setSslProtocol
parameter_list|(
name|String
name|sslProtocol
parameter_list|)
block|{
name|this
operator|.
name|sslProtocol
operator|=
name|sslProtocol
expr_stmt|;
block|}
DECL|method|getConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
return|;
block|}
comment|/**      * To use a custom RabbitMQ connection factory.      * When this option is set, all connection options (connectionTimeout, requestedChannelMax...) set on URI are not used      */
DECL|method|setConnectionFactory (ConnectionFactory connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
DECL|method|getTrustManager ()
specifier|public
name|TrustManager
name|getTrustManager
parameter_list|()
block|{
return|return
name|trustManager
return|;
block|}
comment|/**      * Configure SSL trust manager, SSL should be enabled for this option to be effective      */
DECL|method|setTrustManager (TrustManager trustManager)
specifier|public
name|void
name|setTrustManager
parameter_list|(
name|TrustManager
name|trustManager
parameter_list|)
block|{
name|this
operator|.
name|trustManager
operator|=
name|trustManager
expr_stmt|;
block|}
DECL|method|getClientProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getClientProperties
parameter_list|()
block|{
return|return
name|clientProperties
return|;
block|}
comment|/**      * Connection client properties (client info used in negotiating with the server)      */
DECL|method|setClientProperties (Map<String, Object> clientProperties)
specifier|public
name|void
name|setClientProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
parameter_list|)
block|{
name|this
operator|.
name|clientProperties
operator|=
name|clientProperties
expr_stmt|;
block|}
DECL|method|getAutomaticRecoveryEnabled ()
specifier|public
name|Boolean
name|getAutomaticRecoveryEnabled
parameter_list|()
block|{
return|return
name|automaticRecoveryEnabled
return|;
block|}
comment|/**      * Enables connection automatic recovery (uses connection implementation that performs automatic recovery when connection shutdown is not initiated by the application)      */
DECL|method|setAutomaticRecoveryEnabled (Boolean automaticRecoveryEnabled)
specifier|public
name|void
name|setAutomaticRecoveryEnabled
parameter_list|(
name|Boolean
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|this
operator|.
name|automaticRecoveryEnabled
operator|=
name|automaticRecoveryEnabled
expr_stmt|;
block|}
DECL|method|getNetworkRecoveryInterval ()
specifier|public
name|Integer
name|getNetworkRecoveryInterval
parameter_list|()
block|{
return|return
name|networkRecoveryInterval
return|;
block|}
comment|/**      * Network recovery interval in milliseconds (interval used when recovering from network failure)      */
DECL|method|setNetworkRecoveryInterval (Integer networkRecoveryInterval)
specifier|public
name|void
name|setNetworkRecoveryInterval
parameter_list|(
name|Integer
name|networkRecoveryInterval
parameter_list|)
block|{
name|this
operator|.
name|networkRecoveryInterval
operator|=
name|networkRecoveryInterval
expr_stmt|;
block|}
DECL|method|getTopologyRecoveryEnabled ()
specifier|public
name|Boolean
name|getTopologyRecoveryEnabled
parameter_list|()
block|{
return|return
name|topologyRecoveryEnabled
return|;
block|}
comment|/**      * Enables connection topology recovery (should topology recovery be performed?)      */
DECL|method|setTopologyRecoveryEnabled (Boolean topologyRecoveryEnabled)
specifier|public
name|void
name|setTopologyRecoveryEnabled
parameter_list|(
name|Boolean
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|this
operator|.
name|topologyRecoveryEnabled
operator|=
name|topologyRecoveryEnabled
expr_stmt|;
block|}
DECL|method|isPrefetchEnabled ()
specifier|public
name|boolean
name|isPrefetchEnabled
parameter_list|()
block|{
return|return
name|prefetchEnabled
return|;
block|}
comment|/**      * Enables the quality of service on the RabbitMQConsumer side.      * You need to specify the option of prefetchSize, prefetchCount, prefetchGlobal at the same time      */
DECL|method|setPrefetchEnabled (boolean prefetchEnabled)
specifier|public
name|void
name|setPrefetchEnabled
parameter_list|(
name|boolean
name|prefetchEnabled
parameter_list|)
block|{
name|this
operator|.
name|prefetchEnabled
operator|=
name|prefetchEnabled
expr_stmt|;
block|}
comment|/**      * The maximum amount of content (measured in octets) that the server will deliver, 0 if unlimited.      * You need to specify the option of prefetchSize, prefetchCount, prefetchGlobal at the same time      */
DECL|method|setPrefetchSize (int prefetchSize)
specifier|public
name|void
name|setPrefetchSize
parameter_list|(
name|int
name|prefetchSize
parameter_list|)
block|{
name|this
operator|.
name|prefetchSize
operator|=
name|prefetchSize
expr_stmt|;
block|}
DECL|method|getPrefetchSize ()
specifier|public
name|int
name|getPrefetchSize
parameter_list|()
block|{
return|return
name|prefetchSize
return|;
block|}
comment|/**      * The maximum number of messages that the server will deliver, 0 if unlimited.      * You need to specify the option of prefetchSize, prefetchCount, prefetchGlobal at the same time      */
DECL|method|setPrefetchCount (int prefetchCount)
specifier|public
name|void
name|setPrefetchCount
parameter_list|(
name|int
name|prefetchCount
parameter_list|)
block|{
name|this
operator|.
name|prefetchCount
operator|=
name|prefetchCount
expr_stmt|;
block|}
DECL|method|getPrefetchCount ()
specifier|public
name|int
name|getPrefetchCount
parameter_list|()
block|{
return|return
name|prefetchCount
return|;
block|}
comment|/**      * If the settings should be applied to the entire channel rather than each consumer      * You need to specify the option of prefetchSize, prefetchCount, prefetchGlobal at the same time      */
DECL|method|setPrefetchGlobal (boolean prefetchGlobal)
specifier|public
name|void
name|setPrefetchGlobal
parameter_list|(
name|boolean
name|prefetchGlobal
parameter_list|)
block|{
name|this
operator|.
name|prefetchGlobal
operator|=
name|prefetchGlobal
expr_stmt|;
block|}
DECL|method|isPrefetchGlobal ()
specifier|public
name|boolean
name|isPrefetchGlobal
parameter_list|()
block|{
return|return
name|prefetchGlobal
return|;
block|}
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
comment|/**      * Number of concurrent consumers when consuming from broker. (eg similar as to the same option for the JMS component).      */
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|isDeclare ()
specifier|public
name|boolean
name|isDeclare
parameter_list|()
block|{
return|return
name|declare
return|;
block|}
comment|/**      * If the option is true, camel declare the exchange and queue name and bind them together.      * If the option is false, camel won't declare the exchange and queue name on the server.      */
DECL|method|setDeclare (boolean declare)
specifier|public
name|void
name|setDeclare
parameter_list|(
name|boolean
name|declare
parameter_list|)
block|{
name|this
operator|.
name|declare
operator|=
name|declare
expr_stmt|;
block|}
DECL|method|getDeadLetterExchange ()
specifier|public
name|String
name|getDeadLetterExchange
parameter_list|()
block|{
return|return
name|deadLetterExchange
return|;
block|}
comment|/**      * The name of the dead letter exchange      */
DECL|method|setDeadLetterExchange (String deadLetterExchange)
specifier|public
name|void
name|setDeadLetterExchange
parameter_list|(
name|String
name|deadLetterExchange
parameter_list|)
block|{
name|this
operator|.
name|deadLetterExchange
operator|=
name|deadLetterExchange
expr_stmt|;
block|}
DECL|method|getDeadLetterQueue ()
specifier|public
name|String
name|getDeadLetterQueue
parameter_list|()
block|{
return|return
name|deadLetterQueue
return|;
block|}
comment|/**      * The name of the dead letter queue      */
DECL|method|setDeadLetterQueue (String deadLetterQueue)
specifier|public
name|void
name|setDeadLetterQueue
parameter_list|(
name|String
name|deadLetterQueue
parameter_list|)
block|{
name|this
operator|.
name|deadLetterQueue
operator|=
name|deadLetterQueue
expr_stmt|;
block|}
DECL|method|getDeadLetterRoutingKey ()
specifier|public
name|String
name|getDeadLetterRoutingKey
parameter_list|()
block|{
return|return
name|deadLetterRoutingKey
return|;
block|}
comment|/**      * The routing key for the dead letter exchange      */
DECL|method|setDeadLetterRoutingKey (String deadLetterRoutingKey)
specifier|public
name|void
name|setDeadLetterRoutingKey
parameter_list|(
name|String
name|deadLetterRoutingKey
parameter_list|)
block|{
name|this
operator|.
name|deadLetterRoutingKey
operator|=
name|deadLetterRoutingKey
expr_stmt|;
block|}
DECL|method|getDeadLetterExchangeType ()
specifier|public
name|String
name|getDeadLetterExchangeType
parameter_list|()
block|{
return|return
name|deadLetterExchangeType
return|;
block|}
comment|/**      * The type of the dead letter exchange      */
DECL|method|setDeadLetterExchangeType (String deadLetterExchangeType)
specifier|public
name|void
name|setDeadLetterExchangeType
parameter_list|(
name|String
name|deadLetterExchangeType
parameter_list|)
block|{
name|this
operator|.
name|deadLetterExchangeType
operator|=
name|deadLetterExchangeType
expr_stmt|;
block|}
comment|/**      * Get maximum number of opened channel in pool      */
DECL|method|getChannelPoolMaxSize ()
specifier|public
name|int
name|getChannelPoolMaxSize
parameter_list|()
block|{
return|return
name|channelPoolMaxSize
return|;
block|}
DECL|method|setChannelPoolMaxSize (int channelPoolMaxSize)
specifier|public
name|void
name|setChannelPoolMaxSize
parameter_list|(
name|int
name|channelPoolMaxSize
parameter_list|)
block|{
name|this
operator|.
name|channelPoolMaxSize
operator|=
name|channelPoolMaxSize
expr_stmt|;
block|}
DECL|method|getChannelPoolMaxWait ()
specifier|public
name|long
name|getChannelPoolMaxWait
parameter_list|()
block|{
return|return
name|channelPoolMaxWait
return|;
block|}
comment|/**      * Set the maximum number of milliseconds to wait for a channel from the pool      */
DECL|method|setChannelPoolMaxWait (long channelPoolMaxWait)
specifier|public
name|void
name|setChannelPoolMaxWait
parameter_list|(
name|long
name|channelPoolMaxWait
parameter_list|)
block|{
name|this
operator|.
name|channelPoolMaxWait
operator|=
name|channelPoolMaxWait
expr_stmt|;
block|}
DECL|method|isMandatory ()
specifier|public
name|boolean
name|isMandatory
parameter_list|()
block|{
return|return
name|mandatory
return|;
block|}
comment|/**      * This flag tells the server how to react if the message cannot be routed to a queue.      * If this flag is set, the server will return an unroutable message with a Return method.      * If this flag is zero, the server silently drops the message.      *<p/>      * If the header is present rabbitmq.MANDATORY it will override this option.      */
DECL|method|setMandatory (boolean mandatory)
specifier|public
name|void
name|setMandatory
parameter_list|(
name|boolean
name|mandatory
parameter_list|)
block|{
name|this
operator|.
name|mandatory
operator|=
name|mandatory
expr_stmt|;
block|}
DECL|method|isImmediate ()
specifier|public
name|boolean
name|isImmediate
parameter_list|()
block|{
return|return
name|immediate
return|;
block|}
comment|/**      * This flag tells the server how to react if the message cannot be routed to a queue consumer immediately.      * If this flag is set, the server will return an undeliverable message with a Return method.      * If this flag is zero, the server will queue the message, but with no guarantee that it will ever be consumed.      *<p/>      * If the header is present rabbitmq.IMMEDIATE it will override this option.      */
DECL|method|setImmediate (boolean immediate)
specifier|public
name|void
name|setImmediate
parameter_list|(
name|boolean
name|immediate
parameter_list|)
block|{
name|this
operator|.
name|immediate
operator|=
name|immediate
expr_stmt|;
block|}
DECL|method|getQueueArgsConfigurer ()
specifier|public
name|ArgsConfigurer
name|getQueueArgsConfigurer
parameter_list|()
block|{
return|return
name|queueArgsConfigurer
return|;
block|}
comment|/**      * Set the configurer for setting the queue args in Channel.queueDeclare      */
DECL|method|setQueueArgsConfigurer (ArgsConfigurer queueArgsConfigurer)
specifier|public
name|void
name|setQueueArgsConfigurer
parameter_list|(
name|ArgsConfigurer
name|queueArgsConfigurer
parameter_list|)
block|{
name|this
operator|.
name|queueArgsConfigurer
operator|=
name|queueArgsConfigurer
expr_stmt|;
block|}
DECL|method|getExchangeArgsConfigurer ()
specifier|public
name|ArgsConfigurer
name|getExchangeArgsConfigurer
parameter_list|()
block|{
return|return
name|exchangeArgsConfigurer
return|;
block|}
comment|/**      * Set the configurer for setting the exchange args in Channel.exchangeDeclare      */
DECL|method|setExchangeArgsConfigurer (ArgsConfigurer exchangeArgsConfigurer)
specifier|public
name|void
name|setExchangeArgsConfigurer
parameter_list|(
name|ArgsConfigurer
name|exchangeArgsConfigurer
parameter_list|)
block|{
name|this
operator|.
name|exchangeArgsConfigurer
operator|=
name|exchangeArgsConfigurer
expr_stmt|;
block|}
comment|/**      * Set timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds)      */
DECL|method|setRequestTimeout (long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|this
operator|.
name|requestTimeout
operator|=
name|requestTimeout
expr_stmt|;
block|}
DECL|method|getRequestTimeout ()
specifier|public
name|long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|requestTimeout
return|;
block|}
comment|/**      * Set requestTimeoutCheckerInterval for inOut exchange      */
DECL|method|setRequestTimeoutCheckerInterval (long requestTimeoutCheckerInterval)
specifier|public
name|void
name|setRequestTimeoutCheckerInterval
parameter_list|(
name|long
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|this
operator|.
name|requestTimeoutCheckerInterval
operator|=
name|requestTimeoutCheckerInterval
expr_stmt|;
block|}
DECL|method|getRequestTimeoutCheckerInterval ()
specifier|public
name|long
name|getRequestTimeoutCheckerInterval
parameter_list|()
block|{
return|return
name|requestTimeoutCheckerInterval
return|;
block|}
comment|/**      * Get useMessageIDAsCorrelationID for inOut exchange      */
DECL|method|isUseMessageIDAsCorrelationID ()
specifier|public
name|boolean
name|isUseMessageIDAsCorrelationID
parameter_list|()
block|{
return|return
name|useMessageIDAsCorrelationID
return|;
block|}
comment|/**      * When true and an inOut Exchange failed on the consumer side send the caused Exception back in the response      */
DECL|method|setTransferException (boolean transferException)
specifier|public
name|void
name|setTransferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|this
operator|.
name|transferException
operator|=
name|transferException
expr_stmt|;
block|}
DECL|method|isTransferException ()
specifier|public
name|boolean
name|isTransferException
parameter_list|()
block|{
return|return
name|transferException
return|;
block|}
comment|/**      * When true, the message will be published with<a href="https://www.rabbitmq.com/confirms.html">publisher acknowledgements</a> turned on      */
DECL|method|isPublisherAcknowledgements ()
specifier|public
name|boolean
name|isPublisherAcknowledgements
parameter_list|()
block|{
return|return
name|publisherAcknowledgements
return|;
block|}
DECL|method|setPublisherAcknowledgements (final boolean publisherAcknowledgements)
specifier|public
name|void
name|setPublisherAcknowledgements
parameter_list|(
specifier|final
name|boolean
name|publisherAcknowledgements
parameter_list|)
block|{
name|this
operator|.
name|publisherAcknowledgements
operator|=
name|publisherAcknowledgements
expr_stmt|;
block|}
comment|/**      * The amount of time in milliseconds to wait for a basic.ack response from RabbitMQ server      */
DECL|method|getPublisherAcknowledgementsTimeout ()
specifier|public
name|long
name|getPublisherAcknowledgementsTimeout
parameter_list|()
block|{
return|return
name|publisherAcknowledgementsTimeout
return|;
block|}
DECL|method|setPublisherAcknowledgementsTimeout (final long publisherAcknowledgementsTimeout)
specifier|public
name|void
name|setPublisherAcknowledgementsTimeout
parameter_list|(
specifier|final
name|long
name|publisherAcknowledgementsTimeout
parameter_list|)
block|{
name|this
operator|.
name|publisherAcknowledgementsTimeout
operator|=
name|publisherAcknowledgementsTimeout
expr_stmt|;
block|}
comment|/**      * When true, an exception will be thrown when the message cannot be delivered (basic.return) and the message is      * marked as mandatory.      * PublisherAcknowledgement will also be activated in this case      *      * See also<a href=https://www.rabbitmq.com/confirms.html">publisher acknowledgements</a> - When will messages be      * confirmed?      */
DECL|method|isGuaranteedDeliveries ()
specifier|public
name|boolean
name|isGuaranteedDeliveries
parameter_list|()
block|{
return|return
name|guaranteedDeliveries
return|;
block|}
DECL|method|setGuaranteedDeliveries (boolean guaranteedDeliveries)
specifier|public
name|void
name|setGuaranteedDeliveries
parameter_list|(
name|boolean
name|guaranteedDeliveries
parameter_list|)
block|{
name|this
operator|.
name|guaranteedDeliveries
operator|=
name|guaranteedDeliveries
expr_stmt|;
block|}
comment|/**      * Get replyToType for inOut exchange      */
DECL|method|getReplyToType ()
specifier|public
name|String
name|getReplyToType
parameter_list|()
block|{
return|return
name|replyToType
return|;
block|}
comment|/**      * Gets the Queue to reply to if you dont want to use temporary reply queues      */
DECL|method|getReplyTo ()
specifier|public
name|String
name|getReplyTo
parameter_list|()
block|{
return|return
name|replyTo
return|;
block|}
block|}
end_class

end_unit

