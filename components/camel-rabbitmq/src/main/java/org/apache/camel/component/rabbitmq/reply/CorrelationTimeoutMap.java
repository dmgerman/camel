begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.rabbitmq.reply
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
operator|.
name|reply
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultTimeoutMap
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.TimeoutMap} which is used to track reply messages which  * has been timed out, and thus should trigger the waiting {@link org.apache.camel.Exchange} to  * timeout as well.  *  * @version   */
end_comment

begin_class
DECL|class|CorrelationTimeoutMap
specifier|public
class|class
name|CorrelationTimeoutMap
extends|extends
name|DefaultTimeoutMap
argument_list|<
name|String
argument_list|,
name|ReplyHandler
argument_list|>
block|{
DECL|field|listener
specifier|private
name|CorrelationListener
name|listener
decl_stmt|;
DECL|method|CorrelationTimeoutMap (ScheduledExecutorService executor, long requestMapPollTimeMillis)
specifier|public
name|CorrelationTimeoutMap
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|,
name|long
name|requestMapPollTimeMillis
parameter_list|)
block|{
name|super
argument_list|(
name|executor
argument_list|,
name|requestMapPollTimeMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|setListener (CorrelationListener listener)
specifier|public
name|void
name|setListener
parameter_list|(
name|CorrelationListener
name|listener
parameter_list|)
block|{
comment|// there is only one listener needed
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
DECL|method|onEviction (String key, ReplyHandler value)
specifier|public
name|boolean
name|onEviction
parameter_list|(
name|String
name|key
parameter_list|,
name|ReplyHandler
name|value
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onEviction
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// trigger timeout
try|try
block|{
name|value
operator|.
name|onTimeout
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// must ignore so we ensure we evict the element
name|log
operator|.
name|warn
argument_list|(
literal|"Error processing onTimeout for correlationID: "
operator|+
name|key
operator|+
literal|" due: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// return true to remove the element
name|log
operator|.
name|trace
argument_list|(
literal|"Evicted correlationID: {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|get (String key)
specifier|public
name|ReplyHandler
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|ReplyHandler
name|answer
init|=
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Get correlationID: {} -> {}"
argument_list|,
name|key
argument_list|,
name|answer
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|put (String key, ReplyHandler value, long timeoutMillis)
specifier|public
name|ReplyHandler
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|ReplyHandler
name|value
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onPut
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|ReplyHandler
name|result
decl_stmt|;
if|if
condition|(
name|timeoutMillis
operator|<=
literal|0
condition|)
block|{
comment|// no timeout (must use Integer.MAX_VALUE)
name|result
operator|=
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|super
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Added correlationID: {} to timeout after: {} millis"
argument_list|,
name|key
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|putIfAbsent (String key, ReplyHandler value, long timeoutMillis)
specifier|public
name|ReplyHandler
name|putIfAbsent
parameter_list|(
name|String
name|key
parameter_list|,
name|ReplyHandler
name|value
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"in putIfAbsent with key {}"
argument_list|,
name|key
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onPut
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|ReplyHandler
name|result
decl_stmt|;
if|if
condition|(
name|timeoutMillis
operator|<=
literal|0
condition|)
block|{
comment|// no timeout (must use Integer.MAX_VALUE)
name|result
operator|=
name|super
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|super
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Added correlationID: {} to timeout after: {} millis"
argument_list|,
name|key
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Duplicate correlationID: {} detected"
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|remove (String key)
specifier|public
name|ReplyHandler
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onRemove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|ReplyHandler
name|answer
init|=
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Removed correlationID: {} -> {}"
argument_list|,
name|key
argument_list|,
name|answer
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

