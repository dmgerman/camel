begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|RabbitMQComponent
specifier|public
class|class
name|RabbitMQComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|ARG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|ARG_PREFIX
init|=
literal|"arg."
decl_stmt|;
DECL|field|EXCHANGE_ARG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|EXCHANGE_ARG_PREFIX
init|=
literal|"exchange."
decl_stmt|;
DECL|field|QUEUE_ARG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_ARG_PREFIX
init|=
literal|"queue."
decl_stmt|;
DECL|field|BINDING_ARG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|BINDING_ARG_PREFIX
init|=
literal|"binding."
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RabbitMQComponent
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|hostname
specifier|private
name|String
name|hostname
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"5672"
argument_list|)
DECL|field|portNumber
specifier|private
name|int
name|portNumber
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
name|ConnectionFactory
operator|.
name|DEFAULT_USER
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|username
specifier|private
name|String
name|username
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_USER
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
name|ConnectionFactory
operator|.
name|DEFAULT_PASS
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_PASS
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
name|ConnectionFactory
operator|.
name|DEFAULT_VHOST
argument_list|)
DECL|field|vhost
specifier|private
name|String
name|vhost
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_VHOST
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|addresses
specifier|private
name|Address
index|[]
name|addresses
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|connectionFactory
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoAck
specifier|private
name|boolean
name|autoAck
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoDelete
specifier|private
name|boolean
name|autoDelete
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|durable
specifier|private
name|boolean
name|durable
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|exclusiveConsumer
specifier|private
name|boolean
name|exclusiveConsumer
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|exclusive
specifier|private
name|boolean
name|exclusive
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|passive
specifier|private
name|boolean
name|passive
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|declare
specifier|private
name|boolean
name|declare
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|skipQueueDeclare
specifier|private
name|boolean
name|skipQueueDeclare
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|skipQueueBind
specifier|private
name|boolean
name|skipQueueBind
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|skipExchangeDeclare
specifier|private
name|boolean
name|skipExchangeDeclare
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|deadLetterExchange
specifier|private
name|String
name|deadLetterExchange
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|deadLetterRoutingKey
specifier|private
name|String
name|deadLetterRoutingKey
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|deadLetterQueue
specifier|private
name|String
name|deadLetterQueue
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|defaultValue
operator|=
literal|"direct"
argument_list|,
name|enums
operator|=
literal|"direct,fanout,headers,topic"
argument_list|)
DECL|field|deadLetterExchangeType
specifier|private
name|String
name|deadLetterExchangeType
init|=
literal|"direct"
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|sslProtocol
specifier|private
name|String
name|sslProtocol
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|trustManager
specifier|private
name|TrustManager
name|trustManager
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|threadPoolSize
specifier|private
name|int
name|threadPoolSize
init|=
literal|10
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoDetectConnectionFactory
specifier|private
name|boolean
name|autoDetectConnectionFactory
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|)
DECL|field|connectionTimeout
specifier|private
name|int
name|connectionTimeout
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_CHANNEL_MAX
argument_list|)
DECL|field|requestedChannelMax
specifier|private
name|int
name|requestedChannelMax
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_CHANNEL_MAX
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_FRAME_MAX
argument_list|)
DECL|field|requestedFrameMax
specifier|private
name|int
name|requestedFrameMax
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_FRAME_MAX
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|ConnectionFactory
operator|.
name|DEFAULT_HEARTBEAT
argument_list|)
DECL|field|requestedHeartbeat
specifier|private
name|int
name|requestedHeartbeat
init|=
name|ConnectionFactory
operator|.
name|DEFAULT_HEARTBEAT
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|automaticRecoveryEnabled
specifier|private
name|Boolean
name|automaticRecoveryEnabled
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"5000"
argument_list|)
DECL|field|networkRecoveryInterval
specifier|private
name|Integer
name|networkRecoveryInterval
init|=
literal|5000
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|topologyRecoveryEnabled
specifier|private
name|Boolean
name|topologyRecoveryEnabled
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchEnabled
specifier|private
name|boolean
name|prefetchEnabled
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchSize
specifier|private
name|int
name|prefetchSize
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchCount
specifier|private
name|int
name|prefetchCount
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|prefetchGlobal
specifier|private
name|boolean
name|prefetchGlobal
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|channelPoolMaxSize
specifier|private
name|int
name|channelPoolMaxSize
init|=
literal|10
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"1000"
argument_list|)
DECL|field|channelPoolMaxWait
specifier|private
name|long
name|channelPoolMaxWait
init|=
literal|1000
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"20000"
argument_list|)
DECL|field|requestTimeout
specifier|private
name|long
name|requestTimeout
init|=
literal|20000
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"1000"
argument_list|)
DECL|field|requestTimeoutCheckerInterval
specifier|private
name|long
name|requestTimeoutCheckerInterval
init|=
literal|1000
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|transferException
specifier|private
name|boolean
name|transferException
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|mandatory
specifier|private
name|boolean
name|mandatory
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|immediate
specifier|private
name|boolean
name|immediate
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|publisherAcknowledgements
specifier|private
name|boolean
name|publisherAcknowledgements
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|publisherAcknowledgementsTimeout
specifier|private
name|long
name|publisherAcknowledgementsTimeout
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|guaranteedDeliveries
specifier|private
name|boolean
name|guaranteedDeliveries
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|args
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|clientProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
decl_stmt|;
DECL|method|RabbitMQComponent ()
specifier|public
name|RabbitMQComponent
parameter_list|()
block|{
name|super
argument_list|(
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|RabbitMQComponent (CamelContext context)
specifier|public
name|RabbitMQComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> params)
specifier|protected
name|RabbitMQEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|host
init|=
name|getHostname
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|getPortNumber
argument_list|()
decl_stmt|;
name|String
name|exchangeName
init|=
name|remaining
decl_stmt|;
if|if
condition|(
name|remaining
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|||
name|remaining
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The old syntax rabbitmq://hostname:port/exchangeName is deprecated. You should configure the hostname on the component or ConnectionFactory"
argument_list|)
expr_stmt|;
try|try
block|{
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
literal|"http://"
operator|+
name|remaining
argument_list|)
decl_stmt|;
name|host
operator|=
name|u
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|port
operator|=
name|u
operator|.
name|getPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|u
operator|.
name|getPath
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|exchangeName
operator|=
name|u
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchangeName
operator|=
literal|""
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// ConnectionFactory reference
name|ConnectionFactory
name|connectionFactory
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|params
argument_list|,
literal|"connectionFactory"
argument_list|,
name|ConnectionFactory
operator|.
name|class
argument_list|,
name|getConnectionFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|// try to lookup if there is a single instance in the registry of the ConnectionFactory
if|if
condition|(
name|connectionFactory
operator|==
literal|null
operator|&&
name|isAutoDetectConnectionFactory
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectionFactory
argument_list|>
name|map
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|ConnectionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
operator|&&
name|map
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ConnectionFactory
argument_list|>
name|entry
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|connectionFactory
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"anonymous"
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Auto-detected single instance: {} of type ConnectionFactory in Registry to be used as ConnectionFactory when creating endpoint: {}"
argument_list|,
name|name
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|params
argument_list|,
literal|"clientProperties"
argument_list|,
name|Map
operator|.
name|class
argument_list|,
name|getClientProperties
argument_list|()
argument_list|)
decl_stmt|;
name|TrustManager
name|trustManager
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|params
argument_list|,
literal|"trustManager"
argument_list|,
name|TrustManager
operator|.
name|class
argument_list|,
name|getTrustManager
argument_list|()
argument_list|)
decl_stmt|;
name|RabbitMQEndpoint
name|endpoint
decl_stmt|;
if|if
condition|(
name|connectionFactory
operator|==
literal|null
condition|)
block|{
name|endpoint
operator|=
operator|new
name|RabbitMQEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|=
operator|new
name|RabbitMQEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|connectionFactory
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setHostname
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPortNumber
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setUsername
argument_list|(
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPassword
argument_list|(
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setVhost
argument_list|(
name|getVhost
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setAddresses
argument_list|(
name|getAddresses
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setThreadPoolSize
argument_list|(
name|getThreadPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setExchangeName
argument_list|(
name|exchangeName
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setClientProperties
argument_list|(
name|clientProperties
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setSslProtocol
argument_list|(
name|getSslProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setTrustManager
argument_list|(
name|trustManager
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setConnectionTimeout
argument_list|(
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setRequestedChannelMax
argument_list|(
name|getRequestedChannelMax
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setRequestedFrameMax
argument_list|(
name|getRequestedFrameMax
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setRequestedHeartbeat
argument_list|(
name|getRequestedHeartbeat
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setAutomaticRecoveryEnabled
argument_list|(
name|getAutomaticRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setNetworkRecoveryInterval
argument_list|(
name|getNetworkRecoveryInterval
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setTopologyRecoveryEnabled
argument_list|(
name|getTopologyRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPrefetchEnabled
argument_list|(
name|isPrefetchEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPrefetchSize
argument_list|(
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPrefetchCount
argument_list|(
name|getPrefetchCount
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPrefetchGlobal
argument_list|(
name|isPrefetchGlobal
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setChannelPoolMaxSize
argument_list|(
name|getChannelPoolMaxSize
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setChannelPoolMaxWait
argument_list|(
name|getChannelPoolMaxWait
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setRequestTimeout
argument_list|(
name|getRequestTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setRequestTimeoutCheckerInterval
argument_list|(
name|getRequestTimeoutCheckerInterval
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setTransferException
argument_list|(
name|isTransferException
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPublisherAcknowledgements
argument_list|(
name|isPublisherAcknowledgements
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPublisherAcknowledgementsTimeout
argument_list|(
name|getPublisherAcknowledgementsTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setGuaranteedDeliveries
argument_list|(
name|isGuaranteedDeliveries
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setMandatory
argument_list|(
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setImmediate
argument_list|(
name|isImmediate
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setAutoAck
argument_list|(
name|isAutoAck
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setAutoDelete
argument_list|(
name|isAutoDelete
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDurable
argument_list|(
name|isDurable
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setExclusive
argument_list|(
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setExclusiveConsumer
argument_list|(
name|isExclusiveConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setPassive
argument_list|(
name|isPassive
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setSkipExchangeDeclare
argument_list|(
name|isSkipExchangeDeclare
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setSkipQueueBind
argument_list|(
name|isSkipQueueBind
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setSkipQueueDeclare
argument_list|(
name|isSkipQueueDeclare
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDeclare
argument_list|(
name|isDeclare
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDeadLetterExchange
argument_list|(
name|getDeadLetterExchange
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDeadLetterExchangeType
argument_list|(
name|getDeadLetterExchangeType
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDeadLetterQueue
argument_list|(
name|getDeadLetterQueue
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setDeadLetterRoutingKey
argument_list|(
name|getDeadLetterRoutingKey
argument_list|()
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating RabbitMQEndpoint with host {}:{} and exchangeName: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|endpoint
operator|.
name|getHostname
argument_list|()
block|,
name|endpoint
operator|.
name|getPortNumber
argument_list|()
block|,
name|endpoint
operator|.
name|getExchangeName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|localArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getArgs
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// copy over the component configured args
name|localArgs
operator|.
name|putAll
argument_list|(
name|getArgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|localArgs
operator|.
name|putAll
argument_list|(
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|params
argument_list|,
name|ARG_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setArgs
argument_list|(
name|localArgs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|argsCopy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|localArgs
argument_list|)
decl_stmt|;
comment|// Combine the three types of rabbit arguments with their individual endpoint properties
name|endpoint
operator|.
name|getExchangeArgs
argument_list|()
operator|.
name|putAll
argument_list|(
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|argsCopy
argument_list|,
name|EXCHANGE_ARG_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getQueueArgs
argument_list|()
operator|.
name|putAll
argument_list|(
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|argsCopy
argument_list|,
name|QUEUE_ARG_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getBindingArgs
argument_list|()
operator|.
name|putAll
argument_list|(
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|argsCopy
argument_list|,
name|BINDING_ARG_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
comment|/**      * The hostname of the running rabbitmq instance or cluster.      */
DECL|method|setHostname (String hostname)
specifier|public
name|void
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
DECL|method|getPortNumber ()
specifier|public
name|int
name|getPortNumber
parameter_list|()
block|{
return|return
name|portNumber
return|;
block|}
comment|/**      * Port number for the host with the running rabbitmq instance or cluster.      */
DECL|method|setPortNumber (int portNumber)
specifier|public
name|void
name|setPortNumber
parameter_list|(
name|int
name|portNumber
parameter_list|)
block|{
name|this
operator|.
name|portNumber
operator|=
name|portNumber
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/**      * Username in case of authenticated access      */
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * Password for authenticated access      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getVhost ()
specifier|public
name|String
name|getVhost
parameter_list|()
block|{
return|return
name|vhost
return|;
block|}
comment|/**      * The vhost for the channel      */
DECL|method|setVhost (String vhost)
specifier|public
name|void
name|setVhost
parameter_list|(
name|String
name|vhost
parameter_list|)
block|{
name|this
operator|.
name|vhost
operator|=
name|vhost
expr_stmt|;
block|}
comment|/**      * If this option is set, camel-rabbitmq will try to create connection based      * on the setting of option addresses. The addresses value is a string which      * looks like "server1:12345, server2:12345"      */
DECL|method|setAddresses (String addresses)
specifier|public
name|void
name|setAddresses
parameter_list|(
name|String
name|addresses
parameter_list|)
block|{
name|Address
index|[]
name|addressArray
init|=
name|Address
operator|.
name|parseAddresses
argument_list|(
name|addresses
argument_list|)
decl_stmt|;
if|if
condition|(
name|addressArray
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|addresses
operator|=
name|addressArray
expr_stmt|;
block|}
block|}
comment|/**      * If this option is set, camel-rabbitmq will try to create connection based      * on the setting of option addresses. The addresses value is a string which      * looks like "server1:12345, server2:12345"      */
DECL|method|setAddresses (Address[] addresses)
specifier|public
name|void
name|setAddresses
parameter_list|(
name|Address
index|[]
name|addresses
parameter_list|)
block|{
name|this
operator|.
name|addresses
operator|=
name|addresses
expr_stmt|;
block|}
DECL|method|getAddresses ()
specifier|public
name|Address
index|[]
name|getAddresses
parameter_list|()
block|{
return|return
name|addresses
return|;
block|}
DECL|method|getConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
return|;
block|}
comment|/**      * To use a custom RabbitMQ connection factory. When this option is set, all      * connection options (connectionTimeout, requestedChannelMax...) set on URI      * are not used      */
DECL|method|setConnectionFactory (ConnectionFactory connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
DECL|method|getThreadPoolSize ()
specifier|public
name|int
name|getThreadPoolSize
parameter_list|()
block|{
return|return
name|threadPoolSize
return|;
block|}
comment|/**      * The consumer uses a Thread Pool Executor with a fixed number of threads.      * This setting allows you to set that number of threads.      */
DECL|method|setThreadPoolSize (int threadPoolSize)
specifier|public
name|void
name|setThreadPoolSize
parameter_list|(
name|int
name|threadPoolSize
parameter_list|)
block|{
name|this
operator|.
name|threadPoolSize
operator|=
name|threadPoolSize
expr_stmt|;
block|}
DECL|method|isAutoDetectConnectionFactory ()
specifier|public
name|boolean
name|isAutoDetectConnectionFactory
parameter_list|()
block|{
return|return
name|autoDetectConnectionFactory
return|;
block|}
comment|/**      * Whether to auto-detect looking up RabbitMQ connection factory from the registry.      * When enabled and a single instance of the connection factory is found then it will be used.      * An explicit connection factory can be configured on the component or endpoint level which takes precedence.      */
DECL|method|setAutoDetectConnectionFactory (boolean autoDetectConnectionFactory)
specifier|public
name|void
name|setAutoDetectConnectionFactory
parameter_list|(
name|boolean
name|autoDetectConnectionFactory
parameter_list|)
block|{
name|this
operator|.
name|autoDetectConnectionFactory
operator|=
name|autoDetectConnectionFactory
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|int
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
comment|/**      * Connection timeout      */
DECL|method|setConnectionTimeout (int connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getRequestedChannelMax ()
specifier|public
name|int
name|getRequestedChannelMax
parameter_list|()
block|{
return|return
name|requestedChannelMax
return|;
block|}
comment|/**      * Connection requested channel max (max number of channels offered)      */
DECL|method|setRequestedChannelMax (int requestedChannelMax)
specifier|public
name|void
name|setRequestedChannelMax
parameter_list|(
name|int
name|requestedChannelMax
parameter_list|)
block|{
name|this
operator|.
name|requestedChannelMax
operator|=
name|requestedChannelMax
expr_stmt|;
block|}
DECL|method|getRequestedFrameMax ()
specifier|public
name|int
name|getRequestedFrameMax
parameter_list|()
block|{
return|return
name|requestedFrameMax
return|;
block|}
comment|/**      * Connection requested frame max (max size of frame offered)      */
DECL|method|setRequestedFrameMax (int requestedFrameMax)
specifier|public
name|void
name|setRequestedFrameMax
parameter_list|(
name|int
name|requestedFrameMax
parameter_list|)
block|{
name|this
operator|.
name|requestedFrameMax
operator|=
name|requestedFrameMax
expr_stmt|;
block|}
DECL|method|getRequestedHeartbeat ()
specifier|public
name|int
name|getRequestedHeartbeat
parameter_list|()
block|{
return|return
name|requestedHeartbeat
return|;
block|}
comment|/**      * Connection requested heartbeat (heart-beat in seconds offered)      */
DECL|method|setRequestedHeartbeat (int requestedHeartbeat)
specifier|public
name|void
name|setRequestedHeartbeat
parameter_list|(
name|int
name|requestedHeartbeat
parameter_list|)
block|{
name|this
operator|.
name|requestedHeartbeat
operator|=
name|requestedHeartbeat
expr_stmt|;
block|}
DECL|method|getAutomaticRecoveryEnabled ()
specifier|public
name|Boolean
name|getAutomaticRecoveryEnabled
parameter_list|()
block|{
return|return
name|automaticRecoveryEnabled
return|;
block|}
comment|/**      * Enables connection automatic recovery (uses connection implementation      * that performs automatic recovery when connection shutdown is not      * initiated by the application)      */
DECL|method|setAutomaticRecoveryEnabled (Boolean automaticRecoveryEnabled)
specifier|public
name|void
name|setAutomaticRecoveryEnabled
parameter_list|(
name|Boolean
name|automaticRecoveryEnabled
parameter_list|)
block|{
name|this
operator|.
name|automaticRecoveryEnabled
operator|=
name|automaticRecoveryEnabled
expr_stmt|;
block|}
DECL|method|getNetworkRecoveryInterval ()
specifier|public
name|Integer
name|getNetworkRecoveryInterval
parameter_list|()
block|{
return|return
name|networkRecoveryInterval
return|;
block|}
comment|/**      * Network recovery interval in milliseconds (interval used when recovering      * from network failure)      */
DECL|method|setNetworkRecoveryInterval (Integer networkRecoveryInterval)
specifier|public
name|void
name|setNetworkRecoveryInterval
parameter_list|(
name|Integer
name|networkRecoveryInterval
parameter_list|)
block|{
name|this
operator|.
name|networkRecoveryInterval
operator|=
name|networkRecoveryInterval
expr_stmt|;
block|}
DECL|method|getTopologyRecoveryEnabled ()
specifier|public
name|Boolean
name|getTopologyRecoveryEnabled
parameter_list|()
block|{
return|return
name|topologyRecoveryEnabled
return|;
block|}
comment|/**      * Enables connection topology recovery (should topology recovery be      * performed?)      */
DECL|method|setTopologyRecoveryEnabled (Boolean topologyRecoveryEnabled)
specifier|public
name|void
name|setTopologyRecoveryEnabled
parameter_list|(
name|Boolean
name|topologyRecoveryEnabled
parameter_list|)
block|{
name|this
operator|.
name|topologyRecoveryEnabled
operator|=
name|topologyRecoveryEnabled
expr_stmt|;
block|}
DECL|method|isPrefetchEnabled ()
specifier|public
name|boolean
name|isPrefetchEnabled
parameter_list|()
block|{
return|return
name|prefetchEnabled
return|;
block|}
comment|/**      * Enables the quality of service on the RabbitMQConsumer side. You need to      * specify the option of prefetchSize, prefetchCount, prefetchGlobal at the      * same time      */
DECL|method|setPrefetchEnabled (boolean prefetchEnabled)
specifier|public
name|void
name|setPrefetchEnabled
parameter_list|(
name|boolean
name|prefetchEnabled
parameter_list|)
block|{
name|this
operator|.
name|prefetchEnabled
operator|=
name|prefetchEnabled
expr_stmt|;
block|}
comment|/**      * The maximum amount of content (measured in octets) that the server will      * deliver, 0 if unlimited. You need to specify the option of prefetchSize,      * prefetchCount, prefetchGlobal at the same time      */
DECL|method|setPrefetchSize (int prefetchSize)
specifier|public
name|void
name|setPrefetchSize
parameter_list|(
name|int
name|prefetchSize
parameter_list|)
block|{
name|this
operator|.
name|prefetchSize
operator|=
name|prefetchSize
expr_stmt|;
block|}
DECL|method|getPrefetchSize ()
specifier|public
name|int
name|getPrefetchSize
parameter_list|()
block|{
return|return
name|prefetchSize
return|;
block|}
comment|/**      * The maximum number of messages that the server will deliver, 0 if      * unlimited. You need to specify the option of prefetchSize, prefetchCount,      * prefetchGlobal at the same time      */
DECL|method|setPrefetchCount (int prefetchCount)
specifier|public
name|void
name|setPrefetchCount
parameter_list|(
name|int
name|prefetchCount
parameter_list|)
block|{
name|this
operator|.
name|prefetchCount
operator|=
name|prefetchCount
expr_stmt|;
block|}
DECL|method|getPrefetchCount ()
specifier|public
name|int
name|getPrefetchCount
parameter_list|()
block|{
return|return
name|prefetchCount
return|;
block|}
comment|/**      * If the settings should be applied to the entire channel rather than each      * consumer You need to specify the option of prefetchSize, prefetchCount,      * prefetchGlobal at the same time      */
DECL|method|setPrefetchGlobal (boolean prefetchGlobal)
specifier|public
name|void
name|setPrefetchGlobal
parameter_list|(
name|boolean
name|prefetchGlobal
parameter_list|)
block|{
name|this
operator|.
name|prefetchGlobal
operator|=
name|prefetchGlobal
expr_stmt|;
block|}
DECL|method|isPrefetchGlobal ()
specifier|public
name|boolean
name|isPrefetchGlobal
parameter_list|()
block|{
return|return
name|prefetchGlobal
return|;
block|}
comment|/**      * Get maximum number of opened channel in pool      */
DECL|method|getChannelPoolMaxSize ()
specifier|public
name|int
name|getChannelPoolMaxSize
parameter_list|()
block|{
return|return
name|channelPoolMaxSize
return|;
block|}
DECL|method|setChannelPoolMaxSize (int channelPoolMaxSize)
specifier|public
name|void
name|setChannelPoolMaxSize
parameter_list|(
name|int
name|channelPoolMaxSize
parameter_list|)
block|{
name|this
operator|.
name|channelPoolMaxSize
operator|=
name|channelPoolMaxSize
expr_stmt|;
block|}
DECL|method|getChannelPoolMaxWait ()
specifier|public
name|long
name|getChannelPoolMaxWait
parameter_list|()
block|{
return|return
name|channelPoolMaxWait
return|;
block|}
comment|/**      * Set the maximum number of milliseconds to wait for a channel from the      * pool      */
DECL|method|setChannelPoolMaxWait (long channelPoolMaxWait)
specifier|public
name|void
name|setChannelPoolMaxWait
parameter_list|(
name|long
name|channelPoolMaxWait
parameter_list|)
block|{
name|this
operator|.
name|channelPoolMaxWait
operator|=
name|channelPoolMaxWait
expr_stmt|;
block|}
comment|/**      * Set timeout for waiting for a reply when using the InOut Exchange Pattern      * (in milliseconds)      */
DECL|method|setRequestTimeout (long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|this
operator|.
name|requestTimeout
operator|=
name|requestTimeout
expr_stmt|;
block|}
DECL|method|getRequestTimeout ()
specifier|public
name|long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|requestTimeout
return|;
block|}
comment|/**      * Set requestTimeoutCheckerInterval for inOut exchange      */
DECL|method|setRequestTimeoutCheckerInterval (long requestTimeoutCheckerInterval)
specifier|public
name|void
name|setRequestTimeoutCheckerInterval
parameter_list|(
name|long
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|this
operator|.
name|requestTimeoutCheckerInterval
operator|=
name|requestTimeoutCheckerInterval
expr_stmt|;
block|}
DECL|method|getRequestTimeoutCheckerInterval ()
specifier|public
name|long
name|getRequestTimeoutCheckerInterval
parameter_list|()
block|{
return|return
name|requestTimeoutCheckerInterval
return|;
block|}
comment|/**      * When true and an inOut Exchange failed on the consumer side send the      * caused Exception back in the response      */
DECL|method|setTransferException (boolean transferException)
specifier|public
name|void
name|setTransferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|this
operator|.
name|transferException
operator|=
name|transferException
expr_stmt|;
block|}
DECL|method|isTransferException ()
specifier|public
name|boolean
name|isTransferException
parameter_list|()
block|{
return|return
name|transferException
return|;
block|}
comment|/**      * When true, the message will be published with      *<a href="https://www.rabbitmq.com/confirms.html">publisher acknowledgements</a> turned on      */
DECL|method|isPublisherAcknowledgements ()
specifier|public
name|boolean
name|isPublisherAcknowledgements
parameter_list|()
block|{
return|return
name|publisherAcknowledgements
return|;
block|}
DECL|method|setPublisherAcknowledgements (final boolean publisherAcknowledgements)
specifier|public
name|void
name|setPublisherAcknowledgements
parameter_list|(
specifier|final
name|boolean
name|publisherAcknowledgements
parameter_list|)
block|{
name|this
operator|.
name|publisherAcknowledgements
operator|=
name|publisherAcknowledgements
expr_stmt|;
block|}
comment|/**      * The amount of time in milliseconds to wait for a basic.ack response from      * RabbitMQ server      */
DECL|method|getPublisherAcknowledgementsTimeout ()
specifier|public
name|long
name|getPublisherAcknowledgementsTimeout
parameter_list|()
block|{
return|return
name|publisherAcknowledgementsTimeout
return|;
block|}
DECL|method|setPublisherAcknowledgementsTimeout (final long publisherAcknowledgementsTimeout)
specifier|public
name|void
name|setPublisherAcknowledgementsTimeout
parameter_list|(
specifier|final
name|long
name|publisherAcknowledgementsTimeout
parameter_list|)
block|{
name|this
operator|.
name|publisherAcknowledgementsTimeout
operator|=
name|publisherAcknowledgementsTimeout
expr_stmt|;
block|}
comment|/**      * When true, an exception will be thrown when the message cannot be      * delivered (basic.return) and the message is marked as mandatory.      * PublisherAcknowledgement will also be activated in this case.      * See also<a href=https://www.rabbitmq.com/confirms.html">publisher acknowledgements</a>      * - When will messages be confirmed.      */
DECL|method|isGuaranteedDeliveries ()
specifier|public
name|boolean
name|isGuaranteedDeliveries
parameter_list|()
block|{
return|return
name|guaranteedDeliveries
return|;
block|}
DECL|method|setGuaranteedDeliveries (boolean guaranteedDeliveries)
specifier|public
name|void
name|setGuaranteedDeliveries
parameter_list|(
name|boolean
name|guaranteedDeliveries
parameter_list|)
block|{
name|this
operator|.
name|guaranteedDeliveries
operator|=
name|guaranteedDeliveries
expr_stmt|;
block|}
DECL|method|isMandatory ()
specifier|public
name|boolean
name|isMandatory
parameter_list|()
block|{
return|return
name|mandatory
return|;
block|}
comment|/**      * This flag tells the server how to react if the message cannot be routed      * to a queue. If this flag is set, the server will return an unroutable      * message with a Return method. If this flag is zero, the server silently      * drops the message.      *<p/>      * If the header is present rabbitmq.MANDATORY it will override this option.      */
DECL|method|setMandatory (boolean mandatory)
specifier|public
name|void
name|setMandatory
parameter_list|(
name|boolean
name|mandatory
parameter_list|)
block|{
name|this
operator|.
name|mandatory
operator|=
name|mandatory
expr_stmt|;
block|}
DECL|method|isImmediate ()
specifier|public
name|boolean
name|isImmediate
parameter_list|()
block|{
return|return
name|immediate
return|;
block|}
comment|/**      * This flag tells the server how to react if the message cannot be routed      * to a queue consumer immediately. If this flag is set, the server will      * return an undeliverable message with a Return method. If this flag is      * zero, the server will queue the message, but with no guarantee that it      * will ever be consumed.      *<p/>      * If the header is present rabbitmq.IMMEDIATE it will override this option.      */
DECL|method|setImmediate (boolean immediate)
specifier|public
name|void
name|setImmediate
parameter_list|(
name|boolean
name|immediate
parameter_list|)
block|{
name|this
operator|.
name|immediate
operator|=
name|immediate
expr_stmt|;
block|}
comment|/**      * Specify arguments for configuring the different RabbitMQ concepts, a      * different prefix is required for each:      *<ul>      *<li>Exchange: arg.exchange.</li>      *<li>Queue: arg.queue.</li>      *<li>Binding: arg.binding.</li>      *</ul>      * For example to declare a queue with message ttl argument:      * http://localhost:5672/exchange/queue?args=arg.queue.x-message-ttl=60000      */
DECL|method|setArgs (Map<String, Object> args)
specifier|public
name|void
name|setArgs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
DECL|method|getArgs ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
DECL|method|getClientProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getClientProperties
parameter_list|()
block|{
return|return
name|clientProperties
return|;
block|}
comment|/**      * Connection client properties (client info used in negotiating with the server)      */
DECL|method|setClientProperties (Map<String, Object> clientProperties)
specifier|public
name|void
name|setClientProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|clientProperties
parameter_list|)
block|{
name|this
operator|.
name|clientProperties
operator|=
name|clientProperties
expr_stmt|;
block|}
DECL|method|getSslProtocol ()
specifier|public
name|String
name|getSslProtocol
parameter_list|()
block|{
return|return
name|sslProtocol
return|;
block|}
comment|/**      * Enables SSL on connection, accepted value are `true`, `TLS` and 'SSLv3`      */
DECL|method|setSslProtocol (String sslProtocol)
specifier|public
name|void
name|setSslProtocol
parameter_list|(
name|String
name|sslProtocol
parameter_list|)
block|{
name|this
operator|.
name|sslProtocol
operator|=
name|sslProtocol
expr_stmt|;
block|}
DECL|method|getTrustManager ()
specifier|public
name|TrustManager
name|getTrustManager
parameter_list|()
block|{
return|return
name|trustManager
return|;
block|}
comment|/**      * Configure SSL trust manager, SSL should be enabled for this option to be effective      */
DECL|method|setTrustManager (TrustManager trustManager)
specifier|public
name|void
name|setTrustManager
parameter_list|(
name|TrustManager
name|trustManager
parameter_list|)
block|{
name|this
operator|.
name|trustManager
operator|=
name|trustManager
expr_stmt|;
block|}
DECL|method|isAutoAck ()
specifier|public
name|boolean
name|isAutoAck
parameter_list|()
block|{
return|return
name|autoAck
return|;
block|}
comment|/**      * If messages should be auto acknowledged      */
DECL|method|setAutoAck (boolean autoAck)
specifier|public
name|void
name|setAutoAck
parameter_list|(
name|boolean
name|autoAck
parameter_list|)
block|{
name|this
operator|.
name|autoAck
operator|=
name|autoAck
expr_stmt|;
block|}
DECL|method|isAutoDelete ()
specifier|public
name|boolean
name|isAutoDelete
parameter_list|()
block|{
return|return
name|autoDelete
return|;
block|}
comment|/**      * If it is true, the exchange will be deleted when it is no longer in use      */
DECL|method|setAutoDelete (boolean autoDelete)
specifier|public
name|void
name|setAutoDelete
parameter_list|(
name|boolean
name|autoDelete
parameter_list|)
block|{
name|this
operator|.
name|autoDelete
operator|=
name|autoDelete
expr_stmt|;
block|}
DECL|method|isDurable ()
specifier|public
name|boolean
name|isDurable
parameter_list|()
block|{
return|return
name|durable
return|;
block|}
comment|/**      * If we are declaring a durable exchange (the exchange will survive a      * server restart)      */
DECL|method|setDurable (boolean durable)
specifier|public
name|void
name|setDurable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|this
operator|.
name|durable
operator|=
name|durable
expr_stmt|;
block|}
DECL|method|isExclusive ()
specifier|public
name|boolean
name|isExclusive
parameter_list|()
block|{
return|return
name|exclusive
return|;
block|}
comment|/**      * Exclusive queues may only be accessed by the current connection, and are      * deleted when that connection closes.      */
DECL|method|setExclusive (boolean exclusive)
specifier|public
name|void
name|setExclusive
parameter_list|(
name|boolean
name|exclusive
parameter_list|)
block|{
name|this
operator|.
name|exclusive
operator|=
name|exclusive
expr_stmt|;
block|}
DECL|method|isExclusiveConsumer ()
specifier|public
name|boolean
name|isExclusiveConsumer
parameter_list|()
block|{
return|return
name|exclusiveConsumer
return|;
block|}
comment|/**      * Request exclusive access to the queue (meaning only this consumer can access the queue). This is useful      * when you want a long-lived shared queue to be temporarily accessible by just one consumer.      */
DECL|method|setExclusiveConsumer (boolean exclusiveConsumer)
specifier|public
name|void
name|setExclusiveConsumer
parameter_list|(
name|boolean
name|exclusiveConsumer
parameter_list|)
block|{
name|this
operator|.
name|exclusiveConsumer
operator|=
name|exclusiveConsumer
expr_stmt|;
block|}
DECL|method|isPassive ()
specifier|public
name|boolean
name|isPassive
parameter_list|()
block|{
return|return
name|passive
return|;
block|}
comment|/**      * Passive queues depend on the queue already to be available at RabbitMQ.      */
DECL|method|setPassive (boolean passive)
specifier|public
name|void
name|setPassive
parameter_list|(
name|boolean
name|passive
parameter_list|)
block|{
name|this
operator|.
name|passive
operator|=
name|passive
expr_stmt|;
block|}
comment|/**      * If true the producer will not declare and bind a queue. This can be used      * for directing messages via an existing routing key.      */
DECL|method|setSkipQueueDeclare (boolean skipQueueDeclare)
specifier|public
name|void
name|setSkipQueueDeclare
parameter_list|(
name|boolean
name|skipQueueDeclare
parameter_list|)
block|{
name|this
operator|.
name|skipQueueDeclare
operator|=
name|skipQueueDeclare
expr_stmt|;
block|}
DECL|method|isSkipQueueDeclare ()
specifier|public
name|boolean
name|isSkipQueueDeclare
parameter_list|()
block|{
return|return
name|skipQueueDeclare
return|;
block|}
comment|/**      * If true the queue will not be bound to the exchange after declaring it      */
DECL|method|isSkipQueueBind ()
specifier|public
name|boolean
name|isSkipQueueBind
parameter_list|()
block|{
return|return
name|skipQueueBind
return|;
block|}
DECL|method|setSkipQueueBind (boolean skipQueueBind)
specifier|public
name|void
name|setSkipQueueBind
parameter_list|(
name|boolean
name|skipQueueBind
parameter_list|)
block|{
name|this
operator|.
name|skipQueueBind
operator|=
name|skipQueueBind
expr_stmt|;
block|}
comment|/**      * This can be used if we need to declare the queue but not the exchange      */
DECL|method|setSkipExchangeDeclare (boolean skipExchangeDeclare)
specifier|public
name|void
name|setSkipExchangeDeclare
parameter_list|(
name|boolean
name|skipExchangeDeclare
parameter_list|)
block|{
name|this
operator|.
name|skipExchangeDeclare
operator|=
name|skipExchangeDeclare
expr_stmt|;
block|}
DECL|method|isSkipExchangeDeclare ()
specifier|public
name|boolean
name|isSkipExchangeDeclare
parameter_list|()
block|{
return|return
name|skipExchangeDeclare
return|;
block|}
DECL|method|isDeclare ()
specifier|public
name|boolean
name|isDeclare
parameter_list|()
block|{
return|return
name|declare
return|;
block|}
comment|/**      * If the option is true, camel declare the exchange and queue name and bind      * them together. If the option is false, camel won't declare the exchange      * and queue name on the server.      */
DECL|method|setDeclare (boolean declare)
specifier|public
name|void
name|setDeclare
parameter_list|(
name|boolean
name|declare
parameter_list|)
block|{
name|this
operator|.
name|declare
operator|=
name|declare
expr_stmt|;
block|}
DECL|method|getDeadLetterExchange ()
specifier|public
name|String
name|getDeadLetterExchange
parameter_list|()
block|{
return|return
name|deadLetterExchange
return|;
block|}
comment|/**      * The name of the dead letter exchange      */
DECL|method|setDeadLetterExchange (String deadLetterExchange)
specifier|public
name|void
name|setDeadLetterExchange
parameter_list|(
name|String
name|deadLetterExchange
parameter_list|)
block|{
name|this
operator|.
name|deadLetterExchange
operator|=
name|deadLetterExchange
expr_stmt|;
block|}
DECL|method|getDeadLetterQueue ()
specifier|public
name|String
name|getDeadLetterQueue
parameter_list|()
block|{
return|return
name|deadLetterQueue
return|;
block|}
comment|/**      * The name of the dead letter queue      */
DECL|method|setDeadLetterQueue (String deadLetterQueue)
specifier|public
name|void
name|setDeadLetterQueue
parameter_list|(
name|String
name|deadLetterQueue
parameter_list|)
block|{
name|this
operator|.
name|deadLetterQueue
operator|=
name|deadLetterQueue
expr_stmt|;
block|}
DECL|method|getDeadLetterRoutingKey ()
specifier|public
name|String
name|getDeadLetterRoutingKey
parameter_list|()
block|{
return|return
name|deadLetterRoutingKey
return|;
block|}
comment|/**      * The routing key for the dead letter exchange      */
DECL|method|setDeadLetterRoutingKey (String deadLetterRoutingKey)
specifier|public
name|void
name|setDeadLetterRoutingKey
parameter_list|(
name|String
name|deadLetterRoutingKey
parameter_list|)
block|{
name|this
operator|.
name|deadLetterRoutingKey
operator|=
name|deadLetterRoutingKey
expr_stmt|;
block|}
DECL|method|getDeadLetterExchangeType ()
specifier|public
name|String
name|getDeadLetterExchangeType
parameter_list|()
block|{
return|return
name|deadLetterExchangeType
return|;
block|}
comment|/**      * The type of the dead letter exchange      */
DECL|method|setDeadLetterExchangeType (String deadLetterExchangeType)
specifier|public
name|void
name|setDeadLetterExchangeType
parameter_list|(
name|String
name|deadLetterExchangeType
parameter_list|)
block|{
name|this
operator|.
name|deadLetterExchangeType
operator|=
name|deadLetterExchangeType
expr_stmt|;
block|}
block|}
end_class

end_unit

