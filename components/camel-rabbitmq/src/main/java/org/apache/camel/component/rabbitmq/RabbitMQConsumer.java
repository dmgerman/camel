begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|AMQP
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_comment
comment|/**  * @author Stephen Samuel  */
end_comment

begin_class
DECL|class|RabbitMQConsumer
specifier|public
class|class
name|RabbitMQConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RabbitMQConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|RabbitMQEndpoint
name|endpoint
decl_stmt|;
DECL|field|executor
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|conn
name|Connection
name|conn
decl_stmt|;
DECL|field|channel
name|Channel
name|channel
decl_stmt|;
DECL|method|RabbitMQConsumer (RabbitMQEndpoint endpoint, Processor processor)
specifier|public
name|RabbitMQConsumer
parameter_list|(
name|RabbitMQEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting RabbitMQ consumer"
argument_list|)
expr_stmt|;
name|executor
operator|=
name|endpoint
operator|.
name|createExecutor
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Using executor {}"
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|conn
operator|=
name|endpoint
operator|.
name|connect
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Using conn {}"
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|channel
operator|=
name|conn
operator|.
name|createChannel
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Using channel {}"
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|channel
operator|.
name|exchangeDeclare
argument_list|(
name|endpoint
operator|.
name|getExchangeName
argument_list|()
argument_list|,
literal|"direct"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|channel
operator|.
name|queueDeclare
argument_list|(
name|endpoint
operator|.
name|getQueue
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|channel
operator|.
name|queueBind
argument_list|(
name|endpoint
operator|.
name|getQueue
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getExchangeName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getRoutingKey
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|endpoint
operator|.
name|getRoutingKey
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|basicConsume
argument_list|(
name|endpoint
operator|.
name|getQueue
argument_list|()
argument_list|,
name|endpoint
operator|.
name|isAutoAck
argument_list|()
argument_list|,
operator|new
name|RabbitConsumer
argument_list|(
name|this
argument_list|,
name|channel
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stopping RabbitMQ consumer"
argument_list|)
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
name|channel
operator|=
literal|null
expr_stmt|;
name|conn
operator|=
literal|null
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
DECL|class|RabbitConsumer
class|class
name|RabbitConsumer
extends|extends
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|DefaultConsumer
block|{
DECL|field|consumer
specifier|private
specifier|final
name|RabbitMQConsumer
name|consumer
decl_stmt|;
DECL|field|channel
specifier|private
specifier|final
name|Channel
name|channel
decl_stmt|;
comment|/**          * Constructs a new instance and records its association to the passed-in channel.          *          * @param channel the channel to which this consumer is attached          */
DECL|method|RabbitConsumer (RabbitMQConsumer consumer, Channel channel)
specifier|public
name|RabbitConsumer
parameter_list|(
name|RabbitMQConsumer
name|consumer
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
name|super
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleDelivery (String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
specifier|public
name|void
name|handleDelivery
parameter_list|(
name|String
name|consumerTag
parameter_list|,
name|Envelope
name|envelope
parameter_list|,
name|AMQP
operator|.
name|BasicProperties
name|properties
parameter_list|,
name|byte
index|[]
name|body
parameter_list|)
throws|throws
name|IOException
block|{
name|Exchange
name|exchange
init|=
name|consumer
operator|.
name|endpoint
operator|.
name|createRabbitExchange
argument_list|(
name|envelope
argument_list|)
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Created exchange [exchange={}]"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|exchange
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|long
name|deliveryTag
init|=
name|envelope
operator|.
name|getDeliveryTag
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"Acknowleding receipt [delivery_tag={}]"
argument_list|,
name|deliveryTag
argument_list|)
expr_stmt|;
name|channel
operator|.
name|basicAck
argument_list|(
name|deliveryTag
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

