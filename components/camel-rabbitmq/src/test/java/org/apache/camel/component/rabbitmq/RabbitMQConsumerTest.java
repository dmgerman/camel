begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|RabbitMQConsumerTest
specifier|public
class|class
name|RabbitMQConsumerTest
block|{
DECL|field|endpoint
specifier|private
name|RabbitMQEndpoint
name|endpoint
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conn
specifier|private
name|Connection
name|conn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|processor
specifier|private
name|Processor
name|processor
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|channel
specifier|private
name|Channel
name|channel
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Channel
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testStoppingConsumerShutdownExecutor ()
specifier|public
name|void
name|testStoppingConsumerShutdownExecutor
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQConsumer
name|consumer
init|=
operator|new
name|RabbitMQConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|e
init|=
operator|(
name|ThreadPoolExecutor
operator|)
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|createExecutor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|connect
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|conn
operator|.
name|createChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|e
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStoppingConsumerShutdownConnection ()
specifier|public
name|void
name|testStoppingConsumerShutdownConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQConsumer
name|consumer
init|=
operator|new
name|RabbitMQConsumer
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|createExecutor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|connect
argument_list|(
name|Matchers
operator|.
name|any
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|conn
operator|.
name|createChannel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|conn
argument_list|)
operator|.
name|close
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

