begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|AMQP
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test RabbitMQ component with Spring DSL  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
DECL|class|RabbitMQSpringIntTest
specifier|public
class|class
name|RabbitMQSpringIntTest
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RabbitMQSpringIntTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:rabbitMQ"
argument_list|)
DECL|field|template
specifier|protected
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|Autowired
DECL|field|connectionFactory
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
DECL|field|connection
specifier|private
name|Connection
name|connection
decl_stmt|;
DECL|field|channel
specifier|private
name|Channel
name|channel
decl_stmt|;
DECL|method|isConnectionOpened ()
specifier|private
name|boolean
name|isConnectionOpened
parameter_list|()
block|{
return|return
name|connection
operator|!=
literal|null
operator|&&
name|connection
operator|.
name|isOpen
argument_list|()
return|;
block|}
DECL|method|openConnection ()
specifier|private
name|Connection
name|openConnection
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
if|if
condition|(
operator|!
name|isConnectionOpened
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Open connection"
argument_list|)
expr_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|newConnection
argument_list|()
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
DECL|method|isChannelOpened ()
specifier|private
name|boolean
name|isChannelOpened
parameter_list|()
block|{
return|return
name|channel
operator|!=
literal|null
operator|&&
name|channel
operator|.
name|isOpen
argument_list|()
return|;
block|}
DECL|method|openChannel ()
specifier|private
name|Channel
name|openChannel
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
if|if
condition|(
operator|!
name|isChannelOpened
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Open channel"
argument_list|)
expr_stmt|;
name|channel
operator|=
name|openConnection
argument_list|()
operator|.
name|createChannel
argument_list|()
expr_stmt|;
block|}
return|return
name|channel
return|;
block|}
annotation|@
name|Before
DECL|method|bindQueueExchange ()
specifier|public
name|void
name|bindQueueExchange
parameter_list|()
throws|throws
name|IOException
throws|,
name|TimeoutException
block|{
name|openChannel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|closeConnection ()
specifier|public
name|void
name|closeConnection
parameter_list|()
throws|throws
name|TimeoutException
block|{
if|if
condition|(
name|isChannelOpened
argument_list|()
condition|)
block|{
try|try
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Close channel"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
if|if
condition|(
name|isConnectionOpened
argument_list|()
condition|)
block|{
try|try
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Close connection"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
block|}
DECL|class|LastDeliveryConsumer
specifier|private
specifier|static
specifier|final
class|class
name|LastDeliveryConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|lastBody
specifier|private
name|byte
index|[]
name|lastBody
decl_stmt|;
DECL|method|LastDeliveryConsumer (Channel channel)
specifier|private
name|LastDeliveryConsumer
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
name|super
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleDelivery (String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
specifier|public
name|void
name|handleDelivery
parameter_list|(
name|String
name|consumerTag
parameter_list|,
name|Envelope
name|envelope
parameter_list|,
name|AMQP
operator|.
name|BasicProperties
name|properties
parameter_list|,
name|byte
index|[]
name|body
parameter_list|)
throws|throws
name|IOException
block|{
name|lastBody
operator|=
name|body
expr_stmt|;
name|super
operator|.
name|handleDelivery
argument_list|(
name|consumerTag
argument_list|,
name|envelope
argument_list|,
name|properties
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|getLastBody ()
specifier|public
name|byte
index|[]
name|getLastBody
parameter_list|()
block|{
return|return
name|lastBody
return|;
block|}
DECL|method|getLastBodyAsString ()
specifier|public
name|String
name|getLastBodyAsString
parameter_list|()
block|{
return|return
name|lastBody
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|String
argument_list|(
name|lastBody
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSendCustomConnectionFactory ()
specifier|public
name|void
name|testSendCustomConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|body
init|=
literal|"Hello Rabbit"
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|body
argument_list|,
name|RabbitMQConstants
operator|.
name|ROUTING_KEY
argument_list|,
literal|"rk2"
argument_list|)
expr_stmt|;
name|openChannel
argument_list|()
expr_stmt|;
name|LastDeliveryConsumer
name|consumer
init|=
operator|new
name|LastDeliveryConsumer
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|channel
operator|.
name|basicConsume
argument_list|(
literal|"q2"
argument_list|,
literal|true
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|consumer
operator|.
name|getLastBody
argument_list|()
operator|==
literal|null
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|body
argument_list|,
name|consumer
operator|.
name|getLastBodyAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

