begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|RabbitMQIntBasicTest
specifier|public
class|class
name|RabbitMQIntBasicTest
extends|extends
name|AbstractRabbitMQIntTest
block|{
comment|// Startup RabbitMQ via Docker
comment|// docker run -d -it -p 5672:5672 -e RABBITMQ_DEFAULT_USER=cameltest -e RABBITMQ_DEFAULT_PASS=cameltest --hostname my-rabbit --name some-rabbit rabbitmq:3
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"rabbitmq:localhost:5672/foo?username=cameltest&password=cameltest"
argument_list|)
DECL|field|foo
specifier|private
name|Endpoint
name|foo
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"rabbitmq:localhost:5672/bar?username=cameltest&password=cameltest"
argument_list|)
DECL|field|bar
specifier|private
name|Endpoint
name|bar
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|mock
specifier|private
name|MockEndpoint
name|mock
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|foo
argument_list|)
operator|.
name|log
argument_list|(
literal|"FOO received: ${body}"
argument_list|)
operator|.
name|to
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|bar
argument_list|)
operator|.
name|log
argument_list|(
literal|"BAR received: ${body}"
argument_list|)
operator|.
name|to
argument_list|(
name|mock
argument_list|)
operator|.
name|transform
argument_list|()
operator|.
name|simple
argument_list|(
literal|"Bye ${body}"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|sentBasicInOnly ()
specifier|public
name|void
name|sentBasicInOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending to FOO"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|foo
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending to FOO done"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sentBasicInOut ()
specifier|public
name|void
name|sentBasicInOut
parameter_list|()
throws|throws
name|Exception
block|{
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending to FOO"
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|template
operator|.
name|requestBody
argument_list|(
name|foo
argument_list|,
literal|"World"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bye World"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending to FOO done"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sentBasicInOutTwo ()
specifier|public
name|void
name|sentBasicInOutTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"World"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending to FOO"
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|template
operator|.
name|requestBody
argument_list|(
name|foo
argument_list|,
literal|"World"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Bye World"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|=
name|template
operator|.
name|requestBody
argument_list|(
name|foo
argument_list|,
literal|"Camel"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bye Camel"
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending to FOO done"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

