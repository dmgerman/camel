begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Integration test to check that RabbitMQ Endpoint is able handle heavy load using multiple producers and  * consumers  */
end_comment

begin_class
DECL|class|RabbitMQLoadIntTest
specifier|public
class|class
name|RabbitMQLoadIntTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|ROUTING_KEY
specifier|public
specifier|static
specifier|final
name|String
name|ROUTING_KEY
init|=
literal|"rk4"
decl_stmt|;
DECL|field|PRODUCER_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|PRODUCER_COUNT
init|=
literal|10
decl_stmt|;
DECL|field|CONSUMER_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|CONSUMER_COUNT
init|=
literal|10
decl_stmt|;
DECL|field|MESSAGE_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|100
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:rabbitMQ"
argument_list|)
DECL|field|directProducer
specifier|protected
name|ProducerTemplate
name|directProducer
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"rabbitmq:localhost:5672/ex4?username=cameltest&password=cameltest"
operator|+
literal|"&queue=q4&routingKey="
operator|+
name|ROUTING_KEY
operator|+
literal|"&threadPoolSize="
operator|+
operator|(
name|CONSUMER_COUNT
operator|+
literal|5
expr|)
operator|+
literal|"&concurrentConsumers="
operator|+
name|CONSUMER_COUNT
block|)
DECL|field|rabbitMQEndpoint
specifier|private
name|Endpoint
name|rabbitMQEndpoint
decl_stmt|;
end_class

begin_decl_stmt
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:producing"
argument_list|)
DECL|field|producingMockEndpoint
specifier|private
name|MockEndpoint
name|producingMockEndpoint
decl_stmt|;
end_decl_stmt

begin_decl_stmt
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:consuming"
argument_list|)
DECL|field|consumingMockEndpoint
specifier|private
name|MockEndpoint
name|consumingMockEndpoint
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:rabbitMQ"
argument_list|)
operator|.
name|id
argument_list|(
literal|"producingRoute"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Sending message"
argument_list|)
operator|.
name|inOnly
argument_list|(
name|rabbitMQEndpoint
argument_list|)
operator|.
name|to
argument_list|(
name|producingMockEndpoint
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|rabbitMQEndpoint
argument_list|)
operator|.
name|id
argument_list|(
literal|"consumingRoute"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Receiving message"
argument_list|)
operator|.
name|to
argument_list|(
name|consumingMockEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
end_function

begin_function
annotation|@
name|Test
DECL|method|testSendEndReceive ()
specifier|public
name|void
name|testSendEndReceive
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start producers
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|PRODUCER_COUNT
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|PRODUCER_COUNT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PRODUCER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|directProducer
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"Message #"
operator|+
name|i
argument_list|,
name|RabbitMQConstants
operator|.
name|ROUTING_KEY
argument_list|,
name|ROUTING_KEY
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Wait for producers to end
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|futures
control|)
block|{
name|future
operator|.
name|get
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|// Check message count
name|producingMockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|PRODUCER_COUNT
operator|*
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|consumingMockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|PRODUCER_COUNT
operator|*
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

