begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|RabbitMQComponentTest
specifier|public
class|class
name|RabbitMQComponentTest
block|{
DECL|field|context
specifier|private
name|CamelContext
name|context
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testPropertiesSet ()
specifier|public
name|void
name|testPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
literal|"coldplay"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"chrism"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"autoAck"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"vhost"
argument_list|,
literal|"vman"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"threadPoolSize"
argument_list|,
literal|515
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"portNumber"
argument_list|,
literal|14123
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"hostname"
argument_list|,
literal|"special.host"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"queue"
argument_list|,
literal|"queuey"
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
literal|"rabbitmq:special.host:14/queuey"
decl_stmt|;
name|String
name|remaining
init|=
literal|"special.host:14/queuey"
decl_stmt|;
name|RabbitMQEndpoint
name|endpoint
init|=
operator|new
name|RabbitMQComponent
argument_list|(
name|context
argument_list|)
operator|.
name|createEndpoint
argument_list|(
name|uri
argument_list|,
name|remaining
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"chrism"
argument_list|,
name|endpoint
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"coldplay"
argument_list|,
name|endpoint
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queuey"
argument_list|,
name|endpoint
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"vman"
argument_list|,
name|endpoint
operator|.
name|getVhost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"special.host"
argument_list|,
name|endpoint
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|endpoint
operator|.
name|getPortNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|515
argument_list|,
name|endpoint
operator|.
name|getThreadPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|endpoint
operator|.
name|isAutoAck
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

