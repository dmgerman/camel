begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rabbitmq
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rabbitmq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|AMQP
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|Envelope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|rabbitmq
operator|.
name|client
operator|.
name|impl
operator|.
name|LongStringHelper
import|;
end_import

begin_class
DECL|class|RabbitMQEndpointTest
specifier|public
class|class
name|RabbitMQEndpointTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|envelope
specifier|private
name|Envelope
name|envelope
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Envelope
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|properties
specifier|private
name|AMQP
operator|.
name|BasicProperties
name|properties
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AMQP
operator|.
name|BasicProperties
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"argsConfigurer"
argument_list|,
operator|new
name|ArgsConfigurer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configurArgs
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|moreArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|moreArgs
operator|.
name|put
argument_list|(
literal|"fizz"
argument_list|,
literal|"buzz"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"moreArgs"
argument_list|,
name|moreArgs
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|evenMoreArgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|evenMoreArgs
operator|.
name|put
argument_list|(
literal|"ping"
argument_list|,
literal|"pong"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"evenMoreArgs"
argument_list|,
name|evenMoreArgs
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Test
DECL|method|testCreatingRabbitExchangeSetsStandardHeaders ()
specifier|public
name|void
name|testCreatingRabbitExchangeSetsStandardHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|routingKey
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|exchangeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|tag
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|envelope
operator|.
name|getRoutingKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|routingKey
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|envelope
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchangeName
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|envelope
operator|.
name|getDeliveryTag
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|properties
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|body
init|=
operator|new
name|byte
index|[
literal|20
index|]
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createRabbitExchange
argument_list|(
name|envelope
argument_list|,
name|properties
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exchangeName
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RabbitMQConstants
operator|.
name|EXCHANGE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|routingKey
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RabbitMQConstants
operator|.
name|ROUTING_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tag
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RabbitMQConstants
operator|.
name|DELIVERY_TAG
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|body
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExchangeNameIsOptional ()
specifier|public
name|void
name|testExchangeNameIsOptional
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint1
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong exchange name"
argument_list|,
literal|""
argument_list|,
name|endpoint1
operator|.
name|getExchangeName
argument_list|()
argument_list|)
expr_stmt|;
name|RabbitMQEndpoint
name|endpoint2
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost?autoAck=false"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong exchange name"
argument_list|,
literal|""
argument_list|,
name|endpoint2
operator|.
name|getExchangeName
argument_list|()
argument_list|)
expr_stmt|;
name|RabbitMQEndpoint
name|endpoint3
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong exchange name"
argument_list|,
literal|"exchange"
argument_list|,
name|endpoint3
operator|.
name|getExchangeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatingRabbitExchangeSetsCustomHeaders ()
specifier|public
name|void
name|testCreatingRabbitExchangeSetsCustomHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|routingKey
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|exchangeName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|long
name|tag
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|envelope
operator|.
name|getRoutingKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|routingKey
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|envelope
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchangeName
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|envelope
operator|.
name|getDeliveryTag
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|customHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"stringHeader"
argument_list|,
literal|"A string"
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"bigDecimalHeader"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"12.34"
argument_list|)
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"integerHeader"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"doubleHeader"
argument_list|,
literal|42.24
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"booleanHeader"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"dateHeader"
argument_list|,
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"byteArrayHeader"
argument_list|,
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"longStringHeader"
argument_list|,
name|LongStringHelper
operator|.
name|asLongString
argument_list|(
literal|"Some really long string"
argument_list|)
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"timestampHeader"
argument_list|,
operator|new
name|Timestamp
argument_list|(
literal|4200
argument_list|)
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"byteHeader"
argument_list|,
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"floatHeader"
argument_list|,
operator|new
name|Float
argument_list|(
literal|42.4242
argument_list|)
argument_list|)
expr_stmt|;
name|customHeaders
operator|.
name|put
argument_list|(
literal|"longHeader"
argument_list|,
operator|new
name|Long
argument_list|(
literal|420000000000000000L
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|properties
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|customHeaders
argument_list|)
expr_stmt|;
name|byte
index|[]
name|body
init|=
operator|new
name|byte
index|[
literal|20
index|]
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createRabbitExchange
argument_list|(
name|envelope
argument_list|,
name|properties
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exchangeName
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RabbitMQConstants
operator|.
name|EXCHANGE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|routingKey
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RabbitMQConstants
operator|.
name|ROUTING_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tag
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|RabbitMQConstants
operator|.
name|DELIVERY_TAG
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A string"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"stringHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|"12.34"
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"bigDecimalHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"integerHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42.24
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"doubleHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"booleanHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"dateHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"byteArrayHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Some really long string"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"longStringHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Timestamp
argument_list|(
literal|4200
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"timestampHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"byteHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Float
argument_list|(
literal|42.4242
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"floatHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Long
argument_list|(
literal|420000000000000000L
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"longHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|body
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|creatingExecutorUsesThreadPoolSettings ()
specifier|public
name|void
name|creatingExecutorUsesThreadPoolSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?threadPoolSize=20"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|endpoint
operator|.
name|getThreadPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
name|assertIsInstanceOf
argument_list|(
name|ThreadPoolExecutor
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|createExecutor
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|executor
operator|.
name|getCorePoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithAutoAckDisabled ()
specifier|public
name|void
name|createEndpointWithAutoAckDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?autoAck=false"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|endpoint
operator|.
name|isAutoAck
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|assertSingleton ()
specifier|public
name|void
name|assertSingleton
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isSingleton
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueArgsConfigurer ()
specifier|public
name|void
name|testQueueArgsConfigurer
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?queueArgsConfigurer=#argsConfigurer"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"We should get the queueArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getQueueArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"We should not get the exchangeArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getExchangeArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should not get the bindingArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getBindingArgs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBindingArgs ()
specifier|public
name|void
name|testBindingArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?bindingArgs=#args"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"We should get the bindingArgsConfigurer here."
argument_list|,
literal|1
argument_list|,
name|endpoint
operator|.
name|getBindingArgs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"We should not get the queueArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getQueueArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"We should not get the exchangeArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getExchangeArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueArgs ()
specifier|public
name|void
name|testQueueArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?queueArgs=#args"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"We should get the queueArgs here."
argument_list|,
literal|1
argument_list|,
name|endpoint
operator|.
name|getQueueArgs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should not get the binding args here."
argument_list|,
name|endpoint
operator|.
name|getBindingArgs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should not get the exchange args here."
argument_list|,
name|endpoint
operator|.
name|getExchangeArgs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"We should not get the exchangeArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getExchangeArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"We should not get the queueArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getQueueArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExchangeArgs ()
specifier|public
name|void
name|testExchangeArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?exchangeArgs=#args"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"We should get the exchangeArgs here."
argument_list|,
literal|1
argument_list|,
name|endpoint
operator|.
name|getExchangeArgs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should not get the binding args here."
argument_list|,
name|endpoint
operator|.
name|getBindingArgs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"We should not get the queue args here."
argument_list|,
name|endpoint
operator|.
name|getQueueArgs
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"We should not get the exchangeArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getExchangeArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"We should not get the queueArgsConfigurer here."
argument_list|,
name|endpoint
operator|.
name|getQueueArgsConfigurer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiArgsPopulateCorrectEndpointProperties ()
specifier|public
name|void
name|testMultiArgsPopulateCorrectEndpointProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?arg.exchange.e1=v1&arg.exchange.e2=v2&arg.queue.q1=v3&arg.binding.b1=v4"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of args"
argument_list|,
literal|4
argument_list|,
name|endpoint
operator|.
name|getArgs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of args"
argument_list|,
literal|1
argument_list|,
name|endpoint
operator|.
name|getBindingArgs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of args"
argument_list|,
literal|2
argument_list|,
name|endpoint
operator|.
name|getExchangeArgs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of args"
argument_list|,
literal|1
argument_list|,
name|endpoint
operator|.
name|getQueueArgs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiArgsCombinedWithIndividuallySpecified ()
specifier|public
name|void
name|testMultiArgsCombinedWithIndividuallySpecified
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup two arguments for each rabbit fundamental.
comment|// Configured inline and via named map in the camel registry
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange"
operator|+
literal|"?arg.exchange.e1=v1&exchangeArgs=#args"
operator|+
literal|"&arg.queue.q1=v2&queueArgs=#moreArgs"
operator|+
literal|"&arg.binding.b1=v3&bindingArgs=#evenMoreArgs"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The multi-value inline has 3
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inlineArgs
init|=
name|endpoint
operator|.
name|getArgs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of args"
argument_list|,
literal|3
argument_list|,
name|inlineArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inlineArgs
operator|.
name|containsKey
argument_list|(
literal|"exchange.e1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inlineArgs
operator|.
name|containsKey
argument_list|(
literal|"queue.q1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|inlineArgs
operator|.
name|containsKey
argument_list|(
literal|"binding.b1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|exchangeArgs
init|=
name|endpoint
operator|.
name|getExchangeArgs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of exchange args"
argument_list|,
literal|2
argument_list|,
name|exchangeArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain the individually specified exchange args"
argument_list|,
name|exchangeArgs
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain the args in the multi-value map"
argument_list|,
name|exchangeArgs
operator|.
name|containsKey
argument_list|(
literal|"e1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queueArgs
init|=
name|endpoint
operator|.
name|getQueueArgs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of queue args"
argument_list|,
literal|2
argument_list|,
name|queueArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain the individually specified queue args"
argument_list|,
name|queueArgs
operator|.
name|containsKey
argument_list|(
literal|"fizz"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain the args in the multi-value map"
argument_list|,
name|queueArgs
operator|.
name|containsKey
argument_list|(
literal|"q1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|bindingArgs
init|=
name|endpoint
operator|.
name|getBindingArgs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong number of binding args"
argument_list|,
literal|2
argument_list|,
name|bindingArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain the individually specified binding args"
argument_list|,
name|bindingArgs
operator|.
name|containsKey
argument_list|(
literal|"ping"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain the args in the multi-value map"
argument_list|,
name|bindingArgs
operator|.
name|containsKey
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|brokerEndpointAddressesSettings ()
specifier|public
name|void
name|brokerEndpointAddressesSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?addresses=server1:12345,server2:12345"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong size of endpoint addresses."
argument_list|,
literal|2
argument_list|,
name|endpoint
operator|.
name|getAddresses
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong endpoint address."
argument_list|,
operator|new
name|Address
argument_list|(
literal|"server1"
argument_list|,
literal|12345
argument_list|)
argument_list|,
name|endpoint
operator|.
name|getAddresses
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong endpoint address."
argument_list|,
operator|new
name|Address
argument_list|(
literal|"server2"
argument_list|,
literal|12345
argument_list|)
argument_list|,
name|endpoint
operator|.
name|getAddresses
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|createConnectionFactory (String uri)
specifier|private
name|ConnectionFactory
name|createConnectionFactory
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|TimeoutException
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|endpoint
operator|.
name|connect
argument_list|(
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioExc
parameter_list|)
block|{
comment|// Doesn't matter if RabbitMQ is not available
name|log
operator|.
name|debug
argument_list|(
literal|"RabbitMQ not available"
argument_list|,
name|ioExc
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
operator|.
name|getConnectionFactory
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateConnectionFactoryDefault ()
specifier|public
name|void
name|testCreateConnectionFactoryDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|connectionFactory
init|=
name|createConnectionFactory
argument_list|(
literal|"rabbitmq:localhost:1234/exchange"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|connectionFactory
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|connectionFactory
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConnectionFactory
operator|.
name|DEFAULT_VHOST
argument_list|,
name|connectionFactory
operator|.
name|getVirtualHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConnectionFactory
operator|.
name|DEFAULT_USER
argument_list|,
name|connectionFactory
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConnectionFactory
operator|.
name|DEFAULT_PASS
argument_list|,
name|connectionFactory
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConnectionFactory
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
argument_list|,
name|connectionFactory
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConnectionFactory
operator|.
name|DEFAULT_CHANNEL_MAX
argument_list|,
name|connectionFactory
operator|.
name|getRequestedChannelMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConnectionFactory
operator|.
name|DEFAULT_FRAME_MAX
argument_list|,
name|connectionFactory
operator|.
name|getRequestedFrameMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ConnectionFactory
operator|.
name|DEFAULT_HEARTBEAT
argument_list|,
name|connectionFactory
operator|.
name|getRequestedHeartbeat
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connectionFactory
operator|.
name|isSSL
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectionFactory
operator|.
name|isAutomaticRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|connectionFactory
operator|.
name|getNetworkRecoveryInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectionFactory
operator|.
name|isTopologyRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateConnectionFactoryCustom ()
specifier|public
name|void
name|testCreateConnectionFactoryCustom
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|connectionFactory
init|=
name|createConnectionFactory
argument_list|(
literal|"rabbitmq:localhost:1234/exchange"
operator|+
literal|"?username=userxxx"
operator|+
literal|"&password=passxxx"
operator|+
literal|"&connectionTimeout=123"
operator|+
literal|"&requestedChannelMax=456"
operator|+
literal|"&requestedFrameMax=789"
operator|+
literal|"&requestedHeartbeat=987"
operator|+
literal|"&sslProtocol=true"
operator|+
literal|"&automaticRecoveryEnabled=true"
operator|+
literal|"&networkRecoveryInterval=654"
operator|+
literal|"&topologyRecoveryEnabled=false"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|connectionFactory
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|connectionFactory
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userxxx"
argument_list|,
name|connectionFactory
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"passxxx"
argument_list|,
name|connectionFactory
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|connectionFactory
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|456
argument_list|,
name|connectionFactory
operator|.
name|getRequestedChannelMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|789
argument_list|,
name|connectionFactory
operator|.
name|getRequestedFrameMax
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|987
argument_list|,
name|connectionFactory
operator|.
name|getRequestedHeartbeat
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectionFactory
operator|.
name|isSSL
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connectionFactory
operator|.
name|isAutomaticRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|654
argument_list|,
name|connectionFactory
operator|.
name|getNetworkRecoveryInterval
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connectionFactory
operator|.
name|isTopologyRecoveryEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithTransferExceptionEnabled ()
specifier|public
name|void
name|createEndpointWithTransferExceptionEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?transferException=true"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|endpoint
operator|.
name|isTransferException
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithReplyTimeout ()
specifier|public
name|void
name|createEndpointWithReplyTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?requestTimeout=2000"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|endpoint
operator|.
name|getRequestTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithRequestTimeoutCheckerInterval ()
specifier|public
name|void
name|createEndpointWithRequestTimeoutCheckerInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?requestTimeoutCheckerInterval=1000"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|endpoint
operator|.
name|getRequestTimeoutCheckerInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithSkipQueueDeclareEnabled ()
specifier|public
name|void
name|createEndpointWithSkipQueueDeclareEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?skipQueueDeclare=true"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isSkipQueueDeclare
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithSkipExchangeDeclareEnabled ()
specifier|public
name|void
name|createEndpointWithSkipExchangeDeclareEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?skipExchangeDeclare=true"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isSkipExchangeDeclare
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithSkipQueueBindEndabled ()
specifier|public
name|void
name|createEndpointWithSkipQueueBindEndabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?SkipQueueBind=true"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isSkipQueueBind
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithExclusiveEnabled ()
specifier|public
name|void
name|createEndpointWithExclusiveEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?exclusive=true"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createEndpointWithPassiveEnabled ()
specifier|public
name|void
name|createEndpointWithPassiveEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|RabbitMQEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"rabbitmq:localhost/exchange?passive=true"
argument_list|,
name|RabbitMQEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|isPassive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

