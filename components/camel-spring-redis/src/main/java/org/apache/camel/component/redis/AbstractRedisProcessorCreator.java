begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.redis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_class
DECL|class|AbstractRedisProcessorCreator
specifier|public
specifier|abstract
class|class
name|AbstractRedisProcessorCreator
implements|implements
name|RedisProcessorsCreator
block|{
DECL|field|result
specifier|protected
name|Map
argument_list|<
name|Command
argument_list|,
name|Processor
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getRedisProcessors ()
specifier|public
name|Map
argument_list|<
name|Command
argument_list|,
name|Processor
argument_list|>
name|getRedisProcessors
parameter_list|()
block|{
return|return
name|result
return|;
block|}
DECL|method|bind (Command command, Processor processor)
specifier|protected
name|void
name|bind
parameter_list|(
name|Command
name|command
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|result
operator|.
name|put
argument_list|(
name|command
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
DECL|method|setResult (Exchange exchange, Object result)
specifier|private
name|void
name|setResult
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
name|Message
name|message
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
name|message
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
name|message
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|wrap (Function<Exchange, Object> supplier)
specifier|protected
name|Processor
name|wrap
parameter_list|(
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
name|exchange
lambda|->
block|{
name|Object
name|result
init|=
name|supplier
operator|.
name|apply
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|exchange
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|;
block|}
block|}
end_class

end_unit

