begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.redis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|dao
operator|.
name|DataAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|connection
operator|.
name|RedisConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|core
operator|.
name|RedisCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|core
operator|.
name|RedisTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|core
operator|.
name|query
operator|.
name|SortQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|core
operator|.
name|query
operator|.
name|SortQueryBuilder
import|;
end_import

begin_class
DECL|class|RedisClient
specifier|public
class|class
name|RedisClient
block|{
DECL|field|redisTemplate
specifier|private
specifier|final
name|RedisTemplate
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|redisTemplate
decl_stmt|;
DECL|method|RedisClient (RedisTemplate<String, Object> redisTemplate)
specifier|public
name|RedisClient
parameter_list|(
name|RedisTemplate
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|redisTemplate
parameter_list|)
block|{
name|this
operator|.
name|redisTemplate
operator|=
name|redisTemplate
expr_stmt|;
block|}
DECL|method|set (String key, Object value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|hmset (String key, Map<String, Object> param)
specifier|public
name|void
name|hmset
parameter_list|(
name|String
name|key
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|param
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForHash
argument_list|()
operator|.
name|putAll
argument_list|(
name|key
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
DECL|method|hmget (String key, Collection<String> fields)
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|hmget
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|multiGet
argument_list|(
name|key
argument_list|,
name|fields
argument_list|)
return|;
block|}
DECL|method|hkeys (String key)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|hkeys
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|keys
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|hlen (String key)
specifier|public
name|Long
name|hlen
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|size
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|hincrBy (String key, String field, Long value)
specifier|public
name|Long
name|hincrBy
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|field
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|increment
argument_list|(
name|key
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|hgetAll (String key)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|hgetAll
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|entries
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|hexists (String key, String field)
specifier|public
name|Boolean
name|hexists
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|field
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|hasKey
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
return|;
block|}
DECL|method|hget (String key, String field)
specifier|public
name|Object
name|hget
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|field
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
return|;
block|}
DECL|method|hdel (String key, String field)
specifier|public
name|void
name|hdel
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|field
parameter_list|)
block|{
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|delete
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|hset (String key, String field, Object value)
specifier|public
name|void
name|hset
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|quit ()
specifier|public
name|void
name|quit
parameter_list|()
block|{
name|redisTemplate
operator|.
name|execute
argument_list|(
operator|new
name|RedisCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|doInRedis
parameter_list|(
name|RedisConnection
name|connection
parameter_list|)
throws|throws
name|DataAccessException
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|get (String key)
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|hvals (String key)
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|hvals
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|values
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|hsetnx (String key, String field, Object value)
specifier|public
name|Boolean
name|hsetnx
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
expr|<
name|String
operator|,
name|Object
operator|>
name|opsForHash
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|decr (String key)
specifier|public
name|Long
name|decr
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|increment
argument_list|(
name|key
argument_list|,
operator|-
literal|1L
argument_list|)
return|;
block|}
DECL|method|decrby (String key, Long value)
specifier|public
name|Long
name|decrby
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|increment
argument_list|(
name|key
argument_list|,
operator|-
name|value
argument_list|)
return|;
block|}
DECL|method|incr (String key)
specifier|public
name|Long
name|incr
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|increment
argument_list|(
name|key
argument_list|,
literal|1L
argument_list|)
return|;
block|}
DECL|method|incrby (String key, Long value)
specifier|public
name|Long
name|incrby
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|increment
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|getrange (String key, Long start, Long end)
specifier|public
name|String
name|getrange
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
DECL|method|strlen (String key)
specifier|public
name|Long
name|strlen
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|size
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|mget (Collection<String> fields)
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|mget
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|multiGet
argument_list|(
name|fields
argument_list|)
return|;
block|}
DECL|method|mset (Map<String, Object> map)
specifier|public
name|void
name|mset
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|multiSet
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|msetnx (Map<String, Object> map)
specifier|public
name|void
name|msetnx
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|multiSetIfAbsent
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
DECL|method|getset (String key, Object value)
specifier|public
name|Object
name|getset
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|getAndSet
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|setnx (String key, Object value)
specifier|public
name|Boolean
name|setnx
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|setIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|setex (String key, Object value, Long timeout, TimeUnit timeUnit)
specifier|public
name|void
name|setex
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|timeout
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
DECL|method|setex (String key, Object value, Long offset)
specifier|public
name|void
name|setex
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Long
name|offset
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
DECL|method|setbit (final String key, final Long offset, final Boolean value)
specifier|public
name|void
name|setbit
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Long
name|offset
parameter_list|,
specifier|final
name|Boolean
name|value
parameter_list|)
block|{
name|redisTemplate
operator|.
name|execute
argument_list|(
operator|new
name|RedisCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|doInRedis
parameter_list|(
name|RedisConnection
name|connection
parameter_list|)
throws|throws
name|DataAccessException
block|{
name|connection
operator|.
name|setBit
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getbit (final String key, final Long offset)
specifier|public
name|Boolean
name|getbit
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|Long
name|offset
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|execute
argument_list|(
operator|new
name|RedisCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|doInRedis
parameter_list|(
name|RedisConnection
name|connection
parameter_list|)
throws|throws
name|DataAccessException
block|{
return|return
name|connection
operator|.
name|getBit
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|offset
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|append (String key, String value)
specifier|public
name|Integer
name|append
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForValue
argument_list|()
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|multi ()
specifier|public
name|void
name|multi
parameter_list|()
block|{
name|redisTemplate
operator|.
name|multi
argument_list|()
expr_stmt|;
block|}
DECL|method|unwatch ()
specifier|public
name|void
name|unwatch
parameter_list|()
block|{
name|redisTemplate
operator|.
name|unwatch
argument_list|()
expr_stmt|;
block|}
DECL|method|discard ()
specifier|public
name|void
name|discard
parameter_list|()
block|{
name|redisTemplate
operator|.
name|discard
argument_list|()
expr_stmt|;
block|}
DECL|method|exec ()
specifier|public
name|void
name|exec
parameter_list|()
block|{
name|redisTemplate
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
DECL|method|watch (Collection<String> keys)
specifier|public
name|void
name|watch
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|redisTemplate
operator|.
name|watch
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
DECL|method|sadd (String key, Object value)
specifier|public
name|Boolean
name|sadd
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|scard (String key)
specifier|public
name|Long
name|scard
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|size
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|sdiff (String key, Collection<String> keys)
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|sdiff
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|difference
argument_list|(
name|key
argument_list|,
name|keys
argument_list|)
return|;
block|}
DECL|method|sdiffstore (String key, Collection<String> keys, String destinations)
specifier|public
name|void
name|sdiffstore
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|String
name|destinations
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|differenceAndStore
argument_list|(
name|key
argument_list|,
name|keys
argument_list|,
name|destinations
argument_list|)
expr_stmt|;
block|}
DECL|method|sinter (String key, Collection<String> keys)
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|sinter
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|intersect
argument_list|(
name|key
argument_list|,
name|keys
argument_list|)
return|;
block|}
DECL|method|sinterstore (String key, Collection<String> keys, String destination)
specifier|public
name|void
name|sinterstore
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|intersectAndStore
argument_list|(
name|key
argument_list|,
name|keys
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
DECL|method|sismember (String key, Object value)
specifier|public
name|Boolean
name|sismember
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|isMember
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|smembers (String key)
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|smembers
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|members
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|smove (String key, Object value, String destination)
specifier|public
name|Boolean
name|smove
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|move
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|destination
argument_list|)
return|;
block|}
DECL|method|spop (String key)
specifier|public
name|Object
name|spop
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|pop
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|srandmember (String key)
specifier|public
name|Object
name|srandmember
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|randomMember
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|srem (String key, Object value)
specifier|public
name|Boolean
name|srem
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|sunion (String key, Collection<String> keys)
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|sunion
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|union
argument_list|(
name|key
argument_list|,
name|keys
argument_list|)
return|;
block|}
DECL|method|sunionstore (String key, Collection<String> keys, String destination)
specifier|public
name|void
name|sunionstore
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
operator|.
name|unionAndStore
argument_list|(
name|key
argument_list|,
name|keys
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
DECL|method|echo (final String value)
specifier|public
name|String
name|echo
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|execute
argument_list|(
operator|new
name|RedisCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doInRedis
parameter_list|(
name|RedisConnection
name|connection
parameter_list|)
throws|throws
name|DataAccessException
block|{
return|return
operator|new
name|String
argument_list|(
name|connection
operator|.
name|echo
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|ping ()
specifier|public
name|String
name|ping
parameter_list|()
block|{
return|return
name|redisTemplate
operator|.
name|execute
argument_list|(
operator|new
name|RedisCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doInRedis
parameter_list|(
name|RedisConnection
name|connection
parameter_list|)
throws|throws
name|DataAccessException
block|{
return|return
name|connection
operator|.
name|ping
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|publish (String channel, Object message)
specifier|public
name|void
name|publish
parameter_list|(
name|String
name|channel
parameter_list|,
name|Object
name|message
parameter_list|)
block|{
name|redisTemplate
operator|.
name|convertAndSend
argument_list|(
name|channel
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|lpop (String key)
specifier|public
name|Object
name|lpop
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|leftPop
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|blpop (String key, Long timeout)
specifier|public
name|Object
name|blpop
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|timeout
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|leftPop
argument_list|(
name|key
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|brpoplpush (String key, String destination, Long timeout)
specifier|public
name|Object
name|brpoplpush
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|destination
parameter_list|,
name|Long
name|timeout
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|rightPopAndLeftPush
argument_list|(
name|key
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|rpoplpush (String key, String destination)
specifier|public
name|Object
name|rpoplpush
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|rightPopAndLeftPush
argument_list|(
name|key
argument_list|,
name|destination
argument_list|)
return|;
block|}
DECL|method|lindex (String key, Long index)
specifier|public
name|Object
name|lindex
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|index
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|index
argument_list|(
name|key
argument_list|,
name|index
argument_list|)
return|;
block|}
DECL|method|linsert (String key, Object value, String pivot, String position)
specifier|public
name|Long
name|linsert
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|String
name|pivot
parameter_list|,
name|String
name|position
parameter_list|)
block|{
if|if
condition|(
literal|"BEFORE"
operator|.
name|equals
argument_list|(
name|position
argument_list|)
condition|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|leftPush
argument_list|(
name|key
argument_list|,
name|pivot
argument_list|,
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"AFTER"
operator|.
name|equals
argument_list|(
name|position
argument_list|)
condition|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|rightPush
argument_list|(
name|key
argument_list|,
name|pivot
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong position: "
operator|+
name|position
argument_list|)
throw|;
block|}
block|}
DECL|method|rpop (String key)
specifier|public
name|Object
name|rpop
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|rightPop
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|brpop (String key, Long timeout)
specifier|public
name|Object
name|brpop
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|timeout
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|rightPop
argument_list|(
name|key
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|llen (String key)
specifier|public
name|Long
name|llen
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|size
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|lrange (String key, Long start, Long end)
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|lrange
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|range
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
DECL|method|lrem (String key, Object value, Long count)
specifier|public
name|Long
name|lrem
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Long
name|count
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|count
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|lset (String key, Object value, Long index)
specifier|public
name|void
name|lset
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Long
name|index
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|index
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|ltrim (String key, Long start, Long end)
specifier|public
name|void
name|ltrim
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|trim
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
DECL|method|rpush (String key, Object value)
specifier|public
name|Long
name|rpush
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|rightPush
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|rpushx (String key, Object value)
specifier|public
name|Long
name|rpushx
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|rightPushIfPresent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|lpush (String key, Object value)
specifier|public
name|Long
name|lpush
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForList
argument_list|()
operator|.
name|leftPush
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|del (Collection<String> keys)
specifier|public
name|void
name|del
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|redisTemplate
operator|.
name|delete
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
DECL|method|exists (String key)
specifier|public
name|Boolean
name|exists
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|hasKey
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|expire (String key, Long timeout)
specifier|public
name|Boolean
name|expire
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|timeout
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|expire
argument_list|(
name|key
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|expireat (String key, Long seconds)
specifier|public
name|Boolean
name|expireat
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|seconds
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|expireAt
argument_list|(
name|key
argument_list|,
operator|new
name|Date
argument_list|(
name|seconds
operator|*
literal|1000L
argument_list|)
argument_list|)
return|;
block|}
DECL|method|keys (String pattern)
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|keys
argument_list|(
name|pattern
argument_list|)
return|;
block|}
DECL|method|move (String key, Integer db)
specifier|public
name|Boolean
name|move
parameter_list|(
name|String
name|key
parameter_list|,
name|Integer
name|db
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|move
argument_list|(
name|key
argument_list|,
name|db
argument_list|)
return|;
block|}
DECL|method|persist (String key)
specifier|public
name|Boolean
name|persist
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|persist
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|pexpire (String key, Long timeout)
specifier|public
name|Boolean
name|pexpire
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|timeout
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|expire
argument_list|(
name|key
argument_list|,
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
DECL|method|pexpireat (String key, Long millis)
specifier|public
name|Boolean
name|pexpireat
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|millis
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|expireAt
argument_list|(
name|key
argument_list|,
operator|new
name|Date
argument_list|(
name|millis
argument_list|)
argument_list|)
return|;
block|}
DECL|method|randomkey ()
specifier|public
name|String
name|randomkey
parameter_list|()
block|{
return|return
name|redisTemplate
operator|.
name|randomKey
argument_list|()
return|;
block|}
DECL|method|rename (String key, String value)
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|redisTemplate
operator|.
name|rename
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|renamenx (String key, String value)
specifier|public
name|Boolean
name|renamenx
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|renameIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|ttl (String key)
specifier|public
name|Long
name|ttl
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|getExpire
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|type (String key)
specifier|public
name|String
name|type
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|type
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sort (String key)
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|sort
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|SortQuery
argument_list|<
name|String
argument_list|>
name|sortQuery
init|=
name|SortQueryBuilder
operator|.
name|sort
argument_list|(
name|key
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|redisTemplate
operator|.
name|sort
argument_list|(
name|sortQuery
argument_list|)
return|;
block|}
DECL|method|zadd (String key, Object value, Double score)
specifier|public
name|Boolean
name|zadd
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Double
name|score
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|score
argument_list|)
return|;
block|}
DECL|method|zcard (String key)
specifier|public
name|Long
name|zcard
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|size
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|zcount (String key, Double min, Double max)
specifier|public
name|Long
name|zcount
parameter_list|(
name|String
name|key
parameter_list|,
name|Double
name|min
parameter_list|,
name|Double
name|max
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|count
argument_list|(
name|key
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
DECL|method|zincrby (String key, Object value, Double increment)
specifier|public
name|Double
name|zincrby
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|Double
name|increment
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|incrementScore
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|increment
argument_list|)
return|;
block|}
DECL|method|zinterstore (String key, Collection<String> keys, String destination)
specifier|public
name|void
name|zinterstore
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|intersectAndStore
argument_list|(
name|key
argument_list|,
name|keys
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
DECL|method|zrange (String key, Long start, Long end, Boolean withScore)
specifier|public
name|Object
name|zrange
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|,
name|Boolean
name|withScore
parameter_list|)
block|{
if|if
condition|(
name|withScore
operator|!=
literal|null
operator|&&
name|withScore
condition|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|rangeWithScores
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|range
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
DECL|method|zrangebyscore (String key, Double min, Double max)
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|zrangebyscore
parameter_list|(
name|String
name|key
parameter_list|,
name|Double
name|min
parameter_list|,
name|Double
name|max
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|rangeByScore
argument_list|(
name|key
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
DECL|method|zrank (String key, Object value)
specifier|public
name|Long
name|zrank
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|rank
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|zrem (String key, Object value)
specifier|public
name|Boolean
name|zrem
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|zremrangebyrank (String key, Long start, Long end)
specifier|public
name|void
name|zremrangebyrank
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|removeRange
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
DECL|method|zremrangebyscore (String key, Long start, Long end)
specifier|public
name|void
name|zremrangebyscore
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|removeRangeByScore
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
DECL|method|zrevrange (String key, Long start, Long end, Boolean withScore)
specifier|public
name|Object
name|zrevrange
parameter_list|(
name|String
name|key
parameter_list|,
name|Long
name|start
parameter_list|,
name|Long
name|end
parameter_list|,
name|Boolean
name|withScore
parameter_list|)
block|{
if|if
condition|(
name|withScore
operator|!=
literal|null
operator|&&
name|withScore
condition|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|reverseRangeWithScores
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|reverseRange
argument_list|(
name|key
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
DECL|method|zrevrangebyscore (String key, Double min, Double max)
specifier|public
name|Set
argument_list|<
name|Object
argument_list|>
name|zrevrangebyscore
parameter_list|(
name|String
name|key
parameter_list|,
name|Double
name|min
parameter_list|,
name|Double
name|max
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|reverseRangeByScore
argument_list|(
name|key
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
DECL|method|zrevrank (String key, Object value)
specifier|public
name|Long
name|zrevrank
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|reverseRank
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|zunionstore (String key, Collection<String> keys, String destination)
specifier|public
name|void
name|zunionstore
parameter_list|(
name|String
name|key
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
name|redisTemplate
operator|.
name|opsForZSet
argument_list|()
operator|.
name|unionAndStore
argument_list|(
name|key
argument_list|,
name|keys
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

