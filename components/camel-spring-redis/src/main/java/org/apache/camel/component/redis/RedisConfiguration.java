begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.redis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|redis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|connection
operator|.
name|RedisConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|connection
operator|.
name|jedis
operator|.
name|JedisConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|core
operator|.
name|RedisTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|listener
operator|.
name|RedisMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|serializer
operator|.
name|JdkSerializationRedisSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|serializer
operator|.
name|RedisSerializer
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|RedisConfiguration
specifier|public
class|class
name|RedisConfiguration
block|{
DECL|field|managedListenerContainer
specifier|private
name|boolean
name|managedListenerContainer
decl_stmt|;
DECL|field|managedConnectionFactory
specifier|private
name|boolean
name|managedConnectionFactory
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|port
specifier|private
name|Integer
name|port
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"SET"
argument_list|)
DECL|field|command
specifier|private
name|Command
name|command
init|=
name|Command
operator|.
name|SET
decl_stmt|;
annotation|@
name|UriParam
DECL|field|channels
specifier|private
name|String
name|channels
decl_stmt|;
annotation|@
name|UriParam
DECL|field|redisTemplate
specifier|private
name|RedisTemplate
name|redisTemplate
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|listenerContainer
specifier|private
name|RedisMessageListenerContainer
name|listenerContainer
decl_stmt|;
annotation|@
name|UriParam
DECL|field|connectionFactory
specifier|private
name|RedisConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|UriParam
DECL|field|serializer
specifier|private
name|RedisSerializer
name|serializer
decl_stmt|;
DECL|method|getCommand ()
specifier|public
name|Command
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
comment|/**      * Default command, which can be overridden by message header.      *<p/>      * Notice the consumer only supports the following commands: PSUBSCRIBE and SUBSCRIBE      */
DECL|method|setCommand (Command command)
specifier|public
name|void
name|setCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Redis server port number      */
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
comment|/**      * The host where Redis server is running.      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getRedisTemplate ()
specifier|public
name|RedisTemplate
name|getRedisTemplate
parameter_list|()
block|{
return|return
name|redisTemplate
operator|!=
literal|null
condition|?
name|redisTemplate
else|:
name|createDefaultTemplate
argument_list|()
return|;
block|}
comment|/**      * Reference to a pre-configured RedisTemplate instance to use.      */
DECL|method|setRedisTemplate (RedisTemplate redisTemplate)
specifier|public
name|void
name|setRedisTemplate
parameter_list|(
name|RedisTemplate
name|redisTemplate
parameter_list|)
block|{
name|this
operator|.
name|redisTemplate
operator|=
name|redisTemplate
expr_stmt|;
block|}
DECL|method|getListenerContainer ()
specifier|public
name|RedisMessageListenerContainer
name|getListenerContainer
parameter_list|()
block|{
return|return
name|listenerContainer
operator|!=
literal|null
condition|?
name|listenerContainer
else|:
name|createDefaultListenerContainer
argument_list|()
return|;
block|}
comment|/**      * Reference to a pre-configured RedisMessageListenerContainer instance to use.      */
DECL|method|setListenerContainer (RedisMessageListenerContainer listenerContainer)
specifier|public
name|void
name|setListenerContainer
parameter_list|(
name|RedisMessageListenerContainer
name|listenerContainer
parameter_list|)
block|{
name|this
operator|.
name|listenerContainer
operator|=
name|listenerContainer
expr_stmt|;
block|}
DECL|method|getChannels ()
specifier|public
name|String
name|getChannels
parameter_list|()
block|{
return|return
name|channels
return|;
block|}
comment|/**      * List of topic names or name patterns to subscribe to. Multiple names can be separated by comma.      */
DECL|method|setChannels (String channels)
specifier|public
name|void
name|setChannels
parameter_list|(
name|String
name|channels
parameter_list|)
block|{
name|this
operator|.
name|channels
operator|=
name|channels
expr_stmt|;
block|}
comment|/**      * Reference to a pre-configured RedisConnectionFactory instance to use.      */
DECL|method|setConnectionFactory (RedisConnectionFactory connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|RedisConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
DECL|method|getConnectionFactory ()
specifier|public
name|RedisConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
operator|!=
literal|null
condition|?
name|connectionFactory
else|:
name|createDefaultConnectionFactory
argument_list|()
return|;
block|}
DECL|method|getSerializer ()
specifier|public
name|RedisSerializer
name|getSerializer
parameter_list|()
block|{
return|return
name|serializer
operator|!=
literal|null
condition|?
name|serializer
else|:
name|createDefaultSerializer
argument_list|()
return|;
block|}
comment|/**      * Reference to a pre-configured RedisSerializer instance to use.      */
DECL|method|setSerializer (RedisSerializer serializer)
specifier|public
name|void
name|setSerializer
parameter_list|(
name|RedisSerializer
name|serializer
parameter_list|)
block|{
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
block|}
DECL|method|createDefaultConnectionFactory ()
specifier|private
name|RedisConnectionFactory
name|createDefaultConnectionFactory
parameter_list|()
block|{
name|JedisConnectionFactory
name|jedisConnectionFactory
init|=
operator|new
name|JedisConnectionFactory
argument_list|()
decl_stmt|;
name|managedConnectionFactory
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|jedisConnectionFactory
operator|.
name|setHostName
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|!=
literal|null
condition|)
block|{
name|jedisConnectionFactory
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|jedisConnectionFactory
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
name|jedisConnectionFactory
expr_stmt|;
return|return
name|jedisConnectionFactory
return|;
block|}
DECL|method|createDefaultTemplate ()
specifier|private
name|RedisTemplate
name|createDefaultTemplate
parameter_list|()
block|{
name|redisTemplate
operator|=
operator|new
name|RedisTemplate
argument_list|()
expr_stmt|;
name|redisTemplate
operator|.
name|setDefaultSerializer
argument_list|(
name|getSerializer
argument_list|()
argument_list|)
expr_stmt|;
name|redisTemplate
operator|.
name|setConnectionFactory
argument_list|(
name|getConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|redisTemplate
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
return|return
name|redisTemplate
return|;
block|}
DECL|method|createDefaultListenerContainer ()
specifier|private
name|RedisMessageListenerContainer
name|createDefaultListenerContainer
parameter_list|()
block|{
name|listenerContainer
operator|=
operator|new
name|RedisMessageListenerContainer
argument_list|()
expr_stmt|;
name|managedListenerContainer
operator|=
literal|true
expr_stmt|;
name|listenerContainer
operator|.
name|setConnectionFactory
argument_list|(
name|getConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
name|listenerContainer
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|listenerContainer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|listenerContainer
return|;
block|}
DECL|method|createDefaultSerializer ()
specifier|private
name|RedisSerializer
name|createDefaultSerializer
parameter_list|()
block|{
name|serializer
operator|=
operator|new
name|JdkSerializationRedisSerializer
argument_list|()
expr_stmt|;
return|return
name|serializer
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|managedConnectionFactory
condition|)
block|{
operator|(
operator|(
name|JedisConnectionFactory
operator|)
name|connectionFactory
operator|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|managedListenerContainer
condition|)
block|{
name|listenerContainer
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

