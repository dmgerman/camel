begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.nitrite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dizitart
operator|.
name|no2
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NitriteComponentTest
specifier|public
class|class
name|NitriteComponentTest
extends|extends
name|AbstractNitriteTest
block|{
annotation|@
name|Test
DECL|method|testMultipleDatabases ()
specifier|public
name|void
name|testMultipleDatabases
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mockA
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:dbA"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockB
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:dbB"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockC
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:dbC"
argument_list|)
decl_stmt|;
name|mockA
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockB
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockC
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"nitrite://%s?collection=collection"
argument_list|,
name|tempDb
argument_list|()
operator|+
literal|".a.db"
argument_list|)
argument_list|,
name|Document
operator|.
name|createDocument
argument_list|(
literal|"key1"
argument_list|,
literal|"db_a"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"nitrite://%s?collection=collection"
argument_list|,
name|tempDb
argument_list|()
operator|+
literal|".b.db"
argument_list|)
argument_list|,
name|Document
operator|.
name|createDocument
argument_list|(
literal|"key1"
argument_list|,
literal|"db_b"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"nitrite://%s?collection=collection2"
argument_list|,
name|tempDb
argument_list|()
operator|+
literal|".c.db"
argument_list|)
argument_list|,
name|Document
operator|.
name|createDocument
argument_list|(
literal|"key1"
argument_list|,
literal|"db_c"
argument_list|)
argument_list|)
expr_stmt|;
name|mockA
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockB
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockC
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|FileUtil
operator|.
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|tempDb
argument_list|()
operator|+
literal|".a.db"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|tempDb
argument_list|()
operator|+
literal|".b.db"
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|tempDb
argument_list|()
operator|+
literal|".c.db"
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"nitrite://%s?collection=collection"
argument_list|,
name|tempDb
argument_list|()
operator|+
literal|".a.db"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:dbA"
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"nitrite://%s?collection=collection&username=login&password=secret"
argument_list|,
name|tempDb
argument_list|()
operator|+
literal|".b.db"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:b"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:dbB"
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"nitrite://%s?collection=collection2&username=login2&password=s3cr3t"
argument_list|,
name|tempDb
argument_list|()
operator|+
literal|".c.db"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:c"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:dbC"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

