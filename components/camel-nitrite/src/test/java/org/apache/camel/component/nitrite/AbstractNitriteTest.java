begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.nitrite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_class
DECL|class|AbstractNitriteTest
specifier|public
class|class
name|AbstractNitriteTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doPreSetup
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|tempDb
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|tempDb ()
specifier|protected
name|String
name|tempDb
parameter_list|()
block|{
return|return
literal|"target/"
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"_"
operator|+
name|getTestMethodName
argument_list|()
operator|+
literal|".db"
return|;
block|}
DECL|method|sortByChangeTimestamp (List<Exchange> input)
specifier|protected
name|List
argument_list|<
name|Exchange
argument_list|>
name|sortByChangeTimestamp
parameter_list|(
name|List
argument_list|<
name|Exchange
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
block|{
name|Long
name|timestamp1
init|=
name|e1
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeader
argument_list|(
name|NitriteConstants
operator|.
name|CHANGE_TIMESTAMP
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|timestamp2
init|=
name|e2
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeader
argument_list|(
name|NitriteConstants
operator|.
name|CHANGE_TIMESTAMP
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp1
operator|==
literal|null
operator|||
name|timestamp2
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|timestamp1
argument_list|,
name|timestamp2
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

