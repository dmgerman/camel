begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.nitrite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dizitart
operator|.
name|no2
operator|.
name|Nitrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dizitart
operator|.
name|no2
operator|.
name|PersistentCollection
import|;
end_import

begin_comment
comment|/**  * Used for integrating Camel with Nitrite databases.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0.0"
argument_list|,
name|scheme
operator|=
literal|"nitrite"
argument_list|,
name|title
operator|=
literal|"Nitrite"
argument_list|,
name|syntax
operator|=
literal|"nitrite:database"
argument_list|,
name|label
operator|=
literal|"database,nosql"
argument_list|)
DECL|class|NitriteEndpoint
specifier|public
class|class
name|NitriteEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|description
operator|=
literal|"Path to database file. Will be created if not exists."
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|database
specifier|private
name|String
name|database
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|description
operator|=
literal|"Name of Nitrite collection. "
operator|+
literal|"Cannot be used in combination with repositoryClass option."
argument_list|)
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|description
operator|=
literal|"Class of Nitrite ObjectRepository. "
operator|+
literal|"Cannot be used in combination with collection option."
argument_list|)
DECL|field|repositoryClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|repositoryClass
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|,
name|description
operator|=
literal|"Optional name of ObjectRepository. "
operator|+
literal|"Can be only used in combination with repositoryClass, otherwise have no effect"
argument_list|)
DECL|field|repositoryName
specifier|private
name|String
name|repositoryName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|description
operator|=
literal|"Username for Nitrite database. "
operator|+
literal|"Database is not secured if option not specified."
argument_list|)
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|description
operator|=
literal|"Password for Nitrite database. Required, if option username specified."
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|nitriteDatabase
specifier|private
name|Nitrite
name|nitriteDatabase
decl_stmt|;
DECL|field|nitriteCollection
specifier|private
name|PersistentCollection
name|nitriteCollection
decl_stmt|;
DECL|method|NitriteEndpoint ()
specifier|public
name|NitriteEndpoint
parameter_list|()
block|{     }
DECL|method|NitriteEndpoint (String uri, NitriteComponent component)
specifier|public
name|NitriteEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|NitriteComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|setNitriteCollection (PersistentCollection collection)
specifier|public
name|void
name|setNitriteCollection
parameter_list|(
name|PersistentCollection
name|collection
parameter_list|)
block|{
name|this
operator|.
name|nitriteCollection
operator|=
name|collection
expr_stmt|;
block|}
DECL|method|setNitriteDatabase (Nitrite nitriteDatabase)
specifier|public
name|void
name|setNitriteDatabase
parameter_list|(
name|Nitrite
name|nitriteDatabase
parameter_list|)
block|{
name|this
operator|.
name|nitriteDatabase
operator|=
name|nitriteDatabase
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|NitriteProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|NitriteConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|NitriteComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|NitriteComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
DECL|method|getNitriteCollection ()
specifier|public
name|PersistentCollection
name|getNitriteCollection
parameter_list|()
block|{
return|return
name|nitriteCollection
return|;
block|}
DECL|method|getNitriteDatabase ()
specifier|public
name|Nitrite
name|getNitriteDatabase
parameter_list|()
block|{
return|return
name|nitriteDatabase
return|;
block|}
DECL|method|setDatabase (String database)
specifier|public
name|void
name|setDatabase
parameter_list|(
name|String
name|database
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
block|}
DECL|method|getDatabase ()
specifier|public
name|String
name|getDatabase
parameter_list|()
block|{
return|return
name|database
return|;
block|}
DECL|method|getCollection ()
specifier|public
name|String
name|getCollection
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
DECL|method|setCollection (String collection)
specifier|public
name|void
name|setCollection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getRepositoryClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRepositoryClass
parameter_list|()
block|{
return|return
name|repositoryClass
return|;
block|}
DECL|method|setRepositoryClass (Class<?> repositoryClass)
specifier|public
name|void
name|setRepositoryClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|repositoryClass
parameter_list|)
block|{
name|this
operator|.
name|repositoryClass
operator|=
name|repositoryClass
expr_stmt|;
block|}
DECL|method|getRepositoryName ()
specifier|public
name|String
name|getRepositoryName
parameter_list|()
block|{
return|return
name|repositoryName
return|;
block|}
DECL|method|setRepositoryName (String repositoryName)
specifier|public
name|void
name|setRepositoryName
parameter_list|(
name|String
name|repositoryName
parameter_list|)
block|{
name|this
operator|.
name|repositoryName
operator|=
name|repositoryName
expr_stmt|;
block|}
block|}
end_class

end_unit

