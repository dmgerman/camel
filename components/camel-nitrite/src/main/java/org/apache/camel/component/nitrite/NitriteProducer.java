begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.nitrite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
operator|.
name|operation
operator|.
name|CollectionOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
operator|.
name|operation
operator|.
name|RepositoryOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
operator|.
name|operation
operator|.
name|common
operator|.
name|UpsertOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dizitart
operator|.
name|no2
operator|.
name|NitriteCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dizitart
operator|.
name|no2
operator|.
name|objects
operator|.
name|ObjectRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Nitrite producer.  */
end_comment

begin_class
DECL|class|NitriteProducer
specifier|public
class|class
name|NitriteProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NitriteProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|NitriteEndpoint
name|endpoint
decl_stmt|;
DECL|field|operationValidator
specifier|private
name|Consumer
argument_list|<
name|AbstractNitriteOperation
argument_list|>
name|operationValidator
init|=
parameter_list|(
name|noop
parameter_list|)
lambda|->
block|{ }
decl_stmt|;
DECL|method|NitriteProducer (NitriteEndpoint endpoint)
specifier|public
name|NitriteProducer
parameter_list|(
name|NitriteEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getNitriteCollection
argument_list|()
operator|instanceof
name|ObjectRepository
condition|)
block|{
name|operationValidator
operator|=
name|operation
lambda|->
block|{
if|if
condition|(
operator|!
operator|(
name|operation
operator|instanceof
name|RepositoryOperation
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Attempted to run Collection-only operation %s on Repository %s"
argument_list|,
name|operation
operator|.
name|getClass
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getNitriteCollection
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getNitriteCollection
argument_list|()
operator|instanceof
name|NitriteCollection
condition|)
block|{
name|operationValidator
operator|=
name|operation
lambda|->
block|{
if|if
condition|(
operator|!
operator|(
name|operation
operator|instanceof
name|CollectionOperation
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Attempted to run Repository-only operation %s on Collection %s"
argument_list|,
name|operation
operator|.
name|getClass
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getNitriteCollection
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
block|}
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|AbstractNitriteOperation
name|operation
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getHeader
argument_list|(
name|NitriteConstants
operator|.
name|OPERATION
argument_list|,
name|AbstractNitriteOperation
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
operator|new
name|UpsertOperation
argument_list|()
expr_stmt|;
block|}
name|operationValidator
operator|.
name|accept
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|operation
operator|.
name|execute
argument_list|(
name|exchange
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

