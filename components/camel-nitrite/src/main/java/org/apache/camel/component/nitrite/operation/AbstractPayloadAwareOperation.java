begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.nitrite.operation
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
operator|.
name|operation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
operator|.
name|AbstractNitriteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|nitrite
operator|.
name|NitriteEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dizitart
operator|.
name|no2
operator|.
name|Document
import|;
end_import

begin_class
DECL|class|AbstractPayloadAwareOperation
specifier|public
specifier|abstract
class|class
name|AbstractPayloadAwareOperation
extends|extends
name|AbstractNitriteOperation
block|{
DECL|field|expression
specifier|private
name|Expression
name|expression
decl_stmt|;
DECL|method|AbstractPayloadAwareOperation (Object body)
specifier|public
name|AbstractPayloadAwareOperation
parameter_list|(
name|Object
name|body
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|ExpressionBuilder
operator|.
name|constantExpression
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractPayloadAwareOperation (Expression expression)
specifier|public
name|AbstractPayloadAwareOperation
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
DECL|method|AbstractPayloadAwareOperation ()
specifier|public
name|AbstractPayloadAwareOperation
parameter_list|()
block|{
name|this
operator|.
name|expression
operator|=
name|ExpressionBuilder
operator|.
name|bodyExpression
argument_list|()
expr_stmt|;
block|}
DECL|method|getPayload (Exchange exchange, NitriteEndpoint endpoint)
specifier|protected
name|Object
name|getPayload
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|NitriteEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|targetClass
init|=
name|endpoint
operator|.
name|getRepositoryClass
argument_list|()
operator|!=
literal|null
condition|?
name|endpoint
operator|.
name|getRepositoryClass
argument_list|()
else|:
name|Document
operator|.
name|class
decl_stmt|;
name|Object
name|payload
init|=
name|expression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|targetClass
argument_list|,
name|exchange
argument_list|,
name|payload
argument_list|)
return|;
block|}
block|}
end_class

end_unit

