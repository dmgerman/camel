begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.tx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|BatchMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_class
DECL|class|BatchTransactedProducerSupport
specifier|public
specifier|abstract
class|class
name|BatchTransactedProducerSupport
extends|extends
name|CamelTestSupport
block|{
DECL|method|getBrokerUri ()
specifier|public
specifier|abstract
name|String
name|getBrokerUri
parameter_list|()
function_decl|;
DECL|method|runTest (String destinationName, int consumerRouteCount, int messageCount, int totalAttempts)
specifier|protected
name|void
name|runTest
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|int
name|consumerRouteCount
parameter_list|,
name|int
name|messageCount
parameter_list|,
name|int
name|totalAttempts
parameter_list|)
throws|throws
name|Exception
block|{
comment|// The CountDownLatch is used to make our final assertions await
comment|// unit all the messages have been processed. It is also
comment|// set to time out on the await. Our values are multiplied
comment|// by the number of routes we have.
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|totalAttempts
operator|+
operator|(
name|messageCount
operator|*
name|consumerRouteCount
operator|)
argument_list|)
decl_stmt|;
name|addRoute
argument_list|(
name|destinationName
argument_list|,
name|consumerRouteCount
argument_list|,
name|latch
argument_list|)
expr_stmt|;
comment|// We should see the BatchMessage once in the prebatch and once in the
comment|// redelivery. Then we should see 30 messages arrive in the postbatch.
name|getMockEndpoint
argument_list|(
literal|"mock:test.producer"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|totalAttempts
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|consumerRouteCount
condition|;
name|i
operator|++
control|)
block|{
name|getMockEndpoint
argument_list|(
literal|"mock:test.consumer."
operator|+
name|i
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|BatchMessage
argument_list|<
name|String
argument_list|>
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|body
init|=
literal|"Hello World "
operator|+
name|i
decl_stmt|;
name|BatchMessage
argument_list|<
name|String
argument_list|>
name|message
init|=
operator|new
name|BatchMessage
argument_list|<>
argument_list|(
name|body
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// First we send the batch to capture the failure.
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Send Messages"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Send Again"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
comment|// Await on our countdown for 10 seconds at most
comment|// then move on
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|getBrokerUri
argument_list|()
argument_list|)
decl_stmt|;
name|SjmsComponent
name|component
init|=
operator|new
name|SjmsComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"sjms"
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
DECL|method|addRoute (final String destinationName, final int consumerRouteCount, final CountDownLatch latch)
specifier|protected
name|void
name|addRoute
parameter_list|(
specifier|final
name|String
name|destinationName
parameter_list|,
specifier|final
name|int
name|consumerRouteCount
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|id
argument_list|(
literal|"producer.route"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Producer Route Body: ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test.producer"
argument_list|)
operator|.
name|to
argument_list|(
name|destinationName
operator|+
literal|"?transacted=true"
argument_list|)
comment|// This Processor will force an exception to occur on the exchange
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Only throw the exception the first time around.
comment|// Otherwise allow it to proceed.
if|if
condition|(
name|counter
operator|.
name|getAndIncrement
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"BatchMessage received without redelivery. Rolling back."
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Countdown the latch
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|consumerRouteCount
condition|;
name|i
operator|++
control|)
block|{
name|from
argument_list|(
name|destinationName
argument_list|)
operator|.
name|id
argument_list|(
literal|"consumer.route."
operator|+
name|i
argument_list|)
operator|.
name|log
argument_list|(
literal|"Consumer Route "
operator|+
name|i
operator|+
literal|" Body: ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test.consumer."
operator|+
name|i
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Countdown the latch
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

