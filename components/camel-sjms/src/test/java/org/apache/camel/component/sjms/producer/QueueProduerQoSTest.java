begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|support
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|QueueProduerQoSTest
specifier|public
class|class
name|QueueProduerQoSTest
extends|extends
name|JmsTestSupport
block|{
DECL|field|TEST_INONLY_DESTINATION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_INONLY_DESTINATION_NAME
init|=
literal|"queue.producer.test.qos.inonly"
decl_stmt|;
DECL|field|TEST_INOUT_DESTINATION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|TEST_INOUT_DESTINATION_NAME
init|=
literal|"queue.producer.test.qos.inout"
decl_stmt|;
DECL|field|EXPIRED_MESSAGE_ROUTE_ID
specifier|private
specifier|static
specifier|final
name|String
name|EXPIRED_MESSAGE_ROUTE_ID
init|=
literal|"expiredAdvisoryRoute"
decl_stmt|;
annotation|@
name|Test
DECL|method|testInOutQueueProducerTTL ()
specifier|public
name|void
name|testInOutQueueProducerTTL
parameter_list|()
throws|throws
name|Exception
block|{
name|NotifyBuilder
name|expireMatcher
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|fromRoute
argument_list|(
name|EXPIRED_MESSAGE_ROUTE_ID
argument_list|)
operator|.
name|whenCompleted
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|endpoint
init|=
name|String
operator|.
name|format
argument_list|(
literal|"sjms:queue:%s?ttl=1000&exchangePattern=InOut&responseTimeOut=500"
argument_list|,
name|TEST_INOUT_DESTINATION_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
name|endpoint
argument_list|,
literal|"test message"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"we aren't expecting any consumers, so should not succeed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// we are expecting an exception here because there are no consumers on this queue,
comment|// so we will not be able to do a real InOut/request-response, but that's okay
comment|// we're just interested in the message becoming expired
block|}
comment|// we should delay a bit so broker can run its expiration processes...
name|expireMatcher
operator|.
name|matches
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|DestinationViewMBean
name|queue
init|=
name|getQueueMBean
argument_list|(
name|TEST_INOUT_DESTINATION_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There were unexpected messages left in the queue: "
operator|+
name|TEST_INOUT_DESTINATION_NAME
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInOnlyQueueProducerTTL ()
specifier|public
name|void
name|testInOnlyQueueProducerTTL
parameter_list|()
throws|throws
name|Exception
block|{
name|NotifyBuilder
name|expireMatcher
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|fromRoute
argument_list|(
name|EXPIRED_MESSAGE_ROUTE_ID
argument_list|)
operator|.
name|whenCompleted
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|endpoint
init|=
name|String
operator|.
name|format
argument_list|(
literal|"sjms:queue:%s?ttl=1000"
argument_list|,
name|TEST_INONLY_DESTINATION_NAME
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|endpoint
argument_list|,
literal|"test message"
argument_list|)
expr_stmt|;
comment|// we should delay a bit so broker can run its expiration processes...
name|expireMatcher
operator|.
name|matches
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|DestinationViewMBean
name|queue
init|=
name|getQueueMBean
argument_list|(
name|TEST_INONLY_DESTINATION_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There were unexpected messages left in the queue: "
operator|+
name|TEST_INONLY_DESTINATION_NAME
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configureBroker (BrokerService broker)
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectory
argument_list|(
literal|"target/activemq-data"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|brokerUri
argument_list|)
expr_stmt|;
comment|// configure expiration rate
name|ActiveMQQueue
name|queueName
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
decl_stmt|;
name|PolicyEntry
name|entry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setDestination
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"sjms:topic:ActiveMQ.Advisory.Expired.Queue.>"
argument_list|)
operator|.
name|routeId
argument_list|(
name|EXPIRED_MESSAGE_ROUTE_ID
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:expiredAdvisory"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

