begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * TODO Add Class documentation for ConnectionFactoryResourceTest  */
end_comment

begin_class
DECL|class|SessionPoolTest
specifier|public
class|class
name|SessionPoolTest
block|{
DECL|field|connectionFactory
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://broker?broker.persistent=false"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|connectionFactory
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.SessionPoolTest#createObject()}      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testCreateObject ()
specifier|public
name|void
name|testCreateObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactoryResource
name|connections
init|=
operator|new
name|ConnectionFactoryResource
argument_list|(
literal|1
argument_list|,
name|connectionFactory
argument_list|)
decl_stmt|;
name|connections
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|SessionPool
name|sessions
init|=
operator|new
name|SessionPool
argument_list|(
literal|1
argument_list|,
name|connections
argument_list|)
decl_stmt|;
name|sessions
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessions
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|sessions
operator|.
name|createObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|drainPool
argument_list|()
expr_stmt|;
name|connections
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#borrowObject()}.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testBorrowObject ()
specifier|public
name|void
name|testBorrowObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactoryResource
name|connections
init|=
operator|new
name|ConnectionFactoryResource
argument_list|(
literal|1
argument_list|,
name|connectionFactory
argument_list|)
decl_stmt|;
name|connections
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|SessionPool
name|sessions
init|=
operator|new
name|SessionPool
argument_list|(
literal|1
argument_list|,
name|connections
argument_list|)
decl_stmt|;
name|sessions
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessions
argument_list|)
expr_stmt|;
name|ActiveMQSession
name|session
init|=
operator|(
name|ActiveMQSession
operator|)
name|sessions
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|session
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQSession
name|session2
init|=
operator|(
name|ActiveMQSession
operator|)
name|sessions
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|session2
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|drainPool
argument_list|()
expr_stmt|;
name|connections
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#returnObject(java.lang.Object)}      * .      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testReturnObject ()
specifier|public
name|void
name|testReturnObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactoryResource
name|connections
init|=
operator|new
name|ConnectionFactoryResource
argument_list|(
literal|1
argument_list|,
name|connectionFactory
argument_list|)
decl_stmt|;
name|connections
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|SessionPool
name|sessions
init|=
operator|new
name|SessionPool
argument_list|(
literal|1
argument_list|,
name|connections
argument_list|)
decl_stmt|;
name|sessions
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|sessions
argument_list|)
expr_stmt|;
name|ActiveMQSession
name|session
init|=
operator|(
name|ActiveMQSession
operator|)
name|sessions
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|session
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQSession
name|session2
init|=
operator|(
name|ActiveMQSession
operator|)
name|sessions
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|session2
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|returnObject
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session2
operator|=
operator|(
name|ActiveMQSession
operator|)
name|sessions
operator|.
name|borrowObject
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|session2
argument_list|)
expr_stmt|;
name|sessions
operator|.
name|drainPool
argument_list|()
expr_stmt|;
name|connections
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

