begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.batch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SimpleRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StopWatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @author jkorab  */
end_comment

begin_class
DECL|class|SjmsBatchConsumerTest
specifier|public
class|class
name|SjmsBatchConsumerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SjmsBatchConsumerTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|broker
specifier|public
name|EmbeddedActiveMQBroker
name|broker
init|=
operator|new
name|EmbeddedActiveMQBroker
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|public
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleRegistry
name|registry
init|=
operator|new
name|SimpleRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"testStrategy"
argument_list|,
operator|new
name|ListAggregationStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTcpConnectorUri
argument_list|()
argument_list|)
decl_stmt|;
name|SjmsComponent
name|sjmsComponent
init|=
operator|new
name|SjmsComponent
argument_list|()
decl_stmt|;
name|sjmsComponent
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|SjmsBatchComponent
name|sjmsBatchComponent
init|=
operator|new
name|SjmsBatchComponent
argument_list|()
decl_stmt|;
name|sjmsBatchComponent
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|registry
argument_list|)
decl_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
literal|"sjms"
argument_list|,
name|sjmsComponent
argument_list|)
expr_stmt|;
name|context
operator|.
name|addComponent
argument_list|(
literal|"sjms-batch"
argument_list|,
name|sjmsBatchComponent
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|class|TransactedSendHarness
specifier|private
specifier|static
class|class
name|TransactedSendHarness
extends|extends
name|RouteBuilder
block|{
DECL|field|queueName
specifier|private
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|method|TransactedSendHarness (String queueName)
specifier|public
name|TransactedSendHarness
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"harness"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|20
argument_list|)
operator|.
name|split
argument_list|(
name|body
argument_list|()
argument_list|)
operator|.
name|toF
argument_list|(
literal|"sjms:queue:%s?transacted=true"
argument_list|,
name|queueName
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:before"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isUseAdviceWith ()
specifier|public
name|boolean
name|isUseAdviceWith
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|testConsumption ()
specifier|public
name|void
name|testConsumption
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|messageCount
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|consumerCount
init|=
literal|5
decl_stmt|;
specifier|final
name|String
name|queueName
init|=
name|getQueueName
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|TransactedSendHarness
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|completionTimeout
init|=
literal|1000
decl_stmt|;
name|int
name|completionSize
init|=
literal|200
decl_stmt|;
name|fromF
argument_list|(
literal|"sjms-batch:%s?completionTimeout=%s&completionSize=%s"
operator|+
literal|"&consumerCount=%s&aggregationStrategy=#testStrategy"
argument_list|,
name|queueName
argument_list|,
name|completionTimeout
argument_list|,
name|completionSize
argument_list|,
name|consumerCount
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"batchConsumer"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|10
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|split
argument_list|(
name|body
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:split"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockEndpoint
name|mockBefore
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:before"
argument_list|)
decl_stmt|;
name|mockBefore
operator|.
name|setExpectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockSplit
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:split"
argument_list|)
decl_stmt|;
name|mockSplit
operator|.
name|setExpectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending messages"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:in"
argument_list|,
name|generateStrings
argument_list|(
name|messageCount
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Send complete"
argument_list|)
expr_stmt|;
name|StopWatch
name|stopWatch
init|=
operator|new
name|StopWatch
argument_list|()
decl_stmt|;
name|context
operator|.
name|startRoute
argument_list|(
literal|"batchConsumer"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|long
name|time
init|=
name|stopWatch
operator|.
name|stop
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processed {} messages in {} ms"
argument_list|,
name|messageCount
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Average throughput {} msg/s"
argument_list|,
call|(
name|long
call|)
argument_list|(
name|messageCount
operator|/
operator|(
name|time
operator|/
literal|1000d
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumption_completionSize ()
specifier|public
name|void
name|testConsumption_completionSize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|completionSize
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|completionTimeout
init|=
operator|-
literal|1
decl_stmt|;
comment|// size-based only
specifier|final
name|String
name|queueName
init|=
name|getQueueName
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|TransactedSendHarness
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|fromF
argument_list|(
literal|"sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy"
argument_list|,
name|queueName
argument_list|,
name|completionTimeout
argument_list|,
name|completionSize
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"batchConsumer"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|10
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|DEBUG
argument_list|,
literal|"${body.size}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:batches"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|messageCount
init|=
literal|100
decl_stmt|;
name|MockEndpoint
name|mockBatches
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:batches"
argument_list|)
decl_stmt|;
name|mockBatches
operator|.
name|expectedMessageCount
argument_list|(
name|messageCount
operator|/
name|completionSize
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:in"
argument_list|,
name|generateStrings
argument_list|(
name|messageCount
argument_list|)
argument_list|)
expr_stmt|;
name|mockBatches
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumption_completionTimeout ()
specifier|public
name|void
name|testConsumption_completionTimeout
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|completionTimeout
init|=
literal|2000
decl_stmt|;
specifier|final
name|int
name|completionSize
init|=
operator|-
literal|1
decl_stmt|;
comment|// timeout-based only
specifier|final
name|String
name|queueName
init|=
name|getQueueName
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|TransactedSendHarness
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|fromF
argument_list|(
literal|"sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy"
argument_list|,
name|queueName
argument_list|,
name|completionTimeout
argument_list|,
name|completionSize
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"batchConsumer"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:batches"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|messageCount
init|=
literal|50
decl_stmt|;
name|assertTrue
argument_list|(
name|messageCount
operator|<
name|SjmsBatchEndpoint
operator|.
name|DEFAULT_COMPLETION_SIZE
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockBatches
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:batches"
argument_list|)
decl_stmt|;
name|mockBatches
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// everything batched together
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:in"
argument_list|,
name|generateStrings
argument_list|(
name|messageCount
argument_list|)
argument_list|)
expr_stmt|;
name|mockBatches
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertFirstMessageBodyOfLength
argument_list|(
name|mockBatches
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks whether multiple consumer endpoints can operate in parallel.      */
annotation|@
name|Test
DECL|method|testConsumption_multipleConsumerEndpoints ()
specifier|public
name|void
name|testConsumption_multipleConsumerEndpoints
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|completionTimeout
init|=
literal|2000
decl_stmt|;
specifier|final
name|int
name|completionSize
init|=
literal|5
decl_stmt|;
specifier|final
name|String
name|queueName
init|=
name|getQueueName
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|multicast
argument_list|()
operator|.
name|toF
argument_list|(
literal|"sjms:%s"
argument_list|,
name|queueName
operator|+
literal|"A"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"sjms:%s"
argument_list|,
name|queueName
operator|+
literal|"B"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
name|fromF
argument_list|(
literal|"sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy"
argument_list|,
name|queueName
operator|+
literal|"A"
argument_list|,
name|completionTimeout
argument_list|,
name|completionSize
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"batchConsumerA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:outA"
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy"
argument_list|,
name|queueName
operator|+
literal|"B"
argument_list|,
name|completionTimeout
argument_list|,
name|completionSize
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"batchConsumerB"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:outB"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|messageCount
init|=
literal|5
decl_stmt|;
name|assertTrue
argument_list|(
name|messageCount
operator|<
name|SjmsBatchEndpoint
operator|.
name|DEFAULT_COMPLETION_SIZE
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockOutA
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:outA"
argument_list|)
decl_stmt|;
name|mockOutA
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// everything batched together
name|MockEndpoint
name|mockOutB
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:outB"
argument_list|)
decl_stmt|;
name|mockOutB
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// everything batched together
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:in"
argument_list|,
name|generateStrings
argument_list|(
name|messageCount
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertFirstMessageBodyOfLength
argument_list|(
name|mockOutA
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
name|assertFirstMessageBodyOfLength
argument_list|(
name|mockOutB
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumption_rollback ()
specifier|public
name|void
name|testConsumption_rollback
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|completionTimeout
init|=
literal|2000
decl_stmt|;
specifier|final
name|int
name|completionSize
init|=
literal|5
decl_stmt|;
specifier|final
name|String
name|queueName
init|=
name|getQueueName
argument_list|()
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|TransactedSendHarness
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|fromF
argument_list|(
literal|"sjms-batch:%s?completionTimeout=%s&completionSize=%s&aggregationStrategy=#testStrategy"
argument_list|,
name|queueName
argument_list|,
name|completionTimeout
argument_list|,
name|completionSize
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"batchConsumer"
argument_list|)
operator|.
name|startupOrder
argument_list|(
literal|10
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:batches"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|messageCount
init|=
literal|5
decl_stmt|;
name|MockEndpoint
name|mockBatches
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:batches"
argument_list|)
decl_stmt|;
comment|// the first time around, the batch should throw an exception
name|mockBatches
operator|.
name|whenExchangeReceived
argument_list|(
literal|1
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Boom!"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// so the batch should be processed twice due to redelivery
name|mockBatches
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:in"
argument_list|,
name|generateStrings
argument_list|(
name|messageCount
argument_list|)
argument_list|)
expr_stmt|;
name|mockBatches
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|assertFirstMessageBodyOfLength (MockEndpoint mockEndpoint, int expectedLength)
specifier|private
name|void
name|assertFirstMessageBodyOfLength
parameter_list|(
name|MockEndpoint
name|mockEndpoint
parameter_list|,
name|int
name|expectedLength
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getQueueName ()
specifier|private
name|String
name|getQueueName
parameter_list|()
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyMMddhhmmss"
argument_list|)
decl_stmt|;
return|return
literal|"sjms-batch-"
operator|+
name|sdf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
return|;
block|}
DECL|method|generateStrings (int messageCount)
specifier|private
name|String
index|[]
name|generateStrings
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|strings
index|[
name|i
index|]
operator|=
literal|"message:"
operator|+
name|i
expr_stmt|;
block|}
return|return
name|strings
return|;
block|}
block|}
end_class

end_unit

