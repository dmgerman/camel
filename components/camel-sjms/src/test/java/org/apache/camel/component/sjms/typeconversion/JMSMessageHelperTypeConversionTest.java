begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.typeconversion
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|typeconversion
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|support
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JMSMessageHelperTypeConversionTest
specifier|public
class|class
name|JMSMessageHelperTypeConversionTest
extends|extends
name|JmsTestSupport
block|{
DECL|field|SJMS_QUEUE_URI
specifier|private
specifier|static
specifier|final
name|String
name|SJMS_QUEUE_URI
init|=
literal|"sjms:queue:start"
decl_stmt|;
DECL|field|MOCK_RESULT_URI
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_RESULT_URI
init|=
literal|"mock:result"
decl_stmt|;
DECL|field|message
specifier|private
name|Exchange
name|message
decl_stmt|;
annotation|@
name|Test
DECL|method|testJMSMessageHelperString ()
specifier|public
name|void
name|testJMSMessageHelperString
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperInputStream ()
specifier|public
name|void
name|testJMSMessageHelperInputStream
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|String
name|p
init|=
literal|"Hello Camel"
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|p
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|byte
index|[]
operator|.
expr|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperByteBuffer ()
specifier|public
name|void
name|testJMSMessageHelperByteBuffer
parameter_list|()
throws|throws
name|Exception
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|String
name|p
init|=
literal|"Hello Camel"
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|p
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|bb
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|byte
index|[]
operator|.
expr|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperFile ()
specifier|public
name|void
name|testJMSMessageHelperFile
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|String
name|p
init|=
literal|"Hello Camel"
decl_stmt|;
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tmp-test"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|boolean
name|resultDelete
init|=
name|f
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultDelete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|byte
index|[]
operator|.
expr|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperReader ()
specifier|public
name|void
name|testJMSMessageHelperReader
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|String
name|p
init|=
literal|"Hello Camel"
decl_stmt|;
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"tmp-test"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
name|Reader
name|test
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|boolean
name|resultDelete
init|=
name|f
operator|.
name|delete
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|resultDelete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|byte
index|[]
operator|.
expr|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperStringReader ()
specifier|public
name|void
name|testJMSMessageHelperStringReader
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|FileNotFoundException
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|String
name|p
init|=
literal|"Hello Camel"
decl_stmt|;
name|StringReader
name|test
init|=
operator|new
name|StringReader
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|byte
index|[]
operator|.
expr|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperChar ()
specifier|public
name|void
name|testJMSMessageHelperChar
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|FileNotFoundException
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"H"
argument_list|)
expr_stmt|;
name|char
name|p
init|=
literal|'H'
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperCharacter ()
specifier|public
name|void
name|testJMSMessageHelperCharacter
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|FileNotFoundException
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"H"
argument_list|)
expr_stmt|;
name|Character
name|p
init|=
literal|'H'
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJMSMessageHelperCharArray ()
specifier|public
name|void
name|testJMSMessageHelperCharArray
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|FileNotFoundException
block|{
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|char
index|[]
name|p
init|=
block|{
literal|'H'
block|,
literal|'e'
block|,
literal|'l'
block|,
literal|'l'
block|,
literal|'o'
block|,
literal|' '
block|,
literal|'C'
block|,
literal|'a'
block|,
literal|'m'
block|,
literal|'e'
block|,
literal|'l'
block|}
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|SJMS_QUEUE_URI
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|interceptSendToEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|message
operator|=
operator|(
name|Exchange
operator|)
name|exchange
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|SJMS_QUEUE_URI
argument_list|)
operator|.
name|to
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

