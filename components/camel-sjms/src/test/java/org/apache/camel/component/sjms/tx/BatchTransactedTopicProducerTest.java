begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.tx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|BatchMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BatchTransactedTopicProducerTest
specifier|public
class|class
name|BatchTransactedTopicProducerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Produce
DECL|field|template
specifier|protected
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|Test
DECL|method|testEndpointConfiguredBatchTransaction ()
specifier|public
name|void
name|testEndpointConfiguredBatchTransaction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We should see the World message twice, once for the exception
name|getMockEndpoint
argument_list|(
literal|"mock:test.prebatch"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:test.postbatch"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BatchMessage
argument_list|<
name|String
argument_list|>
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchMessage
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|String
name|body
init|=
literal|"Hello World "
operator|+
name|i
decl_stmt|;
name|BatchMessage
argument_list|<
name|String
argument_list|>
name|message
init|=
operator|new
name|BatchMessage
argument_list|<
name|String
argument_list|>
argument_list|(
name|body
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|messages
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:test.prebatch"
argument_list|)
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:test.postbatch"
argument_list|)
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://broker?broker.persistent=false&broker.useJmx=true"
argument_list|)
decl_stmt|;
name|SjmsComponent
name|sjms
init|=
operator|new
name|SjmsComponent
argument_list|()
decl_stmt|;
name|sjms
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"sjms"
argument_list|,
name|sjms
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:test-before?showAll=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"sjms:topic:batch.topic?transacted=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test.prebatch"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"sjms:topic:batch.topic"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:test-after?showAll=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:test.postbatch"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

