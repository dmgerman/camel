begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.tx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TransactedAsyncExceptionTest
specifier|public
class|class
name|TransactedAsyncExceptionTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|BROKER_URI
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_URI
init|=
literal|"vm://tqc_test_broker?broker.persistent=false&broker.useJmx=false"
decl_stmt|;
DECL|field|TRANSACTION_REDELIVERY_COUNT
specifier|private
specifier|static
specifier|final
name|int
name|TRANSACTION_REDELIVERY_COUNT
init|=
literal|10
decl_stmt|;
annotation|@
name|Test
DECL|method|testRouteWithThread ()
specifier|public
name|void
name|testRouteWithThread
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|destination
init|=
literal|"sjms:queue:async.exception"
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|from
argument_list|(
name|destination
operator|+
literal|"?acknowledgementMode=SESSION_TRANSACTED&transacted=true"
argument_list|)
operator|.
name|threads
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
lambda|->
block|{
if|if
condition|(
name|counter
operator|.
name|incrementAndGet
argument_list|()
operator|<
name|TRANSACTION_REDELIVERY_COUNT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:async.exception"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|destination
argument_list|,
literal|"begin"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:async.exception"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mockEndpoint
operator|.
name|await
argument_list|(
name|getShutdownTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|dumpThreads
argument_list|()
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
name|getShutdownTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|dumpThreads ()
specifier|private
name|void
name|dumpThreads
parameter_list|()
block|{
name|ThreadMXBean
name|threadMXBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
for|for
control|(
name|ThreadInfo
name|threadInfo
range|:
name|threadMXBean
operator|.
name|getThreadInfo
argument_list|(
name|threadMXBean
operator|.
name|getAllThreadIds
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
if|if
condition|(
name|Thread
operator|.
name|State
operator|.
name|BLOCKED
operator|.
name|equals
argument_list|(
name|threadInfo
operator|.
name|getThreadState
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"blocked thread: {}"
argument_list|,
name|threadInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"normal thread: {}"
argument_list|,
name|threadInfo
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"full stack: {}"
argument_list|,
name|Arrays
operator|.
name|stream
argument_list|(
name|threadInfo
operator|.
name|getStackTrace
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n\t"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|BROKER_URI
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setUseCollisionAvoidance
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setMaximumRedeliveries
argument_list|(
name|TRANSACTION_REDELIVERY_COUNT
argument_list|)
expr_stmt|;
name|SjmsComponent
name|component
init|=
operator|new
name|SjmsComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"sjms"
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|getShutdownTimeout ()
specifier|protected
name|int
name|getShutdownTimeout
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
end_class

end_unit

