begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|support
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_class
DECL|class|MockMessageConsumer
specifier|public
class|class
name|MockMessageConsumer
extends|extends
name|ActiveMQMessageConsumer
block|{
DECL|field|isBadSession
specifier|private
name|boolean
name|isBadSession
decl_stmt|;
DECL|method|MockMessageConsumer (ActiveMQSession session, ConsumerId consumerId, ActiveMQDestination dest, String name, String selector, int prefetch, int maximumPendingMessageCount, boolean noLocal, boolean browser, boolean dispatchAsync, MessageListener messageListener, boolean isBadSession)
specifier|public
name|MockMessageConsumer
parameter_list|(
name|ActiveMQSession
name|session
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|selector
parameter_list|,
name|int
name|prefetch
parameter_list|,
name|int
name|maximumPendingMessageCount
parameter_list|,
name|boolean
name|noLocal
parameter_list|,
name|boolean
name|browser
parameter_list|,
name|boolean
name|dispatchAsync
parameter_list|,
name|MessageListener
name|messageListener
parameter_list|,
name|boolean
name|isBadSession
parameter_list|)
throws|throws
name|JMSException
block|{
name|super
argument_list|(
name|session
argument_list|,
name|consumerId
argument_list|,
name|dest
argument_list|,
name|name
argument_list|,
name|selector
argument_list|,
name|prefetch
argument_list|,
name|maximumPendingMessageCount
argument_list|,
name|noLocal
argument_list|,
name|browser
argument_list|,
name|dispatchAsync
argument_list|,
name|messageListener
argument_list|)
expr_stmt|;
name|this
operator|.
name|isBadSession
operator|=
name|isBadSession
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|receive (long timeout)
specifier|public
name|Message
name|receive
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isBadSession
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"asdf"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
return|;
block|}
block|}
end_class

end_unit

