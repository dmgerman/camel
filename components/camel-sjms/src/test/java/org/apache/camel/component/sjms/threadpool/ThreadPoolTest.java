begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.threadpool
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|threadpool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|support
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Unit test for CAMEL-7715.  *  */
end_comment

begin_class
DECL|class|ThreadPoolTest
specifier|public
class|class
name|ThreadPoolTest
extends|extends
name|JmsTestSupport
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ThreadPoolTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FROM_ROUTE
specifier|private
specifier|static
specifier|final
name|String
name|FROM_ROUTE
init|=
literal|"from"
decl_stmt|;
DECL|field|TO_ROUTE
specifier|private
specifier|static
specifier|final
name|String
name|TO_ROUTE
init|=
literal|"to"
decl_stmt|;
annotation|@
name|Override
DECL|method|useJmx ()
specifier|protected
name|boolean
name|useJmx
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"sjms:queue:foo"
argument_list|)
operator|.
name|routeId
argument_list|(
name|FROM_ROUTE
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"sjms:queue:foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:test.log.1?showBody=true"
argument_list|)
operator|.
name|routeId
argument_list|(
name|TO_ROUTE
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Test that only 2 thread pools are created on start      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testContextStart ()
specifier|public
name|void
name|testContextStart
parameter_list|()
throws|throws
name|Exception
block|{
name|assertProducerThreadPoolCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertConsumerThreadPoolCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that ThreadPool is removed when producer is removed      * @throws Exception      */
annotation|@
name|Test
DECL|method|testProducerThreadThreadPoolRemoved ()
specifier|public
name|void
name|testProducerThreadThreadPoolRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|FROM_ROUTE
argument_list|)
expr_stmt|;
name|assertProducerThreadPoolCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that ThreadPool is removed when consumer is removed      * @throws Exception      */
annotation|@
name|Test
DECL|method|testConsumerThreadThreadPoolRemoved ()
specifier|public
name|void
name|testConsumerThreadThreadPoolRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|TO_ROUTE
argument_list|)
expr_stmt|;
name|assertConsumerThreadPoolCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|assertProducerThreadPoolCount (final int count)
specifier|private
name|void
name|assertProducerThreadPoolCount
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|count
argument_list|,
name|getMbeanCount
argument_list|(
literal|"\"InOnlyProducer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertConsumerThreadPoolCount (final int count)
specifier|private
name|void
name|assertConsumerThreadPoolCount
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|count
argument_list|,
name|getMbeanCount
argument_list|(
literal|"\"SjmsConsumer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMbeanCount (final String name)
specifier|private
name|int
name|getMbeanCount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectInstance
argument_list|>
name|mbeans
init|=
name|mbs
operator|.
name|queryMBeans
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.camel:type=threadpools,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"mbeans size: "
operator|+
name|mbeans
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ObjectInstance
name|mbean
range|:
name|mbeans
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"mbean: {}"
argument_list|,
name|mbean
argument_list|)
expr_stmt|;
if|if
condition|(
name|mbean
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyProperty
argument_list|(
literal|"name"
argument_list|)
operator|.
name|startsWith
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

