begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.bugfixes
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|bugfixes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|support
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for CAMEL_6820Test.  This test is to verify the ability to   * support the Camel File Component more cleanly along with better support   * for ByteMessages.   */
end_comment

begin_class
DECL|class|CAMEL6820Test
specifier|public
class|class
name|CAMEL6820Test
extends|extends
name|JmsTestSupport
block|{
DECL|field|TEST_DATA_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DATA_DIR
init|=
literal|"target/testdata"
decl_stmt|;
DECL|field|FILE_OUTPUT_URI
specifier|private
specifier|static
specifier|final
name|String
name|FILE_OUTPUT_URI
init|=
literal|"file:"
operator|+
name|TEST_DATA_DIR
decl_stmt|;
DECL|field|FILE_INPUT_URI
specifier|private
specifier|static
specifier|final
name|String
name|FILE_INPUT_URI
init|=
literal|"file:"
operator|+
name|TEST_DATA_DIR
decl_stmt|;
DECL|field|SJMS_QUEUE_URI
specifier|private
specifier|static
specifier|final
name|String
name|SJMS_QUEUE_URI
init|=
literal|"sjms:queue:file.converter.queue"
decl_stmt|;
DECL|field|MOCK_RESULT_URI
specifier|private
specifier|static
specifier|final
name|String
name|MOCK_RESULT_URI
init|=
literal|"mock:result"
decl_stmt|;
annotation|@
name|Test
DECL|method|testCamelGenericFileConverterMessage ()
specifier|public
name|void
name|testCamelGenericFileConverterMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|TEST_DATA_DIR
argument_list|)
decl_stmt|;
comment|// First make sure the directories are empty or purged so we don't get bad data on a
comment|// test that is run against an uncleaned target directory
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Then add the directory back
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
comment|// Make sure the SjmsComponent is available
name|SjmsComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"sjms"
argument_list|,
name|SjmsComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|component
argument_list|)
expr_stmt|;
comment|// Create the test String
specifier|final
name|String
name|expectedBody
init|=
literal|"Hello World"
decl_stmt|;
comment|// Create the Mock endpoint
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|expectedBody
argument_list|)
expr_stmt|;
comment|// Send the message to a file to be read by the file component
name|template
operator|.
name|sendBody
argument_list|(
name|FILE_OUTPUT_URI
argument_list|,
name|expectedBody
argument_list|)
expr_stmt|;
comment|// Verify that it is working correctly
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|FILE_INPUT_URI
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|SJMS_QUEUE_URI
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|SJMS_QUEUE_URI
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|MOCK_RESULT_URI
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

