begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|MyInOutTestConsumer
specifier|public
class|class
name|MyInOutTestConsumer
implements|implements
name|MessageListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MyInOutTestConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ackMode
specifier|private
specifier|static
name|int
name|ackMode
decl_stmt|;
DECL|field|clientQueueName
specifier|private
specifier|static
name|String
name|clientQueueName
decl_stmt|;
DECL|field|transacted
specifier|private
name|boolean
name|transacted
decl_stmt|;
DECL|field|producer
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
static|static
block|{
name|clientQueueName
operator|=
literal|"client.messages"
expr_stmt|;
name|ackMode
operator|=
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
expr_stmt|;
block|}
DECL|method|MyInOutTestConsumer (ConnectionFactory connectionFactory)
specifier|public
name|MyInOutTestConsumer
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|Connection
name|connection
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|ackMode
argument_list|)
decl_stmt|;
name|Destination
name|adminQueue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|clientQueueName
argument_list|)
decl_stmt|;
comment|//Setup a message producer to send message to the queue the server is consuming from
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|adminQueue
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
comment|//Create a temporary queue that this client will listen for responses on then create a consumer
comment|//that consumes message from this temporary queue...for a real application a client should reuse
comment|//the same temp queue for each message to the server...one temp queue per client
name|Destination
name|tempDest
init|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|MessageConsumer
name|responseConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|tempDest
argument_list|)
decl_stmt|;
comment|//This class will handle the messages to the temp queue as well
name|responseConsumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//Now create the actual message you want to send
name|TextMessage
name|txtMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|txtMessage
operator|.
name|setText
argument_list|(
literal|"MyProtocolMessage"
argument_list|)
expr_stmt|;
comment|//Set the reply to field to the temp queue you created above, this is the queue the server
comment|//will respond to
name|txtMessage
operator|.
name|setJMSReplyTo
argument_list|(
name|tempDest
argument_list|)
expr_stmt|;
comment|//Set a correlation ID so when you get a response you know which sent message the response is for
comment|//If there is never more than one outstanding message to the server then the
comment|//same correlation ID can be used for all the messages...if there is more than one outstanding
comment|//message to the server you would presumably want to associate the correlation ID with this
comment|//message somehow...a Map works good
name|String
name|correlationId
init|=
name|createRandomString
argument_list|()
decl_stmt|;
name|txtMessage
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|txtMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|//Handle the exception appropriately
block|}
block|}
DECL|method|createRandomString ()
specifier|private
name|String
name|createRandomString
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|randomLong
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
return|return
name|Long
operator|.
name|toHexString
argument_list|(
name|randomLong
argument_list|)
return|;
block|}
DECL|method|onMessage (Message message)
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|String
name|messageText
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|messageText
operator|=
name|textMessage
operator|.
name|getText
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"messageText = "
operator|+
name|messageText
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|//Handle the exception appropriately
block|}
block|}
block|}
end_class

end_unit

