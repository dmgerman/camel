begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * TODO Add Class documentation for ObjectPoolTest  */
end_comment

begin_class
DECL|class|ObjectPoolTest
specifier|public
class|class
name|ObjectPoolTest
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObjectPoolTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|atomicInteger
specifier|private
name|AtomicInteger
name|atomicInteger
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|atomicInteger
operator|=
operator|new
name|AtomicInteger
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#ObjectPool()}.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testObjectPool ()
specifier|public
name|void
name|testObjectPool
parameter_list|()
throws|throws
name|Exception
block|{
name|TestPool
name|testPool
init|=
operator|new
name|TestPool
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|testPool
argument_list|)
expr_stmt|;
name|testPool
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|MyPooledObject
name|pooledObject
init|=
name|testPool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pooledObject
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a value of 1.  Returned: "
operator|+
name|pooledObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|pooledObject
operator|.
name|getObjectId
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|MyPooledObject
name|nextPooledObject
init|=
name|testPool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|nextPooledObject
argument_list|)
expr_stmt|;
name|testPool
operator|.
name|returnObject
argument_list|(
name|pooledObject
argument_list|)
expr_stmt|;
name|nextPooledObject
operator|=
name|testPool
operator|.
name|borrowObject
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|nextPooledObject
argument_list|)
expr_stmt|;
name|testPool
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#ObjectPool()}.      */
annotation|@
name|Test
DECL|method|testBadObjectPool ()
specifier|public
name|void
name|testBadObjectPool
parameter_list|()
block|{
try|try
block|{
operator|new
name|BadTestPool
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Should have thrown an IllegalStateException"
argument_list|,
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#ObjectPool(int)}.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testObjectPoolInt ()
specifier|public
name|void
name|testObjectPoolInt
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|maxPoolObjects
init|=
literal|5
decl_stmt|;
name|TestPool
name|testPool
init|=
operator|new
name|TestPool
argument_list|(
name|maxPoolObjects
argument_list|)
decl_stmt|;
name|testPool
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MyPooledObject
argument_list|>
name|poolObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|MyPooledObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxPoolObjects
condition|;
name|i
operator|++
control|)
block|{
name|poolObjects
operator|.
name|add
argument_list|(
name|testPool
operator|.
name|borrowObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxPoolObjects
condition|;
name|i
operator|++
control|)
block|{
name|MyPooledObject
name|pooledObject
init|=
name|poolObjects
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"MyPooledObject was null for borrow attempt: "
operator|+
name|i
argument_list|,
name|pooledObject
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a value in the range of 1-5.  Returned: "
operator|+
name|pooledObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|pooledObject
operator|.
name|getObjectId
argument_list|()
operator|>
literal|0
operator|&&
name|pooledObject
operator|.
name|getObjectId
argument_list|()
operator|<
literal|6
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"MyPooledObject has an ID of: "
operator|+
name|pooledObject
operator|.
name|getObjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"Pool should be empty"
argument_list|,
name|testPool
operator|.
name|borrowObject
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MyPooledObject
name|myPooledObject
range|:
name|poolObjects
control|)
block|{
name|testPool
operator|.
name|returnObject
argument_list|(
name|myPooledObject
argument_list|)
expr_stmt|;
block|}
name|MyPooledObject
name|pooledObject
init|=
name|testPool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pooledObject
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a value in the range of 1-5.  Returned: "
operator|+
name|pooledObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|pooledObject
operator|.
name|getObjectId
argument_list|()
operator|>
literal|0
operator|&&
name|pooledObject
operator|.
name|getObjectId
argument_list|()
operator|<
literal|6
argument_list|)
expr_stmt|;
name|testPool
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#createObject()}.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testCreateObject ()
specifier|public
name|void
name|testCreateObject
parameter_list|()
throws|throws
name|Exception
block|{
name|TestPool
name|testPool
init|=
operator|new
name|TestPool
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|testPool
operator|.
name|createObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#borrowObject()}.      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testBorrowObject ()
specifier|public
name|void
name|testBorrowObject
parameter_list|()
throws|throws
name|Exception
block|{
name|TestPool
name|testPool
init|=
operator|new
name|TestPool
argument_list|()
decl_stmt|;
name|testPool
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|MyPooledObject
name|pooledObject
init|=
name|testPool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pooledObject
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a value of 1.  Returned: "
operator|+
name|pooledObject
operator|.
name|getObjectId
argument_list|()
argument_list|,
name|pooledObject
operator|.
name|getObjectId
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|MyPooledObject
name|nextPooledObject
init|=
name|testPool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Expected a null as the pool of 1 was already removed"
argument_list|,
name|nextPooledObject
argument_list|)
expr_stmt|;
name|testPool
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.camel.component.sjms.jms.ObjectPool#returnObject(java.lang.Object)}      * .      *       * @throws Exception      */
annotation|@
name|Test
DECL|method|testReturnObject ()
specifier|public
name|void
name|testReturnObject
parameter_list|()
throws|throws
name|Exception
block|{
name|TestPool
name|testPool
init|=
operator|new
name|TestPool
argument_list|()
decl_stmt|;
name|testPool
operator|.
name|fillPool
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|testPool
argument_list|)
expr_stmt|;
name|MyPooledObject
name|pooledObject
init|=
name|testPool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|MyPooledObject
name|nextPooledObject
init|=
name|testPool
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|testPool
operator|.
name|returnObject
argument_list|(
name|pooledObject
argument_list|)
expr_stmt|;
name|nextPooledObject
operator|=
name|testPool
operator|.
name|borrowObject
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|nextPooledObject
argument_list|)
expr_stmt|;
name|testPool
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
DECL|class|TestPool
class|class
name|TestPool
extends|extends
name|ObjectPool
argument_list|<
name|MyPooledObject
argument_list|>
block|{
DECL|method|TestPool ()
specifier|public
name|TestPool
parameter_list|()
block|{         }
DECL|method|TestPool (int poolSize)
specifier|public
name|TestPool
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|super
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createObject ()
specifier|protected
name|MyPooledObject
name|createObject
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|MyPooledObject
argument_list|(
name|atomicInteger
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|destroyObject (MyPooledObject t)
specifier|protected
name|void
name|destroyObject
parameter_list|(
name|MyPooledObject
name|t
parameter_list|)
throws|throws
name|Exception
block|{
name|t
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|class|MyPooledObject
specifier|static
class|class
name|MyPooledObject
block|{
DECL|field|objectId
specifier|private
name|int
name|objectId
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|MyPooledObject (int objectId)
specifier|public
name|MyPooledObject
parameter_list|(
name|int
name|objectId
parameter_list|)
block|{
name|this
operator|.
name|objectId
operator|=
name|objectId
expr_stmt|;
block|}
comment|/**          * @return the OBJECT_ID          */
DECL|method|getObjectId ()
specifier|public
name|Integer
name|getObjectId
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectId
return|;
block|}
block|}
DECL|class|BadTestPool
specifier|static
class|class
name|BadTestPool
extends|extends
name|ObjectPool
argument_list|<
name|Object
argument_list|>
block|{
annotation|@
name|Override
DECL|method|createObject ()
specifier|protected
name|Object
name|createObject
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|destroyObject (Object t)
specifier|protected
name|void
name|destroyObject
parameter_list|(
name|Object
name|t
parameter_list|)
throws|throws
name|Exception
block|{         }
block|}
block|}
end_class

end_unit

