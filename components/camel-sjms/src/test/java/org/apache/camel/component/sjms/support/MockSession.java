begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|support
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageTransformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CustomDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_class
DECL|class|MockSession
specifier|public
class|class
name|MockSession
extends|extends
name|ActiveMQSession
block|{
DECL|field|isBadSession
specifier|private
name|boolean
name|isBadSession
decl_stmt|;
DECL|method|MockSession (ActiveMQConnection connection, SessionId sessionId, int acknowledgeMode, boolean asyncDispatch, boolean sessionAsyncDispatch, boolean isBadSession)
specifier|protected
name|MockSession
parameter_list|(
name|ActiveMQConnection
name|connection
parameter_list|,
name|SessionId
name|sessionId
parameter_list|,
name|int
name|acknowledgeMode
parameter_list|,
name|boolean
name|asyncDispatch
parameter_list|,
name|boolean
name|sessionAsyncDispatch
parameter_list|,
name|boolean
name|isBadSession
parameter_list|)
throws|throws
name|JMSException
block|{
name|super
argument_list|(
name|connection
argument_list|,
name|sessionId
argument_list|,
name|acknowledgeMode
argument_list|,
name|asyncDispatch
argument_list|,
name|sessionAsyncDispatch
argument_list|)
expr_stmt|;
name|this
operator|.
name|isBadSession
operator|=
name|isBadSession
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createQueue (String queueName)
specifier|public
name|Queue
name|createQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|queueName
operator|.
name|startsWith
argument_list|(
literal|"ID:"
argument_list|)
condition|?
operator|new
name|ActiveMQTempQueue
argument_list|(
name|queueName
argument_list|)
else|:
operator|new
name|ActiveMQQueue
argument_list|(
name|queueName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Destination destination, String messageSelector, boolean noLocal, MessageListener messageListener)
specifier|public
name|MessageConsumer
name|createConsumer
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|String
name|messageSelector
parameter_list|,
name|boolean
name|noLocal
parameter_list|,
name|MessageListener
name|messageListener
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|CustomDestination
condition|)
block|{
name|CustomDestination
name|prefetchPolicy1
init|=
operator|(
name|CustomDestination
operator|)
name|destination
decl_stmt|;
return|return
name|prefetchPolicy1
operator|.
name|createConsumer
argument_list|(
name|this
argument_list|,
name|messageSelector
argument_list|,
name|noLocal
argument_list|)
return|;
block|}
else|else
block|{
name|ActiveMQPrefetchPolicy
name|prefetchPolicy
init|=
name|this
operator|.
name|connection
operator|.
name|getPrefetchPolicy
argument_list|()
decl_stmt|;
name|int
name|prefetch1
decl_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|Topic
condition|)
block|{
name|prefetch1
operator|=
name|prefetchPolicy
operator|.
name|getTopicPrefetch
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|prefetch1
operator|=
name|prefetchPolicy
operator|.
name|getQueuePrefetch
argument_list|()
expr_stmt|;
block|}
name|ActiveMQDestination
name|activemqDestination
init|=
name|ActiveMQMessageTransformation
operator|.
name|transformDestination
argument_list|(
name|destination
argument_list|)
decl_stmt|;
return|return
operator|new
name|MockMessageConsumer
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|getNextConsumerId
argument_list|()
argument_list|,
name|activemqDestination
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
name|messageSelector
argument_list|,
name|prefetch1
argument_list|,
name|prefetchPolicy
operator|.
name|getMaximumPendingMessageLimit
argument_list|()
argument_list|,
name|noLocal
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|isAsyncDispatch
argument_list|()
argument_list|,
name|messageListener
argument_list|,
name|isBadSession
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

