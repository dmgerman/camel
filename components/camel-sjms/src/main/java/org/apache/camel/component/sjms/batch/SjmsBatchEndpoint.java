begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.batch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|AggregationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * @author jkorab  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"sjmsBatch"
argument_list|,
name|title
operator|=
literal|"Simple JMS Batch Component"
argument_list|,
name|syntax
operator|=
literal|"sjms-batch:destinationName?aggregationStrategy=#aggStrategy"
argument_list|,
name|consumerClass
operator|=
name|SjmsBatchComponent
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"messaging"
argument_list|)
DECL|class|SjmsBatchEndpoint
specifier|public
class|class
name|SjmsBatchEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|DEFAULT_COMPLETION_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_COMPLETION_SIZE
init|=
literal|200
decl_stmt|;
comment|// the default dispatch queue size in ActiveMQ
DECL|field|DEFAULT_COMPLETION_TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_COMPLETION_TIMEOUT
init|=
literal|500
decl_stmt|;
DECL|field|PROPERTY_BATCH_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_BATCH_SIZE
init|=
literal|"CamelSjmsBatchSize"
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|destinationName
specifier|private
name|String
name|destinationName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|description
operator|=
literal|"The number of JMS sessions to consume from"
argument_list|)
DECL|field|consumerCount
specifier|private
name|Integer
name|consumerCount
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"200"
argument_list|,
name|description
operator|=
literal|"The number of messages consumed at which the batch will be completed"
argument_list|)
DECL|field|completionSize
specifier|private
name|Integer
name|completionSize
init|=
name|DEFAULT_COMPLETION_SIZE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"500"
argument_list|,
name|description
operator|=
literal|"The timeout from receipt of the first first message when the batch will be completed"
argument_list|)
DECL|field|completionTimeout
specifier|private
name|Integer
name|completionTimeout
init|=
name|DEFAULT_COMPLETION_TIMEOUT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"1000"
argument_list|,
name|description
operator|=
literal|"The duration in milliseconds of each poll for messages. "
operator|+
literal|"completionTimeOut will be used if it is shorter and a batch has started."
argument_list|)
DECL|field|pollDuration
specifier|private
name|Integer
name|pollDuration
init|=
literal|1000
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"A #-reference to an AggregationStrategy visible to Camel"
argument_list|)
DECL|field|aggregationStrategy
specifier|private
name|AggregationStrategy
name|aggregationStrategy
decl_stmt|;
DECL|method|SjmsBatchEndpoint ()
specifier|public
name|SjmsBatchEndpoint
parameter_list|()
block|{}
DECL|method|SjmsBatchEndpoint (String endpointUri, Component component, String remaining)
specifier|public
name|SjmsBatchEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|remaining
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|destinationName
operator|=
name|remaining
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot produce though a "
operator|+
name|SjmsBatchEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|SjmsBatchConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|getAggregationStrategy ()
specifier|public
name|AggregationStrategy
name|getAggregationStrategy
parameter_list|()
block|{
return|return
name|aggregationStrategy
return|;
block|}
DECL|method|setAggregationStrategy (AggregationStrategy aggregationStrategy)
specifier|public
name|void
name|setAggregationStrategy
parameter_list|(
name|AggregationStrategy
name|aggregationStrategy
parameter_list|)
block|{
name|this
operator|.
name|aggregationStrategy
operator|=
name|aggregationStrategy
expr_stmt|;
block|}
DECL|method|getCompletionSize ()
specifier|public
name|Integer
name|getCompletionSize
parameter_list|()
block|{
return|return
name|completionSize
return|;
block|}
DECL|method|setCompletionSize (Integer completionSize)
specifier|public
name|void
name|setCompletionSize
parameter_list|(
name|Integer
name|completionSize
parameter_list|)
block|{
name|this
operator|.
name|completionSize
operator|=
name|completionSize
expr_stmt|;
block|}
DECL|method|getCompletionTimeout ()
specifier|public
name|Integer
name|getCompletionTimeout
parameter_list|()
block|{
return|return
name|completionTimeout
return|;
block|}
DECL|method|setCompletionTimeout (Integer completionTimeout)
specifier|public
name|void
name|setCompletionTimeout
parameter_list|(
name|Integer
name|completionTimeout
parameter_list|)
block|{
name|this
operator|.
name|completionTimeout
operator|=
name|completionTimeout
expr_stmt|;
block|}
DECL|method|getDestinationName ()
specifier|public
name|String
name|getDestinationName
parameter_list|()
block|{
return|return
name|destinationName
return|;
block|}
DECL|method|setDestinationName (String destinationName)
specifier|public
name|void
name|setDestinationName
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
block|}
DECL|method|getConsumerCount ()
specifier|public
name|Integer
name|getConsumerCount
parameter_list|()
block|{
return|return
name|consumerCount
return|;
block|}
DECL|method|setConsumerCount (Integer consumerCount)
specifier|public
name|void
name|setConsumerCount
parameter_list|(
name|Integer
name|consumerCount
parameter_list|)
block|{
name|this
operator|.
name|consumerCount
operator|=
name|consumerCount
expr_stmt|;
block|}
DECL|method|getPollDuration ()
specifier|public
name|Integer
name|getPollDuration
parameter_list|()
block|{
return|return
name|pollDuration
return|;
block|}
DECL|method|setPollDuration (Integer pollDuration)
specifier|public
name|void
name|setPollDuration
parameter_list|(
name|Integer
name|pollDuration
parameter_list|)
block|{
name|this
operator|.
name|pollDuration
operator|=
name|pollDuration
expr_stmt|;
block|}
block|}
end_class

end_unit

