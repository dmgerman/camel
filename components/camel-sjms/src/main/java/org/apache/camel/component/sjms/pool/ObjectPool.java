begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.pool
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO Add Class documentation for ObjectPool  *   */
end_comment

begin_class
DECL|class|ObjectPool
specifier|public
specifier|abstract
class|class
name|ObjectPool
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|DEFAULT_POOL_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_POOL_SIZE
init|=
literal|1
decl_stmt|;
DECL|field|logger
specifier|protected
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|objects
specifier|private
name|BlockingQueue
argument_list|<
name|T
argument_list|>
name|objects
decl_stmt|;
DECL|field|maxSize
specifier|private
name|int
name|maxSize
init|=
name|DEFAULT_POOL_SIZE
decl_stmt|;
DECL|field|poolCount
specifier|private
name|AtomicInteger
name|poolCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|field|lock
specifier|private
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|method|ObjectPool ()
specifier|public
name|ObjectPool
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_POOL_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|ObjectPool (int poolSize)
specifier|public
name|ObjectPool
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|poolSize
expr_stmt|;
block|}
DECL|method|fillPool ()
specifier|public
name|void
name|fillPool
parameter_list|()
block|{
name|objects
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|T
argument_list|>
argument_list|(
name|getMaxSize
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxSize
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|T
name|t
init|=
name|createObject
argument_list|()
decl_stmt|;
name|objects
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|poolCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to create Object and add it to the pool. Reason: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|drainPool ()
specifier|public
name|void
name|drainPool
parameter_list|()
throws|throws
name|Exception
block|{
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|objects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|T
name|t
init|=
name|objects
operator|.
name|remove
argument_list|()
decl_stmt|;
name|destroyObject
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Implement to create new objects of type T when the pool is initialized      * empty.      *       * @return      * @throws Exception      */
DECL|method|createObject ()
specifier|protected
specifier|abstract
name|T
name|createObject
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Clean up pool objects      *       * @return      * @throws Exception      */
DECL|method|destroyObject (T t)
specifier|protected
specifier|abstract
name|void
name|destroyObject
parameter_list|(
name|T
name|t
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * @return      * @throws Exception      */
DECL|method|borrowObject ()
specifier|public
name|T
name|borrowObject
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|borrowObject
argument_list|(
literal|1000
argument_list|)
return|;
block|}
comment|/**      * @return      * @throws Exception      */
DECL|method|borrowObject (long timeout)
specifier|public
name|T
name|borrowObject
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|T
name|t
init|=
literal|null
decl_stmt|;
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|t
operator|=
name|objects
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
comment|/**      * @param object      * @throws Exception      */
DECL|method|returnObject (T object)
specifier|public
name|void
name|returnObject
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|objects
operator|.
name|add
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return      */
DECL|method|size ()
name|int
name|size
parameter_list|()
block|{
return|return
name|objects
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Gets the ReadWriteLock value of lock for this instance of ObjectPool.      *       * @return the lock      */
DECL|method|getLock ()
specifier|protected
name|ReadWriteLock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
comment|/**      * Gets the int value of maxSize for this instance of ObjectPool.      *       * @return the maxSize      */
DECL|method|getMaxSize ()
specifier|public
name|int
name|getMaxSize
parameter_list|()
block|{
return|return
name|maxSize
return|;
block|}
block|}
end_class

end_unit

