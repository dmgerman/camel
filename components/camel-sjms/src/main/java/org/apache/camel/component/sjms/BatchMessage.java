begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A {@link List} of these objects can be used to batch a collection of bodies and  * header pairs in one exchange.  */
end_comment

begin_class
DECL|class|BatchMessage
specifier|public
class|class
name|BatchMessage
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|payload
specifier|private
name|T
name|payload
decl_stmt|;
DECL|field|headers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
decl_stmt|;
comment|/**      * @param payload may not be null      * @param headers may be null      */
DECL|method|BatchMessage (T payload, Map<String, Object> headers)
specifier|public
name|BatchMessage
parameter_list|(
name|T
name|payload
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Payload may not be null"
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|payload
operator|=
name|payload
expr_stmt|;
block|}
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
DECL|method|getPayload ()
specifier|public
name|T
name|getPayload
parameter_list|()
block|{
return|return
name|payload
return|;
block|}
DECL|method|getHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|headers
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|headers
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|payload
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|payload
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|BatchMessage
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BatchMessage
name|other
init|=
operator|(
name|BatchMessage
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|headers
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|headers
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|headers
operator|.
name|equals
argument_list|(
name|other
operator|.
name|headers
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|payload
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|payload
operator|.
name|equals
argument_list|(
name|other
operator|.
name|payload
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BatchMessage [payload="
operator|+
name|payload
operator|+
literal|", headers="
operator|+
name|headers
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

