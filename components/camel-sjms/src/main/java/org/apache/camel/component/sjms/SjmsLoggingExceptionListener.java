begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExceptionHandler
import|;
end_import

begin_comment
comment|/**  * A JMS {@link ExceptionListener} which logs all caught exceptions.  */
end_comment

begin_class
DECL|class|SjmsLoggingExceptionListener
specifier|public
class|class
name|SjmsLoggingExceptionListener
implements|implements
name|ExceptionListener
block|{
DECL|field|handler
specifier|private
specifier|final
name|ExceptionHandler
name|handler
decl_stmt|;
DECL|field|logStackTrace
specifier|private
specifier|final
name|boolean
name|logStackTrace
decl_stmt|;
DECL|method|SjmsLoggingExceptionListener (ExceptionHandler exceptionHandler, boolean logStackTrace)
specifier|public
name|SjmsLoggingExceptionListener
parameter_list|(
name|ExceptionHandler
name|exceptionHandler
parameter_list|,
name|boolean
name|logStackTrace
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|exceptionHandler
expr_stmt|;
name|this
operator|.
name|logStackTrace
operator|=
name|logStackTrace
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onException (JMSException throwable)
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|throwable
parameter_list|)
block|{
if|if
condition|(
name|logStackTrace
condition|)
block|{
name|handler
operator|.
name|handleException
argument_list|(
literal|"Execution of JMS message listener failed"
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|handleException
argument_list|(
literal|"Execution of JMS message listener failed. Caused by: ["
operator|+
name|throwable
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

