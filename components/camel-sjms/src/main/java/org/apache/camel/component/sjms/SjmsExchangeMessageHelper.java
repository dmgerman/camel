begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|StreamMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|DefaultJmsKeyFormatStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|IllegalHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsMessageHeaderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsMessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsMessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|KeyFormatStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsConstants
operator|.
name|JMS_MESSAGE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsConstants
operator|.
name|QUEUE_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsConstants
operator|.
name|TOPIC_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|removeStartingCharacters
import|;
end_import

begin_class
DECL|class|SjmsExchangeMessageHelper
specifier|public
specifier|final
class|class
name|SjmsExchangeMessageHelper
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SjmsExchangeMessageHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SjmsExchangeMessageHelper ()
specifier|private
name|SjmsExchangeMessageHelper
parameter_list|()
block|{     }
DECL|method|createExchange (Message message, Endpoint endpoint)
specifier|public
specifier|static
name|Exchange
name|createExchange
parameter_list|(
name|Message
name|message
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
return|return
name|populateExchange
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|populateExchange (Message message, Exchange exchange, boolean out)
specifier|public
specifier|static
name|Exchange
name|populateExchange
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|out
parameter_list|)
block|{
try|try
block|{
name|SjmsExchangeMessageHelper
operator|.
name|setJmsMessageHeaders
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
comment|// convert to JMS Message of the given type
name|DefaultMessage
name|bodyMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|out
condition|)
block|{
name|bodyMessage
operator|=
operator|(
name|DefaultMessage
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bodyMessage
operator|=
operator|(
name|DefaultMessage
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|JmsMessageHelper
operator|.
name|discoverJmsMessageType
argument_list|(
name|message
argument_list|)
condition|)
block|{
case|case
name|Bytes
case|:
name|BytesMessage
name|bytesMessage
init|=
operator|(
name|BytesMessage
operator|)
name|message
decl_stmt|;
if|if
condition|(
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Length of BytesMessage is too long: {}"
argument_list|,
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
index|]
decl_stmt|;
name|bytesMessage
operator|.
name|readBytes
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Bytes
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|Map
case|:
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|body
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|MapMessage
name|mapMessage
init|=
operator|(
name|MapMessage
operator|)
name|message
decl_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|names
init|=
name|mapMessage
operator|.
name|getMapNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|mapMessage
operator|.
name|getObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|body
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Map
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
break|break;
case|case
name|Object
case|:
name|ObjectMessage
name|objMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Object
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|objMsg
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Text
case|:
name|TextMessage
name|textMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Text
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|textMsg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Stream
case|:
name|StreamMessage
name|streamMessage
init|=
operator|(
name|StreamMessage
operator|)
name|message
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|next
init|=
name|streamMessage
operator|.
name|readByte
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|>
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|streamMessage
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
name|baos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Bytes
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Message
case|:
default|default:
comment|// Do nothing. Only set the headers for an empty message
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
comment|/**      * Removes the property from the JMS message.      *      * @param jmsMessage the JMS message      * @param name       name of the property to remove      * @return the old value of the property or<tt>null</tt> if not exists      * @throws JMSException can be thrown      */
DECL|method|removeJmsProperty (Message jmsMessage, String name)
specifier|public
specifier|static
name|Object
name|removeJmsProperty
parameter_list|(
name|Message
name|jmsMessage
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
comment|// check if the property exists
if|if
condition|(
operator|!
name|jmsMessage
operator|.
name|propertyExists
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|answer
init|=
literal|null
decl_stmt|;
comment|// store the properties we want to keep in a temporary map
comment|// as the JMS API is a bit strict as we are not allowed to
comment|// clear a single property, but must clear them all and redo
comment|// the properties
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|en
init|=
name|jmsMessage
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|answer
operator|=
name|key
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|jmsMessage
operator|.
name|getObjectProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// redo the properties to keep
name|jmsMessage
operator|.
name|clearProperties
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|jmsMessage
operator|.
name|setObjectProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Tests whether a given property with the name exists      *      * @param jmsMessage the JMS message      * @param name       name of the property to test if exists      * @return<tt>true</tt> if the property exists,<tt>false</tt> if not.      * @throws JMSException can be thrown      */
DECL|method|hasProperty (Message jmsMessage, String name)
specifier|public
specifier|static
name|boolean
name|hasProperty
parameter_list|(
name|Message
name|jmsMessage
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Enumeration
argument_list|<
name|?
argument_list|>
name|en
init|=
name|jmsMessage
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Sets the property on the given JMS message.      *      * @param jmsMessage the JMS message      * @param name       name of the property to set      * @param value      the value      * @throws JMSException can be thrown      */
DECL|method|setProperty (Message jmsMessage, String name, Object value)
specifier|public
specifier|static
name|void
name|setProperty
parameter_list|(
name|Message
name|jmsMessage
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
name|jmsMessage
operator|.
name|setByteProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Byte
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|jmsMessage
operator|.
name|setBooleanProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|jmsMessage
operator|.
name|setDoubleProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|jmsMessage
operator|.
name|setFloatProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Float
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|jmsMessage
operator|.
name|setIntProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|jmsMessage
operator|.
name|setLongProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
name|jmsMessage
operator|.
name|setShortProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|jmsMessage
operator|.
name|setStringProperty
argument_list|(
name|name
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to Object
name|jmsMessage
operator|.
name|setObjectProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the correlation id on the JMS message.      *<p/>      * Will ignore exception thrown      *      * @param message       the JMS message      * @param correlationId the correlation id      */
DECL|method|setCorrelationId (Message message, String correlationId)
specifier|public
specifier|static
name|void
name|setCorrelationId
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|correlationId
parameter_list|)
block|{
try|try
block|{
name|message
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Error setting the correlationId: {}"
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Normalizes the destination name, by removing any leading queue or topic      * prefixes.      *      * @param destination the destination      * @return the normalized destination      */
DECL|method|normalizeDestinationName (String destination)
specifier|public
specifier|static
name|String
name|normalizeDestinationName
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|destination
argument_list|)
condition|)
block|{
return|return
name|destination
return|;
block|}
if|if
condition|(
name|destination
operator|.
name|startsWith
argument_list|(
name|QUEUE_PREFIX
argument_list|)
condition|)
block|{
return|return
name|removeStartingCharacters
argument_list|(
name|destination
operator|.
name|substring
argument_list|(
name|QUEUE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|.
name|startsWith
argument_list|(
name|TOPIC_PREFIX
argument_list|)
condition|)
block|{
return|return
name|removeStartingCharacters
argument_list|(
name|destination
operator|.
name|substring
argument_list|(
name|TOPIC_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|destination
return|;
block|}
block|}
comment|/**      * Sets the JMSReplyTo on the message.      *      * @param message the message      * @param replyTo the reply to destination      */
DECL|method|setJMSReplyTo (Message message, Destination replyTo)
specifier|public
specifier|static
name|void
name|setJMSReplyTo
parameter_list|(
name|Message
name|message
parameter_list|,
name|Destination
name|replyTo
parameter_list|)
block|{
try|try
block|{
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Error setting the correlationId: {}"
argument_list|,
name|replyTo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the JMSReplyTo from the message.      *      * @param message the message      * @return the reply to, can be<tt>null</tt>      */
DECL|method|getJMSReplyTo (Message message)
specifier|public
specifier|static
name|Destination
name|getJMSReplyTo
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
return|return
name|message
operator|.
name|getJMSReplyTo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore due OracleAQ does not support accessing JMSReplyTo
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Gets the JMSType from the message.      *      * @param message the message      * @return the type, can be<tt>null</tt>      */
DECL|method|getJMSType (Message message)
specifier|public
specifier|static
name|String
name|getJMSType
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
return|return
name|message
operator|.
name|getJMSType
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore due OracleAQ does not support accessing JMSType
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Gets the JMSRedelivered from the message.      *      * @param message the message      * @return<tt>true</tt> if redelivered,<tt>false</tt> if not,      *<tt>null</tt> if not able to determine      */
DECL|method|getJMSRedelivered (Message message)
specifier|public
specifier|static
name|Boolean
name|getJMSRedelivered
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
return|return
name|message
operator|.
name|getJMSRedelivered
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore if JMS broker do not support this
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the JMSDeliveryMode on the message.      *      * @param exchange     the exchange      * @param message      the message      * @param deliveryMode the delivery mode, either as a String or integer      * @throws javax.jms.JMSException is thrown if error setting the delivery      *                                mode      */
DECL|method|setJMSDeliveryMode (Exchange exchange, Message message, Object deliveryMode)
specifier|public
specifier|static
name|void
name|setJMSDeliveryMode
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|,
name|Object
name|deliveryMode
parameter_list|)
throws|throws
name|JMSException
block|{
name|Integer
name|mode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|deliveryMode
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|deliveryMode
decl_stmt|;
if|if
condition|(
literal|"PERSISTENT"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|mode
operator|=
name|DeliveryMode
operator|.
name|PERSISTENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"NON_PERSISTENT"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|mode
operator|=
name|DeliveryMode
operator|.
name|NON_PERSISTENT
expr_stmt|;
block|}
else|else
block|{
comment|// it may be a number in the String so try that
name|Integer
name|value
init|=
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown delivery mode with value: "
operator|+
name|deliveryMode
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// fallback and try to convert to a number
name|Integer
name|value
init|=
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|value
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setJMSDeliveryMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
name|JmsConstants
operator|.
name|JMS_DELIVERY_MODE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setJmsMessageHeaders (final Exchange exchange, final Message jmsMessage)
specifier|public
specifier|static
name|Message
name|setJmsMessageHeaders
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Message
name|jmsMessage
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|headers
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|headerName
range|:
name|keys
control|)
block|{
name|Object
name|headerValue
init|=
name|headers
operator|.
name|get
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSCorrelationID"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSCorrelationID
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSReplyTo"
argument_list|)
operator|&&
name|headerValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|headerValue
operator|instanceof
name|String
condition|)
block|{
comment|// if the value is a String we must normalize it first
name|headerValue
operator|=
name|headerValue
expr_stmt|;
block|}
else|else
block|{
comment|// TODO write destination converter
comment|// Destination replyTo =
comment|// ExchangeHelper.convertToType(exchange, Destination.class,
comment|// headerValue);
comment|// jmsMessage.setJMSReplyTo(replyTo);
block|}
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSType"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSType
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSPriority"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSPriority
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSDeliveryMode"
argument_list|)
condition|)
block|{
name|SjmsExchangeMessageHelper
operator|.
name|setJMSDeliveryMode
argument_list|(
name|exchange
argument_list|,
name|jmsMessage
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSExpiration"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSExpiration
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The following properties are set by the MessageProducer:
comment|// JMSDestination
comment|// The following are set on the underlying JMS provider:
comment|// JMSMessageID, JMSTimestamp, JMSRedelivered
comment|// log at trace level to not spam log
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Ignoring JMS header: {} with value: {}"
argument_list|,
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSDestination"
argument_list|)
operator|||
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSMessageID"
argument_list|)
operator|||
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSTimestamp"
argument_list|)
operator|||
name|headerName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"JMSRedelivered"
argument_list|)
condition|)
block|{
comment|// The following properties are set by the MessageProducer:
comment|// JMSDestination
comment|// The following are set on the underlying JMS provider:
comment|// JMSMessageID, JMSTimestamp, JMSRedelivered
comment|// log at trace level to not spam log
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Ignoring JMS header: {} with value: {}"
argument_list|,
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
operator|(
name|headerValue
operator|instanceof
name|JmsMessageType
operator|)
condition|)
block|{
name|String
name|encodedName
init|=
operator|new
name|DefaultJmsKeyFormatStrategy
argument_list|()
operator|.
name|encodeKey
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
name|SjmsExchangeMessageHelper
operator|.
name|setProperty
argument_list|(
name|jmsMessage
argument_list|,
name|encodedName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|jmsMessage
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setJmsMessageHeaders (final Message jmsMessage, final Exchange exchange, boolean out)
specifier|public
specifier|static
name|Exchange
name|setJmsMessageHeaders
parameter_list|(
specifier|final
name|Message
name|jmsMessage
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|out
parameter_list|)
throws|throws
name|JMSException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|jmsMessage
operator|!=
literal|null
condition|)
block|{
comment|// lets populate the standard JMS message headers
try|try
block|{
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSCorrelationID
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSDeliveryMode
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSDestination
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSExpiration
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSExpiration
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSMessageID
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSPriority
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSRedelivered
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSTimestamp
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getJMSTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSReplyTo
operator|.
name|toString
argument_list|()
argument_list|,
name|SjmsExchangeMessageHelper
operator|.
name|getJMSReplyTo
argument_list|(
name|jmsMessage
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSType
operator|.
name|toString
argument_list|()
argument_list|,
name|SjmsExchangeMessageHelper
operator|.
name|getJMSType
argument_list|(
name|jmsMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|// this works around a bug in the ActiveMQ property handling
name|headers
operator|.
name|put
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSXGroupID
operator|.
name|toString
argument_list|()
argument_list|,
name|jmsMessage
operator|.
name|getStringProperty
argument_list|(
name|JmsMessageHeaderType
operator|.
name|JMSXGroupID
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|enumeration
init|=
name|jmsMessage
operator|.
name|getPropertyNames
argument_list|()
init|;
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|enumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasIllegalHeaderKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalHeaderException
argument_list|(
literal|"Header "
operator|+
name|key
operator|+
literal|" is not a legal JMS header name value"
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|jmsMessage
operator|.
name|getObjectProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|decodedName
init|=
operator|new
name|DefaultJmsKeyFormatStrategy
argument_list|()
operator|.
name|decodeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|decodedName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|out
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
DECL|method|createMessage (Exchange exchange, Session session, KeyFormatStrategy keyFormatStrategy)
specifier|public
specifier|static
name|Message
name|createMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Session
name|session
parameter_list|,
name|KeyFormatStrategy
name|keyFormatStrategy
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|answer
init|=
literal|null
decl_stmt|;
name|Object
name|body
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|bodyHeaders
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|body
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|bodyHeaders
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|bodyHeaders
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|=
name|JmsMessageHelper
operator|.
name|createMessage
argument_list|(
name|session
argument_list|,
name|body
argument_list|,
name|bodyHeaders
argument_list|,
name|keyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|hasIllegalHeaderKey (String key)
specifier|private
specifier|static
name|boolean
name|hasIllegalHeaderKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|key
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|key
operator|.
name|indexOf
argument_list|(
literal|"-"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

