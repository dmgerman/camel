begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MultipleConsumersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|ConnectionFactoryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|ConnectionResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|DefaultDestinationCreationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|DefaultJmsKeyFormatStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|DestinationCreationStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|DestinationNameParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|Jms11ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsKeyFormatStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|MessageCreatedStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|SessionAcknowledgementType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|producer
operator|.
name|InOnlyProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|producer
operator|.
name|InOutProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|LoggingExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The sjms component (simple jms) allows messages to be sent to (or consumed from) a JMS Queue or Topic (uses JMS 1.x API).  *  * This component uses plain JMS API where as the jms component uses Spring JMS.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.11.0"
argument_list|,
name|scheme
operator|=
literal|"sjms"
argument_list|,
name|title
operator|=
literal|"Simple JMS"
argument_list|,
name|syntax
operator|=
literal|"sjms:destinationType:destinationName"
argument_list|,
name|label
operator|=
literal|"messaging"
argument_list|)
DECL|class|SjmsEndpoint
specifier|public
class|class
name|SjmsEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|AsyncEndpoint
implements|,
name|MultipleConsumersSupport
implements|,
name|HeaderFilterStrategyAware
block|{
DECL|field|logger
specifier|protected
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|topic
specifier|private
name|boolean
name|topic
decl_stmt|;
DECL|field|binding
specifier|private
name|JmsBinding
name|binding
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|enums
operator|=
literal|"queue,topic"
argument_list|,
name|defaultValue
operator|=
literal|"queue"
argument_list|,
name|description
operator|=
literal|"The kind of destination to use"
argument_list|)
DECL|field|destinationType
specifier|private
name|String
name|destinationType
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"DestinationName is a JMS queue or topic name. By default, the destinationName is interpreted as a queue name."
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|destinationName
specifier|private
name|String
name|destinationName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)."
argument_list|)
DECL|field|synchronous
specifier|private
name|boolean
name|synchronous
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom HeaderFilterStrategy to filter header to and from Camel message."
argument_list|)
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Whether to include all JMSXxxx properties when mapping from JMS to Camel Message."
operator|+
literal|" Setting this to true will include properties such as JMSXAppID, and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply."
argument_list|)
DECL|field|includeAllJMSXProperties
specifier|private
name|boolean
name|includeAllJMSXProperties
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,transaction"
argument_list|,
name|description
operator|=
literal|"Specifies whether to use transacted mode"
argument_list|)
DECL|field|transacted
specifier|private
name|boolean
name|transacted
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"transaction,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Specifies whether to share JMS session with other SJMS endpoints. Turn this off if your route is accessing to multiple JMS providers."
operator|+
literal|" If you need transaction against multiple JMS providers, use jms component to leverage XA transaction."
argument_list|)
DECL|field|sharedJMSSession
specifier|private
name|boolean
name|sharedJMSSession
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Sets the reply to destination name used for InOut producer endpoints."
argument_list|)
DECL|field|namedReplyTo
specifier|private
name|String
name|namedReplyTo
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"AUTO_ACKNOWLEDGE"
argument_list|,
name|enums
operator|=
literal|"SESSION_TRANSACTED,CLIENT_ACKNOWLEDGE,AUTO_ACKNOWLEDGE,DUPS_OK_ACKNOWLEDGE"
argument_list|,
name|description
operator|=
literal|"The JMS acknowledgement name, which is one of: SESSION_TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE"
argument_list|)
DECL|field|acknowledgementMode
specifier|private
name|SessionAcknowledgementType
name|acknowledgementMode
init|=
name|SessionAcknowledgementType
operator|.
name|AUTO_ACKNOWLEDGE
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|sessionCount
specifier|private
name|int
name|sessionCount
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|description
operator|=
literal|"Sets the number of producers used for this endpoint."
argument_list|)
DECL|field|producerCount
specifier|private
name|int
name|producerCount
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|description
operator|=
literal|"Sets the number of consumer listeners used for this endpoint."
argument_list|)
DECL|field|consumerCount
specifier|private
name|int
name|consumerCount
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|description
operator|=
literal|"Flag used to adjust the Time To Live value of produced messages."
argument_list|)
DECL|field|ttl
specifier|private
name|long
name|ttl
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Flag used to enable/disable message persistence."
argument_list|)
DECL|field|persistent
specifier|private
name|boolean
name|persistent
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Sets the durable subscription Id required for durable topics."
argument_list|)
DECL|field|durableSubscriptionId
specifier|private
name|String
name|durableSubscriptionId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"5000"
argument_list|,
name|description
operator|=
literal|"Sets the amount of time we should wait before timing out a InOut response."
argument_list|)
DECL|field|responseTimeOut
specifier|private
name|long
name|responseTimeOut
init|=
literal|5000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Sets the JMS Message selector syntax."
argument_list|)
DECL|field|messageSelector
specifier|private
name|String
name|messageSelector
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,transaction"
argument_list|,
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|description
operator|=
literal|"If transacted sets the number of messages to process before committing a transaction."
argument_list|)
DECL|field|transactionBatchCount
specifier|private
name|int
name|transactionBatchCount
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,transaction"
argument_list|,
name|defaultValue
operator|=
literal|"5000"
argument_list|,
name|description
operator|=
literal|"Sets timeout (in millis) for batch transactions, the value should be 1000 or higher."
argument_list|)
DECL|field|transactionBatchTimeout
specifier|private
name|long
name|transactionBatchTimeout
init|=
literal|5000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Whether to startup the consumer message listener asynchronously, when starting a route."
operator|+
literal|" For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying and/or failover."
operator|+
literal|" This will cause Camel to block while starting routes. By setting this option to true, you will let routes startup, while the JmsConsumer connects to the JMS broker"
operator|+
literal|" using a dedicated thread in asynchronous mode. If this option is used, then beware that if the connection could not be established, then an exception is logged at WARN level,"
operator|+
literal|" and the consumer will not be able to receive messages; You can then restart the route to retry."
argument_list|)
DECL|field|asyncStartListener
specifier|private
name|boolean
name|asyncStartListener
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Whether to stop the consumer message listener asynchronously, when stopping a route."
argument_list|)
DECL|field|asyncStopListener
specifier|private
name|boolean
name|asyncStopListener
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Whether to prefill the producer connection pool on startup, or create connections lazy when needed."
argument_list|)
DECL|field|prefillPool
specifier|private
name|boolean
name|prefillPool
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Whether to allow sending messages with no body. If this option is false and the message body is null, then an JMSException is thrown."
argument_list|)
DECL|field|allowNullBody
specifier|private
name|boolean
name|allowNullBody
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Specifies whether Camel should auto map the received JMS message to a suited payload type, such as javax.jms.TextMessage to a String etc."
operator|+
literal|" See section about how mapping works below for more details."
argument_list|)
DECL|field|mapJmsMessage
specifier|private
name|boolean
name|mapJmsMessage
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"transaction"
argument_list|,
name|description
operator|=
literal|"Sets the commit strategy."
argument_list|)
DECL|field|transactionCommitStrategy
specifier|private
name|TransactionCommitStrategy
name|transactionCommitStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom DestinationCreationStrategy."
argument_list|)
DECL|field|destinationCreationStrategy
specifier|private
name|DestinationCreationStrategy
name|destinationCreationStrategy
init|=
operator|new
name|DefaultDestinationCreationStrategy
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of<tt>javax.jms.Message</tt> objects when Camel is sending a JMS message."
argument_list|)
DECL|field|messageCreatedStrategy
specifier|private
name|MessageCreatedStrategy
name|messageCreatedStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification."
operator|+
literal|" Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -)."
operator|+
literal|" The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters."
operator|+
literal|" You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the # notation."
argument_list|)
DECL|field|jmsKeyFormatStrategy
specifier|private
name|JmsKeyFormatStrategy
name|jmsKeyFormatStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Initializes the connectionResource for the endpoint, which takes precedence over the component's connectionResource, if any"
argument_list|)
DECL|field|connectionResource
specifier|private
name|ConnectionResource
name|connectionResource
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Initializes the connectionFactory for the endpoint, which takes precedence over the component's connectionFactory, if any"
argument_list|)
DECL|field|connectionFactory
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"The maximum number of connections available to this endpoint"
argument_list|)
DECL|field|connectionCount
specifier|private
name|Integer
name|connectionCount
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions."
argument_list|)
DECL|field|exceptionListener
specifier|private
name|ExceptionListener
name|exceptionListener
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"WARN"
argument_list|,
name|label
operator|=
literal|"consumer,logging"
argument_list|,
name|description
operator|=
literal|"Allows to configure the default errorHandler logging level for logging uncaught exceptions."
argument_list|)
DECL|field|errorHandlerLoggingLevel
specifier|private
name|LoggingLevel
name|errorHandlerLoggingLevel
init|=
name|LoggingLevel
operator|.
name|WARN
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"consumer,logging"
argument_list|,
name|description
operator|=
literal|"Allows to control whether stacktraces should be logged or not, by the default errorHandler."
argument_list|)
DECL|field|errorHandlerLogStackTrace
specifier|private
name|boolean
name|errorHandlerLogStackTrace
init|=
literal|true
decl_stmt|;
DECL|field|closeConnectionResource
specifier|private
specifier|volatile
name|boolean
name|closeConnectionResource
decl_stmt|;
DECL|field|jmsObjectFactory
specifier|private
name|JmsObjectFactory
name|jmsObjectFactory
init|=
operator|new
name|Jms11ObjectFactory
argument_list|()
decl_stmt|;
DECL|method|SjmsEndpoint ()
specifier|public
name|SjmsEndpoint
parameter_list|()
block|{     }
DECL|method|SjmsEndpoint (String uri, Component component, String remaining)
specifier|public
name|SjmsEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|remaining
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|DestinationNameParser
name|parser
init|=
operator|new
name|DestinationNameParser
argument_list|()
decl_stmt|;
name|this
operator|.
name|topic
operator|=
name|parser
operator|.
name|isTopic
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|this
operator|.
name|destinationName
operator|=
name|parser
operator|.
name|getShortName
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|SjmsComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|SjmsComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isAsyncStartListener
argument_list|()
condition|)
block|{
comment|// if we are not async starting then create connection eager
if|if
condition|(
name|getConnectionResource
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getConnectionFactory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|connectionResource
operator|=
name|createConnectionResource
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// we created the resource so we should close it when stopping
name|closeConnectionResource
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|getConnectionResource
argument_list|()
operator|instanceof
name|ConnectionFactoryResource
condition|)
block|{
operator|(
operator|(
name|ConnectionFactoryResource
operator|)
name|getConnectionResource
argument_list|()
operator|)
operator|.
name|fillPool
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|closeConnectionResource
condition|)
block|{
if|if
condition|(
name|connectionResource
operator|instanceof
name|ConnectionFactoryResource
condition|)
block|{
operator|(
operator|(
name|ConnectionFactoryResource
operator|)
name|getConnectionResource
argument_list|()
operator|)
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
name|closeConnectionResource
operator|=
literal|false
expr_stmt|;
name|connectionResource
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|SjmsProducer
name|producer
decl_stmt|;
if|if
condition|(
name|getExchangePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
condition|)
block|{
name|producer
operator|=
operator|new
name|InOnlyProducer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|producer
operator|=
operator|new
name|InOutProducer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|producer
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|SjmsConsumer
name|answer
init|=
operator|new
name|SjmsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|isMultipleConsumersSupported ()
specifier|public
name|boolean
name|isMultipleConsumersSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|createConnectionResource (Object source)
specifier|protected
name|ConnectionResource
name|createConnectionResource
parameter_list|(
name|Object
name|source
parameter_list|)
block|{
if|if
condition|(
name|getConnectionFactory
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"ConnectionResource or ConnectionFactory must be configured for %s"
argument_list|,
name|this
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Creating ConnectionResource with connectionCount: {} using ConnectionFactory"
argument_list|,
name|getConnectionCount
argument_list|()
argument_list|,
name|getConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
comment|// We always use a connection pool, even for a pool of 1
name|ConnectionFactoryResource
name|connections
init|=
operator|new
name|ConnectionFactoryResource
argument_list|(
name|getConnectionCount
argument_list|()
argument_list|,
name|getConnectionFactory
argument_list|()
argument_list|,
name|getComponent
argument_list|()
operator|.
name|getConnectionUsername
argument_list|()
argument_list|,
name|getComponent
argument_list|()
operator|.
name|getConnectionPassword
argument_list|()
argument_list|,
name|getComponent
argument_list|()
operator|.
name|getConnectionClientId
argument_list|()
argument_list|,
name|getComponent
argument_list|()
operator|.
name|getConnectionMaxWait
argument_list|()
argument_list|,
name|getComponent
argument_list|()
operator|.
name|isConnectionTestOnBorrow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionListener
operator|!=
literal|null
condition|)
block|{
name|connections
operator|.
name|setExceptionListener
argument_list|(
name|exceptionListener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add a exception listener that logs so we can see any errors that happens
name|ExceptionListener
name|listener
init|=
operator|new
name|SjmsLoggingExceptionListener
argument_list|(
operator|new
name|LoggingExceptionHandler
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|source
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|isErrorHandlerLogStackTrace
argument_list|()
argument_list|)
decl_stmt|;
name|connections
operator|.
name|setExceptionListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|connections
operator|.
name|fillPool
argument_list|()
expr_stmt|;
return|return
name|connections
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createExchange (Message message, Session session)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|Message
name|message
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|getExchangePattern
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
operator|new
name|SjmsMessage
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|,
name|session
argument_list|,
name|getBinding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|getBinding ()
specifier|public
name|JmsBinding
name|getBinding
parameter_list|()
block|{
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|binding
operator|=
name|createBinding
argument_list|()
expr_stmt|;
block|}
return|return
name|binding
return|;
block|}
comment|/**      * Creates the {@link org.apache.camel.component.sjms.jms.JmsBinding} to use.      */
DECL|method|createBinding ()
specifier|protected
name|JmsBinding
name|createBinding
parameter_list|()
block|{
return|return
operator|new
name|JmsBinding
argument_list|(
name|isMapJmsMessage
argument_list|()
argument_list|,
name|isAllowNullBody
argument_list|()
argument_list|,
name|getHeaderFilterStrategy
argument_list|()
argument_list|,
name|getJmsKeyFormatStrategy
argument_list|()
argument_list|,
name|getMessageCreatedStrategy
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Sets the binding used to convert from a Camel message to and from a JMS      * message      */
DECL|method|setBinding (JmsBinding binding)
specifier|public
name|void
name|setBinding
parameter_list|(
name|JmsBinding
name|binding
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
block|}
comment|/**      * DestinationName is a JMS queue or topic name. By default, the destinationName is interpreted as a queue name.      */
DECL|method|setDestinationName (String destinationName)
specifier|public
name|void
name|setDestinationName
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
block|}
DECL|method|getDestinationName ()
specifier|public
name|String
name|getDestinationName
parameter_list|()
block|{
return|return
name|destinationName
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
if|if
condition|(
name|headerFilterStrategy
operator|==
literal|null
condition|)
block|{
name|headerFilterStrategy
operator|=
operator|new
name|SjmsHeaderFilterStrategy
argument_list|(
name|isIncludeAllJMSXProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|headerFilterStrategy
return|;
block|}
comment|/**      * To use a custom HeaderFilterStrategy to filter header to and from Camel message.      */
annotation|@
name|Override
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy strategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|isIncludeAllJMSXProperties ()
specifier|public
name|boolean
name|isIncludeAllJMSXProperties
parameter_list|()
block|{
return|return
name|includeAllJMSXProperties
return|;
block|}
comment|/**      * Whether to include all JMSXxxx properties when mapping from JMS to Camel Message.      * Setting this to true will include properties such as JMSXAppID, and JMSXUserID etc.      * Note: If you are using a custom headerFilterStrategy then this option does not apply.      */
DECL|method|setIncludeAllJMSXProperties (boolean includeAllJMSXProperties)
specifier|public
name|void
name|setIncludeAllJMSXProperties
parameter_list|(
name|boolean
name|includeAllJMSXProperties
parameter_list|)
block|{
name|this
operator|.
name|includeAllJMSXProperties
operator|=
name|includeAllJMSXProperties
expr_stmt|;
block|}
DECL|method|getConnectionResource ()
specifier|public
name|ConnectionResource
name|getConnectionResource
parameter_list|()
block|{
name|ConnectionResource
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|connectionResource
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|connectionResource
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|getComponent
argument_list|()
operator|.
name|getConnectionResource
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Initializes the connectionResource for the endpoint, which takes precedence over the component's connectionResource, if any      */
DECL|method|setConnectionResource (ConnectionResource connectionResource)
specifier|public
name|void
name|setConnectionResource
parameter_list|(
name|ConnectionResource
name|connectionResource
parameter_list|)
block|{
name|this
operator|.
name|connectionResource
operator|=
name|connectionResource
expr_stmt|;
block|}
DECL|method|setConnectionResource (String connectionResource)
specifier|public
name|void
name|setConnectionResource
parameter_list|(
name|String
name|connectionResource
parameter_list|)
block|{
name|this
operator|.
name|connectionResource
operator|=
name|EndpointHelper
operator|.
name|resolveReferenceParameter
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|connectionResource
argument_list|,
name|ConnectionResource
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSynchronous ()
specifier|public
name|boolean
name|isSynchronous
parameter_list|()
block|{
return|return
name|synchronous
return|;
block|}
comment|/**      * Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).      */
annotation|@
name|Override
DECL|method|setSynchronous (boolean synchronous)
specifier|public
name|void
name|setSynchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|this
operator|.
name|synchronous
operator|=
name|synchronous
expr_stmt|;
block|}
DECL|method|getAcknowledgementMode ()
specifier|public
name|SessionAcknowledgementType
name|getAcknowledgementMode
parameter_list|()
block|{
return|return
name|acknowledgementMode
return|;
block|}
comment|/**      * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE      */
DECL|method|setAcknowledgementMode (SessionAcknowledgementType acknowledgementMode)
specifier|public
name|void
name|setAcknowledgementMode
parameter_list|(
name|SessionAcknowledgementType
name|acknowledgementMode
parameter_list|)
block|{
name|this
operator|.
name|acknowledgementMode
operator|=
name|acknowledgementMode
expr_stmt|;
block|}
comment|/**      * Flag set by the endpoint used by consumers and producers to determine if      * the endpoint is a JMS Topic.      */
DECL|method|isTopic ()
specifier|public
name|boolean
name|isTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
comment|/**      * Returns the number of Session instances expected on this endpoint.      */
annotation|@
name|Deprecated
DECL|method|getSessionCount ()
specifier|public
name|int
name|getSessionCount
parameter_list|()
block|{
return|return
name|sessionCount
return|;
block|}
comment|/**      * Sets the number of Session instances used for this endpoint. Value is      * ignored for endpoints that require a dedicated session such as a      * transacted or InOut endpoint.      *      * @param sessionCount the number of Session instances, default is 1      */
annotation|@
name|Deprecated
DECL|method|setSessionCount (int sessionCount)
specifier|public
name|void
name|setSessionCount
parameter_list|(
name|int
name|sessionCount
parameter_list|)
block|{
name|this
operator|.
name|sessionCount
operator|=
name|sessionCount
expr_stmt|;
block|}
DECL|method|getProducerCount ()
specifier|public
name|int
name|getProducerCount
parameter_list|()
block|{
return|return
name|producerCount
return|;
block|}
comment|/**      * Sets the number of producers used for this endpoint.      */
DECL|method|setProducerCount (int producerCount)
specifier|public
name|void
name|setProducerCount
parameter_list|(
name|int
name|producerCount
parameter_list|)
block|{
name|this
operator|.
name|producerCount
operator|=
name|producerCount
expr_stmt|;
block|}
DECL|method|getConsumerCount ()
specifier|public
name|int
name|getConsumerCount
parameter_list|()
block|{
return|return
name|consumerCount
return|;
block|}
comment|/**      * Sets the number of consumer listeners used for this endpoint.      */
DECL|method|setConsumerCount (int consumerCount)
specifier|public
name|void
name|setConsumerCount
parameter_list|(
name|int
name|consumerCount
parameter_list|)
block|{
name|this
operator|.
name|consumerCount
operator|=
name|consumerCount
expr_stmt|;
block|}
DECL|method|getTtl ()
specifier|public
name|long
name|getTtl
parameter_list|()
block|{
return|return
name|ttl
return|;
block|}
comment|/**      * Flag used to adjust the Time To Live value of produced messages.      */
DECL|method|setTtl (long ttl)
specifier|public
name|void
name|setTtl
parameter_list|(
name|long
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
DECL|method|isPersistent ()
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
comment|/**      * Flag used to enable/disable message persistence.      */
DECL|method|setPersistent (boolean persistent)
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
DECL|method|getDurableSubscriptionId ()
specifier|public
name|String
name|getDurableSubscriptionId
parameter_list|()
block|{
return|return
name|durableSubscriptionId
return|;
block|}
comment|/**      * Sets the durable subscription Id required for durable topics.      */
DECL|method|setDurableSubscriptionId (String durableSubscriptionId)
specifier|public
name|void
name|setDurableSubscriptionId
parameter_list|(
name|String
name|durableSubscriptionId
parameter_list|)
block|{
name|this
operator|.
name|durableSubscriptionId
operator|=
name|durableSubscriptionId
expr_stmt|;
block|}
DECL|method|getResponseTimeOut ()
specifier|public
name|long
name|getResponseTimeOut
parameter_list|()
block|{
return|return
name|responseTimeOut
return|;
block|}
comment|/**      * Sets the amount of time we should wait before timing out a InOut response.      */
DECL|method|setResponseTimeOut (long responseTimeOut)
specifier|public
name|void
name|setResponseTimeOut
parameter_list|(
name|long
name|responseTimeOut
parameter_list|)
block|{
name|this
operator|.
name|responseTimeOut
operator|=
name|responseTimeOut
expr_stmt|;
block|}
DECL|method|getMessageSelector ()
specifier|public
name|String
name|getMessageSelector
parameter_list|()
block|{
return|return
name|messageSelector
return|;
block|}
comment|/**      * Sets the JMS Message selector syntax.      */
DECL|method|setMessageSelector (String messageSelector)
specifier|public
name|void
name|setMessageSelector
parameter_list|(
name|String
name|messageSelector
parameter_list|)
block|{
name|this
operator|.
name|messageSelector
operator|=
name|messageSelector
expr_stmt|;
block|}
DECL|method|getTransactionBatchCount ()
specifier|public
name|int
name|getTransactionBatchCount
parameter_list|()
block|{
return|return
name|transactionBatchCount
return|;
block|}
comment|/**      * If transacted sets the number of messages to process before committing a transaction.      */
DECL|method|setTransactionBatchCount (int transactionBatchCount)
specifier|public
name|void
name|setTransactionBatchCount
parameter_list|(
name|int
name|transactionBatchCount
parameter_list|)
block|{
name|this
operator|.
name|transactionBatchCount
operator|=
name|transactionBatchCount
expr_stmt|;
block|}
DECL|method|getTransactionBatchTimeout ()
specifier|public
name|long
name|getTransactionBatchTimeout
parameter_list|()
block|{
return|return
name|transactionBatchTimeout
return|;
block|}
comment|/**      * Sets timeout (in millis) for batch transactions, the value should be 1000 or higher.      */
DECL|method|setTransactionBatchTimeout (long transactionBatchTimeout)
specifier|public
name|void
name|setTransactionBatchTimeout
parameter_list|(
name|long
name|transactionBatchTimeout
parameter_list|)
block|{
if|if
condition|(
name|transactionBatchTimeout
operator|>=
literal|1000
condition|)
block|{
name|this
operator|.
name|transactionBatchTimeout
operator|=
name|transactionBatchTimeout
expr_stmt|;
block|}
block|}
DECL|method|getTransactionCommitStrategy ()
specifier|public
name|TransactionCommitStrategy
name|getTransactionCommitStrategy
parameter_list|()
block|{
return|return
name|transactionCommitStrategy
return|;
block|}
comment|/**      * Sets the commit strategy.      */
DECL|method|setTransactionCommitStrategy (TransactionCommitStrategy transactionCommitStrategy)
specifier|public
name|void
name|setTransactionCommitStrategy
parameter_list|(
name|TransactionCommitStrategy
name|transactionCommitStrategy
parameter_list|)
block|{
name|this
operator|.
name|transactionCommitStrategy
operator|=
name|transactionCommitStrategy
expr_stmt|;
block|}
DECL|method|isTransacted ()
specifier|public
name|boolean
name|isTransacted
parameter_list|()
block|{
return|return
name|transacted
return|;
block|}
comment|/**      * Specifies whether to use transacted mode      */
DECL|method|setTransacted (boolean transacted)
specifier|public
name|void
name|setTransacted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
block|{
if|if
condition|(
name|transacted
condition|)
block|{
name|setAcknowledgementMode
argument_list|(
name|SessionAcknowledgementType
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|transacted
operator|=
name|transacted
expr_stmt|;
block|}
DECL|method|isSharedJMSSession ()
specifier|public
name|boolean
name|isSharedJMSSession
parameter_list|()
block|{
return|return
name|sharedJMSSession
return|;
block|}
comment|/**      * Specifies whether to share JMS session with other SJMS endpoints.      * Turn this off if your route is accessing to multiple JMS providers.      * If you need transaction against multiple JMS providers, use jms      * component to leverage XA transaction.      */
DECL|method|setSharedJMSSession (boolean share)
specifier|public
name|void
name|setSharedJMSSession
parameter_list|(
name|boolean
name|share
parameter_list|)
block|{
name|this
operator|.
name|sharedJMSSession
operator|=
name|share
expr_stmt|;
block|}
DECL|method|getNamedReplyTo ()
specifier|public
name|String
name|getNamedReplyTo
parameter_list|()
block|{
return|return
name|namedReplyTo
return|;
block|}
comment|/**      * Sets the reply to destination name used for InOut producer endpoints.      * The type of the reply to destination can be determined by the starting       * prefix (topic: or queue:) in its name.       */
DECL|method|setNamedReplyTo (String namedReplyTo)
specifier|public
name|void
name|setNamedReplyTo
parameter_list|(
name|String
name|namedReplyTo
parameter_list|)
block|{
name|this
operator|.
name|namedReplyTo
operator|=
name|namedReplyTo
expr_stmt|;
name|this
operator|.
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
comment|/**      * Whether to startup the consumer message listener asynchronously, when starting a route.      * For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying      * and/or failover. This will cause Camel to block while starting routes. By setting this option to true,      * you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread      * in asynchronous mode. If this option is used, then beware that if the connection could not be established,      * then an exception is logged at WARN level, and the consumer will not be able to receive messages;      * You can then restart the route to retry.      */
DECL|method|setAsyncStartListener (boolean asyncStartListener)
specifier|public
name|void
name|setAsyncStartListener
parameter_list|(
name|boolean
name|asyncStartListener
parameter_list|)
block|{
name|this
operator|.
name|asyncStartListener
operator|=
name|asyncStartListener
expr_stmt|;
block|}
comment|/**      * Whether to stop the consumer message listener asynchronously, when stopping a route.      */
DECL|method|setAsyncStopListener (boolean asyncStopListener)
specifier|public
name|void
name|setAsyncStopListener
parameter_list|(
name|boolean
name|asyncStopListener
parameter_list|)
block|{
name|this
operator|.
name|asyncStopListener
operator|=
name|asyncStopListener
expr_stmt|;
block|}
DECL|method|isAsyncStartListener ()
specifier|public
name|boolean
name|isAsyncStartListener
parameter_list|()
block|{
return|return
name|asyncStartListener
return|;
block|}
DECL|method|isAsyncStopListener ()
specifier|public
name|boolean
name|isAsyncStopListener
parameter_list|()
block|{
return|return
name|asyncStopListener
return|;
block|}
DECL|method|isPrefillPool ()
specifier|public
name|boolean
name|isPrefillPool
parameter_list|()
block|{
return|return
name|prefillPool
return|;
block|}
comment|/**      * Whether to prefill the producer connection pool on startup, or create connections lazy when needed.      */
DECL|method|setPrefillPool (boolean prefillPool)
specifier|public
name|void
name|setPrefillPool
parameter_list|(
name|boolean
name|prefillPool
parameter_list|)
block|{
name|this
operator|.
name|prefillPool
operator|=
name|prefillPool
expr_stmt|;
block|}
DECL|method|getDestinationCreationStrategy ()
specifier|public
name|DestinationCreationStrategy
name|getDestinationCreationStrategy
parameter_list|()
block|{
return|return
name|destinationCreationStrategy
return|;
block|}
comment|/**      * To use a custom DestinationCreationStrategy.      */
DECL|method|setDestinationCreationStrategy (DestinationCreationStrategy destinationCreationStrategy)
specifier|public
name|void
name|setDestinationCreationStrategy
parameter_list|(
name|DestinationCreationStrategy
name|destinationCreationStrategy
parameter_list|)
block|{
name|this
operator|.
name|destinationCreationStrategy
operator|=
name|destinationCreationStrategy
expr_stmt|;
block|}
DECL|method|isAllowNullBody ()
specifier|public
name|boolean
name|isAllowNullBody
parameter_list|()
block|{
return|return
name|allowNullBody
return|;
block|}
comment|/**      * Whether to allow sending messages with no body. If this option is false and the message body is null, then an JMSException is thrown.      */
DECL|method|setAllowNullBody (boolean allowNullBody)
specifier|public
name|void
name|setAllowNullBody
parameter_list|(
name|boolean
name|allowNullBody
parameter_list|)
block|{
name|this
operator|.
name|allowNullBody
operator|=
name|allowNullBody
expr_stmt|;
block|}
DECL|method|isMapJmsMessage ()
specifier|public
name|boolean
name|isMapJmsMessage
parameter_list|()
block|{
return|return
name|mapJmsMessage
return|;
block|}
comment|/**      * Specifies whether Camel should auto map the received JMS message to a suited payload type, such as javax.jms.TextMessage to a String etc.      * See section about how mapping works below for more details.      */
DECL|method|setMapJmsMessage (boolean mapJmsMessage)
specifier|public
name|void
name|setMapJmsMessage
parameter_list|(
name|boolean
name|mapJmsMessage
parameter_list|)
block|{
name|this
operator|.
name|mapJmsMessage
operator|=
name|mapJmsMessage
expr_stmt|;
block|}
DECL|method|getMessageCreatedStrategy ()
specifier|public
name|MessageCreatedStrategy
name|getMessageCreatedStrategy
parameter_list|()
block|{
return|return
name|messageCreatedStrategy
return|;
block|}
comment|/**      * To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of<tt>javax.jms.Message</tt>      * objects when Camel is sending a JMS message.      */
DECL|method|setMessageCreatedStrategy (MessageCreatedStrategy messageCreatedStrategy)
specifier|public
name|void
name|setMessageCreatedStrategy
parameter_list|(
name|MessageCreatedStrategy
name|messageCreatedStrategy
parameter_list|)
block|{
name|this
operator|.
name|messageCreatedStrategy
operator|=
name|messageCreatedStrategy
expr_stmt|;
block|}
DECL|method|getJmsKeyFormatStrategy ()
specifier|public
name|JmsKeyFormatStrategy
name|getJmsKeyFormatStrategy
parameter_list|()
block|{
if|if
condition|(
name|jmsKeyFormatStrategy
operator|==
literal|null
condition|)
block|{
name|jmsKeyFormatStrategy
operator|=
operator|new
name|DefaultJmsKeyFormatStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|jmsKeyFormatStrategy
return|;
block|}
comment|/**      * Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification.      * Camel provides two implementations out of the box: default and passthrough.      * The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is.      * Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters.      * You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy      * and refer to it using the # notation.      */
DECL|method|setJmsKeyFormatStrategy (JmsKeyFormatStrategy jmsKeyFormatStrategy)
specifier|public
name|void
name|setJmsKeyFormatStrategy
parameter_list|(
name|JmsKeyFormatStrategy
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|this
operator|.
name|jmsKeyFormatStrategy
operator|=
name|jmsKeyFormatStrategy
expr_stmt|;
block|}
comment|/**      * Initializes the connectionFactory for the endpoint, which takes precedence over the component's connectionFactory, if any      */
DECL|method|setConnectionFactory (ConnectionFactory connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
DECL|method|setConnectionFactory (String connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|String
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|EndpointHelper
operator|.
name|resolveReferenceParameter
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|connectionFactory
argument_list|,
name|ConnectionFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|connectionFactory
operator|!=
literal|null
condition|)
block|{
return|return
name|connectionFactory
return|;
block|}
return|return
name|getComponent
argument_list|()
operator|.
name|getConnectionFactory
argument_list|()
return|;
block|}
DECL|method|getConnectionCount ()
specifier|public
name|int
name|getConnectionCount
parameter_list|()
block|{
if|if
condition|(
name|connectionCount
operator|!=
literal|null
condition|)
block|{
return|return
name|connectionCount
return|;
block|}
return|return
name|getComponent
argument_list|()
operator|.
name|getConnectionCount
argument_list|()
return|;
block|}
comment|/**      * The maximum number of connections available to this endpoint      */
DECL|method|setConnectionCount (Integer connectionCount)
specifier|public
name|void
name|setConnectionCount
parameter_list|(
name|Integer
name|connectionCount
parameter_list|)
block|{
name|this
operator|.
name|connectionCount
operator|=
name|connectionCount
expr_stmt|;
block|}
DECL|method|getExceptionListener ()
specifier|public
name|ExceptionListener
name|getExceptionListener
parameter_list|()
block|{
return|return
name|exceptionListener
return|;
block|}
comment|/**      * Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions.      */
DECL|method|setExceptionListener (ExceptionListener exceptionListener)
specifier|public
name|void
name|setExceptionListener
parameter_list|(
name|ExceptionListener
name|exceptionListener
parameter_list|)
block|{
name|this
operator|.
name|exceptionListener
operator|=
name|exceptionListener
expr_stmt|;
block|}
DECL|method|getErrorHandlerLoggingLevel ()
specifier|public
name|LoggingLevel
name|getErrorHandlerLoggingLevel
parameter_list|()
block|{
return|return
name|errorHandlerLoggingLevel
return|;
block|}
comment|/**      * Allows to configure the default errorHandler logging level for logging uncaught exceptions.      */
DECL|method|setErrorHandlerLoggingLevel (LoggingLevel errorHandlerLoggingLevel)
specifier|public
name|void
name|setErrorHandlerLoggingLevel
parameter_list|(
name|LoggingLevel
name|errorHandlerLoggingLevel
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerLoggingLevel
operator|=
name|errorHandlerLoggingLevel
expr_stmt|;
block|}
DECL|method|isErrorHandlerLogStackTrace ()
specifier|public
name|boolean
name|isErrorHandlerLogStackTrace
parameter_list|()
block|{
return|return
name|errorHandlerLogStackTrace
return|;
block|}
comment|/**      * Allows to control whether stacktraces should be logged or not, by the default errorHandler.      */
DECL|method|setErrorHandlerLogStackTrace (boolean errorHandlerLogStackTrace)
specifier|public
name|void
name|setErrorHandlerLogStackTrace
parameter_list|(
name|boolean
name|errorHandlerLogStackTrace
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerLogStackTrace
operator|=
name|errorHandlerLogStackTrace
expr_stmt|;
block|}
DECL|method|getJmsObjectFactory ()
specifier|public
name|JmsObjectFactory
name|getJmsObjectFactory
parameter_list|()
block|{
return|return
name|jmsObjectFactory
return|;
block|}
comment|/**      * To use a custom Jms Object factory      */
DECL|method|setJmsObjectFactory (JmsObjectFactory jmsObjectFactory)
specifier|public
name|void
name|setJmsObjectFactory
parameter_list|(
name|JmsObjectFactory
name|jmsObjectFactory
parameter_list|)
block|{
name|this
operator|.
name|jmsObjectFactory
operator|=
name|jmsObjectFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

