begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MultipleConsumersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|consumer
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|ConnectionResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|SessionAcknowledgementType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|SessionPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|producer
operator|.
name|InOnlyProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|producer
operator|.
name|InOutProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * TODO Add Class documentation for SjmsEndpoint  *  */
end_comment

begin_class
DECL|class|SjmsEndpoint
specifier|public
class|class
name|SjmsEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|MultipleConsumersSupport
block|{
DECL|field|logger
specifier|protected
specifier|final
specifier|transient
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|sessions
specifier|private
name|SessionPool
name|sessions
decl_stmt|;
DECL|field|synchronous
specifier|private
name|boolean
name|synchronous
init|=
literal|true
decl_stmt|;
DECL|field|transacted
specifier|private
name|boolean
name|transacted
decl_stmt|;
DECL|field|namedReplyTo
specifier|private
name|String
name|namedReplyTo
decl_stmt|;
DECL|field|acknowledgementMode
specifier|private
name|SessionAcknowledgementType
name|acknowledgementMode
init|=
name|SessionAcknowledgementType
operator|.
name|AUTO_ACKNOWLEDGE
decl_stmt|;
DECL|field|topic
specifier|private
name|boolean
name|topic
decl_stmt|;
DECL|field|sessionCount
specifier|private
name|int
name|sessionCount
init|=
literal|1
decl_stmt|;
DECL|field|producerCount
specifier|private
name|int
name|producerCount
init|=
literal|1
decl_stmt|;
DECL|field|consumerCount
specifier|private
name|int
name|consumerCount
init|=
literal|1
decl_stmt|;
DECL|field|ttl
specifier|private
name|long
name|ttl
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|persistent
specifier|private
name|boolean
name|persistent
init|=
literal|true
decl_stmt|;
DECL|field|durableSubscriptionId
specifier|private
name|String
name|durableSubscriptionId
decl_stmt|;
DECL|field|responseTimeOut
specifier|private
name|long
name|responseTimeOut
init|=
literal|5000
decl_stmt|;
DECL|field|messageSelector
specifier|private
name|String
name|messageSelector
decl_stmt|;
DECL|method|SjmsEndpoint ()
specifier|public
name|SjmsEndpoint
parameter_list|()
block|{     }
DECL|method|SjmsEndpoint (String uri, Component component)
specifier|public
name|SjmsEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEndpointUri
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"://queue:"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|setTopic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getEndpointUri
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"://topic:"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|setTopic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Endpoint URI unsupported: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|//
comment|// TODO since we only need a session pool for one use case, find a better way
comment|//
comment|// We only create a session pool when we are not transacted.
comment|// Transacted listeners or producers need to be paired with the
comment|// Session that created them.
if|if
condition|(
operator|!
name|isTransacted
argument_list|()
condition|)
block|{
name|sessions
operator|=
operator|new
name|SessionPool
argument_list|(
name|getSessionCount
argument_list|()
argument_list|,
name|getConnectionResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO fix the string hack
name|sessions
operator|.
name|setAcknowledgeMode
argument_list|(
name|SessionAcknowledgementType
operator|.
name|valueOf
argument_list|(
name|getAcknowledgementMode
argument_list|()
operator|+
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|getSessions
argument_list|()
operator|.
name|fillPool
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getSessions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getSessions
argument_list|()
operator|.
name|drainPool
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|SjmsProducer
name|producer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getExchangePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
condition|)
block|{
name|producer
operator|=
operator|new
name|InOnlyProducer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|producer
operator|=
operator|new
name|InOutProducer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|producer
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isMultipleConsumersSupported ()
specifier|public
name|boolean
name|isMultipleConsumersSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getDestinationName ()
specifier|public
name|String
name|getDestinationName
parameter_list|()
block|{
name|String
name|answer
init|=
name|getEndpointUri
argument_list|()
operator|.
name|substring
argument_list|(
name|getEndpointUri
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|answer
operator|.
name|lastIndexOf
argument_list|(
literal|"?"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getSjmsComponent ()
specifier|public
name|SjmsComponent
name|getSjmsComponent
parameter_list|()
block|{
return|return
operator|(
name|SjmsComponent
operator|)
name|this
operator|.
name|getComponent
argument_list|()
return|;
block|}
DECL|method|getConnectionResource ()
specifier|public
name|ConnectionResource
name|getConnectionResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|getSjmsComponent
argument_list|()
operator|.
name|getConnectionResource
argument_list|()
return|;
block|}
DECL|method|getSjmsHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getSjmsHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|getSjmsComponent
argument_list|()
operator|.
name|getHeaderFilterStrategy
argument_list|()
return|;
block|}
DECL|method|getJmsKeyFormatStrategy ()
specifier|public
name|KeyFormatStrategy
name|getJmsKeyFormatStrategy
parameter_list|()
block|{
return|return
name|getSjmsComponent
argument_list|()
operator|.
name|getKeyFormatStrategy
argument_list|()
return|;
block|}
DECL|method|getSessions ()
specifier|public
name|SessionPool
name|getSessions
parameter_list|()
block|{
return|return
name|sessions
return|;
block|}
DECL|method|setSynchronous (boolean asyncConsumer)
specifier|public
name|void
name|setSynchronous
parameter_list|(
name|boolean
name|asyncConsumer
parameter_list|)
block|{
name|this
operator|.
name|synchronous
operator|=
name|asyncConsumer
expr_stmt|;
block|}
DECL|method|isSynchronous ()
specifier|public
name|boolean
name|isSynchronous
parameter_list|()
block|{
return|return
name|synchronous
return|;
block|}
DECL|method|setTransacted (boolean transacted)
specifier|public
name|void
name|setTransacted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
block|{
if|if
condition|(
name|transacted
condition|)
block|{
name|setAcknowledgementMode
argument_list|(
name|SessionAcknowledgementType
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|transacted
operator|=
name|transacted
expr_stmt|;
block|}
DECL|method|isTransacted ()
specifier|public
name|boolean
name|isTransacted
parameter_list|()
block|{
return|return
name|transacted
return|;
block|}
DECL|method|setNamedReplyTo (String namedReplyTo)
specifier|public
name|void
name|setNamedReplyTo
parameter_list|(
name|String
name|namedReplyTo
parameter_list|)
block|{
name|this
operator|.
name|namedReplyTo
operator|=
name|namedReplyTo
expr_stmt|;
name|this
operator|.
name|setExchangePattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
block|}
DECL|method|getNamedReplyTo ()
specifier|public
name|String
name|getNamedReplyTo
parameter_list|()
block|{
return|return
name|namedReplyTo
return|;
block|}
DECL|method|setAcknowledgementMode (SessionAcknowledgementType acknowledgementMode)
specifier|public
name|void
name|setAcknowledgementMode
parameter_list|(
name|SessionAcknowledgementType
name|acknowledgementMode
parameter_list|)
block|{
name|this
operator|.
name|acknowledgementMode
operator|=
name|acknowledgementMode
expr_stmt|;
block|}
DECL|method|getAcknowledgementMode ()
specifier|public
name|SessionAcknowledgementType
name|getAcknowledgementMode
parameter_list|()
block|{
return|return
name|acknowledgementMode
return|;
block|}
DECL|method|setTopic (boolean topic)
specifier|public
name|void
name|setTopic
parameter_list|(
name|boolean
name|topic
parameter_list|)
block|{
name|this
operator|.
name|topic
operator|=
name|topic
expr_stmt|;
block|}
DECL|method|isTopic ()
specifier|public
name|boolean
name|isTopic
parameter_list|()
block|{
return|return
name|topic
return|;
block|}
DECL|method|setProducerCount (int producerCount)
specifier|public
name|void
name|setProducerCount
parameter_list|(
name|int
name|producerCount
parameter_list|)
block|{
name|this
operator|.
name|producerCount
operator|=
name|producerCount
expr_stmt|;
block|}
DECL|method|getProducerCount ()
specifier|public
name|int
name|getProducerCount
parameter_list|()
block|{
return|return
name|producerCount
return|;
block|}
DECL|method|setConsumerCount (int consumerCount)
specifier|public
name|void
name|setConsumerCount
parameter_list|(
name|int
name|consumerCount
parameter_list|)
block|{
name|this
operator|.
name|consumerCount
operator|=
name|consumerCount
expr_stmt|;
block|}
DECL|method|getConsumerCount ()
specifier|public
name|int
name|getConsumerCount
parameter_list|()
block|{
return|return
name|consumerCount
return|;
block|}
DECL|method|getTtl ()
specifier|public
name|long
name|getTtl
parameter_list|()
block|{
return|return
name|ttl
return|;
block|}
DECL|method|setTtl (long ttl)
specifier|public
name|void
name|setTtl
parameter_list|(
name|long
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
block|}
DECL|method|isPersistent ()
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
DECL|method|setPersistent (boolean persistent)
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
DECL|method|getDurableSubscriptionId ()
specifier|public
name|String
name|getDurableSubscriptionId
parameter_list|()
block|{
return|return
name|durableSubscriptionId
return|;
block|}
DECL|method|setDurableSubscriptionId (String durableSubscription)
specifier|public
name|void
name|setDurableSubscriptionId
parameter_list|(
name|String
name|durableSubscription
parameter_list|)
block|{
name|this
operator|.
name|durableSubscriptionId
operator|=
name|durableSubscription
expr_stmt|;
block|}
DECL|method|getSessionCount ()
specifier|public
name|int
name|getSessionCount
parameter_list|()
block|{
return|return
name|sessionCount
return|;
block|}
DECL|method|setSessionCount (int sessionCount)
specifier|public
name|void
name|setSessionCount
parameter_list|(
name|int
name|sessionCount
parameter_list|)
block|{
name|this
operator|.
name|sessionCount
operator|=
name|sessionCount
expr_stmt|;
block|}
DECL|method|setResponseTimeOut (long responseTimeOut)
specifier|public
name|void
name|setResponseTimeOut
parameter_list|(
name|long
name|responseTimeOut
parameter_list|)
block|{
name|this
operator|.
name|responseTimeOut
operator|=
name|responseTimeOut
expr_stmt|;
block|}
DECL|method|getResponseTimeOut ()
specifier|public
name|long
name|getResponseTimeOut
parameter_list|()
block|{
return|return
name|responseTimeOut
return|;
block|}
DECL|method|setMessageSelector (String messageSelector)
specifier|public
name|void
name|setMessageSelector
parameter_list|(
name|String
name|messageSelector
parameter_list|)
block|{
name|this
operator|.
name|messageSelector
operator|=
name|messageSelector
expr_stmt|;
block|}
DECL|method|getMessageSelector ()
specifier|public
name|String
name|getMessageSelector
parameter_list|()
block|{
return|return
name|messageSelector
return|;
block|}
block|}
end_class

end_unit

