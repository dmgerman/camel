begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|StreamMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|removeStartingCharacters
import|;
end_import

begin_comment
comment|/**  * Utility class for {@link javax.jms.Message}.  */
end_comment

begin_class
DECL|class|JmsMessageHelper
specifier|public
specifier|final
class|class
name|JmsMessageHelper
implements|implements
name|JmsConstants
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JmsMessageHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|JmsMessageHelper ()
specifier|private
name|JmsMessageHelper
parameter_list|()
block|{     }
DECL|method|createExchange (Message message, Endpoint endpoint)
specifier|public
specifier|static
name|Exchange
name|createExchange
parameter_list|(
name|Message
name|message
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|createExchange
argument_list|(
name|message
argument_list|,
name|endpoint
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Creates an Exchange from a JMS Message.      * @param message The JMS message.      * @param endpoint The Endpoint to use to create the Exchange object.      * @param keyFormatStrategy the a {@link KeyFormatStrategy} to used to      *                          format keys in a JMS 1.1 compliant manner. If null the      *                          {@link DefaultJmsKeyFormatStrategy} will be used.      * @return Populated Exchange.      */
DECL|method|createExchange (Message message, Endpoint endpoint, KeyFormatStrategy keyFormatStrategy)
specifier|public
specifier|static
name|Exchange
name|createExchange
parameter_list|(
name|Message
name|message
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|KeyFormatStrategy
name|keyFormatStrategy
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|KeyFormatStrategy
name|initialisedKeyFormatStrategy
init|=
operator|(
name|keyFormatStrategy
operator|==
literal|null
operator|)
condition|?
operator|new
name|DefaultJmsKeyFormatStrategy
argument_list|()
else|:
name|keyFormatStrategy
decl_stmt|;
return|return
name|populateExchange
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
literal|false
argument_list|,
name|initialisedKeyFormatStrategy
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|populateExchange (Message message, Exchange exchange, boolean out, KeyFormatStrategy keyFormatStrategy)
specifier|public
specifier|static
name|Exchange
name|populateExchange
parameter_list|(
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|out
parameter_list|,
name|KeyFormatStrategy
name|keyFormatStrategy
parameter_list|)
block|{
try|try
block|{
name|setJmsMessageHeaders
argument_list|(
name|message
argument_list|,
name|exchange
argument_list|,
name|out
argument_list|,
name|keyFormatStrategy
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
comment|// convert to JMS Message of the given type
name|DefaultMessage
name|bodyMessage
decl_stmt|;
if|if
condition|(
name|out
condition|)
block|{
name|bodyMessage
operator|=
operator|(
name|DefaultMessage
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bodyMessage
operator|=
operator|(
name|DefaultMessage
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|JmsMessageHelper
operator|.
name|discoverJmsMessageType
argument_list|(
name|message
argument_list|)
condition|)
block|{
case|case
name|Bytes
case|:
name|BytesMessage
name|bytesMessage
init|=
operator|(
name|BytesMessage
operator|)
name|message
decl_stmt|;
if|if
condition|(
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Length of BytesMessage is too long: {}"
argument_list|,
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
index|]
decl_stmt|;
name|bytesMessage
operator|.
name|readBytes
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|SjmsConstants
operator|.
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Bytes
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
case|case
name|Map
case|:
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|body
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|MapMessage
name|mapMessage
init|=
operator|(
name|MapMessage
operator|)
name|message
decl_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|names
init|=
name|mapMessage
operator|.
name|getMapNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|mapMessage
operator|.
name|getObject
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|body
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|SjmsConstants
operator|.
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Map
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
break|break;
case|case
name|Object
case|:
name|ObjectMessage
name|objMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|SjmsConstants
operator|.
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Object
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|objMsg
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Text
case|:
name|TextMessage
name|textMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|SjmsConstants
operator|.
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Text
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|textMsg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Stream
case|:
name|StreamMessage
name|streamMessage
init|=
operator|(
name|StreamMessage
operator|)
name|message
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Object
name|obj
decl_stmt|;
while|while
condition|(
operator|(
name|obj
operator|=
name|streamMessage
operator|.
name|readObject
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|bodyMessage
operator|.
name|setHeader
argument_list|(
name|SjmsConstants
operator|.
name|JMS_MESSAGE_TYPE
argument_list|,
name|JmsMessageType
operator|.
name|Stream
argument_list|)
expr_stmt|;
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|list
argument_list|)
expr_stmt|;
break|break;
case|case
name|Message
case|:
default|default:
comment|// Do nothing. Only set the headers for an empty message
name|bodyMessage
operator|.
name|setBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
DECL|method|createMessage (Exchange exchange, Session session, SjmsEndpoint endpoint)
specifier|public
specifier|static
name|Message
name|createMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Session
name|session
parameter_list|,
name|SjmsEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|answer
decl_stmt|;
name|Object
name|body
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|bodyHeaders
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|body
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|bodyHeaders
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|bodyHeaders
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|=
name|createMessage
argument_list|(
name|exchange
argument_list|,
name|session
argument_list|,
name|body
argument_list|,
name|bodyHeaders
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createMessage (Exchange exchange, Session session, Object payload, Map<String, Object> messageHeaders, SjmsEndpoint endpoint)
specifier|public
specifier|static
name|Message
name|createMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Session
name|session
parameter_list|,
name|Object
name|payload
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|messageHeaders
parameter_list|,
name|SjmsEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createMessage
argument_list|(
name|exchange
argument_list|,
name|session
argument_list|,
name|payload
argument_list|,
name|messageHeaders
argument_list|,
name|endpoint
operator|.
name|isAllowNullBody
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getSjmsHeaderFilterStrategy
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getJmsKeyFormatStrategy
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createMessage (Exchange exchange, Session session, Object payload, Map<String, Object> messageHeaders, boolean allowNullBody, HeaderFilterStrategy headerFilterStrategy, KeyFormatStrategy keyFormatStrategy, TypeConverter typeConverter)
specifier|private
specifier|static
name|Message
name|createMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Session
name|session
parameter_list|,
name|Object
name|payload
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|messageHeaders
parameter_list|,
name|boolean
name|allowNullBody
parameter_list|,
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|,
name|KeyFormatStrategy
name|keyFormatStrategy
parameter_list|,
name|TypeConverter
name|typeConverter
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|answer
init|=
literal|null
decl_stmt|;
name|JmsMessageType
name|messageType
init|=
name|JmsMessageHelper
operator|.
name|discoverMessageTypeFromPayload
argument_list|(
name|payload
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|messageType
condition|)
block|{
case|case
name|Bytes
case|:
name|BytesMessage
name|bytesMessage
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytesToWrite
init|=
name|typeConverter
operator|.
name|convertTo
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|bytesMessage
operator|.
name|writeBytes
argument_list|(
name|bytesToWrite
argument_list|)
expr_stmt|;
name|answer
operator|=
name|bytesMessage
expr_stmt|;
break|break;
case|case
name|Map
case|:
name|MapMessage
name|mapMessage
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|Map
name|objMap
init|=
operator|(
name|Map
operator|)
name|payload
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
name|entry
range|:
operator|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
operator|)
name|objMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mapMessage
operator|.
name|setObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|=
name|mapMessage
expr_stmt|;
break|break;
case|case
name|Object
case|:
name|ObjectMessage
name|objectMessage
init|=
name|session
operator|.
name|createObjectMessage
argument_list|()
decl_stmt|;
name|objectMessage
operator|.
name|setObject
argument_list|(
operator|(
name|Serializable
operator|)
name|payload
argument_list|)
expr_stmt|;
name|answer
operator|=
name|objectMessage
expr_stmt|;
break|break;
case|case
name|Text
case|:
name|TextMessage
name|textMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|String
name|convertedText
init|=
name|typeConverter
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|payload
argument_list|)
decl_stmt|;
name|textMessage
operator|.
name|setText
argument_list|(
name|convertedText
argument_list|)
expr_stmt|;
name|answer
operator|=
name|textMessage
expr_stmt|;
break|break;
case|case
name|Stream
case|:
name|StreamMessage
name|streamMessage
init|=
name|session
operator|.
name|createStreamMessage
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
operator|(
name|Collection
operator|)
name|payload
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|obj
range|:
name|collection
control|)
block|{
name|streamMessage
operator|.
name|writeObject
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|answer
operator|=
name|streamMessage
expr_stmt|;
break|break;
case|case
name|Message
case|:
if|if
condition|(
name|allowNullBody
operator|&&
name|payload
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|session
operator|.
name|createMessage
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unsupported message body type "
operator|+
name|ObjectHelper
operator|.
name|classCanonicalName
argument_list|(
name|payload
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Null body is not allowed"
argument_list|)
throw|;
block|}
break|break;
default|default:
break|break;
block|}
name|appendJmsProperties
argument_list|(
name|answer
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|headerFilterStrategy
argument_list|,
name|keyFormatStrategy
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Appends the JMS headers from the Camel {@link Message}      */
DECL|method|appendJmsProperties (Message jmsMessage, Exchange exchange, org.apache.camel.Message in, HeaderFilterStrategy headerFilterStrategy, KeyFormatStrategy keyFormatStrategy)
specifier|private
specifier|static
name|void
name|appendJmsProperties
parameter_list|(
name|Message
name|jmsMessage
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|in
parameter_list|,
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|,
name|KeyFormatStrategy
name|keyFormatStrategy
parameter_list|)
throws|throws
name|JMSException
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|in
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|String
name|headerName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|headerValue
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|appendJmsProperty
argument_list|(
name|jmsMessage
argument_list|,
name|exchange
argument_list|,
name|in
argument_list|,
name|headerName
argument_list|,
name|headerValue
argument_list|,
name|headerFilterStrategy
argument_list|,
name|keyFormatStrategy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendJmsProperty (Message jmsMessage, Exchange exchange, org.apache.camel.Message in, String headerName, Object headerValue, HeaderFilterStrategy headerFilterStrategy, KeyFormatStrategy keyFormatStrategy)
specifier|private
specifier|static
name|void
name|appendJmsProperty
parameter_list|(
name|Message
name|jmsMessage
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|in
parameter_list|,
name|String
name|headerName
parameter_list|,
name|Object
name|headerValue
parameter_list|,
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|,
name|KeyFormatStrategy
name|keyFormatStrategy
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isStandardJMSHeader
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
if|if
condition|(
name|headerName
operator|.
name|equals
argument_list|(
literal|"JMSCorrelationID"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSCorrelationID
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equals
argument_list|(
literal|"JMSReplyTo"
argument_list|)
operator|&&
name|headerValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|headerValue
operator|instanceof
name|String
condition|)
block|{
comment|// if the value is a String we must normalize it first, and must include the prefix
comment|// as ActiveMQ requires that when converting the String to a javax.jms.Destination type
name|headerValue
operator|=
name|normalizeDestinationName
argument_list|(
operator|(
name|String
operator|)
name|headerValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Destination
name|replyTo
init|=
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Destination
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
decl_stmt|;
name|JmsMessageHelper
operator|.
name|setJMSReplyTo
argument_list|(
name|jmsMessage
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equals
argument_list|(
literal|"JMSType"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSType
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equals
argument_list|(
literal|"JMSPriority"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSPriority
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equals
argument_list|(
literal|"JMSDeliveryMode"
argument_list|)
condition|)
block|{
name|JmsMessageHelper
operator|.
name|setJMSDeliveryMode
argument_list|(
name|exchange
argument_list|,
name|jmsMessage
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerName
operator|.
name|equals
argument_list|(
literal|"JMSExpiration"
argument_list|)
condition|)
block|{
name|jmsMessage
operator|.
name|setJMSExpiration
argument_list|(
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|headerValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The following properties are set by the MessageProducer:
comment|// JMSDestination
comment|// The following are set on the underlying JMS provider:
comment|// JMSMessageID, JMSTimestamp, JMSRedelivered
comment|// log at trace level to not spam log
name|LOG
operator|.
name|trace
argument_list|(
literal|"Ignoring JMS header: {} with value: {}"
argument_list|,
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|shouldOutputHeader
argument_list|(
name|in
argument_list|,
name|headerName
argument_list|,
name|headerValue
argument_list|,
name|exchange
argument_list|,
name|headerFilterStrategy
argument_list|)
condition|)
block|{
comment|// only primitive headers and strings is allowed as properties
comment|// see message properties: http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html
name|Object
name|value
init|=
name|getValidJMSHeaderValue
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// must encode to safe JMS header name before setting property on jmsMessage
name|String
name|key
init|=
name|keyFormatStrategy
operator|.
name|encodeKey
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
comment|// set the property
name|JmsMessageHelper
operator|.
name|setProperty
argument_list|(
name|jmsMessage
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// okay the value is not a primitive or string so we cannot sent it over the wire
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring non primitive header: {} of class: {} with value: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|headerName
block|,
name|headerValue
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
block|,
name|headerValue
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Is the given header a standard JMS header      * @param headerName the header name      * @return<tt>true</tt> if its a standard JMS header      */
DECL|method|isStandardJMSHeader (String headerName)
specifier|protected
specifier|static
name|boolean
name|isStandardJMSHeader
parameter_list|(
name|String
name|headerName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|headerName
operator|.
name|startsWith
argument_list|(
literal|"JMS"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|headerName
operator|.
name|startsWith
argument_list|(
literal|"JMSX"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// vendors will use JMS_XXX as their special headers (where XXX is vendor name, such as JMS_IBM)
if|if
condition|(
name|headerName
operator|.
name|startsWith
argument_list|(
literal|"JMS_"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// the 4th char must be a letter to be a standard JMS header
if|if
condition|(
name|headerName
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
block|{
name|Character
name|fourth
init|=
name|headerName
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLetter
argument_list|(
name|fourth
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Strategy to test if the given header is valid according to the JMS spec to be set as a property      * on the JMS message.      *<p/>      * This default implementation will allow:      *<ul>      *<li>any primitives and their counter Objects (Integer, Double etc.)</li>      *<li>String and any other literals, Character, CharSequence</li>      *<li>Boolean</li>      *<li>Number</li>      *<li>java.util.Date</li>      *</ul>      *      * @param headerName   the header name      * @param headerValue  the header value      * @return  the value to use,<tt>null</tt> to ignore this header      */
DECL|method|getValidJMSHeaderValue (String headerName, Object headerValue)
specifier|protected
specifier|static
name|Object
name|getValidJMSHeaderValue
parameter_list|(
name|String
name|headerName
parameter_list|,
name|Object
name|headerValue
parameter_list|)
block|{
if|if
condition|(
name|headerValue
operator|instanceof
name|String
condition|)
block|{
return|return
name|headerValue
return|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|BigInteger
condition|)
block|{
return|return
name|headerValue
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|BigDecimal
condition|)
block|{
return|return
name|headerValue
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|Number
condition|)
block|{
return|return
name|headerValue
return|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|Character
condition|)
block|{
return|return
name|headerValue
return|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|CharSequence
condition|)
block|{
return|return
name|headerValue
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|Boolean
condition|)
block|{
return|return
name|headerValue
return|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|Date
condition|)
block|{
return|return
name|headerValue
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setJmsMessageHeaders (final Message jmsMessage, final Exchange exchange, boolean out, KeyFormatStrategy keyFormatStrategy)
specifier|public
specifier|static
name|Exchange
name|setJmsMessageHeaders
parameter_list|(
specifier|final
name|Message
name|jmsMessage
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|out
parameter_list|,
name|KeyFormatStrategy
name|keyFormatStrategy
parameter_list|)
throws|throws
name|JMSException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|jmsMessage
operator|!=
literal|null
condition|)
block|{
comment|// lets populate the standard JMS message headers
try|try
block|{
name|headers
operator|.
name|put
argument_list|(
name|JMS_CORRELATION_ID
argument_list|,
name|jmsMessage
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_DELIVERY_MODE
argument_list|,
name|jmsMessage
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_DESTINATION
argument_list|,
name|jmsMessage
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_EXPIRATION
argument_list|,
name|jmsMessage
operator|.
name|getJMSExpiration
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_MESSAGE_ID
argument_list|,
name|jmsMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_PRIORITY
argument_list|,
name|jmsMessage
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_REDELIVERED
argument_list|,
name|jmsMessage
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_TIMESTAMP
argument_list|,
name|jmsMessage
operator|.
name|getJMSTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_REPLY_TO
argument_list|,
name|getJMSReplyTo
argument_list|(
name|jmsMessage
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JMS_TYPE
argument_list|,
name|getJMSType
argument_list|(
name|jmsMessage
argument_list|)
argument_list|)
expr_stmt|;
comment|// this works around a bug in the ActiveMQ property handling
name|headers
operator|.
name|put
argument_list|(
name|JMSX_GROUP_ID
argument_list|,
name|jmsMessage
operator|.
name|getStringProperty
argument_list|(
name|JMSX_GROUP_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|Enumeration
argument_list|<
name|String
argument_list|>
name|enumeration
init|=
name|jmsMessage
operator|.
name|getPropertyNames
argument_list|()
init|;
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|enumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasIllegalHeaderKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalHeaderException
argument_list|(
literal|"Header "
operator|+
name|key
operator|+
literal|" is not a legal JMS header name value"
argument_list|)
throw|;
block|}
name|Object
name|value
init|=
name|jmsMessage
operator|.
name|getObjectProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|decodedName
init|=
name|keyFormatStrategy
operator|.
name|decodeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|decodedName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|out
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
comment|/**      * Strategy to allow filtering of headers which are put on the JMS message      *<p/>      *<b>Note</b>: Currently only supports sending java identifiers as keys      */
DECL|method|shouldOutputHeader (org.apache.camel.Message camelMessage, String headerName, Object headerValue, Exchange exchange, HeaderFilterStrategy headerFilterStrategy)
specifier|protected
specifier|static
name|boolean
name|shouldOutputHeader
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|camelMessage
parameter_list|,
name|String
name|headerName
parameter_list|,
name|Object
name|headerValue
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
return|return
name|headerFilterStrategy
operator|==
literal|null
operator|||
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|,
name|exchange
argument_list|)
return|;
block|}
comment|/**      * Gets the JMSType from the message.      *      * @param message the message      * @return the type, can be<tt>null</tt>      */
DECL|method|getJMSType (Message message)
specifier|public
specifier|static
name|String
name|getJMSType
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
return|return
name|message
operator|.
name|getJMSType
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore due OracleAQ does not support accessing JMSType
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the JMSDeliveryMode on the message.      *      * @param exchange the exchange      * @param message  the message      * @param deliveryMode  the delivery mode, either as a String or integer      * @throws javax.jms.JMSException is thrown if error setting the delivery mode      */
DECL|method|setJMSDeliveryMode (Exchange exchange, Message message, Object deliveryMode)
specifier|public
specifier|static
name|void
name|setJMSDeliveryMode
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|,
name|Object
name|deliveryMode
parameter_list|)
throws|throws
name|JMSException
block|{
name|Integer
name|mode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|deliveryMode
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|deliveryMode
decl_stmt|;
if|if
condition|(
literal|"PERSISTENT"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|mode
operator|=
name|DeliveryMode
operator|.
name|PERSISTENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"NON_PERSISTENT"
operator|.
name|equalsIgnoreCase
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|mode
operator|=
name|DeliveryMode
operator|.
name|NON_PERSISTENT
expr_stmt|;
block|}
else|else
block|{
comment|// it may be a number in the String so try that
name|Integer
name|value
init|=
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown delivery mode with value: "
operator|+
name|deliveryMode
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// fallback and try to convert to a number
name|Integer
name|value
init|=
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|deliveryMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|value
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mode
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setJMSDeliveryMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
name|JmsConstants
operator|.
name|JMS_DELIVERY_MODE
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the correlation id on the JMS message.      *<p/>      * Will ignore exception thrown      *      * @param message the JMS message      * @param type    the correlation id      */
DECL|method|setMessageType (Message message, String type)
specifier|public
specifier|static
name|void
name|setMessageType
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|type
parameter_list|)
block|{
try|try
block|{
name|message
operator|.
name|setJMSType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error setting the message type: {}"
argument_list|,
name|type
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the correlation id on the JMS message.      *<p/>      * Will ignore exception thrown      *      * @param message       the JMS message      * @param correlationId the correlation id      */
DECL|method|setCorrelationId (Message message, String correlationId)
specifier|public
specifier|static
name|void
name|setCorrelationId
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|correlationId
parameter_list|)
block|{
try|try
block|{
name|message
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error setting the correlationId: {}"
argument_list|,
name|correlationId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the JMSReplyTo on the message.      *      * @param message the message      * @param replyTo the reply to destination      */
DECL|method|setJMSReplyTo (Message message, Destination replyTo)
specifier|public
specifier|static
name|void
name|setJMSReplyTo
parameter_list|(
name|Message
name|message
parameter_list|,
name|Destination
name|replyTo
parameter_list|)
block|{
try|try
block|{
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error setting the correlationId: {}"
argument_list|,
name|replyTo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the JMSReplyTo from the message.      *      * @param message the message      * @return the reply to, can be<tt>null</tt>      */
DECL|method|getJMSReplyTo (Message message)
specifier|public
specifier|static
name|Destination
name|getJMSReplyTo
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
return|return
name|message
operator|.
name|getJMSReplyTo
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore due OracleAQ does not support accessing JMSReplyTo
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Sets the property on the given JMS message.      *      * @param jmsMessage the JMS message      * @param name       name of the property to set      * @param value      the value      * @throws JMSException can be thrown      */
DECL|method|setProperty (Message jmsMessage, String name, Object value)
specifier|public
specifier|static
name|void
name|setProperty
parameter_list|(
name|Message
name|jmsMessage
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|jmsMessage
operator|.
name|setObjectProperty
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
name|jmsMessage
operator|.
name|setByteProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Byte
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|jmsMessage
operator|.
name|setBooleanProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|jmsMessage
operator|.
name|setDoubleProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|jmsMessage
operator|.
name|setFloatProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Float
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|jmsMessage
operator|.
name|setIntProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|jmsMessage
operator|.
name|setLongProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
name|jmsMessage
operator|.
name|setShortProperty
argument_list|(
name|name
argument_list|,
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|jmsMessage
operator|.
name|setStringProperty
argument_list|(
name|name
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to Object
name|jmsMessage
operator|.
name|setObjectProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|discoverMessageTypeFromPayload (final Object payload)
specifier|public
specifier|static
name|JmsMessageType
name|discoverMessageTypeFromPayload
parameter_list|(
specifier|final
name|Object
name|payload
parameter_list|)
block|{
name|JmsMessageType
name|answer
decl_stmt|;
comment|// Default is a JMS Message since a body is not required
if|if
condition|(
name|payload
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Message
expr_stmt|;
block|}
else|else
block|{
comment|// Something was found in the body so determine
comment|// what type of message we need to create
if|if
condition|(
name|byte
index|[]
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Bytes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Map
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Stream
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|InputStream
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Bytes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ByteBuffer
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Bytes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|File
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Bytes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Reader
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Text
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Text
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CharBuffer
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Text
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|char
index|[]
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Text
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Text
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Serializable
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|payload
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Object
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Message
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|discoverJmsMessageType (Message message)
specifier|public
specifier|static
name|JmsMessageType
name|discoverJmsMessageType
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|JmsMessageType
name|answer
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|BytesMessage
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Bytes
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MapMessage
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Map
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|TextMessage
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Text
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StreamMessage
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Stream
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectMessage
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Object
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Message
expr_stmt|;
block|}
block|}
else|else
block|{
name|answer
operator|=
name|JmsMessageType
operator|.
name|Message
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|hasIllegalHeaderKey (String key)
specifier|private
specifier|static
name|boolean
name|hasIllegalHeaderKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|key
operator|==
literal|null
operator|||
name|key
operator|.
name|isEmpty
argument_list|()
operator|||
name|key
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|||
name|key
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
return|;
block|}
comment|/**      * Normalizes the destination name.      *<p/>      * This ensures the destination name is correct, and we do not create queues as<tt>queue://queue:foo</tt>, which      * was intended as<tt>queue://foo</tt>.      *      * @param destination the destination      * @return the normalized destination      */
DECL|method|normalizeDestinationName (String destination)
specifier|public
specifier|static
name|String
name|normalizeDestinationName
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
comment|// do not include prefix which is the current behavior when using this method.
return|return
name|normalizeDestinationName
argument_list|(
name|destination
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Normalizes the destination name.      *<p/>      * This ensures the destination name is correct, and we do not create queues as<tt>queue://queue:foo</tt>, which      * was intended as<tt>queue://foo</tt>.      *      * @param destination the destination      * @param includePrefix whether to include<tt>queue://</tt>, or<tt>topic://</tt> prefix in the normalized destination name      * @return the normalized destination      */
DECL|method|normalizeDestinationName (String destination, boolean includePrefix)
specifier|public
specifier|static
name|String
name|normalizeDestinationName
parameter_list|(
name|String
name|destination
parameter_list|,
name|boolean
name|includePrefix
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|destination
argument_list|)
condition|)
block|{
return|return
name|destination
return|;
block|}
if|if
condition|(
name|destination
operator|.
name|startsWith
argument_list|(
name|QUEUE_PREFIX
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|removeStartingCharacters
argument_list|(
name|destination
operator|.
name|substring
argument_list|(
name|QUEUE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|includePrefix
condition|)
block|{
name|s
operator|=
name|QUEUE_PREFIX
operator|+
literal|"//"
operator|+
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|.
name|startsWith
argument_list|(
name|TEMP_QUEUE_PREFIX
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|removeStartingCharacters
argument_list|(
name|destination
operator|.
name|substring
argument_list|(
name|TEMP_QUEUE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|includePrefix
condition|)
block|{
name|s
operator|=
name|TEMP_QUEUE_PREFIX
operator|+
literal|"//"
operator|+
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|.
name|startsWith
argument_list|(
name|TOPIC_PREFIX
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|removeStartingCharacters
argument_list|(
name|destination
operator|.
name|substring
argument_list|(
name|TOPIC_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|includePrefix
condition|)
block|{
name|s
operator|=
name|TOPIC_PREFIX
operator|+
literal|"//"
operator|+
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|.
name|startsWith
argument_list|(
name|TEMP_TOPIC_PREFIX
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|removeStartingCharacters
argument_list|(
name|destination
operator|.
name|substring
argument_list|(
name|TEMP_TOPIC_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|includePrefix
condition|)
block|{
name|s
operator|=
name|TEMP_TOPIC_PREFIX
operator|+
literal|"//"
operator|+
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
else|else
block|{
return|return
name|destination
return|;
block|}
block|}
block|}
end_class

end_unit

