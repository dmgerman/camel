begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|BatchMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|MessageProducerResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|TransactionCommitStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|tx
operator|.
name|DefaultTransactionCommitStrategy
import|;
end_import

begin_comment
comment|/**  * A Camel Producer that provides the InOnly Exchange pattern..  */
end_comment

begin_class
DECL|class|InOnlyProducer
specifier|public
class|class
name|InOnlyProducer
extends|extends
name|SjmsProducer
block|{
DECL|method|InOnlyProducer (final Endpoint endpoint)
specifier|public
name|InOnlyProducer
parameter_list|(
specifier|final
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCommitStrategy ()
specifier|protected
name|TransactionCommitStrategy
name|getCommitStrategy
parameter_list|()
block|{
if|if
condition|(
name|isEndpointTransacted
argument_list|()
condition|)
block|{
return|return
name|super
operator|.
name|getCommitStrategy
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|DefaultTransactionCommitStrategy
argument_list|()
else|:
name|super
operator|.
name|getCommitStrategy
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|sendMessage (final Exchange exchange, final AsyncCallback callback, final MessageProducerResources producer, final ReleaseProducerCallback releaseProducerCallback)
specifier|public
name|void
name|sendMessage
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|,
specifier|final
name|MessageProducerResources
name|producer
parameter_list|,
specifier|final
name|ReleaseProducerCallback
name|releaseProducerCallback
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Collection
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|Iterable
argument_list|<
name|?
argument_list|>
name|payload
init|=
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|object
range|:
name|payload
control|)
block|{
name|Message
name|message
decl_stmt|;
if|if
condition|(
name|BatchMessage
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|object
argument_list|)
condition|)
block|{
name|BatchMessage
argument_list|<
name|?
argument_list|>
name|batchMessage
init|=
operator|(
name|BatchMessage
argument_list|<
name|?
argument_list|>
operator|)
name|object
decl_stmt|;
name|message
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|makeJmsMessage
argument_list|(
name|exchange
argument_list|,
name|batchMessage
operator|.
name|getPayload
argument_list|()
argument_list|,
name|batchMessage
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|producer
operator|.
name|getSession
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|makeJmsMessage
argument_list|(
name|exchange
argument_list|,
name|object
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|producer
operator|.
name|getSession
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
name|message
init|=
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|makeJmsMessage
argument_list|(
name|exchange
argument_list|,
name|producer
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Message
name|message
init|=
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|makeJmsMessage
argument_list|(
name|exchange
argument_list|,
name|producer
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Message
name|message
range|:
name|messages
control|)
block|{
name|producer
operator|.
name|getMessageProducer
argument_list|()
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Unable to complete sending the message: "
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|releaseProducerCallback
operator|.
name|release
argument_list|(
name|producer
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
name|isSynchronous
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

