begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|JmsObjectFactory
specifier|public
specifier|final
class|class
name|JmsObjectFactory
block|{
DECL|method|JmsObjectFactory ()
specifier|private
name|JmsObjectFactory
parameter_list|()
block|{
comment|//Helper class
block|}
DECL|method|createMessageConsumer ( Session session, Destination destination, String messageSelector, boolean topic, String durableSubscriptionId)
specifier|public
specifier|static
name|MessageConsumer
name|createMessageConsumer
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|String
name|messageSelector
parameter_list|,
name|boolean
name|topic
parameter_list|,
name|String
name|durableSubscriptionId
parameter_list|)
throws|throws
name|Exception
block|{
comment|// noLocal is default false accordingly to JMS spec
return|return
name|createMessageConsumer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|,
name|messageSelector
argument_list|,
name|topic
argument_list|,
name|durableSubscriptionId
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createMessageConsumer ( Session session, Destination destination, String messageSelector, boolean topic, String durableSubscriptionId, boolean noLocal)
specifier|public
specifier|static
name|MessageConsumer
name|createMessageConsumer
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|String
name|messageSelector
parameter_list|,
name|boolean
name|topic
parameter_list|,
name|String
name|durableSubscriptionId
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageConsumer
name|messageConsumer
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|durableSubscriptionId
argument_list|)
condition|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|messageSelector
argument_list|)
condition|)
block|{
name|messageConsumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|durableSubscriptionId
argument_list|,
name|messageSelector
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageConsumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|durableSubscriptionId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|messageSelector
argument_list|)
condition|)
block|{
name|messageConsumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|,
name|messageSelector
argument_list|,
name|noLocal
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageConsumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|messageSelector
argument_list|)
condition|)
block|{
name|messageConsumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|,
name|messageSelector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageConsumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|messageConsumer
return|;
block|}
DECL|method|createMessageProducer ( Session session, Destination destination, boolean persistent, long ttl)
specifier|public
specifier|static
name|MessageProducer
name|createMessageProducer
parameter_list|(
name|Session
name|session
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|boolean
name|persistent
parameter_list|,
name|long
name|ttl
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageProducer
name|messageProducer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|messageProducer
operator|.
name|setDeliveryMode
argument_list|(
name|persistent
condition|?
name|DeliveryMode
operator|.
name|PERSISTENT
else|:
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttl
operator|>
literal|0
condition|)
block|{
name|messageProducer
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
return|return
name|messageProducer
return|;
block|}
block|}
end_class

end_unit

