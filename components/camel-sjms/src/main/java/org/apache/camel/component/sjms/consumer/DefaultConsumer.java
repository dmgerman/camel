begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|ObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|tx
operator|.
name|SessionTransactionSynchronization
import|;
end_import

begin_comment
comment|/**  * A non-transacted queue consumer for a given JMS Destination  *   */
end_comment

begin_class
DECL|class|DefaultConsumer
specifier|public
class|class
name|DefaultConsumer
extends|extends
name|SjmsConsumer
block|{
DECL|field|consumers
specifier|protected
name|MessageConsumerPool
name|consumers
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
DECL|class|MessageConsumerPool
specifier|protected
class|class
name|MessageConsumerPool
extends|extends
name|ObjectPool
argument_list|<
name|MessageConsumerResources
argument_list|>
block|{
DECL|method|MessageConsumerPool ()
specifier|public
name|MessageConsumerPool
parameter_list|()
block|{
name|super
argument_list|(
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createObject ()
specifier|protected
name|MessageConsumerResources
name|createObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumerResources
name|model
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isEndpointTransacted
argument_list|()
operator|||
name|getSjmsEndpoint
argument_list|()
operator|.
name|getExchangePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
condition|)
block|{
name|model
operator|=
name|createConsumerWithDedicatedSession
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|model
operator|=
name|createConsumerListener
argument_list|()
expr_stmt|;
block|}
return|return
name|model
return|;
block|}
annotation|@
name|Override
DECL|method|destroyObject (MessageConsumerResources model)
specifier|protected
name|void
name|destroyObject
parameter_list|(
name|MessageConsumerResources
name|model
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getMessageConsumer
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getMessageConsumer
argument_list|()
operator|.
name|getMessageListener
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|getMessageConsumer
argument_list|()
operator|.
name|setMessageListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|getMessageConsumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getSession
argument_list|()
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
try|try
block|{
name|model
operator|.
name|getSession
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing. Just make sure we are cleaned up
block|}
block|}
name|model
operator|.
name|getSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|MessageConsumerResources
specifier|protected
class|class
name|MessageConsumerResources
block|{
DECL|field|session
specifier|private
specifier|final
name|Session
name|session
decl_stmt|;
DECL|field|messageConsumer
specifier|private
specifier|final
name|MessageConsumer
name|messageConsumer
decl_stmt|;
comment|/**          * TODO Add Constructor Javadoc          *           * @param session          * @param messageProducer          */
DECL|method|MessageConsumerResources (MessageConsumer messageConsumer)
specifier|public
name|MessageConsumerResources
parameter_list|(
name|MessageConsumer
name|messageConsumer
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|messageConsumer
operator|=
name|messageConsumer
expr_stmt|;
block|}
comment|/**          * TODO Add Constructor Javadoc          *           * @param session          * @param messageProducer          */
DECL|method|MessageConsumerResources (Session session, MessageConsumer messageConsumer)
specifier|public
name|MessageConsumerResources
parameter_list|(
name|Session
name|session
parameter_list|,
name|MessageConsumer
name|messageConsumer
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|messageConsumer
operator|=
name|messageConsumer
expr_stmt|;
block|}
comment|/**          * Gets the Session value of session for this instance of          * MessageProducerModel.          *           * @return the session          */
DECL|method|getSession ()
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
comment|/**          * Gets the QueueSender value of queueSender for this instance of          * MessageProducerModel.          *           * @return the queueSender          */
DECL|method|getMessageConsumer ()
specifier|public
name|MessageConsumer
name|getMessageConsumer
parameter_list|()
block|{
return|return
name|messageConsumer
return|;
block|}
block|}
DECL|method|DefaultConsumer (SjmsEndpoint endpoint, Processor processor)
specifier|public
name|DefaultConsumer
parameter_list|(
name|SjmsEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newDefaultThreadPool
argument_list|(
name|this
argument_list|,
literal|"SjmsConsumer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|consumers
operator|=
operator|new
name|MessageConsumerPool
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|fillPool
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|consumers
operator|!=
literal|null
condition|)
block|{
name|consumers
operator|.
name|drainPool
argument_list|()
expr_stmt|;
name|consumers
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doResume
argument_list|()
expr_stmt|;
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
name|doStop
argument_list|()
expr_stmt|;
name|super
operator|.
name|doSuspend
argument_list|()
expr_stmt|;
block|}
DECL|method|createConsumerWithDedicatedSession ()
specifier|private
name|MessageConsumerResources
name|createConsumerWithDedicatedSession
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
name|getConnectionResource
argument_list|()
operator|.
name|borrowConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isEndpointTransacted
argument_list|()
condition|)
block|{
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
name|MessageConsumer
name|messageConsumer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isTopic
argument_list|()
condition|)
block|{
name|messageConsumer
operator|=
name|JmsObjectFactory
operator|.
name|createTopicConsumer
argument_list|(
name|session
argument_list|,
name|getDestinationName
argument_list|()
argument_list|,
name|getMessageSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageConsumer
operator|=
name|JmsObjectFactory
operator|.
name|createQueueConsumer
argument_list|(
name|session
argument_list|,
name|getDestinationName
argument_list|()
argument_list|,
name|getMessageSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MessageListener
name|handler
init|=
name|createMessageHandler
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|messageConsumer
operator|.
name|setMessageListener
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|getConnectionResource
argument_list|()
operator|.
name|returnConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return
operator|new
name|MessageConsumerResources
argument_list|(
name|session
argument_list|,
name|messageConsumer
argument_list|)
return|;
block|}
DECL|method|createConsumerListener ()
specifier|private
name|MessageConsumerResources
name|createConsumerListener
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|queueSession
init|=
name|getSessionPool
argument_list|()
operator|.
name|borrowObject
argument_list|()
decl_stmt|;
name|MessageConsumer
name|messageConsumer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isTopic
argument_list|()
condition|)
block|{
name|messageConsumer
operator|=
name|JmsObjectFactory
operator|.
name|createTopicConsumer
argument_list|(
name|queueSession
argument_list|,
name|getDestinationName
argument_list|()
argument_list|,
name|getMessageSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageConsumer
operator|=
name|JmsObjectFactory
operator|.
name|createQueueConsumer
argument_list|(
name|queueSession
argument_list|,
name|getDestinationName
argument_list|()
argument_list|,
name|getMessageSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getSessionPool
argument_list|()
operator|.
name|returnObject
argument_list|(
name|queueSession
argument_list|)
expr_stmt|;
comment|// Don't pass in the session. Only needed if we are transacted
name|MessageListener
name|handler
init|=
name|createMessageHandler
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|messageConsumer
operator|.
name|setMessageListener
argument_list|(
name|handler
argument_list|)
expr_stmt|;
return|return
operator|new
name|MessageConsumerResources
argument_list|(
name|messageConsumer
argument_list|)
return|;
block|}
comment|/**      * Helper factory method used to create a MessageListener based on the MEP      *       * @param session      *            a session is only required if we are a transacted consumer      * @return      */
DECL|method|createMessageHandler (Session session)
specifier|protected
name|MessageListener
name|createMessageHandler
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|DefaultMessageHandler
name|messageHandler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getSjmsEndpoint
argument_list|()
operator|.
name|getExchangePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEndpointTransacted
argument_list|()
condition|)
block|{
name|messageHandler
operator|=
operator|new
name|InOnlyMessageHandler
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|executor
argument_list|,
operator|new
name|SessionTransactionSynchronization
argument_list|(
name|session
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageHandler
operator|=
operator|new
name|InOnlyMessageHandler
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isEndpointTransacted
argument_list|()
condition|)
block|{
name|messageHandler
operator|=
operator|new
name|InOutMessageHandler
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|executor
argument_list|,
operator|new
name|SessionTransactionSynchronization
argument_list|(
name|session
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageHandler
operator|=
operator|new
name|InOutMessageHandler
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
name|messageHandler
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|messageHandler
operator|.
name|setProcessor
argument_list|(
name|getAsyncProcessor
argument_list|()
argument_list|)
expr_stmt|;
name|messageHandler
operator|.
name|setSynchronous
argument_list|(
name|isSynchronous
argument_list|()
argument_list|)
expr_stmt|;
name|messageHandler
operator|.
name|setTransacted
argument_list|(
name|isEndpointTransacted
argument_list|()
argument_list|)
expr_stmt|;
name|messageHandler
operator|.
name|setTopic
argument_list|(
name|isTopic
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|messageHandler
return|;
block|}
block|}
end_class

end_unit

