begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sjms.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Exchanger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsExchangeMessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|SjmsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|JmsObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|jms
operator|.
name|ObjectPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sjms
operator|.
name|tx
operator|.
name|SessionTransactionSynchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Camel Producer that provides the InOut Exchange pattern.  */
end_comment

begin_class
DECL|class|InOutProducer
specifier|public
class|class
name|InOutProducer
extends|extends
name|SjmsProducer
block|{
comment|/**      * We use the {@link ReadWriteLock} to manage the {@link TreeMap} in place      * of a {@link ConcurrentMap} because due to significant performance gains.      * TODO Externalize the Exchanger Map to a store object      */
DECL|field|exchangerMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Exchanger
argument_list|<
name|Object
argument_list|>
argument_list|>
name|exchangerMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Exchanger
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|lock
specifier|private
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * A pool of {@link MessageConsumerResource} objects that are the reply      * consumers.       * TODO Add Class documentation for MessageProducerPool       * TODO Externalize      */
DECL|class|MessageConsumerPool
specifier|protected
class|class
name|MessageConsumerPool
extends|extends
name|ObjectPool
argument_list|<
name|MessageConsumerResource
argument_list|>
block|{
comment|/**          * TODO Add Constructor Javadoc          *           * @param poolSize          */
DECL|method|MessageConsumerPool (int poolSize)
specifier|public
name|MessageConsumerPool
parameter_list|(
name|int
name|poolSize
parameter_list|)
block|{
name|super
argument_list|(
name|poolSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createObject ()
specifier|protected
name|MessageConsumerResource
name|createObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumerResource
name|answer
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|getConnectionResource
argument_list|()
operator|.
name|borrowConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEndpointTransacted
argument_list|()
condition|)
block|{
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
name|Destination
name|replyToDestination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getNamedReplyTo
argument_list|()
argument_list|)
condition|)
block|{
name|replyToDestination
operator|=
name|JmsObjectFactory
operator|.
name|createTemporaryDestination
argument_list|(
name|session
argument_list|,
name|isTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|replyToDestination
operator|=
name|JmsObjectFactory
operator|.
name|createDestination
argument_list|(
name|session
argument_list|,
name|getNamedReplyTo
argument_list|()
argument_list|,
name|isTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MessageConsumer
name|messageConsumer
init|=
name|JmsObjectFactory
operator|.
name|createMessageConsumer
argument_list|(
name|session
argument_list|,
name|replyToDestination
argument_list|,
literal|null
argument_list|,
name|isTopic
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|messageConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Message Received in the Consumer Pool"
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"  Message : {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Exchanger
argument_list|<
name|Object
argument_list|>
name|exchanger
init|=
name|exchangerMap
operator|.
name|get
argument_list|(
name|message
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
decl_stmt|;
name|exchanger
operator|.
name|exchange
argument_list|(
name|message
argument_list|,
name|getResponseTimeOut
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|answer
operator|=
operator|new
name|MessageConsumerResource
argument_list|(
name|session
argument_list|,
name|messageConsumer
argument_list|,
name|replyToDestination
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to create the MessageConsumerResource: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|getConnectionResource
argument_list|()
operator|.
name|returnConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|destroyObject (MessageConsumerResource model)
specifier|protected
name|void
name|destroyObject
parameter_list|(
name|MessageConsumerResource
name|model
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|model
operator|.
name|getMessageConsumer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|model
operator|.
name|getMessageConsumer
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|model
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|getSession
argument_list|()
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
try|try
block|{
name|model
operator|.
name|getSession
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do nothing. Just make sure we are cleaned up
block|}
block|}
name|model
operator|.
name|getSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * TODO Add Class documentation for MessageConsumerResource      */
DECL|class|MessageConsumerResource
specifier|protected
class|class
name|MessageConsumerResource
block|{
DECL|field|session
specifier|private
specifier|final
name|Session
name|session
decl_stmt|;
DECL|field|messageConsumer
specifier|private
specifier|final
name|MessageConsumer
name|messageConsumer
decl_stmt|;
DECL|field|replyToDestination
specifier|private
specifier|final
name|Destination
name|replyToDestination
decl_stmt|;
comment|/**          * TODO Add Constructor Javadoc          *           * @param session          * @param messageConsumer          */
DECL|method|MessageConsumerResource (Session session, MessageConsumer messageConsumer, Destination replyToDestination)
specifier|public
name|MessageConsumerResource
parameter_list|(
name|Session
name|session
parameter_list|,
name|MessageConsumer
name|messageConsumer
parameter_list|,
name|Destination
name|replyToDestination
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|messageConsumer
operator|=
name|messageConsumer
expr_stmt|;
name|this
operator|.
name|replyToDestination
operator|=
name|replyToDestination
expr_stmt|;
block|}
DECL|method|getSession ()
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
DECL|method|getMessageConsumer ()
specifier|public
name|MessageConsumer
name|getMessageConsumer
parameter_list|()
block|{
return|return
name|messageConsumer
return|;
block|}
DECL|method|getReplyToDestination ()
specifier|public
name|Destination
name|getReplyToDestination
parameter_list|()
block|{
return|return
name|replyToDestination
return|;
block|}
block|}
DECL|class|InternalTempDestinationListener
specifier|protected
class|class
name|InternalTempDestinationListener
implements|implements
name|MessageListener
block|{
DECL|field|tempLogger
specifier|private
specifier|final
name|Logger
name|tempLogger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InternalTempDestinationListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exchanger
specifier|private
name|Exchanger
argument_list|<
name|Object
argument_list|>
name|exchanger
decl_stmt|;
comment|/**          * TODO Add Constructor Javadoc          *           * @param exchanger          */
DECL|method|InternalTempDestinationListener (Exchanger<Object> exchanger)
specifier|public
name|InternalTempDestinationListener
parameter_list|(
name|Exchanger
argument_list|<
name|Object
argument_list|>
name|exchanger
parameter_list|)
block|{
name|this
operator|.
name|exchanger
operator|=
name|exchanger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMessage (Message message)
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|tempLogger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|tempLogger
operator|.
name|debug
argument_list|(
literal|"Message Received in the Consumer Pool"
argument_list|)
expr_stmt|;
name|tempLogger
operator|.
name|debug
argument_list|(
literal|"  Message : {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|exchanger
operator|.
name|exchange
argument_list|(
name|message
argument_list|,
name|getResponseTimeOut
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|consumers
specifier|private
name|MessageConsumerPool
name|consumers
decl_stmt|;
DECL|method|InOutProducer (SjmsEndpoint endpoint)
specifier|public
name|InOutProducer
parameter_list|(
name|SjmsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getConsumerCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getNamedReplyTo
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No reply to destination is defined.  Using temporary destinations."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using {} as the reply to destination."
argument_list|,
name|getNamedReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConsumers
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setConsumers
argument_list|(
operator|new
name|MessageConsumerPool
argument_list|(
name|getConsumerCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getConsumers
argument_list|()
operator|.
name|fillPool
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|getConsumers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getConsumers
argument_list|()
operator|.
name|drainPool
argument_list|()
expr_stmt|;
name|setConsumers
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doCreateProducerModel ()
specifier|public
name|MessageProducerResources
name|doCreateProducerModel
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducerResources
name|answer
init|=
literal|null
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MessageProducer
name|messageProducer
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|conn
operator|=
name|getConnectionResource
argument_list|()
operator|.
name|borrowConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEndpointTransacted
argument_list|()
condition|)
block|{
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|getAcknowledgeMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|getAcknowledgeMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isTopic
argument_list|()
condition|)
block|{
name|messageProducer
operator|=
name|JmsObjectFactory
operator|.
name|createMessageProducer
argument_list|(
name|session
argument_list|,
name|getDestinationName
argument_list|()
argument_list|,
name|isTopic
argument_list|()
argument_list|,
name|isPersistent
argument_list|()
argument_list|,
name|getTtl
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageProducer
operator|=
name|JmsObjectFactory
operator|.
name|createQueueProducer
argument_list|(
name|session
argument_list|,
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Message Consumer Creation Exception: Session is NULL"
argument_list|)
throw|;
block|}
if|if
condition|(
name|messageProducer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Message Consumer Creation Exception: MessageProducer is NULL"
argument_list|)
throw|;
block|}
name|answer
operator|=
operator|new
name|MessageProducerResources
argument_list|(
name|session
argument_list|,
name|messageProducer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to create the MessageProducer: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|getConnectionResource
argument_list|()
operator|.
name|returnConnection
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * TODO time out is actually double as it waits for the producer and then      * waits for the response. Use an atomic long to manage the countdown      *       * @see org.apache.camel.component.sjms.SjmsProducer#sendMessage(org.apache.camel.Exchange,      *      org.apache.camel.AsyncCallback)      * @param exchange      * @param callback      * @throws Exception      */
annotation|@
name|Override
DECL|method|sendMessage (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|void
name|sendMessage
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getProducers
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MessageProducerResources
name|producer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|producer
operator|=
name|getProducers
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|getResponseTimeOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The producer pool is exhausted.  Consider setting producerCount to a higher value or disable the fixed size of the pool by setting fixedResourcePool=false."
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Producer Resource Pool is exhausted"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|producer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isEndpointTransacted
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|SessionTransactionSynchronization
argument_list|(
name|producer
operator|.
name|getSession
argument_list|()
argument_list|,
name|getCommitStrategy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Message
name|request
init|=
name|SjmsExchangeMessageHelper
operator|.
name|createMessage
argument_list|(
name|exchange
argument_list|,
name|producer
operator|.
name|getSession
argument_list|()
argument_list|,
name|getSjmsEndpoint
argument_list|()
operator|.
name|getJmsKeyFormatStrategy
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO just set the correlation id don't get it from the
comment|// message
name|String
name|correlationId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|correlationId
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|correlationId
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Object
name|responseObject
init|=
literal|null
decl_stmt|;
name|Exchanger
argument_list|<
name|Object
argument_list|>
name|messageExchanger
init|=
operator|new
name|Exchanger
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|SjmsExchangeMessageHelper
operator|.
name|setCorrelationId
argument_list|(
name|request
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|exchangerMap
operator|.
name|put
argument_list|(
name|correlationId
argument_list|,
name|messageExchanger
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|MessageConsumerResource
name|consumer
init|=
name|consumers
operator|.
name|borrowObject
argument_list|(
name|getResponseTimeOut
argument_list|()
argument_list|)
decl_stmt|;
name|SjmsExchangeMessageHelper
operator|.
name|setJMSReplyTo
argument_list|(
name|request
argument_list|,
name|consumer
operator|.
name|getReplyToDestination
argument_list|()
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|returnObject
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|producer
operator|.
name|getMessageProducer
argument_list|()
operator|.
name|send
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Return the producer to the pool so another waiting producer
comment|// can move forward
comment|// without waiting on us to complete the exchange
try|try
block|{
name|getProducers
argument_list|()
operator|.
name|returnObject
argument_list|(
name|producer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// thrown if the pool is full. safe to ignore.
block|}
try|try
block|{
name|responseObject
operator|=
name|messageExchanger
operator|.
name|exchange
argument_list|(
literal|null
argument_list|,
name|getResponseTimeOut
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|exchangerMap
operator|.
name|remove
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exchanger was interrupted while waiting on response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exchanger timed out while waiting on response"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|responseObject
operator|instanceof
name|Throwable
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|(
name|Throwable
operator|)
name|responseObject
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|responseObject
operator|instanceof
name|Message
condition|)
block|{
name|Message
name|response
init|=
operator|(
name|Message
operator|)
name|responseObject
decl_stmt|;
name|SjmsExchangeMessageHelper
operator|.
name|populateExchange
argument_list|(
name|response
argument_list|,
name|exchange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|CamelException
argument_list|(
literal|"Unknown response type: "
operator|+
name|responseObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|callback
operator|.
name|done
argument_list|(
name|isSynchronous
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setConsumers (MessageConsumerPool consumers)
specifier|public
name|void
name|setConsumers
parameter_list|(
name|MessageConsumerPool
name|consumers
parameter_list|)
block|{
name|this
operator|.
name|consumers
operator|=
name|consumers
expr_stmt|;
block|}
DECL|method|getConsumers ()
specifier|public
name|MessageConsumerPool
name|getConsumers
parameter_list|()
block|{
return|return
name|consumers
return|;
block|}
block|}
end_class

end_unit

