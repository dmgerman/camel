begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fop
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fop
operator|.
name|utils
operator|.
name|OutputFormatEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|FOPException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|FOUserAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|Fop
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|FopFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|pdf
operator|.
name|PDFEncryptionParams
import|;
end_import

begin_comment
comment|/**  * The Fop producer.  */
end_comment

begin_class
DECL|class|FopProducer
specifier|public
class|class
name|FopProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|fopFactory
specifier|private
specifier|final
name|FopFactory
name|fopFactory
decl_stmt|;
DECL|field|outputFormat
specifier|private
specifier|final
name|String
name|outputFormat
decl_stmt|;
DECL|method|FopProducer (FopEndpoint endpoint, FopFactory fopFactory, String outputFormat)
specifier|public
name|FopProducer
parameter_list|(
name|FopEndpoint
name|endpoint
parameter_list|,
name|FopFactory
name|fopFactory
parameter_list|,
name|String
name|outputFormat
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|fopFactory
operator|=
name|fopFactory
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|FOUserAgent
name|userAgent
init|=
name|fopFactory
operator|.
name|newFOUserAgent
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|setRenderParameters
argument_list|(
name|userAgent
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|setEncryptionParameters
argument_list|(
name|userAgent
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|String
name|outputFormat
init|=
name|getOutputFormat
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Source
name|src
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|StreamSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
name|transform
argument_list|(
name|userAgent
argument_list|,
name|outputFormat
argument_list|,
name|src
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// propagate headers
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|getOutputFormat (Exchange exchange)
specifier|private
name|String
name|getOutputFormat
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|headerOutputFormat
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|FopConstants
operator|.
name|CAMEL_FOP_OUTPUT_FORMAT
argument_list|,
name|this
operator|.
name|outputFormat
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerOutputFormat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"Missing output format"
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isOutputFormatDefined
argument_list|(
name|headerOutputFormat
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"The output format is not valid"
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
name|String
name|outputFormat
init|=
name|OutputFormatEnum
operator|.
name|valueOf
argument_list|(
name|headerOutputFormat
argument_list|)
operator|.
name|getFormatExtended
argument_list|()
decl_stmt|;
return|return
name|outputFormat
return|;
block|}
DECL|method|transform (FOUserAgent userAgent, String outputFormat, Source src)
specifier|private
name|OutputStream
name|transform
parameter_list|(
name|FOUserAgent
name|userAgent
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|Source
name|src
parameter_list|)
throws|throws
name|FOPException
throws|,
name|TransformerException
block|{
name|OutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Fop
name|fop
init|=
name|fopFactory
operator|.
name|newFop
argument_list|(
name|outputFormat
argument_list|,
name|userAgent
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|TransformerFactory
name|factory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|factory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|Result
name|res
init|=
operator|new
name|SAXResult
argument_list|(
name|fop
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|src
argument_list|,
name|res
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setEncryptionParameters (FOUserAgent userAgent, Map<String, Object> headers)
specifier|private
name|void
name|setEncryptionParameters
parameter_list|(
name|FOUserAgent
name|userAgent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|encryptionParameters
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|headers
argument_list|,
name|FopConstants
operator|.
name|CAMEL_FOP_ENCRYPT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|encryptionParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PDFEncryptionParams
name|encryptionParams
init|=
operator|new
name|PDFEncryptionParams
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|encryptionParams
argument_list|,
name|encryptionParameters
argument_list|)
expr_stmt|;
name|userAgent
operator|.
name|getRendererOptions
argument_list|()
operator|.
name|put
argument_list|(
literal|"encryption-params"
argument_list|,
name|encryptionParams
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRenderParameters (FOUserAgent userAgent, Map<String, Object> headers)
specifier|private
name|void
name|setRenderParameters
parameter_list|(
name|FOUserAgent
name|userAgent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|headers
argument_list|,
name|FopConstants
operator|.
name|CAMEL_FOP_RENDER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|userAgent
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isOutputFormatDefined (String test)
specifier|private
specifier|static
name|boolean
name|isOutputFormatDefined
parameter_list|(
name|String
name|test
parameter_list|)
block|{
for|for
control|(
name|OutputFormatEnum
name|c
range|:
name|OutputFormatEnum
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|test
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

