begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fop
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|DefaultConfigurationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|FopFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Represents a Fop endpoint.  */
end_comment

begin_class
DECL|class|FopEndpoint
specifier|public
class|class
name|FopEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|userConfigURL
specifier|private
name|String
name|userConfigURL
decl_stmt|;
DECL|field|fopFactory
specifier|private
name|FopFactory
name|fopFactory
decl_stmt|;
DECL|field|remaining
specifier|private
name|String
name|remaining
decl_stmt|;
DECL|method|FopEndpoint (String uri, FopComponent component, String remaining)
specifier|public
name|FopEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|FopComponent
name|component
parameter_list|,
name|String
name|remaining
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|FopProducer
argument_list|(
name|this
argument_list|,
name|fopFactory
argument_list|,
name|remaining
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Consumer not supported for FOP endpoint"
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getFopFactory ()
name|FopFactory
name|getFopFactory
parameter_list|()
block|{
return|return
name|fopFactory
return|;
block|}
DECL|method|setUserConfigURL (String userConfigURL)
specifier|public
name|void
name|setUserConfigURL
parameter_list|(
name|String
name|userConfigURL
parameter_list|)
block|{
name|this
operator|.
name|userConfigURL
operator|=
name|userConfigURL
expr_stmt|;
block|}
DECL|method|updateConfigurations (InputStream is, FopFactory fopFactory)
specifier|private
specifier|static
name|void
name|updateConfigurations
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|FopFactory
name|fopFactory
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ConfigurationException
block|{
name|DefaultConfigurationBuilder
name|cfgBuilder
init|=
operator|new
name|DefaultConfigurationBuilder
argument_list|()
decl_stmt|;
name|Configuration
name|cfg
init|=
name|cfgBuilder
operator|.
name|build
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|fopFactory
operator|.
name|setUserConfig
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|fopFactory
operator|==
literal|null
condition|)
block|{
name|fopFactory
operator|=
name|FopFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|userConfigURL
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|userConfigURL
argument_list|)
decl_stmt|;
name|updateConfigurations
argument_list|(
name|is
argument_list|,
name|fopFactory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

