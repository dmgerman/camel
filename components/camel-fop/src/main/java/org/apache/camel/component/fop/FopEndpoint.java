begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fop
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|fop
operator|.
name|apps
operator|.
name|FopFactory
import|;
end_import

begin_comment
comment|/**  * The fop component allows you to render a message into different output formats using Apache FOP.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.10.0"
argument_list|,
name|scheme
operator|=
literal|"fop"
argument_list|,
name|title
operator|=
literal|"FOP"
argument_list|,
name|syntax
operator|=
literal|"fop:outputType"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"transformation"
argument_list|)
DECL|class|FopEndpoint
specifier|public
class|class
name|FopEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|outputType
specifier|private
name|FopOutputType
name|outputType
decl_stmt|;
annotation|@
name|UriParam
DECL|field|userConfigURL
specifier|private
name|String
name|userConfigURL
decl_stmt|;
annotation|@
name|UriParam
DECL|field|fopFactory
specifier|private
name|FopFactory
name|fopFactory
decl_stmt|;
DECL|method|FopEndpoint (String uri, FopComponent component, FopOutputType outputType)
specifier|public
name|FopEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|FopComponent
name|component
parameter_list|,
name|FopOutputType
name|outputType
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputType
operator|=
name|outputType
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|FopProducer
argument_list|(
name|this
argument_list|,
name|fopFactory
argument_list|,
name|outputType
operator|.
name|getFormatExtended
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Consumer not supported for FOP endpoint"
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getOutputType ()
specifier|public
name|FopOutputType
name|getOutputType
parameter_list|()
block|{
return|return
name|outputType
return|;
block|}
comment|/**      * The primary output format is PDF but other output formats are also supported.      */
DECL|method|setOutputType (FopOutputType outputType)
specifier|public
name|void
name|setOutputType
parameter_list|(
name|FopOutputType
name|outputType
parameter_list|)
block|{
name|this
operator|.
name|outputType
operator|=
name|outputType
expr_stmt|;
block|}
DECL|method|getUserConfigURL ()
specifier|public
name|String
name|getUserConfigURL
parameter_list|()
block|{
return|return
name|userConfigURL
return|;
block|}
comment|/**      * The location of a configuration file which can be loaded from classpath or file system.      */
DECL|method|setUserConfigURL (String userConfigURL)
specifier|public
name|void
name|setUserConfigURL
parameter_list|(
name|String
name|userConfigURL
parameter_list|)
block|{
name|this
operator|.
name|userConfigURL
operator|=
name|userConfigURL
expr_stmt|;
block|}
DECL|method|getFopFactory ()
specifier|public
name|FopFactory
name|getFopFactory
parameter_list|()
block|{
return|return
name|fopFactory
return|;
block|}
comment|/**      * Allows to use a custom configured or implementation of org.apache.fop.apps.FopFactory.      */
DECL|method|setFopFactory (FopFactory fopFactory)
specifier|public
name|void
name|setFopFactory
parameter_list|(
name|FopFactory
name|fopFactory
parameter_list|)
block|{
name|this
operator|.
name|fopFactory
operator|=
name|fopFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|fopFactory
operator|==
literal|null
operator|&&
name|userConfigURL
operator|==
literal|null
condition|)
block|{
name|fopFactory
operator|=
name|FopFactory
operator|.
name|newInstance
argument_list|(
operator|new
name|URI
argument_list|(
literal|"./"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fopFactory
operator|!=
literal|null
operator|&&
name|userConfigURL
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|FopConfigException
argument_list|(
literal|"More than one configuration. "
operator|+
literal|"You can configure fop either by config file or by supplying FopFactory but not both."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|fopFactory
operator|==
literal|null
operator|&&
name|userConfigURL
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|userConfigURL
argument_list|)
decl_stmt|;
name|fopFactory
operator|=
name|FopFactory
operator|.
name|newInstance
argument_list|(
operator|new
name|URI
argument_list|(
name|userConfigURL
argument_list|)
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

