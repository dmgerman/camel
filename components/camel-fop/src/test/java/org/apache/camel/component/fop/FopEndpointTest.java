begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.fop
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|fop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FopEndpointTest
specifier|public
class|class
name|FopEndpointTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|generatePdfFromXslfoWithSpecificText ()
specifier|public
name|void
name|generatePdfFromXslfoWithSpecificText
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"fop:application/pdf"
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|FopHelper
operator|.
name|decorateTextWithXSLFO
argument_list|(
literal|"Test Content"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|PDDocument
name|document
init|=
name|getDocumentFrom
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|String
name|content
init|=
name|FopHelper
operator|.
name|extractTextFrom
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test Content"
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifyCustomUserConfigurationFile ()
specifier|public
name|void
name|specifyCustomUserConfigurationFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FopEndpoint
name|customConfiguredEndpoint
init|=
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"fop:application/pdf?userConfigURL=file:src/test/data/conf/testcfg.xml"
argument_list|,
name|FopEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|float
name|customSourceResolution
init|=
name|customConfiguredEndpoint
operator|.
name|getFopFactory
argument_list|()
operator|.
name|getSourceResolution
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|96.0
argument_list|,
name|customSourceResolution
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|specifyCustomUserConfigurationFileClasspath ()
specifier|public
name|void
name|specifyCustomUserConfigurationFileClasspath
parameter_list|()
throws|throws
name|Exception
block|{
name|FopEndpoint
name|customConfiguredEndpoint
init|=
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"fop:application/pdf?userConfigURL=myconf/testcfg.xml"
argument_list|,
name|FopEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|float
name|customSourceResolution
init|=
name|customConfiguredEndpoint
operator|.
name|getFopFactory
argument_list|()
operator|.
name|getSourceResolution
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|96.0
argument_list|,
name|customSourceResolution
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setPDFRenderingMetadataPerDocument ()
specifier|public
name|void
name|setPDFRenderingMetadataPerDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"fop:application/pdf"
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFop.Render.Creator"
argument_list|,
literal|"Test User"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|FopHelper
operator|.
name|decorateTextWithXSLFO
argument_list|(
literal|"Test Content"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|PDDocument
name|document
init|=
name|getDocumentFrom
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|String
name|creator
init|=
name|FopHelper
operator|.
name|getDocumentMetadataValue
argument_list|(
name|document
argument_list|,
name|COSName
operator|.
name|CREATOR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test User"
argument_list|,
name|creator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|encryptPdfWithUserPassword ()
specifier|public
name|void
name|encryptPdfWithUserPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"fop:application/pdf"
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"CamelFop.Encrypt.userPassword"
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|FopHelper
operator|.
name|decorateTextWithXSLFO
argument_list|(
literal|"Test Content"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|PDDocument
name|document
init|=
name|getDocumentFrom
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|document
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|overridePdfOutputFormatToPlainText ()
specifier|public
name|void
name|overridePdfOutputFormatToPlainText
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|defaultOutputFormat
init|=
literal|"application/pdf"
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|context
argument_list|()
operator|.
name|getEndpoint
argument_list|(
literal|"fop:"
operator|+
name|defaultOutputFormat
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|FopConstants
operator|.
name|CAMEL_FOP_OUTPUT_FORMAT
argument_list|,
name|org
operator|.
name|apache
operator|.
name|xmlgraphics
operator|.
name|util
operator|.
name|MimeConstants
operator|.
name|MIME_PLAIN_TEXT
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|FopHelper
operator|.
name|decorateTextWithXSLFO
argument_list|(
literal|"Test Content"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|plainText
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Test Content"
argument_list|,
name|plainText
argument_list|)
expr_stmt|;
block|}
DECL|method|getDocumentFrom (Exchange exchange)
specifier|private
name|PDDocument
name|getDocumentFrom
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|inputStream
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|PDDocument
operator|.
name|load
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
block|}
end_class

end_unit

