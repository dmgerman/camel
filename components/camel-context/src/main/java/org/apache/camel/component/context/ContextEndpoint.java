begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.context
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|context
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|DelegateEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * The context component allows to send/receive messages between Camel routes in a black box way.  *  * The context component allows you to create new Camel Components from a CamelContext with a number of  * routes which is then treated as a black box, allowing you to refer to the local endpoints within the component  * from other CamelContexts.  * It is similar to the Routebox component in idea, though the Context component tries to be really simple for end users;  * just a simple convention over configuration approach to refer to local endpoints inside the CamelContext Component.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"context"
argument_list|,
name|title
operator|=
literal|"Camel Context"
argument_list|,
name|syntax
operator|=
literal|"context:contextId:localEndpointUrl"
argument_list|,
name|label
operator|=
literal|"endpoint"
argument_list|)
DECL|class|ContextEndpoint
specifier|public
class|class
name|ContextEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|DelegateEndpoint
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|contextId
specifier|private
name|String
name|contextId
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|localEndpointUrl
specifier|private
name|String
name|localEndpointUrl
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|Endpoint
name|delegate
decl_stmt|;
DECL|method|ContextEndpoint (String endpointUri, Component component, Endpoint delegate)
specifier|public
name|ContextEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|Endpoint
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
DECL|method|getContextId ()
specifier|public
name|String
name|getContextId
parameter_list|()
block|{
return|return
name|contextId
return|;
block|}
comment|/**      * Is the ID you used to register the CamelContext into the Registry.      */
DECL|method|setContextId (String contextId)
specifier|public
name|void
name|setContextId
parameter_list|(
name|String
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
DECL|method|getLocalEndpointUrl ()
specifier|public
name|String
name|getLocalEndpointUrl
parameter_list|()
block|{
return|return
name|localEndpointUrl
return|;
block|}
comment|/**      * Can be a valid Camel URI evaluated within the black box CamelContext.      * Or it can be a logical name which is mapped to any local endpoints.      * For example if you locally have endpoints like direct:invoices and seda:purchaseOrders      * inside a CamelContext of id supplyChain, then you can just use the URIs supplyChain:invoices      * or supplyChain:purchaseOrders to omit the physical endpoint kind and use pure logical URIs.      */
DECL|method|setLocalEndpointUrl (String localEndpointUrl)
specifier|public
name|void
name|setLocalEndpointUrl
parameter_list|(
name|String
name|localEndpointUrl
parameter_list|)
block|{
name|this
operator|.
name|localEndpointUrl
operator|=
name|localEndpointUrl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|delegate
operator|.
name|createProducer
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|delegate
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isSingleton
argument_list|()
return|;
block|}
block|}
end_class

end_unit

