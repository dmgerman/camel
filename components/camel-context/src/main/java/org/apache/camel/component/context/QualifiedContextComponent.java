begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.context
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|context
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Supports the explicit and verbose URIs of the form<tt>context:camelContextId:someEndpoint</tt> to access  * a local endpoint inside an external {@link org.apache.camel.CamelContext}.  *<p/>  * Typically there's no need to use this level of verbosity, you can just use<tt>camelContextId:someEndpoint</tt>  */
end_comment

begin_class
DECL|class|QualifiedContextComponent
specifier|public
class|class
name|QualifiedContextComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QualifiedContextComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|QualifiedContextComponent ()
specifier|public
name|QualifiedContextComponent
parameter_list|()
block|{
name|super
argument_list|(
name|ContextEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|splitURI
index|[]
init|=
name|StringHelper
operator|.
name|splitOnCharacter
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitURI
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|String
name|contextId
init|=
name|splitURI
index|[
literal|0
index|]
decl_stmt|;
name|String
name|localEndpoint
init|=
name|splitURI
index|[
literal|1
index|]
decl_stmt|;
name|Component
name|component
init|=
name|getCamelContext
argument_list|()
operator|.
name|getComponent
argument_list|(
name|contextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting to create local endpoint: {} inside the component: {}"
argument_list|,
name|localEndpoint
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|component
operator|.
name|createEndpoint
argument_list|(
name|localEndpoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
comment|// throw the exception tell we cannot find an then endpoint from the given context
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
literal|"Cannot create a endpoint with uri"
operator|+
name|localEndpoint
operator|+
literal|" for the CamelContext Component "
operator|+
name|contextId
argument_list|)
throw|;
block|}
else|else
block|{
name|ContextEndpoint
name|answer
init|=
operator|new
name|ContextEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setContextId
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setLocalEndpointUrl
argument_list|(
name|localEndpoint
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
literal|"Cannot create the camel context component for context "
operator|+
name|contextId
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// the uri is wrong
throw|throw
operator|new
name|ResolveEndpointFailedException
argument_list|(
literal|"The uri "
operator|+
name|remaining
operator|+
literal|"from camel context component is wrong"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

