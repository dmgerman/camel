begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.springldap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|springldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|LdapTemplate
import|;
end_import

begin_comment
comment|/**  * Creates endpoints for the Spring LDAP component.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"spring-ldap"
argument_list|)
DECL|class|SpringLdapComponent
specifier|public
class|class
name|SpringLdapComponent
extends|extends
name|DefaultComponent
block|{
DECL|method|SpringLdapComponent ()
specifier|public
name|SpringLdapComponent
parameter_list|()
block|{     }
comment|/**      * creates a Spring LDAP endpoint      * @param remaining name of the Spring LDAP template bean to be used for the LDAP operation      * @param parameters key-value pairs to be set on @see org.apache.camel.component.springldap.SpringLdapEndpoint.      * Currently supported keys are operation and scope.      * 'operation' is defined in org.apache.camel.component.springldap.LdapOperation.      * 'scope' must be one of "object", "onelevel", or "subtree".      */
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
name|Registry
name|registry
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|LdapTemplate
name|ldapTemplate
init|=
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
name|remaining
argument_list|,
name|LdapTemplate
operator|.
name|class
argument_list|)
decl_stmt|;
name|Endpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
name|remaining
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
block|}
end_class

end_unit

