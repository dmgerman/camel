begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.springldap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|springldap
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|ldap
operator|.
name|core
operator|.
name|LdapTemplate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|SpringLdapEndpointTest
specifier|public
class|class
name|SpringLdapEndpointTest
block|{
DECL|field|ldapTemplate
specifier|private
name|LdapTemplate
name|ldapTemplate
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|LdapTemplate
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|testCreateConsumer ()
specifier|public
name|void
name|testCreateConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|createConsumer
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneLevelScope ()
specifier|public
name|void
name|testOneLevelScope
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setScope
argument_list|(
literal|"onelevel"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SearchControls
operator|.
name|ONELEVEL_SCOPE
argument_list|,
name|endpoint
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObjectScope ()
specifier|public
name|void
name|testObjectScope
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setScope
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SearchControls
operator|.
name|OBJECT_SCOPE
argument_list|,
name|endpoint
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubtreeScope ()
specifier|public
name|void
name|testSubtreeScope
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setScope
argument_list|(
literal|"subtree"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|,
name|endpoint
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|testUnsupportedScope ()
specifier|public
name|void
name|testUnsupportedScope
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setScope
argument_list|(
literal|"some other scope"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBindOperation ()
specifier|public
name|void
name|testBindOperation
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setOperation
argument_list|(
literal|"BinD"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LdapOperation
operator|.
name|BIND
argument_list|,
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearchOperation ()
specifier|public
name|void
name|testSearchOperation
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setOperation
argument_list|(
literal|"SeaRCH"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LdapOperation
operator|.
name|SEARCH
argument_list|,
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnbindOperation ()
specifier|public
name|void
name|testUnbindOperation
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setOperation
argument_list|(
literal|"UnBinD"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LdapOperation
operator|.
name|UNBIND
argument_list|,
name|endpoint
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|testUnsupportedOperation ()
specifier|public
name|void
name|testUnsupportedOperation
parameter_list|()
block|{
name|SpringLdapEndpoint
name|endpoint
init|=
operator|new
name|SpringLdapEndpoint
argument_list|(
literal|"some name"
argument_list|,
name|ldapTemplate
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setOperation
argument_list|(
literal|"BinDD"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

