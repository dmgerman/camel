begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.approval
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|approval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_comment
comment|/**  * Holds approvals resource data.  *  * @see<a href=  *      "https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_process_approvals.htm">  *      https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/dome_process_approvals.htm</a>  */
end_comment

begin_class
DECL|class|Approvals
specifier|public
specifier|final
class|class
name|Approvals
implements|implements
name|Serializable
block|{
comment|/**      * Information about approval tied to specific Salesforce object.      */
DECL|class|Info
specifier|public
specifier|static
specifier|final
class|class
name|Info
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|description
specifier|private
specifier|final
name|String
name|description
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|object
specifier|private
specifier|final
name|String
name|object
decl_stmt|;
DECL|field|sortOrder
specifier|private
specifier|final
name|int
name|sortOrder
decl_stmt|;
annotation|@
name|JsonCreator
DECL|method|Info (@sonPropertyR) final String id, @JsonProperty(R) final String description, @JsonProperty(R) final String name, @JsonProperty(R) final String object, @JsonProperty(R) final int sortOrder)
name|Info
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"id"
argument_list|)
specifier|final
name|String
name|id
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"description"
argument_list|)
specifier|final
name|String
name|description
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"name"
argument_list|)
specifier|final
name|String
name|name
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"object"
argument_list|)
specifier|final
name|String
name|object
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"sortOrder"
argument_list|)
specifier|final
name|int
name|sortOrder
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
name|this
operator|.
name|sortOrder
operator|=
name|sortOrder
expr_stmt|;
block|}
DECL|method|getDescription ()
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getObject ()
specifier|public
name|String
name|getObject
parameter_list|()
block|{
return|return
name|object
return|;
block|}
DECL|method|getSortOrder ()
specifier|public
name|int
name|getSortOrder
parameter_list|()
block|{
return|return
name|sortOrder
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buildy
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|"Id: "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", Name: "
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", Object: "
argument_list|)
operator|.
name|append
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", Description: "
argument_list|)
operator|.
name|append
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", SortOrder: "
argument_list|)
operator|.
name|append
argument_list|(
name|sortOrder
argument_list|)
expr_stmt|;
return|return
name|buildy
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|approvals
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Info
argument_list|>
argument_list|>
name|approvals
decl_stmt|;
annotation|@
name|JsonCreator
DECL|method|Approvals (@sonPropertyR) final Map<String, List<Info>> approvals)
name|Approvals
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"approvals"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Info
argument_list|>
argument_list|>
name|approvals
parameter_list|)
block|{
name|this
operator|.
name|approvals
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|approvals
argument_list|)
operator|.
name|orElse
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns approvals for specific Salesforce object type.      *      * @param object type      * @return approvals of specified type      */
DECL|method|approvalsFor (final String object)
specifier|public
name|List
argument_list|<
name|Info
argument_list|>
name|approvalsFor
parameter_list|(
specifier|final
name|String
name|object
parameter_list|)
block|{
return|return
name|approvals
operator|.
name|getOrDefault
argument_list|(
name|object
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
comment|/**      * Returns approvals by Salesforce object type. You might have approvals for      * "Account" and "Case" Salesforce objects, then the resulting map would      * hold a list of {@link Info} objects keyed by the object type, i.e.:      *      *<pre>      * Approvals approvals = ...;      * List<Info> accountApprovals = approvals.getApprovals("Account");      * List<Info> caseApprovals = approvals.getApprovals("Case");      *</pre>      *      * @return approval info by object type      */
DECL|method|getApprovals ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Info
argument_list|>
argument_list|>
name|getApprovals
parameter_list|()
block|{
return|return
name|approvals
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|approvals
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

