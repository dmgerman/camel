begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchOptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|RestError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|DefaultRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|DefaultComponentVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|OptionsGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultErrorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultErrorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Socks4Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|BasicAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|DigestAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_class
DECL|class|SalesforceComponentVerifier
specifier|public
class|class
name|SalesforceComponentVerifier
extends|extends
name|DefaultComponentVerifier
block|{
DECL|method|SalesforceComponentVerifier (SalesforceComponent component)
name|SalesforceComponentVerifier
parameter_list|(
name|SalesforceComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
literal|"salesforce"
argument_list|,
name|component
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// *********************************
comment|// Parameters validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyParameters (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// Validate mandatory component options, needed to be done here as these
comment|// options are not properly marked as mandatory in the catalog.
comment|//
comment|// Validation rules are borrowed from SalesforceLoginConfig's validate
comment|// method, which support 3 workflow:
comment|//
comment|// - OAuth Username/Password Flow
comment|// - OAuth Refresh Token Flow:
comment|// - OAuth JWT Flow
comment|//
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|PARAMETERS
argument_list|)
operator|.
name|errors
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresAny
argument_list|(
name|parameters
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
name|AuthenticationType
operator|.
name|USERNAME_PASSWORD
argument_list|)
operator|.
name|options
argument_list|(
literal|"clientId"
argument_list|,
literal|"clientSecret"
argument_list|,
literal|"userName"
argument_list|,
literal|"password"
argument_list|)
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
name|AuthenticationType
operator|.
name|REFRESH_TOKEN
argument_list|)
operator|.
name|options
argument_list|(
literal|"clientId"
argument_list|,
literal|"clientSecret"
argument_list|,
literal|"refreshToken"
argument_list|)
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
name|AuthenticationType
operator|.
name|JWT
argument_list|)
operator|.
name|options
argument_list|(
literal|"clientId"
argument_list|,
literal|"userName"
argument_list|,
literal|"keystore"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Validate using the catalog
name|super
operator|.
name|verifyParametersAgainstCatalog
argument_list|(
name|builder
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Connectivity validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyConnectivity (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyConnectivity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// Default is success
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|CONNECTIVITY
argument_list|)
decl_stmt|;
try|try
block|{
name|SalesforceEndpointConfig
name|configuration
init|=
operator|new
name|SalesforceEndpointConfig
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|configuration
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|SalesforceLoginConfig
name|loginConfig
init|=
operator|new
name|SalesforceLoginConfig
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|loginConfig
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// Create a dummy SslContextFactory which is needed by SalesforceHttpClient
comment|// or the underlying jetty client fails with a NPE
name|SSLContextParameters
name|contextParameters
init|=
operator|new
name|SSLContextParameters
argument_list|()
decl_stmt|;
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|sslContextFactory
operator|.
name|setSslContext
argument_list|(
name|contextParameters
operator|.
name|createSSLContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SalesforceHttpClient
name|httpClient
init|=
operator|new
name|SalesforceHttpClient
argument_list|(
name|sslContextFactory
argument_list|)
decl_stmt|;
name|httpClient
operator|.
name|setConnectTimeout
argument_list|(
name|SalesforceComponent
operator|.
name|CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
name|configureHttpProxy
argument_list|(
name|httpClient
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|SalesforceSession
name|session
init|=
operator|new
name|SalesforceSession
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|httpClient
argument_list|,
name|httpClient
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|loginConfig
argument_list|)
decl_stmt|;
name|DefaultRestClient
name|client
init|=
operator|new
name|DefaultRestClient
argument_list|(
name|httpClient
argument_list|,
name|configuration
operator|.
name|getApiVersion
argument_list|()
argument_list|,
name|configuration
operator|.
name|getFormat
argument_list|()
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|httpClient
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// For authentication check is is enough to use
name|session
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|getVersions
argument_list|(
parameter_list|(
name|response
parameter_list|,
name|exception
parameter_list|)
lambda|->
name|processSalesforceException
argument_list|(
name|builder
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|exception
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|session
operator|.
name|stop
argument_list|()
expr_stmt|;
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
name|httpClient
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchOptionException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withMissingOption
argument_list|(
name|e
operator|.
name|getOptionName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|processSalesforceException
argument_list|(
name|builder
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Helpers
comment|// *********************************
DECL|method|processSalesforceException (ResultBuilder builder, Optional<SalesforceException> exception)
specifier|private
name|void
name|processSalesforceException
parameter_list|(
name|ResultBuilder
name|builder
parameter_list|,
name|Optional
argument_list|<
name|SalesforceException
argument_list|>
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|ifPresent
argument_list|(
name|e
lambda|->
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|detail
argument_list|(
name|VerificationError
operator|.
name|HttpAttribute
operator|.
name|HTTP_CODE
argument_list|,
name|e
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RestError
name|error
range|:
name|e
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCode
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|GENERIC
argument_list|)
operator|.
name|description
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|parameterKeys
argument_list|(
name|error
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
literal|"salesforce_code"
argument_list|,
name|error
operator|.
name|getErrorCode
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|configureHttpProxy (SalesforceHttpClient httpClient, Map<String, Object> parameters)
specifier|private
name|void
name|configureHttpProxy
parameter_list|(
name|SalesforceHttpClient
name|httpClient
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|NoSuchOptionException
throws|,
name|URISyntaxException
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|httpProxyHost
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"httpProxyHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|Integer
argument_list|>
name|httpProxyPort
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"httpProxyPort"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|httpProxyUsername
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"httpProxyUsername"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|httpProxyPassword
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"httpProxyPassword"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpProxyHost
operator|.
name|isPresent
argument_list|()
operator|&&
name|httpProxyPort
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Origin
operator|.
name|Address
name|address
init|=
operator|new
name|Origin
operator|.
name|Address
argument_list|(
name|httpProxyHost
operator|.
name|get
argument_list|()
argument_list|,
name|httpProxyPort
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Boolean
name|isHttpProxySocks4
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"isHttpProxySocks4"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
literal|false
argument_list|)
decl_stmt|;
name|Boolean
name|isHttpProxySecure
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"isHttpProxySecure"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isHttpProxySocks4
condition|)
block|{
name|httpClient
operator|.
name|getProxyConfiguration
argument_list|()
operator|.
name|getProxies
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Socks4Proxy
argument_list|(
name|address
argument_list|,
name|isHttpProxySecure
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpClient
operator|.
name|getProxyConfiguration
argument_list|()
operator|.
name|getProxies
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|HttpProxy
argument_list|(
name|address
argument_list|,
name|isHttpProxySecure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|httpProxyUsername
operator|.
name|isPresent
argument_list|()
operator|&&
name|httpProxyPassword
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|Boolean
name|httpProxyUseDigestAuth
init|=
name|getOption
argument_list|(
name|parameters
argument_list|,
literal|"httpProxyUseDigestAuth"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
literal|false
argument_list|)
decl_stmt|;
name|String
name|httpProxyAuthUri
init|=
name|getMandatoryOption
argument_list|(
name|parameters
argument_list|,
literal|"httpProxyAuthUri"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|httpProxyRealm
init|=
name|getMandatoryOption
argument_list|(
name|parameters
argument_list|,
literal|"httpProxyRealm"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpProxyUseDigestAuth
condition|)
block|{
name|httpClient
operator|.
name|getAuthenticationStore
argument_list|()
operator|.
name|addAuthentication
argument_list|(
operator|new
name|DigestAuthentication
argument_list|(
operator|new
name|URI
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
operator|.
name|get
argument_list|()
argument_list|,
name|httpProxyPassword
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|httpClient
operator|.
name|getAuthenticationStore
argument_list|()
operator|.
name|addAuthentication
argument_list|(
operator|new
name|BasicAuthentication
argument_list|(
operator|new
name|URI
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
operator|.
name|get
argument_list|()
argument_list|,
name|httpProxyPassword
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

