begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamAlias
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamOmitField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractDescribedSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|Version
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|notEmpty
import|;
end_import

begin_comment
comment|/**  * Builder for Composite API batch request. Composite API is available from Salesforce API version 34.0 onwards its a  * way to combine multiple requests in a batch and submit them in one HTTP request. This object help to build the  * payload of the batch request. Most requests that are supported in the Composite batch API the helper builder methods  * are provided. For batch requests that do not have their corresponding helper builder method, use  * {@link #addGeneric(Method, String)} or {@link #addGeneric(Method, String, Object)} methods. To build the batch use:  *<blockquote>  *  *<pre>  * {@code  * SObjectBatch batch = new SObjectBatch("37.0");  *  * final Account account = new Account();  * account.setName("NewAccountName");  * account.setIndustry(Account_IndustryEnum.ENVIRONMENTAL);  * batch.addCreate(account);  *  * batch.addDelete("Account", "001D000000K0fXOIAZ");  *  * batch.addGet("Account", "0010Y00000Arwt6QAB", "Name", "BillingPostalCode");  * }  *  *</pre>  *  *</blockquote>  *  * This will build a batch of three operations, one to create new Account, one to delete an Account, and one to get two  * fields from an Account.  */
end_comment

begin_class
annotation|@
name|XStreamAlias
argument_list|(
literal|"batch"
argument_list|)
DECL|class|SObjectBatch
specifier|public
specifier|final
class|class
name|SObjectBatch
implements|implements
name|Serializable
block|{
DECL|field|SOBJECT_TYPE_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_TYPE_PARAM
init|=
literal|"type"
decl_stmt|;
DECL|enum|Method
specifier|public
enum|enum
name|Method
block|{
DECL|enumConstant|DELETE
DECL|enumConstant|GET
DECL|enumConstant|PATCH
DECL|enumConstant|POST
name|DELETE
block|,
name|GET
block|,
name|PATCH
block|,
name|POST
block|}
DECL|field|MAX_BATCH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BATCH
init|=
literal|25
decl_stmt|;
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|XStreamOmitField
DECL|field|apiPrefix
specifier|private
specifier|final
name|String
name|apiPrefix
decl_stmt|;
DECL|field|batchRequests
specifier|private
specifier|final
name|List
argument_list|<
name|BatchRequest
argument_list|>
name|batchRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|XStreamOmitField
DECL|field|version
specifier|private
specifier|final
name|Version
name|version
decl_stmt|;
comment|/**      * Create new batch request. You must specify the API version of the batch request. The API version cannot be newer      * than the version configured in the Salesforce Camel component. Some of the batched requests are available only      * from certain Salesforce API versions, when this is the case it is noted in the documentation of the builder      * method, if uncertain consult the Salesforce API documentation.      *      * @param apiVersion      *            API version for the batch request      */
DECL|method|SObjectBatch (final String apiVersion)
specifier|public
name|SObjectBatch
parameter_list|(
specifier|final
name|String
name|apiVersion
parameter_list|)
block|{
specifier|final
name|String
name|givenApiVersion
init|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|apiVersion
argument_list|,
literal|"apiVersion"
argument_list|)
decl_stmt|;
name|version
operator|=
name|Version
operator|.
name|create
argument_list|(
name|apiVersion
argument_list|)
expr_stmt|;
name|version
operator|.
name|requireAtLeast
argument_list|(
literal|34
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|apiPrefix
operator|=
literal|"v"
operator|+
name|givenApiVersion
expr_stmt|;
block|}
DECL|method|composeFieldsParameter (final String... fields)
specifier|static
name|String
name|composeFieldsParameter
parameter_list|(
specifier|final
name|String
modifier|...
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
literal|"?fields="
operator|+
name|Arrays
operator|.
name|stream
argument_list|(
name|fields
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
comment|/**      * Add create SObject to the batch request.      *      * @param data      *            object to create      *      * @return this batch builder      */
DECL|method|addCreate (final AbstractDescribedSObjectBase data)
specifier|public
name|SObjectBatch
name|addCreate
parameter_list|(
specifier|final
name|AbstractDescribedSObjectBase
name|data
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|POST
argument_list|,
name|apiPrefix
operator|+
literal|"/sobjects/"
operator|+
name|typeOf
argument_list|(
name|data
argument_list|)
operator|+
literal|"/"
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add delete SObject with identifier to the batch request.      *      * @param type      *            type of SObject      * @param id      *            identifier of the object      * @return this batch builder      */
DECL|method|addDelete (final String type, final String id)
specifier|public
name|SObjectBatch
name|addDelete
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|DELETE
argument_list|,
name|rowBaseUrl
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Generic way to add requests to batch. Given URL starts from the version, so in order to retrieve SObject specify      * just {@code /sobjects/Account/identifier} which results in      * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the leading slash.      *      * @param method      *            HTTP method      * @param url      *            URL starting from the version      * @return this batch builder      */
DECL|method|addGeneric (final Method method, final String url)
specifier|public
name|SObjectBatch
name|addGeneric
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|String
name|url
parameter_list|)
block|{
name|addGeneric
argument_list|(
name|method
argument_list|,
name|url
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Generic way to add requests to batch with {@code richInput} payload. Given URL starts from the version, so in      * order to update SObject specify just {@code /sobjects/Account/identifier} which results in      * {@code /services/data/v37.0/sobjects/Account/identifier}. Note the leading slash.      *      * @param method      *            HTTP method      * @param url      *            URL starting from the version      * @param richInput      *            body of the request, to be placed in richInput      * @return this batch builder      */
DECL|method|addGeneric (final Method method, final String url, final Object richInput)
specifier|public
name|SObjectBatch
name|addGeneric
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|Object
name|richInput
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|method
argument_list|,
name|apiPrefix
operator|+
name|url
argument_list|,
name|richInput
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add field retrieval of an SObject by identifier to the batch request.      *      * @param type      *            type of SObject      * @param id      *            identifier of SObject      * @param fields      *            to return      * @return this batch builder      */
DECL|method|addGet (final String type, final String id, final String... fields)
specifier|public
name|SObjectBatch
name|addGet
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
modifier|...
name|fields
parameter_list|)
block|{
specifier|final
name|String
name|fieldsParameter
init|=
name|composeFieldsParameter
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
name|rowBaseUrl
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
operator|+
name|fieldsParameter
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add field retrieval of an SObject by external identifier to the batch request.      *      * @param type      *            type of SObject      * @param fieldName      *            external identifier field name      * @param fieldValue      *            external identifier field value      * @param fields      *            to return      * @return this batch builder      */
DECL|method|addGetByExternalId (final String type, final String fieldName, final String fieldValue)
specifier|public
name|SObjectBatch
name|addGetByExternalId
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|String
name|fieldValue
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
name|rowBaseUrl
argument_list|(
name|type
argument_list|,
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add retrieval of related SObject fields by identifier. For example {@code Account} has a relation to      * {@code CreatedBy}. To fetch fields from that related object ({@code User} SObject) use:<blockquote>      *      *<pre>      * {@code batch.addGetRelated("Account", identifier, "CreatedBy", "Name", "Id")}      *</pre>      *      *</blockquote>      *      * @param type      *            type of SObject      * @param id      *            identifier of SObject      * @param relation      *            name of the related SObject field      * @param fields      *            to return      * @return this batch builder      */
DECL|method|addGetRelated (final String type, final String id, final String relation, final String... fields)
specifier|public
name|SObjectBatch
name|addGetRelated
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
name|relation
parameter_list|,
specifier|final
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|version
operator|.
name|requireAtLeast
argument_list|(
literal|36
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|fieldsParameter
init|=
name|composeFieldsParameter
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
name|rowBaseUrl
argument_list|(
name|type
argument_list|,
name|id
argument_list|)
operator|+
literal|"/"
operator|+
name|notEmpty
argument_list|(
name|relation
argument_list|,
literal|"relation"
argument_list|)
operator|+
name|fieldsParameter
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add retrieval of limits to the batch.      *      * @return this batch builder      */
DECL|method|addLimits ()
specifier|public
name|SObjectBatch
name|addLimits
parameter_list|()
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
name|apiPrefix
operator|+
literal|"/limits/"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add retrieval of SObject records by query to the batch.      *      * @param query      *            SOQL query to execute      * @return this batch builder      */
DECL|method|addQuery (final String query)
specifier|public
name|SObjectBatch
name|addQuery
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
name|apiPrefix
operator|+
literal|"/query/?q="
operator|+
name|notEmpty
argument_list|(
name|query
argument_list|,
literal|"query"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add retrieval of all SObject records by query to the batch.      *      * @param query      *            SOQL query to execute      * @return this batch builder      */
DECL|method|addQueryAll (final String query)
specifier|public
name|SObjectBatch
name|addQueryAll
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
name|apiPrefix
operator|+
literal|"/queryAll/?q="
operator|+
name|notEmpty
argument_list|(
name|query
argument_list|,
literal|"query"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add retrieval of SObject records by search to the batch.      *      * @param query      *            SOSL search to execute      * @return this batch builder      */
DECL|method|addSearch (final String searchString)
specifier|public
name|SObjectBatch
name|addSearch
parameter_list|(
specifier|final
name|String
name|searchString
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|GET
argument_list|,
name|apiPrefix
operator|+
literal|"/search/?q="
operator|+
name|notEmpty
argument_list|(
name|searchString
argument_list|,
literal|"searchString"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add update of SObject record to the batch. The given {@code data} parameter must contain only the fields that      * need updating and must not contain the {@code Id} field. So set any fields to {@code null} that you do not want      * changed along with {@code Id} field.      *      * @param type      *            type of SObject      * @param id      *            identifier of SObject      * @param data      *            SObject with fields to change      * @return this batch builder      */
DECL|method|addUpdate (final String type, final String id, final AbstractSObjectBase data)
specifier|public
name|SObjectBatch
name|addUpdate
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|AbstractSObjectBase
name|data
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|PATCH
argument_list|,
name|rowBaseUrl
argument_list|(
name|type
argument_list|,
name|notEmpty
argument_list|(
name|id
argument_list|,
literal|"data.Id"
argument_list|)
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add update of SObject record by external identifier to the batch. The given {@code data} parameter must contain      * only the fields that need updating and must not contain the {@code Id} field. So set any fields to {@code null}      * that you do not want changed along with {@code Id} field.      *      * @param type      *            type of SObject      * @param fieldName      *            name of the field holding the external identifier      * @param id      *            external identifier value      * @param data      *            SObject with fields to change      * @return this batch builder      */
DECL|method|addUpdateByExternalId (final String type, final String fieldName, final String fieldValue, final AbstractSObjectBase data)
specifier|public
name|SObjectBatch
name|addUpdateByExternalId
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|String
name|fieldValue
parameter_list|,
specifier|final
name|AbstractSObjectBase
name|data
parameter_list|)
block|{
name|addBatchRequest
argument_list|(
operator|new
name|BatchRequest
argument_list|(
name|Method
operator|.
name|PATCH
argument_list|,
name|rowBaseUrl
argument_list|(
name|type
argument_list|,
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Add insert or update of SObject record by external identifier to the batch. The given {@code data} parameter must      * contain only the fields that need updating and must not contain the {@code Id} field. So set any fields to      * {@code null} that you do not want changed along with {@code Id} field.      *      * @param type      *            type of SObject      * @param fieldName      *            name of the field holding the external identifier      * @param id      *            external identifier value      * @param data      *            SObject with fields to change      * @return this batch builder      */
DECL|method|addUpsertByExternalId (final String type, final String fieldName, final String fieldValue, final AbstractSObjectBase data)
specifier|public
name|SObjectBatch
name|addUpsertByExternalId
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|String
name|fieldValue
parameter_list|,
specifier|final
name|AbstractSObjectBase
name|data
parameter_list|)
block|{
return|return
name|addUpdateByExternalId
argument_list|(
name|type
argument_list|,
name|fieldName
argument_list|,
name|fieldValue
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Fetches batch requests contained in this batch.      *      * @return all requests      */
DECL|method|getBatchRequests ()
specifier|public
name|List
argument_list|<
name|BatchRequest
argument_list|>
name|getBatchRequests
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|batchRequests
argument_list|)
return|;
block|}
comment|/**      * Version of Salesforce API for this batch request.      *      * @return the version      */
annotation|@
name|JsonIgnore
DECL|method|getVersion ()
specifier|public
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
comment|/**      * Returns all object types nested within this batch, needed for serialization.      *      * @return all object types in this batch      */
DECL|method|objectTypes ()
specifier|public
name|Class
index|[]
name|objectTypes
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|types
init|=
name|Stream
operator|.
name|concat
argument_list|(
name|Stream
operator|.
name|of
argument_list|(
name|SObjectBatch
operator|.
name|class
argument_list|,
name|BatchRequest
operator|.
name|class
argument_list|)
argument_list|,
name|batchRequests
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|BatchRequest
operator|::
name|getRichInput
argument_list|)
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|map
argument_list|(
name|Object
operator|::
name|getClass
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|types
operator|.
name|toArray
argument_list|(
operator|new
name|Class
index|[
name|types
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|addBatchRequest (final BatchRequest batchRequest)
name|void
name|addBatchRequest
parameter_list|(
specifier|final
name|BatchRequest
name|batchRequest
parameter_list|)
block|{
if|if
condition|(
name|batchRequests
operator|.
name|size
argument_list|()
operator|>=
name|MAX_BATCH
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You can add up to "
operator|+
name|MAX_BATCH
operator|+
literal|" requests in a single batch. Split your requests across multiple batches."
argument_list|)
throw|;
block|}
name|batchRequests
operator|.
name|add
argument_list|(
name|batchRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|rowBaseUrl (final String type, final String id)
name|String
name|rowBaseUrl
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
return|return
name|apiPrefix
operator|+
literal|"/sobjects/"
operator|+
name|notEmpty
argument_list|(
name|type
argument_list|,
name|SOBJECT_TYPE_PARAM
argument_list|)
operator|+
literal|"/"
operator|+
name|notEmpty
argument_list|(
name|id
argument_list|,
literal|"id"
argument_list|)
return|;
block|}
DECL|method|rowBaseUrl (final String type, final String fieldName, final String fieldValue)
name|String
name|rowBaseUrl
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|String
name|fieldValue
parameter_list|)
block|{
try|try
block|{
return|return
name|apiPrefix
operator|+
literal|"/sobjects/"
operator|+
name|notEmpty
argument_list|(
name|type
argument_list|,
name|SOBJECT_TYPE_PARAM
argument_list|)
operator|+
literal|"/"
operator|+
name|notEmpty
argument_list|(
name|fieldName
argument_list|,
literal|"fieldName"
argument_list|)
operator|+
literal|"/"
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|notEmpty
argument_list|(
name|fieldValue
argument_list|,
literal|"fieldValue"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|typeOf (final AbstractDescribedSObjectBase data)
name|String
name|typeOf
parameter_list|(
specifier|final
name|AbstractDescribedSObjectBase
name|data
parameter_list|)
block|{
return|return
name|notNull
argument_list|(
name|data
argument_list|,
literal|"data"
argument_list|)
operator|.
name|description
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

