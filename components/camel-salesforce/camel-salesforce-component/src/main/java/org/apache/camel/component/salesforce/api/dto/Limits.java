begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|annotation
operator|.
name|JsonDeserialize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|TypeReferences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|Limits
operator|.
name|LimitsDeserializer
import|;
end_import

begin_comment
comment|/**  * Data given by the `Limits` resource on Salesforce.  *  * @see<a href= "https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm">  *      https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm</a>  */
end_comment

begin_class
annotation|@
name|JsonDeserialize
argument_list|(
name|using
operator|=
name|LimitsDeserializer
operator|.
name|class
argument_list|)
DECL|class|Limits
specifier|public
specifier|final
class|class
name|Limits
implements|implements
name|Serializable
block|{
DECL|class|LimitsDeserializer
specifier|public
specifier|static
specifier|final
class|class
name|LimitsDeserializer
extends|extends
name|JsonDeserializer
block|{
annotation|@
name|Override
DECL|method|deserialize (final JsonParser parser, final DeserializationContext context)
specifier|public
name|Object
name|deserialize
parameter_list|(
specifier|final
name|JsonParser
name|parser
parameter_list|,
specifier|final
name|DeserializationContext
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonProcessingException
block|{
specifier|final
name|Map
argument_list|<
name|Operation
argument_list|,
name|Usage
argument_list|>
name|usages
init|=
name|parser
operator|.
name|readValueAs
argument_list|(
name|TypeReferences
operator|.
name|USAGES_TYPE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Limits
argument_list|(
name|usages
argument_list|)
return|;
block|}
block|}
DECL|enum|Operation
specifier|public
enum|enum
name|Operation
block|{
DECL|enumConstant|ConcurrentAsyncGetReportInstances
name|ConcurrentAsyncGetReportInstances
block|,
DECL|enumConstant|ConcurrentSyncReportRuns
name|ConcurrentSyncReportRuns
block|,
DECL|enumConstant|DailyApiRequests
name|DailyApiRequests
block|,
DECL|enumConstant|DailyAsyncApexExecutions
name|DailyAsyncApexExecutions
block|,
DECL|enumConstant|DailyBulkApiRequests
name|DailyBulkApiRequests
block|,
DECL|enumConstant|DailyDurableGenericStreamingApiEvents
name|DailyDurableGenericStreamingApiEvents
block|,
DECL|enumConstant|DailyDurableStreamingApiEvents
name|DailyDurableStreamingApiEvents
block|,
DECL|enumConstant|DailyGenericStreamingApiEvents
name|DailyGenericStreamingApiEvents
block|,
DECL|enumConstant|DailyStreamingApiEvents
name|DailyStreamingApiEvents
block|,
DECL|enumConstant|DailyWorkflowEmails
name|DailyWorkflowEmails
block|,
DECL|enumConstant|DataStorageMB
name|DataStorageMB
block|,
DECL|enumConstant|DurableStreamingApiConcurrentClients
name|DurableStreamingApiConcurrentClients
block|,
DECL|enumConstant|FileStorageMB
name|FileStorageMB
block|,
DECL|enumConstant|HourlyAsyncReportRuns
name|HourlyAsyncReportRuns
block|,
DECL|enumConstant|HourlyDashboardRefreshes
name|HourlyDashboardRefreshes
block|,
DECL|enumConstant|HourlyDashboardResults
name|HourlyDashboardResults
block|,
DECL|enumConstant|HourlyDashboardStatuses
name|HourlyDashboardStatuses
block|,
DECL|enumConstant|HourlyODataCallout
name|HourlyODataCallout
block|,
DECL|enumConstant|HourlySyncReportRuns
name|HourlySyncReportRuns
block|,
DECL|enumConstant|HourlyTimeBasedWorkflow
name|HourlyTimeBasedWorkflow
block|,
DECL|enumConstant|MassEmail
name|MassEmail
block|,
DECL|enumConstant|SingleEmail
name|SingleEmail
block|,
DECL|enumConstant|StreamingApiConcurrentClients
name|StreamingApiConcurrentClients
block|}
comment|/**      * Encapsulates usage limits for single operation.      */
DECL|class|Usage
specifier|public
specifier|static
specifier|final
class|class
name|Usage
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|UNKNOWN_VAL
specifier|private
specifier|static
specifier|final
name|int
name|UNKNOWN_VAL
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|UNKNOWN
specifier|public
specifier|static
specifier|final
name|Usage
name|UNKNOWN
init|=
operator|new
name|Usage
argument_list|(
name|UNKNOWN_VAL
argument_list|,
name|UNKNOWN_VAL
argument_list|)
decl_stmt|;
DECL|field|max
specifier|private
specifier|final
name|int
name|max
decl_stmt|;
DECL|field|remaining
specifier|private
specifier|final
name|int
name|remaining
decl_stmt|;
annotation|@
name|JsonCreator
DECL|method|Usage (@sonPropertyR) final int max, @JsonProperty(R) final int remaining)
name|Usage
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"Max"
argument_list|)
specifier|final
name|int
name|max
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"Remaining"
argument_list|)
specifier|final
name|int
name|remaining
parameter_list|)
block|{
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|remaining
operator|=
name|remaining
expr_stmt|;
block|}
comment|/** Maximum allowed by the limit */
DECL|method|getMax ()
specifier|public
name|int
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
comment|/** Remaining invocations allowed */
DECL|method|getRemaining ()
specifier|public
name|int
name|getRemaining
parameter_list|()
block|{
return|return
name|remaining
return|;
block|}
DECL|method|isUnknown ()
specifier|public
name|boolean
name|isUnknown
parameter_list|()
block|{
return|return
name|max
operator|==
name|UNKNOWN_VAL
operator|&&
name|remaining
operator|==
name|UNKNOWN_VAL
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|max
operator|==
name|UNKNOWN_VAL
operator|&&
name|remaining
operator|==
name|UNKNOWN_VAL
condition|)
block|{
return|return
literal|"Undefined"
return|;
block|}
return|return
literal|"Max: "
operator|+
name|max
operator|+
literal|", Remaining: "
operator|+
name|remaining
return|;
block|}
block|}
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|UNDEFINED
specifier|private
specifier|static
specifier|final
name|Usage
name|UNDEFINED
init|=
operator|new
name|Usage
argument_list|(
name|Usage
operator|.
name|UNKNOWN_VAL
argument_list|,
name|Usage
operator|.
name|UNKNOWN_VAL
argument_list|)
decl_stmt|;
DECL|field|usages
specifier|private
specifier|final
name|Map
argument_list|<
name|Operation
argument_list|,
name|Usage
argument_list|>
name|usages
decl_stmt|;
DECL|method|Limits (final Map<Operation, Usage> usages)
specifier|public
name|Limits
parameter_list|(
specifier|final
name|Map
argument_list|<
name|Operation
argument_list|,
name|Usage
argument_list|>
name|usages
parameter_list|)
block|{
name|this
operator|.
name|usages
operator|=
name|usages
expr_stmt|;
block|}
DECL|method|forOperation (final Operation operation)
specifier|public
name|Usage
name|forOperation
parameter_list|(
specifier|final
name|Operation
name|operation
parameter_list|)
block|{
return|return
name|usages
operator|.
name|getOrDefault
argument_list|(
name|operation
argument_list|,
name|UNDEFINED
argument_list|)
return|;
block|}
comment|/** Concurrent REST API requests for results of asynchronous report runs */
DECL|method|getConcurrentAsyncGetReportInstances ()
specifier|public
name|Usage
name|getConcurrentAsyncGetReportInstances
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|ConcurrentAsyncGetReportInstances
argument_list|)
return|;
block|}
comment|/** Concurrent synchronous report runs via REST API */
DECL|method|getConcurrentSyncReportRuns ()
specifier|public
name|Usage
name|getConcurrentSyncReportRuns
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|ConcurrentSyncReportRuns
argument_list|)
return|;
block|}
comment|/** Daily API calls */
DECL|method|getDailyApiRequests ()
specifier|public
name|Usage
name|getDailyApiRequests
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyApiRequests
argument_list|)
return|;
block|}
comment|/** Daily Batch Apex and future method executions */
DECL|method|getDailyAsyncApexExecutions ()
specifier|public
name|Usage
name|getDailyAsyncApexExecutions
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyAsyncApexExecutions
argument_list|)
return|;
block|}
comment|/** Daily Bulk API calls */
DECL|method|getDailyBulkApiRequests ()
specifier|public
name|Usage
name|getDailyBulkApiRequests
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyBulkApiRequests
argument_list|)
return|;
block|}
comment|/**      * Daily durable generic streaming events (if generic streaming is enabled for your organization)      */
DECL|method|getDailyDurableGenericStreamingApiEvents ()
specifier|public
name|Usage
name|getDailyDurableGenericStreamingApiEvents
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyDurableGenericStreamingApiEvents
argument_list|)
return|;
block|}
comment|/**      * Daily durable streaming events (if generic streaming is enabled for your organization)      */
DECL|method|getDailyDurableStreamingApiEvents ()
specifier|public
name|Usage
name|getDailyDurableStreamingApiEvents
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyDurableStreamingApiEvents
argument_list|)
return|;
block|}
comment|/**      * Daily generic streaming events (if generic streaming is enabled for your organization)      */
DECL|method|getDailyGenericStreamingApiEvents ()
specifier|public
name|Usage
name|getDailyGenericStreamingApiEvents
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyGenericStreamingApiEvents
argument_list|)
return|;
block|}
comment|/** Daily Streaming API events */
DECL|method|getDailyStreamingApiEvents ()
specifier|public
name|Usage
name|getDailyStreamingApiEvents
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyStreamingApiEvents
argument_list|)
return|;
block|}
comment|/** Daily workflow emails */
DECL|method|getDailyWorkflowEmails ()
specifier|public
name|Usage
name|getDailyWorkflowEmails
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DailyWorkflowEmails
argument_list|)
return|;
block|}
comment|/** Data storage (MB) */
DECL|method|getDataStorageMB ()
specifier|public
name|Usage
name|getDataStorageMB
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DataStorageMB
argument_list|)
return|;
block|}
comment|/** Streaming API concurrent clients */
DECL|method|getDurableStreamingApiConcurrentClients ()
specifier|public
name|Usage
name|getDurableStreamingApiConcurrentClients
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|DurableStreamingApiConcurrentClients
argument_list|)
return|;
block|}
comment|/** File storage (MB) */
DECL|method|getFileStorageMB ()
specifier|public
name|Usage
name|getFileStorageMB
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|FileStorageMB
argument_list|)
return|;
block|}
comment|/** Hourly asynchronous report runs via REST API */
DECL|method|getHourlyAsyncReportRuns ()
specifier|public
name|Usage
name|getHourlyAsyncReportRuns
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|HourlyAsyncReportRuns
argument_list|)
return|;
block|}
comment|/** Hourly dashboard refreshes via REST API */
DECL|method|getHourlyDashboardRefreshes ()
specifier|public
name|Usage
name|getHourlyDashboardRefreshes
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|HourlyDashboardRefreshes
argument_list|)
return|;
block|}
comment|/** Hourly REST API requests for dashboard results */
DECL|method|getHourlyDashboardResults ()
specifier|public
name|Usage
name|getHourlyDashboardResults
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|HourlyDashboardResults
argument_list|)
return|;
block|}
comment|/** Hourly dashboard status requests via REST API */
DECL|method|getHourlyDashboardStatuses ()
specifier|public
name|Usage
name|getHourlyDashboardStatuses
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|HourlyDashboardStatuses
argument_list|)
return|;
block|}
comment|/** Hourly OData callouts */
DECL|method|getHourlyODataCallout ()
specifier|public
name|Usage
name|getHourlyODataCallout
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|HourlyODataCallout
argument_list|)
return|;
block|}
comment|/** Hourly synchronous report runs via REST API */
DECL|method|getHourlySyncReportRuns ()
specifier|public
name|Usage
name|getHourlySyncReportRuns
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|HourlySyncReportRuns
argument_list|)
return|;
block|}
comment|/** Hourly workflow time triggers */
DECL|method|getHourlyTimeBasedWorkflow ()
specifier|public
name|Usage
name|getHourlyTimeBasedWorkflow
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|HourlyTimeBasedWorkflow
argument_list|)
return|;
block|}
comment|/**      * Daily number of mass emails that are sent to external email addresses by using Apex or Force.com APIs      */
DECL|method|getMassEmail ()
specifier|public
name|Usage
name|getMassEmail
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|MassEmail
argument_list|)
return|;
block|}
comment|/**      * Daily number of single emails that are sent to external email addresses by using Apex or Force.com APIs      */
DECL|method|getSingleEmail ()
specifier|public
name|Usage
name|getSingleEmail
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|SingleEmail
argument_list|)
return|;
block|}
comment|/** Durable streaming API concurrent clients */
DECL|method|getStreamingApiConcurrentClients ()
specifier|public
name|Usage
name|getStreamingApiConcurrentClients
parameter_list|()
block|{
return|return
name|forOperation
argument_list|(
name|Operation
operator|.
name|StreamingApiConcurrentClients
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Limits: "
operator|+
name|usages
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

