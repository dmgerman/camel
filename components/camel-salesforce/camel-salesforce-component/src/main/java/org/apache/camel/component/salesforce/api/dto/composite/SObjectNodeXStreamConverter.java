begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|ConversionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|MarshallingContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|UnmarshallingContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamWriter
import|;
end_import

begin_class
DECL|class|SObjectNodeXStreamConverter
specifier|public
specifier|final
class|class
name|SObjectNodeXStreamConverter
implements|implements
name|Converter
block|{
annotation|@
name|Override
DECL|method|canConvert (final Class type)
specifier|public
name|boolean
name|canConvert
parameter_list|(
specifier|final
name|Class
name|type
parameter_list|)
block|{
return|return
name|SObjectNode
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|marshal (final Object source, final HierarchicalStreamWriter writer, final MarshallingContext context)
specifier|public
name|void
name|marshal
parameter_list|(
specifier|final
name|Object
name|source
parameter_list|,
specifier|final
name|HierarchicalStreamWriter
name|writer
parameter_list|,
specifier|final
name|MarshallingContext
name|context
parameter_list|)
block|{
specifier|final
name|SObjectNode
name|node
init|=
operator|(
name|SObjectNode
operator|)
name|source
decl_stmt|;
name|writer
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|node
operator|.
name|object
operator|.
name|getAttributes
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addAttribute
argument_list|(
literal|"referenceId"
argument_list|,
name|node
operator|.
name|object
operator|.
name|getAttributes
argument_list|()
operator|.
name|getReferenceId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|convertAnother
argument_list|(
name|node
operator|.
name|object
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SObjectNode
argument_list|>
argument_list|>
name|e
range|:
name|node
operator|.
name|records
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|startNode
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|convertAnother
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|endNode
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unmarshal (final HierarchicalStreamReader reader, final UnmarshallingContext context)
specifier|public
name|Object
name|unmarshal
parameter_list|(
specifier|final
name|HierarchicalStreamReader
name|reader
parameter_list|,
specifier|final
name|UnmarshallingContext
name|context
parameter_list|)
block|{
throw|throw
operator|new
name|ConversionException
argument_list|(
literal|"Unmarshalling is not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

