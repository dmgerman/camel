begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|PayloadFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|DefaultRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
operator|.
name|*
import|;
end_import

begin_class
DECL|class|AbstractRestProcessor
specifier|public
specifier|abstract
class|class
name|AbstractRestProcessor
extends|extends
name|AbstractSalesforceProcessor
block|{
DECL|field|RESPONSE_CLASS
specifier|protected
specifier|static
specifier|final
name|String
name|RESPONSE_CLASS
init|=
name|AbstractRestProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".responseClass"
decl_stmt|;
DECL|field|restClient
specifier|private
name|RestClient
name|restClient
decl_stmt|;
DECL|field|classMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classMap
decl_stmt|;
DECL|method|AbstractRestProcessor (SalesforceEndpoint endpoint)
specifier|public
name|AbstractRestProcessor
parameter_list|(
name|SalesforceEndpoint
name|endpoint
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
specifier|final
name|PayloadFormat
name|payloadFormat
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getFormat
argument_list|()
decl_stmt|;
name|this
operator|.
name|restClient
operator|=
operator|new
name|DefaultRestClient
argument_list|(
name|httpClient
argument_list|,
name|endpointConfigMap
operator|.
name|get
argument_list|(
name|API_VERSION
argument_list|)
argument_list|,
name|payloadFormat
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|this
operator|.
name|classMap
operator|=
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getClassMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
specifier|final
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
comment|// pre-process request message
try|try
block|{
name|processRequest
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|SalesforceException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// call Salesforce asynchronously
try|try
block|{
comment|// call Operation using REST client
switch|switch
condition|(
name|operationName
condition|)
block|{
case|case
name|GET_VERSIONS
case|:
name|processGetVersions
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_RESOURCES
case|:
name|processGetResources
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_GLOBAL_OBJECTS
case|:
name|processGetGlobalObjects
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_BASIC_INFO
case|:
name|processGetBasicInfo
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_DESCRIPTION
case|:
name|processGetDescription
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_SOBJECT
case|:
name|processGetSobject
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATE_SOBJECT
case|:
name|processCreateSobject
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE_SOBJECT
case|:
name|processUpdateSobject
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE_SOBJECT
case|:
name|processDeleteSobject
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_SOBJECT_WITH_ID
case|:
name|processGetSobjectWithId
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPSERT_SOBJECT
case|:
name|processUpsertSobject
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE_SOBJECT_WITH_ID
case|:
name|processDeleteSobjectWithId
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_BLOB_FIELD
case|:
name|processGetBlobField
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY
case|:
name|processQuery
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUERY_MORE
case|:
name|processQueryMore
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|SEARCH
case|:
name|processSearch
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SalesforceException
argument_list|(
literal|"Unknow operation name: "
operator|+
name|operationName
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error processing %s: [%s] \"%s\""
argument_list|,
name|operationName
argument_list|,
name|e
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected Error processing %s: \"%s\""
argument_list|,
name|operationName
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// continue routing asynchronously
return|return
literal|false
return|;
block|}
DECL|method|processGetVersions (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetVersions
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|restClient
operator|.
name|getVersions
argument_list|(
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
comment|// process response entity and create out message
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetResources (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetResources
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|restClient
operator|.
name|getResources
argument_list|(
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetGlobalObjects (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetGlobalObjects
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|restClient
operator|.
name|getGlobalObjects
argument_list|(
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetBasicInfo (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetBasicInfo
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
init|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
name|restClient
operator|.
name|getBasicInfo
argument_list|(
name|sObjectName
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetDescription (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetDescription
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|restClient
operator|.
name|getDescription
argument_list|(
name|sObjectName
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetSobject (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetSobject
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
name|String
name|sObjectIdValue
decl_stmt|;
comment|// determine parameters from input AbstractSObject
specifier|final
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|sObjectIdValue
operator|=
name|sObjectBase
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|sObjectIdValue
operator|=
name|getParameter
argument_list|(
name|SOBJECT_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|sObjectId
init|=
name|sObjectIdValue
decl_stmt|;
comment|// use sObject name to load class
name|setResponseClass
argument_list|(
name|exchange
argument_list|,
name|sObjectName
argument_list|)
expr_stmt|;
comment|// get optional field list
name|String
name|fieldsValue
init|=
name|getParameter
argument_list|(
name|SOBJECT_FIELDS
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|IS_OPTIONAL
argument_list|)
decl_stmt|;
name|String
index|[]
name|fields
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fieldsValue
operator|!=
literal|null
condition|)
block|{
name|fields
operator|=
name|fieldsValue
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|restClient
operator|.
name|getSObject
argument_list|(
name|sObjectName
argument_list|,
name|sObjectId
argument_list|,
name|fields
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|restoreFields
argument_list|(
name|exchange
argument_list|,
name|sObjectBase
argument_list|,
name|sObjectId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processCreateSobject (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processCreateSobject
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
comment|// determine parameters from input AbstractSObject
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|restClient
operator|.
name|createSObject
argument_list|(
name|sObjectName
argument_list|,
name|getRequestStream
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processUpdateSobject (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processUpdateSobject
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
comment|// determine parameters from input AbstractSObject
specifier|final
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|sObjectId
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
comment|// remember the sObject Id
name|sObjectId
operator|=
name|sObjectBase
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|// clear base object fields, which cannot be updated
name|sObjectBase
operator|.
name|clearBaseFields
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|sObjectId
operator|=
name|getParameter
argument_list|(
name|SOBJECT_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|finalsObjectId
init|=
name|sObjectId
decl_stmt|;
name|restClient
operator|.
name|updateSObject
argument_list|(
name|sObjectName
argument_list|,
name|sObjectId
argument_list|,
name|getRequestStream
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|restoreFields
argument_list|(
name|exchange
argument_list|,
name|sObjectBase
argument_list|,
name|finalsObjectId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processDeleteSobject (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processDeleteSobject
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
comment|// determine parameters from input AbstractSObject
specifier|final
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|sObjectIdValue
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|sObjectIdValue
operator|=
name|sObjectBase
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|sObjectIdValue
operator|=
name|getParameter
argument_list|(
name|SOBJECT_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|sObjectId
init|=
name|sObjectIdValue
decl_stmt|;
name|restClient
operator|.
name|deleteSObject
argument_list|(
name|sObjectName
argument_list|,
name|sObjectId
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|restoreFields
argument_list|(
name|exchange
argument_list|,
name|sObjectBase
argument_list|,
name|sObjectId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetSobjectWithId (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetSobjectWithId
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
name|Object
name|oldValue
init|=
literal|null
decl_stmt|;
name|String
name|sObjectExtIdValue
decl_stmt|;
specifier|final
name|String
name|sObjectExtIdName
init|=
name|getParameter
argument_list|(
name|SOBJECT_EXT_ID_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
comment|// determine parameters from input AbstractSObject
specifier|final
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|getAndClearPropertyValue
argument_list|(
name|sObjectBase
argument_list|,
name|sObjectExtIdName
argument_list|)
expr_stmt|;
name|sObjectExtIdValue
operator|=
name|oldValue
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|sObjectExtIdValue
operator|=
name|getParameter
argument_list|(
name|SOBJECT_EXT_ID_VALUE
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
comment|// use sObject name to load class
name|setResponseClass
argument_list|(
name|exchange
argument_list|,
name|sObjectName
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|finalOldValue
init|=
name|oldValue
decl_stmt|;
name|restClient
operator|.
name|getSObjectWithId
argument_list|(
name|sObjectName
argument_list|,
name|sObjectExtIdName
argument_list|,
name|sObjectExtIdValue
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|restoreFields
argument_list|(
name|exchange
argument_list|,
name|sObjectBase
argument_list|,
literal|null
argument_list|,
name|sObjectExtIdName
argument_list|,
name|finalOldValue
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processUpsertSobject (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processUpsertSobject
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
name|String
name|sObjectExtIdValue
decl_stmt|;
specifier|final
name|String
name|sObjectExtIdName
init|=
name|getParameter
argument_list|(
name|SOBJECT_EXT_ID_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
comment|// determine parameters from input AbstractSObject
name|Object
name|oldValue
init|=
literal|null
decl_stmt|;
specifier|final
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|getAndClearPropertyValue
argument_list|(
name|sObjectBase
argument_list|,
name|sObjectExtIdName
argument_list|)
expr_stmt|;
name|sObjectExtIdValue
operator|=
name|oldValue
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// clear base object fields, which cannot be updated
name|sObjectBase
operator|.
name|clearBaseFields
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|sObjectExtIdValue
operator|=
name|getParameter
argument_list|(
name|SOBJECT_EXT_ID_VALUE
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|finalOldValue
init|=
name|oldValue
decl_stmt|;
name|restClient
operator|.
name|upsertSObject
argument_list|(
name|sObjectName
argument_list|,
name|sObjectExtIdName
argument_list|,
name|sObjectExtIdValue
argument_list|,
name|getRequestStream
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|restoreFields
argument_list|(
name|exchange
argument_list|,
name|sObjectBase
argument_list|,
literal|null
argument_list|,
name|sObjectExtIdName
argument_list|,
name|finalOldValue
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processDeleteSobjectWithId (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processDeleteSobjectWithId
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
specifier|final
name|String
name|sObjectExtIdName
init|=
name|getParameter
argument_list|(
name|SOBJECT_EXT_ID_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
comment|// determine parameters from input AbstractSObject
name|Object
name|oldValue
init|=
literal|null
decl_stmt|;
specifier|final
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|sObjectExtIdValue
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|oldValue
operator|=
name|getAndClearPropertyValue
argument_list|(
name|sObjectBase
argument_list|,
name|sObjectExtIdName
argument_list|)
expr_stmt|;
name|sObjectExtIdValue
operator|=
name|oldValue
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|sObjectExtIdValue
operator|=
name|getParameter
argument_list|(
name|SOBJECT_EXT_ID_VALUE
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Object
name|finalOldValue
init|=
name|oldValue
decl_stmt|;
name|restClient
operator|.
name|deleteSObjectWithId
argument_list|(
name|sObjectName
argument_list|,
name|sObjectExtIdName
argument_list|,
name|sObjectExtIdValue
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|restoreFields
argument_list|(
name|exchange
argument_list|,
name|sObjectBase
argument_list|,
literal|null
argument_list|,
name|sObjectExtIdName
argument_list|,
name|finalOldValue
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetBlobField (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetBlobField
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|sObjectName
decl_stmt|;
comment|// get blob field name
specifier|final
name|String
name|sObjectBlobFieldName
init|=
name|getParameter
argument_list|(
name|SOBJECT_BLOB_FIELD_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
comment|// determine parameters from input AbstractSObject
specifier|final
name|AbstractSObjectBase
name|sObjectBase
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|sObjectIdValue
decl_stmt|;
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
name|sObjectName
operator|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|sObjectIdValue
operator|=
name|sObjectBase
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sObjectName
operator|=
name|getParameter
argument_list|(
name|SOBJECT_NAME
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|sObjectIdValue
operator|=
name|getParameter
argument_list|(
name|SOBJECT_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|sObjectId
init|=
name|sObjectIdValue
decl_stmt|;
name|restClient
operator|.
name|getBlobField
argument_list|(
name|sObjectName
argument_list|,
name|sObjectId
argument_list|,
name|sObjectBlobFieldName
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|restoreFields
argument_list|(
name|exchange
argument_list|,
name|sObjectBase
argument_list|,
name|sObjectId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processQuery (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processQuery
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
specifier|final
name|String
name|sObjectQuery
init|=
name|getParameter
argument_list|(
name|SOBJECT_QUERY
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
comment|// use sObject name to load class
name|setResponseClass
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|restClient
operator|.
name|query
argument_list|(
name|sObjectQuery
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processQueryMore (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processQueryMore
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
comment|// reuse SOBJECT_QUERY parameter name for nextRecordsUrl
specifier|final
name|String
name|nextRecordsUrl
init|=
name|getParameter
argument_list|(
name|SOBJECT_QUERY
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
comment|// use custom response class property
name|setResponseClass
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|restClient
operator|.
name|queryMore
argument_list|(
name|nextRecordsUrl
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processSearch (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processSearch
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
specifier|final
name|String
name|sObjectSearch
init|=
name|getParameter
argument_list|(
name|SOBJECT_SEARCH
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
name|restClient
operator|.
name|search
argument_list|(
name|sObjectSearch
argument_list|,
operator|new
name|RestClient
operator|.
name|ResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|restoreFields (Exchange exchange, AbstractSObjectBase sObjectBase, String sObjectId, String sObjectExtIdName, Object oldValue)
specifier|private
name|void
name|restoreFields
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AbstractSObjectBase
name|sObjectBase
parameter_list|,
name|String
name|sObjectId
parameter_list|,
name|String
name|sObjectExtIdName
parameter_list|,
name|Object
name|oldValue
parameter_list|)
block|{
comment|// restore fields
if|if
condition|(
name|sObjectBase
operator|!=
literal|null
condition|)
block|{
comment|// restore the Id if it was cleared
if|if
condition|(
name|sObjectId
operator|!=
literal|null
condition|)
block|{
name|sObjectBase
operator|.
name|setId
argument_list|(
name|sObjectId
argument_list|)
expr_stmt|;
block|}
comment|// restore the external id if it was cleared
if|if
condition|(
name|sObjectExtIdName
operator|!=
literal|null
operator|&&
name|oldValue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|setPropertyValue
argument_list|(
name|sObjectBase
argument_list|,
name|sObjectExtIdName
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
comment|// YES, the exchange may fail if the property cannot be reset!!!
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setPropertyValue (AbstractSObjectBase sObjectBase, String name, Object value)
specifier|private
name|void
name|setPropertyValue
parameter_list|(
name|AbstractSObjectBase
name|sObjectBase
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SalesforceException
block|{
try|try
block|{
comment|// set the value with the set method
name|Method
name|setMethod
init|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"set"
operator|+
name|name
argument_list|,
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|sObjectBase
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SObject %s does not have a field %s"
argument_list|,
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error setting value %s.%s"
argument_list|,
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error accessing value %s.%s"
argument_list|,
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getAndClearPropertyValue (AbstractSObjectBase sObjectBase, String propertyName)
specifier|private
name|Object
name|getAndClearPropertyValue
parameter_list|(
name|AbstractSObjectBase
name|sObjectBase
parameter_list|,
name|String
name|propertyName
parameter_list|)
throws|throws
name|SalesforceException
block|{
try|try
block|{
comment|// obtain the value using the get method
name|Method
name|getMethod
init|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"get"
operator|+
name|propertyName
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|getMethod
operator|.
name|invoke
argument_list|(
name|sObjectBase
argument_list|)
decl_stmt|;
comment|// clear the value with the set method
name|Method
name|setMethod
init|=
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"set"
operator|+
name|propertyName
argument_list|,
name|getMethod
operator|.
name|getReturnType
argument_list|()
argument_list|)
decl_stmt|;
name|setMethod
operator|.
name|invoke
argument_list|(
name|sObjectBase
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SObject %s does not have a field %s"
argument_list|,
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|propertyName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error getting/setting value %s.%s"
argument_list|,
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|propertyName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error accessing value %s.%s"
argument_list|,
name|sObjectBase
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|propertyName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// pre-process request message
DECL|method|processRequest (Exchange exchange)
specifier|protected
specifier|abstract
name|void
name|processRequest
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|SalesforceException
function_decl|;
comment|// get request stream from In message
DECL|method|getRequestStream (Exchange exchange)
specifier|protected
specifier|abstract
name|InputStream
name|getRequestStream
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|SalesforceException
function_decl|;
DECL|method|setResponseClass (Exchange exchange, String sObjectName)
specifier|private
name|void
name|setResponseClass
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|sObjectName
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|sObjectClass
decl_stmt|;
if|if
condition|(
name|sObjectName
operator|!=
literal|null
condition|)
block|{
comment|// lookup class from class map
name|sObjectClass
operator|=
name|classMap
operator|.
name|get
argument_list|(
name|sObjectName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|sObjectClass
condition|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No class found for SObject %s"
argument_list|,
name|sObjectName
argument_list|)
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// use custom response class property
specifier|final
name|String
name|className
init|=
name|getParameter
argument_list|(
name|SOBJECT_CLASS
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
decl_stmt|;
try|try
block|{
name|sObjectClass
operator|=
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"SObject class not found %s, %s"
argument_list|,
name|className
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|exchange
operator|.
name|setProperty
argument_list|(
name|RESPONSE_CLASS
argument_list|,
name|sObjectClass
argument_list|)
expr_stmt|;
block|}
comment|// process response entity and set out message in exchange
DECL|method|processResponse (Exchange exchange, InputStream responseEntity, SalesforceException ex, AsyncCallback callback)
specifier|protected
specifier|abstract
name|void
name|processResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|responseEntity
parameter_list|,
name|SalesforceException
name|ex
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
function_decl|;
block|}
end_class

end_unit

