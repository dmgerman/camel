begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|AbstractReportResultsBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|AggregateColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|AsyncReportResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|DetailColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|GroupingColumnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|GroupingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|GroupingValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportExtendedMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportFactWithDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportStatusEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|SummaryValue
import|;
end_import

begin_comment
comment|/**  * Salesforce report results to<code>List&lt;List&lt;String&gt;&gt;</code>converter.  */
end_comment

begin_class
annotation|@
name|Converter
argument_list|(
name|loader
operator|=
literal|true
argument_list|)
DECL|class|SalesforceReportResultsToListConverter
specifier|public
specifier|final
class|class
name|SalesforceReportResultsToListConverter
block|{
DECL|field|INCLUDE_DETAILS
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_DETAILS
init|=
literal|"CamelSalesforceIncludeDetails"
decl_stmt|;
DECL|field|INCLUDE_HEADERS
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_HEADERS
init|=
literal|"CamelSalesforceIncludeHeaders"
decl_stmt|;
DECL|field|INCLUDE_SUMMARY
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDE_SUMMARY
init|=
literal|"CamelSalesforceIncludeSummary"
decl_stmt|;
DECL|field|ROW_COUNT
specifier|private
specifier|static
specifier|final
name|String
name|ROW_COUNT
init|=
literal|"RowCount"
decl_stmt|;
DECL|field|EMPTY_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_VALUE
init|=
literal|""
decl_stmt|;
DECL|field|EMPTY_STRING_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|EMPTY_STRING_LIST
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|method|SalesforceReportResultsToListConverter ()
specifier|private
name|SalesforceReportResultsToListConverter
parameter_list|()
block|{     }
annotation|@
name|Converter
DECL|method|convertToList (final AbstractReportResultsBase reportResults, final Exchange exchange)
specifier|public
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|convertToList
parameter_list|(
specifier|final
name|AbstractReportResultsBase
name|reportResults
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reportResults
operator|instanceof
name|AsyncReportResults
condition|)
block|{
name|AsyncReportResults
name|asyncReportResults
init|=
operator|(
name|AsyncReportResults
operator|)
name|reportResults
decl_stmt|;
specifier|final
name|ReportStatusEnum
name|status
init|=
name|asyncReportResults
operator|.
name|getAttributes
argument_list|()
operator|.
name|getStatus
argument_list|()
decl_stmt|;
comment|// only successfully completed async report results have data rows
if|if
condition|(
name|status
operator|!=
name|ReportStatusEnum
operator|.
name|Success
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid asynchronous report results status "
operator|+
name|status
argument_list|)
throw|;
block|}
block|}
switch|switch
condition|(
name|reportResults
operator|.
name|getReportMetadata
argument_list|()
operator|.
name|getReportFormat
argument_list|()
condition|)
block|{
case|case
name|TABULAR
case|:
name|results
operator|=
name|convertTabularResults
argument_list|(
name|reportResults
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUMMARY
case|:
name|results
operator|=
name|convertSummaryResults
argument_list|(
name|reportResults
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|MATRIX
case|:
name|results
operator|=
name|convertMatrixResults
argument_list|(
name|reportResults
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// ignore
block|}
return|return
name|results
return|;
block|}
DECL|method|convertTabularResults (final AbstractReportResultsBase reportResults, final Exchange exchange)
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|convertTabularResults
parameter_list|(
specifier|final
name|AbstractReportResultsBase
name|reportResults
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ReportMetadata
name|reportMetadata
init|=
name|reportResults
operator|.
name|getReportMetadata
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|detailColumns
init|=
name|reportMetadata
operator|.
name|getDetailColumns
argument_list|()
decl_stmt|;
specifier|final
name|ReportExtendedMetadata
name|reportExtendedMetadata
init|=
name|reportResults
operator|.
name|getReportExtendedMetadata
argument_list|()
decl_stmt|;
specifier|final
name|ReportFactWithDetails
name|factWithDetails
init|=
name|reportResults
operator|.
name|getFactMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"T!T"
argument_list|)
decl_stmt|;
comment|// include detail rows?
specifier|final
name|String
index|[]
name|aggregates
init|=
name|reportMetadata
operator|.
name|getAggregates
argument_list|()
decl_stmt|;
if|if
condition|(
name|reportResults
operator|.
name|getHasDetailRows
argument_list|()
operator|&&
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_DETAILS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
specifier|final
name|int
name|rowLength
init|=
name|detailColumns
operator|.
name|length
decl_stmt|;
comment|// include detail headers?
if|if
condition|(
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_HEADERS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowLength
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|addColumnHeaders
argument_list|(
name|headers
argument_list|,
name|reportExtendedMetadata
operator|.
name|getDetailColumnInfo
argument_list|()
argument_list|,
name|detailColumns
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ReportRow
index|[]
name|reportRows
init|=
name|factWithDetails
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|result
operator|.
name|ensureCapacity
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|+
name|reportRows
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ReportRow
name|reportRow
range|:
name|reportRows
control|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowLength
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|addRowValues
argument_list|(
name|row
argument_list|,
name|reportRow
operator|.
name|getDataCells
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// include summary values?
if|if
condition|(
name|aggregates
operator|.
name|length
operator|>
literal|0
operator|&&
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_SUMMARY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
name|addSummaryRows
argument_list|(
name|result
argument_list|,
name|detailColumns
argument_list|,
literal|null
argument_list|,
name|aggregates
argument_list|,
name|factWithDetails
operator|.
name|getAggregates
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|aggregates
operator|.
name|length
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|rowLength
init|=
name|aggregates
operator|.
name|length
decl_stmt|;
comment|// include summary headers?
if|if
condition|(
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_HEADERS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowLength
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|addColumnHeaders
argument_list|(
name|headers
argument_list|,
name|reportExtendedMetadata
operator|.
name|getAggregateColumnInfo
argument_list|()
argument_list|,
name|aggregates
argument_list|)
expr_stmt|;
block|}
comment|// add summary values
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowLength
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|addRowValues
argument_list|(
name|row
argument_list|,
name|factWithDetails
operator|.
name|getAggregates
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertSummaryResults (final AbstractReportResultsBase reportResults, Exchange exchange)
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|convertSummaryResults
parameter_list|(
specifier|final
name|AbstractReportResultsBase
name|reportResults
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ReportMetadata
name|reportMetadata
init|=
name|reportResults
operator|.
name|getReportMetadata
argument_list|()
decl_stmt|;
specifier|final
name|ReportExtendedMetadata
name|reportExtendedMetadata
init|=
name|reportResults
operator|.
name|getReportExtendedMetadata
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|aggregates
init|=
name|reportMetadata
operator|.
name|getAggregates
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|includeDetails
init|=
name|reportResults
operator|.
name|getHasDetailRows
argument_list|()
operator|&&
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_DETAILS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|includeSummary
init|=
name|aggregates
operator|.
name|length
operator|>
literal|0
operator|&&
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_SUMMARY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
comment|// column list, including grouping columns and details if required
specifier|final
name|ArrayList
argument_list|<
name|DetailColumnInfo
argument_list|>
name|columnInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|columnNames
init|=
name|getResultColumns
argument_list|(
name|columnInfos
argument_list|,
name|reportMetadata
argument_list|,
name|reportExtendedMetadata
argument_list|,
name|includeDetails
argument_list|,
name|includeSummary
argument_list|)
decl_stmt|;
comment|// include detail headers?
if|if
condition|(
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_HEADERS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
name|addColumnHeaders
argument_list|(
name|result
argument_list|,
name|columnInfos
argument_list|)
expr_stmt|;
block|}
comment|// process down groups
for|for
control|(
name|GroupingValue
name|groupingValue
range|:
name|reportResults
operator|.
name|getGroupingsDown
argument_list|()
operator|.
name|getGroupings
argument_list|()
control|)
block|{
name|addSummaryGroupValues
argument_list|(
name|result
argument_list|,
name|reportResults
argument_list|,
name|columnNames
argument_list|,
name|groupingValue
argument_list|,
name|EMPTY_STRING_LIST
argument_list|,
name|includeDetails
argument_list|,
name|includeSummary
argument_list|)
expr_stmt|;
block|}
comment|// add grand total
if|if
condition|(
name|includeSummary
condition|)
block|{
specifier|final
name|ReportFactWithDetails
name|grandTotal
init|=
name|reportResults
operator|.
name|getFactMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"T!T"
argument_list|)
decl_stmt|;
name|addSummaryValues
argument_list|(
name|result
argument_list|,
name|includeDetails
argument_list|,
name|columnNames
argument_list|,
name|EMPTY_STRING_LIST
argument_list|,
name|aggregates
argument_list|,
name|grandTotal
operator|.
name|getAggregates
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|convertMatrixResults (final AbstractReportResultsBase reportResults, Exchange exchange)
specifier|private
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|convertMatrixResults
parameter_list|(
specifier|final
name|AbstractReportResultsBase
name|reportResults
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ReportMetadata
name|reportMetadata
init|=
name|reportResults
operator|.
name|getReportMetadata
argument_list|()
decl_stmt|;
specifier|final
name|ReportExtendedMetadata
name|reportExtendedMetadata
init|=
name|reportResults
operator|.
name|getReportExtendedMetadata
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|aggregates
init|=
name|reportMetadata
operator|.
name|getAggregates
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|includeDetails
init|=
name|reportResults
operator|.
name|getHasDetailRows
argument_list|()
operator|&&
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_DETAILS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|includeSummary
init|=
name|aggregates
operator|.
name|length
operator|>
literal|0
operator|&&
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_SUMMARY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
comment|// column list, including grouping columns and details if required
specifier|final
name|ArrayList
argument_list|<
name|DetailColumnInfo
argument_list|>
name|columnInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|columnNames
init|=
name|getResultColumns
argument_list|(
name|columnInfos
argument_list|,
name|reportMetadata
argument_list|,
name|reportExtendedMetadata
argument_list|,
name|includeDetails
argument_list|,
name|includeSummary
argument_list|)
decl_stmt|;
comment|// include detail headers?
if|if
condition|(
name|getOption
argument_list|(
name|exchange
argument_list|,
name|INCLUDE_HEADERS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
condition|)
block|{
name|addColumnHeaders
argument_list|(
name|result
argument_list|,
name|columnInfos
argument_list|)
expr_stmt|;
block|}
comment|// process down groups
specifier|final
name|GroupingValue
index|[]
name|groupingsDown
init|=
name|reportResults
operator|.
name|getGroupingsDown
argument_list|()
operator|.
name|getGroupings
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupingValue
name|groupingValue
range|:
name|groupingsDown
control|)
block|{
name|addMatrixGroupValues
argument_list|(
name|result
argument_list|,
name|reportResults
argument_list|,
name|columnNames
argument_list|,
name|groupingValue
argument_list|,
name|EMPTY_STRING_LIST
argument_list|,
name|includeDetails
argument_list|,
name|includeSummary
argument_list|,
name|EMPTY_VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// add grand total
if|if
condition|(
name|includeSummary
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ReportFactWithDetails
argument_list|>
name|factMap
init|=
name|reportResults
operator|.
name|getFactMap
argument_list|()
decl_stmt|;
comment|// first add summary for across groups
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|downGroupsPrefix
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|groupingsDown
operator|.
name|length
argument_list|,
name|EMPTY_VALUE
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|GroupingValue
name|acrossGrouping
range|:
name|reportResults
operator|.
name|getGroupingsAcross
argument_list|()
operator|.
name|getGroupings
argument_list|()
control|)
block|{
name|addAcrossGroupSummaryValues
argument_list|(
name|result
argument_list|,
name|reportMetadata
argument_list|,
name|includeDetails
argument_list|,
name|columnNames
argument_list|,
name|factMap
argument_list|,
name|downGroupsPrefix
argument_list|,
name|acrossGrouping
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ReportFactWithDetails
name|grandTotal
init|=
name|factMap
operator|.
name|get
argument_list|(
literal|"T!T"
argument_list|)
decl_stmt|;
name|addSummaryValues
argument_list|(
name|result
argument_list|,
name|includeDetails
argument_list|,
name|columnNames
argument_list|,
name|EMPTY_STRING_LIST
argument_list|,
name|reportResults
operator|.
name|getReportMetadata
argument_list|()
operator|.
name|getAggregates
argument_list|()
argument_list|,
name|grandTotal
operator|.
name|getAggregates
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|addAcrossGroupSummaryValues (ArrayList<List<String>> result, ReportMetadata reportMetadata, boolean includeDetails, String[] columnNames, Map<String, ReportFactWithDetails> factMap, List<String> downGroupsPrefix, GroupingValue acrossGrouping)
specifier|private
specifier|static
name|void
name|addAcrossGroupSummaryValues
parameter_list|(
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
parameter_list|,
name|ReportMetadata
name|reportMetadata
parameter_list|,
name|boolean
name|includeDetails
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ReportFactWithDetails
argument_list|>
name|factMap
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|downGroupsPrefix
parameter_list|,
name|GroupingValue
name|acrossGrouping
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|newDownGroupsPrefix
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|downGroupsPrefix
argument_list|)
decl_stmt|;
name|newDownGroupsPrefix
operator|.
name|add
argument_list|(
name|acrossGrouping
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|addSummaryValues
argument_list|(
name|result
argument_list|,
name|includeDetails
argument_list|,
name|columnNames
argument_list|,
name|newDownGroupsPrefix
argument_list|,
name|reportMetadata
operator|.
name|getAggregates
argument_list|()
argument_list|,
name|factMap
operator|.
name|get
argument_list|(
literal|"T!"
operator|+
name|acrossGrouping
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getAggregates
argument_list|()
argument_list|)
expr_stmt|;
comment|// process across subgroups
for|for
control|(
name|GroupingValue
name|subGroup
range|:
name|acrossGrouping
operator|.
name|getGroupings
argument_list|()
control|)
block|{
name|addAcrossGroupSummaryValues
argument_list|(
name|result
argument_list|,
name|reportMetadata
argument_list|,
name|includeDetails
argument_list|,
name|columnNames
argument_list|,
name|factMap
argument_list|,
name|newDownGroupsPrefix
argument_list|,
name|subGroup
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addMatrixGroupValues (ArrayList<List<String>> result, AbstractReportResultsBase reportResults, String[] columnNames, GroupingValue groupingValue, List<String> rowPrefix, boolean includeDetails, boolean includeSummary, String keyPrefix, boolean downGroup)
specifier|private
specifier|static
name|void
name|addMatrixGroupValues
parameter_list|(
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
parameter_list|,
name|AbstractReportResultsBase
name|reportResults
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|GroupingValue
name|groupingValue
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rowPrefix
parameter_list|,
name|boolean
name|includeDetails
parameter_list|,
name|boolean
name|includeSummary
parameter_list|,
name|String
name|keyPrefix
parameter_list|,
name|boolean
name|downGroup
parameter_list|)
block|{
specifier|final
name|String
name|groupKey
init|=
name|groupingValue
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|newKeyPrefix
init|=
name|keyPrefix
operator|+
name|groupKey
decl_stmt|;
comment|// group values prefix
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|newPrefix
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowPrefix
argument_list|)
decl_stmt|;
name|newPrefix
operator|.
name|add
argument_list|(
name|groupingValue
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|GroupingValue
index|[]
name|groupings
init|=
name|groupingValue
operator|.
name|getGroupings
argument_list|()
decl_stmt|;
comment|// has subgroups?
if|if
condition|(
name|groupings
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|GroupingValue
name|subGroup
range|:
name|groupings
control|)
block|{
name|addMatrixGroupValues
argument_list|(
name|result
argument_list|,
name|reportResults
argument_list|,
name|columnNames
argument_list|,
name|subGroup
argument_list|,
name|newPrefix
argument_list|,
name|includeDetails
argument_list|,
name|includeSummary
argument_list|,
name|newKeyPrefix
operator|+
literal|"_"
argument_list|,
name|downGroup
argument_list|)
expr_stmt|;
block|}
comment|// process across groupings?
block|}
elseif|else
if|if
condition|(
name|downGroup
condition|)
block|{
for|for
control|(
name|GroupingValue
name|acrossGroup
range|:
name|reportResults
operator|.
name|getGroupingsAcross
argument_list|()
operator|.
name|getGroupings
argument_list|()
control|)
block|{
name|addMatrixGroupValues
argument_list|(
name|result
argument_list|,
name|reportResults
argument_list|,
name|columnNames
argument_list|,
name|acrossGroup
argument_list|,
name|newPrefix
argument_list|,
name|includeDetails
argument_list|,
name|includeSummary
argument_list|,
name|newKeyPrefix
operator|+
literal|"!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// add lowest level across group detail rows?
block|}
elseif|else
if|if
condition|(
name|includeDetails
condition|)
block|{
name|addDetailRows
argument_list|(
name|result
argument_list|,
name|newPrefix
argument_list|,
name|reportResults
operator|.
name|getFactMap
argument_list|()
operator|.
name|get
argument_list|(
name|newKeyPrefix
argument_list|)
argument_list|)
expr_stmt|;
comment|// add group columns only at lowest across level?
block|}
elseif|else
if|if
condition|(
operator|!
name|includeSummary
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|newPrefix
argument_list|)
expr_stmt|;
block|}
comment|// add summary values for down group or lowest level across group
if|if
condition|(
name|includeSummary
condition|)
block|{
specifier|final
name|String
name|summaryKey
init|=
name|getGroupTotalKey
argument_list|(
name|keyPrefix
argument_list|,
name|downGroup
argument_list|,
name|groupKey
argument_list|)
decl_stmt|;
name|addSummaryValues
argument_list|(
name|result
argument_list|,
name|includeDetails
argument_list|,
name|columnNames
argument_list|,
name|newPrefix
argument_list|,
name|reportResults
operator|.
name|getReportMetadata
argument_list|()
operator|.
name|getAggregates
argument_list|()
argument_list|,
name|reportResults
operator|.
name|getFactMap
argument_list|()
operator|.
name|get
argument_list|(
name|summaryKey
argument_list|)
operator|.
name|getAggregates
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getGroupTotalKey (String keyPrefix, boolean downGroup, String key)
specifier|private
specifier|static
name|String
name|getGroupTotalKey
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|boolean
name|downGroup
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|downGroup
condition|)
block|{
comment|// keyPrefix has rows only
return|return
name|keyPrefix
operator|+
name|key
operator|+
literal|"!T"
return|;
block|}
else|else
block|{
comment|// keyPrefix is of the form r(_r)*!(c_)*
return|return
name|keyPrefix
operator|+
name|key
return|;
block|}
block|}
DECL|method|addSummaryGroupValues (ArrayList<List<String>> result, AbstractReportResultsBase reportResults, String[] columnNames, GroupingValue groupingValue, List<String> rowPrefix, boolean includeDetails, boolean includeSummary)
specifier|private
specifier|static
name|void
name|addSummaryGroupValues
parameter_list|(
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
parameter_list|,
name|AbstractReportResultsBase
name|reportResults
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|GroupingValue
name|groupingValue
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rowPrefix
parameter_list|,
name|boolean
name|includeDetails
parameter_list|,
name|boolean
name|includeSummary
parameter_list|)
block|{
comment|// get fact map at this level
specifier|final
name|ReportFactWithDetails
name|factWithDetails
init|=
name|reportResults
operator|.
name|getFactMap
argument_list|()
operator|.
name|get
argument_list|(
name|groupingValue
operator|.
name|getKey
argument_list|()
operator|+
literal|"!T"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|newPrefix
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowPrefix
argument_list|)
decl_stmt|;
name|newPrefix
operator|.
name|add
argument_list|(
name|groupingValue
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
comment|// more groups?
specifier|final
name|GroupingValue
index|[]
name|groupings
init|=
name|groupingValue
operator|.
name|getGroupings
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupings
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|GroupingValue
name|subGroup
range|:
name|groupings
control|)
block|{
name|addSummaryGroupValues
argument_list|(
name|result
argument_list|,
name|reportResults
argument_list|,
name|columnNames
argument_list|,
name|subGroup
argument_list|,
name|newPrefix
argument_list|,
name|includeDetails
argument_list|,
name|includeSummary
argument_list|)
expr_stmt|;
block|}
comment|// add lowest level group detail rows?
block|}
elseif|else
if|if
condition|(
name|includeDetails
condition|)
block|{
name|addDetailRows
argument_list|(
name|result
argument_list|,
name|newPrefix
argument_list|,
name|factWithDetails
argument_list|)
expr_stmt|;
comment|// add group columns only at lowest level?
block|}
elseif|else
if|if
condition|(
operator|!
name|includeSummary
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|newPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeSummary
condition|)
block|{
specifier|final
name|SummaryValue
index|[]
name|summaryValues
init|=
name|factWithDetails
operator|.
name|getAggregates
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|aggregates
init|=
name|reportResults
operator|.
name|getReportMetadata
argument_list|()
operator|.
name|getAggregates
argument_list|()
decl_stmt|;
name|addSummaryValues
argument_list|(
name|result
argument_list|,
name|includeDetails
argument_list|,
name|columnNames
argument_list|,
name|newPrefix
argument_list|,
name|aggregates
argument_list|,
name|summaryValues
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDetailRows (ArrayList<List<String>> result, List<String> newPrefix, ReportFactWithDetails factWithDetails)
specifier|private
specifier|static
name|void
name|addDetailRows
parameter_list|(
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|newPrefix
parameter_list|,
name|ReportFactWithDetails
name|factWithDetails
parameter_list|)
block|{
specifier|final
name|ReportRow
index|[]
name|rows
init|=
name|factWithDetails
operator|.
name|getRows
argument_list|()
decl_stmt|;
name|result
operator|.
name|ensureCapacity
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|+
name|rows
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ReportRow
name|row
range|:
name|rows
control|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|rowValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|newPrefix
argument_list|)
decl_stmt|;
name|addRowValues
argument_list|(
name|rowValues
argument_list|,
name|row
operator|.
name|getDataCells
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|rowValues
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSummaryValues (ArrayList<List<String>> result, boolean includeDetails, String[] columnNames, List<String> newPrefix, String[] aggregates, SummaryValue[] summaryValues)
specifier|private
specifier|static
name|void
name|addSummaryValues
parameter_list|(
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
parameter_list|,
name|boolean
name|includeDetails
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|newPrefix
parameter_list|,
name|String
index|[]
name|aggregates
parameter_list|,
name|SummaryValue
index|[]
name|summaryValues
parameter_list|)
block|{
comment|// no summary values to add
if|if
condition|(
name|summaryValues
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|includeDetails
condition|)
block|{
comment|// add summary rows for this group
name|addSummaryRows
argument_list|(
name|result
argument_list|,
name|columnNames
argument_list|,
name|newPrefix
argument_list|,
name|aggregates
argument_list|,
name|summaryValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add summary values as columns for this group
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|summaryRow
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|newPrefix
argument_list|)
decl_stmt|;
comment|// add remaining group values
specifier|final
name|int
name|nGroups
init|=
name|columnNames
operator|.
name|length
operator|-
name|summaryValues
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|summaryRow
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|nGroups
condition|;
name|i
operator|++
control|)
block|{
name|summaryRow
operator|.
name|add
argument_list|(
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
name|addRowValues
argument_list|(
name|summaryRow
argument_list|,
name|summaryValues
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|summaryRow
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSummaryRows (List<List<String>> result, String[] detailColumns, List<String> rowPrefix, String[] aggregateColumns, SummaryValue[] summaryValues)
specifier|private
specifier|static
name|void
name|addSummaryRows
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
parameter_list|,
name|String
index|[]
name|detailColumns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rowPrefix
parameter_list|,
name|String
index|[]
name|aggregateColumns
parameter_list|,
name|SummaryValue
index|[]
name|summaryValues
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|summaryValues
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|rowCount
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aggregateColumns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|aggregate
init|=
name|aggregateColumns
index|[
name|i
index|]
decl_stmt|;
specifier|final
name|String
name|valueLabel
init|=
name|summaryValues
index|[
name|i
index|]
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|ROW_COUNT
operator|.
name|equals
argument_list|(
name|aggregate
argument_list|)
condition|)
block|{
name|rowCount
operator|=
name|valueLabel
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|summaryRow
init|=
name|rowPrefix
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rowPrefix
argument_list|)
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|summaryRow
argument_list|)
expr_stmt|;
comment|// skip rowPrefix columns if not null
for|for
control|(
name|int
name|j
init|=
name|rowPrefix
operator|==
literal|null
condition|?
literal|0
else|:
name|rowPrefix
operator|.
name|size
argument_list|()
init|;
name|j
operator|<
name|detailColumns
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|String
name|columnName
init|=
name|detailColumns
index|[
name|j
index|]
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|endsWith
argument_list|(
literal|"!"
operator|+
name|columnName
argument_list|)
condition|)
block|{
specifier|final
name|StringBuilder
name|valueBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|startsWith
argument_list|(
literal|"a!"
argument_list|)
condition|)
block|{
name|valueBuilder
operator|.
name|append
argument_list|(
literal|"avg "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggregate
operator|.
name|startsWith
argument_list|(
literal|"mx!"
argument_list|)
condition|)
block|{
name|valueBuilder
operator|.
name|append
argument_list|(
literal|"max "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggregate
operator|.
name|startsWith
argument_list|(
literal|"m!"
argument_list|)
condition|)
block|{
name|valueBuilder
operator|.
name|append
argument_list|(
literal|"min "
argument_list|)
expr_stmt|;
block|}
name|valueBuilder
operator|.
name|append
argument_list|(
name|valueLabel
argument_list|)
expr_stmt|;
name|summaryRow
operator|.
name|add
argument_list|(
name|valueBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|summaryRow
operator|.
name|add
argument_list|(
name|EMPTY_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// add a Grand Totals separator row
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|grandTotal
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|grandTotal
argument_list|)
expr_stmt|;
if|if
condition|(
name|rowCount
operator|!=
literal|null
condition|)
block|{
name|grandTotal
operator|.
name|add
argument_list|(
literal|"Grand Totals ("
operator|+
name|rowCount
operator|+
literal|" records)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|grandTotal
operator|.
name|add
argument_list|(
literal|"Grand Totals"
argument_list|)
expr_stmt|;
block|}
comment|// add summary values rows
name|result
operator|.
name|addAll
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
DECL|method|getResultColumns (List<DetailColumnInfo> result, ReportMetadata reportMetadata, ReportExtendedMetadata reportExtendedMetadata, boolean includeDetails, boolean includeSummary)
specifier|private
specifier|static
name|String
index|[]
name|getResultColumns
parameter_list|(
name|List
argument_list|<
name|DetailColumnInfo
argument_list|>
name|result
parameter_list|,
name|ReportMetadata
name|reportMetadata
parameter_list|,
name|ReportExtendedMetadata
name|reportExtendedMetadata
parameter_list|,
name|boolean
name|includeDetails
parameter_list|,
name|boolean
name|includeSummary
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// add grouping columns before detail columns
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|GroupingColumnInfo
argument_list|>
name|groupingColumnInfos
init|=
name|reportExtendedMetadata
operator|.
name|getGroupingColumnInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupingInfo
name|downGroup
range|:
name|reportMetadata
operator|.
name|getGroupingsDown
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|downGroup
operator|.
name|getName
argument_list|()
decl_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|groupingColumnInfos
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GroupingInfo
name|acrossGroup
range|:
name|reportMetadata
operator|.
name|getGroupingsAcross
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|acrossGroup
operator|.
name|getName
argument_list|()
decl_stmt|;
name|columnNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|groupingColumnInfos
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// include details?
if|if
condition|(
operator|!
name|includeDetails
condition|)
block|{
comment|// include summary columns?
if|if
condition|(
name|includeSummary
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AggregateColumnInfo
argument_list|>
name|aggregateColumnInfos
init|=
name|reportExtendedMetadata
operator|.
name|getAggregateColumnInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aggregateColumnName
range|:
name|reportMetadata
operator|.
name|getAggregates
argument_list|()
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|aggregateColumnName
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|aggregateColumnInfos
operator|.
name|get
argument_list|(
name|aggregateColumnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// add detail columns
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DetailColumnInfo
argument_list|>
name|detailColumnInfo
init|=
name|reportExtendedMetadata
operator|.
name|getDetailColumnInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|columnName
range|:
name|reportMetadata
operator|.
name|getDetailColumns
argument_list|()
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|detailColumnInfo
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|columnNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|columnNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|addColumnHeaders (List<String> headers, Map<String, ? extends DetailColumnInfo> columnInfos, String[] columns)
specifier|private
specifier|static
name|void
name|addColumnHeaders
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|headers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|DetailColumnInfo
argument_list|>
name|columnInfos
parameter_list|,
name|String
index|[]
name|columns
parameter_list|)
block|{
for|for
control|(
name|String
name|columnName
range|:
name|columns
control|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|columnInfos
operator|.
name|get
argument_list|(
name|columnName
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addColumnHeaders (List<List<String>> result, ArrayList<DetailColumnInfo> columnInfos)
specifier|private
specifier|static
name|void
name|addColumnHeaders
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
parameter_list|,
name|ArrayList
argument_list|<
name|DetailColumnInfo
argument_list|>
name|columnInfos
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|columnInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DetailColumnInfo
name|info
range|:
name|columnInfos
control|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|info
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|addRowValues (List<String> row, SummaryValue[] values)
specifier|private
specifier|static
name|void
name|addRowValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|row
parameter_list|,
name|SummaryValue
index|[]
name|values
parameter_list|)
block|{
for|for
control|(
name|SummaryValue
name|summaryValue
range|:
name|values
control|)
block|{
name|row
operator|.
name|add
argument_list|(
name|summaryValue
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getOption (Exchange exchange, String name, Boolean defaultValue)
specifier|private
specifier|static
name|boolean
name|getOption
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|name
parameter_list|,
name|Boolean
name|defaultValue
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

