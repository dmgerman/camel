begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpEventListenerWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|io
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SalesforceSecurityListener
specifier|public
class|class
name|SalesforceSecurityListener
extends|extends
name|HttpEventListenerWrapper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SalesforceSecurityListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|destination
specifier|private
specifier|final
name|HttpDestination
name|destination
decl_stmt|;
DECL|field|exchange
specifier|private
specifier|final
name|HttpExchange
name|exchange
decl_stmt|;
DECL|field|session
specifier|private
specifier|final
name|SalesforceSession
name|session
decl_stmt|;
DECL|field|currentToken
specifier|private
name|String
name|currentToken
decl_stmt|;
DECL|field|retries
specifier|private
name|int
name|retries
decl_stmt|;
DECL|field|retrying
specifier|private
name|boolean
name|retrying
decl_stmt|;
DECL|field|requestComplete
specifier|private
name|boolean
name|requestComplete
decl_stmt|;
DECL|field|responseComplete
specifier|private
name|boolean
name|responseComplete
decl_stmt|;
DECL|method|SalesforceSecurityListener (HttpDestination destination, HttpExchange exchange, SalesforceSession session, String accessToken)
specifier|public
name|SalesforceSecurityListener
parameter_list|(
name|HttpDestination
name|destination
parameter_list|,
name|HttpExchange
name|exchange
parameter_list|,
name|SalesforceSession
name|session
parameter_list|,
name|String
name|accessToken
parameter_list|)
block|{
name|super
argument_list|(
name|exchange
operator|.
name|getEventListener
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|currentToken
operator|=
name|accessToken
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponseStatus (Buffer version, int status, Buffer reason)
specifier|public
name|void
name|onResponseStatus
parameter_list|(
name|Buffer
name|version
parameter_list|,
name|int
name|status
parameter_list|,
name|Buffer
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|status
operator|==
name|HttpStatus
operator|.
name|UNAUTHORIZED_401
operator|&&
name|retries
operator|<
name|destination
operator|.
name|getHttpClient
argument_list|()
operator|.
name|maxRetries
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying on Salesforce authentication error [{}]: [{}]"
argument_list|,
name|status
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|setDelegatingRequests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setDelegatingResponses
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|retrying
operator|=
literal|true
expr_stmt|;
block|}
name|super
operator|.
name|onResponseStatus
argument_list|(
name|version
argument_list|,
name|status
argument_list|,
name|reason
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRequestComplete ()
specifier|public
name|void
name|onRequestComplete
parameter_list|()
throws|throws
name|IOException
block|{
name|requestComplete
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|checkExchangeComplete
argument_list|()
condition|)
block|{
name|super
operator|.
name|onRequestComplete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onResponseComplete ()
specifier|public
name|void
name|onResponseComplete
parameter_list|()
throws|throws
name|IOException
block|{
name|responseComplete
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|checkExchangeComplete
argument_list|()
condition|)
block|{
name|super
operator|.
name|onResponseComplete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkExchangeComplete ()
specifier|private
name|boolean
name|checkExchangeComplete
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|retrying
operator|&&
name|requestComplete
operator|&&
name|responseComplete
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authentication Error, retrying: {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|requestComplete
operator|=
literal|false
expr_stmt|;
name|responseComplete
operator|=
literal|false
expr_stmt|;
name|setDelegatingRequests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setDelegatingResponses
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// get a new token and retry
name|currentToken
operator|=
name|session
operator|.
name|login
argument_list|(
name|currentToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|instanceof
name|SalesforceExchange
condition|)
block|{
specifier|final
name|SalesforceExchange
name|salesforceExchange
init|=
operator|(
name|SalesforceExchange
operator|)
name|exchange
decl_stmt|;
specifier|final
name|AbstractClientBase
name|client
init|=
name|salesforceExchange
operator|.
name|getClient
argument_list|()
decl_stmt|;
comment|// update client cache for this and future requests
name|client
operator|.
name|setAccessToken
argument_list|(
name|currentToken
argument_list|)
expr_stmt|;
name|client
operator|.
name|setInstanceUrl
argument_list|(
name|session
operator|.
name|getInstanceUrl
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAccessToken
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|addRequestHeader
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
literal|"OAuth "
operator|+
name|currentToken
argument_list|)
expr_stmt|;
block|}
comment|// TODO handle a change in Salesforce instanceUrl, right now we retry with the same destination
name|destination
operator|.
name|resend
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// resending, exchange is not done
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
comment|// logging here, since login exception is not propagated!
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// the HTTP status and reason is pushed up
name|setDelegationResult
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onRetry ()
specifier|public
name|void
name|onRetry
parameter_list|()
block|{
comment|// ignore retries from other interceptors
if|if
condition|(
name|retrying
condition|)
block|{
name|retrying
operator|=
literal|false
expr_stmt|;
name|retries
operator|++
expr_stmt|;
name|setDelegatingRequests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setDelegatingResponses
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requestComplete
operator|=
literal|false
expr_stmt|;
name|responseComplete
operator|=
literal|false
expr_stmt|;
block|}
name|super
operator|.
name|onRetry
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onConnectionFailed (Throwable ex)
specifier|public
name|void
name|onConnectionFailed
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|setDelegatingRequests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setDelegatingResponses
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// delegate connection failures
name|super
operator|.
name|onConnectionFailed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onException (Throwable ex)
specifier|public
name|void
name|onException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|setDelegatingRequests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setDelegatingResponses
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// delegate exceptions
name|super
operator|.
name|onException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

