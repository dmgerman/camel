begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamAlias
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamConverter
import|;
end_import

begin_comment
comment|/**  * Contains the individual result of Composite API batch request. As batch requests can partially succeed or fail make  * sure you check the {@link #getStatusCode()} for status of the specific request. The result of the request can vary  * from API to API so here it is given as {@link Object}, in most cases it will be a {@link Map} with string keys and  * values or other {@link Map} as value. Requests made in JSON format hold some type information (i.e. it is known what  * values are strings and what values are numbers), so in general those will be more type friendly. Note that the  * responses will vary between XML and JSON, this is due to the responses from Salesforce API being different.  *<p>  * For example response for SObject record creation in JSON will be:<blockquote>  *  *<pre>  * {  *   "statusCode": 201,  *   "result": {  *     "id" : "0010Y00000Ary8hQAB",  *     "success" : true,  *     "errors" : []  *   }  * }  *</pre>  *  *</blockquote>  *<p>  * Which will result in {@link #getResult()} returning {@link Map} created like:<blockquote>  *  *<pre>  * {@code  * Map<String, Object> result = new HashMap<>();  * result.put("id", "0010Y00000Ary91QAB");  * result.put("success", Boolean.TRUE);  * result.put("errors", Collections.emptyList());  * }  *</pre>  *  *</blockquote>  *<p>  * Whereas using XML format the response will be:<blockquote>  *  *<pre>  * {@code  *<Result>  *<id>0010Y00000AryACQAZ</id>  *<success>true</success>  *</Result>  * }  *</pre>  *  *</blockquote>  *<p>  * And that results in {@link #getResult()} returning {@link Map} created like:<blockquote>  *  *<pre>  * {@code  * Map<String, Object> result = new HashMap<>();  *  * Map<String, Object> nestedResult = new HashMap<>();  * result.put("Result", nestedResult);  *  * nestedResult.put("id", "0010Y00000Ary91QAB");  * nestedResult.put("success", "true");  * }  *</pre>  *  *</blockquote>  *<p>  * Note the differences between type and nested {@link Map} one level deeper in the case of XML.  */
end_comment

begin_class
annotation|@
name|XStreamAlias
argument_list|(
literal|"batchResult"
argument_list|)
DECL|class|SObjectBatchResult
specifier|public
specifier|final
class|class
name|SObjectBatchResult
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|XStreamConverter
argument_list|(
name|MapOfMapsConverter
operator|.
name|class
argument_list|)
DECL|field|result
specifier|private
specifier|final
name|Object
name|result
decl_stmt|;
DECL|field|statusCode
specifier|private
specifier|final
name|int
name|statusCode
decl_stmt|;
annotation|@
name|JsonCreator
DECL|method|SObjectBatchResult (@sonPropertyR) final int statusCode, @JsonProperty(R) final Object result)
specifier|public
name|SObjectBatchResult
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"statusCode"
argument_list|)
specifier|final
name|int
name|statusCode
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"result"
argument_list|)
specifier|final
name|Object
name|result
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
block|}
DECL|method|getResult ()
specifier|public
name|Object
name|getResult
parameter_list|()
block|{
return|return
name|result
return|;
block|}
DECL|method|getStatusCode ()
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|statusCode
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<statusCode: "
operator|+
name|statusCode
operator|+
literal|", result: "
operator|+
name|result
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

