begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|DefaultComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|NoSuchOptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|OptionsGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultErrorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultErrorHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|RestError
import|;
end_import

begin_class
DECL|class|SalesforceComponentVerifierExtension
specifier|public
class|class
name|SalesforceComponentVerifierExtension
extends|extends
name|DefaultComponentVerifierExtension
block|{
DECL|method|SalesforceComponentVerifierExtension ()
name|SalesforceComponentVerifierExtension
parameter_list|()
block|{
name|super
argument_list|(
literal|"salesforce"
argument_list|)
expr_stmt|;
block|}
comment|// *********************************
comment|// Parameters validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyParameters (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// Validate mandatory component options, needed to be done here as these
comment|// options are not properly marked as mandatory in the catalog.
comment|//
comment|// Validation rules are borrowed from SalesforceLoginConfig's validate
comment|// method, which support 3 workflow:
comment|//
comment|// - OAuth Username/Password Flow
comment|// - OAuth Refresh Token Flow:
comment|// - OAuth JWT Flow
comment|//
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|PARAMETERS
argument_list|)
operator|.
name|errors
argument_list|(
name|ResultErrorHelper
operator|.
name|requiresAny
argument_list|(
name|parameters
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
name|AuthenticationType
operator|.
name|USERNAME_PASSWORD
argument_list|)
operator|.
name|options
argument_list|(
literal|"clientId"
argument_list|,
literal|"clientSecret"
argument_list|,
literal|"userName"
argument_list|,
literal|"password"
argument_list|,
literal|"!refreshToken"
argument_list|,
literal|"!keystore"
argument_list|)
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
name|AuthenticationType
operator|.
name|REFRESH_TOKEN
argument_list|)
operator|.
name|options
argument_list|(
literal|"clientId"
argument_list|,
literal|"clientSecret"
argument_list|,
literal|"refreshToken"
argument_list|,
literal|"!password"
argument_list|,
literal|"!keystore"
argument_list|)
argument_list|,
name|OptionsGroup
operator|.
name|withName
argument_list|(
name|AuthenticationType
operator|.
name|JWT
argument_list|)
operator|.
name|options
argument_list|(
literal|"clientId"
argument_list|,
literal|"userName"
argument_list|,
literal|"keystore"
argument_list|,
literal|"!password"
argument_list|,
literal|"!refreshToken"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Validate using the catalog
name|super
operator|.
name|verifyParametersAgainstCatalog
argument_list|(
name|builder
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Connectivity validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyConnectivity (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyConnectivity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// Default is success
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|CONNECTIVITY
argument_list|)
decl_stmt|;
try|try
block|{
name|SalesforceClientTemplate
operator|.
name|invoke
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|parameters
argument_list|,
name|client
lambda|->
block|{
name|client
operator|.
name|getVersions
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
parameter_list|(
name|response
parameter_list|,
name|headers
parameter_list|,
name|exception
parameter_list|)
lambda|->
name|processSalesforceException
argument_list|(
name|builder
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|exception
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchOptionException
name|e
parameter_list|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withMissingOption
argument_list|(
name|e
operator|.
name|getOptionName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SalesforceException
condition|)
block|{
name|processSalesforceException
argument_list|(
name|builder
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
operator|(
name|SalesforceException
operator|)
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Helpers
comment|// *********************************
DECL|method|processSalesforceException (ResultBuilder builder, Optional<SalesforceException> exception)
specifier|private
specifier|static
name|void
name|processSalesforceException
parameter_list|(
name|ResultBuilder
name|builder
parameter_list|,
name|Optional
argument_list|<
name|SalesforceException
argument_list|>
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|ifPresent
argument_list|(
name|e
lambda|->
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|detail
argument_list|(
name|VerificationError
operator|.
name|HttpAttribute
operator|.
name|HTTP_CODE
argument_list|,
name|e
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RestError
name|error
range|:
name|e
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCode
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|GENERIC
argument_list|)
operator|.
name|description
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|parameterKeys
argument_list|(
name|error
operator|.
name|getFields
argument_list|()
argument_list|)
operator|.
name|detail
argument_list|(
literal|"salesforce_code"
argument_list|,
name|error
operator|.
name|getErrorCode
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

