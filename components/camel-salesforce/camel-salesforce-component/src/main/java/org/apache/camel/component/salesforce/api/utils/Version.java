begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|Version
specifier|public
specifier|final
class|class
name|Version
implements|implements
name|Comparable
argument_list|<
name|Version
argument_list|>
block|{
DECL|field|VERSION_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|VERSION_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)\\.(\\d+)"
argument_list|)
decl_stmt|;
DECL|field|major
specifier|private
specifier|final
name|int
name|major
decl_stmt|;
DECL|field|minor
specifier|private
specifier|final
name|int
name|minor
decl_stmt|;
DECL|method|Version (final int major, final int minor)
specifier|private
name|Version
parameter_list|(
specifier|final
name|int
name|major
parameter_list|,
specifier|final
name|int
name|minor
parameter_list|)
block|{
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
block|}
DECL|method|create (final String version)
specifier|public
specifier|static
name|Version
name|create
parameter_list|(
specifier|final
name|String
name|version
parameter_list|)
block|{
specifier|final
name|Matcher
name|matcher
init|=
name|VERSION_PATTERN
operator|.
name|matcher
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"API version needs to be in<number>.<number> format, given: "
operator|+
name|version
argument_list|)
throw|;
block|}
specifier|final
name|int
name|major
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|minor
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Version
argument_list|(
name|major
argument_list|,
name|minor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (final Version other)
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|Version
name|other
parameter_list|)
block|{
specifier|final
name|int
name|majorCompare
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|major
argument_list|,
name|other
operator|.
name|major
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorCompare
operator|==
literal|0
condition|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|minor
argument_list|,
name|other
operator|.
name|minor
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|majorCompare
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (final Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Version
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Version
name|other
init|=
operator|(
name|Version
operator|)
name|obj
decl_stmt|;
return|return
name|compareTo
argument_list|(
name|other
argument_list|)
operator|==
literal|0
return|;
block|}
DECL|method|getMajor ()
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|major
return|;
block|}
DECL|method|getMinor ()
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|minor
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|1
operator|+
literal|31
operator|*
operator|(
literal|1
operator|+
literal|31
operator|*
name|major
operator|)
operator|+
name|minor
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"v"
operator|+
name|major
operator|+
literal|"."
operator|+
name|minor
return|;
block|}
DECL|method|requireAtLeast (final int requiredMajor, final int requiredMinor)
specifier|public
name|void
name|requireAtLeast
parameter_list|(
specifier|final
name|int
name|requiredMajor
parameter_list|,
specifier|final
name|int
name|requiredMinor
parameter_list|)
block|{
specifier|final
name|Version
name|required
init|=
operator|new
name|Version
argument_list|(
name|requiredMajor
argument_list|,
name|requiredMinor
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|compareTo
argument_list|(
name|required
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This operation requires API version at least "
operator|+
name|requiredMajor
operator|+
literal|"."
operator|+
name|requiredMinor
operator|+
literal|", currently configured for "
operator|+
name|major
operator|+
literal|"."
operator|+
name|minor
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

