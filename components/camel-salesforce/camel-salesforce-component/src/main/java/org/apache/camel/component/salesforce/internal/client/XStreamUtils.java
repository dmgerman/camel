begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|security
operator|.
name|AnyTypePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|security
operator|.
name|ExplicitTypePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|security
operator|.
name|TypePermission
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|security
operator|.
name|WildcardTypePermission
import|;
end_import

begin_comment
comment|/**  * REVISIT this code is duplicated from camel-xstream and we should  * find another way...  */
end_comment

begin_class
DECL|class|XStreamUtils
specifier|public
specifier|final
class|class
name|XStreamUtils
block|{
DECL|field|PERMISSIONS_PROPERTY_KEY
specifier|private
specifier|static
specifier|final
name|String
name|PERMISSIONS_PROPERTY_KEY
init|=
literal|"org.apache.camel.xstream.permissions"
decl_stmt|;
DECL|field|PERMISSIONS_PROPERTY_DEFAULT
specifier|private
specifier|static
specifier|final
name|String
name|PERMISSIONS_PROPERTY_DEFAULT
init|=
literal|"java.lang.*,java.util.*"
decl_stmt|;
DECL|method|XStreamUtils ()
specifier|private
name|XStreamUtils
parameter_list|()
block|{     }
DECL|method|addPermissions (XStream xstream, String permissions)
specifier|public
specifier|static
name|void
name|addPermissions
parameter_list|(
name|XStream
name|xstream
parameter_list|,
name|String
name|permissions
parameter_list|)
block|{
for|for
control|(
name|String
name|pterm
range|:
name|permissions
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|boolean
name|aod
decl_stmt|;
name|pterm
operator|=
name|pterm
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|pterm
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|aod
operator|=
literal|false
expr_stmt|;
name|pterm
operator|=
name|pterm
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aod
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|pterm
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|pterm
operator|=
name|pterm
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|TypePermission
name|typePermission
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|pterm
argument_list|)
condition|)
block|{
comment|// accept or deny any
name|typePermission
operator|=
name|AnyTypePermission
operator|.
name|ANY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pterm
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// exact type
name|typePermission
operator|=
operator|new
name|ExplicitTypePermission
argument_list|(
operator|new
name|String
index|[]
block|{
name|pterm
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pterm
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// wildcard type
name|typePermission
operator|=
operator|new
name|WildcardTypePermission
argument_list|(
operator|new
name|String
index|[]
block|{
name|pterm
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|typePermission
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|aod
condition|)
block|{
name|xstream
operator|.
name|addPermission
argument_list|(
name|typePermission
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xstream
operator|.
name|denyPermission
argument_list|(
name|typePermission
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addDefaultPermissions (XStream xstream)
specifier|public
specifier|static
name|void
name|addDefaultPermissions
parameter_list|(
name|XStream
name|xstream
parameter_list|)
block|{
name|addPermissions
argument_list|(
name|xstream
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|PERMISSIONS_PROPERTY_KEY
argument_list|,
name|PERMISSIONS_PROPERTY_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

