begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|reflection
operator|.
name|FieldKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|reflection
operator|.
name|FieldKeySorter
import|;
end_import

begin_class
DECL|class|AnnotationFieldKeySorter
specifier|public
specifier|final
class|class
name|AnnotationFieldKeySorter
implements|implements
name|FieldKeySorter
block|{
DECL|class|AnnotationFieldOrderComparator
specifier|private
specifier|static
specifier|final
class|class
name|AnnotationFieldOrderComparator
implements|implements
name|Comparator
argument_list|<
name|FieldKey
argument_list|>
block|{
DECL|field|order
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|order
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|AnnotationFieldOrderComparator (final String[] orderedFields, Field[] fields)
specifier|private
name|AnnotationFieldOrderComparator
parameter_list|(
specifier|final
name|String
index|[]
name|orderedFields
parameter_list|,
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|orderedFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|order
operator|.
name|put
argument_list|(
name|orderedFields
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|order
operator|.
name|putIfAbsent
argument_list|(
name|fields
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|i
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compare (final FieldKey k1, final FieldKey k2)
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|FieldKey
name|k1
parameter_list|,
specifier|final
name|FieldKey
name|k2
parameter_list|)
block|{
specifier|final
name|String
name|field1
init|=
name|k1
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|field2
init|=
name|k2
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
return|return
name|order
operator|.
name|get
argument_list|(
name|field1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|order
operator|.
name|get
argument_list|(
name|field2
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|sort (final Class type, final Map keyedByFieldKey)
specifier|public
name|Map
name|sort
parameter_list|(
specifier|final
name|Class
name|type
parameter_list|,
specifier|final
name|Map
name|keyedByFieldKey
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|type
decl_stmt|;
specifier|final
name|XStreamFieldOrder
name|fieldOrderAnnotation
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|XStreamFieldOrder
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldOrderAnnotation
operator|==
literal|null
condition|)
block|{
return|return
name|keyedByFieldKey
return|;
block|}
specifier|final
name|String
index|[]
name|fieldOrder
init|=
name|fieldOrderAnnotation
operator|.
name|value
argument_list|()
decl_stmt|;
specifier|final
name|TreeMap
argument_list|<
name|FieldKey
argument_list|,
name|Field
argument_list|>
name|sorted
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|AnnotationFieldOrderComparator
argument_list|(
name|fieldOrder
argument_list|,
name|type
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|sorted
operator|.
name|putAll
argument_list|(
name|keyedByFieldKey
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
block|}
end_class

end_unit

