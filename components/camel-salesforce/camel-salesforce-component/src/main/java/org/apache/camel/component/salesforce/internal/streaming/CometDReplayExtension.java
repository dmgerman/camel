begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|client
operator|.
name|ClientSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|client
operator|.
name|ClientSession
operator|.
name|Extension
operator|.
name|Adapter
import|;
end_import

begin_comment
comment|/**  * CometDReplayExtension, typical usages are the following:  * {@code client.addExtension(new CometDReplayExtension<>(replayMap));}  *  * @author yzhao  * @since 198 (Winter '16)  */
end_comment

begin_class
DECL|class|CometDReplayExtension
specifier|public
class|class
name|CometDReplayExtension
parameter_list|<
name|V
parameter_list|>
extends|extends
name|Adapter
block|{
DECL|field|EXTENSION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|EXTENSION_NAME
init|=
literal|"replay"
decl_stmt|;
DECL|field|dataMap
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|dataMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|supported
specifier|private
specifier|final
name|AtomicBoolean
name|supported
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|CometDReplayExtension (Map<String, V> dataMap)
specifier|public
name|CometDReplayExtension
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|V
argument_list|>
name|dataMap
parameter_list|)
block|{
name|this
operator|.
name|dataMap
operator|.
name|putAll
argument_list|(
name|dataMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|rcv (ClientSession session, Message.Mutable message)
specifier|public
name|boolean
name|rcv
parameter_list|(
name|ClientSession
name|session
parameter_list|,
name|Message
operator|.
name|Mutable
name|message
parameter_list|)
block|{
name|Object
name|data
init|=
name|message
operator|.
name|get
argument_list|(
name|EXTENSION_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|supported
operator|.
name|get
argument_list|()
operator|&&
name|data
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dataMap
operator|.
name|put
argument_list|(
name|message
operator|.
name|getChannel
argument_list|()
argument_list|,
operator|(
name|V
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|rcvMeta (ClientSession session, Message.Mutable message)
specifier|public
name|boolean
name|rcvMeta
parameter_list|(
name|ClientSession
name|session
parameter_list|,
name|Message
operator|.
name|Mutable
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|message
operator|.
name|getChannel
argument_list|()
condition|)
block|{
case|case
name|Channel
operator|.
name|META_HANDSHAKE
case|:
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ext
init|=
name|message
operator|.
name|getExt
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|supported
operator|.
name|set
argument_list|(
name|ext
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|ext
operator|.
name|get
argument_list|(
name|EXTENSION_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|sendMeta (ClientSession session, Message.Mutable message)
specifier|public
name|boolean
name|sendMeta
parameter_list|(
name|ClientSession
name|session
parameter_list|,
name|Message
operator|.
name|Mutable
name|message
parameter_list|)
block|{
switch|switch
condition|(
name|message
operator|.
name|getChannel
argument_list|()
condition|)
block|{
case|case
name|Channel
operator|.
name|META_HANDSHAKE
case|:
name|message
operator|.
name|getExt
argument_list|(
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|EXTENSION_NAME
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|Channel
operator|.
name|META_SUBSCRIBE
case|:
if|if
condition|(
name|supported
operator|.
name|get
argument_list|()
condition|)
block|{
name|message
operator|.
name|getExt
argument_list|(
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|EXTENSION_NAME
argument_list|,
name|dataMap
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

