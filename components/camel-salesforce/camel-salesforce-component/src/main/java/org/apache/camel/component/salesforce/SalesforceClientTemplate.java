begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|HttpClientHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_class
DECL|class|SalesforceClientTemplate
specifier|final
class|class
name|SalesforceClientTemplate
block|{
annotation|@
name|FunctionalInterface
DECL|interface|RestClientSupplier
interface|interface
name|RestClientSupplier
block|{
DECL|method|restClientWith (CamelContext camelContext, Map<String, Object> parameters)
name|RestClient
name|restClientWith
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|WithClient
interface|interface
name|WithClient
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|invoke (RestClient client)
name|T
name|invoke
parameter_list|(
name|RestClient
name|client
parameter_list|)
function_decl|;
block|}
DECL|field|restClientSupplier
specifier|static
name|RestClientSupplier
name|restClientSupplier
init|=
parameter_list|(
name|camelContext
parameter_list|,
name|parameters
parameter_list|)
lambda|->
name|SalesforceComponent
operator|.
name|createRestClient
argument_list|(
name|camelContext
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
DECL|method|SalesforceClientTemplate ()
specifier|private
name|SalesforceClientTemplate
parameter_list|()
block|{
comment|// utility class
block|}
DECL|method|invoke (final CamelContext camelContext, final Map<String, Object> parameters, final WithClient<T> performer)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|invoke
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
specifier|final
name|WithClient
argument_list|<
name|T
argument_list|>
name|performer
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|RestClient
name|client
init|=
name|restClientSupplier
operator|.
name|restClientWith
argument_list|(
name|camelContext
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
return|return
name|invokeInternal
argument_list|(
name|client
argument_list|,
name|performer
argument_list|)
return|;
block|}
DECL|method|invoke (final SalesforceComponent component, final Map<String, Object> parameters, final WithClient<T> performer)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|invoke
parameter_list|(
specifier|final
name|SalesforceComponent
name|component
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
specifier|final
name|WithClient
argument_list|<
name|T
argument_list|>
name|performer
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|RestClient
name|client
init|=
name|component
operator|.
name|createRestClient
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
return|return
name|invokeInternal
argument_list|(
name|client
argument_list|,
name|performer
argument_list|)
return|;
block|}
DECL|method|invokeInternal (final RestClient client, final WithClient<T> performer)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|invokeInternal
parameter_list|(
specifier|final
name|RestClient
name|client
parameter_list|,
specifier|final
name|WithClient
argument_list|<
name|T
argument_list|>
name|performer
parameter_list|)
throws|throws
name|Exception
block|{
comment|// we'll handle HTTP client lifecycle so we'll start here and stop at
comment|// the end; we won't handle SalesforceSession lifecycle as stoping a
comment|// SalesforceSession that we borrowed from a configured
comment|// SalesforceComponent could mean logging out any running endpoints also
specifier|final
name|boolean
name|isHttpClientHolder
init|=
name|client
operator|instanceof
name|HttpClientHolder
decl_stmt|;
if|if
condition|(
name|isHttpClientHolder
condition|)
block|{
operator|(
operator|(
name|HttpClientHolder
operator|)
name|client
operator|)
operator|.
name|getHttpClient
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|client
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|performer
operator|.
name|invoke
argument_list|(
name|client
argument_list|)
return|;
block|}
finally|finally
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|client
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHttpClientHolder
condition|)
block|{
operator|(
operator|(
name|HttpClientHolder
operator|)
name|client
operator|)
operator|.
name|getHttpClient
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

