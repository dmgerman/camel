begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZonedDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonAnySetter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_class
DECL|class|PlatformEvent
specifier|public
specifier|final
class|class
name|PlatformEvent
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|created
specifier|private
specifier|final
name|ZonedDateTime
name|created
decl_stmt|;
DECL|field|createdById
specifier|private
specifier|final
name|String
name|createdById
decl_stmt|;
DECL|field|eventData
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|eventData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|JsonCreator
DECL|method|PlatformEvent (@sonPropertyR) final ZonedDateTime created, @JsonProperty(R) final String createdById)
specifier|public
name|PlatformEvent
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"CreatedDate"
argument_list|)
specifier|final
name|ZonedDateTime
name|created
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"CreatedById"
argument_list|)
specifier|final
name|String
name|createdById
parameter_list|)
block|{
name|this
operator|.
name|created
operator|=
name|created
expr_stmt|;
name|this
operator|.
name|createdById
operator|=
name|createdById
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|PlatformEvent
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|PlatformEvent
name|other
init|=
operator|(
name|PlatformEvent
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|created
argument_list|,
name|other
operator|.
name|created
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|createdById
argument_list|,
name|other
operator|.
name|createdById
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|eventData
argument_list|,
name|other
operator|.
name|eventData
argument_list|)
return|;
block|}
DECL|method|getCreated ()
specifier|public
name|ZonedDateTime
name|getCreated
parameter_list|()
block|{
return|return
name|created
return|;
block|}
DECL|method|getCreatedById ()
specifier|public
name|String
name|getCreatedById
parameter_list|()
block|{
return|return
name|createdById
return|;
block|}
DECL|method|getEventData ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEventData
parameter_list|()
block|{
return|return
name|eventData
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|created
argument_list|,
name|createdById
argument_list|,
name|eventData
argument_list|)
return|;
block|}
annotation|@
name|JsonAnySetter
DECL|method|set (final String name, final String value)
specifier|public
name|void
name|set
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|eventData
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"PlatformEvent: createdById: "
argument_list|)
operator|.
name|append
argument_list|(
name|createdById
argument_list|)
operator|.
name|append
argument_list|(
literal|", createdId: "
argument_list|)
operator|.
name|append
argument_list|(
name|created
argument_list|)
operator|.
name|append
argument_list|(
literal|", data: "
argument_list|)
operator|.
name|append
argument_list|(
name|eventData
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

