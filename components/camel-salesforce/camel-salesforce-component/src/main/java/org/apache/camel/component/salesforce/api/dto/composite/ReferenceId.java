begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonCreator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamAlias
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamImplicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|RestError
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Optional
operator|.
name|ofNullable
import|;
end_import

begin_class
annotation|@
name|XStreamAlias
argument_list|(
literal|"results"
argument_list|)
DECL|class|ReferenceId
specifier|public
specifier|final
class|class
name|ReferenceId
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|XStreamImplicit
DECL|field|errors
specifier|private
specifier|final
name|List
argument_list|<
name|RestError
argument_list|>
name|errors
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|referenceId
specifier|private
specifier|final
name|String
name|referenceId
decl_stmt|;
annotation|@
name|JsonCreator
DECL|method|ReferenceId (@sonPropertyR) final String referenceId, @JsonProperty(R) final String id, @JsonProperty(R) final List<RestError> errors)
name|ReferenceId
parameter_list|(
annotation|@
name|JsonProperty
argument_list|(
literal|"referenceId"
argument_list|)
specifier|final
name|String
name|referenceId
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"id"
argument_list|)
specifier|final
name|String
name|id
parameter_list|,
annotation|@
name|JsonProperty
argument_list|(
literal|"errors"
argument_list|)
specifier|final
name|List
argument_list|<
name|RestError
argument_list|>
name|errors
parameter_list|)
block|{
name|this
operator|.
name|referenceId
operator|=
name|referenceId
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (final Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ReferenceId
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ReferenceId
name|other
init|=
operator|(
name|ReferenceId
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|id
argument_list|,
name|other
operator|.
name|id
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|referenceId
argument_list|,
name|other
operator|.
name|referenceId
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|getErrors
argument_list|()
argument_list|,
name|other
operator|.
name|getErrors
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getErrors ()
specifier|public
name|List
argument_list|<
name|RestError
argument_list|>
name|getErrors
parameter_list|()
block|{
return|return
name|unmodifiableList
argument_list|(
name|ofNullable
argument_list|(
name|errors
argument_list|)
operator|.
name|orElse
argument_list|(
name|emptyList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getReferenceId ()
specifier|public
name|String
name|getReferenceId
parameter_list|()
block|{
return|return
name|referenceId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|errors
operator|==
literal|null
condition|?
literal|0
else|:
name|errors
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|id
operator|==
literal|null
condition|?
literal|0
else|:
name|id
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|referenceId
operator|==
literal|null
condition|?
literal|0
else|:
name|referenceId
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buildy
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Reference: "
argument_list|)
operator|.
name|append
argument_list|(
name|referenceId
argument_list|)
operator|.
name|append
argument_list|(
literal|", Id: "
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RestError
argument_list|>
name|anyErrors
init|=
name|getErrors
argument_list|()
decl_stmt|;
if|if
condition|(
name|anyErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buildy
operator|.
name|append
argument_list|(
literal|", with no errors"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildy
operator|.
name|append
argument_list|(
literal|", with "
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
name|anyErrors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|" error(s)"
argument_list|)
expr_stmt|;
block|}
return|return
name|buildy
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

