begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|ReferenceId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectBatchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectComposite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectCompositeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectTreeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|PayloadFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|CompositeApiClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|DefaultCompositeApiClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_class
DECL|class|CompositeApiProcessor
specifier|public
specifier|final
class|class
name|CompositeApiProcessor
extends|extends
name|AbstractSalesforceProcessor
block|{
annotation|@
name|FunctionalInterface
DECL|interface|ResponseHandler
interface|interface
name|ResponseHandler
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|handleResponse (Exchange exchange, Optional<T> body, Map<String, String> headers, SalesforceException exception, AsyncCallback callback)
name|void
name|handleResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Optional
argument_list|<
name|T
argument_list|>
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|exception
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
function_decl|;
block|}
DECL|field|compositeClient
specifier|private
specifier|final
name|CompositeApiClient
name|compositeClient
decl_stmt|;
DECL|field|format
specifier|private
specifier|final
name|PayloadFormat
name|format
decl_stmt|;
DECL|method|CompositeApiProcessor (final SalesforceEndpoint endpoint)
specifier|public
name|CompositeApiProcessor
parameter_list|(
specifier|final
name|SalesforceEndpoint
name|endpoint
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceEndpointConfig
name|configuration
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|apiVersion
init|=
name|configuration
operator|.
name|getApiVersion
argument_list|()
decl_stmt|;
name|format
operator|=
name|configuration
operator|.
name|getFormat
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|EnumSet
operator|.
name|of
argument_list|(
name|PayloadFormat
operator|.
name|JSON
argument_list|,
name|PayloadFormat
operator|.
name|XML
argument_list|)
operator|.
name|contains
argument_list|(
name|format
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
literal|"Unsupported format: "
operator|+
name|format
argument_list|,
literal|0
argument_list|)
throw|;
block|}
name|compositeClient
operator|=
operator|new
name|DefaultCompositeApiClient
argument_list|(
name|configuration
argument_list|,
name|format
argument_list|,
name|apiVersion
argument_list|,
name|session
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
switch|switch
condition|(
name|operationName
condition|)
block|{
case|case
name|COMPOSITE_TREE
case|:
return|return
name|processInternal
argument_list|(
name|SObjectTree
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|compositeClient
operator|::
name|submitCompositeTree
argument_list|,
name|this
operator|::
name|processCompositeTreeResponse
argument_list|,
name|callback
argument_list|)
return|;
case|case
name|COMPOSITE_BATCH
case|:
return|return
name|processInternal
argument_list|(
name|SObjectBatch
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|compositeClient
operator|::
name|submitCompositeBatch
argument_list|,
name|this
operator|::
name|processCompositeBatchResponse
argument_list|,
name|callback
argument_list|)
return|;
case|case
name|COMPOSITE
case|:
return|return
name|processInternal
argument_list|(
name|SObjectComposite
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|compositeClient
operator|::
name|submitComposite
argument_list|,
name|this
operator|::
name|processCompositeResponse
argument_list|,
name|callback
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SalesforceException
argument_list|(
literal|"Unknown operation name: "
operator|+
name|operationName
operator|.
name|value
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SalesforceException
name|e
parameter_list|)
block|{
return|return
name|processException
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|RuntimeException
name|e
parameter_list|)
block|{
specifier|final
name|SalesforceException
name|exception
init|=
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected Error processing %s: \"%s\""
argument_list|,
name|operationName
operator|.
name|value
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
decl_stmt|;
return|return
name|processException
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|exception
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|compositeClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|compositeClient
argument_list|)
expr_stmt|;
block|}
DECL|method|processCompositeBatchResponse (final Exchange exchange, final Optional<SObjectBatchResponse> responseBody, final Map<String, String> headers, final SalesforceException exception, final AsyncCallback callback)
name|void
name|processCompositeBatchResponse
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|SObjectBatchResponse
argument_list|>
name|responseBody
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
specifier|final
name|SalesforceException
name|exception
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|responseBody
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
specifier|final
name|SObjectBatchResponse
name|response
init|=
name|responseBody
operator|.
name|get
argument_list|()
decl_stmt|;
name|out
operator|.
name|copyFromWithNewBody
argument_list|(
name|in
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|out
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// notify callback that exchange is done
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processCompositeResponse (final Exchange exchange, final Optional<SObjectCompositeResponse> responseBody, final Map<String, String> headers, final SalesforceException exception, final AsyncCallback callback)
name|void
name|processCompositeResponse
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|SObjectCompositeResponse
argument_list|>
name|responseBody
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
specifier|final
name|SalesforceException
name|exception
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|responseBody
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
specifier|final
name|SObjectCompositeResponse
name|response
init|=
name|responseBody
operator|.
name|get
argument_list|()
decl_stmt|;
name|out
operator|.
name|copyFromWithNewBody
argument_list|(
name|in
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|out
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// notify callback that exchange is done
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processCompositeTreeResponse (final Exchange exchange, final Optional<SObjectTreeResponse> responseBody, final Map<String, String> headers, final SalesforceException exception, final AsyncCallback callback)
name|void
name|processCompositeTreeResponse
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|SObjectTreeResponse
argument_list|>
name|responseBody
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
specifier|final
name|SalesforceException
name|exception
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|responseBody
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
specifier|final
name|SObjectTree
name|tree
init|=
name|in
operator|.
name|getBody
argument_list|(
name|SObjectTree
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SObjectTreeResponse
name|response
init|=
name|responseBody
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasErrors
init|=
name|response
operator|.
name|hasErrors
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ReferenceId
name|referenceId
range|:
name|response
operator|.
name|getResults
argument_list|()
control|)
block|{
name|tree
operator|.
name|setIdFor
argument_list|(
name|referenceId
operator|.
name|getReferenceId
argument_list|()
argument_list|,
name|referenceId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasErrors
condition|)
block|{
name|tree
operator|.
name|setErrorFor
argument_list|(
name|referenceId
operator|.
name|getReferenceId
argument_list|()
argument_list|,
name|referenceId
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasErrors
condition|)
block|{
specifier|final
name|SalesforceException
name|withErrors
init|=
operator|new
name|SalesforceException
argument_list|(
name|response
operator|.
name|getAllErrors
argument_list|()
argument_list|,
name|exception
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|exception
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|withErrors
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|copyFromWithNewBody
argument_list|(
name|in
argument_list|,
name|tree
argument_list|)
expr_stmt|;
name|out
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// notify callback that exchange is done
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processInternal (final Class<T> bodyType, final Exchange exchange, final CompositeApiClient.Operation<T, R> clientOperation, final ResponseHandler<R> responseHandler, final AsyncCallback callback)
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
name|boolean
name|processInternal
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|bodyType
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|CompositeApiClient
operator|.
name|Operation
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|clientOperation
parameter_list|,
specifier|final
name|ResponseHandler
argument_list|<
name|R
argument_list|>
name|responseHandler
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
specifier|final
name|T
name|body
decl_stmt|;
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
try|try
block|{
name|body
operator|=
name|in
operator|.
name|getMandatoryBody
argument_list|(
name|bodyType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|clientOperation
operator|.
name|submit
argument_list|(
name|body
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
parameter_list|(
name|response
parameter_list|,
name|responseHeaders
parameter_list|,
name|exception
parameter_list|)
lambda|->
name|responseHandler
operator|.
name|handleResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|,
name|responseHeaders
argument_list|,
name|exception
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|processException (final Exchange exchange, final AsyncCallback callback, final Exception e)
specifier|static
name|boolean
name|processException
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|,
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

