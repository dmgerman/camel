begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|RestError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|BatchInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|BatchInfoList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|Error
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|JobStateEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|QueryResultList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|ContentExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|io
operator|.
name|ByteArrayBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_class
DECL|class|DefaultBulkApiClient
specifier|public
class|class
name|DefaultBulkApiClient
extends|extends
name|AbstractClientBase
implements|implements
name|BulkApiClient
block|{
DECL|field|TOKEN_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN_HEADER
init|=
literal|"X-SFDC-Session"
decl_stmt|;
DECL|field|DEFAULT_ACCEPT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|DEFAULT_ACCEPT_TYPE
init|=
name|ContentType
operator|.
name|XML
decl_stmt|;
DECL|field|context
specifier|private
name|JAXBContext
name|context
decl_stmt|;
DECL|field|objectFactory
specifier|private
name|ObjectFactory
name|objectFactory
decl_stmt|;
DECL|method|DefaultBulkApiClient (String version, SalesforceSession session, HttpClient httpClient)
specifier|public
name|DefaultBulkApiClient
parameter_list|(
name|String
name|version
parameter_list|,
name|SalesforceSession
name|session
parameter_list|,
name|HttpClient
name|httpClient
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|super
argument_list|(
name|version
argument_list|,
name|session
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|JobInfo
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error loading Bulk API DTOs: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|objectFactory
operator|=
operator|new
name|ObjectFactory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createJob (JobInfo request, final JobInfoResponseCallback callback)
specifier|public
name|void
name|createJob
parameter_list|(
name|JobInfo
name|request
parameter_list|,
specifier|final
name|JobInfoResponseCallback
name|callback
parameter_list|)
block|{
comment|// clear system fields if set
name|sanitizeJobRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
specifier|final
name|ContentExchange
name|post
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|POST
argument_list|,
name|jobUrl
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|marshalRequest
argument_list|(
name|objectFactory
operator|.
name|createJobInfo
argument_list|(
name|request
argument_list|)
argument_list|,
name|post
argument_list|,
name|APPLICATION_XML_UTF8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onResponse
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// make the call and parse the result in callback
name|doHttpRequest
argument_list|(
name|post
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|JobInfo
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|post
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// reset read only fields
DECL|method|sanitizeJobRequest (JobInfo request)
specifier|private
name|void
name|sanitizeJobRequest
parameter_list|(
name|JobInfo
name|request
parameter_list|)
block|{
name|request
operator|.
name|setApexProcessingTime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApiActiveProcessingTime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApiVersion
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreatedById
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCreatedDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberBatchesCompleted
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberBatchesFailed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberBatchesInProgress
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberBatchesQueued
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberBatchesTotal
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberRecordsFailed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberRecordsProcessed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumberRetries
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setState
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSystemModstamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSystemModstamp
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getJob (String jobId, final JobInfoResponseCallback callback)
specifier|public
name|void
name|getJob
parameter_list|(
name|String
name|jobId
parameter_list|,
specifier|final
name|JobInfoResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|get
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|,
name|jobUrl
argument_list|(
name|jobId
argument_list|)
argument_list|)
decl_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|get
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|JobInfo
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|get
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeJob (String jobId, final JobInfoResponseCallback callback)
specifier|public
name|void
name|closeJob
parameter_list|(
name|String
name|jobId
parameter_list|,
specifier|final
name|JobInfoResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|JobInfo
name|request
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|request
operator|.
name|setState
argument_list|(
name|JobStateEnum
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
specifier|final
name|ContentExchange
name|post
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|POST
argument_list|,
name|jobUrl
argument_list|(
name|jobId
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|marshalRequest
argument_list|(
name|objectFactory
operator|.
name|createJobInfo
argument_list|(
name|request
argument_list|)
argument_list|,
name|post
argument_list|,
name|APPLICATION_XML_UTF8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onResponse
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|post
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|JobInfo
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|post
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|abortJob (String jobId, final JobInfoResponseCallback callback)
specifier|public
name|void
name|abortJob
parameter_list|(
name|String
name|jobId
parameter_list|,
specifier|final
name|JobInfoResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|JobInfo
name|request
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|request
operator|.
name|setState
argument_list|(
name|JobStateEnum
operator|.
name|ABORTED
argument_list|)
expr_stmt|;
specifier|final
name|ContentExchange
name|post
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|POST
argument_list|,
name|jobUrl
argument_list|(
name|jobId
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|marshalRequest
argument_list|(
name|objectFactory
operator|.
name|createJobInfo
argument_list|(
name|request
argument_list|)
argument_list|,
name|post
argument_list|,
name|APPLICATION_XML_UTF8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onResponse
argument_list|(
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|post
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|JobInfo
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|post
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBatch (InputStream batchStream, String jobId, ContentType contentTypeEnum, final BatchInfoResponseCallback callback)
specifier|public
name|void
name|createBatch
parameter_list|(
name|InputStream
name|batchStream
parameter_list|,
name|String
name|jobId
parameter_list|,
name|ContentType
name|contentTypeEnum
parameter_list|,
specifier|final
name|BatchInfoResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|post
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|POST
argument_list|,
name|batchUrl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|post
operator|.
name|setRequestContentSource
argument_list|(
name|batchStream
argument_list|)
expr_stmt|;
name|post
operator|.
name|setRequestContentType
argument_list|(
name|getContentType
argument_list|(
name|contentTypeEnum
argument_list|)
operator|+
literal|";charset="
operator|+
name|StringUtil
operator|.
name|__UTF8
argument_list|)
expr_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|post
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|BatchInfo
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|post
argument_list|,
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBatch (String jobId, String batchId, final BatchInfoResponseCallback callback)
specifier|public
name|void
name|getBatch
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|batchId
parameter_list|,
specifier|final
name|BatchInfoResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|get
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|,
name|batchUrl
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|)
argument_list|)
decl_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|get
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|BatchInfo
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|get
argument_list|,
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllBatches (String jobId, final BatchInfoListResponseCallback callback)
specifier|public
name|void
name|getAllBatches
parameter_list|(
name|String
name|jobId
parameter_list|,
specifier|final
name|BatchInfoListResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|get
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|,
name|batchUrl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|get
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|BatchInfoList
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|get
argument_list|,
name|BatchInfoList
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getBatchInfo
argument_list|()
else|:
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRequest (String jobId, String batchId, final StreamResponseCallback callback)
specifier|public
name|void
name|getRequest
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|batchId
parameter_list|,
specifier|final
name|StreamResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|get
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|,
name|batchUrl
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|)
argument_list|)
decl_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|get
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|callback
operator|.
name|onResponse
argument_list|(
name|response
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResults (String jobId, String batchId, final StreamResponseCallback callback)
specifier|public
name|void
name|getResults
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|batchId
parameter_list|,
specifier|final
name|StreamResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|get
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|,
name|batchResultUrl
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// make the call and return the result
name|doHttpRequest
argument_list|(
name|get
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|callback
operator|.
name|onResponse
argument_list|(
name|response
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createBatchQuery (String jobId, String soqlQuery, ContentType jobContentType, final BatchInfoResponseCallback callback)
specifier|public
name|void
name|createBatchQuery
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|soqlQuery
parameter_list|,
name|ContentType
name|jobContentType
parameter_list|,
specifier|final
name|BatchInfoResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|post
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|POST
argument_list|,
name|batchUrl
argument_list|(
name|jobId
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|queryBytes
init|=
name|soqlQuery
operator|.
name|getBytes
argument_list|(
name|StringUtil
operator|.
name|__UTF8_CHARSET
argument_list|)
decl_stmt|;
name|post
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
name|queryBytes
argument_list|)
argument_list|)
expr_stmt|;
name|post
operator|.
name|setRequestContentType
argument_list|(
name|getContentType
argument_list|(
name|jobContentType
argument_list|)
operator|+
literal|";charset="
operator|+
name|StringUtil
operator|.
name|__UTF8
argument_list|)
expr_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|post
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|BatchInfo
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|post
argument_list|,
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueryResultIds (String jobId, String batchId, final QueryResultIdsCallback callback)
specifier|public
name|void
name|getQueryResultIds
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|batchId
parameter_list|,
specifier|final
name|QueryResultIdsCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|get
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|,
name|batchResultUrl
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|get
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|QueryResultList
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|value
operator|=
name|unmarshalResponse
argument_list|(
name|response
argument_list|,
name|get
argument_list|,
name|QueryResultList
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
block|}
name|callback
operator|.
name|onResponse
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|value
operator|.
name|getResult
argument_list|()
argument_list|)
else|:
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueryResult (String jobId, String batchId, String resultId, final StreamResponseCallback callback)
specifier|public
name|void
name|getQueryResult
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|batchId
parameter_list|,
name|String
name|resultId
parameter_list|,
specifier|final
name|StreamResponseCallback
name|callback
parameter_list|)
block|{
specifier|final
name|ContentExchange
name|get
init|=
name|getContentExchange
argument_list|(
name|HttpMethods
operator|.
name|GET
argument_list|,
name|batchResultUrl
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
name|resultId
argument_list|)
argument_list|)
decl_stmt|;
comment|// make the call and parse the result
name|doHttpRequest
argument_list|(
name|get
argument_list|,
operator|new
name|ClientResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|callback
operator|.
name|onResponse
argument_list|(
name|response
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAccessToken (HttpExchange httpExchange)
specifier|protected
name|void
name|setAccessToken
parameter_list|(
name|HttpExchange
name|httpExchange
parameter_list|)
block|{
name|httpExchange
operator|.
name|setRequestHeader
argument_list|(
name|TOKEN_HEADER
argument_list|,
name|accessToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doHttpRequest (ContentExchange request, ClientResponseCallback callback)
specifier|protected
name|void
name|doHttpRequest
parameter_list|(
name|ContentExchange
name|request
parameter_list|,
name|ClientResponseCallback
name|callback
parameter_list|)
block|{
comment|// set access token for all requests
name|setAccessToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// set default charset
name|request
operator|.
name|setRequestHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT_CHARSET
argument_list|,
name|StringUtil
operator|.
name|__UTF8
argument_list|)
expr_stmt|;
comment|// TODO check if this is really needed or not, since SF response content type seems fixed
comment|// check if the default accept content type must be used
if|if
condition|(
operator|!
name|request
operator|.
name|getRequestFields
argument_list|()
operator|.
name|containsKey
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
condition|)
block|{
specifier|final
name|String
name|contentType
init|=
name|getContentType
argument_list|(
name|DEFAULT_ACCEPT_TYPE
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRequestHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|// request content type and charset is set by the request entity
block|}
name|super
operator|.
name|doHttpRequest
argument_list|(
name|request
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
DECL|method|getContentType (ContentType type)
specifier|private
specifier|static
name|String
name|getContentType
parameter_list|(
name|ContentType
name|type
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CSV
case|:
name|result
operator|=
literal|"text/csv"
expr_stmt|;
break|break;
case|case
name|XML
case|:
name|result
operator|=
literal|"application/xml"
expr_stmt|;
break|break;
case|case
name|ZIP_CSV
case|:
case|case
name|ZIP_XML
case|:
name|result
operator|=
name|type
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|createRestException (ContentExchange request, String reason)
specifier|protected
name|SalesforceException
name|createRestException
parameter_list|(
name|ContentExchange
name|request
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
comment|// this must be of type Error
try|try
block|{
specifier|final
name|Error
name|error
init|=
name|unmarshalResponse
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|request
operator|.
name|getResponseContentBytes
argument_list|()
argument_list|)
argument_list|,
name|request
argument_list|,
name|Error
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|RestError
name|restError
init|=
operator|new
name|RestError
argument_list|()
decl_stmt|;
name|restError
operator|.
name|setErrorCode
argument_list|(
name|error
operator|.
name|getExceptionCode
argument_list|()
argument_list|)
expr_stmt|;
name|restError
operator|.
name|setMessage
argument_list|(
name|error
operator|.
name|getExceptionMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SalesforceException
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|restError
argument_list|)
argument_list|,
name|request
operator|.
name|getResponseStatus
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error un-marshaling Salesforce Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
return|return
operator|new
name|SalesforceException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
DECL|method|unmarshalResponse (InputStream response, ContentExchange request, Class<T> resultClass)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|unmarshalResponse
parameter_list|(
name|InputStream
name|response
parameter_list|,
name|ContentExchange
name|request
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|resultClass
parameter_list|)
throws|throws
name|SalesforceException
block|{
try|try
block|{
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|JAXBElement
argument_list|<
name|T
argument_list|>
name|result
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|response
argument_list|)
argument_list|,
name|resultClass
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error unmarshaling response {%s:%s} : %s"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error unmarshaling response for {%s:%s} : %s"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|marshalRequest (Object input, ContentExchange request, String contentType)
specifier|private
name|void
name|marshalRequest
parameter_list|(
name|Object
name|input
parameter_list|,
name|ContentExchange
name|request
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|SalesforceException
block|{
try|try
block|{
name|Marshaller
name|marshaller
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|input
argument_list|,
name|byteStream
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRequestContent
argument_list|(
operator|new
name|ByteArrayBuffer
argument_list|(
name|byteStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRequestContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error marshaling request for {%s:%s} : %s"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error marshaling request for {%s:%s} : %s"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|jobUrl (String jobId)
specifier|private
name|String
name|jobUrl
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
if|if
condition|(
name|jobId
operator|!=
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|instanceUrl
operator|+
literal|"/services/async/"
operator|+
name|version
operator|+
literal|"/job/"
operator|+
name|jobId
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|instanceUrl
operator|+
literal|"/services/async/"
operator|+
name|version
operator|+
literal|"/job"
return|;
block|}
block|}
DECL|method|batchUrl (String jobId, String batchId)
specifier|private
name|String
name|batchUrl
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|batchId
parameter_list|)
block|{
if|if
condition|(
name|batchId
operator|!=
literal|null
condition|)
block|{
return|return
name|jobUrl
argument_list|(
name|jobId
argument_list|)
operator|+
literal|"/batch/"
operator|+
name|batchId
return|;
block|}
else|else
block|{
return|return
name|jobUrl
argument_list|(
name|jobId
argument_list|)
operator|+
literal|"/batch"
return|;
block|}
block|}
DECL|method|batchResultUrl (String jobId, String batchId, String resultId)
specifier|private
name|String
name|batchResultUrl
parameter_list|(
name|String
name|jobId
parameter_list|,
name|String
name|batchId
parameter_list|,
name|String
name|resultId
parameter_list|)
block|{
if|if
condition|(
name|resultId
operator|!=
literal|null
condition|)
block|{
return|return
name|batchUrl
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|)
operator|+
literal|"/result/"
operator|+
name|resultId
return|;
block|}
else|else
block|{
return|return
name|batchUrl
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|)
operator|+
literal|"/result"
return|;
block|}
block|}
block|}
end_class

end_unit

