begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|VerifiableComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|OperationName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|streaming
operator|.
name|SubscriptionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|GlobalSSLContextParametersSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|ProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Socks4Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|BasicAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|DigestAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceLoginConfig
operator|.
name|DEFAULT_LOGIN_URL
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link SalesforceEndpoint}.  */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"verifiers"
argument_list|,
name|enums
operator|=
literal|"parameters,connectivity"
argument_list|)
DECL|class|SalesforceComponent
specifier|public
class|class
name|SalesforceComponent
extends|extends
name|DefaultComponent
implements|implements
name|VerifiableComponent
block|{
DECL|field|CONNECTION_TIMEOUT
specifier|static
specifier|final
name|int
name|CONNECTION_TIMEOUT
init|=
literal|60000
decl_stmt|;
DECL|field|SOBJECT_NAME_PATTERN
specifier|static
specifier|final
name|Pattern
name|SOBJECT_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^.*[\\?&]sObjectName=([^&,]+).*$"
argument_list|)
decl_stmt|;
DECL|field|APEX_CALL_PREFIX
specifier|static
specifier|final
name|String
name|APEX_CALL_PREFIX
init|=
name|OperationName
operator|.
name|APEX_CALL
operator|.
name|value
argument_list|()
operator|+
literal|"/"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SalesforceComponent
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"All authentication configuration in one nested bean, all properties set there can be set"
operator|+
literal|" directly on the component as well"
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|)
DECL|field|loginConfig
specifier|private
name|SalesforceLoginConfig
name|loginConfig
decl_stmt|;
comment|// allow fine grained login as well
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"URL of the Salesforce instance, by default set to "
operator|+
name|DEFAULT_LOGIN_URL
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|defaultValue
operator|=
name|DEFAULT_LOGIN_URL
argument_list|,
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|loginUrl
specifier|private
name|String
name|loginUrl
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"OAuth Consumer Key of the connected app configured in the Salesforce instance setup."
operator|+
literal|" Typically a connected app needs to be configured but one can be provided by installing a package."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"OAuth Consumer Secret of the connected app configured in the Salesforce instance setup."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|clientSecret
specifier|private
name|String
name|clientSecret
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Refresh token already obtained in the refresh token OAuth flow. One needs to setup a web"
operator|+
literal|" application and configure a callback URL to receive the refresh token, or configure using the builtin"
operator|+
literal|" callback at https://login.salesforce.com/services/oauth2/success or "
operator|+
literal|" https://test.salesforce.com/services/oauth2/success and then retrive the refresh_token from the URL at the"
operator|+
literal|" end of the flow. Note that in development organizations Salesforce allows hosting the callback web "
operator|+
literal|" application at localhost."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|refreshToken
specifier|private
name|String
name|refreshToken
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Username used in OAuth flow to gain access to access token. It's easy to get started with"
operator|+
literal|" password OAuth flow, but in general one should avoid it as it is deemed less secure than other flows."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Password used in OAuth flow to gain access to access token. It's easy to get started with"
operator|+
literal|" password OAuth flow, but in general one should avoid it as it is deemed less secure than other flows."
operator|+
literal|" Make sure that you append security token to the end of the password if using one."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"KeyStore parameters to use in OAuth JWT flow. The KeyStore should contain only one entry"
operator|+
literal|" with private key and certificate. Salesforce does not verify the certificate chain, so this can easily be"
operator|+
literal|" a selfsigned certificate. Make sure that you upload the certificate to the corresponding connected app."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|keystore
specifier|private
name|KeyStoreParameters
name|keystore
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Explicit authentication method to be used, one of USERNAME_PASSWORD, REFRESH_TOKEN or JWT."
operator|+
literal|" Salesforce component can auto-determine the authentication method to use from the properties set, set this "
operator|+
literal|" property to eliminate any ambiguity."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|,
name|secret
operator|=
literal|false
argument_list|,
name|enums
operator|=
literal|"USERNAME_PASSWORD,REFRESH_TOKEN,JWT"
argument_list|)
DECL|field|authenticationType
specifier|private
name|AuthenticationType
name|authenticationType
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"If set to true prevents the component from authenticating to Salesforce with the start of"
operator|+
literal|" the component. You would generaly set this to the (default) false and authenticate early and be immediately"
operator|+
literal|" aware of any authentication issues."
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|)
DECL|field|lazyLogin
specifier|private
name|boolean
name|lazyLogin
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Global endpoint configuration - use to set values that are common to all endpoints"
argument_list|,
name|label
operator|=
literal|"common,advanced"
argument_list|)
DECL|field|config
specifier|private
name|SalesforceEndpointConfig
name|config
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Used to set any properties that can be configured on the underlying HTTP client. Have a"
operator|+
literal|" look at properties of SalesforceHttpClient and the Jetty HttpClient for all available options."
argument_list|,
name|label
operator|=
literal|"common,advanced"
argument_list|)
DECL|field|httpClientProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientProperties
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"SSL parameters to use, see SSLContextParameters class for all available options."
argument_list|,
name|label
operator|=
literal|"common,security"
argument_list|)
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
comment|// Proxy host and port
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Hostname of the HTTP proxy server to use."
argument_list|,
name|label
operator|=
literal|"common,proxy"
argument_list|)
DECL|field|httpProxyHost
specifier|private
name|String
name|httpProxyHost
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Port number of the HTTP proxy server to use."
argument_list|,
name|label
operator|=
literal|"common,proxy"
argument_list|)
DECL|field|httpProxyPort
specifier|private
name|Integer
name|httpProxyPort
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"If set to true the configures the HTTP proxy to use as a SOCKS4 proxy."
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|label
operator|=
literal|"common,proxy"
argument_list|)
DECL|field|isHttpProxySocks4
specifier|private
name|boolean
name|isHttpProxySocks4
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"If set to false disables the use of TLS when accessing the HTTP proxy."
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"common,proxy,security"
argument_list|)
DECL|field|isHttpProxySecure
specifier|private
name|boolean
name|isHttpProxySecure
init|=
literal|true
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"A list of addresses for which HTTP proxy server should be used."
argument_list|,
name|label
operator|=
literal|"common,proxy"
argument_list|)
DECL|field|httpProxyIncludedAddresses
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyIncludedAddresses
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"A list of addresses for which HTTP proxy server should not be used."
argument_list|,
name|label
operator|=
literal|"common,proxy"
argument_list|)
DECL|field|httpProxyExcludedAddresses
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyExcludedAddresses
decl_stmt|;
comment|// Proxy basic authentication
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Username to use to authenticate against the HTTP proxy server."
argument_list|,
name|label
operator|=
literal|"common,proxy,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|httpProxyUsername
specifier|private
name|String
name|httpProxyUsername
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Password to use to authenticate against the HTTP proxy server."
argument_list|,
name|label
operator|=
literal|"common,proxy,security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|httpProxyPassword
specifier|private
name|String
name|httpProxyPassword
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Used in authentication against the HTTP proxy server, needs to match the URI of the proxy"
operator|+
literal|" server in order for the httpProxyUsername and httpProxyPassword to be used for authentication."
argument_list|,
name|label
operator|=
literal|"common,proxy,security"
argument_list|)
DECL|field|httpProxyAuthUri
specifier|private
name|String
name|httpProxyAuthUri
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"Realm of the proxy server, used in preemptive Basic/Digest authentication methods against"
operator|+
literal|" the HTTP proxy server."
argument_list|,
name|label
operator|=
literal|"common,proxy,security"
argument_list|)
DECL|field|httpProxyRealm
specifier|private
name|String
name|httpProxyRealm
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"If set to true Digest authentication will be used when authenticating to the HTTP proxy,"
operator|+
literal|"otherwise Basic authorization method will be used"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|label
operator|=
literal|"common,proxy,security"
argument_list|)
DECL|field|httpProxyUseDigestAuth
specifier|private
name|boolean
name|httpProxyUseDigestAuth
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|description
operator|=
literal|"In what packages are the generated DTO classes. Typically the classes would be generated"
operator|+
literal|" using camel-salesforce-maven-plugin. Set it if using the generated DTOs to gain the benefit of using short "
operator|+
literal|" SObject names in parameters/header values."
argument_list|,
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|packages
specifier|private
name|String
index|[]
name|packages
decl_stmt|;
comment|// component state
DECL|field|httpClient
specifier|private
name|SalesforceHttpClient
name|httpClient
decl_stmt|;
DECL|field|session
specifier|private
name|SalesforceSession
name|session
decl_stmt|;
DECL|field|classMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classMap
decl_stmt|;
comment|// Lazily created helper for consumer endpoints
DECL|field|subscriptionHelper
specifier|private
name|SubscriptionHelper
name|subscriptionHelper
decl_stmt|;
DECL|method|SalesforceComponent ()
specifier|public
name|SalesforceComponent
parameter_list|()
block|{     }
DECL|method|SalesforceComponent (CamelContext context)
specifier|public
name|SalesforceComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// get Operation from remaining URI
name|OperationName
name|operationName
init|=
literal|null
decl_stmt|;
name|String
name|topicName
init|=
literal|null
decl_stmt|;
name|String
name|apexUrl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating endpoint for: {}"
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|APEX_CALL_PREFIX
argument_list|)
condition|)
block|{
comment|// extract APEX URL
name|apexUrl
operator|=
name|remaining
operator|.
name|substring
argument_list|(
name|APEX_CALL_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|OperationName
operator|.
name|APEX_CALL
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|operationName
operator|=
name|OperationName
operator|.
name|fromValue
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// if its not an operation name, treat is as topic name for consumer endpoints
name|topicName
operator|=
name|remaining
expr_stmt|;
block|}
comment|// create endpoint config
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
operator|new
name|SalesforceEndpointConfig
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getHttpClient
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// set the component's httpClient as default
name|config
operator|.
name|setHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
comment|// create a deep copy and map parameters
specifier|final
name|SalesforceEndpointConfig
name|copy
init|=
name|config
operator|.
name|copy
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|copy
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// set apexUrl in endpoint config
if|if
condition|(
name|apexUrl
operator|!=
literal|null
condition|)
block|{
name|copy
operator|.
name|setApexUrl
argument_list|(
name|apexUrl
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SalesforceEndpoint
name|endpoint
init|=
operator|new
name|SalesforceEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|copy
argument_list|,
name|operationName
argument_list|,
name|topicName
argument_list|)
decl_stmt|;
comment|// map remaining parameters to endpoint (specifically, synchronous)
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// if operation is APEX call, map remaining parameters to query params
if|if
condition|(
name|operationName
operator|==
name|OperationName
operator|.
name|APEX_CALL
operator|&&
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|copy
operator|.
name|getApexQueryParams
argument_list|()
argument_list|)
decl_stmt|;
comment|// override component params with endpoint params
name|queryParams
operator|.
name|putAll
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copy
operator|.
name|setApexQueryParams
argument_list|(
name|queryParams
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
DECL|method|parsePackages ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|parsePackages
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|getCamelContext
argument_list|()
operator|.
name|getPackageScanClassResolver
argument_list|()
operator|.
name|findImplementations
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|,
name|packages
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
range|:
name|classes
control|)
block|{
comment|// findImplementations also returns AbstractSObjectBase for some reason!!!
if|if
condition|(
name|AbstractSObjectBase
operator|.
name|class
operator|!=
name|aClass
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|aClass
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|aClass
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|loginConfig
operator|==
literal|null
condition|)
block|{
name|loginConfig
operator|=
operator|new
name|SalesforceLoginConfig
argument_list|()
expr_stmt|;
name|loginConfig
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setClientSecret
argument_list|(
name|clientSecret
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setKeystore
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setLazyLogin
argument_list|(
name|lazyLogin
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setLoginUrl
argument_list|(
name|loginUrl
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setRefreshToken
argument_list|(
name|refreshToken
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setType
argument_list|(
name|authenticationType
argument_list|)
expr_stmt|;
name|loginConfig
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created login configuration: {}"
argument_list|,
name|loginConfig
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using shared login configuration: {}"
argument_list|,
name|loginConfig
argument_list|)
expr_stmt|;
block|}
comment|// create a Jetty HttpClient if not already set
if|if
condition|(
literal|null
operator|==
name|httpClient
condition|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getHttpClient
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|httpClient
operator|=
name|config
operator|.
name|getHttpClient
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// set ssl context parameters if set
name|SSLContextParameters
name|contextParameters
init|=
name|sslContextParameters
decl_stmt|;
if|if
condition|(
name|contextParameters
operator|==
literal|null
condition|)
block|{
name|contextParameters
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|CamelContextHelper
operator|.
name|findByType
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|GlobalSSLContextParametersSupplier
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Supplier
operator|::
name|get
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextParameters
operator|==
literal|null
condition|)
block|{
name|contextParameters
operator|=
operator|new
name|SSLContextParameters
argument_list|()
expr_stmt|;
block|}
specifier|final
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|sslContextFactory
operator|.
name|setSslContext
argument_list|(
name|contextParameters
operator|.
name|createSSLContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|httpClient
operator|=
operator|new
name|SalesforceHttpClient
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
comment|// default settings, use httpClientProperties to set other properties
name|httpClient
operator|.
name|setConnectTimeout
argument_list|(
name|CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set HTTP client parameters
if|if
condition|(
name|httpClientProperties
operator|!=
literal|null
operator|&&
operator|!
name|httpClientProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|httpClient
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|httpClientProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set HTTP proxy settings
if|if
condition|(
name|this
operator|.
name|httpProxyHost
operator|!=
literal|null
operator|&&
name|httpProxyPort
operator|!=
literal|null
condition|)
block|{
name|Origin
operator|.
name|Address
name|proxyAddress
init|=
operator|new
name|Origin
operator|.
name|Address
argument_list|(
name|this
operator|.
name|httpProxyHost
argument_list|,
name|this
operator|.
name|httpProxyPort
argument_list|)
decl_stmt|;
name|ProxyConfiguration
operator|.
name|Proxy
name|proxy
decl_stmt|;
if|if
condition|(
name|isHttpProxySocks4
condition|)
block|{
name|proxy
operator|=
operator|new
name|Socks4Proxy
argument_list|(
name|proxyAddress
argument_list|,
name|isHttpProxySecure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|=
operator|new
name|HttpProxy
argument_list|(
name|proxyAddress
argument_list|,
name|isHttpProxySecure
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpProxyIncludedAddresses
operator|!=
literal|null
operator|&&
operator|!
name|httpProxyIncludedAddresses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|proxy
operator|.
name|getIncludedAddresses
argument_list|()
operator|.
name|addAll
argument_list|(
name|httpProxyIncludedAddresses
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpProxyExcludedAddresses
operator|!=
literal|null
operator|&&
operator|!
name|httpProxyExcludedAddresses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|proxy
operator|.
name|getExcludedAddresses
argument_list|()
operator|.
name|addAll
argument_list|(
name|httpProxyExcludedAddresses
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|getProxyConfiguration
argument_list|()
operator|.
name|getProxies
argument_list|()
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|httpProxyUsername
operator|!=
literal|null
operator|&&
name|httpProxyPassword
operator|!=
literal|null
condition|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|httpProxyAuthUri
argument_list|,
literal|"httpProxyAuthUri"
argument_list|)
expr_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|httpProxyRealm
argument_list|,
literal|"httpProxyRealm"
argument_list|)
expr_stmt|;
specifier|final
name|Authentication
name|authentication
decl_stmt|;
if|if
condition|(
name|httpProxyUseDigestAuth
condition|)
block|{
name|authentication
operator|=
operator|new
name|DigestAuthentication
argument_list|(
operator|new
name|URI
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authentication
operator|=
operator|new
name|BasicAuthentication
argument_list|(
operator|new
name|URI
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|getAuthenticationStore
argument_list|()
operator|.
name|addAuthentication
argument_list|(
name|authentication
argument_list|)
expr_stmt|;
block|}
comment|// support restarts
if|if
condition|(
name|this
operator|.
name|session
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|session
operator|=
operator|new
name|SalesforceSession
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|httpClient
argument_list|,
name|httpClient
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|loginConfig
argument_list|)
expr_stmt|;
block|}
comment|// set session before calling start()
name|httpClient
operator|.
name|setSession
argument_list|(
name|this
operator|.
name|session
argument_list|)
expr_stmt|;
comment|// start the Jetty client to initialize thread pool, etc.
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// login at startup if lazyLogin is disabled
if|if
condition|(
operator|!
name|loginConfig
operator|.
name|isLazyLogin
argument_list|()
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|packages
operator|!=
literal|null
operator|&&
name|packages
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// parse the packages to create SObject name to class map
name|classMap
operator|=
name|parsePackages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} generated classes in packages: {}"
argument_list|,
name|classMap
operator|.
name|size
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|packages
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use an empty map to avoid NPEs later
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing property packages, getSObject* operations will NOT work"
argument_list|)
expr_stmt|;
name|classMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subscriptionHelper
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|subscriptionHelper
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|classMap
operator|!=
literal|null
condition|)
block|{
name|classMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|subscriptionHelper
operator|!=
literal|null
condition|)
block|{
comment|// shutdown all streaming connections
comment|// note that this is done in the component, and not in consumer
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|subscriptionHelper
argument_list|)
expr_stmt|;
name|subscriptionHelper
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getAccessToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// logout of Salesforce
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
comment|// shutdown http client connections
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// destroy http client if it was created by the component
if|if
condition|(
name|config
operator|.
name|getHttpClient
argument_list|()
operator|==
literal|null
condition|)
block|{
name|httpClient
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|httpClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSubscriptionHelper ()
specifier|public
name|SubscriptionHelper
name|getSubscriptionHelper
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|subscriptionHelper
operator|==
literal|null
condition|)
block|{
comment|// lazily create subscription helper
name|subscriptionHelper
operator|=
operator|new
name|SubscriptionHelper
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// also start the helper to connect to Salesforce
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|subscriptionHelper
argument_list|)
expr_stmt|;
block|}
return|return
name|subscriptionHelper
return|;
block|}
DECL|method|getAuthenticationType ()
specifier|public
name|AuthenticationType
name|getAuthenticationType
parameter_list|()
block|{
return|return
name|authenticationType
return|;
block|}
DECL|method|setAuthenticationType (AuthenticationType authenticationType)
specifier|public
name|void
name|setAuthenticationType
parameter_list|(
name|AuthenticationType
name|authenticationType
parameter_list|)
block|{
name|this
operator|.
name|authenticationType
operator|=
name|authenticationType
expr_stmt|;
block|}
DECL|method|getLoginConfig ()
specifier|public
name|SalesforceLoginConfig
name|getLoginConfig
parameter_list|()
block|{
return|return
name|loginConfig
return|;
block|}
DECL|method|setLoginConfig (SalesforceLoginConfig loginConfig)
specifier|public
name|void
name|setLoginConfig
parameter_list|(
name|SalesforceLoginConfig
name|loginConfig
parameter_list|)
block|{
name|this
operator|.
name|loginConfig
operator|=
name|loginConfig
expr_stmt|;
block|}
DECL|method|setLoginUrl (String loginUrl)
specifier|public
name|void
name|setLoginUrl
parameter_list|(
name|String
name|loginUrl
parameter_list|)
block|{
name|this
operator|.
name|loginUrl
operator|=
name|loginUrl
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
DECL|method|setClientId (String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
block|}
DECL|method|getClientSecret ()
specifier|public
name|String
name|getClientSecret
parameter_list|()
block|{
return|return
name|clientSecret
return|;
block|}
DECL|method|setClientSecret (String clientSecret)
specifier|public
name|void
name|setClientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|this
operator|.
name|clientSecret
operator|=
name|clientSecret
expr_stmt|;
block|}
DECL|method|setKeystore (final KeyStoreParameters keystore)
specifier|public
name|void
name|setKeystore
parameter_list|(
specifier|final
name|KeyStoreParameters
name|keystore
parameter_list|)
block|{
name|this
operator|.
name|keystore
operator|=
name|keystore
expr_stmt|;
block|}
DECL|method|getKeystore ()
specifier|public
name|KeyStoreParameters
name|getKeystore
parameter_list|()
block|{
return|return
name|keystore
return|;
block|}
DECL|method|getRefreshToken ()
specifier|public
name|String
name|getRefreshToken
parameter_list|()
block|{
return|return
name|refreshToken
return|;
block|}
DECL|method|setRefreshToken (String refreshToken)
specifier|public
name|void
name|setRefreshToken
parameter_list|(
name|String
name|refreshToken
parameter_list|)
block|{
name|this
operator|.
name|refreshToken
operator|=
name|refreshToken
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|isLazyLogin ()
specifier|public
name|boolean
name|isLazyLogin
parameter_list|()
block|{
return|return
name|lazyLogin
return|;
block|}
DECL|method|setLazyLogin (boolean lazyLogin)
specifier|public
name|void
name|setLazyLogin
parameter_list|(
name|boolean
name|lazyLogin
parameter_list|)
block|{
name|this
operator|.
name|lazyLogin
operator|=
name|lazyLogin
expr_stmt|;
block|}
DECL|method|getConfig ()
specifier|public
name|SalesforceEndpointConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
DECL|method|setConfig (SalesforceEndpointConfig config)
specifier|public
name|void
name|setConfig
parameter_list|(
name|SalesforceEndpointConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getHttpClientProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHttpClientProperties
parameter_list|()
block|{
return|return
name|httpClientProperties
return|;
block|}
DECL|method|setHttpClientProperties (Map<String, Object> httpClientProperties)
specifier|public
name|void
name|setHttpClientProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientProperties
parameter_list|)
block|{
name|this
operator|.
name|httpClientProperties
operator|=
name|httpClientProperties
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getHttpProxyHost ()
specifier|public
name|String
name|getHttpProxyHost
parameter_list|()
block|{
return|return
name|httpProxyHost
return|;
block|}
DECL|method|setHttpProxyHost (String httpProxyHost)
specifier|public
name|void
name|setHttpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|this
operator|.
name|httpProxyHost
operator|=
name|httpProxyHost
expr_stmt|;
block|}
DECL|method|getHttpProxyPort ()
specifier|public
name|Integer
name|getHttpProxyPort
parameter_list|()
block|{
return|return
name|httpProxyPort
return|;
block|}
DECL|method|setHttpProxyPort (Integer httpProxyPort)
specifier|public
name|void
name|setHttpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPort
operator|=
name|httpProxyPort
expr_stmt|;
block|}
DECL|method|getHttpProxyUsername ()
specifier|public
name|String
name|getHttpProxyUsername
parameter_list|()
block|{
return|return
name|httpProxyUsername
return|;
block|}
DECL|method|setHttpProxyUsername (String httpProxyUsername)
specifier|public
name|void
name|setHttpProxyUsername
parameter_list|(
name|String
name|httpProxyUsername
parameter_list|)
block|{
name|this
operator|.
name|httpProxyUsername
operator|=
name|httpProxyUsername
expr_stmt|;
block|}
DECL|method|getHttpProxyPassword ()
specifier|public
name|String
name|getHttpProxyPassword
parameter_list|()
block|{
return|return
name|httpProxyPassword
return|;
block|}
DECL|method|setHttpProxyPassword (String httpProxyPassword)
specifier|public
name|void
name|setHttpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPassword
operator|=
name|httpProxyPassword
expr_stmt|;
block|}
DECL|method|isHttpProxySocks4 ()
specifier|public
name|boolean
name|isHttpProxySocks4
parameter_list|()
block|{
return|return
name|isHttpProxySocks4
return|;
block|}
DECL|method|setIsHttpProxySocks4 (boolean isHttpProxySocks4)
specifier|public
name|void
name|setIsHttpProxySocks4
parameter_list|(
name|boolean
name|isHttpProxySocks4
parameter_list|)
block|{
name|this
operator|.
name|isHttpProxySocks4
operator|=
name|isHttpProxySocks4
expr_stmt|;
block|}
DECL|method|isHttpProxySecure ()
specifier|public
name|boolean
name|isHttpProxySecure
parameter_list|()
block|{
return|return
name|isHttpProxySecure
return|;
block|}
DECL|method|setIsHttpProxySecure (boolean isHttpProxySecure)
specifier|public
name|void
name|setIsHttpProxySecure
parameter_list|(
name|boolean
name|isHttpProxySecure
parameter_list|)
block|{
name|this
operator|.
name|isHttpProxySecure
operator|=
name|isHttpProxySecure
expr_stmt|;
block|}
DECL|method|getHttpProxyIncludedAddresses ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHttpProxyIncludedAddresses
parameter_list|()
block|{
return|return
name|httpProxyIncludedAddresses
return|;
block|}
DECL|method|setHttpProxyIncludedAddresses (Set<String> httpProxyIncludedAddresses)
specifier|public
name|void
name|setHttpProxyIncludedAddresses
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyIncludedAddresses
parameter_list|)
block|{
name|this
operator|.
name|httpProxyIncludedAddresses
operator|=
name|httpProxyIncludedAddresses
expr_stmt|;
block|}
DECL|method|getHttpProxyExcludedAddresses ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHttpProxyExcludedAddresses
parameter_list|()
block|{
return|return
name|httpProxyExcludedAddresses
return|;
block|}
DECL|method|setHttpProxyExcludedAddresses (Set<String> httpProxyExcludedAddresses)
specifier|public
name|void
name|setHttpProxyExcludedAddresses
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyExcludedAddresses
parameter_list|)
block|{
name|this
operator|.
name|httpProxyExcludedAddresses
operator|=
name|httpProxyExcludedAddresses
expr_stmt|;
block|}
DECL|method|getHttpProxyAuthUri ()
specifier|public
name|String
name|getHttpProxyAuthUri
parameter_list|()
block|{
return|return
name|httpProxyAuthUri
return|;
block|}
DECL|method|setHttpProxyAuthUri (String httpProxyAuthUri)
specifier|public
name|void
name|setHttpProxyAuthUri
parameter_list|(
name|String
name|httpProxyAuthUri
parameter_list|)
block|{
name|this
operator|.
name|httpProxyAuthUri
operator|=
name|httpProxyAuthUri
expr_stmt|;
block|}
DECL|method|getHttpProxyRealm ()
specifier|public
name|String
name|getHttpProxyRealm
parameter_list|()
block|{
return|return
name|httpProxyRealm
return|;
block|}
DECL|method|setHttpProxyRealm (String httpProxyRealm)
specifier|public
name|void
name|setHttpProxyRealm
parameter_list|(
name|String
name|httpProxyRealm
parameter_list|)
block|{
name|this
operator|.
name|httpProxyRealm
operator|=
name|httpProxyRealm
expr_stmt|;
block|}
DECL|method|isHttpProxyUseDigestAuth ()
specifier|public
name|boolean
name|isHttpProxyUseDigestAuth
parameter_list|()
block|{
return|return
name|httpProxyUseDigestAuth
return|;
block|}
DECL|method|setHttpProxyUseDigestAuth (boolean httpProxyUseDigestAuth)
specifier|public
name|void
name|setHttpProxyUseDigestAuth
parameter_list|(
name|boolean
name|httpProxyUseDigestAuth
parameter_list|)
block|{
name|this
operator|.
name|httpProxyUseDigestAuth
operator|=
name|httpProxyUseDigestAuth
expr_stmt|;
block|}
DECL|method|getPackages ()
specifier|public
name|String
index|[]
name|getPackages
parameter_list|()
block|{
return|return
name|packages
return|;
block|}
DECL|method|setPackages (String[] packages)
specifier|public
name|void
name|setPackages
parameter_list|(
name|String
index|[]
name|packages
parameter_list|)
block|{
name|this
operator|.
name|packages
operator|=
name|packages
expr_stmt|;
block|}
DECL|method|setPackages (String packages)
specifier|public
name|void
name|setPackages
parameter_list|(
name|String
name|packages
parameter_list|)
block|{
comment|// split using comma
if|if
condition|(
name|packages
operator|!=
literal|null
condition|)
block|{
name|setPackages
argument_list|(
name|packages
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSession ()
specifier|public
name|SalesforceSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
DECL|method|getClassMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getClassMap
parameter_list|()
block|{
return|return
name|classMap
return|;
block|}
DECL|method|getVerifier ()
specifier|public
name|ComponentVerifier
name|getVerifier
parameter_list|()
block|{
return|return
operator|new
name|SalesforceComponentVerifier
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

