begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractQueryRecordsBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|OperationName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|PayloadFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|dto
operator|.
name|NotifyForFieldsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|dto
operator|.
name|NotifyForOperationsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|streaming
operator|.
name|SubscriptionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|ProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Socks4Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|BasicAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|DigestAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link SalesforceEndpoint}.  */
end_comment

begin_class
DECL|class|SalesforceComponent
specifier|public
class|class
name|SalesforceComponent
extends|extends
name|UriEndpointComponent
implements|implements
name|EndpointCompleter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SalesforceComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONNECTION_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|CONNECTION_TIMEOUT
init|=
literal|60000
decl_stmt|;
DECL|field|SOBJECT_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SOBJECT_NAME_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^.*[\\?&]sObjectName=([^&,]+).*$"
argument_list|)
decl_stmt|;
DECL|field|APEX_CALL_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|APEX_CALL_PREFIX
init|=
name|OperationName
operator|.
name|APEX_CALL
operator|.
name|value
argument_list|()
operator|+
literal|"/"
decl_stmt|;
DECL|field|loginConfig
specifier|private
name|SalesforceLoginConfig
name|loginConfig
decl_stmt|;
DECL|field|config
specifier|private
name|SalesforceEndpointConfig
name|config
decl_stmt|;
comment|// HTTP client parameters, map of property-name to value
DECL|field|httpClientProperties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientProperties
decl_stmt|;
comment|// SSL parameters
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
comment|// Proxy host and port
DECL|field|httpProxyHost
specifier|private
name|String
name|httpProxyHost
decl_stmt|;
DECL|field|httpProxyPort
specifier|private
name|Integer
name|httpProxyPort
decl_stmt|;
DECL|field|isHttpProxySocks4
specifier|private
name|boolean
name|isHttpProxySocks4
decl_stmt|;
DECL|field|isHttpProxySecure
specifier|private
name|boolean
name|isHttpProxySecure
init|=
literal|true
decl_stmt|;
DECL|field|httpProxyIncludedAddresses
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyIncludedAddresses
decl_stmt|;
DECL|field|httpProxyExcludedAddresses
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyExcludedAddresses
decl_stmt|;
comment|// Proxy basic authentication
DECL|field|httpProxyUsername
specifier|private
name|String
name|httpProxyUsername
decl_stmt|;
DECL|field|httpProxyPassword
specifier|private
name|String
name|httpProxyPassword
decl_stmt|;
DECL|field|httpProxyAuthUri
specifier|private
name|String
name|httpProxyAuthUri
decl_stmt|;
DECL|field|httpProxyRealm
specifier|private
name|String
name|httpProxyRealm
decl_stmt|;
DECL|field|httpProxyUseDigestAuth
specifier|private
name|boolean
name|httpProxyUseDigestAuth
decl_stmt|;
comment|// DTO packages to scan
DECL|field|packages
specifier|private
name|String
index|[]
name|packages
decl_stmt|;
comment|// component state
DECL|field|httpClient
specifier|private
name|SalesforceHttpClient
name|httpClient
decl_stmt|;
DECL|field|session
specifier|private
name|SalesforceSession
name|session
decl_stmt|;
DECL|field|classMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classMap
decl_stmt|;
comment|// Lazily created helper for consumer endpoints
DECL|field|subscriptionHelper
specifier|private
name|SubscriptionHelper
name|subscriptionHelper
decl_stmt|;
DECL|method|SalesforceComponent ()
specifier|public
name|SalesforceComponent
parameter_list|()
block|{
name|super
argument_list|(
name|SalesforceEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|SalesforceComponent (CamelContext context)
specifier|public
name|SalesforceComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|SalesforceEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// get Operation from remaining URI
name|OperationName
name|operationName
init|=
literal|null
decl_stmt|;
name|String
name|topicName
init|=
literal|null
decl_stmt|;
name|String
name|apexUrl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating endpoint for: {}"
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
if|if
condition|(
name|remaining
operator|.
name|startsWith
argument_list|(
name|APEX_CALL_PREFIX
argument_list|)
condition|)
block|{
comment|// extract APEX URL
name|apexUrl
operator|=
name|remaining
operator|.
name|substring
argument_list|(
name|APEX_CALL_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|OperationName
operator|.
name|APEX_CALL
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|operationName
operator|=
name|OperationName
operator|.
name|fromValue
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|// if its not an operation name, treat is as topic name for consumer endpoints
name|topicName
operator|=
name|remaining
expr_stmt|;
block|}
comment|// create endpoint config
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
operator|new
name|SalesforceEndpointConfig
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getHttpClient
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// set the component's httpClient as default
name|config
operator|.
name|setHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
comment|// create a deep copy and map parameters
specifier|final
name|SalesforceEndpointConfig
name|copy
init|=
name|config
operator|.
name|copy
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|copy
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// set apexUrl in endpoint config
if|if
condition|(
name|apexUrl
operator|!=
literal|null
condition|)
block|{
name|copy
operator|.
name|setApexUrl
argument_list|(
name|apexUrl
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SalesforceEndpoint
name|endpoint
init|=
operator|new
name|SalesforceEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|copy
argument_list|,
name|operationName
argument_list|,
name|topicName
argument_list|)
decl_stmt|;
comment|// map remaining parameters to endpoint (specifically, synchronous)
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// if operation is APEX call, map remaining parameters to query params
if|if
condition|(
name|operationName
operator|==
name|OperationName
operator|.
name|APEX_CALL
operator|&&
operator|!
name|parameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|queryParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|copy
operator|.
name|getApexQueryParams
argument_list|()
argument_list|)
decl_stmt|;
comment|// override component params with endpoint params
name|queryParams
operator|.
name|putAll
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|copy
operator|.
name|setApexQueryParams
argument_list|(
name|queryParams
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
DECL|method|parsePackages ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|parsePackages
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|getCamelContext
argument_list|()
operator|.
name|getPackageScanClassResolver
argument_list|()
operator|.
name|findImplementations
argument_list|(
name|AbstractSObjectBase
operator|.
name|class
argument_list|,
name|packages
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
range|:
name|classes
control|)
block|{
comment|// findImplementations also returns AbstractSObjectBase for some reason!!!
if|if
condition|(
name|AbstractSObjectBase
operator|.
name|class
operator|!=
name|aClass
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|aClass
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|aClass
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// validate properties
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|loginConfig
argument_list|,
literal|"loginConfig"
argument_list|)
expr_stmt|;
comment|// create a Jetty HttpClient if not already set
if|if
condition|(
literal|null
operator|==
name|httpClient
condition|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getHttpClient
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|httpClient
operator|=
name|config
operator|.
name|getHttpClient
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// set ssl context parameters if set
specifier|final
name|SSLContextParameters
name|contextParameters
init|=
name|sslContextParameters
operator|!=
literal|null
condition|?
name|sslContextParameters
else|:
operator|new
name|SSLContextParameters
argument_list|()
decl_stmt|;
specifier|final
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|sslContextFactory
operator|.
name|setSslContext
argument_list|(
name|contextParameters
operator|.
name|createSSLContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|httpClient
operator|=
operator|new
name|SalesforceHttpClient
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
comment|// default settings, use httpClientProperties to set other properties
name|httpClient
operator|.
name|setConnectTimeout
argument_list|(
name|CONNECTION_TIMEOUT
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set HTTP client parameters
if|if
condition|(
name|httpClientProperties
operator|!=
literal|null
operator|&&
operator|!
name|httpClientProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|,
name|httpClient
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|httpClientProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set HTTP proxy settings
if|if
condition|(
name|this
operator|.
name|httpProxyHost
operator|!=
literal|null
operator|&&
name|httpProxyPort
operator|!=
literal|null
condition|)
block|{
name|Origin
operator|.
name|Address
name|proxyAddress
init|=
operator|new
name|Origin
operator|.
name|Address
argument_list|(
name|this
operator|.
name|httpProxyHost
argument_list|,
name|this
operator|.
name|httpProxyPort
argument_list|)
decl_stmt|;
name|ProxyConfiguration
operator|.
name|Proxy
name|proxy
decl_stmt|;
if|if
condition|(
name|isHttpProxySocks4
condition|)
block|{
name|proxy
operator|=
operator|new
name|Socks4Proxy
argument_list|(
name|proxyAddress
argument_list|,
name|isHttpProxySecure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|=
operator|new
name|HttpProxy
argument_list|(
name|proxyAddress
argument_list|,
name|isHttpProxySecure
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpProxyIncludedAddresses
operator|!=
literal|null
operator|&&
operator|!
name|httpProxyIncludedAddresses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|proxy
operator|.
name|getIncludedAddresses
argument_list|()
operator|.
name|addAll
argument_list|(
name|httpProxyIncludedAddresses
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpProxyExcludedAddresses
operator|!=
literal|null
operator|&&
operator|!
name|httpProxyExcludedAddresses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|proxy
operator|.
name|getExcludedAddresses
argument_list|()
operator|.
name|addAll
argument_list|(
name|httpProxyExcludedAddresses
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|getProxyConfiguration
argument_list|()
operator|.
name|getProxies
argument_list|()
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|httpProxyUsername
operator|!=
literal|null
operator|&&
name|httpProxyPassword
operator|!=
literal|null
condition|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|httpProxyAuthUri
argument_list|,
literal|"httpProxyAuthUri"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|httpProxyRealm
argument_list|,
literal|"httpProxyRealm"
argument_list|)
expr_stmt|;
specifier|final
name|Authentication
name|authentication
decl_stmt|;
if|if
condition|(
name|httpProxyUseDigestAuth
condition|)
block|{
name|authentication
operator|=
operator|new
name|DigestAuthentication
argument_list|(
operator|new
name|URI
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authentication
operator|=
operator|new
name|BasicAuthentication
argument_list|(
operator|new
name|URI
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|getAuthenticationStore
argument_list|()
operator|.
name|addAuthentication
argument_list|(
name|authentication
argument_list|)
expr_stmt|;
block|}
comment|// support restarts
if|if
condition|(
literal|null
operator|==
name|this
operator|.
name|session
condition|)
block|{
name|this
operator|.
name|session
operator|=
operator|new
name|SalesforceSession
argument_list|(
name|httpClient
argument_list|,
name|httpClient
operator|.
name|getTimeout
argument_list|()
argument_list|,
name|loginConfig
argument_list|)
expr_stmt|;
block|}
comment|// set session before calling start()
name|httpClient
operator|.
name|setSession
argument_list|(
name|this
operator|.
name|session
argument_list|)
expr_stmt|;
comment|// start the Jetty client to initialize thread pool, etc.
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// login at startup if lazyLogin is disabled
if|if
condition|(
operator|!
name|loginConfig
operator|.
name|isLazyLogin
argument_list|()
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|packages
operator|!=
literal|null
operator|&&
name|packages
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// parse the packages to create SObject name to class map
name|classMap
operator|=
name|parsePackages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found {} generated classes in packages: {}"
argument_list|,
name|classMap
operator|.
name|size
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|packages
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use an empty map to avoid NPEs later
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing property packages, getSObject* operations will NOT work"
argument_list|)
expr_stmt|;
name|classMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subscriptionHelper
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|subscriptionHelper
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|classMap
operator|!=
literal|null
condition|)
block|{
name|classMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|subscriptionHelper
operator|!=
literal|null
condition|)
block|{
comment|// shutdown all streaming connections
comment|// note that this is done in the component, and not in consumer
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|subscriptionHelper
argument_list|)
expr_stmt|;
name|subscriptionHelper
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getAccessToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
comment|// logout of Salesforce
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|httpClient
operator|!=
literal|null
condition|)
block|{
comment|// shutdown http client connections
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// destroy http client if it was created by the component
if|if
condition|(
name|config
operator|.
name|getHttpClient
argument_list|()
operator|==
literal|null
condition|)
block|{
name|httpClient
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|httpClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSubscriptionHelper (String topicName)
specifier|public
name|SubscriptionHelper
name|getSubscriptionHelper
parameter_list|(
name|String
name|topicName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|subscriptionHelper
operator|==
literal|null
condition|)
block|{
comment|// lazily create subscription helper
name|subscriptionHelper
operator|=
operator|new
name|SubscriptionHelper
argument_list|(
name|this
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
comment|// also start the helper to connect to Salesforce
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|subscriptionHelper
argument_list|)
expr_stmt|;
block|}
return|return
name|subscriptionHelper
return|;
block|}
annotation|@
name|Override
DECL|method|completeEndpointPath (ComponentConfiguration configuration, String completionText)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|completeEndpointPath
parameter_list|(
name|ComponentConfiguration
name|configuration
parameter_list|,
name|String
name|completionText
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// return operations names on empty completion text
specifier|final
name|boolean
name|empty
init|=
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|completionText
argument_list|)
decl_stmt|;
if|if
condition|(
name|empty
operator|||
name|completionText
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|empty
condition|)
block|{
name|completionText
operator|=
literal|""
expr_stmt|;
block|}
specifier|final
name|OperationName
index|[]
name|values
init|=
name|OperationName
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|OperationName
name|val
range|:
name|values
control|)
block|{
specifier|final
name|String
name|strValue
init|=
name|val
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|strValue
operator|.
name|startsWith
argument_list|(
name|completionText
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|strValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|// also add place holder for user defined push topic name for empty completionText
if|if
condition|(
name|empty
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"[PushTopicName]"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// handle package parameters
if|if
condition|(
name|completionText
operator|.
name|matches
argument_list|(
literal|"^.*[\\?&]sObjectName=$"
argument_list|)
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|classMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|completionText
operator|.
name|matches
argument_list|(
literal|"^.*[\\?&]sObjectFields=$"
argument_list|)
condition|)
block|{
comment|// find sObjectName from configuration or completionText
name|String
name|sObjectName
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|getParameter
argument_list|(
literal|"sObjectName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sObjectName
operator|==
literal|null
condition|)
block|{
specifier|final
name|Matcher
name|matcher
init|=
name|SOBJECT_NAME_PATTERN
operator|.
name|matcher
argument_list|(
name|completionText
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|sObjectName
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// return all fields of sObject
if|if
condition|(
name|sObjectName
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
init|=
name|classMap
operator|.
name|get
argument_list|(
name|sObjectName
argument_list|)
decl_stmt|;
name|ReflectionHelper
operator|.
name|doWithFields
argument_list|(
name|aClass
argument_list|,
operator|new
name|ReflectionHelper
operator|.
name|FieldCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWith
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
comment|// get non-static fields
if|if
condition|(
operator|(
name|field
operator|.
name|getModifiers
argument_list|()
operator|&
name|Modifier
operator|.
name|STATIC
operator|)
operator|==
literal|0
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|completionText
operator|.
name|matches
argument_list|(
literal|"^.*[\\?&]sObjectClass=$"
argument_list|)
condition|)
block|{
for|for
control|(
name|Class
name|c
range|:
name|classMap
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// also add Query records classes
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|getCamelContext
argument_list|()
operator|.
name|getPackageScanClassResolver
argument_list|()
operator|.
name|findImplementations
argument_list|(
name|AbstractQueryRecordsBase
operator|.
name|class
argument_list|,
name|packages
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
range|:
name|classes
control|)
block|{
comment|// findImplementations also returns AbstractQueryRecordsBase for some reason!!!
if|if
condition|(
name|AbstractQueryRecordsBase
operator|.
name|class
operator|!=
name|aClass
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|aClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|getLoginConfig ()
specifier|public
name|SalesforceLoginConfig
name|getLoginConfig
parameter_list|()
block|{
return|return
name|loginConfig
return|;
block|}
comment|/**      * To use the shared SalesforceLoginConfig as login configuration. Properties of the shared configuration can also be set individually.      */
DECL|method|setLoginConfig (SalesforceLoginConfig loginConfig)
specifier|public
name|void
name|setLoginConfig
parameter_list|(
name|SalesforceLoginConfig
name|loginConfig
parameter_list|)
block|{
name|this
operator|.
name|loginConfig
operator|=
name|loginConfig
expr_stmt|;
block|}
DECL|method|getConfig ()
specifier|public
name|SalesforceEndpointConfig
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|/**      * To use the shared SalesforceEndpointConfig as configuration. Properties of the shared configuration can also be set individually.      */
DECL|method|setConfig (SalesforceEndpointConfig config)
specifier|public
name|void
name|setConfig
parameter_list|(
name|SalesforceEndpointConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getHttpClientProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHttpClientProperties
parameter_list|()
block|{
return|return
name|httpClientProperties
return|;
block|}
comment|/**      * Used for configuring HTTP client properties as key/value pairs      */
DECL|method|setHttpClientProperties (Map<String, Object> httpClientProperties)
specifier|public
name|void
name|setHttpClientProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientProperties
parameter_list|)
block|{
name|this
operator|.
name|httpClientProperties
operator|=
name|httpClientProperties
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * To configure security using SSLContextParameters      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getHttpProxyHost ()
specifier|public
name|String
name|getHttpProxyHost
parameter_list|()
block|{
return|return
name|httpProxyHost
return|;
block|}
comment|/**      * To configure HTTP proxy host      */
DECL|method|setHttpProxyHost (String httpProxyHost)
specifier|public
name|void
name|setHttpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|this
operator|.
name|httpProxyHost
operator|=
name|httpProxyHost
expr_stmt|;
block|}
DECL|method|getHttpProxyPort ()
specifier|public
name|Integer
name|getHttpProxyPort
parameter_list|()
block|{
return|return
name|httpProxyPort
return|;
block|}
comment|/**      * To configure HTTP proxy port      */
DECL|method|setHttpProxyPort (Integer httpProxyPort)
specifier|public
name|void
name|setHttpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPort
operator|=
name|httpProxyPort
expr_stmt|;
block|}
DECL|method|getHttpProxyUsername ()
specifier|public
name|String
name|getHttpProxyUsername
parameter_list|()
block|{
return|return
name|httpProxyUsername
return|;
block|}
comment|/**      * To configure HTTP proxy username      */
DECL|method|setHttpProxyUsername (String httpProxyUsername)
specifier|public
name|void
name|setHttpProxyUsername
parameter_list|(
name|String
name|httpProxyUsername
parameter_list|)
block|{
name|this
operator|.
name|httpProxyUsername
operator|=
name|httpProxyUsername
expr_stmt|;
block|}
DECL|method|getHttpProxyPassword ()
specifier|public
name|String
name|getHttpProxyPassword
parameter_list|()
block|{
return|return
name|httpProxyPassword
return|;
block|}
comment|/**      * To configure HTTP proxy password      */
DECL|method|setHttpProxyPassword (String httpProxyPassword)
specifier|public
name|void
name|setHttpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPassword
operator|=
name|httpProxyPassword
expr_stmt|;
block|}
DECL|method|isHttpProxySocks4 ()
specifier|public
name|boolean
name|isHttpProxySocks4
parameter_list|()
block|{
return|return
name|isHttpProxySocks4
return|;
block|}
comment|/**      * Enable for Socks4 proxy, false by default      */
DECL|method|setIsHttpProxySocks4 (boolean isHttpProxySocks4)
specifier|public
name|void
name|setIsHttpProxySocks4
parameter_list|(
name|boolean
name|isHttpProxySocks4
parameter_list|)
block|{
name|this
operator|.
name|isHttpProxySocks4
operator|=
name|isHttpProxySocks4
expr_stmt|;
block|}
DECL|method|isHttpProxySecure ()
specifier|public
name|boolean
name|isHttpProxySecure
parameter_list|()
block|{
return|return
name|isHttpProxySecure
return|;
block|}
comment|/**      * Enable for TLS connections, true by default      */
DECL|method|setIsHttpProxySecure (boolean isHttpProxySecure)
specifier|public
name|void
name|setIsHttpProxySecure
parameter_list|(
name|boolean
name|isHttpProxySecure
parameter_list|)
block|{
name|this
operator|.
name|isHttpProxySecure
operator|=
name|isHttpProxySecure
expr_stmt|;
block|}
DECL|method|getHttpProxyIncludedAddresses ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHttpProxyIncludedAddresses
parameter_list|()
block|{
return|return
name|httpProxyIncludedAddresses
return|;
block|}
comment|/**      * HTTP proxy included addresses      */
DECL|method|setHttpProxyIncludedAddresses (Set<String> httpProxyIncludedAddresses)
specifier|public
name|void
name|setHttpProxyIncludedAddresses
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyIncludedAddresses
parameter_list|)
block|{
name|this
operator|.
name|httpProxyIncludedAddresses
operator|=
name|httpProxyIncludedAddresses
expr_stmt|;
block|}
DECL|method|getHttpProxyExcludedAddresses ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getHttpProxyExcludedAddresses
parameter_list|()
block|{
return|return
name|httpProxyExcludedAddresses
return|;
block|}
comment|/**      * HTTP proxy excluded addresses      */
DECL|method|setHttpProxyExcludedAddresses (Set<String> httpProxyExcludedAddresses)
specifier|public
name|void
name|setHttpProxyExcludedAddresses
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyExcludedAddresses
parameter_list|)
block|{
name|this
operator|.
name|httpProxyExcludedAddresses
operator|=
name|httpProxyExcludedAddresses
expr_stmt|;
block|}
DECL|method|getHttpProxyAuthUri ()
specifier|public
name|String
name|getHttpProxyAuthUri
parameter_list|()
block|{
return|return
name|httpProxyAuthUri
return|;
block|}
comment|/**      * HTTP proxy authentication URI      */
DECL|method|setHttpProxyAuthUri (String httpProxyAuthUri)
specifier|public
name|void
name|setHttpProxyAuthUri
parameter_list|(
name|String
name|httpProxyAuthUri
parameter_list|)
block|{
name|this
operator|.
name|httpProxyAuthUri
operator|=
name|httpProxyAuthUri
expr_stmt|;
block|}
DECL|method|getHttpProxyRealm ()
specifier|public
name|String
name|getHttpProxyRealm
parameter_list|()
block|{
return|return
name|httpProxyRealm
return|;
block|}
comment|/**      * HTTP proxy authentication realm      */
DECL|method|setHttpProxyRealm (String httpProxyRealm)
specifier|public
name|void
name|setHttpProxyRealm
parameter_list|(
name|String
name|httpProxyRealm
parameter_list|)
block|{
name|this
operator|.
name|httpProxyRealm
operator|=
name|httpProxyRealm
expr_stmt|;
block|}
DECL|method|isHttpProxyUseDigestAuth ()
specifier|public
name|boolean
name|isHttpProxyUseDigestAuth
parameter_list|()
block|{
return|return
name|httpProxyUseDigestAuth
return|;
block|}
comment|/**      * Use HTTP proxy Digest authentication, false by default      */
DECL|method|setHttpProxyUseDigestAuth (boolean httpProxyUseDigestAuth)
specifier|public
name|void
name|setHttpProxyUseDigestAuth
parameter_list|(
name|boolean
name|httpProxyUseDigestAuth
parameter_list|)
block|{
name|this
operator|.
name|httpProxyUseDigestAuth
operator|=
name|httpProxyUseDigestAuth
expr_stmt|;
block|}
DECL|method|getPackages ()
specifier|public
name|String
index|[]
name|getPackages
parameter_list|()
block|{
return|return
name|packages
return|;
block|}
comment|/**      * Package names to scan for DTO classes (multiple packages can be separated by comma).      */
DECL|method|setPackages (String[] packages)
specifier|public
name|void
name|setPackages
parameter_list|(
name|String
index|[]
name|packages
parameter_list|)
block|{
name|this
operator|.
name|packages
operator|=
name|packages
expr_stmt|;
block|}
comment|/**      * Package names to scan for DTO classes (multiple packages can be separated by comma).      */
DECL|method|setPackages (String packages)
specifier|public
name|void
name|setPackages
parameter_list|(
name|String
name|packages
parameter_list|)
block|{
comment|// split using comma
if|if
condition|(
name|packages
operator|!=
literal|null
condition|)
block|{
name|setPackages
argument_list|(
name|packages
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSession ()
specifier|public
name|SalesforceSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
DECL|method|getClassMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getClassMap
parameter_list|()
block|{
return|return
name|classMap
return|;
block|}
DECL|method|getLoginConfigOrCreate ()
specifier|private
name|SalesforceLoginConfig
name|getLoginConfigOrCreate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getLoginConfig
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setLoginConfig
argument_list|(
operator|new
name|SalesforceLoginConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getLoginConfig
argument_list|()
return|;
block|}
DECL|method|getConfigOrCreate ()
specifier|private
name|SalesforceEndpointConfig
name|getConfigOrCreate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getConfig
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setConfig
argument_list|(
operator|new
name|SalesforceEndpointConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getConfig
argument_list|()
return|;
block|}
DECL|method|getLoginUrl ()
specifier|public
name|String
name|getLoginUrl
parameter_list|()
block|{
return|return
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|getLoginUrl
argument_list|()
return|;
block|}
comment|/**      * Salesforce login URL, defaults to https://login.salesforce.com      * @param loginUrl      */
DECL|method|setLoginUrl (String loginUrl)
specifier|public
name|void
name|setLoginUrl
parameter_list|(
name|String
name|loginUrl
parameter_list|)
block|{
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|setLoginUrl
argument_list|(
name|loginUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|getClientId
argument_list|()
return|;
block|}
comment|/**      * Salesforce connected application Consumer Key      * @param clientId      */
DECL|method|setClientId (String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientSecret ()
specifier|public
name|String
name|getClientSecret
parameter_list|()
block|{
return|return
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|getClientSecret
argument_list|()
return|;
block|}
comment|/**      * Salesforce connected application Consumer Secret      * @param clientSecret      */
DECL|method|setClientSecret (String clientSecret)
specifier|public
name|void
name|setClientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|setClientSecret
argument_list|(
name|clientSecret
argument_list|)
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|getUserName
argument_list|()
return|;
block|}
comment|/**      * Salesforce account user name      * @param userName      */
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|getPassword
argument_list|()
return|;
block|}
comment|/**      * Salesforce account password      * @param password      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|isLazyLogin ()
specifier|public
name|boolean
name|isLazyLogin
parameter_list|()
block|{
return|return
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|isLazyLogin
argument_list|()
return|;
block|}
comment|/**      * Flag to enable/disable lazy OAuth, default is false. When enabled, OAuth token retrieval or generation is not done until the first API call      * @param lazyLogin      */
DECL|method|setLazyLogin (boolean lazyLogin)
specifier|public
name|void
name|setLazyLogin
parameter_list|(
name|boolean
name|lazyLogin
parameter_list|)
block|{
name|getLoginConfigOrCreate
argument_list|()
operator|.
name|setLazyLogin
argument_list|(
name|lazyLogin
argument_list|)
expr_stmt|;
block|}
DECL|method|getFormat ()
specifier|public
name|PayloadFormat
name|getFormat
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getFormat
argument_list|()
return|;
block|}
comment|/**      * Payload format to use for Salesforce API calls, either JSON or XML, defaults to JSON      * @param format      */
DECL|method|setFormat (PayloadFormat format)
specifier|public
name|void
name|setFormat
parameter_list|(
name|PayloadFormat
name|format
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
DECL|method|getApiVersion ()
specifier|public
name|String
name|getApiVersion
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getApiVersion
argument_list|()
return|;
block|}
comment|/**      * Salesforce API version, defaults to SalesforceEndpointConfig.DEFAULT_VERSION      * @param apiVersion      */
DECL|method|setApiVersion (String apiVersion)
specifier|public
name|void
name|setApiVersion
parameter_list|(
name|String
name|apiVersion
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setApiVersion
argument_list|(
name|apiVersion
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectName ()
specifier|public
name|String
name|getSObjectName
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectName
argument_list|()
return|;
block|}
comment|/**      * SObject name if required or supported by API      * @param sObjectName      */
DECL|method|setSObjectName (String sObjectName)
specifier|public
name|void
name|setSObjectName
parameter_list|(
name|String
name|sObjectName
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectName
argument_list|(
name|sObjectName
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectId ()
specifier|public
name|String
name|getSObjectId
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectId
argument_list|()
return|;
block|}
comment|/**      * SObject ID if required by API      * @param sObjectId      */
DECL|method|setSObjectId (String sObjectId)
specifier|public
name|void
name|setSObjectId
parameter_list|(
name|String
name|sObjectId
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectId
argument_list|(
name|sObjectId
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectFields ()
specifier|public
name|String
name|getSObjectFields
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectFields
argument_list|()
return|;
block|}
comment|/**      * SObject fields to retrieve      * @param sObjectFields      */
DECL|method|setSObjectFields (String sObjectFields)
specifier|public
name|void
name|setSObjectFields
parameter_list|(
name|String
name|sObjectFields
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectFields
argument_list|(
name|sObjectFields
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectIdName ()
specifier|public
name|String
name|getSObjectIdName
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectIdName
argument_list|()
return|;
block|}
comment|/**      * SObject external ID field name      * @param sObjectIdName      */
DECL|method|setSObjectIdName (String sObjectIdName)
specifier|public
name|void
name|setSObjectIdName
parameter_list|(
name|String
name|sObjectIdName
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectIdName
argument_list|(
name|sObjectIdName
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectIdValue ()
specifier|public
name|String
name|getSObjectIdValue
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectIdValue
argument_list|()
return|;
block|}
comment|/**      * SObject external ID field value      * @param sObjectIdValue      */
DECL|method|setSObjectIdValue (String sObjectIdValue)
specifier|public
name|void
name|setSObjectIdValue
parameter_list|(
name|String
name|sObjectIdValue
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectIdValue
argument_list|(
name|sObjectIdValue
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectBlobFieldName ()
specifier|public
name|String
name|getSObjectBlobFieldName
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectBlobFieldName
argument_list|()
return|;
block|}
comment|/**      * SObject blob field name      * @param sObjectBlobFieldName      */
DECL|method|setSObjectBlobFieldName (String sObjectBlobFieldName)
specifier|public
name|void
name|setSObjectBlobFieldName
parameter_list|(
name|String
name|sObjectBlobFieldName
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectBlobFieldName
argument_list|(
name|sObjectBlobFieldName
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectClass ()
specifier|public
name|String
name|getSObjectClass
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectClass
argument_list|()
return|;
block|}
comment|/**      * Fully qualified SObject class name, usually generated using camel-salesforce-maven-plugin      * @param sObjectClass      */
DECL|method|setSObjectClass (String sObjectClass)
specifier|public
name|void
name|setSObjectClass
parameter_list|(
name|String
name|sObjectClass
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectClass
argument_list|(
name|sObjectClass
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectQuery ()
specifier|public
name|String
name|getSObjectQuery
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectQuery
argument_list|()
return|;
block|}
comment|/**      * Salesforce SOQL query string      * @param sObjectQuery      */
DECL|method|setSObjectQuery (String sObjectQuery)
specifier|public
name|void
name|setSObjectQuery
parameter_list|(
name|String
name|sObjectQuery
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectQuery
argument_list|(
name|sObjectQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|getSObjectSearch ()
specifier|public
name|String
name|getSObjectSearch
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getSObjectSearch
argument_list|()
return|;
block|}
comment|/**      * Salesforce SOSL search string      * @param sObjectSearch      */
DECL|method|setSObjectSearch (String sObjectSearch)
specifier|public
name|void
name|setSObjectSearch
parameter_list|(
name|String
name|sObjectSearch
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setSObjectSearch
argument_list|(
name|sObjectSearch
argument_list|)
expr_stmt|;
block|}
DECL|method|getApexMethod ()
specifier|public
name|String
name|getApexMethod
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getApexMethod
argument_list|()
return|;
block|}
comment|/**      * APEX method name      * @param apexMethod      */
DECL|method|setApexMethod (String apexMethod)
specifier|public
name|void
name|setApexMethod
parameter_list|(
name|String
name|apexMethod
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setApexMethod
argument_list|(
name|apexMethod
argument_list|)
expr_stmt|;
block|}
DECL|method|getApexUrl ()
specifier|public
name|String
name|getApexUrl
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getApexUrl
argument_list|()
return|;
block|}
comment|/**      * APEX method URL      * @param apexUrl      */
DECL|method|setApexUrl (String apexUrl)
specifier|public
name|void
name|setApexUrl
parameter_list|(
name|String
name|apexUrl
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setApexUrl
argument_list|(
name|apexUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|getApexQueryParams ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getApexQueryParams
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getApexQueryParams
argument_list|()
return|;
block|}
comment|/**      * Query params for APEX method      * @param apexQueryParams      */
DECL|method|setApexQueryParams (Map<String, Object> apexQueryParams)
specifier|public
name|void
name|setApexQueryParams
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|apexQueryParams
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setApexQueryParams
argument_list|(
name|apexQueryParams
argument_list|)
expr_stmt|;
block|}
DECL|method|getContentType ()
specifier|public
name|ContentType
name|getContentType
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getContentType
argument_list|()
return|;
block|}
comment|/**      * Bulk API content type, one of XML, CSV, ZIP_XML, ZIP_CSV      * @param contentType      */
DECL|method|setContentType (ContentType contentType)
specifier|public
name|void
name|setContentType
parameter_list|(
name|ContentType
name|contentType
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobId ()
specifier|public
name|String
name|getJobId
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getJobId
argument_list|()
return|;
block|}
comment|/**      * Bulk API Job ID      * @param jobId      */
DECL|method|setJobId (String jobId)
specifier|public
name|void
name|setJobId
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setJobId
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
DECL|method|getBatchId ()
specifier|public
name|String
name|getBatchId
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getBatchId
argument_list|()
return|;
block|}
comment|/**      * Bulk API Batch ID      * @param batchId      */
DECL|method|setBatchId (String batchId)
specifier|public
name|void
name|setBatchId
parameter_list|(
name|String
name|batchId
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setBatchId
argument_list|(
name|batchId
argument_list|)
expr_stmt|;
block|}
DECL|method|getResultId ()
specifier|public
name|String
name|getResultId
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getResultId
argument_list|()
return|;
block|}
comment|/**      * Bulk API Result ID      * @param resultId      */
DECL|method|setResultId (String resultId)
specifier|public
name|void
name|setResultId
parameter_list|(
name|String
name|resultId
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setResultId
argument_list|(
name|resultId
argument_list|)
expr_stmt|;
block|}
DECL|method|isUpdateTopic ()
specifier|public
name|boolean
name|isUpdateTopic
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|isUpdateTopic
argument_list|()
return|;
block|}
comment|/**      * Whether to update an existing Push Topic when using the Streaming API, defaults to false      * @param updateTopic      */
DECL|method|setUpdateTopic (boolean updateTopic)
specifier|public
name|void
name|setUpdateTopic
parameter_list|(
name|boolean
name|updateTopic
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setUpdateTopic
argument_list|(
name|updateTopic
argument_list|)
expr_stmt|;
block|}
DECL|method|getNotifyForFields ()
specifier|public
name|NotifyForFieldsEnum
name|getNotifyForFields
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getNotifyForFields
argument_list|()
return|;
block|}
comment|/**      * Notify for fields, options are ALL, REFERENCED, SELECT, WHERE      * @param notifyForFields      */
DECL|method|setNotifyForFields (NotifyForFieldsEnum notifyForFields)
specifier|public
name|void
name|setNotifyForFields
parameter_list|(
name|NotifyForFieldsEnum
name|notifyForFields
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setNotifyForFields
argument_list|(
name|notifyForFields
argument_list|)
expr_stmt|;
block|}
DECL|method|getNotifyForOperations ()
specifier|public
name|NotifyForOperationsEnum
name|getNotifyForOperations
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getNotifyForOperations
argument_list|()
return|;
block|}
comment|/**      * Notify for operations, options are ALL, CREATE, EXTENDED, UPDATE (API version< 29.0)      * @param notifyForOperations      */
DECL|method|setNotifyForOperations (NotifyForOperationsEnum notifyForOperations)
specifier|public
name|void
name|setNotifyForOperations
parameter_list|(
name|NotifyForOperationsEnum
name|notifyForOperations
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setNotifyForOperations
argument_list|(
name|notifyForOperations
argument_list|)
expr_stmt|;
block|}
DECL|method|getNotifyForOperationCreate ()
specifier|public
name|Boolean
name|getNotifyForOperationCreate
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getNotifyForOperationCreate
argument_list|()
return|;
block|}
comment|/**      * Notify for create operation, defaults to false (API version>= 29.0)      * @param notifyForOperationCreate      */
DECL|method|setNotifyForOperationCreate (Boolean notifyForOperationCreate)
specifier|public
name|void
name|setNotifyForOperationCreate
parameter_list|(
name|Boolean
name|notifyForOperationCreate
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setNotifyForOperationCreate
argument_list|(
name|notifyForOperationCreate
argument_list|)
expr_stmt|;
block|}
DECL|method|getNotifyForOperationUpdate ()
specifier|public
name|Boolean
name|getNotifyForOperationUpdate
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getNotifyForOperationUpdate
argument_list|()
return|;
block|}
comment|/**      * Notify for update operation, defaults to false (API version>= 29.0)      * @param notifyForOperationUpdate      */
DECL|method|setNotifyForOperationUpdate (Boolean notifyForOperationUpdate)
specifier|public
name|void
name|setNotifyForOperationUpdate
parameter_list|(
name|Boolean
name|notifyForOperationUpdate
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setNotifyForOperationUpdate
argument_list|(
name|notifyForOperationUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|getNotifyForOperationDelete ()
specifier|public
name|Boolean
name|getNotifyForOperationDelete
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getNotifyForOperationDelete
argument_list|()
return|;
block|}
comment|/**      * Notify for delete operation, defaults to false (API version>= 29.0)      * @param notifyForOperationDelete      */
DECL|method|setNotifyForOperationDelete (Boolean notifyForOperationDelete)
specifier|public
name|void
name|setNotifyForOperationDelete
parameter_list|(
name|Boolean
name|notifyForOperationDelete
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setNotifyForOperationDelete
argument_list|(
name|notifyForOperationDelete
argument_list|)
expr_stmt|;
block|}
DECL|method|getNotifyForOperationUndelete ()
specifier|public
name|Boolean
name|getNotifyForOperationUndelete
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getNotifyForOperationUndelete
argument_list|()
return|;
block|}
comment|/**      * Notify for un-delete operation, defaults to false (API version>= 29.0)      * @param notifyForOperationUndelete      */
DECL|method|setNotifyForOperationUndelete (Boolean notifyForOperationUndelete)
specifier|public
name|void
name|setNotifyForOperationUndelete
parameter_list|(
name|Boolean
name|notifyForOperationUndelete
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setNotifyForOperationUndelete
argument_list|(
name|notifyForOperationUndelete
argument_list|)
expr_stmt|;
block|}
DECL|method|getReportId ()
specifier|public
name|String
name|getReportId
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getReportId
argument_list|()
return|;
block|}
comment|/**      * Salesforce1 Analytics report Id      * @param reportId      */
DECL|method|setReportId (String reportId)
specifier|public
name|void
name|setReportId
parameter_list|(
name|String
name|reportId
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setReportId
argument_list|(
name|reportId
argument_list|)
expr_stmt|;
block|}
DECL|method|getIncludeDetails ()
specifier|public
name|Boolean
name|getIncludeDetails
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getIncludeDetails
argument_list|()
return|;
block|}
comment|/**      * Include details in Salesforce1 Analytics report, defaults to false.      * @param includeDetails      */
DECL|method|setIncludeDetails (Boolean includeDetails)
specifier|public
name|void
name|setIncludeDetails
parameter_list|(
name|Boolean
name|includeDetails
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setIncludeDetails
argument_list|(
name|includeDetails
argument_list|)
expr_stmt|;
block|}
DECL|method|getReportMetadata ()
specifier|public
name|ReportMetadata
name|getReportMetadata
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getReportMetadata
argument_list|()
return|;
block|}
comment|/**      * Salesforce1 Analytics report metadata for filtering      * @param reportMetadata      */
DECL|method|setReportMetadata (ReportMetadata reportMetadata)
specifier|public
name|void
name|setReportMetadata
parameter_list|(
name|ReportMetadata
name|reportMetadata
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setReportMetadata
argument_list|(
name|reportMetadata
argument_list|)
expr_stmt|;
block|}
DECL|method|getInstanceId ()
specifier|public
name|String
name|getInstanceId
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getInstanceId
argument_list|()
return|;
block|}
comment|/**      * Salesforce1 Analytics report execution instance ID      * @param instanceId      */
DECL|method|setInstanceId (String instanceId)
specifier|public
name|void
name|setInstanceId
parameter_list|(
name|String
name|instanceId
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setInstanceId
argument_list|(
name|instanceId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Custom Jetty Http Client to use to connect to Salesforce.      * @param httpClient      */
DECL|method|setHttpClient (SalesforceHttpClient httpClient)
specifier|public
name|void
name|setHttpClient
parameter_list|(
name|SalesforceHttpClient
name|httpClient
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpClient ()
specifier|public
name|SalesforceHttpClient
name|getHttpClient
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getHttpClient
argument_list|()
return|;
block|}
DECL|method|getObjectMapper ()
specifier|public
name|ObjectMapper
name|getObjectMapper
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getObjectMapper
argument_list|()
return|;
block|}
comment|/**      * Custom Jackson ObjectMapper to use when serializing/deserializing Salesforce objects.      * @param objectMapper      */
DECL|method|setObjectMapper (ObjectMapper objectMapper)
specifier|public
name|void
name|setObjectMapper
parameter_list|(
name|ObjectMapper
name|objectMapper
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setObjectMapper
argument_list|(
name|objectMapper
argument_list|)
expr_stmt|;
block|}
DECL|method|getDefaultReplayId ()
specifier|public
name|Integer
name|getDefaultReplayId
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getDefaultReplayId
argument_list|()
return|;
block|}
comment|/**      * Default replayId setting if no value is found in {@link #initialReplayIdMap}      * @param defaultReplayId      */
DECL|method|setDefaultReplayId (Integer defaultReplayId)
specifier|public
name|void
name|setDefaultReplayId
parameter_list|(
name|Integer
name|defaultReplayId
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setDefaultReplayId
argument_list|(
name|defaultReplayId
argument_list|)
expr_stmt|;
block|}
DECL|method|getInitialReplayIdMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getInitialReplayIdMap
parameter_list|()
block|{
return|return
name|getConfigOrCreate
argument_list|()
operator|.
name|getInitialReplayIdMap
argument_list|()
return|;
block|}
comment|/**      * Replay IDs to start from per channel name.      * @param initialReplayIdMap      */
DECL|method|setInitialReplayIdMap (Map<String, Integer> initialReplayIdMap)
specifier|public
name|void
name|setInitialReplayIdMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|initialReplayIdMap
parameter_list|)
block|{
name|getConfigOrCreate
argument_list|()
operator|.
name|setInitialReplayIdMap
argument_list|(
name|initialReplayIdMap
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

