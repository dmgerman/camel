begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpContentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpConversation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|ProtocolHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|ResponseNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|ContentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|BufferingResponseListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SalesforceSecurityHandler
specifier|public
class|class
name|SalesforceSecurityHandler
implements|implements
name|ProtocolHandler
block|{
DECL|field|CLIENT_ATTRIBUTE
specifier|static
specifier|final
name|String
name|CLIENT_ATTRIBUTE
init|=
name|SalesforceSecurityHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|"camel-salesforce-client"
argument_list|)
decl_stmt|;
DECL|field|AUTHENTICATION_REQUEST_ATTRIBUTE
specifier|static
specifier|final
name|String
name|AUTHENTICATION_REQUEST_ATTRIBUTE
init|=
name|SalesforceSecurityHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|".request"
argument_list|)
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SalesforceSecurityHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AUTHENTICATION_RETRIES_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|String
name|AUTHENTICATION_RETRIES_ATTRIBUTE
init|=
name|SalesforceSecurityHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|concat
argument_list|(
literal|".retries"
argument_list|)
decl_stmt|;
DECL|field|httpClient
specifier|private
specifier|final
name|SalesforceHttpClient
name|httpClient
decl_stmt|;
DECL|field|session
specifier|private
specifier|final
name|SalesforceSession
name|session
decl_stmt|;
DECL|field|maxAuthenticationRetries
specifier|private
specifier|final
name|int
name|maxAuthenticationRetries
decl_stmt|;
DECL|field|maxContentLength
specifier|private
specifier|final
name|int
name|maxContentLength
decl_stmt|;
DECL|field|notifier
specifier|private
specifier|final
name|ResponseNotifier
name|notifier
decl_stmt|;
DECL|method|SalesforceSecurityHandler (SalesforceHttpClient httpClient)
specifier|public
name|SalesforceSecurityHandler
parameter_list|(
name|SalesforceHttpClient
name|httpClient
parameter_list|)
block|{
name|this
operator|.
name|httpClient
operator|=
name|httpClient
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|httpClient
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxAuthenticationRetries
operator|=
name|httpClient
operator|.
name|getMaxRetries
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxContentLength
operator|=
name|httpClient
operator|.
name|getMaxContentLength
argument_list|()
expr_stmt|;
name|this
operator|.
name|notifier
operator|=
operator|new
name|ResponseNotifier
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accept (Request request, Response response)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Request
name|request
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|HttpConversation
name|conversation
init|=
operator|(
operator|(
name|SalesforceHttpRequest
operator|)
name|request
operator|)
operator|.
name|getConversation
argument_list|()
decl_stmt|;
name|Integer
name|retries
init|=
operator|(
name|Integer
operator|)
name|conversation
operator|.
name|getAttribute
argument_list|(
name|AUTHENTICATION_RETRIES_ATTRIBUTE
argument_list|)
decl_stmt|;
comment|// is this an authentication response for a previously handled
comment|// conversation?
if|if
condition|(
name|conversation
operator|.
name|getAttribute
argument_list|(
name|AUTHENTICATION_REQUEST_ATTRIBUTE
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
name|retries
operator|==
literal|null
operator|||
name|retries
operator|<=
name|maxAuthenticationRetries
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|int
name|status
init|=
name|response
operator|.
name|getStatus
argument_list|()
decl_stmt|;
comment|// handle UNAUTHORIZED and BAD_REQUEST for Bulk API,
comment|// the actual InvalidSessionId Bulk API error is checked and handled in
comment|// the listener
comment|// also check retries haven't exceeded maxAuthenticationRetries
return|return
operator|(
name|status
operator|==
name|HttpStatus
operator|.
name|UNAUTHORIZED_401
operator|||
name|status
operator|==
name|HttpStatus
operator|.
name|BAD_REQUEST_400
operator|)
operator|&&
operator|(
name|retries
operator|==
literal|null
operator|||
name|retries
operator|<=
name|maxAuthenticationRetries
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResponseListener ()
specifier|public
name|Response
operator|.
name|Listener
name|getResponseListener
parameter_list|()
block|{
return|return
operator|new
name|SecurityListener
argument_list|(
name|maxContentLength
argument_list|)
return|;
block|}
DECL|class|SecurityListener
specifier|private
class|class
name|SecurityListener
extends|extends
name|BufferingResponseListener
block|{
DECL|method|SecurityListener (int maxLength)
name|SecurityListener
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
name|super
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onComplete (Result result)
specifier|public
name|void
name|onComplete
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|SalesforceHttpRequest
name|request
init|=
operator|(
name|SalesforceHttpRequest
operator|)
name|result
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ContentResponse
name|response
init|=
operator|new
name|HttpContentResponse
argument_list|(
name|result
operator|.
name|getResponse
argument_list|()
argument_list|,
name|getContent
argument_list|()
argument_list|,
name|getMediaType
argument_list|()
argument_list|,
name|getEncoding
argument_list|()
argument_list|)
decl_stmt|;
comment|// get number of retries
name|HttpConversation
name|conversation
init|=
name|request
operator|.
name|getConversation
argument_list|()
decl_stmt|;
name|Integer
name|retries
init|=
operator|(
name|Integer
operator|)
name|conversation
operator|.
name|getAttribute
argument_list|(
name|AUTHENTICATION_RETRIES_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|retries
operator|==
literal|null
condition|)
block|{
name|retries
operator|=
literal|0
expr_stmt|;
block|}
comment|// get AbstractClientBase if request originated from one, for
comment|// updating token and setting auth header
specifier|final
name|AbstractClientBase
name|client
init|=
operator|(
name|AbstractClientBase
operator|)
name|conversation
operator|.
name|getAttribute
argument_list|(
name|CLIENT_ATTRIBUTE
argument_list|)
decl_stmt|;
comment|// exception response
if|if
condition|(
name|result
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|Throwable
name|failure
init|=
name|result
operator|.
name|getFailure
argument_list|()
decl_stmt|;
name|retryOnFailure
argument_list|(
name|request
argument_list|,
name|conversation
argument_list|,
name|retries
argument_list|,
name|client
argument_list|,
name|failure
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// response to a re-login request
name|SalesforceHttpRequest
name|origRequest
init|=
operator|(
name|SalesforceHttpRequest
operator|)
name|conversation
operator|.
name|getAttribute
argument_list|(
name|AUTHENTICATION_REQUEST_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|origRequest
operator|!=
literal|null
condition|)
block|{
comment|// parse response
try|try
block|{
name|session
operator|.
name|parseLoginResponse
argument_list|(
name|response
argument_list|,
name|response
operator|.
name|getContentAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
comment|// retry login request on error if we have login attempts
comment|// left
if|if
condition|(
name|retries
operator|<
name|maxAuthenticationRetries
condition|)
block|{
name|retryOnFailure
argument_list|(
name|request
argument_list|,
name|conversation
argument_list|,
name|retries
argument_list|,
name|client
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|forwardFailureComplete
argument_list|(
name|origRequest
argument_list|,
literal|null
argument_list|,
name|response
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// retry original request on success
name|conversation
operator|.
name|removeAttribute
argument_list|(
name|AUTHENTICATION_REQUEST_ATTRIBUTE
argument_list|)
expr_stmt|;
name|retryRequest
argument_list|(
name|origRequest
argument_list|,
name|client
argument_list|,
name|retries
argument_list|,
name|conversation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// response to an original request
specifier|final
name|int
name|status
init|=
name|response
operator|.
name|getStatus
argument_list|()
decl_stmt|;
specifier|final
name|String
name|reason
init|=
name|response
operator|.
name|getReason
argument_list|()
decl_stmt|;
comment|// check if login retries left
if|if
condition|(
name|retries
operator|>=
name|maxAuthenticationRetries
condition|)
block|{
comment|// forward current response
name|forwardSuccessComplete
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// request failed authentication?
if|if
condition|(
name|status
operator|==
name|HttpStatus
operator|.
name|UNAUTHORIZED_401
condition|)
block|{
comment|// REST token expiry
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying on Salesforce authentication error [{}]: [{}]"
argument_list|,
name|status
argument_list|,
name|reason
argument_list|)
expr_stmt|;
comment|// remember original request and send a relogin request in
comment|// current conversation
name|retryLogin
argument_list|(
name|request
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|<
name|HttpStatus
operator|.
name|OK_200
operator|||
name|status
operator|>=
name|HttpStatus
operator|.
name|MULTIPLE_CHOICES_300
condition|)
block|{
comment|// HTTP failure status
comment|// get detailed cause, if request comes from an
comment|// AbstractClientBase
specifier|final
name|InputStream
name|inputStream
init|=
name|getContent
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|getContentAsInputStream
argument_list|()
decl_stmt|;
specifier|final
name|SalesforceException
name|cause
init|=
name|client
operator|!=
literal|null
condition|?
name|client
operator|.
name|createRestException
argument_list|(
name|response
argument_list|,
name|inputStream
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|HttpStatus
operator|.
name|BAD_REQUEST_400
operator|&&
name|cause
operator|!=
literal|null
operator|&&
name|isInvalidSessionError
argument_list|(
name|cause
argument_list|)
condition|)
block|{
comment|// retry Bulk API call
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying on Bulk API Salesforce authentication error [{}]: [{}]"
argument_list|,
name|status
argument_list|,
name|reason
argument_list|)
expr_stmt|;
name|retryLogin
argument_list|(
name|request
argument_list|,
name|retries
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// forward Salesforce HTTP failure!
name|forwardSuccessComplete
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|retryOnFailure (SalesforceHttpRequest request, HttpConversation conversation, Integer retries, AbstractClientBase client, Throwable failure)
specifier|protected
name|void
name|retryOnFailure
parameter_list|(
name|SalesforceHttpRequest
name|request
parameter_list|,
name|HttpConversation
name|conversation
parameter_list|,
name|Integer
name|retries
parameter_list|,
name|AbstractClientBase
name|client
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying on Salesforce authentication failure "
operator|+
name|failure
operator|.
name|getMessage
argument_list|()
argument_list|,
name|failure
argument_list|)
expr_stmt|;
comment|// retry request
name|retryRequest
argument_list|(
name|request
argument_list|,
name|client
argument_list|,
name|retries
argument_list|,
name|conversation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|isInvalidSessionError (SalesforceException e)
specifier|private
name|boolean
name|isInvalidSessionError
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
return|return
name|e
operator|.
name|getErrors
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
literal|"InvalidSessionId"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getErrorCode
argument_list|()
argument_list|)
return|;
block|}
DECL|method|retryLogin (SalesforceHttpRequest request, Integer retries)
specifier|private
name|void
name|retryLogin
parameter_list|(
name|SalesforceHttpRequest
name|request
parameter_list|,
name|Integer
name|retries
parameter_list|)
block|{
specifier|final
name|HttpConversation
name|conversation
init|=
name|request
operator|.
name|getConversation
argument_list|()
decl_stmt|;
comment|// remember the original request to resend
name|conversation
operator|.
name|setAttribute
argument_list|(
name|AUTHENTICATION_REQUEST_ATTRIBUTE
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|retryRequest
argument_list|(
operator|(
name|SalesforceHttpRequest
operator|)
name|session
operator|.
name|getLoginRequest
argument_list|(
name|conversation
argument_list|)
argument_list|,
literal|null
argument_list|,
name|retries
argument_list|,
name|conversation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|retryRequest (SalesforceHttpRequest request, AbstractClientBase client, Integer retries, HttpConversation conversation, boolean copy)
specifier|private
name|void
name|retryRequest
parameter_list|(
name|SalesforceHttpRequest
name|request
parameter_list|,
name|AbstractClientBase
name|client
parameter_list|,
name|Integer
name|retries
parameter_list|,
name|HttpConversation
name|conversation
parameter_list|,
name|boolean
name|copy
parameter_list|)
block|{
comment|// copy the request to resend
comment|// TODO handle a change in Salesforce instanceUrl, right now we
comment|// retry with the same destination
specifier|final
name|Request
name|newRequest
decl_stmt|;
if|if
condition|(
name|copy
condition|)
block|{
name|newRequest
operator|=
name|httpClient
operator|.
name|copyRequest
argument_list|(
name|request
argument_list|,
name|request
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|method
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|HttpFields
name|headers
init|=
name|newRequest
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|// copy cookies and host for subscriptions to avoid
comment|// '403::Unknown Client' errors
for|for
control|(
name|HttpField
name|field
range|:
name|request
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|HttpHeader
name|header
init|=
name|field
operator|.
name|getHeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpHeader
operator|.
name|COOKIE
operator|.
name|equals
argument_list|(
name|header
argument_list|)
operator|||
name|HttpHeader
operator|.
name|HOST
operator|.
name|equals
argument_list|(
name|header
argument_list|)
condition|)
block|{
name|headers
operator|.
name|add
argument_list|(
name|header
argument_list|,
name|field
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|newRequest
operator|=
name|request
expr_stmt|;
block|}
name|conversation
operator|.
name|setAttribute
argument_list|(
name|AUTHENTICATION_RETRIES_ATTRIBUTE
argument_list|,
operator|++
name|retries
argument_list|)
expr_stmt|;
name|Object
name|originalRequest
init|=
name|conversation
operator|.
name|getAttribute
argument_list|(
name|AUTHENTICATION_REQUEST_ATTRIBUTE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Retry attempt {} on authentication error for {}"
argument_list|,
name|retries
argument_list|,
name|originalRequest
operator|!=
literal|null
condition|?
name|originalRequest
else|:
name|newRequest
argument_list|)
expr_stmt|;
comment|// update currentToken for original request
if|if
condition|(
name|originalRequest
operator|==
literal|null
condition|)
block|{
name|String
name|currentToken
init|=
name|session
operator|.
name|getAccessToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
comment|// update client cache for this and future requests
name|client
operator|.
name|setAccessToken
argument_list|(
name|currentToken
argument_list|)
expr_stmt|;
name|client
operator|.
name|setInstanceUrl
argument_list|(
name|session
operator|.
name|getInstanceUrl
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAccessToken
argument_list|(
name|newRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// plain request not made by an AbstractClientBase
name|newRequest
operator|.
name|header
argument_list|(
name|HttpHeader
operator|.
name|AUTHORIZATION
argument_list|,
literal|"OAuth "
operator|+
name|currentToken
argument_list|)
expr_stmt|;
block|}
block|}
comment|// send new async request with a new delegate
name|conversation
operator|.
name|updateResponseListeners
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|onRequestBegin
argument_list|(
name|getRequestAbortListener
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|newRequest
operator|.
name|send
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequestAbortListener (final SalesforceHttpRequest request)
specifier|private
name|Request
operator|.
name|BeginListener
name|getRequestAbortListener
parameter_list|(
specifier|final
name|SalesforceHttpRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|Request
operator|.
name|BeginListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBegin
parameter_list|(
name|Request
name|redirect
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|request
operator|.
name|getAbortCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|redirect
operator|.
name|abort
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|forwardSuccessComplete (SalesforceHttpRequest request, Response response)
specifier|private
name|void
name|forwardSuccessComplete
parameter_list|(
name|SalesforceHttpRequest
name|request
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|HttpConversation
name|conversation
init|=
name|request
operator|.
name|getConversation
argument_list|()
decl_stmt|;
name|conversation
operator|.
name|updateResponseListeners
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|forwardSuccessComplete
argument_list|(
name|conversation
operator|.
name|getResponseListeners
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|forwardFailureComplete (SalesforceHttpRequest request, Throwable requestFailure, Response response, Throwable responseFailure)
specifier|private
name|void
name|forwardFailureComplete
parameter_list|(
name|SalesforceHttpRequest
name|request
parameter_list|,
name|Throwable
name|requestFailure
parameter_list|,
name|Response
name|response
parameter_list|,
name|Throwable
name|responseFailure
parameter_list|)
block|{
name|HttpConversation
name|conversation
init|=
name|request
operator|.
name|getConversation
argument_list|()
decl_stmt|;
name|conversation
operator|.
name|updateResponseListeners
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|forwardFailureComplete
argument_list|(
name|conversation
operator|.
name|getResponseListeners
argument_list|()
argument_list|,
name|request
argument_list|,
name|requestFailure
argument_list|,
name|response
argument_list|,
name|responseFailure
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no @Override annotation here to keep it compatible with Jetty 9.2,
comment|// getName was added in 9.3
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"CamelSalesforceSecurityHandler"
return|;
block|}
block|}
end_class

end_unit

