begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectBatchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
operator|.
name|SObjectTreeResponse
import|;
end_import

begin_interface
DECL|interface|CompositeApiClient
specifier|public
interface|interface
name|CompositeApiClient
block|{
annotation|@
name|FunctionalInterface
DECL|interface|Operation
interface|interface
name|Operation
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
block|{
DECL|method|submit (T body, Map<String, List<String>> headers, ResponseCallback<R> callback)
name|void
name|submit
parameter_list|(
name|T
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|ResponseCallback
argument_list|<
name|R
argument_list|>
name|callback
parameter_list|)
throws|throws
name|SalesforceException
function_decl|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|ResponseCallback
specifier|public
interface|interface
name|ResponseCallback
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|onResponse (Optional<T> body, Map<String, String> headers, SalesforceException exception)
name|void
name|onResponse
parameter_list|(
name|Optional
argument_list|<
name|T
argument_list|>
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|exception
parameter_list|)
function_decl|;
block|}
DECL|method|submitCompositeBatch (SObjectBatch batch, Map<String, List<String>> headers, ResponseCallback<SObjectBatchResponse> callback)
name|void
name|submitCompositeBatch
parameter_list|(
name|SObjectBatch
name|batch
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|ResponseCallback
argument_list|<
name|SObjectBatchResponse
argument_list|>
name|callback
parameter_list|)
throws|throws
name|SalesforceException
function_decl|;
comment|/**      * Submits given nodes (records) of SObjects and their children as a tree in      * a single request. And updates the<code>Id</code> parameter of each      * object to the value returned from the API call.      *      * @param tree SObject tree to submit      * @param callback {@link ResponseCallback} to handle response or exception      */
DECL|method|submitCompositeTree (SObjectTree tree, Map<String, List<String>> headers, ResponseCallback<SObjectTreeResponse> callback)
name|void
name|submitCompositeTree
parameter_list|(
name|SObjectTree
name|tree
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|ResponseCallback
argument_list|<
name|SObjectTreeResponse
argument_list|>
name|callback
parameter_list|)
throws|throws
name|SalesforceException
function_decl|;
block|}
end_interface

end_unit

