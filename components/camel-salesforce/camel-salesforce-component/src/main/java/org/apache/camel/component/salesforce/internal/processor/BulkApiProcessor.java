begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|BatchInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|BulkApiClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|DefaultBulkApiClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
operator|.
name|StreamCacheConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
operator|.
name|BATCH_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
operator|.
name|CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
operator|.
name|JOB_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
operator|.
name|RESULT_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
operator|.
name|SOBJECT_QUERY
import|;
end_import

begin_class
DECL|class|BulkApiProcessor
specifier|public
class|class
name|BulkApiProcessor
extends|extends
name|AbstractSalesforceProcessor
block|{
DECL|field|bulkClient
specifier|private
name|BulkApiClient
name|bulkClient
decl_stmt|;
DECL|method|BulkApiProcessor (SalesforceEndpoint endpoint)
specifier|public
name|BulkApiProcessor
parameter_list|(
name|SalesforceEndpoint
name|endpoint
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|bulkClient
operator|=
operator|new
name|DefaultBulkApiClient
argument_list|(
operator|(
name|String
operator|)
name|endpointConfigMap
operator|.
name|get
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|API_VERSION
argument_list|)
argument_list|,
name|session
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (final Exchange exchange, final AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|operationName
condition|)
block|{
case|case
name|CREATE_JOB
case|:
name|processCreateJob
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_JOB
case|:
name|processGetJob
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|CLOSE_JOB
case|:
name|processCloseJob
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|ABORT_JOB
case|:
name|processAbortJob
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATE_BATCH
case|:
name|processCreateBatch
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_BATCH
case|:
name|processGetBatch
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_ALL_BATCHES
case|:
name|processGetAllBatches
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_REQUEST
case|:
name|processGetRequest
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_RESULTS
case|:
name|processGetResults
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREATE_BATCH_QUERY
case|:
name|processCreateBatchQuery
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_QUERY_RESULT_IDS
case|:
name|processGetQueryResultIds
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
case|case
name|GET_QUERY_RESULT
case|:
name|processGetQueryResult
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SalesforceException
argument_list|(
literal|"Unknown operation name: "
operator|+
name|operationName
operator|.
name|value
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Error processing %s: [%s] \"%s\""
argument_list|,
name|operationName
operator|.
name|value
argument_list|()
argument_list|,
name|e
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected Error processing %s: \"%s\""
argument_list|,
name|operationName
operator|.
name|value
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|SalesforceException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unexpected Error processing %s: \"%s\""
argument_list|,
name|operationName
operator|.
name|value
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
comment|// continue routing asynchronously if false
return|return
name|done
return|;
block|}
DECL|method|processCreateJob (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processCreateJob
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|InvalidPayloadException
block|{
name|JobInfo
name|jobBody
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|JobInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|bulkClient
operator|.
name|createJob
argument_list|(
name|jobBody
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|JobInfoResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|jobInfo
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetJob (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetJob
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|JobInfo
name|jobBody
decl_stmt|;
name|jobBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|jobId
decl_stmt|;
if|if
condition|(
name|jobBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|jobBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|getJob
argument_list|(
name|jobId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|JobInfoResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|jobInfo
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processCloseJob (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processCloseJob
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|JobInfo
name|jobBody
decl_stmt|;
name|String
name|jobId
decl_stmt|;
name|jobBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|jobBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|closeJob
argument_list|(
name|jobId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|JobInfoResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|jobInfo
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processAbortJob (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processAbortJob
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|JobInfo
name|jobBody
decl_stmt|;
name|String
name|jobId
decl_stmt|;
name|jobBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|jobBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|abortJob
argument_list|(
name|jobId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|JobInfoResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|jobInfo
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processCreateBatch (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processCreateBatch
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|jobId
decl_stmt|;
comment|// since request is in the body, use headers or endpoint params
name|ContentType
name|contentType
init|=
name|ContentType
operator|.
name|fromValue
argument_list|(
name|getParameter
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
argument_list|)
decl_stmt|;
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|InputStream
name|request
decl_stmt|;
try|try
block|{
name|request
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error preparing batch request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SalesforceException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|bulkClient
operator|.
name|createBatch
argument_list|(
name|request
argument_list|,
name|jobId
argument_list|,
name|contentType
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|BatchInfoResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BatchInfo
name|batchInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|batchInfo
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetBatch (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetBatch
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|jobId
decl_stmt|;
name|BatchInfo
name|batchBody
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BatchInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|batchId
decl_stmt|;
if|if
condition|(
name|batchBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|batchBody
operator|.
name|getJobId
argument_list|()
expr_stmt|;
name|batchId
operator|=
name|batchBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|batchId
operator|=
name|getParameter
argument_list|(
name|BATCH_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|getBatch
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|BatchInfoResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BatchInfo
name|batchInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|batchInfo
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetAllBatches (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetAllBatches
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|JobInfo
name|jobBody
decl_stmt|;
name|String
name|jobId
decl_stmt|;
name|jobBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|jobBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|getAllBatches
argument_list|(
name|jobId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|BatchInfoListResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|List
argument_list|<
name|BatchInfo
argument_list|>
name|batchInfoList
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|batchInfoList
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetRequest (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetRequest
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|jobId
decl_stmt|;
name|BatchInfo
name|batchBody
decl_stmt|;
name|String
name|batchId
decl_stmt|;
name|batchBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|batchBody
operator|.
name|getJobId
argument_list|()
expr_stmt|;
name|batchId
operator|=
name|batchBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|batchId
operator|=
name|getParameter
argument_list|(
name|BATCH_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|getRequest
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|StreamResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
comment|// read the request stream into a StreamCache temp file
comment|// ensures the connection is read
name|StreamCache
name|body
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|body
operator|=
name|StreamCacheConverter
operator|.
name|convertToStreamCache
argument_list|(
name|inputStream
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error retrieving batch request: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|ex
operator|=
operator|new
name|SalesforceException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// close the input stream to release the Http connection
try|try
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{                         }
block|}
block|}
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|body
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetResults (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetResults
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|jobId
decl_stmt|;
name|BatchInfo
name|batchBody
decl_stmt|;
name|String
name|batchId
decl_stmt|;
name|batchBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|batchBody
operator|.
name|getJobId
argument_list|()
expr_stmt|;
name|batchId
operator|=
name|batchBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|batchId
operator|=
name|getParameter
argument_list|(
name|BATCH_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|getResults
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|StreamResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
comment|// read the result stream into a StreamCache temp file
comment|// ensures the connection is read
name|StreamCache
name|body
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|body
operator|=
name|StreamCacheConverter
operator|.
name|convertToStreamCache
argument_list|(
name|inputStream
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error retrieving batch results: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|ex
operator|=
operator|new
name|SalesforceException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// close the input stream to release the Http connection
try|try
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{                         }
block|}
block|}
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|body
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processCreateBatchQuery (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processCreateBatchQuery
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|JobInfo
name|jobBody
decl_stmt|;
name|String
name|jobId
decl_stmt|;
name|ContentType
name|contentType
decl_stmt|;
name|jobBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|soqlQuery
decl_stmt|;
if|if
condition|(
name|jobBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|jobBody
operator|.
name|getId
argument_list|()
expr_stmt|;
name|contentType
operator|=
name|jobBody
operator|.
name|getContentType
argument_list|()
expr_stmt|;
comment|// use SOQL query from header or endpoint config
name|soqlQuery
operator|=
name|getParameter
argument_list|(
name|SOBJECT_QUERY
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|contentType
operator|=
name|ContentType
operator|.
name|fromValue
argument_list|(
name|getParameter
argument_list|(
name|CONTENT_TYPE
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// reuse SOBJECT_QUERY property
name|soqlQuery
operator|=
name|getParameter
argument_list|(
name|SOBJECT_QUERY
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|createBatchQuery
argument_list|(
name|jobId
argument_list|,
name|soqlQuery
argument_list|,
name|contentType
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|BatchInfoResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|BatchInfo
name|batchInfo
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|batchInfo
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetQueryResultIds (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetQueryResultIds
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|jobId
decl_stmt|;
name|BatchInfo
name|batchBody
decl_stmt|;
name|String
name|batchId
decl_stmt|;
name|batchBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|batchBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|batchBody
operator|.
name|getJobId
argument_list|()
expr_stmt|;
name|batchId
operator|=
name|batchBody
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|batchId
operator|=
name|getParameter
argument_list|(
name|BATCH_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|getQueryResultIds
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|QueryResultIdsCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|ids
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetQueryResult (final Exchange exchange, final AsyncCallback callback)
specifier|private
name|void
name|processGetQueryResult
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|String
name|jobId
decl_stmt|;
name|BatchInfo
name|batchBody
decl_stmt|;
name|String
name|batchId
decl_stmt|;
name|batchBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|resultId
decl_stmt|;
if|if
condition|(
name|batchBody
operator|!=
literal|null
condition|)
block|{
name|jobId
operator|=
name|batchBody
operator|.
name|getJobId
argument_list|()
expr_stmt|;
name|batchId
operator|=
name|batchBody
operator|.
name|getId
argument_list|()
expr_stmt|;
name|resultId
operator|=
name|getParameter
argument_list|(
name|RESULT_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jobId
operator|=
name|getParameter
argument_list|(
name|JOB_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|batchId
operator|=
name|getParameter
argument_list|(
name|BATCH_ID
argument_list|,
name|exchange
argument_list|,
name|IGNORE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
name|resultId
operator|=
name|getParameter
argument_list|(
name|RESULT_ID
argument_list|,
name|exchange
argument_list|,
name|USE_BODY
argument_list|,
name|NOT_OPTIONAL
argument_list|)
expr_stmt|;
block|}
name|bulkClient
operator|.
name|getQueryResult
argument_list|(
name|jobId
argument_list|,
name|batchId
argument_list|,
name|resultId
argument_list|,
name|determineHeaders
argument_list|(
name|exchange
argument_list|)
argument_list|,
operator|new
name|BulkApiClient
operator|.
name|StreamResponseCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|)
block|{
name|StreamCache
name|body
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
comment|// read the result stream into a StreamCache temp file
comment|// ensures the connection is read
try|try
block|{
name|body
operator|=
name|StreamCacheConverter
operator|.
name|convertToStreamCache
argument_list|(
name|inputStream
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error retrieving query result: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|ex
operator|=
operator|new
name|SalesforceException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// close the input stream to release the Http connection
try|try
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
name|processResponse
argument_list|(
name|exchange
argument_list|,
name|body
argument_list|,
name|headers
argument_list|,
name|ex
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|processResponse (Exchange exchange, Object body, Map<String, String> headers, SalesforceException ex, AsyncCallback callback)
specifier|private
name|void
name|processResponse
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|SalesforceException
name|ex
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
specifier|final
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
comment|// copy headers
name|Message
name|inboundMessage
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outboundHeaders
init|=
name|out
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|outboundHeaders
operator|.
name|putAll
argument_list|(
name|inboundMessage
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|outboundHeaders
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
comment|// signal exchange completion
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|bulkClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
comment|// stop the client
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|bulkClient
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

