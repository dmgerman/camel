begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractDescribedSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectField
import|;
end_import

begin_class
DECL|class|QueryHelper
specifier|public
specifier|final
class|class
name|QueryHelper
block|{
DECL|field|NONE
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NONE
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
DECL|method|QueryHelper ()
specifier|private
name|QueryHelper
parameter_list|()
block|{
comment|// utility class
block|}
DECL|method|fieldNamesOf (final AbstractDescribedSObjectBase object)
specifier|public
specifier|static
name|String
index|[]
name|fieldNamesOf
parameter_list|(
specifier|final
name|AbstractDescribedSObjectBase
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|NONE
return|;
block|}
specifier|final
name|SObjectDescription
name|description
init|=
name|object
operator|.
name|description
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SObjectField
argument_list|>
name|fields
init|=
name|description
operator|.
name|getFields
argument_list|()
decl_stmt|;
return|return
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SObjectField
operator|::
name|getName
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|filteredFieldNamesOf (final AbstractDescribedSObjectBase object, final Predicate<SObjectField> filter)
specifier|public
specifier|static
name|String
index|[]
name|filteredFieldNamesOf
parameter_list|(
specifier|final
name|AbstractDescribedSObjectBase
name|object
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|SObjectField
argument_list|>
name|filter
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
name|NONE
return|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
name|fieldNamesOf
argument_list|(
name|object
argument_list|)
return|;
block|}
specifier|final
name|SObjectDescription
name|description
init|=
name|object
operator|.
name|description
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SObjectField
argument_list|>
name|fields
init|=
name|description
operator|.
name|getFields
argument_list|()
decl_stmt|;
return|return
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|SObjectField
operator|::
name|getName
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
DECL|method|queryToFetchAllFieldsOf (final AbstractDescribedSObjectBase object)
specifier|public
specifier|static
name|String
name|queryToFetchAllFieldsOf
parameter_list|(
specifier|final
name|AbstractDescribedSObjectBase
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|SObjectDescription
name|description
init|=
name|object
operator|.
name|description
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SObjectField
argument_list|>
name|fields
init|=
name|description
operator|.
name|getFields
argument_list|()
decl_stmt|;
return|return
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SObjectField
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|,
literal|"SELECT "
argument_list|,
literal|" FROM "
operator|+
name|description
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|queryToFetchFilteredFieldsOf (final AbstractDescribedSObjectBase object, final Predicate<SObjectField> filter)
specifier|public
specifier|static
name|String
name|queryToFetchFilteredFieldsOf
parameter_list|(
specifier|final
name|AbstractDescribedSObjectBase
name|object
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|SObjectField
argument_list|>
name|filter
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
name|queryToFetchAllFieldsOf
argument_list|(
name|object
argument_list|)
return|;
block|}
specifier|final
name|SObjectDescription
name|description
init|=
name|object
operator|.
name|description
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SObjectField
argument_list|>
name|fields
init|=
name|description
operator|.
name|getFields
argument_list|()
decl_stmt|;
return|return
name|fields
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|map
argument_list|(
name|SObjectField
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|,
literal|"SELECT "
argument_list|,
literal|" FROM "
operator|+
name|description
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

