begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|OperationName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|PayloadFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
operator|.
name|AnalyticsApiProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
operator|.
name|BulkApiProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
operator|.
name|CompositeApiProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
operator|.
name|JsonRestProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
operator|.
name|SalesforceProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|processor
operator|.
name|XmlRestProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_comment
comment|/**  * The Salesforce producer.  */
end_comment

begin_class
DECL|class|SalesforceProducer
specifier|public
class|class
name|SalesforceProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|processor
specifier|private
specifier|final
name|SalesforceProcessor
name|processor
decl_stmt|;
DECL|method|SalesforceProducer (SalesforceEndpoint endpoint)
specifier|public
name|SalesforceProducer
parameter_list|(
name|SalesforceEndpoint
name|endpoint
parameter_list|)
throws|throws
name|SalesforceException
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceEndpointConfig
name|endpointConfig
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|PayloadFormat
name|payloadFormat
init|=
name|endpointConfig
operator|.
name|getFormat
argument_list|()
decl_stmt|;
comment|// check if its a Bulk Operation
specifier|final
name|OperationName
name|operationName
init|=
name|endpoint
operator|.
name|getOperationName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isBulkOperation
argument_list|(
name|operationName
argument_list|)
condition|)
block|{
name|processor
operator|=
operator|new
name|BulkApiProcessor
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAnalyticsOperation
argument_list|(
name|operationName
argument_list|)
condition|)
block|{
name|processor
operator|=
operator|new
name|AnalyticsApiProcessor
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isCompositeOperation
argument_list|(
name|operationName
argument_list|)
condition|)
block|{
name|processor
operator|=
operator|new
name|CompositeApiProcessor
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create an appropriate processor
if|if
condition|(
name|payloadFormat
operator|==
name|PayloadFormat
operator|.
name|JSON
condition|)
block|{
comment|// create a JSON exchange processor
name|processor
operator|=
operator|new
name|JsonRestProcessor
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|=
operator|new
name|XmlRestProcessor
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isBulkOperation (OperationName operationName)
specifier|private
name|boolean
name|isBulkOperation
parameter_list|(
name|OperationName
name|operationName
parameter_list|)
block|{
switch|switch
condition|(
name|operationName
condition|)
block|{
case|case
name|CREATE_JOB
case|:
case|case
name|GET_JOB
case|:
case|case
name|CLOSE_JOB
case|:
case|case
name|ABORT_JOB
case|:
case|case
name|CREATE_BATCH
case|:
case|case
name|GET_BATCH
case|:
case|case
name|GET_ALL_BATCHES
case|:
case|case
name|GET_REQUEST
case|:
case|case
name|GET_RESULTS
case|:
case|case
name|CREATE_BATCH_QUERY
case|:
case|case
name|GET_QUERY_RESULT_IDS
case|:
case|case
name|GET_QUERY_RESULT
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|method|isAnalyticsOperation (OperationName operationName)
specifier|private
name|boolean
name|isAnalyticsOperation
parameter_list|(
name|OperationName
name|operationName
parameter_list|)
block|{
switch|switch
condition|(
name|operationName
condition|)
block|{
case|case
name|GET_RECENT_REPORTS
case|:
case|case
name|GET_REPORT_DESCRIPTION
case|:
case|case
name|EXECUTE_SYNCREPORT
case|:
case|case
name|EXECUTE_ASYNCREPORT
case|:
case|case
name|GET_REPORT_INSTANCES
case|:
case|case
name|GET_REPORT_RESULTS
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
DECL|method|isCompositeOperation (OperationName operationName)
specifier|private
name|boolean
name|isCompositeOperation
parameter_list|(
name|OperationName
name|operationName
parameter_list|)
block|{
switch|switch
condition|(
name|operationName
condition|)
block|{
case|case
name|COMPOSITE_TREE
case|:
case|case
name|COMPOSITE_BATCH
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Processing {}"
argument_list|,
operator|(
operator|(
name|SalesforceEndpoint
operator|)
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getOperationName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// start Salesforce processor
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// stop Salesforce processor
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

