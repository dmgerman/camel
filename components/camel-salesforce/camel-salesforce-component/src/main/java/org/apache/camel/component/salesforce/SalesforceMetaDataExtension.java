begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|module
operator|.
name|jsonSchema
operator|.
name|JsonSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|metadata
operator|.
name|AbstractMetaDataExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|metadata
operator|.
name|MetaDataBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
operator|.
name|ResponseCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceClientTemplate
operator|.
name|invoke
import|;
end_import

begin_class
DECL|class|SalesforceMetaDataExtension
specifier|public
class|class
name|SalesforceMetaDataExtension
extends|extends
name|AbstractMetaDataExtension
block|{
DECL|field|OBJECT_TYPE
specifier|static
specifier|final
name|String
name|OBJECT_TYPE
init|=
name|SalesforceEndpointConfig
operator|.
name|SOBJECT_NAME
decl_stmt|;
DECL|enum|Scope
specifier|public
enum|enum
name|Scope
implements|implements
name|MetaDataOperation
block|{
DECL|enumConstant|OBJECT
DECL|method|OBJECT (client, params) -> callback -> client.getDescription(stringParam(params, OBJECT_TYPE).get(), callback)
name|OBJECT
argument_list|(
parameter_list|(
name|client
parameter_list|,
name|params
parameter_list|)
lambda|->
name|callback
lambda|->
name|client
operator|.
name|getDescription
argument_list|(
name|stringParam
argument_list|(
name|params
argument_list|,
name|OBJECT_TYPE
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|callback
argument_list|)
argument_list|)
block|{             @
name|Override
specifier|public
name|MetaData
name|map
argument_list|(
name|final
name|CamelContext
name|camelContext
argument_list|,
name|final
name|InputStream
name|stream
argument_list|)
throws|throws
name|IOException
block|{
name|final
name|SObjectDescription
name|description
operator|=
name|MAPPER
operator|.
name|readerFor
argument_list|(
name|SObjectDescription
operator|.
name|class
argument_list|)
operator|.
name|readValue
argument_list|(
name|stream
argument_list|)
block|;
name|final
name|JsonSchema
name|payload
operator|=
name|JsonUtils
operator|.
name|getSObjectJsonSchemaAsSchema
argument_list|(
name|description
argument_list|,
literal|true
argument_list|)
block|;
return|return
name|MetaDataBuilder
operator|.
name|on
argument_list|(
name|camelContext
argument_list|)
comment|//
operator|.
name|withAttribute
argument_list|(
name|MetaData
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/schema+json"
argument_list|)
comment|//
operator|.
name|withAttribute
argument_list|(
name|MetaData
operator|.
name|JAVA_TYPE
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
comment|//
operator|.
name|withAttribute
argument_list|(
literal|"scope"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|withPayload
argument_list|(
name|payload
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
operator|,
DECL|enumConstant|OBJECT_TYPES
DECL|method|OBJECT_TYPES (client, params) -> callback -> client.getGlobalObjects(callback)
name|OBJECT_TYPES
argument_list|(
parameter_list|(
name|client
parameter_list|,
name|params
parameter_list|)
lambda|->
name|callback
lambda|->
name|client
operator|.
name|getGlobalObjects
argument_list|(
name|callback
argument_list|)
argument_list|)
block|{             @
name|Override
specifier|public
name|MetaData
name|map
argument_list|(
name|final
name|CamelContext
name|camelContext
argument_list|,
name|final
name|InputStream
name|stream
argument_list|)
throws|throws
name|IOException
block|{
name|final
name|JsonNode
name|rawResponse
operator|=
name|MAPPER
operator|.
name|readTree
argument_list|(
name|stream
argument_list|)
block|;
name|final
name|JsonNode
name|payload
operator|=
name|rawResponse
operator|.
name|get
argument_list|(
literal|"sobjects"
argument_list|)
block|;
return|return
name|MetaDataBuilder
operator|.
name|on
argument_list|(
name|camelContext
argument_list|)
comment|//
operator|.
name|withAttribute
argument_list|(
name|MetaData
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
comment|//
operator|.
name|withAttribute
argument_list|(
name|MetaData
operator|.
name|JAVA_TYPE
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
comment|//
operator|.
name|withAttribute
argument_list|(
literal|"scope"
argument_list|,
literal|"object_types"
argument_list|)
operator|.
name|withPayload
argument_list|(
name|payload
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
DECL|field|method
specifier|private
specifier|final
name|BiFunction
argument_list|<
name|RestClient
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Consumer
argument_list|<
name|ResponseCallback
argument_list|>
argument_list|>
name|method
decl_stmt|;
end_decl_stmt

begin_constructor
DECL|method|Scope (final BiFunction<RestClient, Map<String, Object>, Consumer<ResponseCallback>> method)
specifier|private
name|Scope
parameter_list|(
specifier|final
name|BiFunction
argument_list|<
name|RestClient
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Consumer
argument_list|<
name|ResponseCallback
argument_list|>
argument_list|>
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
end_constructor

begin_function
DECL|method|valueOf (final Object given)
specifier|public
specifier|static
name|Scope
name|valueOf
parameter_list|(
specifier|final
name|Object
name|given
parameter_list|)
block|{
if|if
condition|(
name|given
operator|instanceof
name|Scope
condition|)
block|{
return|return
operator|(
name|Scope
operator|)
name|given
return|;
block|}
if|if
condition|(
name|given
operator|instanceof
name|String
condition|)
block|{
return|return
name|Scope
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|given
argument_list|)
return|;
block|}
return|return
name|Scope
operator|.
name|valueOf
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|given
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|}      interface
DECL|interface|MetaDataOperation
name|MetaDataOperation
block|{
DECL|method|map (CamelContext camelContext, InputStream stream)
name|MetaData
name|map
argument_list|(
name|CamelContext
name|camelContext
argument_list|,
name|InputStream
name|stream
argument_list|)
throws|throws
name|IOException
block|;     }
DECL|field|MAPPER
specifier|private
specifier|static
name|final
name|ObjectMapper
name|MAPPER
operator|=
name|JsonUtils
operator|.
name|createObjectMapper
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|meta (final Map<String, Object> parameters)
specifier|public
name|Optional
argument_list|<
name|MetaData
argument_list|>
name|meta
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|objectType
init|=
name|stringParam
argument_list|(
name|parameters
argument_list|,
name|OBJECT_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|Scope
name|scope
init|=
name|objectType
operator|.
name|map
argument_list|(
name|v
lambda|->
name|Scope
operator|.
name|OBJECT
argument_list|)
operator|.
name|orElse
argument_list|(
name|Scope
operator|.
name|OBJECT_TYPES
argument_list|)
decl_stmt|;
specifier|final
name|MetaData
name|metaData
init|=
name|metaInternal
argument_list|(
name|scope
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|metaData
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|metaInternal (final Scope scope, final Map<String, Object> parameters)
name|MetaData
name|metaInternal
parameter_list|(
specifier|final
name|Scope
name|scope
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
specifier|final
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|invoke
argument_list|(
name|camelContext
argument_list|,
name|parameters
argument_list|,
name|client
lambda|->
name|fetchMetadata
argument_list|(
name|camelContext
argument_list|,
name|scope
operator|.
name|method
operator|.
name|apply
argument_list|(
name|client
argument_list|,
name|parameters
argument_list|)
argument_list|,
name|scope
operator|::
name|map
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|fetchMetadata (final CamelContext camelContext, final Consumer<ResponseCallback> restMethod, final MetaDataOperation callback)
specifier|static
name|MetaData
name|fetchMetadata
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|ResponseCallback
argument_list|>
name|restMethod
parameter_list|,
specifier|final
name|MetaDataOperation
name|callback
parameter_list|)
block|{
specifier|final
name|CompletableFuture
argument_list|<
name|MetaData
argument_list|>
name|ret
init|=
operator|new
name|CompletableFuture
argument_list|<>
argument_list|()
decl_stmt|;
name|restMethod
operator|.
name|accept
argument_list|(
parameter_list|(
name|response
parameter_list|,
name|exception
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|completeExceptionally
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ret
operator|.
name|complete
argument_list|(
name|callback
operator|.
name|map
argument_list|(
name|camelContext
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|ret
operator|.
name|completeExceptionally
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|ret
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|mapOf (final String k1, final Object v1, final String k2, final Object v2)
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapOf
parameter_list|(
specifier|final
name|String
name|k1
parameter_list|,
specifier|final
name|Object
name|v1
parameter_list|,
specifier|final
name|String
name|k2
parameter_list|,
specifier|final
name|Object
name|v2
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|k1
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|k2
argument_list|,
name|v2
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
DECL|method|stringParam (final Map<String, Object> params, final String name)
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|stringParam
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Object
name|value
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting parameter `"
operator|+
name|name
operator|+
literal|"` to be of String type, got: "
operator|+
name|value
argument_list|)
throw|;
block|}
end_function

unit|}
end_unit

