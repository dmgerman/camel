begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.approval
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|approval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamAlias
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|annotations
operator|.
name|XStreamImplicit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_comment
comment|/**  * Represents approval request sent to submit, approve or reject record.  *  * @see<a href=  *      "https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_process_approvals.htm">  *      https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_process_approvals.htm</a>  */
end_comment

begin_class
annotation|@
name|UriParams
annotation|@
name|XStreamAlias
argument_list|(
literal|"requests"
argument_list|)
DECL|class|ApprovalRequest
specifier|public
specifier|final
class|class
name|ApprovalRequest
implements|implements
name|Serializable
block|{
DECL|enum|Action
specifier|public
enum|enum
name|Action
block|{
DECL|enumConstant|Submit
DECL|enumConstant|Approve
DECL|enumConstant|Reject
name|Submit
block|,
name|Approve
block|,
name|Reject
block|}
comment|/**      * Lazy holder of fields defined in {@link ApprovalRequest}.      */
DECL|class|FieldHolder
specifier|private
specifier|static
specifier|final
class|class
name|FieldHolder
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|FieldHolder
name|INSTANCE
init|=
operator|new
name|FieldHolder
argument_list|()
decl_stmt|;
DECL|field|fields
specifier|public
specifier|final
name|List
argument_list|<
name|Field
argument_list|>
name|fields
decl_stmt|;
DECL|method|FieldHolder ()
specifier|private
name|FieldHolder
parameter_list|()
block|{
name|fields
operator|=
name|Arrays
operator|.
name|stream
argument_list|(
name|ApprovalRequest
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|f
lambda|->
operator|!
name|Modifier
operator|.
name|isFinal
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *      */
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|actionType
specifier|private
name|Action
name|actionType
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|contextActorId
specifier|private
name|String
name|contextActorId
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|contextId
specifier|private
name|String
name|contextId
decl_stmt|;
annotation|@
name|UriParam
DECL|field|comments
specifier|private
name|String
name|comments
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
annotation|@
name|XStreamImplicit
argument_list|(
name|itemFieldName
operator|=
literal|"nextApproverIds"
argument_list|)
DECL|field|nextApproverIds
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nextApproverIds
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|processDefinitionNameOrId
specifier|private
name|String
name|processDefinitionNameOrId
decl_stmt|;
annotation|@
name|UriParam
DECL|field|skipEntryCriteria
specifier|private
name|boolean
name|skipEntryCriteria
decl_stmt|;
DECL|method|addNextApproverId (final String nextApproverId)
specifier|public
name|void
name|addNextApproverId
parameter_list|(
specifier|final
name|String
name|nextApproverId
parameter_list|)
block|{
name|nextApproverIds
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|nextApproverIds
argument_list|)
operator|.
name|orElse
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|nextApproverIds
operator|.
name|add
argument_list|(
name|nextApproverId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates new {@link ApprovalRequest} by combining values from the given template with the values currently      * present. If the value is not present and the template has the corresponding value, then the template value is      * set. The net result is that all set values of an {@link ApprovalRequest} are preserved, while the values set on      * template are used for undefined (<code>null</code>) values.      *      * @param template      *            template to apply      * @return newly created object with applied template      */
DECL|method|applyTemplate (final ApprovalRequest template)
specifier|public
name|ApprovalRequest
name|applyTemplate
parameter_list|(
specifier|final
name|ApprovalRequest
name|template
parameter_list|)
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
specifier|final
name|ApprovalRequest
name|withTemplateValues
init|=
operator|new
name|ApprovalRequest
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|FieldHolder
operator|.
name|INSTANCE
operator|.
name|fields
control|)
block|{
try|try
block|{
specifier|final
name|Object
name|currentValue
init|=
name|field
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// if a field has not been set, and the template has it set use
comment|// the template value
if|if
condition|(
name|currentValue
operator|==
literal|null
condition|)
block|{
specifier|final
name|Object
name|templateValue
init|=
name|field
operator|.
name|get
argument_list|(
name|template
argument_list|)
decl_stmt|;
if|if
condition|(
name|templateValue
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|set
argument_list|(
name|withTemplateValues
argument_list|,
name|templateValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|field
operator|.
name|set
argument_list|(
name|withTemplateValues
argument_list|,
name|currentValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
decl||
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to apply values from template"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|withTemplateValues
return|;
block|}
annotation|@
name|Override
DECL|method|equals (final Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ApprovalRequest
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ApprovalRequest
name|other
init|=
operator|(
name|ApprovalRequest
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|actionType
argument_list|,
name|other
operator|.
name|actionType
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|contextActorId
argument_list|,
name|other
operator|.
name|contextActorId
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|contextId
argument_list|,
name|other
operator|.
name|contextId
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|comments
argument_list|,
name|other
operator|.
name|comments
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|nextApproverIds
argument_list|,
name|other
operator|.
name|nextApproverIds
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|processDefinitionNameOrId
argument_list|,
name|other
operator|.
name|processDefinitionNameOrId
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|skipEntryCriteria
argument_list|,
name|other
operator|.
name|skipEntryCriteria
argument_list|)
return|;
block|}
DECL|method|getActionType ()
specifier|public
name|Action
name|getActionType
parameter_list|()
block|{
return|return
name|actionType
return|;
block|}
DECL|method|getComments ()
specifier|public
name|String
name|getComments
parameter_list|()
block|{
return|return
name|comments
return|;
block|}
DECL|method|getContextActorId ()
specifier|public
name|String
name|getContextActorId
parameter_list|()
block|{
return|return
name|contextActorId
return|;
block|}
DECL|method|getContextId ()
specifier|public
name|String
name|getContextId
parameter_list|()
block|{
return|return
name|contextId
return|;
block|}
DECL|method|getNextApproverIds ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNextApproverIds
parameter_list|()
block|{
return|return
name|listFromNullable
argument_list|(
name|nextApproverIds
argument_list|)
return|;
block|}
DECL|method|getProcessDefinitionNameOrId ()
specifier|public
name|String
name|getProcessDefinitionNameOrId
parameter_list|()
block|{
return|return
name|processDefinitionNameOrId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|actionType
block|,
name|contextActorId
block|,
name|contextId
block|,
name|comments
block|,
name|nextApproverIds
block|,
name|processDefinitionNameOrId
block|,
name|skipEntryCriteria
block|}
argument_list|)
return|;
block|}
DECL|method|isSkipEntryCriteria ()
specifier|public
name|boolean
name|isSkipEntryCriteria
parameter_list|()
block|{
return|return
name|skipEntryCriteria
return|;
block|}
DECL|method|setActionType (final Action actionType)
specifier|public
name|void
name|setActionType
parameter_list|(
specifier|final
name|Action
name|actionType
parameter_list|)
block|{
name|this
operator|.
name|actionType
operator|=
name|actionType
expr_stmt|;
block|}
DECL|method|setComments (final String comments)
specifier|public
name|void
name|setComments
parameter_list|(
specifier|final
name|String
name|comments
parameter_list|)
block|{
name|this
operator|.
name|comments
operator|=
name|comments
expr_stmt|;
block|}
DECL|method|setContextActorId (final String contextActorId)
specifier|public
name|void
name|setContextActorId
parameter_list|(
specifier|final
name|String
name|contextActorId
parameter_list|)
block|{
name|this
operator|.
name|contextActorId
operator|=
name|contextActorId
expr_stmt|;
block|}
DECL|method|setContextId (final String contextId)
specifier|public
name|void
name|setContextId
parameter_list|(
specifier|final
name|String
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
DECL|method|setNextApproverIds (final List<String> nextApproverIds)
specifier|public
name|void
name|setNextApproverIds
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nextApproverIds
parameter_list|)
block|{
name|this
operator|.
name|nextApproverIds
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|listFromNullable
argument_list|(
name|nextApproverIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setNextApproverIds (final String nextApproverId)
specifier|public
name|void
name|setNextApproverIds
parameter_list|(
specifier|final
name|String
name|nextApproverId
parameter_list|)
block|{
comment|// set single approver id
name|this
operator|.
name|nextApproverIds
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|nextApproverId
argument_list|)
expr_stmt|;
block|}
DECL|method|setProcessDefinitionNameOrId (final String processDefinitionNameOrId)
specifier|public
name|void
name|setProcessDefinitionNameOrId
parameter_list|(
specifier|final
name|String
name|processDefinitionNameOrId
parameter_list|)
block|{
name|this
operator|.
name|processDefinitionNameOrId
operator|=
name|processDefinitionNameOrId
expr_stmt|;
block|}
DECL|method|setSkipEntryCriteria (final boolean skipEntryCriteria)
specifier|public
name|void
name|setSkipEntryCriteria
parameter_list|(
specifier|final
name|boolean
name|skipEntryCriteria
parameter_list|)
block|{
name|this
operator|.
name|skipEntryCriteria
operator|=
name|skipEntryCriteria
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buildy
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ApprovalRequest: "
argument_list|)
decl_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|"actionType: "
argument_list|)
operator|.
name|append
argument_list|(
name|actionType
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", contextActorId: "
argument_list|)
operator|.
name|append
argument_list|(
name|contextActorId
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", contextId: "
argument_list|)
operator|.
name|append
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", comments: "
argument_list|)
operator|.
name|append
argument_list|(
name|comments
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", nextApproverIds: "
argument_list|)
operator|.
name|append
argument_list|(
name|nextApproverIds
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", processDefinitionNameOrId: "
argument_list|)
operator|.
name|append
argument_list|(
name|processDefinitionNameOrId
argument_list|)
expr_stmt|;
name|buildy
operator|.
name|append
argument_list|(
literal|", skipEntryCriteria: "
argument_list|)
operator|.
name|append
argument_list|(
name|skipEntryCriteria
argument_list|)
expr_stmt|;
return|return
name|buildy
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|listFromNullable (final List<String> nullable)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|listFromNullable
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nullable
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|nullable
argument_list|)
operator|.
name|orElse
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

