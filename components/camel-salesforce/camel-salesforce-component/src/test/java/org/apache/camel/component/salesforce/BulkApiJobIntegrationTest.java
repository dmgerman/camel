begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelParameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|JobStateEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|OperationEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Merchandise__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelParameterized
operator|.
name|class
argument_list|)
DECL|class|BulkApiJobIntegrationTest
specifier|public
class|class
name|BulkApiJobIntegrationTest
extends|extends
name|AbstractBulkApiTestBase
block|{
annotation|@
name|Parameter
argument_list|(
literal|0
argument_list|)
DECL|field|jobInfo
specifier|public
name|JobInfo
name|jobInfo
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|1
argument_list|)
DECL|field|operationName
specifier|public
name|String
name|operationName
decl_stmt|;
annotation|@
name|Before
DECL|method|setupProfileWithHardDelete ()
specifier|public
name|void
name|setupProfileWithHardDelete
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|SalesforceLoginConfig
name|loginConfig
init|=
name|LoginConfigHelper
operator|.
name|getLoginConfig
argument_list|()
decl_stmt|;
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"salesforce:apexCall/UpdateProfile?apexMethod=PATCH&sObjectClass=java.lang.String"
argument_list|,
literal|null
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|APEX_QUERY_PARAM_PREFIX
operator|+
literal|"username"
argument_list|,
name|loginConfig
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJobLifecycle ()
specifier|public
name|void
name|testJobLifecycle
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing Job lifecycle for {} of type {}"
argument_list|,
name|jobInfo
operator|.
name|getOperation
argument_list|()
argument_list|,
name|jobInfo
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
comment|// test create
name|jobInfo
operator|=
name|createJob
argument_list|(
name|jobInfo
argument_list|)
expr_stmt|;
comment|// test get
name|jobInfo
operator|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getJob"
argument_list|,
name|jobInfo
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Job should be OPEN"
argument_list|,
name|JobStateEnum
operator|.
name|OPEN
argument_list|,
name|jobInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// test close
name|jobInfo
operator|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:closeJob"
argument_list|,
name|jobInfo
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Job should be CLOSED"
argument_list|,
name|JobStateEnum
operator|.
name|CLOSED
argument_list|,
name|jobInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// test abort
name|jobInfo
operator|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:abortJob"
argument_list|,
name|jobInfo
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Job should be ABORTED"
argument_list|,
name|JobStateEnum
operator|.
name|ABORTED
argument_list|,
name|jobInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test jobs for testJobLifecycle
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"operation = {1}"
argument_list|)
DECL|method|getJobs ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|getJobs
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|JobInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// insert XML
specifier|final
name|JobInfo
name|insertXml
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|insertXml
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|insertXml
operator|.
name|setContentType
argument_list|(
name|ContentType
operator|.
name|XML
argument_list|)
expr_stmt|;
name|insertXml
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|insertXml
argument_list|)
expr_stmt|;
comment|// insert CSV
name|JobInfo
name|insertCsv
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|insertCsv
operator|=
operator|new
name|JobInfo
argument_list|()
expr_stmt|;
name|insertCsv
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|insertCsv
operator|.
name|setContentType
argument_list|(
name|ContentType
operator|.
name|CSV
argument_list|)
expr_stmt|;
name|insertCsv
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|insertCsv
argument_list|)
expr_stmt|;
comment|// update CSV
specifier|final
name|JobInfo
name|updateCsv
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|updateCsv
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|updateCsv
operator|.
name|setContentType
argument_list|(
name|ContentType
operator|.
name|CSV
argument_list|)
expr_stmt|;
name|updateCsv
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|updateCsv
argument_list|)
expr_stmt|;
comment|// upsert CSV
specifier|final
name|JobInfo
name|upsertCsv
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|upsertCsv
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|upsertCsv
operator|.
name|setContentType
argument_list|(
name|ContentType
operator|.
name|CSV
argument_list|)
expr_stmt|;
name|upsertCsv
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|UPSERT
argument_list|)
expr_stmt|;
name|upsertCsv
operator|.
name|setExternalIdFieldName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|upsertCsv
argument_list|)
expr_stmt|;
comment|// delete CSV
specifier|final
name|JobInfo
name|deleteCsv
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|deleteCsv
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|deleteCsv
operator|.
name|setContentType
argument_list|(
name|ContentType
operator|.
name|CSV
argument_list|)
expr_stmt|;
name|deleteCsv
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|deleteCsv
argument_list|)
expr_stmt|;
comment|// hard delete CSV
specifier|final
name|JobInfo
name|hardDeleteCsv
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|hardDeleteCsv
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|hardDeleteCsv
operator|.
name|setContentType
argument_list|(
name|ContentType
operator|.
name|CSV
argument_list|)
expr_stmt|;
name|hardDeleteCsv
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|HARD_DELETE
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|hardDeleteCsv
argument_list|)
expr_stmt|;
comment|// query CSV
specifier|final
name|JobInfo
name|queryCsv
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|queryCsv
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|queryCsv
operator|.
name|setContentType
argument_list|(
name|ContentType
operator|.
name|CSV
argument_list|)
expr_stmt|;
name|queryCsv
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|QUERY
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|queryCsv
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|j
lambda|->
operator|new
name|Object
index|[]
block|{
name|j
block|,
name|j
operator|.
name|getOperation
argument_list|()
operator|.
name|name
argument_list|()
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

