begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|BatchInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|BatchStateEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|Theories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Theories
operator|.
name|class
argument_list|)
DECL|class|AbstractBulkApiTestBase
specifier|public
specifier|abstract
class|class
name|AbstractBulkApiTestBase
extends|extends
name|AbstractSalesforceTestBase
block|{
DECL|method|createJob (JobInfo jobInfo)
specifier|protected
name|JobInfo
name|createJob
parameter_list|(
name|JobInfo
name|jobInfo
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|jobInfo
operator|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:createJob"
argument_list|,
name|jobInfo
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing JobId"
argument_list|,
name|jobInfo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jobInfo
return|;
block|}
annotation|@
name|Override
DECL|method|doCreateRouteBuilder ()
specifier|protected
name|RouteBuilder
name|doCreateRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test createJob
name|from
argument_list|(
literal|"direct:createJob"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce://createJob"
argument_list|)
expr_stmt|;
comment|// test getJob
name|from
argument_list|(
literal|"direct:getJob"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getJob"
argument_list|)
expr_stmt|;
comment|// test closeJob
name|from
argument_list|(
literal|"direct:closeJob"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:closeJob"
argument_list|)
expr_stmt|;
comment|// test abortJob
name|from
argument_list|(
literal|"direct:abortJob"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:abortJob"
argument_list|)
expr_stmt|;
comment|// test createBatch
name|from
argument_list|(
literal|"direct:createBatch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:createBatch"
argument_list|)
expr_stmt|;
comment|// test getBatch
name|from
argument_list|(
literal|"direct:getBatch"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getBatch"
argument_list|)
expr_stmt|;
comment|// test getAllBatches
name|from
argument_list|(
literal|"direct:getAllBatches"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getAllBatches"
argument_list|)
expr_stmt|;
comment|// test getRequest
name|from
argument_list|(
literal|"direct:getRequest"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getRequest"
argument_list|)
expr_stmt|;
comment|// test getResults
name|from
argument_list|(
literal|"direct:getResults"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getResults"
argument_list|)
expr_stmt|;
comment|// test createBatchQuery
name|from
argument_list|(
literal|"direct:createBatchQuery"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:createBatchQuery?sObjectQuery=SELECT Name, Description__c, Price__c, Total_Inventory__c FROM Merchandise__c WHERE Name LIKE '%25Bulk API%25'"
argument_list|)
expr_stmt|;
comment|// test getQueryResultIds
name|from
argument_list|(
literal|"direct:getQueryResultIds"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getQueryResultIds"
argument_list|)
expr_stmt|;
comment|// test getQueryResult
name|from
argument_list|(
literal|"direct:getQueryResult"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getQueryResult"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|batchProcessed (BatchInfo batchInfo)
specifier|protected
name|boolean
name|batchProcessed
parameter_list|(
name|BatchInfo
name|batchInfo
parameter_list|)
block|{
name|BatchStateEnum
name|state
init|=
name|batchInfo
operator|.
name|getState
argument_list|()
decl_stmt|;
return|return
operator|!
operator|(
name|state
operator|==
name|BatchStateEnum
operator|.
name|QUEUED
operator|||
name|state
operator|==
name|BatchStateEnum
operator|.
name|IN_PROGRESS
operator|)
return|;
block|}
DECL|method|getBatchInfo (BatchInfo batchInfo)
specifier|protected
name|BatchInfo
name|getBatchInfo
parameter_list|(
name|BatchInfo
name|batchInfo
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|batchInfo
operator|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getBatch"
argument_list|,
name|batchInfo
argument_list|,
name|BatchInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null batch"
argument_list|,
name|batchInfo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null batch id"
argument_list|,
name|batchInfo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|batchInfo
return|;
block|}
block|}
end_class

end_unit

