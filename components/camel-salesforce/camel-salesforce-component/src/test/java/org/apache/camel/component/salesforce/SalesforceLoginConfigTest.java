begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|SalesforceLoginConfigTest
specifier|public
class|class
name|SalesforceLoginConfigTest
block|{
DECL|field|jwt
specifier|final
name|SalesforceLoginConfig
name|jwt
decl_stmt|;
DECL|field|refreshToken
specifier|final
name|SalesforceLoginConfig
name|refreshToken
decl_stmt|;
DECL|field|usernamePassword
specifier|final
name|SalesforceLoginConfig
name|usernamePassword
decl_stmt|;
DECL|method|SalesforceLoginConfigTest ()
specifier|public
name|SalesforceLoginConfigTest
parameter_list|()
block|{
name|usernamePassword
operator|=
operator|new
name|SalesforceLoginConfig
argument_list|()
expr_stmt|;
name|usernamePassword
operator|.
name|setUserName
argument_list|(
literal|"userName"
argument_list|)
expr_stmt|;
name|usernamePassword
operator|.
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|usernamePassword
operator|.
name|setClientId
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|usernamePassword
operator|.
name|setClientSecret
argument_list|(
literal|"clientSecret"
argument_list|)
expr_stmt|;
name|refreshToken
operator|=
operator|new
name|SalesforceLoginConfig
argument_list|()
expr_stmt|;
name|refreshToken
operator|.
name|setUserName
argument_list|(
literal|"userName"
argument_list|)
expr_stmt|;
name|refreshToken
operator|.
name|setRefreshToken
argument_list|(
literal|"refreshToken"
argument_list|)
expr_stmt|;
name|refreshToken
operator|.
name|setClientId
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|refreshToken
operator|.
name|setClientSecret
argument_list|(
literal|"clientSecret"
argument_list|)
expr_stmt|;
name|jwt
operator|=
operator|new
name|SalesforceLoginConfig
argument_list|()
expr_stmt|;
name|jwt
operator|.
name|setUserName
argument_list|(
literal|"userName"
argument_list|)
expr_stmt|;
specifier|final
name|KeyStoreParameters
name|keystore
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|keystore
operator|.
name|setResource
argument_list|(
literal|"keystore.jks"
argument_list|)
expr_stmt|;
name|jwt
operator|.
name|setKeystore
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|jwt
operator|.
name|setClientId
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDetermineProperAuthenticationType ()
specifier|public
name|void
name|shouldDetermineProperAuthenticationType
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|AuthenticationType
operator|.
name|USERNAME_PASSWORD
argument_list|,
name|usernamePassword
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationType
operator|.
name|REFRESH_TOKEN
argument_list|,
name|refreshToken
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AuthenticationType
operator|.
name|JWT
argument_list|,
name|jwt
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldJwtParameters ()
specifier|public
name|void
name|shouldJwtParameters
parameter_list|()
block|{
name|jwt
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldValidateRefreshTokenParameters ()
specifier|public
name|void
name|shouldValidateRefreshTokenParameters
parameter_list|()
block|{
name|refreshToken
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldValidateUsernamePasswordParameters ()
specifier|public
name|void
name|shouldValidateUsernamePasswordParameters
parameter_list|()
block|{
name|usernamePassword
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

