begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|approval
operator|.
name|ApprovalRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|approval
operator|.
name|ApprovalResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ApprovalExamplesIntegrationTest
specifier|public
class|class
name|ApprovalExamplesIntegrationTest
extends|extends
name|AbstractApprovalIntegrationTest
block|{
DECL|method|ApprovalExamplesIntegrationTest ()
specifier|public
name|ApprovalExamplesIntegrationTest
parameter_list|()
block|{
name|super
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|example1 ()
specifier|public
name|void
name|example1
parameter_list|()
block|{
comment|// tag::example1Usage
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|body
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|body
operator|.
name|put
argument_list|(
literal|"contextId"
argument_list|,
name|accountIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|put
argument_list|(
literal|"nextApproverIds"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
specifier|final
name|ApprovalResult
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:example1"
argument_list|,
name|body
argument_list|,
name|ApprovalResult
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// end::example1Usage
name|assertNotNull
argument_list|(
literal|"Result should be received"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|example2 ()
specifier|public
name|void
name|example2
parameter_list|()
block|{
comment|// tag::example2Usage
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|body
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|body
operator|.
name|put
argument_list|(
literal|"contextId"
argument_list|,
name|accountIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|put
argument_list|(
literal|"nextApproverIds"
argument_list|,
name|userId
argument_list|)
expr_stmt|;
specifier|final
name|ApprovalResult
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:example2"
argument_list|,
name|body
argument_list|,
name|ApprovalResult
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// end::example2Usage
name|assertNotNull
argument_list|(
literal|"Result should be received"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalRequest
name|approvalTemplate
init|=
operator|new
name|ApprovalRequest
argument_list|()
decl_stmt|;
name|approvalTemplate
operator|.
name|setActionType
argument_list|(
name|ApprovalRequest
operator|.
name|Action
operator|.
name|Submit
argument_list|)
expr_stmt|;
name|approvalTemplate
operator|.
name|setComments
argument_list|(
literal|"Sample approval template"
argument_list|)
expr_stmt|;
name|approvalTemplate
operator|.
name|setProcessDefinitionNameOrId
argument_list|(
literal|"Test_Account_Process"
argument_list|)
expr_stmt|;
name|approvalTemplate
operator|.
name|setSkipEntryCriteria
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"approvalTemplate"
argument_list|,
name|approvalTemplate
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Override
DECL|method|doCreateRouteBuilder ()
specifier|protected
name|RouteBuilder
name|doCreateRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// tag::example1Route[]
name|from
argument_list|(
literal|"direct:example1"
argument_list|)
comment|//
operator|.
name|setHeader
argument_list|(
literal|"approval.ContextId"
argument_list|,
name|simple
argument_list|(
literal|"${body['contextId']}"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"approval.NextApproverIds"
argument_list|,
name|simple
argument_list|(
literal|"${body['nextApproverIds']}"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:approval?"
comment|//
operator|+
literal|"approvalActionType=Submit"
comment|//
operator|+
literal|"&approvalComments=this is a test"
comment|//
operator|+
literal|"&approvalProcessDefinitionNameOrId=Test_Account_Process"
comment|//
operator|+
literal|"&approvalSkipEntryCriteria=true"
argument_list|)
expr_stmt|;
comment|// end::example1Route[]
comment|// tag::example2Route[]
name|from
argument_list|(
literal|"direct:example2"
argument_list|)
comment|//
operator|.
name|setHeader
argument_list|(
literal|"approval.ContextId"
argument_list|,
name|simple
argument_list|(
literal|"${body['contextId']}"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"approval.NextApproverIds"
argument_list|,
name|simple
argument_list|(
literal|"${body['nextApproverIds']}"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:approval?approval=#approvalTemplate"
argument_list|)
expr_stmt|;
comment|// end::example2Route[]
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

