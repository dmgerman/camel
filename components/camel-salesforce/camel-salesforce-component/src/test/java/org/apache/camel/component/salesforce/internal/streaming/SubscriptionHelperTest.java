begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|streaming
operator|.
name|SubscriptionHelper
operator|.
name|determineReplayIdFor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|SubscriptionHelperTest
specifier|public
class|class
name|SubscriptionHelperTest
block|{
annotation|@
name|Test
DECL|method|shouldSupportInitialConfigMapWithTwoKeySyntaxes ()
specifier|public
name|void
name|shouldSupportInitialConfigMapWithTwoKeySyntaxes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|initialReplayIdMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|initialReplayIdMap
operator|.
name|put
argument_list|(
literal|"my-topic-1"
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|initialReplayIdMap
operator|.
name|put
argument_list|(
literal|"/topic/my-topic-1"
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
name|initialReplayIdMap
operator|.
name|put
argument_list|(
literal|"/topic/my-topic-2"
argument_list|,
literal|30L
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceEndpointConfig
name|config
init|=
operator|new
name|SalesforceEndpointConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setDefaultReplayId
argument_list|(
literal|14L
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInitialReplayIdMap
argument_list|(
name|initialReplayIdMap
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceComponent
name|component
init|=
name|mock
argument_list|(
name|SalesforceComponent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SalesforceEndpoint
name|endpoint
init|=
name|mock
argument_list|(
name|SalesforceEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getReplayId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getComponent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SalesforceEndpointConfig
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-1` to be 10, as short topic names have priority"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|10L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-2` to be 30, the only one given"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|30L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-3` to be 14, the default"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|14L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|precedenceShouldBeFollowed ()
specifier|public
name|void
name|precedenceShouldBeFollowed
parameter_list|()
block|{
specifier|final
name|SalesforceEndpointConfig
name|componentConfig
init|=
operator|new
name|SalesforceEndpointConfig
argument_list|()
decl_stmt|;
name|componentConfig
operator|.
name|setDefaultReplayId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|componentConfig
operator|.
name|setInitialReplayIdMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"my-topic-1"
argument_list|,
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|componentConfig
operator|.
name|setInitialReplayIdMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"my-topic-2"
argument_list|,
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceEndpointConfig
name|endpointConfig
init|=
operator|new
name|SalesforceEndpointConfig
argument_list|()
decl_stmt|;
name|endpointConfig
operator|.
name|setDefaultReplayId
argument_list|(
literal|4L
argument_list|)
expr_stmt|;
name|endpointConfig
operator|.
name|setInitialReplayIdMap
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"my-topic-1"
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceComponent
name|component
init|=
name|mock
argument_list|(
name|SalesforceComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|component
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|componentConfig
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceEndpoint
name|endpoint
init|=
name|mock
argument_list|(
name|SalesforceEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getReplayId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getComponent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|endpointConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-1` to be 5, as endpoint configuration has priority"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|5L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-2` to be 3, as endpoint does not configure it"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-3` to be 4, as it is endpoint's default"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|4L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-3"
argument_list|)
argument_list|)
expr_stmt|;
name|endpointConfig
operator|.
name|setDefaultReplayId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-3` to be 1, as it is component's default when endpoint does not have a default"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-3"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|getReplayId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|6L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-1` to be 6, as it is endpoint configured explicitly on the endpoint"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-2` to be 6, as it is endpoint configured explicitly on the endpoint"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-3` to be 6, as it is endpoint configured explicitly on the endpoint"
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|6L
argument_list|)
argument_list|,
name|determineReplayIdFor
argument_list|(
name|endpoint
argument_list|,
literal|"my-topic-3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDetermineChannelNames ()
specifier|public
name|void
name|shouldDetermineChannelNames
parameter_list|()
block|{
name|assertThat
argument_list|(
name|SubscriptionHelper
operator|.
name|getChannelName
argument_list|(
literal|"topic1"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"/topic/topic1"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SubscriptionHelper
operator|.
name|getChannelName
argument_list|(
literal|"event/Test"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"/event/Test__e"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|SubscriptionHelper
operator|.
name|getChannelName
argument_list|(
literal|"event/Test__e"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"/event/Test__e"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

