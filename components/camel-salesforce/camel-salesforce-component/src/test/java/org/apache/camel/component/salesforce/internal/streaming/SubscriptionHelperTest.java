begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.internal.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|client
operator|.
name|ClientSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|client
operator|.
name|ClientSession
operator|.
name|Extension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|client
operator|.
name|BayeuxClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|common
operator|.
name|HashMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|SubscriptionHelperTest
specifier|public
class|class
name|SubscriptionHelperTest
block|{
DECL|field|NOT_USED
specifier|static
specifier|final
name|ClientSession
name|NOT_USED
init|=
literal|null
decl_stmt|;
DECL|field|component
specifier|final
name|SalesforceComponent
name|component
init|=
name|mock
argument_list|(
name|SalesforceComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|session
specifier|final
name|SalesforceSession
name|session
init|=
name|mock
argument_list|(
name|SalesforceSession
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|config
specifier|final
name|SalesforceEndpointConfig
name|config
init|=
name|mock
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setupMocks ()
specifier|public
name|void
name|setupMocks
parameter_list|()
block|{
name|when
argument_list|(
name|component
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|session
operator|.
name|getInstanceUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"https://some.url"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|component
operator|.
name|getConfig
argument_list|()
operator|.
name|getApiVersion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|DEFAULT_VERSION
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|getHttpClient
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|SalesforceHttpClient
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldSupportInitialConfigMapWithTwoKeySyntaxes ()
specifier|public
name|void
name|shouldSupportInitialConfigMapWithTwoKeySyntaxes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|initialReplayIdMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|initialReplayIdMap
operator|.
name|put
argument_list|(
literal|"my-topic-1"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|initialReplayIdMap
operator|.
name|put
argument_list|(
literal|"/topic/my-topic-1"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|initialReplayIdMap
operator|.
name|put
argument_list|(
literal|"/topic/my-topic-2"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|getDefaultReplayId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|config
operator|.
name|getInitialReplayIdMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|initialReplayIdMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-1` to be 10, as short topic names have priority"
argument_list|,
operator|(
name|Object
operator|)
literal|10
argument_list|,
name|fetchReplayExtensionValue
argument_list|(
literal|"my-topic-1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"/topic/my-topic-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-2` to be 30, the only one given"
argument_list|,
operator|(
name|Object
operator|)
literal|30
argument_list|,
name|fetchReplayExtensionValue
argument_list|(
literal|"my-topic-2"
argument_list|)
operator|.
name|get
argument_list|(
literal|"/topic/my-topic-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting replayId for `my-topic-3` to be 14, the default"
argument_list|,
operator|(
name|Object
operator|)
literal|14
argument_list|,
name|fetchReplayExtensionValue
argument_list|(
literal|"my-topic-3"
argument_list|)
operator|.
name|get
argument_list|(
literal|"/topic/my-topic-3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|fetchReplayExtensionValue (final String topicName)
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|fetchReplayExtensionValue
parameter_list|(
specifier|final
name|String
name|topicName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BayeuxClient
name|client
init|=
name|SubscriptionHelper
operator|.
name|createClient
argument_list|(
name|component
argument_list|,
name|topicName
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Extension
argument_list|>
name|extensions
init|=
name|client
operator|.
name|getExtensions
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Extension
argument_list|>
name|extension
init|=
name|extensions
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|instanceof
name|CometDReplayExtension
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Client should be configured with CometDReplayExtension extension"
argument_list|,
name|extension
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CometDReplayExtension
name|cometDReplayExtension
init|=
operator|(
name|CometDReplayExtension
operator|)
name|extension
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Message
operator|.
name|Mutable
name|handshake
init|=
operator|new
name|HashMapMessage
argument_list|()
decl_stmt|;
name|handshake
operator|.
name|setChannel
argument_list|(
name|Channel
operator|.
name|META_HANDSHAKE
argument_list|)
expr_stmt|;
name|handshake
operator|.
name|put
argument_list|(
name|Message
operator|.
name|EXT_FIELD
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"replay"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|cometDReplayExtension
operator|.
name|rcvMeta
argument_list|(
name|NOT_USED
argument_list|,
name|handshake
argument_list|)
expr_stmt|;
specifier|final
name|Message
operator|.
name|Mutable
name|subscription
init|=
operator|new
name|HashMapMessage
argument_list|()
decl_stmt|;
name|subscription
operator|.
name|setChannel
argument_list|(
name|Channel
operator|.
name|META_SUBSCRIBE
argument_list|)
expr_stmt|;
name|cometDReplayExtension
operator|.
name|sendMeta
argument_list|(
name|NOT_USED
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|replays
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
operator|)
name|subscription
operator|.
name|getExt
argument_list|()
operator|.
name|get
argument_list|(
literal|"replay"
argument_list|)
decl_stmt|;
return|return
name|replays
return|;
block|}
block|}
end_class

end_unit

