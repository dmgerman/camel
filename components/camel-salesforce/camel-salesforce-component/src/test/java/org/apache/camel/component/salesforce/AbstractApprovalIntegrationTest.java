begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|CreateSObjectResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|QueryRecordsReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|AbstractApprovalIntegrationTest
specifier|public
specifier|abstract
class|class
name|AbstractApprovalIntegrationTest
extends|extends
name|AbstractSalesforceTestBase
block|{
DECL|field|NOT_USED
specifier|protected
specifier|static
specifier|final
name|Object
name|NOT_USED
init|=
literal|null
decl_stmt|;
DECL|field|accountIds
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|accountIds
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|userId
specifier|protected
name|String
name|userId
decl_stmt|;
DECL|field|accountCount
specifier|private
specifier|final
name|int
name|accountCount
decl_stmt|;
DECL|method|AbstractApprovalIntegrationTest (final int accountCount)
name|AbstractApprovalIntegrationTest
parameter_list|(
specifier|final
name|int
name|accountCount
parameter_list|)
block|{
name|this
operator|.
name|accountCount
operator|=
name|accountCount
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|createAccounts ()
specifier|public
name|void
name|createAccounts
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|accountsToCreate
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|accountCount
operator|+
literal|1
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|idx
lambda|->
block|{
specifier|final
name|String
name|name
init|=
literal|"test-account-"
operator|+
name|idx
decl_stmt|;
specifier|final
name|Account
name|account
init|=
operator|new
name|Account
argument_list|()
decl_stmt|;
name|account
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|accountIds
operator|=
name|accountsToCreate
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|account
lambda|->
name|template
operator|.
name|requestBody
argument_list|(
literal|"salesforce:createSObject?sObjectName=Account"
argument_list|,
name|account
argument_list|,
name|CreateSObjectResult
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|CreateSObjectResult
operator|::
name|getId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|deleteAccounts ()
specifier|public
name|void
name|deleteAccounts
parameter_list|()
block|{
name|accountIds
operator|.
name|forEach
argument_list|(
name|id
lambda|->
name|template
operator|.
name|sendBody
argument_list|(
literal|"salesforce:deleteSObject?sObjectName=Account"
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setupUserId ()
specifier|public
name|void
name|setupUserId
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|SalesforceLoginConfig
name|loginConfig
init|=
name|LoginConfigHelper
operator|.
name|getLoginConfig
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|loginConfig
operator|.
name|getUserName
argument_list|()
decl_stmt|;
comment|// I happen to have a username (e-mail address) with '+' sign in it,
comment|// DefaultRestClient#urlEncode would encode '+' as '%20' and the query
comment|// would not return any result, so replacing '+' with '%' and '=' with
comment|// 'LIKE' makes sense in my case. It should also work for every other
comment|// case where '+' is not used as a part of the username.
specifier|final
name|String
name|wildcardUsername
init|=
name|userName
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|'%'
argument_list|)
decl_stmt|;
specifier|final
name|QueryRecordsReport
name|results
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"salesforce:query?sObjectClass="
operator|+
name|QueryRecordsReport
operator|.
name|class
operator|.
name|getName
argument_list|()
comment|//
operator|+
literal|"&sObjectQuery=SELECT Id FROM User WHERE Username LIKE '"
operator|+
name|wildcardUsername
operator|+
literal|"'"
argument_list|,
name|NOT_USED
argument_list|,
name|QueryRecordsReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|userId
operator|=
name|results
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

