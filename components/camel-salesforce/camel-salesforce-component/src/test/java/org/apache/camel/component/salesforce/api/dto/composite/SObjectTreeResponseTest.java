begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|RestError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|XStreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsCollectionContaining
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|SObjectTreeResponseTest
specifier|public
class|class
name|SObjectTreeResponseTest
block|{
annotation|@
name|Test
DECL|method|shouldDeserializeJsonFromSalesforceExample ()
specifier|public
name|void
name|shouldDeserializeJsonFromSalesforceExample
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|json
init|=
literal|"{\n"
comment|//
operator|+
literal|"    \"hasErrors\" : false,\n"
comment|//
operator|+
literal|"    \"results\" : [{\n"
comment|//
operator|+
literal|"     \"referenceId\" : \"ref1\",\n"
comment|//
operator|+
literal|"     \"id\" : \"001D000000K0fXOIAZ\"\n"
comment|//
operator|+
literal|"     },{\n"
comment|//
operator|+
literal|"     \"referenceId\" : \"ref4\",\n"
comment|//
operator|+
literal|"     \"id\" : \"001D000000K0fXPIAZ\"\n"
comment|//
operator|+
literal|"     },{\n"
comment|//
operator|+
literal|"     \"referenceId\" : \"ref2\",\n"
comment|//
operator|+
literal|"     \"id\" : \"003D000000QV9n2IAD\"\n"
comment|//
operator|+
literal|"     },{\n"
comment|//
operator|+
literal|"     \"referenceId\" : \"ref3\",\n"
comment|//
operator|+
literal|"     \"id\" : \"003D000000QV9n3IAD\"\n"
comment|//
operator|+
literal|"     }]\n"
comment|//
operator|+
literal|"}"
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
name|JsonUtils
operator|.
name|createObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|ObjectReader
name|reader
init|=
name|mapper
operator|.
name|readerFor
argument_list|(
name|SObjectTreeResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SObjectTreeResponse
name|response
init|=
name|reader
operator|.
name|readValue
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response should be parsed"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"`hasErrors` flag should be false"
argument_list|,
name|response
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should read 4 references"
argument_list|,
literal|4
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"4 references should be read as expected"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
argument_list|,
name|hasItems
argument_list|(
operator|new
name|ReferenceId
argument_list|(
literal|"ref1"
argument_list|,
literal|"001D000000K0fXOIAZ"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
comment|//
operator|new
name|ReferenceId
argument_list|(
literal|"ref4"
argument_list|,
literal|"001D000000K0fXPIAZ"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
comment|//
operator|new
name|ReferenceId
argument_list|(
literal|"ref2"
argument_list|,
literal|"003D000000QV9n2IAD"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
comment|//
operator|new
name|ReferenceId
argument_list|(
literal|"ref3"
argument_list|,
literal|"003D000000QV9n3IAD"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDeserializeJsonFromSalesforceFailureExample ()
specifier|public
name|void
name|shouldDeserializeJsonFromSalesforceFailureExample
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|json
init|=
literal|"{\n"
comment|//
operator|+
literal|"   \"hasErrors\" : true,\n"
comment|//
operator|+
literal|"   \"results\" : [{\n"
comment|//
operator|+
literal|"     \"referenceId\" : \"ref2\",\n"
comment|//
operator|+
literal|"     \"errors\" : [{\n"
comment|//
operator|+
literal|"       \"statusCode\" : \"INVALID_EMAIL_ADDRESS\",\n"
comment|//
operator|+
literal|"       \"message\" : \"Email: invalid email address: 123\",\n"
comment|//
operator|+
literal|"       \"fields\" : [ \"Email\" ]\n"
comment|//
operator|+
literal|"       }]\n"
comment|//
operator|+
literal|"     }]\n"
comment|//
operator|+
literal|"}"
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
name|JsonUtils
operator|.
name|createObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|ObjectReader
name|reader
init|=
name|mapper
operator|.
name|readerFor
argument_list|(
name|SObjectTreeResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SObjectTreeResponse
name|response
init|=
name|reader
operator|.
name|readValue
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response should be parsed"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"`hasErrors` flag should be true"
argument_list|,
name|response
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should read one reference"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"The reference should be read as expected"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
argument_list|,
name|hasItems
argument_list|(
operator|new
name|ReferenceId
argument_list|(
literal|"ref2"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|RestError
argument_list|(
literal|"INVALID_EMAIL_ADDRESS"
argument_list|,
literal|"Email: invalid email address: 123"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Email"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDeserializeXmlFromSalesforceExample ()
specifier|public
name|void
name|shouldDeserializeXmlFromSalesforceExample
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|xml
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
comment|//
operator|+
literal|"<Result>\n"
comment|//
operator|+
literal|"<hasErrors>false</hasErrors>\n"
comment|//
operator|+
literal|"<results>\n"
comment|//
operator|+
literal|"<id>001D000000K0fXOIAZ</id>\n"
comment|//
operator|+
literal|"<referenceId>ref1</referenceId>\n"
comment|//
operator|+
literal|"</results>\n"
comment|//
operator|+
literal|"<results>\n"
comment|//
operator|+
literal|"<id>001D000000K0fXPIAZ</id>\n"
comment|//
operator|+
literal|"<referenceId>ref4</referenceId>\n"
comment|//
operator|+
literal|"</results>\n"
comment|//
operator|+
literal|"<results>\n"
comment|//
operator|+
literal|"<id>003D000000QV9n2IAD</id>\n"
comment|//
operator|+
literal|"<referenceId>ref2</referenceId>\n"
comment|//
operator|+
literal|"</results>\n"
comment|//
operator|+
literal|"<results>\n"
comment|//
operator|+
literal|"<id>003D000000QV9n3IAD</id>\n"
comment|//
operator|+
literal|"<referenceId>ref3</referenceId>\n"
comment|//
operator|+
literal|"</results>\n"
comment|//
operator|+
literal|"</Result>"
decl_stmt|;
specifier|final
name|XStream
name|xStream
init|=
name|XStreamUtils
operator|.
name|createXStream
argument_list|(
name|SObjectTreeResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SObjectTreeResponse
name|response
init|=
operator|(
name|SObjectTreeResponse
operator|)
name|xStream
operator|.
name|fromXML
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response should be parsed"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"`hasErrors` flag should be false"
argument_list|,
name|response
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should read 4 references"
argument_list|,
literal|4
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"4 references should be read as expected"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
argument_list|,
name|hasItems
argument_list|(
operator|new
name|ReferenceId
argument_list|(
literal|"ref1"
argument_list|,
literal|"001D000000K0fXOIAZ"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
comment|//
operator|new
name|ReferenceId
argument_list|(
literal|"ref4"
argument_list|,
literal|"001D000000K0fXPIAZ"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
comment|//
operator|new
name|ReferenceId
argument_list|(
literal|"ref2"
argument_list|,
literal|"003D000000QV9n2IAD"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|,
comment|//
operator|new
name|ReferenceId
argument_list|(
literal|"ref3"
argument_list|,
literal|"003D000000QV9n3IAD"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDeserializeXmlFromSalesforceFailureExample ()
specifier|public
name|void
name|shouldDeserializeXmlFromSalesforceFailureExample
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|xml
init|=
literal|"<Result>\n"
comment|//
operator|+
literal|"<hasErrors>true</hasErrors>\n"
comment|//
operator|+
literal|"<results>\n"
comment|//
operator|+
literal|"<errors>\n"
comment|//
operator|+
literal|"<fields>Email</fields>\n"
comment|//
operator|+
literal|"<message>Email: invalid email address: 123</message>\n"
comment|//
operator|+
literal|"<statusCode>INVALID_EMAIL_ADDRESS</statusCode>\n"
comment|//
operator|+
literal|"</errors>\n"
comment|//
operator|+
literal|"<referenceId>ref2</referenceId>\n"
comment|//
operator|+
literal|"</results>\n"
comment|//
operator|+
literal|"</Result>"
decl_stmt|;
specifier|final
name|XStream
name|xStream
init|=
name|XStreamUtils
operator|.
name|createXStream
argument_list|(
name|SObjectTreeResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SObjectTreeResponse
name|response
init|=
operator|(
name|SObjectTreeResponse
operator|)
name|xStream
operator|.
name|fromXML
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response should be parsed"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"`hasErrors` flag should be true"
argument_list|,
name|response
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should read one reference"
argument_list|,
literal|1
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"The reference should be read as expected"
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
argument_list|,
name|hasItems
argument_list|(
operator|new
name|ReferenceId
argument_list|(
literal|"ref2"
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|RestError
argument_list|(
literal|"INVALID_EMAIL_ADDRESS"
argument_list|,
literal|"Email: invalid email address: 123"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Email"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

