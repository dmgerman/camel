begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|BatchInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|BatchStateEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|JobInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|bulk
operator|.
name|OperationEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|Merchandise__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|DataPoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|Theory
import|;
end_import

begin_class
DECL|class|BulkApiQueryIntegrationTest
specifier|public
class|class
name|BulkApiQueryIntegrationTest
extends|extends
name|AbstractBulkApiTestBase
block|{
annotation|@
name|DataPoints
DECL|method|getContentTypes ()
specifier|public
specifier|static
name|ContentType
index|[]
name|getContentTypes
parameter_list|()
block|{
return|return
operator|new
name|ContentType
index|[]
block|{
name|ContentType
operator|.
name|XML
block|,
name|ContentType
operator|.
name|CSV
block|}
return|;
block|}
annotation|@
name|Theory
DECL|method|testQueryLifecycle (ContentType contentType)
specifier|public
name|void
name|testQueryLifecycle
parameter_list|(
name|ContentType
name|contentType
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing Query lifecycle with {} content"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|// create a QUERY test Job
name|JobInfo
name|jobInfo
init|=
operator|new
name|JobInfo
argument_list|()
decl_stmt|;
name|jobInfo
operator|.
name|setOperation
argument_list|(
name|OperationEnum
operator|.
name|QUERY
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|jobInfo
operator|.
name|setObject
argument_list|(
name|Merchandise__c
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|jobInfo
operator|=
name|createJob
argument_list|(
name|jobInfo
argument_list|)
expr_stmt|;
comment|// test createQuery
name|BatchInfo
name|batchInfo
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:createBatchQuery"
argument_list|,
name|jobInfo
argument_list|,
name|BatchInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null batch query"
argument_list|,
name|batchInfo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Null batch query id"
argument_list|,
name|batchInfo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getRequest
name|InputStream
name|requestStream
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getRequest"
argument_list|,
name|batchInfo
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null batch request"
argument_list|,
name|requestStream
argument_list|)
expr_stmt|;
comment|// wait for batch to finish
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for query batch to finish..."
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|batchProcessed
argument_list|(
name|batchInfo
argument_list|)
condition|)
block|{
comment|// sleep 5 seconds
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// check again
name|batchInfo
operator|=
name|getBatchInfo
argument_list|(
name|batchInfo
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Query finished with state "
operator|+
name|batchInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Query did not succeed"
argument_list|,
name|BatchStateEnum
operator|.
name|COMPLETED
argument_list|,
name|batchInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getQueryResultList
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|resultIds
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getQueryResultIds"
argument_list|,
name|batchInfo
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null query result ids"
argument_list|,
name|resultIds
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Empty result ids"
argument_list|,
name|resultIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// test getQueryResult
for|for
control|(
name|String
name|resultId
range|:
name|resultIds
control|)
block|{
name|InputStream
name|results
init|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:getQueryResult"
argument_list|,
name|batchInfo
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|RESULT_ID
argument_list|,
name|resultId
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null query result"
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
comment|// close the test job
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:closeJob"
argument_list|,
name|jobInfo
argument_list|,
name|JobInfo
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

