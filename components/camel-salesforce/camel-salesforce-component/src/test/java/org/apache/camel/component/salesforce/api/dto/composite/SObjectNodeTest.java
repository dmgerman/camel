begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Contact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
DECL|class|SObjectNodeTest
specifier|public
class|class
name|SObjectNodeTest
extends|extends
name|CompositeTestBase
block|{
DECL|method|toArray (final Stream<SObjectNode> children)
specifier|static
name|SObjectNode
index|[]
name|toArray
parameter_list|(
specifier|final
name|Stream
argument_list|<
name|SObjectNode
argument_list|>
name|children
parameter_list|)
block|{
return|return
name|children
operator|.
name|toArray
argument_list|(
name|l
lambda|->
operator|new
name|SObjectNode
index|[
name|l
index|]
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|shouldBeAbleToAddChildNode ()
specifier|public
name|void
name|shouldBeAbleToAddChildNode
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|smith
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|SObjectNode
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildNodesOfType
argument_list|(
literal|"Contacts"
argument_list|)
decl_stmt|;
specifier|final
name|SObjectNode
index|[]
name|childrenAry
init|=
name|toArray
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 2"
argument_list|,
literal|2
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There should be one child in this node"
argument_list|,
literal|1
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldBeAbleToAddChildObject ()
specifier|public
name|void
name|shouldBeAbleToAddChildObject
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
name|smith
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|SObjectNode
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildNodesOfType
argument_list|(
literal|"Contacts"
argument_list|)
decl_stmt|;
specifier|final
name|SObjectNode
index|[]
name|childrenAry
init|=
name|toArray
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 2"
argument_list|,
literal|2
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There should be one child in this node"
argument_list|,
literal|1
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldBeAbleToFetchChildNodes ()
specifier|public
name|void
name|shouldBeAbleToFetchChildNodes
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|smith
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|evans
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|SObjectNode
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
index|[]
name|childrenAry
init|=
name|toArray
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be two child records in this node"
argument_list|,
literal|2
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second record should be evans contact"
argument_list|,
name|evans
argument_list|,
name|childrenAry
index|[
literal|1
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 3"
argument_list|,
literal|3
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldBeAbleToFetchChildren ()
specifier|public
name|void
name|shouldBeAbleToFetchChildren
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
name|smith
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
name|evans
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|AbstractSObjectBase
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildren
argument_list|()
decl_stmt|;
specifier|final
name|Object
index|[]
name|childrenAry
init|=
name|children
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be two child records in this node"
argument_list|,
literal|2
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second record should be evans contact"
argument_list|,
name|evans
argument_list|,
name|childrenAry
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 3"
argument_list|,
literal|3
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldCreateNode ()
specifier|public
name|void
name|shouldCreateNode
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|smith
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|evans
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Object in the node should be the given account"
argument_list|,
name|simpleAccount
argument_list|,
name|node
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type of the object in node should be auto-detected"
argument_list|,
literal|"Account"
argument_list|,
name|node
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|SObjectNode
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildNodesOfType
argument_list|(
literal|"Contacts"
argument_list|)
decl_stmt|;
specifier|final
name|SObjectNode
index|[]
name|childrenAry
init|=
name|toArray
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be two records in this node"
argument_list|,
literal|2
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type of first record should be Contact"
argument_list|,
literal|"Contact"
argument_list|,
name|childrenAry
index|[
literal|0
index|]
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second record should be evans contact"
argument_list|,
name|evans
argument_list|,
name|childrenAry
index|[
literal|1
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type of second record should be Contact"
argument_list|,
literal|"Contact"
argument_list|,
name|childrenAry
index|[
literal|1
index|]
operator|.
name|getObjectType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 3"
argument_list|,
literal|3
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldCreateNodeWithoutChildRecords ()
specifier|public
name|void
name|shouldCreateNodeWithoutChildRecords
parameter_list|()
block|{
operator|new
name|SObjectNode
argument_list|(
operator|new
name|SObjectTree
argument_list|()
argument_list|,
name|simpleAccount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldFetchChildrenNodesOfType ()
specifier|public
name|void
name|shouldFetchChildrenNodesOfType
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|smith
argument_list|)
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|evans
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|SObjectNode
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildNodesOfType
argument_list|(
literal|"Contacts"
argument_list|)
decl_stmt|;
specifier|final
name|SObjectNode
index|[]
name|childrenAry
init|=
name|toArray
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be two records in this node"
argument_list|,
literal|2
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second record should be evans contact"
argument_list|,
name|evans
argument_list|,
name|childrenAry
index|[
literal|1
index|]
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 3"
argument_list|,
literal|3
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldFetchChildrenOfType ()
specifier|public
name|void
name|shouldFetchChildrenOfType
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
name|smith
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChild
argument_list|(
literal|"Contacts"
argument_list|,
name|evans
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|AbstractSObjectBase
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildrenOfType
argument_list|(
literal|"Contacts"
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|childrenAry
init|=
name|children
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be two child records in this node"
argument_list|,
literal|2
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second record should be evans contact"
argument_list|,
name|evans
argument_list|,
name|childrenAry
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 3"
argument_list|,
literal|3
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldSupportAddingDescribedSObjects ()
specifier|public
name|void
name|shouldSupportAddingDescribedSObjects
parameter_list|()
block|{
specifier|final
name|SObjectTree
name|tree
init|=
operator|new
name|SObjectTree
argument_list|()
decl_stmt|;
specifier|final
name|SObjectNode
name|node
init|=
operator|new
name|SObjectNode
argument_list|(
name|tree
argument_list|,
name|simpleAccount
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|smith
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChildren
argument_list|(
name|evans
argument_list|)
expr_stmt|;
name|node
operator|.
name|addChildren
argument_list|(
name|bond
argument_list|,
name|moneypenny
argument_list|)
expr_stmt|;
specifier|final
name|Stream
argument_list|<
name|AbstractSObjectBase
argument_list|>
name|children
init|=
name|node
operator|.
name|getChildrenOfType
argument_list|(
literal|"Contacts"
argument_list|)
decl_stmt|;
specifier|final
name|Object
index|[]
name|childrenAry
init|=
name|children
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be four records in this node"
argument_list|,
literal|4
argument_list|,
name|childrenAry
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"First record should be smith contact"
argument_list|,
name|smith
argument_list|,
name|childrenAry
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Second record should be evans contact"
argument_list|,
name|evans
argument_list|,
name|childrenAry
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Third record should be bond contact"
argument_list|,
name|bond
argument_list|,
name|childrenAry
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Fourth record should be moneypeny contact"
argument_list|,
name|moneypenny
argument_list|,
name|childrenAry
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of the node should be 5"
argument_list|,
literal|5
argument_list|,
name|node
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|typeOfShouldBeBasedOnSimpleClassName ()
specifier|public
name|void
name|typeOfShouldBeBasedOnSimpleClassName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Type of Account should be 'Account'"
argument_list|,
literal|"Account"
argument_list|,
name|SObjectNode
operator|.
name|typeOf
argument_list|(
operator|new
name|Account
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type of Contact should be 'Contact'"
argument_list|,
literal|"Contact"
argument_list|,
name|SObjectNode
operator|.
name|typeOf
argument_list|(
operator|new
name|Contact
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

