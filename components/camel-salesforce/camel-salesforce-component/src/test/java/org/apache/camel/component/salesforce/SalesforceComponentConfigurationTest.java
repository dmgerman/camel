begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|Line_Item__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|Merchandise__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|QueryRecordsLine_Item__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|PayloadFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ParameterConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Lets test the use of the ComponentConfiguration on the Salesforce endpoint  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Must run manually with a user supplied test-salesforce-login.properties"
argument_list|)
DECL|class|SalesforceComponentConfigurationTest
specifier|public
class|class
name|SalesforceComponentConfigurationTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SalesforceComponentConfigurationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|componentName
specifier|protected
name|String
name|componentName
init|=
literal|"salesforce123"
decl_stmt|;
DECL|field|verbose
specifier|protected
name|boolean
name|verbose
init|=
literal|true
decl_stmt|;
annotation|@
name|Test
DECL|method|testConfiguration ()
specifier|public
name|void
name|testConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|parameterConfigurationMap
init|=
name|configuration
operator|.
name|getParameterConfigurationMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
argument_list|>
name|entries
init|=
name|parameterConfigurationMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ParameterConfiguration
name|config
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Has name: {} with type {}"
argument_list|,
name|name
argument_list|,
name|config
operator|.
name|getParameterType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"format"
argument_list|,
name|PayloadFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"sObjectName"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"sObjectFields"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"updateTopic"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"format"
argument_list|,
name|PayloadFormat
operator|.
name|XML
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"sObjectName"
argument_list|,
literal|"Merchandise__c"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"sObjectFields"
argument_list|,
literal|"Description__c,Total_Inventory__c"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"updateTopic"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// operation name is base uri
name|configuration
operator|.
name|setBaseUri
argument_list|(
literal|"getSObject"
argument_list|)
expr_stmt|;
name|SalesforceEndpoint
name|endpoint
init|=
name|assertIsInstanceOf
argument_list|(
name|SalesforceEndpoint
operator|.
name|class
argument_list|,
name|configuration
operator|.
name|createEndpoint
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SalesforceEndpointConfig
name|endpointConfig
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.format"
argument_list|,
name|PayloadFormat
operator|.
name|XML
argument_list|,
name|endpointConfig
operator|.
name|getFormat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.sObjectName"
argument_list|,
literal|"Merchandise__c"
argument_list|,
name|endpointConfig
operator|.
name|getSObjectName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.sObjectFields"
argument_list|,
literal|"Description__c,Total_Inventory__c"
argument_list|,
name|endpointConfig
operator|.
name|getSObjectFields
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.updateTopic"
argument_list|,
literal|false
argument_list|,
name|endpointConfig
operator|.
name|isUpdateTopic
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParameterConfig (ComponentConfiguration configuration, String name, Class<?> parameterType)
specifier|public
specifier|static
name|void
name|assertParameterConfig
parameter_list|(
name|ComponentConfiguration
name|configuration
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|)
block|{
name|ParameterConfiguration
name|config
init|=
name|configuration
operator|.
name|getParameterConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ParameterConfiguration should exist for parameter name "
operator|+
name|name
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ParameterConfiguration."
operator|+
name|name
operator|+
literal|".getName()"
argument_list|,
name|name
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ParameterConfiguration."
operator|+
name|name
operator|+
literal|".getParameterType()"
argument_list|,
name|parameterType
argument_list|,
name|config
operator|.
name|getParameterType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointCompletion ()
specifier|public
name|void
name|testEndpointCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
comment|// get operation names
name|assertCompletionOptions
argument_list|(
name|configuration
operator|.
name|completeEndpointPath
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|"getVersions"
argument_list|,
literal|"getResources"
argument_list|,
literal|"getGlobalObjects"
argument_list|,
literal|"getBasicInfo"
argument_list|,
literal|"getDescription"
argument_list|,
literal|"getSObject"
argument_list|,
literal|"createSObject"
argument_list|,
literal|"updateSObject"
argument_list|,
literal|"deleteSObject"
argument_list|,
literal|"getSObjectWithId"
argument_list|,
literal|"upsertSObject"
argument_list|,
literal|"deleteSObjectWithId"
argument_list|,
literal|"getBlobField"
argument_list|,
literal|"query"
argument_list|,
literal|"queryMore"
argument_list|,
literal|"search"
argument_list|,
literal|"createJob"
argument_list|,
literal|"getJob"
argument_list|,
literal|"closeJob"
argument_list|,
literal|"abortJob"
argument_list|,
literal|"createBatch"
argument_list|,
literal|"getBatch"
argument_list|,
literal|"getAllBatches"
argument_list|,
literal|"getRequest"
argument_list|,
literal|"getResults"
argument_list|,
literal|"createBatchQuery"
argument_list|,
literal|"getQueryResultIds"
argument_list|,
literal|"getQueryResult"
argument_list|,
literal|"[PushTopicName]"
argument_list|)
expr_stmt|;
comment|// get filtered operation names
name|assertCompletionOptions
argument_list|(
name|configuration
operator|.
name|completeEndpointPath
argument_list|(
literal|"get"
argument_list|)
argument_list|,
literal|"getVersions"
argument_list|,
literal|"getResources"
argument_list|,
literal|"getGlobalObjects"
argument_list|,
literal|"getBasicInfo"
argument_list|,
literal|"getDescription"
argument_list|,
literal|"getSObject"
argument_list|,
literal|"getSObjectWithId"
argument_list|,
literal|"getBlobField"
argument_list|,
literal|"getJob"
argument_list|,
literal|"getBatch"
argument_list|,
literal|"getAllBatches"
argument_list|,
literal|"getRequest"
argument_list|,
literal|"getResults"
argument_list|,
literal|"getQueryResultIds"
argument_list|,
literal|"getQueryResult"
argument_list|)
expr_stmt|;
comment|/* TODO support parameter completion         // get ALL REST operation parameters         // TODO support operation specific parameter completion         assertCompletionOptions(configuration.completeEndpointPath("getSObject?"),             "apiVersion", "httpClient", "format", "sObjectName", "sObjectId", "sObjectFields",             "sObjectIdName", "sObjectIdValue", "sObjectBlobFieldName", "sObjectClass", "sObjectQuery", "sObjectSearch");          // get filtered REST parameters         assertCompletionOptions(configuration.completeEndpointPath("getSObject?format=XML&"),             "apiVersion", "httpClient", "sObjectName", "sObjectId", "sObjectFields",             "sObjectIdName", "sObjectIdValue", "sObjectBlobFieldName", "sObjectClass", "sObjectQuery", "sObjectSearch");          // get ALL Bulk operation parameters         // TODO support operation specific parameter completion         assertCompletionOptions(configuration.completeEndpointPath("createJob?"),             "apiVersion", "httpClient", "sObjectQuery", "contentType", "jobId", "batchId", "resultId");          // get filtered Bulk operation parameters         assertCompletionOptions(configuration.completeEndpointPath("createJob?contentType=XML&"),             "apiVersion", "httpClient", "sObjectQuery", "jobId", "batchId", "resultId");          // get ALL topic parameters for consumers         assertCompletionOptions(configuration.completeEndpointPath("myTopic?"),             "apiVersion", "httpClient", "updateTopic", "notifyForFields", "notifyForOperations");          // get filtered topic parameters for consumers         assertCompletionOptions(configuration.completeEndpointPath("myTopic?updateTopic=true&"),             "apiVersion", "httpClient", "notifyForFields", "notifyForOperations");          // get parameters from partial name         assertCompletionOptions(configuration.completeEndpointPath("getSObject?sObject"),             "sObjectName", "sObjectId", "sObjectFields",             "sObjectIdName", "sObjectIdValue", "sObjectBlobFieldName", "sObjectClass", "sObjectQuery", "sObjectSearch"); */
comment|// get sObjectName values, from scanned DTO packages
name|assertCompletionOptions
argument_list|(
name|configuration
operator|.
name|completeEndpointPath
argument_list|(
literal|"getSObject?sObjectName="
argument_list|)
argument_list|,
literal|"Document"
argument_list|,
literal|"Line_Item__c"
argument_list|,
literal|"Merchandise__c"
argument_list|)
expr_stmt|;
comment|// get sObjectFields values, from scanned DTO
name|assertCompletionOptions
argument_list|(
name|configuration
operator|.
name|completeEndpointPath
argument_list|(
literal|"getSObject?sObjectName=Merchandise__c&sObjectFields="
argument_list|)
argument_list|,
literal|"attributes"
argument_list|,
literal|"Id"
argument_list|,
literal|"OwnerId"
argument_list|,
literal|"IsDeleted"
argument_list|,
literal|"Name"
argument_list|,
literal|"CreatedDate"
argument_list|,
literal|"CreatedById"
argument_list|,
literal|"LastModifiedDate"
argument_list|,
literal|"LastModifiedById"
argument_list|,
literal|"SystemModstamp"
argument_list|,
literal|"LastActivityDate"
argument_list|,
literal|"Description__c"
argument_list|,
literal|"Price__c"
argument_list|,
literal|"Total_Inventory__c"
argument_list|)
expr_stmt|;
comment|// get sObjectClass values, from scanned DTO packages
name|assertCompletionOptions
argument_list|(
name|configuration
operator|.
name|completeEndpointPath
argument_list|(
literal|"getSObject?sObjectClass="
argument_list|)
argument_list|,
name|Document
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Line_Item__c
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Merchandise__c
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|QueryRecordsLine_Item__c
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCompletionOptions (List<String> options, final String ...args)
specifier|private
name|void
name|assertCompletionOptions
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|options
parameter_list|,
specifier|final
name|String
modifier|...
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|remove
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|missing
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|options
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing options %s, unknown options %s"
argument_list|,
name|missing
argument_list|,
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|SalesforceLoginConfig
name|loginConfig
init|=
name|LoginConfigHelper
operator|.
name|getLoginConfig
argument_list|()
decl_stmt|;
specifier|final
name|SalesforceComponent
name|component
init|=
operator|new
name|SalesforceComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setLoginConfig
argument_list|(
name|loginConfig
argument_list|)
expr_stmt|;
comment|// set DTO package
name|component
operator|.
name|setPackages
argument_list|(
operator|new
name|String
index|[]
block|{
name|Merchandise__c
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
name|componentName
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{             }
block|}
return|;
block|}
block|}
end_class

end_unit

