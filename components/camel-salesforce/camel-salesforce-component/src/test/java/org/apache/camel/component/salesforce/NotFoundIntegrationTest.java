begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelParameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|NoSuchSObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelParameterized
operator|.
name|class
argument_list|)
DECL|class|NotFoundIntegrationTest
specifier|public
class|class
name|NotFoundIntegrationTest
extends|extends
name|AbstractSalesforceTestBase
block|{
annotation|@
name|Parameter
DECL|field|format
specifier|public
name|String
name|format
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldNotReportNotFoundExceptionFromRestApiIfConfiguredNotTo ()
specifier|public
name|void
name|shouldNotReportNotFoundExceptionFromRestApiIfConfiguredNotTo
parameter_list|()
block|{
specifier|final
name|Account
name|got
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"salesforce:getSObjectWithId?sObjectName=Account&sObjectIdName=Name&format="
operator|+
name|format
operator|+
literal|"&notFoundBehaviour=NULL"
argument_list|,
literal|"NonExistant"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Expecting null when `notFoundBehaviour` is set to NULL"
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldReportNotFoundExceptionFromRestApi ()
specifier|public
name|void
name|shouldReportNotFoundExceptionFromRestApi
parameter_list|()
block|{
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"salesforce:getSObjectWithId?sObjectName=Account&sObjectIdName=Name&format="
operator|+
name|format
argument_list|,
literal|"NonExistant"
argument_list|,
name|Account
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting CamelExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expecting the cause of CamelExecutionException to be NoSuchSObjectException"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchSObjectException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|formats ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|formats
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"XML"
argument_list|,
literal|"JSON"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

