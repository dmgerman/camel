begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|XStreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|SObjectBatchResponseTest
specifier|public
class|class
name|SObjectBatchResponseTest
block|{
annotation|@
name|Test
DECL|method|shouldDeserializeFromJson ()
specifier|public
name|void
name|shouldDeserializeFromJson
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|json
init|=
literal|"{\n"
comment|//
operator|+
literal|"   \"hasErrors\" : false,\n"
comment|//
operator|+
literal|"   \"results\" : [{\n"
comment|//
operator|+
literal|"      \"statusCode\" : 204,\n"
comment|//
operator|+
literal|"      \"result\" : null\n"
comment|//
operator|+
literal|"      },{\n"
comment|//
operator|+
literal|"      \"statusCode\" : 200,\n"
comment|//
operator|+
literal|"      \"result\": {\n"
comment|//
operator|+
literal|"         \"attributes\" : {\n"
comment|//
operator|+
literal|"            \"type\" : \"Account\",\n"
comment|//
operator|+
literal|"            \"url\" : \"/services/data/v34.0/sobjects/Account/001D000000K0fXOIAZ\"\n"
comment|//
operator|+
literal|"         },\n"
comment|//
operator|+
literal|"         \"Name\" : \"NewName\",\n"
comment|//
operator|+
literal|"         \"BillingPostalCode\" : \"94105\",\n"
comment|//
operator|+
literal|"         \"Id\" : \"001D000000K0fXOIAZ\"\n"
comment|//
operator|+
literal|"      }\n"
comment|//
operator|+
literal|"   }]\n"
comment|//
operator|+
literal|"}"
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
name|JsonUtils
operator|.
name|createObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|SObjectBatchResponse
name|response
init|=
name|mapper
operator|.
name|readerFor
argument_list|(
name|SObjectBatchResponse
operator|.
name|class
argument_list|)
operator|.
name|readValue
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDeserializeFromXml ()
specifier|public
name|void
name|shouldDeserializeFromXml
parameter_list|()
block|{
specifier|final
name|String
name|xml
init|=
literal|"<batchResults>\n"
comment|//
operator|+
literal|"<hasErrors>false</hasErrors>\n"
comment|//
operator|+
literal|"<results>\n"
comment|//
operator|+
literal|"<batchResult>\n"
comment|//
operator|+
literal|"<statusCode>204</statusCode>\n"
comment|//
operator|+
literal|"<result/>\n"
comment|//
operator|+
literal|"</batchResult>\n"
comment|//
operator|+
literal|"<batchResult>\n"
comment|//
operator|+
literal|"<statusCode>200</statusCode>\n"
comment|//
operator|+
literal|"<result>\n"
comment|//
operator|+
literal|"<Account type=\"Account\" url=\"/services/data/v34.0/sobjects/Account/001D000000K0fXOIAZ\">\n"
comment|//
operator|+
literal|"<Id>001D000000K0fXOIAZ</Id>\n"
comment|//
operator|+
literal|"<Name>NewName</Name>\n"
comment|//
operator|+
literal|"<BillingPostalCode>94105</BillingPostalCode>"
comment|//
operator|+
literal|"</Account>\n"
comment|//
operator|+
literal|"</result>\n"
comment|//
operator|+
literal|"</batchResult>\n"
comment|//
operator|+
literal|"</results>\n"
comment|//
operator|+
literal|"</batchResults>"
decl_stmt|;
specifier|final
name|XStream
name|xStream
init|=
name|XStreamUtils
operator|.
name|createXStream
argument_list|(
name|SObjectBatchResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|SObjectBatchResponse
name|response
init|=
operator|(
name|SObjectBatchResponse
operator|)
name|xStream
operator|.
name|fromXML
argument_list|(
name|xml
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response should be parsed"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"It should not have errors"
argument_list|,
name|response
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SObjectBatchResult
argument_list|>
name|results
init|=
name|response
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"It should contain 2 results"
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SObjectBatchResult
name|firstResult
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"First result should have status code of 204"
argument_list|,
literal|204
argument_list|,
name|firstResult
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"First result contain no data"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|firstResult
operator|.
name|getResult
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SObjectBatchResult
name|secondResult
init|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Second result should have status code of 200"
argument_list|,
literal|200
argument_list|,
name|secondResult
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|secondResultMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|secondResult
operator|.
name|getResult
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|account
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|secondResultMap
operator|.
name|get
argument_list|(
literal|"Account"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|account
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have attribute type set to `Account`"
argument_list|,
literal|"Account"
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have attribute url set as expected"
argument_list|,
literal|"/services/data/v34.0/sobjects/Account/001D000000K0fXOIAZ"
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have `NewName` set as expected"
argument_list|,
literal|"NewName"
argument_list|,
name|account
operator|.
name|get
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have `BillingPostalCode` set as expected"
argument_list|,
literal|"94105"
argument_list|,
name|account
operator|.
name|get
argument_list|(
literal|"BillingPostalCode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have `Id` set as expected"
argument_list|,
literal|"001D000000K0fXOIAZ"
argument_list|,
name|account
operator|.
name|get
argument_list|(
literal|"Id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertResponse (final SObjectBatchResponse response)
specifier|static
name|void
name|assertResponse
parameter_list|(
specifier|final
name|SObjectBatchResponse
name|response
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Response should be parsed"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"It should not have errors"
argument_list|,
name|response
operator|.
name|hasErrors
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SObjectBatchResult
argument_list|>
name|results
init|=
name|response
operator|.
name|getResults
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"It should contain 2 results"
argument_list|,
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SObjectBatchResult
name|firstResult
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"First result should have status code of 204"
argument_list|,
literal|204
argument_list|,
name|firstResult
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"First result contain no data"
argument_list|,
name|firstResult
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SObjectBatchResult
name|secondResult
init|=
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Second result should have status code of 200"
argument_list|,
literal|200
argument_list|,
name|secondResult
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|secondResultMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|secondResult
operator|.
name|getResult
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|secondResultMap
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have attribute type set to `Account`"
argument_list|,
literal|"Account"
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have attribute url set as expected"
argument_list|,
literal|"/services/data/v34.0/sobjects/Account/001D000000K0fXOIAZ"
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
literal|"url"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have `NewName` set as expected"
argument_list|,
literal|"NewName"
argument_list|,
name|secondResultMap
operator|.
name|get
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have `BillingPostalCode` set as expected"
argument_list|,
literal|"94105"
argument_list|,
name|secondResultMap
operator|.
name|get
argument_list|(
literal|"BillingPostalCode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Second result data should have `Id` set as expected"
argument_list|,
literal|"001D000000K0fXOIAZ"
argument_list|,
name|secondResultMap
operator|.
name|get
argument_list|(
literal|"Id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

