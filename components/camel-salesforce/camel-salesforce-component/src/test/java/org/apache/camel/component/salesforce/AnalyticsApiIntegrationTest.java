begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceReportResultsToListConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|AsyncReportResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|QueryRecordsReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|Report
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|ReportStatusEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|analytics
operator|.
name|reports
operator|.
name|SyncReportResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|csv
operator|.
name|CsvDataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|csv
operator|.
name|CSVFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|DataPoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|Theories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|Theory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Integration test for Salesforce analytics API endpoints.   */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Theories
operator|.
name|class
argument_list|)
DECL|class|AnalyticsApiIntegrationTest
specifier|public
class|class
name|AnalyticsApiIntegrationTest
extends|extends
name|AbstractSalesforceTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AnalyticsApiIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RETRY_DELAY
specifier|private
specifier|static
specifier|final
name|int
name|RETRY_DELAY
init|=
literal|5000
decl_stmt|;
DECL|field|REPORT_RESULT_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|REPORT_RESULT_RETRIES
init|=
literal|5
decl_stmt|;
DECL|field|REPORT_OPTIONS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REPORT_OPTIONS
init|=
operator|new
name|String
index|[]
block|{
name|SalesforceReportResultsToListConverter
operator|.
name|INCLUDE_HEADERS
block|,
name|SalesforceReportResultsToListConverter
operator|.
name|INCLUDE_DETAILS
block|,
name|SalesforceReportResultsToListConverter
operator|.
name|INCLUDE_SUMMARY
block|}
decl_stmt|;
DECL|field|NUM_OPTIONS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OPTIONS
init|=
name|REPORT_OPTIONS
operator|.
name|length
decl_stmt|;
DECL|field|POWERS
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|POWERS
init|=
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|2
block|,
literal|1
block|}
decl_stmt|;
DECL|field|testReportNames
specifier|private
specifier|static
name|String
index|[]
name|testReportNames
decl_stmt|;
DECL|field|bodyMetadata
specifier|private
name|boolean
name|bodyMetadata
decl_stmt|;
comment|/**      * Get test report developer names as data points.      * @return test report developer names in test-salesforce-login.properties      * @throws Exception      */
annotation|@
name|DataPoints
DECL|method|getTestReportDeveloperNames ()
specifier|public
specifier|static
name|String
index|[]
name|getTestReportDeveloperNames
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|testReportNames
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|getReportNames ()
specifier|public
specifier|static
name|void
name|getReportNames
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get test report names
name|Properties
name|testProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|testProperties
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|LoginConfigHelper
operator|.
name|TEST_LOGIN_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|reports
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|testProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|matches
argument_list|(
literal|"report.[0-9]+"
argument_list|)
condition|)
block|{
name|reports
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"Missing entries report.[0-9]+=<Report DeveloperName> in "
operator|+
name|LoginConfigHelper
operator|.
name|TEST_LOGIN_PROPERTIES
argument_list|,
name|reports
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|reportNames
init|=
name|reports
operator|.
name|values
argument_list|()
decl_stmt|;
name|testReportNames
operator|=
name|reportNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|reportNames
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRecentReports ()
specifier|public
name|void
name|testGetRecentReports
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
name|recentReports
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getRecentReports"
argument_list|,
literal|null
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getRecentReports"
argument_list|,
name|recentReports
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getRecentReports empty"
argument_list|,
name|recentReports
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getRecentReports: {}"
argument_list|,
name|recentReports
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Theory
DECL|method|testReport (String reportName)
specifier|public
name|void
name|testReport
parameter_list|(
name|String
name|reportName
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Testing report {}..."
argument_list|,
name|reportName
argument_list|)
expr_stmt|;
comment|// get Report Id
specifier|final
name|QueryRecordsReport
name|reports
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:queryReport"
argument_list|,
literal|"SELECT Id FROM Report WHERE DeveloperName='"
operator|+
name|reportName
operator|+
literal|"'"
argument_list|,
name|QueryRecordsReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"query"
argument_list|,
name|reports
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Report
argument_list|>
name|reportsRecords
init|=
name|reports
operator|.
name|getRecords
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Report not found"
argument_list|,
name|reportsRecords
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|testReportId
init|=
name|reportsRecords
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|testReportId
argument_list|)
expr_stmt|;
comment|// 1. getReportDescription
specifier|final
name|ReportDescription
name|reportDescription
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getReportDescription"
argument_list|,
name|testReportId
argument_list|,
name|ReportDescription
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getReportDescriptions"
argument_list|,
name|reportDescription
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getReportDescriptions: {}"
argument_list|,
name|reportDescription
argument_list|)
expr_stmt|;
specifier|final
name|ReportMetadata
name|testReportMetadata
init|=
name|reportDescription
operator|.
name|getReportMetadata
argument_list|()
decl_stmt|;
comment|// 2. executeSyncReport
comment|// execute with no metadata
name|SyncReportResults
name|reportResults
init|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:executeSyncReport"
argument_list|,
name|testReportId
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|INCLUDE_DETAILS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|SyncReportResults
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"executeSyncReport"
argument_list|,
name|reportResults
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"executeSyncReport: {}"
argument_list|,
name|reportResults
argument_list|)
expr_stmt|;
comment|// execute with metadata
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|INCLUDE_DETAILS
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|Object
name|body
decl_stmt|;
if|if
condition|(
operator|!
name|bodyMetadata
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|REPORT_METADATA
argument_list|,
name|testReportMetadata
argument_list|)
expr_stmt|;
name|body
operator|=
name|testReportId
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
name|testReportMetadata
expr_stmt|;
block|}
name|reportResults
operator|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:executeSyncReport"
argument_list|,
name|body
argument_list|,
name|headers
argument_list|,
name|SyncReportResults
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"executeSyncReport with metadata"
argument_list|,
name|reportResults
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"executeSyncReport with metadata: {}"
argument_list|,
name|reportResults
argument_list|)
expr_stmt|;
comment|// 3. executeAsyncReport
comment|// execute with no metadata
name|ReportInstance
name|reportInstance
init|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:executeAsyncReport"
argument_list|,
name|testReportId
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|INCLUDE_DETAILS
argument_list|,
literal|true
argument_list|,
name|ReportInstance
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"executeAsyncReport"
argument_list|,
name|reportInstance
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"executeAsyncReport: {}"
argument_list|,
name|reportInstance
argument_list|)
expr_stmt|;
comment|// execute with metadata
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|INCLUDE_DETAILS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bodyMetadata
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|REPORT_METADATA
argument_list|,
name|testReportMetadata
argument_list|)
expr_stmt|;
name|body
operator|=
name|testReportId
expr_stmt|;
name|bodyMetadata
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
name|testReportMetadata
expr_stmt|;
name|bodyMetadata
operator|=
literal|false
expr_stmt|;
block|}
name|reportInstance
operator|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:executeAsyncReport"
argument_list|,
name|body
argument_list|,
name|headers
argument_list|,
name|ReportInstance
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"executeAsyncReport with metadata"
argument_list|,
name|reportInstance
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"executeAsyncReport with metadata: {}"
argument_list|,
name|reportInstance
argument_list|)
expr_stmt|;
specifier|final
name|String
name|testReportInstanceId
init|=
name|reportInstance
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// 4. getReportInstances
specifier|final
name|List
name|reportInstances
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getReportInstances"
argument_list|,
name|testReportId
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"getReportInstances"
argument_list|,
name|reportInstances
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"getReportInstances empty"
argument_list|,
name|reportInstances
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getReportInstances: {}"
argument_list|,
name|reportInstances
argument_list|)
expr_stmt|;
comment|// 5. getReportResults
comment|// wait for the report to complete
name|boolean
name|done
init|=
literal|false
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|AsyncReportResults
name|asyncReportResults
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|asyncReportResults
operator|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:getReportResults"
argument_list|,
name|testReportId
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|INSTANCE_ID
argument_list|,
name|testReportInstanceId
argument_list|,
name|AsyncReportResults
operator|.
name|class
argument_list|)
expr_stmt|;
name|done
operator|=
name|asyncReportResults
operator|!=
literal|null
operator|&&
operator|(
name|asyncReportResults
operator|.
name|getAttributes
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|ReportStatusEnum
operator|.
name|Success
operator|||
name|asyncReportResults
operator|.
name|getAttributes
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|ReportStatusEnum
operator|.
name|Error
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
block|{
comment|// avoid flooding calls
name|Thread
operator|.
name|sleep
argument_list|(
name|RETRY_DELAY
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|tries
operator|>
name|REPORT_RESULT_RETRIES
condition|)
block|{
specifier|final
name|long
name|retrySeconds
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
name|tries
operator|*
name|RETRY_DELAY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Async report result not available in "
operator|+
name|retrySeconds
operator|+
literal|" seconds"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertNotNull
argument_list|(
literal|"getReportResults"
argument_list|,
name|asyncReportResults
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getReportResults status"
argument_list|,
name|ReportStatusEnum
operator|.
name|Success
argument_list|,
name|asyncReportResults
operator|.
name|getAttributes
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"getReportResults: {}"
argument_list|,
name|asyncReportResults
argument_list|)
expr_stmt|;
comment|// 6. SalesforceReportResultsConverter tests
comment|// defaults
name|String
name|convertResults
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:convertResults"
argument_list|,
name|asyncReportResults
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"default convertResults"
argument_list|,
name|convertResults
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Default options"
argument_list|,
name|convertResults
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|convertResults
argument_list|)
expr_stmt|;
comment|// permutations of include details, include headers, include summary
specifier|final
name|boolean
index|[]
name|values
init|=
operator|new
name|boolean
index|[
name|NUM_OPTIONS
index|]
decl_stmt|;
specifier|final
name|int
name|nIterations
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|pow
argument_list|(
literal|2
argument_list|,
name|NUM_OPTIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nIterations
condition|;
name|i
operator|++
control|)
block|{
comment|// toggle options
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_OPTIONS
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
name|POWERS
index|[
name|j
index|]
operator|==
literal|0
condition|)
block|{
name|values
index|[
name|j
index|]
operator|=
operator|!
name|values
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Options {} = {}"
argument_list|,
name|REPORT_OPTIONS
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|REPORT_OPTIONS
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|REPORT_OPTIONS
index|[
name|j
index|]
argument_list|,
name|values
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|convertResults
operator|=
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:convertResults"
argument_list|,
name|asyncReportResults
argument_list|,
name|headers
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"convertResults"
argument_list|,
name|convertResults
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|convertResults
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doCreateRouteBuilder ()
specifier|protected
name|RouteBuilder
name|doCreateRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get Report SObject by DeveloperName
name|from
argument_list|(
literal|"direct:queryReport"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:query?sObjectClass="
operator|+
name|QueryRecordsReport
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getRecentReports"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getRecentReports"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getReportDescription"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getReportDescription"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:executeSyncReport"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:executeSyncReport"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:executeAsyncReport"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:executeAsyncReport?includeDetails=true"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getReportInstances"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getReportInstances"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getReportResults"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getReportResults"
argument_list|)
expr_stmt|;
name|CsvDataFormat
name|csv
init|=
operator|new
name|CsvDataFormat
argument_list|(
name|CSVFormat
operator|.
name|EXCEL
argument_list|)
decl_stmt|;
comment|// type converter test
name|from
argument_list|(
literal|"direct:convertResults"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|.
name|marshal
argument_list|(
name|csv
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

