begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|PlatformEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|entry
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|Standalone
operator|.
name|class
argument_list|)
DECL|class|PlatformEventsConsumerIntegrationTest
specifier|public
class|class
name|PlatformEventsConsumerIntegrationTest
extends|extends
name|AbstractSalesforceTestBase
block|{
annotation|@
name|Test
DECL|method|shouldConsumePlatformEvents ()
specifier|public
name|void
name|shouldConsumePlatformEvents
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|ExecutorService
name|parallel
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|PlatformEvent
argument_list|>
name|futurePlatformEvent
init|=
name|parallel
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"salesforce:event/TestEvent__e?replayId=-1"
argument_list|,
name|PlatformEvent
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// it takes some time for the subscriber to subscribe, so we'll try to
comment|// send repeated platform events and wait until the first one is
comment|// received
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|untilAsserted
argument_list|(
parameter_list|()
lambda|->
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:sendPlatformEvent"
argument_list|,
literal|"{\"Test_Field__c\": \"data\"}"
argument_list|)
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|futurePlatformEvent
operator|.
name|isDone
argument_list|()
argument_list|)
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
specifier|final
name|PlatformEvent
name|platformEvent
init|=
name|futurePlatformEvent
operator|.
name|get
argument_list|()
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|platformEvent
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|platformEvent
operator|.
name|getEventData
argument_list|()
argument_list|)
operator|.
name|containsOnly
argument_list|(
name|entry
argument_list|(
literal|"Test_Field__c"
argument_list|,
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCreateRouteBuilder ()
specifier|protected
name|RouteBuilder
name|doCreateRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:sendPlatformEvent"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:createSObject?sObjectName=TestEvent__e"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|salesforceApiVersionToUse ()
specifier|protected
name|String
name|salesforceApiVersionToUse
parameter_list|()
block|{
return|return
literal|"41.0"
return|;
block|}
block|}
end_class

end_unit

