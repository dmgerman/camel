begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|CreateSObjectResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|GlobalObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|RestResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectBasicInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SearchResults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Line_Item__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|Merchandise__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|dto
operator|.
name|generated
operator|.
name|QueryRecordsLine_Item__c
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|RestApiIntegrationTest
specifier|public
class|class
name|RestApiIntegrationTest
extends|extends
name|AbstractSalesforceTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RestApiIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_LINE_ITEM_ID
specifier|private
specifier|static
specifier|final
name|String
name|TEST_LINE_ITEM_ID
init|=
literal|"1"
decl_stmt|;
DECL|field|NEW_LINE_ITEM_ID
specifier|private
specifier|static
specifier|final
name|String
name|NEW_LINE_ITEM_ID
init|=
literal|"100"
decl_stmt|;
DECL|field|TEST_DOCUMENT_ID
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOCUMENT_ID
init|=
literal|"Test Document"
decl_stmt|;
DECL|field|testId
specifier|private
specifier|static
name|String
name|testId
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetVersions ()
specifier|public
name|void
name|testGetVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetVersions
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestGetVersions
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doTestGetVersions (String suffix)
specifier|private
name|void
name|doTestGetVersions
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|Exception
block|{
comment|// test getVersions doesn't need a body
comment|// assert expected result
name|Object
name|o
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getVersions"
operator|+
name|suffix
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Version
argument_list|>
name|versions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Versions
condition|)
block|{
name|versions
operator|=
operator|(
operator|(
name|Versions
operator|)
name|o
operator|)
operator|.
name|getVersions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|versions
operator|=
operator|(
name|List
argument_list|<
name|Version
argument_list|>
operator|)
name|o
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Versions: {}"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetResources ()
specifier|public
name|void
name|testGetResources
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetResources
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestGetResources
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetResources (String suffix)
specifier|private
name|void
name|doTestGetResources
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|Exception
block|{
name|RestResources
name|resources
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getResources"
operator|+
name|suffix
argument_list|,
literal|null
argument_list|,
name|RestResources
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resources
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resources: {}"
argument_list|,
name|resources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetGlobalObjects ()
specifier|public
name|void
name|testGetGlobalObjects
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetGlobalObjects
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestGetGlobalObjects
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetGlobalObjects (String suffix)
specifier|private
name|void
name|doTestGetGlobalObjects
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|Exception
block|{
name|GlobalObjects
name|globalObjects
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getGlobalObjects"
operator|+
name|suffix
argument_list|,
literal|null
argument_list|,
name|GlobalObjects
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|globalObjects
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"GlobalObjects: {}"
argument_list|,
name|globalObjects
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetBasicInfo ()
specifier|public
name|void
name|testGetBasicInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetBasicInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestGetBasicInfo
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetBasicInfo (String suffix)
specifier|private
name|void
name|doTestGetBasicInfo
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|Exception
block|{
name|SObjectBasicInfo
name|objectBasicInfo
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getBasicInfo"
operator|+
name|suffix
argument_list|,
literal|null
argument_list|,
name|SObjectBasicInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|objectBasicInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SObjectBasicInfo: {}"
argument_list|,
name|objectBasicInfo
argument_list|)
expr_stmt|;
comment|// set test Id for testGetSObject
name|assertFalse
argument_list|(
literal|"RecentItems is empty"
argument_list|,
name|objectBasicInfo
operator|.
name|getRecentItems
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|testId
operator|=
name|objectBasicInfo
operator|.
name|getRecentItems
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDescription ()
specifier|public
name|void
name|testGetDescription
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetDescription
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestGetDescription
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetDescription (String suffix)
specifier|private
name|void
name|doTestGetDescription
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|Exception
block|{
name|SObjectDescription
name|sObjectDescription
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getDescription"
operator|+
name|suffix
argument_list|,
literal|null
argument_list|,
name|SObjectDescription
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sObjectDescription
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SObjectDescription: {}"
argument_list|,
name|sObjectDescription
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSObject ()
specifier|public
name|void
name|testGetSObject
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetSObject
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestGetSObject
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetSObject (String suffix)
specifier|private
name|void
name|doTestGetSObject
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|testId
operator|==
literal|null
condition|)
block|{
comment|// execute getBasicInfo to get test id from recent items
name|doTestGetBasicInfo
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|Merchandise__c
name|merchandise
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getSObject"
operator|+
name|suffix
argument_list|,
name|testId
argument_list|,
name|Merchandise__c
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|merchandise
argument_list|)
expr_stmt|;
if|if
condition|(
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertNull
argument_list|(
name|merchandise
operator|.
name|getTotal_Inventory__c
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|merchandise
operator|.
name|getPrice__c
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNotNull
argument_list|(
name|merchandise
operator|.
name|getTotal_Inventory__c
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|merchandise
operator|.
name|getPrice__c
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"SObjectById: {}"
argument_list|,
name|merchandise
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateUpdateDelete ()
specifier|public
name|void
name|testCreateUpdateDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestCreateUpdateDelete
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestCreateUpdateDelete
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestCreateUpdateDelete (String suffix)
specifier|private
name|void
name|doTestCreateUpdateDelete
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Merchandise__c
name|merchandise
init|=
operator|new
name|Merchandise__c
argument_list|()
decl_stmt|;
name|merchandise
operator|.
name|setName
argument_list|(
literal|"Wee Wee Wee Plane"
argument_list|)
expr_stmt|;
name|merchandise
operator|.
name|setDescription__c
argument_list|(
literal|"Microlite plane"
argument_list|)
expr_stmt|;
name|merchandise
operator|.
name|setPrice__c
argument_list|(
literal|2000.0
argument_list|)
expr_stmt|;
name|merchandise
operator|.
name|setTotal_Inventory__c
argument_list|(
literal|50.0
argument_list|)
expr_stmt|;
name|CreateSObjectResult
name|result
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:CreateSObject"
operator|+
name|suffix
argument_list|,
name|merchandise
argument_list|,
name|CreateSObjectResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Create success"
argument_list|,
name|result
operator|.
name|getSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create: "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|// test JSON update
comment|// make the plane cheaper
name|merchandise
operator|.
name|setPrice__c
argument_list|(
literal|1500.0
argument_list|)
expr_stmt|;
comment|// change inventory to half
name|merchandise
operator|.
name|setTotal_Inventory__c
argument_list|(
literal|25.0
argument_list|)
expr_stmt|;
comment|// also need to set the Id
name|merchandise
operator|.
name|setId
argument_list|(
name|result
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:UpdateSObject"
operator|+
name|suffix
argument_list|,
name|merchandise
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|SOBJECT_ID
argument_list|,
name|result
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Update successful"
argument_list|)
expr_stmt|;
comment|// delete the newly created SObject
name|assertNull
argument_list|(
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:deleteSObject"
operator|+
name|suffix
argument_list|,
name|result
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete successful"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateUpdateDeleteWithId ()
specifier|public
name|void
name|testCreateUpdateDeleteWithId
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestCreateUpdateDeleteWithId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestCreateUpdateDeleteWithId
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestCreateUpdateDeleteWithId (String suffix)
specifier|private
name|void
name|doTestCreateUpdateDeleteWithId
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// get line item with Name 1
name|Line_Item__c
name|lineItem
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getSObjectWithId"
operator|+
name|suffix
argument_list|,
name|TEST_LINE_ITEM_ID
argument_list|,
name|Line_Item__c
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lineItem
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"GetWithId: {}"
argument_list|,
name|lineItem
argument_list|)
expr_stmt|;
comment|// test insert with id
comment|// set the unit price and sold
name|lineItem
operator|.
name|setUnit_Price__c
argument_list|(
literal|1000.0
argument_list|)
expr_stmt|;
name|lineItem
operator|.
name|setUnits_Sold__c
argument_list|(
literal|50.0
argument_list|)
expr_stmt|;
comment|// update line item with Name NEW_LINE_ITEM_ID
name|lineItem
operator|.
name|setName
argument_list|(
name|NEW_LINE_ITEM_ID
argument_list|)
expr_stmt|;
name|CreateSObjectResult
name|result
init|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:upsertSObject"
operator|+
name|suffix
argument_list|,
name|lineItem
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|SOBJECT_EXT_ID_VALUE
argument_list|,
name|NEW_LINE_ITEM_ID
argument_list|,
name|CreateSObjectResult
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CreateWithId: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// clear read only parent type fields
name|lineItem
operator|.
name|setInvoice_Statement__c
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|lineItem
operator|.
name|setMerchandise__c
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// change the units sold
name|lineItem
operator|.
name|setUnits_Sold__c
argument_list|(
literal|25.0
argument_list|)
expr_stmt|;
comment|// update line item with Name NEW_LINE_ITEM_ID
name|result
operator|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:upsertSObject"
operator|+
name|suffix
argument_list|,
name|lineItem
argument_list|,
name|SalesforceEndpointConfig
operator|.
name|SOBJECT_EXT_ID_VALUE
argument_list|,
name|NEW_LINE_ITEM_ID
argument_list|,
name|CreateSObjectResult
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"UpdateWithId: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// delete the SObject with Name NEW_LINE_ITEM_ID
name|assertNull
argument_list|(
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:deleteSObjectWithId"
operator|+
name|suffix
argument_list|,
name|NEW_LINE_ITEM_ID
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DeleteWithId successful"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetBlobField ()
specifier|public
name|void
name|testGetBlobField
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestGetBlobField
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestGetBlobField
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestGetBlobField (String suffix)
specifier|public
name|void
name|doTestGetBlobField
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|Exception
block|{
comment|// get document with Name "Test Document"
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|SOBJECT_NAME
argument_list|,
literal|"Document"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|SalesforceEndpointConfig
operator|.
name|SOBJECT_EXT_ID_NAME
argument_list|,
literal|"Name"
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|template
argument_list|()
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:getSObjectWithId"
operator|+
name|suffix
argument_list|,
name|TEST_DOCUMENT_ID
argument_list|,
name|headers
argument_list|,
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"GetWithId: {}"
argument_list|,
name|document
argument_list|)
expr_stmt|;
comment|// get Body field for this document
name|InputStream
name|body
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:getBlobField"
operator|+
name|suffix
argument_list|,
name|document
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"GetBlobField: {}"
argument_list|,
name|body
argument_list|)
expr_stmt|;
comment|// write body to test file
specifier|final
name|FileChannel
name|fileChannel
init|=
operator|new
name|FileOutputStream
argument_list|(
literal|"target/getBlobField"
operator|+
name|suffix
operator|+
literal|".txt"
argument_list|)
operator|.
name|getChannel
argument_list|()
decl_stmt|;
specifier|final
name|ReadableByteChannel
name|src
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|body
argument_list|)
decl_stmt|;
name|fileChannel
operator|.
name|transferFrom
argument_list|(
name|src
argument_list|,
literal|0
argument_list|,
name|document
operator|.
name|getBodyLength
argument_list|()
argument_list|)
expr_stmt|;
name|fileChannel
operator|.
name|close
argument_list|()
expr_stmt|;
name|src
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQuery ()
specifier|public
name|void
name|testQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestQuery
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestQuery
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestQuery (String suffix)
specifier|private
name|void
name|doTestQuery
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|QueryRecordsLine_Item__c
name|queryRecords
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:query"
operator|+
name|suffix
argument_list|,
literal|null
argument_list|,
name|QueryRecordsLine_Item__c
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queryRecords
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ExecuteQuery: {}"
argument_list|,
name|queryRecords
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSearch ()
specifier|public
name|void
name|testSearch
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSearch
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|doTestSearch
argument_list|(
literal|"Xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doTestSearch (String suffix)
specifier|private
name|void
name|doTestSearch
parameter_list|(
name|String
name|suffix
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Object
name|obj
init|=
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:search"
operator|+
name|suffix
argument_list|,
operator|(
name|Object
operator|)
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SearchResult
argument_list|>
name|searchResults
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|SearchResults
condition|)
block|{
name|SearchResults
name|results
init|=
operator|(
name|SearchResults
operator|)
name|obj
decl_stmt|;
name|searchResults
operator|=
name|results
operator|.
name|getResults
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|searchResults
operator|=
operator|(
name|List
argument_list|<
name|SearchResult
argument_list|>
operator|)
name|obj
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|searchResults
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"ExecuteSearch: {}"
argument_list|,
name|searchResults
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCreateRouteBuilder ()
specifier|protected
name|RouteBuilder
name|doCreateRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create test route
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// testGetVersion
name|from
argument_list|(
literal|"direct:getVersions"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getVersions"
argument_list|)
expr_stmt|;
comment|// allow overriding format per endpoint
name|from
argument_list|(
literal|"direct:getVersionsXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getVersions?format=XML"
argument_list|)
expr_stmt|;
comment|// testGetResources
name|from
argument_list|(
literal|"direct:getResources"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getResources"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getResourcesXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getResources?format=XML"
argument_list|)
expr_stmt|;
comment|// testGetGlobalObjects
name|from
argument_list|(
literal|"direct:getGlobalObjects"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getGlobalObjects"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getGlobalObjectsXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getGlobalObjects?format=XML"
argument_list|)
expr_stmt|;
comment|// testGetBasicInfo
name|from
argument_list|(
literal|"direct:getBasicInfo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getBasicInfo?sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getBasicInfoXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getBasicInfo?format=XML&sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
comment|// testGetDescription
name|from
argument_list|(
literal|"direct:getDescription"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getDescription?sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getDescriptionXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getDescription?format=XML&sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
comment|// testGetSObject
name|from
argument_list|(
literal|"direct:getSObject"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getSObject?sObjectName=Merchandise__c&sObjectFields=Description__c,Price__c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getSObjectXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getSObject?format=XML&sObjectName=Merchandise__c&sObjectFields=Description__c,Total_Inventory__c"
argument_list|)
expr_stmt|;
comment|// testCreateSObject
name|from
argument_list|(
literal|"direct:CreateSObject"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:createSObject?sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:CreateSObjectXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:createSObject?format=XML&sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
comment|// testUpdateSObject
name|from
argument_list|(
literal|"direct:UpdateSObject"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:updateSObject?sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:UpdateSObjectXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:updateSObject?format=XML&sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
comment|// testDeleteSObject
name|from
argument_list|(
literal|"direct:deleteSObject"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:deleteSObject?sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:deleteSObjectXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:deleteSObject?format=XML&sObjectName=Merchandise__c"
argument_list|)
expr_stmt|;
comment|// testGetSObjectWithId
name|from
argument_list|(
literal|"direct:getSObjectWithId"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getSObjectWithId?sObjectName=Line_Item__c&sObjectIdName=Name"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getSObjectWithIdXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getSObjectWithId?format=XML&sObjectName=Line_Item__c&sObjectIdName=Name"
argument_list|)
expr_stmt|;
comment|// testUpsertSObject
name|from
argument_list|(
literal|"direct:upsertSObject"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:upsertSObject?sObjectName=Line_Item__c&sObjectIdName=Name"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:upsertSObjectXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:upsertSObject?format=XML&sObjectName=Line_Item__c&sObjectIdName=Name"
argument_list|)
expr_stmt|;
comment|// testDeleteSObjectWithId
name|from
argument_list|(
literal|"direct:deleteSObjectWithId"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:deleteSObjectWithId?sObjectName=Line_Item__c&sObjectIdName=Name"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:deleteSObjectWithIdXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:deleteSObjectWithId?format=XML&sObjectName=Line_Item__c&sObjectIdName=Name"
argument_list|)
expr_stmt|;
comment|// testGetBlobField
name|from
argument_list|(
literal|"direct:getBlobField"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getBlobField?sObjectName=Document&sObjectBlobFieldName=Body"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getBlobFieldXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:getBlobField?format=XML&sObjectName=Document&sObjectBlobFieldName=Body"
argument_list|)
expr_stmt|;
comment|// testQuery
name|from
argument_list|(
literal|"direct:query"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:query?sObjectQuery=SELECT name from Line_Item__c&sObjectClass="
operator|+
name|QueryRecordsLine_Item__c
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:queryXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:query?format=XML&sObjectQuery=SELECT name from Line_Item__c&sObjectClass="
operator|+
name|QueryRecordsLine_Item__c
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// testSearch
name|from
argument_list|(
literal|"direct:search"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:search?sObjectSearch=FIND {Wee}"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:searchXml"
argument_list|)
operator|.
name|to
argument_list|(
literal|"salesforce:search?format=XML&sObjectSearch=FIND {Wee}"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

