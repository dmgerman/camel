begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.approval
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|approval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|approval
operator|.
name|ApprovalResult
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsCollectionContaining
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|ApprovalResultTest
specifier|public
class|class
name|ApprovalResultTest
block|{
DECL|method|assertResponseReadCorrectly (final ApprovalResult results)
specifier|private
specifier|static
name|void
name|assertResponseReadCorrectly
parameter_list|(
specifier|final
name|ApprovalResult
name|results
parameter_list|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Result
argument_list|>
name|resultsIterator
init|=
name|results
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should deserialize one approval result result"
argument_list|,
name|resultsIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ApprovalResult
operator|.
name|Result
name|result
init|=
name|resultsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"Should deserialize actorIds"
argument_list|,
name|result
operator|.
name|getActorIds
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"0050Y000000u5NOQAY"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should deserialize entityId"
argument_list|,
literal|"0010Y000005BYrZQAW"
argument_list|,
name|result
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should deserialize instanceId"
argument_list|,
literal|"04g0Y000000PL53QAG"
argument_list|,
name|result
operator|.
name|getInstanceId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should deserialize instanceStatus"
argument_list|,
literal|"Pending"
argument_list|,
name|result
operator|.
name|getInstanceStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Should deserialize newWorkitemIds"
argument_list|,
name|result
operator|.
name|getNewWorkitemIds
argument_list|()
argument_list|,
name|hasItems
argument_list|(
literal|"04i0Y000000L0fkQAC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should deserialize success"
argument_list|,
name|result
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Should be no more results"
argument_list|,
name|resultsIterator
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDeserializeFromJson ()
specifier|public
name|void
name|shouldDeserializeFromJson
parameter_list|()
throws|throws
name|JsonProcessingException
throws|,
name|IOException
block|{
specifier|final
name|String
name|json
init|=
literal|"["
comment|//
operator|+
literal|"{"
comment|//
operator|+
literal|"\"actorIds\":[\"0050Y000000u5NOQAY\"],"
comment|//
operator|+
literal|"\"entityId\":\"0010Y000005BYrZQAW\","
comment|//
operator|+
literal|"\"errors\":null,"
comment|//
operator|+
literal|"\"instanceId\":\"04g0Y000000PL53QAG\","
comment|//
operator|+
literal|"\"instanceStatus\":\"Pending\","
comment|//
operator|+
literal|"\"newWorkitemIds\":[\"04i0Y000000L0fkQAC\"],"
comment|//
operator|+
literal|"\"success\":true"
comment|//
operator|+
literal|"}"
comment|//
operator|+
literal|"]"
decl_stmt|;
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|ApprovalResult
name|results
init|=
name|mapper
operator|.
name|readerFor
argument_list|(
name|ApprovalResult
operator|.
name|class
argument_list|)
operator|.
name|readValue
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertResponseReadCorrectly
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldDeserializeFromXml ()
specifier|public
name|void
name|shouldDeserializeFromXml
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
specifier|final
name|ApprovalResult
name|results
init|=
operator|new
name|ApprovalResult
argument_list|()
decl_stmt|;
specifier|final
name|XStream
name|xStream
init|=
operator|new
name|XStream
argument_list|()
decl_stmt|;
name|xStream
operator|.
name|processAnnotations
argument_list|(
name|ApprovalResult
operator|.
name|class
argument_list|)
expr_stmt|;
name|xStream
operator|.
name|fromXML
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
comment|//
operator|+
literal|"<ProcessApprovalResult>"
comment|//
operator|+
literal|"<ProcessApprovalResult>"
comment|//
operator|+
literal|"<actorIds>0050Y000000u5NOQAY</actorIds>"
comment|//
operator|+
literal|"<entityId>0010Y000005BYrZQAW</entityId>"
comment|//
operator|+
literal|"<instanceId>04g0Y000000PL53QAG</instanceId>"
comment|//
operator|+
literal|"<instanceStatus>Pending</instanceStatus>"
comment|//
operator|+
literal|"<newWorkitemIds>04i0Y000000L0fkQAC</newWorkitemIds>"
comment|//
operator|+
literal|"<success>true</success>"
comment|//
operator|+
literal|"</ProcessApprovalResult>"
comment|//
operator|+
literal|"</ProcessApprovalResult>"
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertResponseReadCorrectly
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

