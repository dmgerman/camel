begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.salesforce.api.dto.composite
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|composite
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|xml
operator|.
name|XppDomReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|xml
operator|.
name|xppdom
operator|.
name|XppDom
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlpull
operator|.
name|v1
operator|.
name|XmlPullParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlpull
operator|.
name|v1
operator|.
name|XmlPullParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlpull
operator|.
name|v1
operator|.
name|XmlPullParserFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|MapOfMapsConverterTest
specifier|public
class|class
name|MapOfMapsConverterTest
block|{
DECL|field|converter
name|Converter
name|converter
init|=
operator|new
name|MapOfMapsConverter
argument_list|()
decl_stmt|;
DECL|field|parser
name|XmlPullParser
name|parser
decl_stmt|;
DECL|method|MapOfMapsConverterTest ()
specifier|public
name|MapOfMapsConverterTest
parameter_list|()
throws|throws
name|XmlPullParserException
block|{
specifier|final
name|XmlPullParserFactory
name|factory
init|=
name|XmlPullParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|parser
operator|=
name|factory
operator|.
name|newPullParser
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shoulUnmarshallToMapTrivialCase ()
specifier|public
name|void
name|shoulUnmarshallToMapTrivialCase
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|object
init|=
name|converter
operator|.
name|unmarshal
argument_list|(
name|readerFor
argument_list|(
literal|"<holder><some>value</some></holder>"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"some"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shoulUnmarshallWithAttributesToMapTrivialCase ()
specifier|public
name|void
name|shoulUnmarshallWithAttributesToMapTrivialCase
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|object
init|=
name|converter
operator|.
name|unmarshal
argument_list|(
name|readerFor
argument_list|(
literal|"<holder><some attr=\"attrVal\">value</some></holder>"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|some
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"some"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|some
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|some
operator|.
name|get
argument_list|(
literal|"some"
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|some
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|attributes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attrVal"
argument_list|,
name|attributes
operator|.
name|get
argument_list|(
literal|"attr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shoulUnmarshallToMapWithTwoElements ()
specifier|public
name|void
name|shoulUnmarshallToMapWithTwoElements
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|object
init|=
name|converter
operator|.
name|unmarshal
argument_list|(
name|readerFor
argument_list|(
literal|"<holder><some1>value1</some1><some2>value2</some2></holder>"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"some1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"some2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shoulUnmarshallToMapWithNestedMap ()
specifier|public
name|void
name|shoulUnmarshallToMapWithNestedMap
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|object
init|=
name|converter
operator|.
name|unmarshal
argument_list|(
name|readerFor
argument_list|(
literal|"<holder><some1><some2>value2</some2></some1></holder>"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"some2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"some1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shoulUnmarshallToMapWithNestedMapAndAttributes ()
specifier|public
name|void
name|shoulUnmarshallToMapWithNestedMapAndAttributes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|object
init|=
name|converter
operator|.
name|unmarshal
argument_list|(
name|readerFor
argument_list|(
literal|"<holder><some1 attr1=\"val1\"><some2 attr2=\"val2\">value2</some2></some1></holder>"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|object
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|some1
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"some1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|some1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"attr1"
argument_list|,
literal|"val1"
argument_list|)
argument_list|,
name|some1
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|some2
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|some1
operator|.
name|get
argument_list|(
literal|"some2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|some2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"attr2"
argument_list|,
literal|"val2"
argument_list|)
argument_list|,
name|some2
operator|.
name|get
argument_list|(
literal|"attributes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readerFor (final String xml)
name|HierarchicalStreamReader
name|readerFor
parameter_list|(
specifier|final
name|String
name|xml
parameter_list|)
throws|throws
name|XmlPullParserException
throws|,
name|IOException
block|{
name|parser
operator|.
name|setInput
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|XppDom
name|dom
init|=
name|XppDom
operator|.
name|build
argument_list|(
name|parser
argument_list|)
decl_stmt|;
specifier|final
name|HierarchicalStreamReader
name|reader
init|=
operator|new
name|XppDomReader
argument_list|(
name|dom
argument_list|)
decl_stmt|;
return|return
name|reader
return|;
block|}
block|}
end_class

end_unit

