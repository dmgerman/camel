begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Exception
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|logging
operator|.
name|SystemStreamLog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|loader
operator|.
name|ClasspathResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|log
operator|.
name|Log4JLogChute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_comment
comment|//import java.util.Scanner;
end_comment

begin_class
DECL|class|CamelSalesforceMojoOutputTest
specifier|public
class|class
name|CamelSalesforceMojoOutputTest
block|{
DECL|field|TEST_CASE_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CASE_FILE
init|=
literal|"case.json"
decl_stmt|;
DECL|field|TEST_CALCULATED_FORMULA_FILE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CALCULATED_FORMULA_FILE
init|=
literal|"complex_calculated_formula.json"
decl_stmt|;
DECL|field|OUTPUT_FOLDER
specifier|private
specifier|static
specifier|final
name|String
name|OUTPUT_FOLDER
init|=
literal|"target/test-generated-sources"
decl_stmt|;
DECL|field|generatedDate
specifier|private
specifier|static
specifier|final
name|String
name|generatedDate
init|=
literal|"Thu Mar 09 16:15:49 ART 2017"
decl_stmt|;
DECL|field|mojo
specifier|private
name|CamelSalesforceMojoAccessor
name|mojo
decl_stmt|;
DECL|field|utility
specifier|private
name|CamelSalesforceMojo
operator|.
name|GeneratorUtility
name|utility
decl_stmt|;
DECL|field|pkgDir
specifier|private
name|File
name|pkgDir
decl_stmt|;
DECL|class|CamelSalesforceMojoAccessor
specifier|private
specifier|static
class|class
name|CamelSalesforceMojoAccessor
extends|extends
name|CamelSalesforceMojo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CamelSalesforceMojoAccessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|CamelSalesforceMojoAccessor ()
specifier|public
name|CamelSalesforceMojoAccessor
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize velocity to load resources from class loader and use Log4J
name|Properties
name|velocityProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RESOURCE_LOADER
argument_list|,
literal|"cloader"
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
literal|"cloader.resource.loader.class"
argument_list|,
name|ClasspathResourceLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM_CLASS
argument_list|,
name|Log4JLogChute
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM
operator|+
literal|".log4j.logger"
argument_list|,
name|LOG
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|VelocityEngine
name|engine
init|=
operator|new
name|VelocityEngine
argument_list|(
name|velocityProperties
argument_list|)
decl_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
name|Field
name|field
init|=
name|CamelSalesforceMojo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"engine"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|engine
argument_list|)
expr_stmt|;
block|}
comment|// Expose processDescription in order to test it
DECL|method|processDescription (File pkgDir, SObjectDescription description, GeneratorUtility utility, String generatedDate)
specifier|public
name|void
name|processDescription
parameter_list|(
name|File
name|pkgDir
parameter_list|,
name|SObjectDescription
name|description
parameter_list|,
name|GeneratorUtility
name|utility
parameter_list|,
name|String
name|generatedDate
parameter_list|)
throws|throws
name|Exception
block|{
name|Method
name|method
init|=
name|CamelSalesforceMojo
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"processDescription"
argument_list|,
name|File
operator|.
name|class
argument_list|,
name|SObjectDescription
operator|.
name|class
argument_list|,
name|CamelSalesforceMojo
operator|.
name|GeneratorUtility
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|pkgDir
argument_list|,
name|description
argument_list|,
name|utility
argument_list|,
name|generatedDate
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|mojo
operator|=
name|createMojo
argument_list|()
expr_stmt|;
name|pkgDir
operator|=
operator|new
name|File
argument_list|(
name|OUTPUT_FOLDER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pkgDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|pkgDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to create "
operator|+
name|pkgDir
argument_list|)
throw|;
block|}
block|}
name|utility
operator|=
name|createGeneratorUtility
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessDescriptionPickLists ()
specifier|public
name|void
name|testProcessDescriptionPickLists
parameter_list|()
throws|throws
name|Exception
block|{
name|SObjectDescription
name|description
init|=
name|createSObjectDescription
argument_list|(
name|TEST_CASE_FILE
argument_list|)
decl_stmt|;
name|mojo
operator|.
name|processDescription
argument_list|(
name|pkgDir
argument_list|,
name|description
argument_list|,
name|utility
argument_list|,
name|generatedDate
argument_list|)
expr_stmt|;
name|assertClassFile
argument_list|(
literal|"Case.java"
argument_list|)
expr_stmt|;
name|assertClassFile
argument_list|(
literal|"Case_PickListAccentMarkEnum.java"
argument_list|)
expr_stmt|;
name|assertClassFile
argument_list|(
literal|"Case_PickListQuotationMarkEnum.java"
argument_list|)
expr_stmt|;
name|assertClassFile
argument_list|(
literal|"Case_PickListSlashEnum.java"
argument_list|)
expr_stmt|;
name|assertClassFile
argument_list|(
literal|"QueryRecordsCase.java"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessDescriptionCalculatedFormula ()
specifier|public
name|void
name|testProcessDescriptionCalculatedFormula
parameter_list|()
throws|throws
name|Exception
block|{
name|SObjectDescription
name|description
init|=
name|createSObjectDescription
argument_list|(
name|TEST_CALCULATED_FORMULA_FILE
argument_list|)
decl_stmt|;
name|mojo
operator|.
name|processDescription
argument_list|(
name|pkgDir
argument_list|,
name|description
argument_list|,
name|utility
argument_list|,
name|generatedDate
argument_list|)
expr_stmt|;
name|assertClassFile
argument_list|(
literal|"ComplexCalculatedFormula.java"
argument_list|)
expr_stmt|;
name|assertClassFile
argument_list|(
literal|"QueryRecordsComplexCalculatedFormula.java"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertClassFile (String name)
specifier|public
name|void
name|assertClassFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Class "
operator|+
name|name
operator|+
literal|" must be equal to the target one"
argument_list|,
name|FileUtils
operator|.
name|contentEquals
argument_list|(
operator|new
name|File
argument_list|(
name|OUTPUT_FOLDER
argument_list|,
name|name
argument_list|)
argument_list|,
name|FileUtils
operator|.
name|toFile
argument_list|(
name|classLoader
operator|.
name|getResource
argument_list|(
literal|"generated/"
operator|+
name|name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createGeneratorUtility ()
specifier|protected
name|CamelSalesforceMojo
operator|.
name|GeneratorUtility
name|createGeneratorUtility
parameter_list|()
block|{
return|return
operator|new
name|CamelSalesforceMojo
operator|.
name|GeneratorUtility
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|createSObjectDescription (String name)
specifier|protected
name|SObjectDescription
name|createSObjectDescription
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|InputStream
name|inputStream
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
name|JsonUtils
operator|.
name|createObjectMapper
argument_list|()
decl_stmt|;
name|SObjectDescription
name|description
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|inputStream
argument_list|,
name|SObjectDescription
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|description
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Couldn't Read description from file"
argument_list|)
throw|;
return|return
name|description
return|;
block|}
DECL|method|createMojo ()
specifier|protected
name|CamelSalesforceMojoAccessor
name|createMojo
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelSalesforceMojoAccessor
name|mojo
init|=
operator|new
name|CamelSalesforceMojoAccessor
argument_list|()
decl_stmt|;
name|mojo
operator|.
name|setLog
argument_list|(
operator|new
name|SystemStreamLog
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mojo
return|;
block|}
block|}
end_class

end_unit

