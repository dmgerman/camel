begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|tools
operator|.
name|JavaFileObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|testing
operator|.
name|compile
operator|.
name|Compilation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|testing
operator|.
name|compile
operator|.
name|Compilation
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|testing
operator|.
name|compile
operator|.
name|Compiler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|testing
operator|.
name|compile
operator|.
name|JavaFileObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
operator|.
name|AbstractSalesforceMojoIntegrationTest
operator|.
name|setup
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|CamelSalesforceMojoIntegrationTest
specifier|public
class|class
name|CamelSalesforceMojoIntegrationTest
block|{
annotation|@
name|Rule
DECL|field|temp
specifier|public
name|TemporaryFolder
name|temp
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testExecute ()
specifier|public
name|void
name|testExecute
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|GenerateMojo
name|mojo
init|=
name|createMojo
argument_list|()
decl_stmt|;
comment|// generate code
name|mojo
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// validate generated code check that it was generated
specifier|final
name|Path
name|packagePath
init|=
name|temp
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"test"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"dto"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|packagePath
argument_list|)
operator|.
name|as
argument_list|(
literal|"Package directory was not created"
argument_list|)
operator|.
name|exists
argument_list|()
expr_stmt|;
comment|// test that the generated sources can be compiled
specifier|final
name|List
argument_list|<
name|JavaFileObject
argument_list|>
name|sources
init|=
name|Files
operator|.
name|list
argument_list|(
name|packagePath
argument_list|)
operator|.
name|map
argument_list|(
name|p
lambda|->
block|{
try|try
block|{
return|return
name|JavaFileObjects
operator|.
name|forResource
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Compilation
name|compilation
init|=
name|Compiler
operator|.
name|javac
argument_list|()
operator|.
name|compile
argument_list|(
name|sources
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|compilation
operator|.
name|status
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|Status
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
DECL|method|createMojo ()
name|GenerateMojo
name|createMojo
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|GenerateMojo
name|mojo
init|=
operator|new
name|GenerateMojo
argument_list|()
decl_stmt|;
comment|// set login properties
name|setup
argument_list|(
name|mojo
argument_list|)
expr_stmt|;
comment|// set defaults
name|mojo
operator|.
name|version
operator|=
name|SalesforceEndpointConfig
operator|.
name|DEFAULT_VERSION
expr_stmt|;
name|mojo
operator|.
name|outputDirectory
operator|=
name|temp
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|mojo
operator|.
name|packageName
operator|=
literal|"test.dto"
expr_stmt|;
comment|// set code generation properties
name|mojo
operator|.
name|includePattern
operator|=
literal|"(.*__c)|(PushTopic)|(Document)|(Account)"
expr_stmt|;
return|return
name|mojo
return|;
block|}
block|}
end_class

end_unit

