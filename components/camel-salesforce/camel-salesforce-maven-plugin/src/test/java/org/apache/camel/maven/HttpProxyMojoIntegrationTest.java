begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|littleshoot
operator|.
name|proxy
operator|.
name|HttpProxyServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|littleshoot
operator|.
name|proxy
operator|.
name|ProxyAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|littleshoot
operator|.
name|proxy
operator|.
name|impl
operator|.
name|DefaultHttpProxyServer
import|;
end_import

begin_class
DECL|class|HttpProxyMojoIntegrationTest
specifier|public
class|class
name|HttpProxyMojoIntegrationTest
extends|extends
name|CamelSalesforceMojoIntegrationTest
block|{
DECL|field|HTTP_PROXY_PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_PASSWORD
init|=
literal|"camel-user-password"
decl_stmt|;
DECL|field|HTTP_PROXY_REALM
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_REALM
init|=
literal|"proxy-realm"
decl_stmt|;
DECL|field|HTTP_PROXY_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_USER_NAME
init|=
literal|"camel-user"
decl_stmt|;
DECL|field|httpProxyPort
specifier|private
name|int
name|httpProxyPort
decl_stmt|;
DECL|field|proxy
specifier|private
name|HttpProxyServer
name|proxy
decl_stmt|;
annotation|@
name|Before
DECL|method|startProxy ()
specifier|public
name|void
name|startProxy
parameter_list|()
block|{
name|httpProxyPort
operator|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
expr_stmt|;
name|proxy
operator|=
name|DefaultHttpProxyServer
operator|.
name|bootstrap
argument_list|()
operator|.
name|withPort
argument_list|(
name|httpProxyPort
argument_list|)
operator|.
name|withProxyAuthenticator
argument_list|(
operator|new
name|ProxyAuthenticator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getRealm
parameter_list|()
block|{
return|return
name|HTTP_PROXY_REALM
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
block|{
return|return
name|HTTP_PROXY_USER_NAME
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
operator|&&
name|HTTP_PROXY_PASSWORD
operator|.
name|equals
argument_list|(
name|password
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopProxy ()
specifier|public
name|void
name|stopProxy
parameter_list|()
block|{
name|proxy
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createMojo ()
specifier|protected
name|GenerateMojo
name|createMojo
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|GenerateMojo
name|mojo
init|=
name|super
operator|.
name|createMojo
argument_list|()
decl_stmt|;
comment|// HTTP proxy properties
name|mojo
operator|.
name|httpProxyHost
operator|=
literal|"localhost"
expr_stmt|;
name|mojo
operator|.
name|httpProxyPort
operator|=
name|httpProxyPort
expr_stmt|;
name|mojo
operator|.
name|httpProxyUsername
operator|=
name|HTTP_PROXY_USER_NAME
expr_stmt|;
name|mojo
operator|.
name|httpProxyPassword
operator|=
name|HTTP_PROXY_PASSWORD
expr_stmt|;
name|mojo
operator|.
name|httpProxyRealm
operator|=
name|HTTP_PROXY_REALM
expr_stmt|;
name|mojo
operator|.
name|isHttpProxySecure
operator|=
literal|false
expr_stmt|;
name|mojo
operator|.
name|httpProxyAuthUri
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%s"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
comment|// HTTP client properties
name|mojo
operator|.
name|httpClientProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|mojo
operator|.
name|httpClientProperties
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
literal|"60000"
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|httpClientProperties
operator|.
name|put
argument_list|(
literal|"removeIdleDestinations"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|mojo
return|;
block|}
block|}
end_class

end_unit

