begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|proxy
operator|.
name|ConnectHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|B64Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeader
operator|.
name|PROXY_AUTHENTICATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeader
operator|.
name|PROXY_AUTHORIZATION
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Bug in Jetty9 causes java.lang.IllegalArgumentException: Invalid protocol login.salesforce.com"
argument_list|)
DECL|class|HttpProxyMojoIntegrationTest
specifier|public
class|class
name|HttpProxyMojoIntegrationTest
extends|extends
name|CamelSalesforceMojoIntegrationTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HttpProxyMojoIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HTTP_PROXY_HOST
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|HTTP_PROXY_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_USER_NAME
init|=
literal|"camel-user"
decl_stmt|;
DECL|field|HTTP_PROXY_PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_PASSWORD
init|=
literal|"camel-user-password"
decl_stmt|;
DECL|field|HTTP_PROXY_REALM
specifier|private
specifier|static
specifier|final
name|String
name|HTTP_PROXY_REALM
init|=
literal|"proxy-realm"
decl_stmt|;
DECL|field|server
specifier|private
specifier|static
name|Server
name|server
decl_stmt|;
DECL|field|httpProxyPort
specifier|private
specifier|static
name|int
name|httpProxyPort
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupServer ()
specifier|public
specifier|static
name|void
name|setupServer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start a local HTTP proxy using Jetty server
name|server
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
comment|/*         final SSLContextParameters contextParameters = new SSLContextParameters();         final SslContextFactory sslContextFactory = new SslContextFactory();         sslContextFactory.setSslContext(contextParameters.createSSLContext());         ServerConnector connector = new ServerConnector(server, sslContextFactory); */
name|ServerConnector
name|connector
init|=
operator|new
name|ServerConnector
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
name|HTTP_PROXY_HOST
argument_list|)
expr_stmt|;
name|server
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
specifier|final
name|String
name|authenticationString
init|=
literal|"Basic "
operator|+
name|B64Code
operator|.
name|encode
argument_list|(
name|HTTP_PROXY_USER_NAME
operator|+
literal|":"
operator|+
name|HTTP_PROXY_PASSWORD
argument_list|,
name|StringUtil
operator|.
name|__ISO_8859_1
argument_list|)
decl_stmt|;
name|ConnectHandler
name|connectHandler
init|=
operator|new
name|ConnectHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|handleAuthentication
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|address
parameter_list|)
block|{
comment|// validate proxy-authentication header
specifier|final
name|String
name|header
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|PROXY_AUTHORIZATION
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authenticationString
operator|.
name|equals
argument_list|(
name|header
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing header "
operator|+
name|PROXY_AUTHORIZATION
argument_list|)
expr_stmt|;
comment|// ask for authentication header
name|response
operator|.
name|setHeader
argument_list|(
name|PROXY_AUTHENTICATE
operator|.
name|toString
argument_list|()
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"Basic realm=\"%s\""
argument_list|,
name|HTTP_PROXY_REALM
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Request contains required header "
operator|+
name|PROXY_AUTHORIZATION
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|connectHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting proxy server..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|httpProxyPort
operator|=
name|connector
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started proxy server on port {}"
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createMojo ()
specifier|protected
name|CamelSalesforceMojo
name|createMojo
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|CamelSalesforceMojo
name|mojo
init|=
name|super
operator|.
name|createMojo
argument_list|()
decl_stmt|;
comment|// SSL context parameters
name|mojo
operator|.
name|sslContextParameters
operator|=
operator|new
name|SSLContextParameters
argument_list|()
expr_stmt|;
comment|// HTTP proxy properties
name|mojo
operator|.
name|httpProxyHost
operator|=
name|HTTP_PROXY_HOST
expr_stmt|;
name|mojo
operator|.
name|httpProxyPort
operator|=
name|httpProxyPort
expr_stmt|;
name|mojo
operator|.
name|httpProxyUsername
operator|=
name|HTTP_PROXY_USER_NAME
expr_stmt|;
name|mojo
operator|.
name|httpProxyPassword
operator|=
name|HTTP_PROXY_PASSWORD
expr_stmt|;
name|mojo
operator|.
name|httpProxyRealm
operator|=
name|HTTP_PROXY_REALM
expr_stmt|;
name|mojo
operator|.
name|httpProxyAuthUri
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"https://%s:%s"
argument_list|,
name|HTTP_PROXY_HOST
argument_list|,
name|httpProxyPort
argument_list|)
expr_stmt|;
comment|// HTTP client properties
name|mojo
operator|.
name|httpClientProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|mojo
operator|.
name|httpClientProperties
operator|.
name|put
argument_list|(
literal|"timeout"
argument_list|,
literal|"60000"
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|httpClientProperties
operator|.
name|put
argument_list|(
literal|"removeIdleDestinations"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|mojo
return|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownAfterClass ()
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// stop the proxy server after component
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping proxy server..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopped proxy server"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

