begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceLoginConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|PayloadFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|DefaultRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PropertyBindingSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Origin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|ProxyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|Socks4Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|api
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|BasicAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|util
operator|.
name|DigestAuthentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_comment
comment|/**  * Base class for any Salesforce MOJO.  */
end_comment

begin_class
DECL|class|AbstractSalesforceMojo
specifier|abstract
class|class
name|AbstractSalesforceMojo
extends|extends
name|AbstractMojo
block|{
comment|// default connect and call timeout
DECL|field|DEFAULT_TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_TIMEOUT
init|=
literal|60000
decl_stmt|;
comment|/**      * Salesforce client id.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.clientId"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|clientId
name|String
name|clientId
decl_stmt|;
comment|/**      * Salesforce client secret.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.clientSecret"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|clientSecret
name|String
name|clientSecret
decl_stmt|;
comment|/**      * HTTP client properties.      */
annotation|@
name|Parameter
DECL|field|httpClientProperties
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|httpClientProperties
decl_stmt|;
comment|/**      * Proxy authentication URI.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyAuthUri"
argument_list|)
DECL|field|httpProxyAuthUri
name|String
name|httpProxyAuthUri
decl_stmt|;
comment|/**      * Addresses to NOT Proxy.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyExcludedAddresses"
argument_list|)
DECL|field|httpProxyExcludedAddresses
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyExcludedAddresses
decl_stmt|;
comment|/**      * HTTP Proxy host.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyHost"
argument_list|)
DECL|field|httpProxyHost
name|String
name|httpProxyHost
decl_stmt|;
comment|/**      * Addresses to Proxy.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyIncludedAddresses"
argument_list|)
DECL|field|httpProxyIncludedAddresses
name|Set
argument_list|<
name|String
argument_list|>
name|httpProxyIncludedAddresses
decl_stmt|;
comment|/**      * Proxy authentication password.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyPassword"
argument_list|)
DECL|field|httpProxyPassword
name|String
name|httpProxyPassword
decl_stmt|;
comment|/**      * HTTP Proxy port.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyPort"
argument_list|)
DECL|field|httpProxyPort
name|Integer
name|httpProxyPort
decl_stmt|;
comment|/**      * Proxy authentication realm.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyRealm"
argument_list|)
DECL|field|httpProxyRealm
name|String
name|httpProxyRealm
decl_stmt|;
comment|/**      * Proxy uses Digest authentication.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyUseDigestAuth"
argument_list|)
DECL|field|httpProxyUseDigestAuth
name|boolean
name|httpProxyUseDigestAuth
decl_stmt|;
comment|/**      * Proxy authentication username.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.httpProxyUsername"
argument_list|)
DECL|field|httpProxyUsername
name|String
name|httpProxyUsername
decl_stmt|;
comment|/**      * Is HTTP Proxy secure, i.e. using secure sockets, true by default.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.isHttpProxySecure"
argument_list|)
DECL|field|isHttpProxySecure
name|boolean
name|isHttpProxySecure
init|=
literal|true
decl_stmt|;
comment|/**      * Is it a SOCKS4 Proxy?      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.isHttpProxySocks4"
argument_list|)
DECL|field|isHttpProxySocks4
name|boolean
name|isHttpProxySocks4
decl_stmt|;
comment|/**      * Salesforce login URL, defaults to https://login.salesforce.com.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.loginUrl"
argument_list|,
name|defaultValue
operator|=
name|SalesforceLoginConfig
operator|.
name|DEFAULT_LOGIN_URL
argument_list|)
DECL|field|loginUrl
name|String
name|loginUrl
decl_stmt|;
comment|/**      * Salesforce password.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.password"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|password
name|String
name|password
decl_stmt|;
comment|/**      * SSL Context parameters.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.sslContextParameters"
argument_list|)
DECL|field|sslContextParameters
specifier|final
name|SSLContextParameters
name|sslContextParameters
init|=
operator|new
name|SSLContextParameters
argument_list|()
decl_stmt|;
comment|/**      * Salesforce username.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.userName"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|userName
name|String
name|userName
decl_stmt|;
comment|/**      * Salesforce API version.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.version"
argument_list|,
name|defaultValue
operator|=
name|SalesforceEndpointConfig
operator|.
name|DEFAULT_VERSION
argument_list|)
DECL|field|version
name|String
name|version
decl_stmt|;
DECL|field|responseTimeout
specifier|private
name|long
name|responseTimeout
decl_stmt|;
annotation|@
name|Override
DECL|method|execute ()
specifier|public
specifier|final
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|setup
argument_list|()
expr_stmt|;
specifier|final
name|RestClient
name|restClient
init|=
name|connectToSalesforce
argument_list|()
decl_stmt|;
try|try
block|{
name|executeWithClient
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disconnectFromSalesforce
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getResponseTimeout ()
specifier|public
name|long
name|getResponseTimeout
parameter_list|()
block|{
return|return
name|responseTimeout
return|;
block|}
DECL|method|connectToSalesforce ()
specifier|private
name|RestClient
name|connectToSalesforce
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|RestClient
name|restClient
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|SalesforceHttpClient
name|httpClient
init|=
name|createHttpClient
argument_list|()
decl_stmt|;
comment|// connect to Salesforce
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Logging in to Salesforce"
argument_list|)
expr_stmt|;
specifier|final
name|SalesforceSession
name|session
init|=
name|httpClient
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|session
operator|.
name|login
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SalesforceException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Salesforce login error "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Salesforce login successful"
argument_list|)
expr_stmt|;
comment|// create rest client
name|restClient
operator|=
operator|new
name|DefaultRestClient
argument_list|(
name|httpClient
argument_list|,
name|version
argument_list|,
name|PayloadFormat
operator|.
name|JSON
argument_list|,
name|session
argument_list|)
expr_stmt|;
comment|// remember to start the active client object
operator|(
operator|(
name|DefaultRestClient
operator|)
name|restClient
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|restClient
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Error connecting to Salesforce: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|disconnectFromSalesforce
argument_list|(
name|restClient
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|createHttpClient ()
specifier|private
name|SalesforceHttpClient
name|createHttpClient
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
specifier|final
name|SalesforceHttpClient
name|httpClient
decl_stmt|;
name|CamelContext
name|camelContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
comment|// set ssl context parameters
try|try
block|{
specifier|final
name|SslContextFactory
name|sslContextFactory
init|=
operator|new
name|SslContextFactory
argument_list|()
decl_stmt|;
name|sslContextFactory
operator|.
name|setSslContext
argument_list|(
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|(
name|camelContext
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityUtils
operator|.
name|adaptToIBMCipherNames
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
name|httpClient
operator|=
operator|new
name|SalesforceHttpClient
argument_list|(
name|sslContextFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error creating default SSL context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error creating default SSL context: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// default settings
name|httpClient
operator|.
name|setConnectTimeout
argument_list|(
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|setTimeout
argument_list|(
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
comment|// enable redirects, no need for a RedirectListener class in Jetty 9
name|httpClient
operator|.
name|setFollowRedirects
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// set HTTP client parameters
if|if
condition|(
name|httpClientProperties
operator|!=
literal|null
operator|&&
operator|!
name|httpClientProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|PropertyBindingSupport
operator|.
name|bindProperties
argument_list|(
name|camelContext
argument_list|,
name|httpClient
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|httpClientProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error setting HTTP client properties: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// wait for 1 second longer than the HTTP client response timeout
name|responseTimeout
operator|=
name|httpClient
operator|.
name|getTimeout
argument_list|()
operator|+
literal|1000L
expr_stmt|;
comment|// set http proxy settings
comment|// set HTTP proxy settings
if|if
condition|(
name|httpProxyHost
operator|!=
literal|null
operator|&&
name|httpProxyPort
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Origin
operator|.
name|Address
name|proxyAddress
init|=
operator|new
name|Origin
operator|.
name|Address
argument_list|(
name|httpProxyHost
argument_list|,
name|httpProxyPort
argument_list|)
decl_stmt|;
name|ProxyConfiguration
operator|.
name|Proxy
name|proxy
decl_stmt|;
if|if
condition|(
name|isHttpProxySocks4
condition|)
block|{
name|proxy
operator|=
operator|new
name|Socks4Proxy
argument_list|(
name|proxyAddress
argument_list|,
name|isHttpProxySecure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|=
operator|new
name|HttpProxy
argument_list|(
name|proxyAddress
argument_list|,
name|isHttpProxySecure
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpProxyIncludedAddresses
operator|!=
literal|null
operator|&&
operator|!
name|httpProxyIncludedAddresses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|proxy
operator|.
name|getIncludedAddresses
argument_list|()
operator|.
name|addAll
argument_list|(
name|httpProxyIncludedAddresses
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpProxyExcludedAddresses
operator|!=
literal|null
operator|&&
operator|!
name|httpProxyExcludedAddresses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|proxy
operator|.
name|getExcludedAddresses
argument_list|()
operator|.
name|addAll
argument_list|(
name|httpProxyExcludedAddresses
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|getProxyConfiguration
argument_list|()
operator|.
name|getProxies
argument_list|()
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|httpProxyUsername
operator|!=
literal|null
operator|&&
name|httpProxyPassword
operator|!=
literal|null
condition|)
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|httpProxyAuthUri
argument_list|,
literal|"httpProxyAuthUri"
argument_list|)
expr_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|httpProxyRealm
argument_list|,
literal|"httpProxyRealm"
argument_list|)
expr_stmt|;
specifier|final
name|Authentication
name|authentication
decl_stmt|;
if|if
condition|(
name|httpProxyUseDigestAuth
condition|)
block|{
name|authentication
operator|=
operator|new
name|DigestAuthentication
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authentication
operator|=
operator|new
name|BasicAuthentication
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|httpProxyAuthUri
argument_list|)
argument_list|,
name|httpProxyRealm
argument_list|,
name|httpProxyUsername
argument_list|,
name|httpProxyPassword
argument_list|)
expr_stmt|;
block|}
name|httpClient
operator|.
name|getAuthenticationStore
argument_list|()
operator|.
name|addAuthentication
argument_list|(
name|authentication
argument_list|)
expr_stmt|;
block|}
comment|// set session before calling start()
specifier|final
name|SalesforceSession
name|session
init|=
operator|new
name|SalesforceSession
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|,
name|httpClient
argument_list|,
name|httpClient
operator|.
name|getTimeout
argument_list|()
argument_list|,
operator|new
name|SalesforceLoginConfig
argument_list|(
name|loginUrl
argument_list|,
name|clientId
argument_list|,
name|clientSecret
argument_list|,
name|userName
argument_list|,
name|password
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|httpClient
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
try|try
block|{
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error creating HTTP client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|httpClient
return|;
block|}
DECL|method|disconnectFromSalesforce (final RestClient restClient)
specifier|private
name|void
name|disconnectFromSalesforce
parameter_list|(
specifier|final
name|RestClient
name|restClient
parameter_list|)
block|{
if|if
condition|(
name|restClient
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
specifier|final
name|SalesforceHttpClient
name|httpClient
init|=
call|(
name|SalesforceHttpClient
call|)
argument_list|(
operator|(
name|DefaultRestClient
operator|)
name|restClient
argument_list|)
operator|.
name|getHttpClient
argument_list|()
decl_stmt|;
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|restClient
argument_list|,
name|httpClient
operator|.
name|getSession
argument_list|()
argument_list|,
name|httpClient
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Error stopping Salesforce HTTP client"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|executeWithClient (RestClient client)
specifier|protected
specifier|abstract
name|void
name|executeWithClient
parameter_list|(
name|RestClient
name|client
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
DECL|method|setup ()
specifier|protected
name|void
name|setup
parameter_list|()
block|{     }
block|}
end_class

end_unit

