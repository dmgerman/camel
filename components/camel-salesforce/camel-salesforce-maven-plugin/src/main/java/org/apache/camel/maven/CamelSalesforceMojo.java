begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceEndpointConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|SalesforceLoginConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|SalesforceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|GlobalObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|PickListValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|PayloadFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|SalesforceSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|DefaultRestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|SyncResponseCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|log
operator|.
name|Log4JLogChute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|loader
operator|.
name|ClasspathResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|client
operator|.
name|RedirectListener
import|;
end_import

begin_comment
comment|/**  * Goal which generates POJOs for Salesforce SObjects  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"generate"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_SOURCES
argument_list|)
DECL|class|CamelSalesforceMojo
specifier|public
class|class
name|CamelSalesforceMojo
extends|extends
name|AbstractMojo
block|{
DECL|field|JAVA_EXT
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_EXT
init|=
literal|".java"
decl_stmt|;
DECL|field|PACKAGE_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_NAME_PATTERN
init|=
literal|"^[a-z]+(\\.[a-z][a-z0-9]*)*$"
decl_stmt|;
DECL|field|SOBJECT_POJO_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_POJO_VM
init|=
literal|"/sobject-pojo.vm"
decl_stmt|;
DECL|field|SOBJECT_QUERY_RECORDS_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_QUERY_RECORDS_VM
init|=
literal|"/sobject-query-records.vm"
decl_stmt|;
DECL|field|SOBJECT_PICKLIST_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_PICKLIST_VM
init|=
literal|"/sobject-picklist.vm"
decl_stmt|;
comment|// used for velocity logging, to avoid creating velocity.log
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CamelSalesforceMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|60000
decl_stmt|;
comment|/**      * Salesforce client id      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.clientId"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|clientId
specifier|protected
name|String
name|clientId
decl_stmt|;
comment|/**      * Salesforce client secret      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.clientSecret"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|clientSecret
specifier|protected
name|String
name|clientSecret
decl_stmt|;
comment|/**      * Salesforce user name      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.userName"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|userName
specifier|protected
name|String
name|userName
decl_stmt|;
comment|/**      * Salesforce password      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.password"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|protected
name|String
name|password
decl_stmt|;
comment|/**      * Salesforce version      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.version"
argument_list|,
name|defaultValue
operator|=
name|SalesforceEndpointConfig
operator|.
name|DEFAULT_VERSION
argument_list|)
DECL|field|version
specifier|protected
name|String
name|version
decl_stmt|;
comment|/**      * Location of the file.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.outputDirectory"
argument_list|,
name|defaultValue
operator|=
literal|"${project.build.directory}/generated-sources/camel-salesforce"
argument_list|)
DECL|field|outputDirectory
specifier|protected
name|File
name|outputDirectory
decl_stmt|;
comment|/**      * Salesforce URL.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.loginUrl"
argument_list|,
name|defaultValue
operator|=
name|SalesforceLoginConfig
operator|.
name|DEFAULT_LOGIN_URL
argument_list|)
DECL|field|loginUrl
specifier|protected
name|String
name|loginUrl
decl_stmt|;
comment|/**      * Names of Salesforce SObject for which POJOs must be generated      */
annotation|@
name|Parameter
DECL|field|includes
specifier|protected
name|String
index|[]
name|includes
decl_stmt|;
comment|/**      * Do NOT generate POJOs for these Salesforce SObjects      */
annotation|@
name|Parameter
DECL|field|excludes
specifier|protected
name|String
index|[]
name|excludes
decl_stmt|;
comment|/**      * Include Salesforce SObjects that match pattern      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.includePattern"
argument_list|)
DECL|field|includePattern
specifier|protected
name|String
name|includePattern
decl_stmt|;
comment|/**      * Exclude Salesforce SObjects that match pattern      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.excludePattern"
argument_list|)
DECL|field|excludePattern
specifier|protected
name|String
name|excludePattern
decl_stmt|;
comment|/**      * Java package name for generated POJOs      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.packageName"
argument_list|,
name|defaultValue
operator|=
literal|"org.apache.camel.salesforce.dto"
argument_list|)
DECL|field|packageName
specifier|protected
name|String
name|packageName
decl_stmt|;
DECL|field|engine
specifier|private
name|VelocityEngine
name|engine
decl_stmt|;
comment|/**      * Execute the mojo to generate SObject POJOs      *      * @throws MojoExecutionException      */
comment|// CHECKSTYLE:OFF
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
comment|// initialize velocity to load resources from class loader and use Log4J
name|Properties
name|velocityProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RESOURCE_LOADER
argument_list|,
literal|"cloader"
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
literal|"cloader.resource.loader.class"
argument_list|,
name|ClasspathResourceLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM_CLASS
argument_list|,
name|Log4JLogChute
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_LOGSYSTEM
operator|+
literal|".log4j.logger"
argument_list|,
name|LOG
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|=
operator|new
name|VelocityEngine
argument_list|(
name|velocityProperties
argument_list|)
expr_stmt|;
name|engine
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// make sure we can load both templates
if|if
condition|(
operator|!
name|engine
operator|.
name|resourceExists
argument_list|(
name|SOBJECT_POJO_VM
argument_list|)
operator|||
operator|!
name|engine
operator|.
name|resourceExists
argument_list|(
name|SOBJECT_QUERY_RECORDS_VM
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Velocity templates not found"
argument_list|)
throw|;
block|}
comment|// connect to Salesforce
specifier|final
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|()
decl_stmt|;
name|httpClient
operator|.
name|registerListener
argument_list|(
name|RedirectListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|setConnectTimeout
argument_list|(
name|TIMEOUT
argument_list|)
expr_stmt|;
name|httpClient
operator|.
name|setTimeout
argument_list|(
name|TIMEOUT
argument_list|)
expr_stmt|;
try|try
block|{
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error creating HTTP client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SalesforceSession
name|session
init|=
operator|new
name|SalesforceSession
argument_list|(
name|httpClient
argument_list|,
operator|new
name|SalesforceLoginConfig
argument_list|(
name|loginUrl
argument_list|,
name|clientId
argument_list|,
name|clientSecret
argument_list|,
name|userName
argument_list|,
name|password
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Salesforce login..."
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|login
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SalesforceException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Salesforce login error "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Salesforce login successful"
argument_list|)
expr_stmt|;
comment|// create rest client
name|RestClient
name|restClient
decl_stmt|;
try|try
block|{
name|restClient
operator|=
operator|new
name|DefaultRestClient
argument_list|(
name|httpClient
argument_list|,
name|version
argument_list|,
name|PayloadFormat
operator|.
name|JSON
argument_list|,
name|session
argument_list|)
expr_stmt|;
comment|// remember to start the active client object
operator|(
operator|(
name|DefaultRestClient
operator|)
name|restClient
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Unexpected exception creating Rest client: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|// use Jackson json
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
comment|// call getGlobalObjects to get all SObjects
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|objectNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|SyncResponseCallback
name|callback
init|=
operator|new
name|SyncResponseCallback
argument_list|()
decl_stmt|;
try|try
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Getting Salesforce Objects..."
argument_list|)
expr_stmt|;
name|restClient
operator|.
name|getGlobalObjects
argument_list|(
name|callback
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|callback
operator|.
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Timeout waiting for getGlobalObjects!"
argument_list|)
throw|;
block|}
specifier|final
name|SalesforceException
name|ex
init|=
name|callback
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
specifier|final
name|GlobalObjects
name|globalObjects
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|callback
operator|.
name|getResponse
argument_list|()
argument_list|,
name|GlobalObjects
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// create a list of object names
for|for
control|(
name|SObject
name|sObject
range|:
name|globalObjects
operator|.
name|getSobjects
argument_list|()
control|)
block|{
name|objectNames
operator|.
name|add
argument_list|(
name|sObject
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error getting global Objects "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// check if we are generating POJOs for all objects or not
if|if
condition|(
operator|(
name|includes
operator|!=
literal|null
operator|&&
name|includes
operator|.
name|length
operator|>
literal|0
operator|)
operator|||
operator|(
name|excludes
operator|!=
literal|null
operator|&&
name|excludes
operator|.
name|length
operator|>
literal|0
operator|)
operator|||
operator|(
name|includePattern
operator|!=
literal|null
operator|&&
operator|!
name|includePattern
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|excludePattern
operator|!=
literal|null
operator|&&
operator|!
name|excludePattern
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Looking for matching Object names..."
argument_list|)
expr_stmt|;
comment|// create a list of accepted names
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includedNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|includes
operator|!=
literal|null
operator|&&
name|includes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|includes
control|)
block|{
name|name
operator|=
name|name
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Invalid empty name in includes"
argument_list|)
throw|;
block|}
name|includedNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludedNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|excludes
operator|!=
literal|null
operator|&&
name|excludes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|excludes
control|)
block|{
name|name
operator|=
name|name
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Invalid empty name in excludes"
argument_list|)
throw|;
block|}
name|excludedNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check whether a pattern is in effect
name|Pattern
name|incPattern
decl_stmt|;
if|if
condition|(
name|includePattern
operator|!=
literal|null
operator|&&
operator|!
name|includePattern
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|incPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|includePattern
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|includedNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// include everything by default if no include names are set
name|incPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// include nothing by default if include names are set
name|incPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^$"
argument_list|)
expr_stmt|;
block|}
comment|// check whether a pattern is in effect
name|Pattern
name|excPattern
decl_stmt|;
if|if
condition|(
name|excludePattern
operator|!=
literal|null
operator|&&
operator|!
name|excludePattern
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|excPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|excludePattern
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// exclude nothing by default
name|excPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^$"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|acceptedNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|objectNames
control|)
block|{
comment|// name is included, or matches include pattern
comment|// and is not excluded and does not match exclude pattern
if|if
condition|(
operator|(
name|includedNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|||
name|incPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
operator|)
operator|&&
operator|!
name|excludedNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|&&
operator|!
name|excPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|acceptedNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|objectNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|objectNames
operator|.
name|addAll
argument_list|(
name|acceptedNames
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Found %s matching Objects"
argument_list|,
name|objectNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Generating Java classes for all %s Objects, this may take a while..."
argument_list|,
name|objectNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// for every accepted name, get SObject description
specifier|final
name|Set
argument_list|<
name|SObjectDescription
argument_list|>
name|descriptions
init|=
operator|new
name|HashSet
argument_list|<
name|SObjectDescription
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Retrieving Object descriptions..."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|objectNames
control|)
block|{
name|callback
operator|.
name|reset
argument_list|()
expr_stmt|;
name|restClient
operator|.
name|getDescription
argument_list|(
name|name
argument_list|,
name|callback
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|callback
operator|.
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Timeout waiting for getDescription for sObject "
operator|+
name|name
argument_list|)
throw|;
block|}
specifier|final
name|SalesforceException
name|ex
init|=
name|callback
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
name|descriptions
operator|.
name|add
argument_list|(
name|mapper
operator|.
name|readValue
argument_list|(
name|callback
operator|.
name|getResponse
argument_list|()
argument_list|,
name|SObjectDescription
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error getting SObject description "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// create package directory
comment|// validate package name
if|if
condition|(
operator|!
name|packageName
operator|.
name|matches
argument_list|(
name|PACKAGE_NAME_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Invalid package name "
operator|+
name|packageName
argument_list|)
throw|;
block|}
specifier|final
name|File
name|pkgDir
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|packageName
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pkgDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|pkgDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to create "
operator|+
name|pkgDir
argument_list|)
throw|;
block|}
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generating Java Classes..."
argument_list|)
expr_stmt|;
comment|// generate POJOs for every object description
specifier|final
name|GeneratorUtility
name|utility
init|=
operator|new
name|GeneratorUtility
argument_list|()
decl_stmt|;
comment|// should we provide a flag to control timestamp generation?
specifier|final
name|String
name|generatedDate
init|=
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|SObjectDescription
name|description
range|:
name|descriptions
control|)
block|{
name|processDescription
argument_list|(
name|pkgDir
argument_list|,
name|description
argument_list|,
name|utility
argument_list|,
name|generatedDate
argument_list|)
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully generated %s Java Classes"
argument_list|,
name|descriptions
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// remember to stop the client
try|try
block|{
operator|(
operator|(
name|DefaultRestClient
operator|)
name|restClient
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
comment|// Salesforce session stop
try|try
block|{
name|session
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
comment|// release HttpConnections
try|try
block|{
name|httpClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
block|}
block|}
comment|// CHECKSTYLE:ON
DECL|method|processDescription (File pkgDir, SObjectDescription description, GeneratorUtility utility, String generatedDate)
specifier|private
name|void
name|processDescription
parameter_list|(
name|File
name|pkgDir
parameter_list|,
name|SObjectDescription
name|description
parameter_list|,
name|GeneratorUtility
name|utility
parameter_list|,
name|String
name|generatedDate
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
comment|// generate a source file for SObject
name|String
name|fileName
init|=
name|description
operator|.
name|getName
argument_list|()
operator|+
name|JAVA_EXT
decl_stmt|;
name|BufferedWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|File
name|pojoFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|pojoFile
argument_list|)
argument_list|)
expr_stmt|;
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"packageName"
argument_list|,
name|packageName
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"utility"
argument_list|,
name|utility
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"desc"
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"generatedDate"
argument_list|,
name|generatedDate
argument_list|)
expr_stmt|;
name|Template
name|pojoTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_POJO_VM
argument_list|)
decl_stmt|;
name|pojoTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// close pojoFile
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// write required Enumerations for any picklists
for|for
control|(
name|SObjectField
name|field
range|:
name|description
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|utility
operator|.
name|isPicklist
argument_list|(
name|field
argument_list|)
operator|||
name|utility
operator|.
name|isMultiSelectPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|fileName
operator|=
name|utility
operator|.
name|enumTypeName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
name|JAVA_EXT
expr_stmt|;
name|File
name|enumFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|enumFile
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|VelocityContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"packageName"
argument_list|,
name|packageName
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"utility"
argument_list|,
name|utility
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"generatedDate"
argument_list|,
name|generatedDate
argument_list|)
expr_stmt|;
name|Template
name|queryTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_PICKLIST_VM
argument_list|)
decl_stmt|;
name|queryTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// close Enum file
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// write the QueryRecords class
name|fileName
operator|=
literal|"QueryRecords"
operator|+
name|description
operator|.
name|getName
argument_list|()
operator|+
name|JAVA_EXT
expr_stmt|;
name|File
name|queryFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|queryFile
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|VelocityContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"packageName"
argument_list|,
name|packageName
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"desc"
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"generatedDate"
argument_list|,
name|generatedDate
argument_list|)
expr_stmt|;
name|Template
name|queryTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_QUERY_RECORDS_VM
argument_list|)
decl_stmt|;
name|queryTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
comment|// close QueryRecords file
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error creating "
operator|+
name|fileName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{                 }
block|}
block|}
block|}
DECL|class|GeneratorUtility
specifier|public
specifier|static
class|class
name|GeneratorUtility
block|{
DECL|field|BASE_FIELDS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|BASE_FIELDS
decl_stmt|;
DECL|field|LOOKUP_MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|LOOKUP_MAP
decl_stmt|;
static|static
block|{
name|BASE_FIELDS
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|AbstractSObjectBase
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|BASE_FIELDS
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create a type map
comment|// using JAXB mapping, for the most part
comment|// uses Joda time instead of XmlGregorianCalendar
comment|// TODO do we need support for commented types???
specifier|final
name|String
index|[]
index|[]
name|typeMap
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"ID"
block|,
literal|"String"
block|}
block|,
comment|// mapping for tns:ID SOAP type
block|{
literal|"string"
block|,
literal|"String"
block|}
block|,
block|{
literal|"integer"
block|,
literal|"java.math.BigInteger"
block|}
block|,
block|{
literal|"int"
block|,
literal|"Integer"
block|}
block|,
block|{
literal|"long"
block|,
literal|"Long"
block|}
block|,
block|{
literal|"short"
block|,
literal|"Short"
block|}
block|,
block|{
literal|"decimal"
block|,
literal|"java.math.BigDecimal"
block|}
block|,
block|{
literal|"float"
block|,
literal|"Float"
block|}
block|,
block|{
literal|"double"
block|,
literal|"Double"
block|}
block|,
block|{
literal|"boolean"
block|,
literal|"Boolean"
block|}
block|,
block|{
literal|"byte"
block|,
literal|"Byte"
block|}
block|,
comment|//                {"QName", "javax.xml.namespace.QName"},
comment|//                {"dateTime", "javax.xml.datatype.XMLGregorianCalendar"},
block|{
literal|"dateTime"
block|,
literal|"org.joda.time.DateTime"
block|}
block|,
comment|// the blob base64Binary type is mapped to String URL for retrieving the blob
block|{
literal|"base64Binary"
block|,
literal|"String"
block|}
block|,
comment|//                {"hexBinary", "byte[]"},
block|{
literal|"unsignedInt"
block|,
literal|"Long"
block|}
block|,
block|{
literal|"unsignedShort"
block|,
literal|"Integer"
block|}
block|,
block|{
literal|"unsignedByte"
block|,
literal|"Short"
block|}
block|,
comment|//                {"time", "javax.xml.datatype.XMLGregorianCalendar"},
block|{
literal|"time"
block|,
literal|"org.joda.time.DateTime"
block|}
block|,
comment|//                {"date", "javax.xml.datatype.XMLGregorianCalendar"},
block|{
literal|"date"
block|,
literal|"org.joda.time.DateTime"
block|}
block|,
comment|//                {"g", "javax.xml.datatype.XMLGregorianCalendar"},
block|{
literal|"g"
block|,
literal|"org.joda.time.DateTime"
block|}
block|,
comment|// Salesforce maps any types like string, picklist, reference, etc. to string
block|{
literal|"anyType"
block|,
literal|"String"
block|}
block|,
comment|/*                 {"anySimpleType", "java.lang.Object"},                 {"anySimpleType", "java.lang.String"},                 {"duration", "javax.xml.datatype.Duration"},                 {"NOTATION", "javax.xml.namespace.QName"} */
block|}
decl_stmt|;
name|LOOKUP_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
index|[]
name|entry
range|:
name|typeMap
control|)
block|{
name|LOOKUP_MAP
operator|.
name|put
argument_list|(
name|entry
index|[
literal|0
index|]
argument_list|,
name|entry
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|BASE64BINARY
specifier|private
specifier|static
specifier|final
name|String
name|BASE64BINARY
init|=
literal|"base64Binary"
decl_stmt|;
DECL|field|MULTIPICKLIST
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPICKLIST
init|=
literal|"multipicklist"
decl_stmt|;
DECL|field|PICKLIST
specifier|private
specifier|static
specifier|final
name|String
name|PICKLIST
init|=
literal|"picklist"
decl_stmt|;
DECL|method|isBlobField (SObjectField field)
specifier|public
name|boolean
name|isBlobField
parameter_list|(
name|SObjectField
name|field
parameter_list|)
block|{
specifier|final
name|String
name|soapType
init|=
name|field
operator|.
name|getSoapType
argument_list|()
decl_stmt|;
return|return
name|BASE64BINARY
operator|.
name|equals
argument_list|(
name|soapType
operator|.
name|substring
argument_list|(
name|soapType
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|notBaseField (String name)
specifier|public
name|boolean
name|notBaseField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|!
name|BASE_FIELDS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getFieldType (SObjectField field)
specifier|public
name|String
name|getFieldType
parameter_list|(
name|SObjectField
name|field
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
comment|// check if this is a picklist
if|if
condition|(
name|isPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
comment|// use a pick list enum, which will be created after generating the SObject class
return|return
name|enumTypeName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isMultiSelectPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
comment|// use a pick list enum array, enum will be created after generating the SObject class
return|return
name|enumTypeName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"[]"
return|;
block|}
else|else
block|{
comment|// map field to Java type
specifier|final
name|String
name|soapType
init|=
name|field
operator|.
name|getSoapType
argument_list|()
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|LOOKUP_MAP
operator|.
name|get
argument_list|(
name|soapType
operator|.
name|substring
argument_list|(
name|soapType
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported type %s for field %s"
argument_list|,
name|soapType
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|type
return|;
block|}
block|}
DECL|method|isMultiSelectPicklist (SObjectField field)
specifier|public
name|boolean
name|isMultiSelectPicklist
parameter_list|(
name|SObjectField
name|field
parameter_list|)
block|{
return|return
name|MULTIPICKLIST
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|hasPicklists (SObjectDescription desc)
specifier|public
name|boolean
name|hasPicklists
parameter_list|(
name|SObjectDescription
name|desc
parameter_list|)
block|{
for|for
control|(
name|SObjectField
name|field
range|:
name|desc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|isPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasMultiSelectPicklists (SObjectDescription desc)
specifier|public
name|boolean
name|hasMultiSelectPicklists
parameter_list|(
name|SObjectDescription
name|desc
parameter_list|)
block|{
for|for
control|(
name|SObjectField
name|field
range|:
name|desc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|isMultiSelectPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getLastEntry (SObjectField field)
specifier|public
name|PickListValue
name|getLastEntry
parameter_list|(
name|SObjectField
name|field
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|PickListValue
argument_list|>
name|values
init|=
name|field
operator|.
name|getPicklistValues
argument_list|()
decl_stmt|;
return|return
name|values
operator|.
name|get
argument_list|(
name|values
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|isPicklist (SObjectField field)
specifier|public
name|boolean
name|isPicklist
parameter_list|(
name|SObjectField
name|field
parameter_list|)
block|{
comment|//            return field.getPicklistValues() != null&& !field.getPicklistValues().isEmpty();
return|return
name|PICKLIST
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|enumTypeName (String name)
specifier|public
name|String
name|enumTypeName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|name
operator|.
name|endsWith
argument_list|(
literal|"__c"
argument_list|)
condition|?
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
else|:
name|name
expr_stmt|;
return|return
name|name
operator|+
literal|"Enum"
return|;
block|}
DECL|method|getEnumConstant (String value)
specifier|public
name|String
name|getEnumConstant
parameter_list|(
name|String
name|value
parameter_list|)
block|{
comment|// TODO add support for supplementary characters
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|char
name|c
range|:
name|value
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// replace non Java identifier character with '_'
name|result
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
condition|?
name|result
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
else|:
name|value
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

