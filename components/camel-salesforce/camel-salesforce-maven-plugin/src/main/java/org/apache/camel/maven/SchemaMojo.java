begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|module
operator|.
name|jsonSchema
operator|.
name|JsonSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|utils
operator|.
name|JsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"schema"
argument_list|,
name|requiresProject
operator|=
literal|false
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_SOURCES
argument_list|)
DECL|class|SchemaMojo
specifier|public
class|class
name|SchemaMojo
extends|extends
name|AbstractSalesforceMojo
block|{
comment|/**      * Exclude Salesforce SObjects that match pattern.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.excludePattern"
argument_list|)
DECL|field|excludePattern
name|String
name|excludePattern
decl_stmt|;
comment|/**      * Do NOT generate DTOs for these Salesforce SObjects.      */
annotation|@
name|Parameter
DECL|field|excludes
name|String
index|[]
name|excludes
decl_stmt|;
comment|/**      * Include Salesforce SObjects that match pattern.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.includePattern"
argument_list|)
DECL|field|includePattern
name|String
name|includePattern
decl_stmt|;
comment|/**      * Names of Salesforce SObject for which DTOs must be generated.      */
annotation|@
name|Parameter
DECL|field|includes
name|String
index|[]
name|includes
decl_stmt|;
comment|/**      * Schema ID for JSON Schema for DTOs.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.jsonSchemaFilename"
argument_list|,
name|defaultValue
operator|=
literal|"salesforce-dto-schema.json"
argument_list|)
DECL|field|jsonSchemaFilename
name|String
name|jsonSchemaFilename
decl_stmt|;
comment|/**      * Schema ID for JSON Schema for DTOs.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.jsonSchemaId"
argument_list|,
name|defaultValue
operator|=
name|JsonUtils
operator|.
name|DEFAULT_ID_PREFIX
argument_list|)
DECL|field|jsonSchemaId
name|String
name|jsonSchemaId
decl_stmt|;
comment|/**      * Location of generated JSON schema files, defaults to      * target/generated-sources/camel-salesforce.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.outputDirectory"
argument_list|,
name|defaultValue
operator|=
literal|"${project.build.directory}/generated-sources/camel-salesforce"
argument_list|)
DECL|field|outputDirectory
name|File
name|outputDirectory
decl_stmt|;
annotation|@
name|Override
DECL|method|executeWithClient (final RestClient client)
specifier|protected
name|void
name|executeWithClient
parameter_list|(
specifier|final
name|RestClient
name|client
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generating JSON Schema..."
argument_list|)
expr_stmt|;
specifier|final
name|ObjectDescriptions
name|descriptions
init|=
operator|new
name|ObjectDescriptions
argument_list|(
name|client
argument_list|,
name|getResponseTimeout
argument_list|()
argument_list|,
name|includes
argument_list|,
name|includePattern
argument_list|,
name|excludes
argument_list|,
name|excludePattern
argument_list|,
name|getLog
argument_list|()
argument_list|)
decl_stmt|;
comment|// generate JSON schema for every object description
specifier|final
name|ObjectMapper
name|schemaObjectMapper
init|=
name|JsonUtils
operator|.
name|createSchemaObjectMapper
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|JsonSchema
argument_list|>
name|allSchemas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SObjectDescription
name|description
range|:
name|descriptions
operator|.
name|fetched
argument_list|()
control|)
block|{
if|if
condition|(
name|Defaults
operator|.
name|IGNORED_OBJECTS
operator|.
name|contains
argument_list|(
name|description
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|allSchemas
operator|.
name|addAll
argument_list|(
name|JsonUtils
operator|.
name|getSObjectJsonSchema
argument_list|(
name|schemaObjectMapper
argument_list|,
name|description
argument_list|,
name|jsonSchemaId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to generate JSON Schema types for: "
operator|+
name|description
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|final
name|Path
name|schemaFilePath
init|=
name|outputDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|jsonSchemaFilename
argument_list|)
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|write
argument_list|(
name|schemaFilePath
argument_list|,
name|JsonUtils
operator|.
name|getJsonSchemaString
argument_list|(
name|schemaObjectMapper
argument_list|,
name|allSchemas
argument_list|,
name|jsonSchemaId
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to generate JSON Schema source file: "
operator|+
name|schemaFilePath
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully generated %s JSON Types in file %s"
argument_list|,
name|descriptions
operator|.
name|count
argument_list|()
operator|*
literal|2
argument_list|,
name|schemaFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

