begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BinaryOperator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|AbstractSObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|PickListValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|api
operator|.
name|dto
operator|.
name|SObjectField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|salesforce
operator|.
name|internal
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|text
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|VelocityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|app
operator|.
name|VelocityEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|RuntimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|velocity
operator|.
name|runtime
operator|.
name|resource
operator|.
name|loader
operator|.
name|ClasspathResourceLoader
import|;
end_import

begin_comment
comment|/**  * Goal to generate DTOs for Salesforce SObjects  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"generate"
argument_list|,
name|requiresProject
operator|=
literal|false
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_SOURCES
argument_list|)
DECL|class|GenerateMojo
specifier|public
class|class
name|GenerateMojo
extends|extends
name|AbstractSalesforceMojo
block|{
DECL|class|GeneratorUtility
specifier|public
class|class
name|GeneratorUtility
block|{
DECL|field|stack
specifier|private
name|Stack
argument_list|<
name|String
argument_list|>
name|stack
decl_stmt|;
DECL|field|varNames
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|varNames
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|current ()
specifier|public
name|String
name|current
parameter_list|()
block|{
return|return
name|stack
operator|.
name|peek
argument_list|()
return|;
block|}
DECL|method|enumTypeName (final String name)
specifier|public
name|String
name|enumTypeName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"__c"
argument_list|)
condition|?
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
else|:
name|name
operator|)
operator|+
literal|"Enum"
return|;
block|}
DECL|method|externalIdsOf (final String name)
specifier|public
name|List
argument_list|<
name|SObjectField
argument_list|>
name|externalIdsOf
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|descriptions
operator|.
name|externalIdsOf
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|getEnumConstant (final String value)
specifier|public
name|String
name|getEnumConstant
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
comment|// TODO add support for supplementary characters
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|char
name|c
range|:
name|value
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// replace non Java identifier character with '_'
name|result
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
condition|?
name|result
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
else|:
name|value
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
DECL|method|getFieldType (final SObjectDescription description, final SObjectField field)
specifier|public
name|String
name|getFieldType
parameter_list|(
specifier|final
name|SObjectDescription
name|description
parameter_list|,
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
comment|// check if this is a picklist
if|if
condition|(
name|isPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|useStringsForPicklists
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
comment|// use a pick list enum, which will be created after generating
comment|// the SObject class
return|return
name|description
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|enumTypeName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isMultiSelectPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|useStringsForPicklists
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"[]"
return|;
block|}
comment|// use a pick list enum array, enum will be created after
comment|// generating the SObject class
return|return
name|description
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|enumTypeName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|"[]"
return|;
block|}
else|else
block|{
comment|// map field to Java type
specifier|final
name|String
name|soapType
init|=
name|field
operator|.
name|getSoapType
argument_list|()
decl_stmt|;
specifier|final
name|String
name|lookupType
init|=
name|soapType
operator|.
name|substring
argument_list|(
name|soapType
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|lookupType
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unsupported field type `%s` in field `%s` of object `%s`"
argument_list|,
name|soapType
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|description
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Currently known types:\n "
operator|+
name|types
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
block|}
DECL|method|getLookupRelationshipName (final SObjectField field)
specifier|public
name|String
name|getLookupRelationshipName
parameter_list|(
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
return|return
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|field
operator|.
name|getRelationshipName
argument_list|()
argument_list|,
literal|"relationshipName"
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getUniqueValues (final SObjectField field)
specifier|public
name|List
argument_list|<
name|PickListValue
argument_list|>
name|getUniqueValues
parameter_list|(
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|getPicklistValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|field
operator|.
name|getPicklistValues
argument_list|()
return|;
block|}
specifier|final
name|List
argument_list|<
name|PickListValue
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|literals
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|PickListValue
name|listValue
range|:
name|field
operator|.
name|getPicklistValues
argument_list|()
control|)
block|{
specifier|final
name|String
name|value
init|=
name|listValue
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|literals
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|literals
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|listValue
argument_list|)
expr_stmt|;
block|}
block|}
name|literals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|hasExternalIds (final String name)
specifier|public
name|boolean
name|hasExternalIds
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|descriptions
operator|.
name|hasExternalIds
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|hasMultiSelectPicklists (final SObjectDescription desc)
specifier|public
name|boolean
name|hasMultiSelectPicklists
parameter_list|(
specifier|final
name|SObjectDescription
name|desc
parameter_list|)
block|{
for|for
control|(
specifier|final
name|SObjectField
name|field
range|:
name|desc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|isMultiSelectPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasPicklists (final SObjectDescription desc)
specifier|public
name|boolean
name|hasPicklists
parameter_list|(
specifier|final
name|SObjectDescription
name|desc
parameter_list|)
block|{
for|for
control|(
specifier|final
name|SObjectField
name|field
range|:
name|desc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|isPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|includeList (final List<?> list, final String propertyName)
specifier|public
name|boolean
name|includeList
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|list
parameter_list|,
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|BLACKLISTED_PROPERTIES
operator|.
name|contains
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
DECL|method|isBlobField (final SObjectField field)
specifier|public
name|boolean
name|isBlobField
parameter_list|(
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
specifier|final
name|String
name|soapType
init|=
name|field
operator|.
name|getSoapType
argument_list|()
decl_stmt|;
return|return
name|BASE64BINARY
operator|.
name|equals
argument_list|(
name|soapType
operator|.
name|substring
argument_list|(
name|soapType
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isExternalId (final SObjectField field)
specifier|public
name|boolean
name|isExternalId
parameter_list|(
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
return|return
name|field
operator|.
name|isExternalId
argument_list|()
return|;
block|}
DECL|method|isLookup (final SObjectField field)
specifier|public
name|boolean
name|isLookup
parameter_list|(
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
return|return
literal|"reference"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isMultiSelectPicklist (final SObjectField field)
specifier|public
name|boolean
name|isMultiSelectPicklist
parameter_list|(
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
return|return
name|MULTIPICKLIST
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isPicklist (final SObjectField field)
specifier|public
name|boolean
name|isPicklist
parameter_list|(
specifier|final
name|SObjectField
name|field
parameter_list|)
block|{
return|return
name|PICKLIST
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isPrimitiveOrBoxed (final Object object)
specifier|public
name|boolean
name|isPrimitiveOrBoxed
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|object
operator|.
name|getClass
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isWholeNumberWrapper
init|=
name|Byte
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
name|Short
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
name|Integer
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
name|Long
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isFloatingPointWrapper
init|=
name|Double
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
name|Float
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isWrapper
init|=
name|isWholeNumberWrapper
operator|||
name|isFloatingPointWrapper
operator|||
name|Boolean
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
name|Character
operator|.
name|class
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isPrimitive
init|=
name|clazz
operator|.
name|isPrimitive
argument_list|()
decl_stmt|;
return|return
name|isPrimitive
operator|||
name|isWrapper
return|;
block|}
DECL|method|notBaseField (final String name)
specifier|public
name|boolean
name|notBaseField
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|!
name|BASE_FIELDS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|notNull (final Object val)
specifier|public
name|boolean
name|notNull
parameter_list|(
specifier|final
name|Object
name|val
parameter_list|)
block|{
return|return
name|val
operator|!=
literal|null
return|;
block|}
DECL|method|pop ()
specifier|public
name|void
name|pop
parameter_list|()
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
DECL|method|propertiesOf (final Object object)
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propertiesOf
parameter_list|(
specifier|final
name|Object
name|object
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|object
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Function
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|String
argument_list|>
name|keyMapper
init|=
name|e
lambda|->
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|valueMapper
init|=
name|Map
operator|.
name|Entry
operator|::
name|getValue
decl_stmt|;
specifier|final
name|BinaryOperator
argument_list|<
name|Object
argument_list|>
name|mergeFunction
init|=
parameter_list|(
name|u
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Duplicate key %s"
argument_list|,
name|u
argument_list|)
argument_list|)
throw|;
block|}
decl_stmt|;
specifier|final
name|Supplier
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|mapSupplier
init|=
name|LinkedHashMap
operator|::
operator|new
decl_stmt|;
return|return
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|keyMapper
argument_list|,
name|valueMapper
argument_list|,
name|mergeFunction
argument_list|,
name|mapSupplier
argument_list|)
argument_list|)
operator|.
name|entrySet
argument_list|()
return|;
block|}
DECL|method|push (final String additional)
specifier|public
name|void
name|push
parameter_list|(
specifier|final
name|String
name|additional
parameter_list|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|additional
argument_list|)
expr_stmt|;
block|}
DECL|method|start (final String initial)
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|String
name|initial
parameter_list|)
block|{
name|stack
operator|=
operator|new
name|Stack
argument_list|<>
argument_list|()
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|varNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|variableName (final String given)
specifier|public
name|String
name|variableName
parameter_list|(
specifier|final
name|String
name|given
parameter_list|)
block|{
specifier|final
name|String
name|base
init|=
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|given
argument_list|)
decl_stmt|;
name|AtomicInteger
name|counter
init|=
name|varNames
operator|.
name|get
argument_list|(
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|counter
operator|==
literal|null
condition|)
block|{
name|counter
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|varNames
operator|.
name|put
argument_list|(
name|base
argument_list|,
name|counter
argument_list|)
expr_stmt|;
block|}
return|return
name|base
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
block|}
DECL|field|DEFAULT_TYPES
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|DEFAULT_TYPES
init|=
name|defineLookupMap
argument_list|()
decl_stmt|;
DECL|field|BASE_FIELDS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|BASE_FIELDS
init|=
name|defineBaseFields
argument_list|()
decl_stmt|;
DECL|field|BASE64BINARY
specifier|private
specifier|static
specifier|final
name|String
name|BASE64BINARY
init|=
literal|"base64Binary"
decl_stmt|;
DECL|field|BLACKLISTED_PROPERTIES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|BLACKLISTED_PROPERTIES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"PicklistValues"
argument_list|,
literal|"ChildRelationships"
argument_list|)
decl_stmt|;
DECL|field|JAVA_EXT
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_EXT
init|=
literal|".java"
decl_stmt|;
comment|// used for velocity logging, to avoid creating velocity.log
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GenerateMojo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|MULTIPICKLIST
specifier|private
specifier|static
specifier|final
name|String
name|MULTIPICKLIST
init|=
literal|"multipicklist"
decl_stmt|;
DECL|field|PACKAGE_NAME_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_NAME_PATTERN
init|=
literal|"(\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*\\.)+\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*"
decl_stmt|;
DECL|field|PICKLIST
specifier|private
specifier|static
specifier|final
name|String
name|PICKLIST
init|=
literal|"picklist"
decl_stmt|;
DECL|field|SOBJECT_LOOKUP_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_LOOKUP_VM
init|=
literal|"/sobject-lookup.vm"
decl_stmt|;
DECL|field|SOBJECT_PICKLIST_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_PICKLIST_VM
init|=
literal|"/sobject-picklist.vm"
decl_stmt|;
DECL|field|SOBJECT_POJO_OPTIONAL_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_POJO_OPTIONAL_VM
init|=
literal|"/sobject-pojo-optional.vm"
decl_stmt|;
DECL|field|SOBJECT_POJO_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_POJO_VM
init|=
literal|"/sobject-pojo.vm"
decl_stmt|;
DECL|field|SOBJECT_QUERY_RECORDS_OPTIONAL_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_QUERY_RECORDS_OPTIONAL_VM
init|=
literal|"/sobject-query-records-optional.vm"
decl_stmt|;
DECL|field|SOBJECT_QUERY_RECORDS_VM
specifier|private
specifier|static
specifier|final
name|String
name|SOBJECT_QUERY_RECORDS_VM
init|=
literal|"/sobject-query-records.vm"
decl_stmt|;
DECL|field|UTF_8
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
annotation|@
name|Parameter
DECL|field|customTypes
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customTypes
decl_stmt|;
DECL|field|descriptions
name|ObjectDescriptions
name|descriptions
decl_stmt|;
DECL|field|engine
name|VelocityEngine
name|engine
decl_stmt|;
comment|/**      * Include Salesforce SObjects that match pattern.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.includePattern"
argument_list|)
DECL|field|includePattern
name|String
name|includePattern
decl_stmt|;
comment|/**      * Location of generated DTO files, defaults to      * target/generated-sources/camel-salesforce.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.outputDirectory"
argument_list|,
name|defaultValue
operator|=
literal|"${project.build.directory}/generated-sources/camel-salesforce"
argument_list|)
DECL|field|outputDirectory
name|File
name|outputDirectory
decl_stmt|;
comment|/**      * Java package name for generated DTOs.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.packageName"
argument_list|,
name|defaultValue
operator|=
literal|"org.apache.camel.salesforce.dto"
argument_list|)
DECL|field|packageName
name|String
name|packageName
decl_stmt|;
comment|/**      * Exclude Salesforce SObjects that match pattern.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.excludePattern"
argument_list|)
DECL|field|excludePattern
specifier|private
name|String
name|excludePattern
decl_stmt|;
comment|/**      * Do NOT generate DTOs for these Salesforce SObjects.      */
annotation|@
name|Parameter
DECL|field|excludes
specifier|private
name|String
index|[]
name|excludes
decl_stmt|;
comment|/**      * Names of Salesforce SObject for which DTOs must be generated.      */
annotation|@
name|Parameter
DECL|field|includes
specifier|private
name|String
index|[]
name|includes
decl_stmt|;
DECL|field|types
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|types
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|DEFAULT_TYPES
argument_list|)
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.useOptionals"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|useOptionals
specifier|private
name|boolean
name|useOptionals
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camelSalesforce.useStringsForPicklists"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|useStringsForPicklists
specifier|private
name|Boolean
name|useStringsForPicklists
decl_stmt|;
DECL|method|processDescription (final File pkgDir, final SObjectDescription description, final GeneratorUtility utility)
name|void
name|processDescription
parameter_list|(
specifier|final
name|File
name|pkgDir
parameter_list|,
specifier|final
name|SObjectDescription
name|description
parameter_list|,
specifier|final
name|GeneratorUtility
name|utility
parameter_list|)
throws|throws
name|IOException
block|{
comment|// generate a source file for SObject
specifier|final
name|VelocityContext
name|context
init|=
operator|new
name|VelocityContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"packageName"
argument_list|,
name|packageName
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"utility"
argument_list|,
name|utility
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"esc"
argument_list|,
name|StringEscapeUtils
operator|.
name|class
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"desc"
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"useStringsForPicklists"
argument_list|,
name|useStringsForPicklists
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pojoFileName
init|=
name|description
operator|.
name|getName
argument_list|()
operator|+
name|JAVA_EXT
decl_stmt|;
specifier|final
name|File
name|pojoFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|pojoFileName
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"descriptions"
argument_list|,
name|descriptions
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|pojoFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
specifier|final
name|Template
name|pojoTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_POJO_VM
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|pojoTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useOptionals
condition|)
block|{
specifier|final
name|String
name|optionalFileName
init|=
name|description
operator|.
name|getName
argument_list|()
operator|+
literal|"Optional"
operator|+
name|JAVA_EXT
decl_stmt|;
specifier|final
name|File
name|optionalFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|optionalFileName
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|optionalFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
specifier|final
name|Template
name|optionalTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_POJO_OPTIONAL_VM
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|optionalTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generate ExternalIds Lookup class for all lookup fields that point to
comment|// an Object that has at least one externalId
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|generatedLookupObjects
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SObjectField
name|field
range|:
name|description
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|utility
operator|.
name|isLookup
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
specifier|final
name|String
name|reference
range|:
name|field
operator|.
name|getReferenceTo
argument_list|()
control|)
block|{
specifier|final
name|List
argument_list|<
name|SObjectField
argument_list|>
name|externalIds
init|=
name|descriptions
operator|.
name|externalIdsOf
argument_list|(
name|reference
argument_list|)
decl_stmt|;
specifier|final
name|String
name|lookupClassName
init|=
name|reference
operator|+
literal|"_Lookup"
decl_stmt|;
if|if
condition|(
name|generatedLookupObjects
operator|.
name|contains
argument_list|(
name|lookupClassName
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
specifier|final
name|SObjectField
name|externalId
range|:
name|externalIds
control|)
block|{
name|generatedLookupObjects
operator|.
name|add
argument_list|(
name|lookupClassName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|lookupClassFileName
init|=
name|lookupClassName
operator|+
name|JAVA_EXT
decl_stmt|;
specifier|final
name|File
name|lookupClassFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|lookupClassFileName
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|externalId
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"lookupRelationshipName"
argument_list|,
name|field
operator|.
name|getRelationshipName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"lookupType"
argument_list|,
name|lookupClassName
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"externalIdsList"
argument_list|,
name|externalIds
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"lookupClassName"
argument_list|,
name|lookupClassName
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|lookupClassFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
specifier|final
name|Template
name|lookupClassTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_LOOKUP_VM
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|lookupClassTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// write required Enumerations for any picklists
for|for
control|(
specifier|final
name|SObjectField
name|field
range|:
name|description
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|utility
operator|.
name|isPicklist
argument_list|(
name|field
argument_list|)
operator|||
name|utility
operator|.
name|isMultiSelectPicklist
argument_list|(
name|field
argument_list|)
condition|)
block|{
specifier|final
name|String
name|enumName
init|=
name|description
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|utility
operator|.
name|enumTypeName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|enumFileName
init|=
name|enumName
operator|+
name|JAVA_EXT
decl_stmt|;
specifier|final
name|File
name|enumFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|enumFileName
argument_list|)
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"enumName"
argument_list|,
name|enumName
argument_list|)
expr_stmt|;
specifier|final
name|Template
name|enumTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_PICKLIST_VM
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|enumFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|enumTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// write the QueryRecords class
specifier|final
name|String
name|queryRecordsFileName
init|=
literal|"QueryRecords"
operator|+
name|description
operator|.
name|getName
argument_list|()
operator|+
name|JAVA_EXT
decl_stmt|;
specifier|final
name|File
name|queryRecordsFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|queryRecordsFileName
argument_list|)
decl_stmt|;
specifier|final
name|Template
name|queryTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_QUERY_RECORDS_VM
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|queryRecordsFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|queryTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useOptionals
condition|)
block|{
comment|// write the QueryRecords Optional class
specifier|final
name|String
name|queryRecordsOptionalFileName
init|=
literal|"QueryRecords"
operator|+
name|description
operator|.
name|getName
argument_list|()
operator|+
literal|"Optional"
operator|+
name|JAVA_EXT
decl_stmt|;
specifier|final
name|File
name|queryRecordsOptionalFile
init|=
operator|new
name|File
argument_list|(
name|pkgDir
argument_list|,
name|queryRecordsOptionalFileName
argument_list|)
decl_stmt|;
specifier|final
name|Template
name|queryRecordsOptionalTemplate
init|=
name|engine
operator|.
name|getTemplate
argument_list|(
name|SOBJECT_QUERY_RECORDS_OPTIONAL_VM
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|queryRecordsOptionalFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|queryRecordsOptionalTemplate
operator|.
name|merge
argument_list|(
name|context
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|executeWithClient (final RestClient client)
specifier|protected
name|void
name|executeWithClient
parameter_list|(
specifier|final
name|RestClient
name|client
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|descriptions
operator|=
operator|new
name|ObjectDescriptions
argument_list|(
name|client
argument_list|,
name|getResponseTimeout
argument_list|()
argument_list|,
name|includes
argument_list|,
name|includePattern
argument_list|,
name|excludes
argument_list|,
name|excludePattern
argument_list|,
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|=
name|createVelocityEngine
argument_list|()
expr_stmt|;
comment|// make sure we can load both templates
if|if
condition|(
operator|!
name|engine
operator|.
name|resourceExists
argument_list|(
name|SOBJECT_POJO_VM
argument_list|)
operator|||
operator|!
name|engine
operator|.
name|resourceExists
argument_list|(
name|SOBJECT_QUERY_RECORDS_VM
argument_list|)
operator|||
operator|!
name|engine
operator|.
name|resourceExists
argument_list|(
name|SOBJECT_POJO_OPTIONAL_VM
argument_list|)
operator|||
operator|!
name|engine
operator|.
name|resourceExists
argument_list|(
name|SOBJECT_QUERY_RECORDS_OPTIONAL_VM
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Velocity templates not found"
argument_list|)
throw|;
block|}
comment|// create package directory
comment|// validate package name
if|if
condition|(
operator|!
name|packageName
operator|.
name|matches
argument_list|(
name|PACKAGE_NAME_PATTERN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Invalid package name "
operator|+
name|packageName
argument_list|)
throw|;
block|}
if|if
condition|(
name|outputDirectory
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|outputDirectory
operator|=
operator|new
name|File
argument_list|(
literal|"generated-sources/camel-salesforce"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|File
name|pkgDir
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|packageName
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pkgDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|pkgDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to create "
operator|+
name|pkgDir
argument_list|)
throw|;
block|}
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generating Java Classes..."
argument_list|)
expr_stmt|;
comment|// generate POJOs for every object description
specifier|final
name|GeneratorUtility
name|utility
init|=
operator|new
name|GeneratorUtility
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SObjectDescription
name|description
range|:
name|descriptions
operator|.
name|fetched
argument_list|()
control|)
block|{
if|if
condition|(
name|Defaults
operator|.
name|IGNORED_OBJECTS
operator|.
name|contains
argument_list|(
name|description
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|processDescription
argument_list|(
name|pkgDir
argument_list|,
name|description
argument_list|,
name|utility
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to generate source files for: "
operator|+
name|description
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Successfully generated %s Java Classes"
argument_list|,
name|descriptions
operator|.
name|count
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setup ()
specifier|protected
name|void
name|setup
parameter_list|()
block|{
if|if
condition|(
name|customTypes
operator|!=
literal|null
condition|)
block|{
name|types
operator|.
name|putAll
argument_list|(
name|customTypes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createVelocityEngine ()
specifier|static
name|VelocityEngine
name|createVelocityEngine
parameter_list|()
block|{
comment|// initialize velocity to load resources from class loader and use Log4J
specifier|final
name|Properties
name|velocityProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RESOURCE_LOADER
argument_list|,
literal|"cloader"
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
literal|"cloader.resource.loader.class"
argument_list|,
name|ClasspathResourceLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|velocityProperties
operator|.
name|setProperty
argument_list|(
name|RuntimeConstants
operator|.
name|RUNTIME_LOG_NAME
argument_list|,
name|LOG
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|VelocityEngine
name|engine
init|=
operator|new
name|VelocityEngine
argument_list|(
name|velocityProperties
argument_list|)
decl_stmt|;
return|return
name|engine
return|;
block|}
DECL|method|defineBaseFields ()
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|defineBaseFields
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|baseFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|AbstractSObjectBase
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|baseFields
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|baseFields
return|;
block|}
DECL|method|defineLookupMap ()
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|defineLookupMap
parameter_list|()
block|{
comment|// create a type map
comment|// using JAXB mapping, for the most part
comment|// mapping for tns:ID SOAPtype
specifier|final
name|String
index|[]
index|[]
name|typeMap
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|//
block|{
literal|"ID"
block|,
literal|"String"
block|}
block|,
comment|//
block|{
literal|"string"
block|,
literal|"String"
block|}
block|,
comment|//
block|{
literal|"integer"
block|,
literal|"java.math.BigInteger"
block|}
block|,
comment|//
block|{
literal|"int"
block|,
literal|"Integer"
block|}
block|,
comment|//
block|{
literal|"long"
block|,
literal|"Long"
block|}
block|,
comment|//
block|{
literal|"short"
block|,
literal|"Short"
block|}
block|,
comment|//
block|{
literal|"decimal"
block|,
literal|"java.math.BigDecimal"
block|}
block|,
comment|//
block|{
literal|"float"
block|,
literal|"Float"
block|}
block|,
comment|//
block|{
literal|"double"
block|,
literal|"Double"
block|}
block|,
comment|//
block|{
literal|"boolean"
block|,
literal|"Boolean"
block|}
block|,
comment|//
block|{
literal|"byte"
block|,
literal|"Byte"
block|}
block|,
comment|//
comment|// the blob base64Binary type is mapped to String URL for retrieving
comment|// the blob
block|{
literal|"base64Binary"
block|,
literal|"String"
block|}
block|,
comment|//
block|{
literal|"unsignedInt"
block|,
literal|"Long"
block|}
block|,
comment|//
block|{
literal|"unsignedShort"
block|,
literal|"Integer"
block|}
block|,
comment|//
block|{
literal|"unsignedByte"
block|,
literal|"Short"
block|}
block|,
comment|//
block|{
literal|"dateTime"
block|,
literal|"java.time.ZonedDateTime"
block|}
block|,
comment|//
block|{
literal|"time"
block|,
literal|"java.time.OffsetTime"
block|}
block|,
comment|//
block|{
literal|"date"
block|,
literal|"java.time.LocalDate"
block|}
block|,
comment|//
block|{
literal|"g"
block|,
literal|"java.time.ZonedDateTime"
block|}
block|,
comment|//
comment|// Salesforce maps any types like string, picklist, reference, etc.
comment|// to string
block|{
literal|"anyType"
block|,
literal|"String"
block|}
block|,
comment|//
block|{
literal|"address"
block|,
literal|"org.apache.camel.component.salesforce.api.dto.Address"
block|}
block|,
comment|//
block|{
literal|"location"
block|,
literal|"org.apache.camel.component.salesforce.api.dto.GeoLocation"
block|}
block|,
comment|//
block|{
literal|"RelationshipReferenceTo"
block|,
literal|"String"
block|}
comment|//
block|}
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lookupMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
index|[]
name|entry
range|:
name|typeMap
control|)
block|{
name|lookupMap
operator|.
name|put
argument_list|(
name|entry
index|[
literal|0
index|]
argument_list|,
name|entry
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|lookupMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

