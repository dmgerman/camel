begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.coap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|coap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RestConsumerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|HostUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|CoapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|network
operator|.
name|CoapEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|network
operator|.
name|config
operator|.
name|NetworkConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|scandium
operator|.
name|DTLSConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|scandium
operator|.
name|config
operator|.
name|DtlsConnectorConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link CoAPEndpoint}.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
literal|"coap"
argument_list|)
DECL|class|CoAPComponent
specifier|public
class|class
name|CoAPComponent
extends|extends
name|DefaultComponent
implements|implements
name|RestConsumerFactory
block|{
DECL|field|DEFAULT_PORT
specifier|static
specifier|final
name|int
name|DEFAULT_PORT
init|=
literal|5684
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CoAPComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|servers
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|CoapServer
argument_list|>
name|servers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CoAPComponent ()
specifier|public
name|CoAPComponent
parameter_list|()
block|{     }
DECL|method|getServer (int port, KeyStoreParameters keyStoreParameters)
specifier|public
specifier|synchronized
name|CoapServer
name|getServer
parameter_list|(
name|int
name|port
parameter_list|,
name|KeyStoreParameters
name|keyStoreParameters
parameter_list|)
block|{
name|CoapServer
name|server
init|=
name|servers
operator|.
name|get
argument_list|(
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
operator|&&
name|port
operator|==
operator|-
literal|1
condition|)
block|{
name|server
operator|=
name|getServer
argument_list|(
name|DEFAULT_PORT
argument_list|,
name|keyStoreParameters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|CoapEndpoint
operator|.
name|Builder
name|coapBuilder
init|=
operator|new
name|CoapEndpoint
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|NetworkConfig
name|config
init|=
name|NetworkConfig
operator|.
name|createStandardWithoutFile
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|coapBuilder
operator|.
name|setNetworkConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyStoreParameters
operator|!=
literal|null
condition|)
block|{
name|DtlsConnectorConfig
operator|.
name|Builder
name|builder
init|=
operator|new
name|DtlsConnectorConfig
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyStore
name|keyStore
init|=
name|keyStoreParameters
operator|.
name|createKeyStore
argument_list|()
decl_stmt|;
comment|// TODO
name|PrivateKey
name|privateKey
init|=
operator|(
name|PrivateKey
operator|)
name|keyStoreParameters
operator|.
name|createKeyStore
argument_list|()
operator|.
name|getKey
argument_list|(
literal|"ec"
argument_list|,
literal|"security"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setIdentity
argument_list|(
name|privateKey
argument_list|,
name|keyStore
operator|.
name|getCertificateChain
argument_list|(
literal|"ec"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add all certificates from the truststore
name|Enumeration
argument_list|<
name|String
argument_list|>
name|aliases
init|=
name|keyStore
operator|.
name|aliases
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Certificate
argument_list|>
name|trustCerts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|aliases
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|alias
init|=
name|aliases
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|keyStore
operator|.
name|getCertificate
argument_list|(
name|alias
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|!=
literal|null
condition|)
block|{
name|trustCerts
operator|.
name|add
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|setTrustStore
argument_list|(
name|trustCerts
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|setClientAuthenticationRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//TODO
name|builder
operator|.
name|setSupportedCipherSuites
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
block|}
argument_list|)
expr_stmt|;
comment|//TODO
name|DTLSConnector
name|connector
init|=
operator|new
name|DTLSConnector
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|coapBuilder
operator|.
name|setConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coapBuilder
operator|.
name|setInetSocketAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|server
operator|=
operator|new
name|CoapServer
argument_list|()
expr_stmt|;
name|server
operator|.
name|addEndpoint
argument_list|(
name|coapBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|servers
operator|.
name|put
argument_list|(
name|port
argument_list|,
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|server
return|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
operator|new
name|CoAPEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|String
name|verb
parameter_list|,
name|String
name|basePath
parameter_list|,
name|String
name|uriTemplate
parameter_list|,
name|String
name|consumes
parameter_list|,
name|String
name|produces
parameter_list|,
name|RestConfiguration
name|configuration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|basePath
decl_stmt|;
if|if
condition|(
name|uriTemplate
operator|!=
literal|null
condition|)
block|{
comment|// make sure to avoid double slashes
if|if
condition|(
name|uriTemplate
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
name|uriTemplate
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|path
operator|+
literal|"/"
operator|+
name|uriTemplate
expr_stmt|;
block|}
block|}
name|path
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|RestConfiguration
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getRestConfiguration
argument_list|(
literal|"coap"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|isEnableCORS
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CORS configuration will be ignored as CORS is not supported by the CoAP component"
argument_list|)
expr_stmt|;
block|}
name|String
name|host
init|=
name|config
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|host
argument_list|)
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|allLocalIp
condition|)
block|{
name|host
operator|=
literal|"0.0.0.0"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localHostName
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalHostName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|getHostNameResolver
argument_list|()
operator|==
name|RestConfiguration
operator|.
name|RestHostNameResolver
operator|.
name|localIp
condition|)
block|{
name|host
operator|=
name|HostUtils
operator|.
name|getLocalIp
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// setup endpoint options
if|if
condition|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getEndpointProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|config
operator|.
name|getEndpointProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|scheme
init|=
name|config
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|?
literal|"coap"
else|:
name|config
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|query
init|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|int
name|port
init|=
literal|0
decl_stmt|;
name|int
name|num
init|=
name|config
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|num
operator|>
literal|0
condition|)
block|{
name|port
operator|=
name|num
expr_stmt|;
block|}
comment|// prefix path with context-path if configured in rest-dsl configuration
name|String
name|contextPath
init|=
name|config
operator|.
name|getContextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|contextPath
argument_list|)
condition|)
block|{
name|contextPath
operator|=
name|FileUtil
operator|.
name|stripTrailingSeparator
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
name|contextPath
operator|=
name|FileUtil
operator|.
name|stripLeadingSeparator
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|contextPath
argument_list|)
condition|)
block|{
name|path
operator|=
name|contextPath
operator|+
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
block|}
name|String
name|restrict
init|=
name|verb
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s://%s:%d/%s?coapMethodRestrict=%s"
argument_list|,
name|scheme
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
name|restrict
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|+=
literal|"&"
operator|+
name|query
expr_stmt|;
block|}
name|CoAPEndpoint
name|endpoint
init|=
name|camelContext
operator|.
name|getEndpoint
argument_list|(
name|url
argument_list|,
name|CoAPEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// configure consumer properties
name|Consumer
name|consumer
init|=
name|endpoint
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getConsumerProperties
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|getConsumerProperties
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setProperties
argument_list|(
name|consumer
argument_list|,
name|config
operator|.
name|getConsumerProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
for|for
control|(
name|CoapServer
name|s
range|:
name|servers
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|CoapServer
name|s
range|:
name|servers
operator|.
name|values
argument_list|()
control|)
block|{
name|s
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

