begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.coap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|coap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|CoapResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|coap
operator|.
name|CoAP
operator|.
name|ResponseCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|coap
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|coap
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|network
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|server
operator|.
name|resources
operator|.
name|CoapExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|server
operator|.
name|resources
operator|.
name|Resource
import|;
end_import

begin_class
DECL|class|CamelCoapResource
specifier|final
class|class
name|CamelCoapResource
extends|extends
name|CoapResource
block|{
DECL|field|consumers
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CoAPConsumer
argument_list|>
name|consumers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|possibles
specifier|private
specifier|final
name|List
argument_list|<
name|CamelCoapResource
argument_list|>
name|possibles
decl_stmt|;
DECL|method|CamelCoapResource (String name, CoAPConsumer consumer)
name|CamelCoapResource
parameter_list|(
name|String
name|name
parameter_list|,
name|CoAPConsumer
name|consumer
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|put
argument_list|(
name|consumer
operator|.
name|getCoapEndpoint
argument_list|()
operator|.
name|getCoapMethod
argument_list|()
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|possibles
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|CamelCoapResource (String name, List<CamelCoapResource> possibles)
specifier|private
name|CamelCoapResource
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|CamelCoapResource
argument_list|>
name|possibles
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|possibles
operator|=
name|possibles
expr_stmt|;
block|}
DECL|method|addConsumer (CoAPConsumer consumer)
name|void
name|addConsumer
parameter_list|(
name|CoAPConsumer
name|consumer
parameter_list|)
block|{
name|consumers
operator|.
name|put
argument_list|(
name|consumer
operator|.
name|getCoapEndpoint
argument_list|()
operator|.
name|getCoapMethod
argument_list|()
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getChild (String name)
specifier|public
name|Resource
name|getChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|possibles
operator|!=
literal|null
condition|)
block|{
comment|//FIXME - find which might work...
block|}
name|Resource
name|child
init|=
name|super
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|CamelCoapResource
argument_list|>
name|possibles
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
operator|&&
name|r
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
name|possibles
operator|.
name|add
argument_list|(
operator|(
name|CamelCoapResource
operator|)
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|possibles
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|possibles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|possibles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|CamelCoapResource
argument_list|(
name|name
argument_list|,
name|possibles
argument_list|)
return|;
block|}
block|}
return|return
name|child
return|;
block|}
annotation|@
name|Override
DECL|method|handleRequest (Exchange exchange)
specifier|public
name|void
name|handleRequest
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
init|=
literal|null
decl_stmt|;
name|CoAPConsumer
name|consumer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|possibles
operator|!=
literal|null
condition|)
block|{
name|consumers
operator|.
name|putAll
argument_list|(
name|possibles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|consumers
argument_list|)
expr_stmt|;
block|}
name|CoapExchange
name|cexchange
init|=
operator|new
name|CoapExchange
argument_list|(
name|exchange
argument_list|,
name|this
argument_list|)
decl_stmt|;
try|try
block|{
name|consumer
operator|=
name|consumers
operator|.
name|get
argument_list|(
name|exchange
operator|.
name|getRequest
argument_list|()
operator|.
name|getCode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
block|{
name|consumer
operator|=
name|consumers
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
block|{
name|cexchange
operator|.
name|respond
argument_list|(
name|ResponseCode
operator|.
name|METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
return|return;
block|}
name|camelExchange
operator|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|createUoW
argument_list|(
name|camelExchange
argument_list|)
expr_stmt|;
name|OptionSet
name|options
init|=
name|exchange
operator|.
name|getRequest
argument_list|()
operator|.
name|getOptions
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|options
operator|.
name|getUriQuery
argument_list|()
control|)
block|{
name|int
name|i
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|s
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|hasContentFormat
argument_list|()
condition|)
block|{
name|String
name|mt
init|=
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|options
operator|.
name|getContentFormat
argument_list|()
argument_list|)
decl_stmt|;
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|mt
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|path
init|=
name|exchange
operator|.
name|getRequest
argument_list|()
operator|.
name|getOptions
argument_list|()
operator|.
name|getUriPath
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Resource
name|r
init|=
name|this
decl_stmt|;
while|while
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|resources
operator|.
name|push
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
name|r
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resources
operator|.
name|getFirst
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resources
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
name|int
name|res
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|resources
operator|.
name|isEmpty
argument_list|()
operator|&&
name|res
operator|<
name|path
operator|.
name|size
argument_list|()
condition|)
block|{
name|r
operator|=
name|resources
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'{'
operator|&&
name|r
operator|.
name|getName
argument_list|()
operator|.
name|charAt
argument_list|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'}'
condition|)
block|{
name|String
name|n
init|=
name|r
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|n
argument_list|,
name|path
operator|.
name|get
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res
operator|++
expr_stmt|;
block|}
name|byte
name|bytes
index|[]
init|=
name|exchange
operator|.
name|getCurrentRequest
argument_list|()
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|camelExchange
argument_list|)
expr_stmt|;
name|Message
name|target
init|=
name|camelExchange
operator|.
name|hasOut
argument_list|()
condition|?
name|camelExchange
operator|.
name|getOut
argument_list|()
else|:
name|camelExchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|int
name|format
init|=
name|MediaTypeRegistry
operator|.
name|parse
argument_list|(
name|target
operator|.
name|getHeader
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|cexchange
operator|.
name|respond
argument_list|(
name|ResponseCode
operator|.
name|CONTENT
argument_list|,
name|target
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cexchange
operator|.
name|respond
argument_list|(
name|ResponseCode
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|camelExchange
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|doneUoW
argument_list|(
name|camelExchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

