begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.coap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|coap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|CoapResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|coap
operator|.
name|CoAP
operator|.
name|ResponseCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|network
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|server
operator|.
name|resources
operator|.
name|CoapExchange
import|;
end_import

begin_comment
comment|/**  * The CoAP consumer.  */
end_comment

begin_class
DECL|class|CoAPConsumer
specifier|public
class|class
name|CoAPConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|CoAPEndpoint
name|endpoint
decl_stmt|;
DECL|field|resource
specifier|private
name|CoapResource
name|resource
decl_stmt|;
DECL|method|CoAPConsumer (final CoAPEndpoint endpoint, final Processor processor)
specifier|public
name|CoAPConsumer
parameter_list|(
specifier|final
name|CoAPEndpoint
name|endpoint
parameter_list|,
specifier|final
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|String
name|path
init|=
name|endpoint
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|resource
operator|=
operator|new
name|CoapResource
argument_list|(
name|path
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleRequest
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|CoapExchange
name|cexchange
init|=
operator|new
name|CoapExchange
argument_list|(
name|exchange
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
name|exchange
operator|.
name|getCurrentRequest
argument_list|()
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
try|try
block|{
name|processor
operator|.
name|process
argument_list|(
name|camelExchange
argument_list|)
expr_stmt|;
name|Message
name|target
init|=
name|camelExchange
operator|.
name|hasOut
argument_list|()
condition|?
name|camelExchange
operator|.
name|getOut
argument_list|()
else|:
name|camelExchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|cexchange
operator|.
name|respond
argument_list|(
name|ResponseCode
operator|.
name|CONTENT
argument_list|,
name|target
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|getCoapServer
argument_list|()
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|getCoapServer
argument_list|()
operator|.
name|remove
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

