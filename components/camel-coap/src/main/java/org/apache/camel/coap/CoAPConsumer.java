begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.coap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|coap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|CoapResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|server
operator|.
name|resources
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * The CoAP consumer.  */
end_comment

begin_class
DECL|class|CoAPConsumer
specifier|public
class|class
name|CoAPConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|CoAPEndpoint
name|endpoint
decl_stmt|;
DECL|field|resources
specifier|private
name|List
argument_list|<
name|CoapResource
argument_list|>
name|resources
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|CoAPConsumer (final CoAPEndpoint endpoint, final Processor processor)
specifier|public
name|CoAPConsumer
parameter_list|(
specifier|final
name|CoAPEndpoint
name|endpoint
parameter_list|,
specifier|final
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|getCoapEndpoint ()
specifier|public
name|CoAPEndpoint
name|getCoapEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|endpoint
operator|.
name|getUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Resource
name|cr
init|=
name|endpoint
operator|.
name|getCoapServer
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|part1
init|=
name|path
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
name|part1
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
literal|""
expr_stmt|;
block|}
name|Resource
name|child
init|=
name|cr
operator|.
name|getChild
argument_list|(
name|part1
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|CamelCoapResource
argument_list|(
name|part1
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|cr
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|cr
operator|=
name|child
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|(
operator|(
name|CamelCoapResource
operator|)
name|child
operator|)
operator|.
name|addConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cr
operator|=
name|child
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|CoapResource
name|r
range|:
name|resources
control|)
block|{
name|r
operator|.
name|getParent
argument_list|()
operator|.
name|delete
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

