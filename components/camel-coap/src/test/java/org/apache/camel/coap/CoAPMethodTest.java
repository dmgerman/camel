begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.coap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|coap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CoAPMethodTest
specifier|public
class|class
name|CoAPMethodTest
extends|extends
name|CoAPTestSupport
block|{
annotation|@
name|Test
DECL|method|testCoAPMethodDefaultGet ()
specifier|public
name|void
name|testCoAPMethodDefaultGet
parameter_list|()
block|{
comment|// No body means GET
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"coap://localhost:"
operator|+
name|PORT
operator|+
literal|"/test/a"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GET: /test/a"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoAPMethodDefaultPost ()
specifier|public
name|void
name|testCoAPMethodDefaultPost
parameter_list|()
block|{
comment|// Providing a body means POST
name|String
name|result
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"coap://localhost:"
operator|+
name|PORT
operator|+
literal|"/test/b"
argument_list|,
literal|"Camel"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Camel"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoAPMethodHeader ()
specifier|public
name|void
name|testCoAPMethodHeader
parameter_list|()
block|{
name|String
name|result
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"coap://localhost:"
operator|+
name|PORT
operator|+
literal|"/test/c"
argument_list|,
literal|null
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"DELETE"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DELETE: /test/c"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|fromF
argument_list|(
literal|"coap://localhost:%d/test/a?coapMethodRestrict=GET"
argument_list|,
name|PORT
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"GET: /test/a"
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coap://localhost:%d/test/b?coapMethodRestrict=POST"
argument_list|,
name|PORT
argument_list|)
operator|.
name|setBody
argument_list|(
name|simple
argument_list|(
literal|"Hello ${body}"
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coap://localhost:%d/test/c?coapMethodRestrict=DELETE"
argument_list|,
name|PORT
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"DELETE: /test/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

