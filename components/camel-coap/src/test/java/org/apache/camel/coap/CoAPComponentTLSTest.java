begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.coap
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|coap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|KeyStoreParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|coap
operator|.
name|CoAP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|core
operator|.
name|coap
operator|.
name|MediaTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|scandium
operator|.
name|dtls
operator|.
name|pskstore
operator|.
name|PskStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|scandium
operator|.
name|dtls
operator|.
name|pskstore
operator|.
name|StaticPskStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|californium
operator|.
name|scandium
operator|.
name|dtls
operator|.
name|rpkstore
operator|.
name|TrustedRpkStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CoAPComponentTLSTest
specifier|public
class|class
name|CoAPComponentTLSTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|PORT
specifier|protected
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PORT2
specifier|protected
specifier|static
specifier|final
name|int
name|PORT2
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PORT3
specifier|protected
specifier|static
specifier|final
name|int
name|PORT3
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PORT4
specifier|protected
specifier|static
specifier|final
name|int
name|PORT4
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PORT5
specifier|protected
specifier|static
specifier|final
name|int
name|PORT5
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PORT6
specifier|protected
specifier|static
specifier|final
name|int
name|PORT6
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|PORT7
specifier|protected
specifier|static
specifier|final
name|int
name|PORT7
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testSuccessfulCall ()
specifier|public
name|void
name|testSuccessfulCall
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoTruststore ()
specifier|public
name|void
name|testNoTruststore
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:notruststore"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrustValidationFailed ()
specifier|public
name|void
name|testTrustValidationFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:failedtrust"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelfSigned ()
specifier|public
name|void
name|testSelfSigned
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:selfsigned"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClientAuthentication ()
specifier|public
name|void
name|testClientAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:clientauth"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedClientAuthentication ()
specifier|public
name|void
name|testFailedClientAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:failedclientauth"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCipherSuites ()
specifier|public
name|void
name|testCipherSuites
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:ciphersuites"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRawPublicKey ()
specifier|public
name|void
name|testRawPublicKey
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:rpk"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRawPublicKeyNoTruststore ()
specifier|public
name|void
name|testRawPublicKeyNoTruststore
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:rpknotruststore"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRawPublicKeyFailedTrust ()
specifier|public
name|void
name|testRawPublicKeyFailedTrust
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:rpkfailedtrust"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRawPublicKeyClientAuth ()
specifier|public
name|void
name|testRawPublicKeyClientAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:rpkclientauth"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreSharedKey ()
specifier|public
name|void
name|testPreSharedKey
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:psk"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreSharedKeyCipherSuite ()
specifier|public
name|void
name|testPreSharedKeyCipherSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel CoAP"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|MediaTypeRegistry
operator|.
name|toString
argument_list|(
name|MediaTypeRegistry
operator|.
name|APPLICATION_OCTET_STREAM
argument_list|)
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|CoAPConstants
operator|.
name|COAP_RESPONSE_CODE
argument_list|,
name|CoAP
operator|.
name|ResponseCode
operator|.
name|CONTENT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sendBodyAndHeader
argument_list|(
literal|"direct:pskciphersuite"
argument_list|,
literal|"Camel CoAP"
argument_list|,
name|CoAPConstants
operator|.
name|COAP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyStoreParameters
name|keystoreParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|keystoreParameters
operator|.
name|setResource
argument_list|(
literal|"service.jks"
argument_list|)
expr_stmt|;
name|keystoreParameters
operator|.
name|setPassword
argument_list|(
literal|"security"
argument_list|)
expr_stmt|;
name|KeyStore
name|keyStore
init|=
name|keystoreParameters
operator|.
name|createKeyStore
argument_list|()
decl_stmt|;
name|PrivateKey
name|privateKey
init|=
operator|(
name|PrivateKey
operator|)
name|keyStore
operator|.
name|getKey
argument_list|(
literal|"service"
argument_list|,
literal|"security"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyStore
operator|.
name|getCertificate
argument_list|(
literal|"service"
argument_list|)
operator|.
name|getPublicKey
argument_list|()
decl_stmt|;
name|KeyStoreParameters
name|keystoreParameters2
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|keystoreParameters2
operator|.
name|setResource
argument_list|(
literal|"selfsigned.jks"
argument_list|)
expr_stmt|;
name|keystoreParameters2
operator|.
name|setPassword
argument_list|(
literal|"security"
argument_list|)
expr_stmt|;
name|KeyStoreParameters
name|keystoreParameters3
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|keystoreParameters3
operator|.
name|setResource
argument_list|(
literal|"client.jks"
argument_list|)
expr_stmt|;
name|keystoreParameters3
operator|.
name|setPassword
argument_list|(
literal|"security"
argument_list|)
expr_stmt|;
name|KeyStoreParameters
name|truststoreParameters
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|truststoreParameters
operator|.
name|setResource
argument_list|(
literal|"truststore.jks"
argument_list|)
expr_stmt|;
name|truststoreParameters
operator|.
name|setPassword
argument_list|(
literal|"storepass"
argument_list|)
expr_stmt|;
name|KeyStoreParameters
name|truststoreParameters2
init|=
operator|new
name|KeyStoreParameters
argument_list|()
decl_stmt|;
name|truststoreParameters2
operator|.
name|setResource
argument_list|(
literal|"truststore2.jks"
argument_list|)
expr_stmt|;
name|truststoreParameters2
operator|.
name|setPassword
argument_list|(
literal|"storepass"
argument_list|)
expr_stmt|;
name|TrustedRpkStore
name|trustedRpkStore
init|=
name|id
lambda|->
block|{
return|return
literal|true
return|;
block|}
decl_stmt|;
name|TrustedRpkStore
name|failedTrustedRpkStore
init|=
name|id
lambda|->
block|{
return|return
literal|false
return|;
block|}
decl_stmt|;
name|KeyGenerator
name|keyGenerator
init|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
literal|"AES"
argument_list|)
decl_stmt|;
name|PskStore
name|pskStore
init|=
operator|new
name|StaticPskStore
argument_list|(
literal|"some-identity"
argument_list|,
name|keyGenerator
operator|.
name|generateKey
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"keyParams"
argument_list|,
name|keystoreParameters
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"keyParams2"
argument_list|,
name|keystoreParameters2
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"keyParams3"
argument_list|,
name|keystoreParameters3
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"trustParams"
argument_list|,
name|truststoreParameters
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"trustParams2"
argument_list|,
name|truststoreParameters2
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"privateKey"
argument_list|,
name|privateKey
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"publicKey"
argument_list|,
name|publicKey
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"trustedRpkStore"
argument_list|,
name|trustedRpkStore
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"failedTrustedRpkStore"
argument_list|,
name|failedTrustedRpkStore
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|bind
argument_list|(
literal|"pskStore"
argument_list|,
name|pskStore
argument_list|)
expr_stmt|;
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|fromF
argument_list|(
literal|"coaps://localhost:%d/TestResource?alias=service&password=security&"
operator|+
literal|"keyStoreParameters=#keyParams"
argument_list|,
name|PORT
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Hello "
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coaps://localhost:%d/TestResource?alias=selfsigned&password=security&"
operator|+
literal|"keyStoreParameters=#keyParams2"
argument_list|,
name|PORT2
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Hello "
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coaps://localhost:%d/TestResource?alias=service&password=security&"
operator|+
literal|"trustStoreParameters=#trustParams&"
operator|+
literal|"keyStoreParameters=#keyParams&clientAuthentication=REQUIRE"
argument_list|,
name|PORT3
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Hello "
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coaps://localhost:%d/TestResource?alias=service&password=security&"
operator|+
literal|"keyStoreParameters=#keyParams&cipherSuites=TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8"
argument_list|,
name|PORT4
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Hello "
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coaps://localhost:%d/TestResource?alias=service&password=security&"
operator|+
literal|"privateKey=#privateKey&publicKey=#publicKey"
argument_list|,
name|PORT5
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Hello "
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coaps://localhost:%d/TestResource?alias=service&password=security&"
operator|+
literal|"privateKey=#privateKey&publicKey=#publicKey&clientAuthentication=REQUIRE&"
operator|+
literal|"trustedRpkStore=#trustedRpkStore"
argument_list|,
name|PORT6
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Hello "
argument_list|)
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"coaps://localhost:%d/TestResource?alias=service&password=security&"
operator|+
literal|"pskStore=#pskStore"
argument_list|,
name|PORT7
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"Hello "
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustStoreParameters=#trustParams"
argument_list|,
name|PORT
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:notruststore"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource"
argument_list|,
name|PORT
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:failedtrust"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustStoreParameters=#trustParams2"
argument_list|,
name|PORT
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:selfsigned"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustStoreParameters=#keyParams2"
argument_list|,
name|PORT2
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:clientauth"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustStoreParameters=#trustParams&"
operator|+
literal|"keyStoreParameters=#keyParams3&alias=client&password=security"
argument_list|,
name|PORT3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:failedclientauth"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustStoreParameters=#trustParams&"
operator|+
literal|"keyStoreParameters=#keyParams2&alias=selfsigned&password=security"
argument_list|,
name|PORT3
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:ciphersuites"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustStoreParameters=#trustParams&"
operator|+
literal|"cipherSuites=TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8"
argument_list|,
name|PORT4
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:rpk"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustedRpkStore=#trustedRpkStore"
argument_list|,
name|PORT5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:rpknotruststore"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource"
argument_list|,
name|PORT5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:rpkfailedtrust"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustedRpkStore=#failedTrustedRpkStore"
argument_list|,
name|PORT5
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:rpkclientauth"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?trustedRpkStore=#trustedRpkStore&"
operator|+
literal|"privateKey=#privateKey&publicKey=#publicKey"
argument_list|,
name|PORT6
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:psk"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?pskStore=#pskStore"
argument_list|,
name|PORT7
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:pskciphersuite"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"coaps://localhost:%d/TestResource?pskStore=#pskStore&"
operator|+
literal|"cipherSuites=TLS_PSK_WITH_AES_128_CBC_SHA256"
argument_list|,
name|PORT7
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|sendBodyAndHeader (String endpointUri, final Object body, String headerName, String headerValue)
specifier|protected
name|void
name|sendBodyAndHeader
parameter_list|(
name|String
name|endpointUri
parameter_list|,
specifier|final
name|Object
name|body
parameter_list|,
name|String
name|headerName
parameter_list|,
name|String
name|headerValue
parameter_list|)
block|{
name|template
operator|.
name|send
argument_list|(
name|endpointUri
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

