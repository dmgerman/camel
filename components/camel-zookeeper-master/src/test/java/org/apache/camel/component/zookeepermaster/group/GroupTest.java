begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster.group
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
operator|.
name|ChildData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
operator|.
name|ZooKeeperGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryNTimes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|NIOServerCnxnFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ServerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|persistence
operator|.
name|FileTxnSnapLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|GroupTest
specifier|public
class|class
name|GroupTest
block|{
DECL|field|listener
specifier|private
name|GroupListener
name|listener
init|=
operator|new
name|GroupListener
argument_list|<
name|NodeState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|groupEvent
parameter_list|(
name|Group
argument_list|<
name|NodeState
argument_list|>
name|group
parameter_list|,
name|GroupListener
operator|.
name|GroupEvent
name|event
parameter_list|)
block|{
name|boolean
name|connected
init|=
name|group
operator|.
name|isConnected
argument_list|()
decl_stmt|;
name|boolean
name|master
init|=
name|group
operator|.
name|isMaster
argument_list|()
decl_stmt|;
if|if
condition|(
name|connected
condition|)
block|{
name|Collection
argument_list|<
name|NodeState
argument_list|>
name|members
init|=
name|group
operator|.
name|members
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"GroupEvent: "
operator|+
name|event
operator|+
literal|" (connected="
operator|+
name|connected
operator|+
literal|", master="
operator|+
name|master
operator|+
literal|", members="
operator|+
name|members
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"GroupEvent: "
operator|+
name|event
operator|+
literal|" (connected="
operator|+
name|connected
operator|+
literal|", master=false)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
DECL|method|startZooKeeper (int port)
specifier|private
name|NIOServerCnxnFactory
name|startZooKeeper
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|ServerConfig
name|cfg
init|=
operator|new
name|ServerConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|parse
argument_list|(
operator|new
name|String
index|[]
block|{
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
block|,
literal|"target/zk/data"
block|}
argument_list|)
expr_stmt|;
name|ZooKeeperServer
name|zkServer
init|=
operator|new
name|ZooKeeperServer
argument_list|()
decl_stmt|;
name|FileTxnSnapLog
name|ftxn
init|=
operator|new
name|FileTxnSnapLog
argument_list|(
operator|new
name|File
argument_list|(
name|cfg
operator|.
name|getDataLogDir
argument_list|()
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|cfg
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|zkServer
operator|.
name|setTxnLogFactory
argument_list|(
name|ftxn
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|setTickTime
argument_list|(
name|cfg
operator|.
name|getTickTime
argument_list|()
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|setMinSessionTimeout
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|setMaxSessionTimeout
argument_list|(
literal|9000
argument_list|)
expr_stmt|;
name|NIOServerCnxnFactory
name|cnxnFactory
init|=
operator|new
name|NIOServerCnxnFactory
argument_list|()
decl_stmt|;
name|cnxnFactory
operator|.
name|configure
argument_list|(
name|cfg
operator|.
name|getClientPortAddress
argument_list|()
argument_list|,
name|cfg
operator|.
name|getMaxClientCnxns
argument_list|()
argument_list|)
expr_stmt|;
name|cnxnFactory
operator|.
name|startup
argument_list|(
name|zkServer
argument_list|)
expr_stmt|;
return|return
name|cnxnFactory
return|;
block|}
annotation|@
name|Test
DECL|method|testOrder ()
specifier|public
name|void
name|testOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|CuratorFramework
name|curator
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|path
init|=
literal|"/singletons/test/Order"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ZooKeeperGroup
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|ZooKeeperGroup
argument_list|<
name|NodeState
argument_list|>
name|group
init|=
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|curator
argument_list|,
name|path
argument_list|,
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ZooKeeperGroup
name|group
range|:
name|members
control|)
block|{
name|assertFalse
argument_list|(
name|group
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NIOServerCnxnFactory
name|cnxnFactory
init|=
name|startZooKeeper
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
comment|// first to start should be master if members are ordered...
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ZooKeeperGroup
name|group
range|:
name|members
control|)
block|{
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
name|group
operator|.
name|update
argument_list|(
operator|new
name|NodeState
argument_list|(
literal|"foo"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
comment|// wait for registration
while|while
condition|(
name|group
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|firsStartedIsMaster
init|=
name|members
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isMaster
argument_list|()
decl_stmt|;
for|for
control|(
name|ZooKeeperGroup
name|group
range|:
name|members
control|)
block|{
name|group
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"first started is master"
argument_list|,
name|firsStartedIsMaster
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJoinAfterConnect ()
specifier|public
name|void
name|testJoinAfterConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|CuratorFramework
name|curator
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Group
argument_list|<
name|NodeState
argument_list|>
name|group
init|=
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|curator
argument_list|,
literal|"/singletons/test"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|)
expr_stmt|;
name|GroupCondition
name|groupCondition
init|=
operator|new
name|GroupCondition
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|groupCondition
argument_list|)
expr_stmt|;
name|NIOServerCnxnFactory
name|cnxnFactory
init|=
name|startZooKeeper
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForConnected
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|update
argument_list|(
operator|new
name|NodeState
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForMaster
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|close
argument_list|()
expr_stmt|;
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJoinBeforeConnect ()
specifier|public
name|void
name|testJoinBeforeConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|CuratorFramework
name|curator
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
name|Group
argument_list|<
name|NodeState
argument_list|>
name|group
init|=
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|curator
argument_list|,
literal|"/singletons/test"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupCondition
name|groupCondition
init|=
operator|new
name|GroupCondition
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|groupCondition
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|update
argument_list|(
operator|new
name|NodeState
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|NIOServerCnxnFactory
name|cnxnFactory
init|=
name|startZooKeeper
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForConnected
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForMaster
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|close
argument_list|()
expr_stmt|;
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRejoinAfterDisconnect ()
specifier|public
name|void
name|testRejoinAfterDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|CuratorFramework
name|curator
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
name|NIOServerCnxnFactory
name|cnxnFactory
init|=
name|startZooKeeper
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|Group
argument_list|<
name|NodeState
argument_list|>
name|group
init|=
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|curator
argument_list|,
literal|"/singletons/test"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|group
operator|.
name|update
argument_list|(
operator|new
name|NodeState
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupCondition
name|groupCondition
init|=
operator|new
name|GroupCondition
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|groupCondition
argument_list|)
expr_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForConnected
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForMaster
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|cnxnFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|join
argument_list|()
expr_stmt|;
name|groupCondition
operator|.
name|waitForDisconnected
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|group
operator|.
name|remove
argument_list|(
name|groupCondition
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|)
expr_stmt|;
name|groupCondition
operator|=
operator|new
name|GroupCondition
argument_list|()
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
name|groupCondition
argument_list|)
expr_stmt|;
name|cnxnFactory
operator|=
name|startZooKeeper
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForConnected
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForMaster
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|close
argument_list|()
expr_stmt|;
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|//Tests that if close() is executed right after start(), there are no left over entries.
comment|//(see  https://github.com/jboss-fuse/fuse/issues/133)
annotation|@
name|Test
DECL|method|testGroupClose ()
specifier|public
name|void
name|testGroupClose
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|NIOServerCnxnFactory
name|cnxnFactory
init|=
name|startZooKeeper
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|CuratorFrameworkFactory
operator|.
name|Builder
name|builder
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|connectionTimeoutMs
argument_list|(
literal|6000
argument_list|)
operator|.
name|sessionTimeoutMs
argument_list|(
literal|6000
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|CuratorFramework
name|curator
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
name|String
name|groupNode
init|=
literal|"/singletons/test"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|curator
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
name|groupNode
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|ZooKeeperGroup
argument_list|<
name|NodeState
argument_list|>
name|group
init|=
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|curator
argument_list|,
name|groupNode
argument_list|,
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|group
operator|.
name|update
argument_list|(
operator|new
name|NodeState
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
name|group
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|entries
init|=
name|curator
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|groupNode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|isEmpty
argument_list|()
operator|||
name|group
operator|.
name|isUnstable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|isUnstable
argument_list|()
condition|)
block|{
comment|// let's wait for session timeout
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|curator
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
block|}
block|}
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddFieldIgnoredOnParse ()
specifier|public
name|void
name|testAddFieldIgnoredOnParse
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
name|NIOServerCnxnFactory
name|cnxnFactory
init|=
name|startZooKeeper
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|CuratorFramework
name|curator
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
name|String
name|groupNode
init|=
literal|"/singletons/test"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|curator
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|forPath
argument_list|(
name|groupNode
argument_list|)
expr_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|blockUntilConnectedOrTimedOut
argument_list|()
expr_stmt|;
specifier|final
name|ZooKeeperGroup
argument_list|<
name|NodeState
argument_list|>
name|group
init|=
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|curator
argument_list|,
name|groupNode
argument_list|,
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupCondition
name|groupCondition
init|=
operator|new
name|GroupCondition
argument_list|()
decl_stmt|;
name|group
operator|.
name|add
argument_list|(
name|groupCondition
argument_list|)
expr_stmt|;
name|group
operator|.
name|update
argument_list|(
operator|new
name|NodeState
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForConnected
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|groupCondition
operator|.
name|waitForMaster
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|ChildData
name|currentData
init|=
name|group
operator|.
name|getCurrentData
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|version
init|=
name|currentData
operator|.
name|getStat
argument_list|()
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|NodeState
name|lastState
init|=
name|group
operator|.
name|getLastState
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|lastState
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"JSON:"
operator|+
name|json
argument_list|)
expr_stmt|;
name|String
name|newValWithNewField
init|=
name|json
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|json
operator|.
name|lastIndexOf
argument_list|(
literal|'}'
argument_list|)
argument_list|)
operator|+
literal|",\"Rubbish\":\"Rubbish\"}"
decl_stmt|;
name|curator
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|setData
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|newValWithNewField
operator|.
name|getBytes
argument_list|()
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|attempts
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|attempts
operator|++
operator|<
literal|5
operator|&&
name|version
operator|==
name|group
operator|.
name|getCurrentData
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStat
argument_list|()
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertNotEquals
argument_list|(
literal|"We see the updated version"
argument_list|,
name|version
argument_list|,
name|group
operator|.
name|getCurrentData
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStat
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"CurrentData:"
operator|+
name|group
operator|.
name|getCurrentData
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|close
argument_list|()
expr_stmt|;
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cnxnFactory
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|class|GroupCondition
specifier|private
class|class
name|GroupCondition
implements|implements
name|GroupListener
argument_list|<
name|NodeState
argument_list|>
block|{
DECL|field|connected
specifier|private
name|CountDownLatch
name|connected
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|master
specifier|private
name|CountDownLatch
name|master
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|disconnected
specifier|private
name|CountDownLatch
name|disconnected
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|groupEvent (Group<NodeState> group, GroupEvent event)
specifier|public
name|void
name|groupEvent
parameter_list|(
name|Group
argument_list|<
name|NodeState
argument_list|>
name|group
parameter_list|,
name|GroupEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|CONNECTED
case|:
case|case
name|CHANGED
case|:
name|connected
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|isMaster
argument_list|()
condition|)
block|{
name|master
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DISCONNECTED
case|:
name|disconnected
operator|.
name|countDown
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|// noop
block|}
block|}
DECL|method|waitForConnected (long time, TimeUnit timeUnit)
specifier|public
name|boolean
name|waitForConnected
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|connected
operator|.
name|await
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
DECL|method|waitForDisconnected (long time, TimeUnit timeUnit)
specifier|public
name|boolean
name|waitForDisconnected
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|disconnected
operator|.
name|await
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
DECL|method|waitForMaster (long time, TimeUnit timeUnit)
specifier|public
name|boolean
name|waitForMaster
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|master
operator|.
name|await
argument_list|(
name|time
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

