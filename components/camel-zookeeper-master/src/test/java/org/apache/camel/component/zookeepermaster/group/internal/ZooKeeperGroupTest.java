begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster.group.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryOneTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|ZooKeeperGroupTest
specifier|public
class|class
name|ZooKeeperGroupTest
block|{
DECL|field|PATH
specifier|private
specifier|static
specifier|final
name|String
name|PATH
init|=
literal|"/singletons/test/"
operator|+
name|ZooKeeperGroupTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
DECL|field|curator
specifier|private
name|CuratorFramework
name|curator
decl_stmt|;
DECL|field|group
specifier|private
name|ZooKeeperGroup
argument_list|<
name|NodeState
argument_list|>
name|group
decl_stmt|;
DECL|method|findFreePort ()
specifier|private
name|int
name|findFreePort
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|port
init|=
name|findFreePort
argument_list|()
decl_stmt|;
name|curator
operator|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
literal|"localhost:"
operator|+
name|port
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryOneTime
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
comment|//curator.start();
name|group
operator|=
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|curator
argument_list|,
name|PATH
argument_list|,
name|NodeState
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//group.start();
comment|// Starting curator and group is not necessary for the current tests.
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|group
operator|.
name|close
argument_list|()
expr_stmt|;
name|curator
operator|.
name|close
argument_list|()
expr_stmt|;
name|group
operator|=
literal|null
expr_stmt|;
name|curator
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|putChildData (ZooKeeperGroup<NodeState> group, String path, String container)
specifier|private
specifier|static
name|void
name|putChildData
parameter_list|(
name|ZooKeeperGroup
argument_list|<
name|NodeState
argument_list|>
name|group
parameter_list|,
name|String
name|path
parameter_list|,
name|String
name|container
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeState
name|node
init|=
operator|new
name|NodeState
argument_list|(
literal|"test"
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|data
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|disable
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|)
operator|.
name|writeValue
argument_list|(
name|data
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|ChildData
argument_list|<
name|NodeState
argument_list|>
name|child
init|=
operator|new
name|ChildData
argument_list|<>
argument_list|(
name|path
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
name|data
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|group
operator|.
name|putCurrentData
argument_list|(
name|path
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMembers ()
specifier|public
name|void
name|testMembers
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|members
init|=
name|group
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|get
argument_list|(
name|PATH
operator|+
literal|"/001"
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|get
argument_list|(
name|PATH
operator|+
literal|"/002"
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|get
argument_list|(
name|PATH
operator|+
literal|"/003"
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMembersWithStaleNodes ()
specifier|public
name|void
name|testMembersWithStaleNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/004"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/005"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/006"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|members
init|=
name|group
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|get
argument_list|(
name|PATH
operator|+
literal|"/002"
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|get
argument_list|(
name|PATH
operator|+
literal|"/005"
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|members
operator|.
name|get
argument_list|(
name|PATH
operator|+
literal|"/006"
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsMaster ()
specifier|public
name|void
name|testIsMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|PATH
operator|+
literal|"/001"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|PATH
operator|+
literal|"/002"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsMasterWithStaleNodes1 ()
specifier|public
name|void
name|testIsMasterWithStaleNodes1
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/004"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/005"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/006"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|PATH
operator|+
literal|"/002"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|PATH
operator|+
literal|"/005"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsMasterWithStaleNodes2 ()
specifier|public
name|void
name|testIsMasterWithStaleNodes2
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/004"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/005"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|PATH
operator|+
literal|"/002"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|PATH
operator|+
literal|"/003"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|group
operator|.
name|isMaster
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaster ()
specifier|public
name|void
name|testMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|NodeState
name|master
init|=
name|group
operator|.
name|master
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|master
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|master
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMasterWithStaleNodes1 ()
specifier|public
name|void
name|testMasterWithStaleNodes1
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/004"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/005"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/006"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|NodeState
name|master
init|=
name|group
operator|.
name|master
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|master
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|master
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMasterWithStaleNodes2 ()
specifier|public
name|void
name|testMasterWithStaleNodes2
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/004"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/005"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|NodeState
name|master
init|=
name|group
operator|.
name|master
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|master
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|master
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSlaves ()
specifier|public
name|void
name|testSlaves
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeState
argument_list|>
name|slaves
init|=
name|group
operator|.
name|slaves
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSlavesWithStaleNodes1 ()
specifier|public
name|void
name|testSlavesWithStaleNodes1
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/004"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/005"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/006"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeState
argument_list|>
name|slaves
init|=
name|group
operator|.
name|slaves
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSlavesWithStaleNodes2 ()
specifier|public
name|void
name|testSlavesWithStaleNodes2
parameter_list|()
throws|throws
name|Exception
block|{
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/001"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/002"
argument_list|,
literal|"container2"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/003"
argument_list|,
literal|"container1"
argument_list|)
expr_stmt|;
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/004"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
comment|// stale
name|putChildData
argument_list|(
name|group
argument_list|,
name|PATH
operator|+
literal|"/005"
argument_list|,
literal|"container3"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeState
argument_list|>
name|slaves
init|=
name|group
operator|.
name|slaves
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|slaves
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainer
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"container3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

