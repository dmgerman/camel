begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster.group.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_class
DECL|class|ChildData
specifier|public
class|class
name|ChildData
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Comparable
argument_list|<
name|ChildData
argument_list|>
block|{
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|stat
specifier|private
specifier|final
name|Stat
name|stat
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
DECL|field|node
specifier|private
specifier|final
name|T
name|node
decl_stmt|;
DECL|method|ChildData (String path, Stat stat, byte[] data, T node)
name|ChildData
parameter_list|(
name|String
name|path
parameter_list|,
name|Stat
name|stat
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|T
name|node
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|stat
operator|=
name|stat
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
comment|/**      * @inheritDoc      *      * Note: this class has a natural ordering that is inconsistent with equals.      */
annotation|@
name|Override
DECL|method|compareTo (ChildData rhs)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ChildData
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|rhs
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|rhs
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|rhs
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|path
operator|.
name|compareTo
argument_list|(
name|rhs
operator|.
name|path
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"RedundantIfStatement"
argument_list|)
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ChildData
name|childData
init|=
operator|(
name|ChildData
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|data
argument_list|,
name|childData
operator|.
name|data
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|?
operator|!
name|path
operator|.
name|equals
argument_list|(
name|childData
operator|.
name|path
argument_list|)
else|:
name|childData
operator|.
name|path
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|stat
operator|!=
literal|null
condition|?
operator|!
name|stat
operator|.
name|equals
argument_list|(
name|childData
operator|.
name|stat
argument_list|)
else|:
name|childData
operator|.
name|stat
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|path
operator|!=
literal|null
condition|?
name|path
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|stat
operator|!=
literal|null
condition|?
name|stat
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|data
operator|!=
literal|null
condition|?
name|Arrays
operator|.
name|hashCode
argument_list|(
name|data
argument_list|)
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns the full path of the this child      *      * @return full path      */
DECL|method|getPath ()
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
comment|/**      * Returns the stat data for this child      *      * @return stat or null      */
DECL|method|getStat ()
specifier|public
name|Stat
name|getStat
parameter_list|()
block|{
return|return
name|stat
return|;
block|}
comment|/**      *<p>Returns the node data for this child when the cache mode is set to cache data.</p>      *      *<p><b>NOTE:</b> the byte array returned is the raw reference of this instance's field. If you change      * the values in the array any other callers to this method will see the change.</p>      *      * @return node data or null      */
DECL|method|getData ()
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**      *<p>Returns the node for this group member.</p>      *      * @return the node or null      */
DECL|method|getNode ()
specifier|public
name|T
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ChildData{path='"
operator|+
name|path
operator|+
literal|'\''
operator|+
literal|", stat="
operator|+
name|stat
operator|+
literal|", data="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|data
argument_list|)
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

