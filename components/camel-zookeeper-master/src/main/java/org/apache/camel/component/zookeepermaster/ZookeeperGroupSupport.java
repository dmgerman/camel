begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
operator|.
name|ManagedGroupFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
operator|.
name|ManagedGroupFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|state
operator|.
name|ConnectionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|state
operator|.
name|ConnectionStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryOneTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ZookeeperGroupSupport
specifier|public
class|class
name|ZookeeperGroupSupport
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
implements|,
name|Callable
argument_list|<
name|CuratorFramework
argument_list|>
implements|,
name|ConnectionStateListener
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZookeeperComponentSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZOOKEEPER_URL
specifier|private
specifier|static
specifier|final
name|String
name|ZOOKEEPER_URL
init|=
literal|"zookeeper.url"
decl_stmt|;
DECL|field|ZOOKEEPER_PASSWORD
specifier|private
specifier|static
specifier|final
name|String
name|ZOOKEEPER_PASSWORD
init|=
literal|"zookeeper.password"
decl_stmt|;
DECL|field|ZOOKEEPER_URL_ENV
specifier|private
specifier|static
specifier|final
name|String
name|ZOOKEEPER_URL_ENV
init|=
literal|"ZOOKEEPER_URL"
decl_stmt|;
DECL|field|ZOOKEEPER_HOST_ENV
specifier|private
specifier|static
specifier|final
name|String
name|ZOOKEEPER_HOST_ENV
init|=
literal|"ZK_CLIENT_SERVICE_HOST"
decl_stmt|;
DECL|field|ZOOKEEPER_PORT_ENV
specifier|private
specifier|static
specifier|final
name|String
name|ZOOKEEPER_PORT_ENV
init|=
literal|"ZK_CLIENT_SERVICE_PORT"
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|managedGroupFactory
specifier|private
name|ManagedGroupFactory
name|managedGroupFactory
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|curator
specifier|private
name|CuratorFramework
name|curator
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|maximumConnectionTimeout
specifier|private
name|int
name|maximumConnectionTimeout
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"localhost:2181"
argument_list|)
DECL|field|zooKeeperUrl
specifier|private
name|String
name|zooKeeperUrl
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|zooKeeperPassword
specifier|private
name|String
name|zooKeeperPassword
decl_stmt|;
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getCurator ()
specifier|public
name|CuratorFramework
name|getCurator
parameter_list|()
block|{
if|if
condition|(
name|managedGroupFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Component is not started"
argument_list|)
throw|;
block|}
return|return
name|managedGroupFactory
operator|.
name|getCurator
argument_list|()
return|;
block|}
DECL|method|createGroup (String path)
specifier|public
name|Group
argument_list|<
name|CamelNodeState
argument_list|>
name|createGroup
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|managedGroupFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Component is not started"
argument_list|)
throw|;
block|}
return|return
name|managedGroupFactory
operator|.
name|createGroup
argument_list|(
name|path
argument_list|,
name|CamelNodeState
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * To use a custom configured CuratorFramework as connection to zookeeper ensemble.      */
DECL|method|setCurator (CuratorFramework curator)
specifier|public
name|void
name|setCurator
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|)
block|{
name|this
operator|.
name|curator
operator|=
name|curator
expr_stmt|;
name|registerAsListener
argument_list|()
expr_stmt|;
block|}
DECL|method|getMaximumConnectionTimeout ()
specifier|public
name|int
name|getMaximumConnectionTimeout
parameter_list|()
block|{
return|return
name|maximumConnectionTimeout
return|;
block|}
comment|/**      * Timeout in millis to use when connecting to the zookeeper ensemble      */
DECL|method|setMaximumConnectionTimeout (int maximumConnectionTimeout)
specifier|public
name|void
name|setMaximumConnectionTimeout
parameter_list|(
name|int
name|maximumConnectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|maximumConnectionTimeout
operator|=
name|maximumConnectionTimeout
expr_stmt|;
block|}
DECL|method|getZooKeeperUrl ()
specifier|public
name|String
name|getZooKeeperUrl
parameter_list|()
block|{
return|return
name|zooKeeperUrl
return|;
block|}
comment|/**      * The url for the zookeeper ensemble      */
DECL|method|setZooKeeperUrl (String zooKeeperUrl)
specifier|public
name|void
name|setZooKeeperUrl
parameter_list|(
name|String
name|zooKeeperUrl
parameter_list|)
block|{
name|this
operator|.
name|zooKeeperUrl
operator|=
name|zooKeeperUrl
expr_stmt|;
block|}
DECL|method|getZooKeeperPassword ()
specifier|public
name|String
name|getZooKeeperPassword
parameter_list|()
block|{
return|return
name|zooKeeperPassword
return|;
block|}
comment|/**      * The password to use when connecting to the zookeeper ensemble      */
DECL|method|setZooKeeperPassword (String zooKeeperPassword)
specifier|public
name|void
name|setZooKeeperPassword
parameter_list|(
name|String
name|zooKeeperPassword
parameter_list|)
block|{
name|this
operator|.
name|zooKeeperPassword
operator|=
name|zooKeeperPassword
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
comment|// attempt to lookup curator framework from registry using the name curator
if|if
condition|(
name|curator
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|CuratorFramework
name|aCurator
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
literal|"curator"
argument_list|,
name|CuratorFramework
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|aCurator
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CuratorFramework found in CamelRegistry: {}"
argument_list|,
name|aCurator
argument_list|)
expr_stmt|;
name|setCurator
argument_list|(
name|aCurator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// will auto create curator if needed
name|managedGroupFactory
operator|=
name|ManagedGroupFactoryBuilder
operator|.
name|create
argument_list|(
name|curator
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|call ()
specifier|public
name|CuratorFramework
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|connectString
init|=
name|getZooKeeperUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectString
operator|==
literal|null
condition|)
block|{
name|connectString
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|ZOOKEEPER_URL_ENV
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectString
operator|==
literal|null
condition|)
block|{
name|String
name|zkHost
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ZOOKEEPER_HOST_ENV
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkHost
operator|!=
literal|null
condition|)
block|{
name|String
name|zkPort
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ZOOKEEPER_PORT_ENV
argument_list|)
decl_stmt|;
name|connectString
operator|=
name|zkHost
operator|+
literal|":"
operator|+
operator|(
name|zkPort
operator|==
literal|null
condition|?
literal|"2181"
else|:
name|zkPort
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connectString
operator|==
literal|null
condition|)
block|{
name|connectString
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|ZOOKEEPER_URL
argument_list|,
literal|"localhost:2181"
argument_list|)
expr_stmt|;
block|}
name|String
name|password
init|=
name|getZooKeeperPassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|getProperty
argument_list|(
name|ZOOKEEPER_PASSWORD
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new CuratorFramework with connection: {}"
argument_list|,
name|connectString
argument_list|)
expr_stmt|;
name|CuratorFrameworkFactory
operator|.
name|Builder
name|builder
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|connectString
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryOneTime
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|connectionTimeoutMs
argument_list|(
name|getMaximumConnectionTimeout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
operator|&&
operator|!
name|password
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|authorization
argument_list|(
literal|"digest"
argument_list|,
operator|(
literal|"fabric:"
operator|+
name|password
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|curator
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting CuratorFramework {}"
argument_list|,
name|curator
argument_list|)
expr_stmt|;
name|curator
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curator
return|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|managedGroupFactory
operator|!=
literal|null
condition|)
block|{
name|managedGroupFactory
operator|.
name|close
argument_list|()
expr_stmt|;
name|managedGroupFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stateChanged (CuratorFramework client, ConnectionState newState)
specifier|public
name|void
name|stateChanged
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|ConnectionState
name|newState
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CuratorFramework state changed: {}"
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
DECL|method|registerAsListener ()
specifier|protected
name|void
name|registerAsListener
parameter_list|()
block|{
if|if
condition|(
name|curator
operator|!=
literal|null
condition|)
block|{
name|curator
operator|.
name|getConnectionStateListenable
argument_list|()
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

