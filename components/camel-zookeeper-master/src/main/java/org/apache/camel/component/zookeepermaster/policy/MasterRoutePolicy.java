begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|CamelNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|ContainerIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|DefaultContainerIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|ZookeeperGroupListenerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|RoutePolicySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_comment
comment|/**  * {@link org.apache.camel.spi.RoutePolicy} to run the route in master/slave mode.  *<p/>  *<b>Important:</b> Make sure to set the route to autoStartup=false as the route lifecycle  * is controlled by this route policy which will start/stop the route accordingly to being  * the master in the zookeeper cluster group.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed MasterRoutePolicy"
argument_list|)
DECL|class|MasterRoutePolicy
specifier|public
class|class
name|MasterRoutePolicy
extends|extends
name|RoutePolicySupport
implements|implements
name|CamelContextAware
block|{
DECL|field|curator
specifier|private
name|CuratorFramework
name|curator
decl_stmt|;
DECL|field|maximumConnectionTimeout
specifier|private
name|int
name|maximumConnectionTimeout
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
DECL|field|zooKeeperUrl
specifier|private
name|String
name|zooKeeperUrl
decl_stmt|;
DECL|field|zooKeeperPassword
specifier|private
name|String
name|zooKeeperPassword
decl_stmt|;
DECL|field|zkRoot
specifier|private
name|String
name|zkRoot
init|=
literal|"/camel/zookeepermaster/clusters/master"
decl_stmt|;
DECL|field|groupName
specifier|private
name|String
name|groupName
decl_stmt|;
DECL|field|containerIdFactory
specifier|private
name|ContainerIdFactory
name|containerIdFactory
init|=
operator|new
name|DefaultContainerIdFactory
argument_list|()
decl_stmt|;
comment|// state if the consumer has been started
DECL|field|masterConsumer
specifier|private
specifier|final
name|AtomicBoolean
name|masterConsumer
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|groupListener
specifier|private
name|ZookeeperGroupListenerSupport
name|groupListener
decl_stmt|;
DECL|field|thisNodeState
specifier|private
specifier|volatile
name|CamelNodeState
name|thisNodeState
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|route
specifier|private
name|Route
name|route
decl_stmt|;
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getZkRoot ()
specifier|public
name|String
name|getZkRoot
parameter_list|()
block|{
return|return
name|zkRoot
return|;
block|}
comment|/**      * The root path to use in zookeeper where information is stored which nodes are master/slave etc.      * Will by default use: /camel/zookeepermaster/clusters/master      */
DECL|method|setZkRoot (String zkRoot)
specifier|public
name|void
name|setZkRoot
parameter_list|(
name|String
name|zkRoot
parameter_list|)
block|{
name|this
operator|.
name|zkRoot
operator|=
name|zkRoot
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The name of the cluster group to use"
argument_list|)
DECL|method|getGroupName ()
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|groupName
return|;
block|}
comment|/**      * The name of the cluster group to use      */
DECL|method|setGroupName (String groupName)
specifier|public
name|void
name|setGroupName
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
block|}
DECL|method|getContainerIdFactory ()
specifier|public
name|ContainerIdFactory
name|getContainerIdFactory
parameter_list|()
block|{
return|return
name|containerIdFactory
return|;
block|}
comment|/**      * To use a custom ContainerIdFactory for creating container ids.      */
DECL|method|setContainerIdFactory (ContainerIdFactory containerIdFactory)
specifier|public
name|void
name|setContainerIdFactory
parameter_list|(
name|ContainerIdFactory
name|containerIdFactory
parameter_list|)
block|{
name|this
operator|.
name|containerIdFactory
operator|=
name|containerIdFactory
expr_stmt|;
block|}
DECL|method|getCurator ()
specifier|public
name|CuratorFramework
name|getCurator
parameter_list|()
block|{
return|return
name|curator
return|;
block|}
comment|/**      * To use a custom configured CuratorFramework as connection to zookeeper ensemble.      */
DECL|method|setCurator (CuratorFramework curator)
specifier|public
name|void
name|setCurator
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|)
block|{
name|this
operator|.
name|curator
operator|=
name|curator
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Timeout in millis to use when connecting to the zookeeper ensemble"
argument_list|)
DECL|method|getMaximumConnectionTimeout ()
specifier|public
name|int
name|getMaximumConnectionTimeout
parameter_list|()
block|{
return|return
name|maximumConnectionTimeout
return|;
block|}
comment|/**      * Timeout in millis to use when connecting to the zookeeper ensemble      */
DECL|method|setMaximumConnectionTimeout (int maximumConnectionTimeout)
specifier|public
name|void
name|setMaximumConnectionTimeout
parameter_list|(
name|int
name|maximumConnectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|maximumConnectionTimeout
operator|=
name|maximumConnectionTimeout
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The url for the zookeeper ensemble"
argument_list|)
DECL|method|getZooKeeperUrl ()
specifier|public
name|String
name|getZooKeeperUrl
parameter_list|()
block|{
return|return
name|zooKeeperUrl
return|;
block|}
comment|/**      * The url for the zookeeper ensemble      */
DECL|method|setZooKeeperUrl (String zooKeeperUrl)
specifier|public
name|void
name|setZooKeeperUrl
parameter_list|(
name|String
name|zooKeeperUrl
parameter_list|)
block|{
name|this
operator|.
name|zooKeeperUrl
operator|=
name|zooKeeperUrl
expr_stmt|;
block|}
DECL|method|getZooKeeperPassword ()
specifier|public
name|String
name|getZooKeeperPassword
parameter_list|()
block|{
return|return
name|zooKeeperPassword
return|;
block|}
comment|/**      * The password to use when connecting to the zookeeper ensemble      */
DECL|method|setZooKeeperPassword (String zooKeeperPassword)
specifier|public
name|void
name|setZooKeeperPassword
parameter_list|(
name|String
name|zooKeeperPassword
parameter_list|)
block|{
name|this
operator|.
name|zooKeeperPassword
operator|=
name|zooKeeperPassword
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Are we connected to ZooKeeper"
argument_list|)
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
if|if
condition|(
name|groupListener
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|isConnected
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Are we the master"
argument_list|)
DECL|method|isMaster ()
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
if|if
condition|(
name|groupListener
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|isMaster
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Information about all the slaves"
argument_list|)
DECL|method|slaves ()
specifier|public
name|String
name|slaves
parameter_list|()
block|{
if|if
condition|(
name|groupListener
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|enable
argument_list|(
name|SerializationFeature
operator|.
name|INDENT_OUTPUT
argument_list|)
operator|.
name|disable
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|)
operator|.
name|writeValueAsString
argument_list|(
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|slaves
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Information about the last event in the cluster group"
argument_list|)
DECL|method|lastEvent ()
specifier|public
name|String
name|lastEvent
parameter_list|()
block|{
if|if
condition|(
name|groupListener
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|event
init|=
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|getLastState
argument_list|()
decl_stmt|;
return|return
name|event
operator|!=
literal|null
condition|?
name|event
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Information about this node"
argument_list|)
DECL|method|thisNode ()
specifier|public
name|String
name|thisNode
parameter_list|()
block|{
return|return
name|thisNodeState
operator|!=
literal|null
condition|?
name|thisNodeState
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|onInit (Route route)
specifier|public
name|void
name|onInit
parameter_list|(
name|Route
name|route
parameter_list|)
block|{
name|super
operator|.
name|onInit
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|this
operator|.
name|route
operator|=
name|route
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"CamelContext"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
literal|"groupName"
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|getCamelClusterPath
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|this
operator|.
name|groupListener
operator|=
operator|new
name|ZookeeperGroupListenerSupport
argument_list|(
name|path
argument_list|,
name|route
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|onLockOwned
argument_list|()
argument_list|,
name|onDisconnected
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setCurator
argument_list|(
name|curator
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setMaximumConnectionTimeout
argument_list|(
name|maximumConnectionTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setZooKeeperUrl
argument_list|(
name|zooKeeperUrl
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setZooKeeperPassword
argument_list|(
name|zooKeeperPassword
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|groupListener
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Attempting to become master for endpoint: "
operator|+
name|route
operator|.
name|getEndpoint
argument_list|()
operator|+
literal|" in "
operator|+
name|getCamelContext
argument_list|()
operator|+
literal|" with singletonID: "
operator|+
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|thisNodeState
operator|=
name|createNodeState
argument_list|()
expr_stmt|;
name|groupListener
operator|.
name|updateState
argument_list|(
name|thisNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|groupListener
argument_list|)
expr_stmt|;
name|masterConsumer
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|onLockOwned ()
specifier|protected
name|Runnable
name|onLockOwned
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|masterConsumer
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
comment|// ensure endpoint is also started
name|log
operator|.
name|info
argument_list|(
literal|"Elected as master. Starting consumer: {}"
argument_list|,
name|route
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|startConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Lets show we are starting the consumer.
name|thisNodeState
operator|=
name|createNodeState
argument_list|()
expr_stmt|;
name|thisNodeState
operator|.
name|setStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupListener
operator|.
name|updateState
argument_list|(
name|thisNodeState
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to start master consumer for: {}"
argument_list|,
name|route
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Elected as master. Consumer started: {}"
argument_list|,
name|route
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|onDisconnected ()
specifier|protected
name|Runnable
name|onDisconnected
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
block|{
name|masterConsumer
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|stopConsumer
argument_list|(
name|route
operator|.
name|getConsumer
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to stop master consumer: {}"
argument_list|,
name|route
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getCamelClusterPath (String name)
specifier|protected
name|String
name|getCamelClusterPath
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|path
init|=
name|name
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|zkRoot
argument_list|)
condition|)
block|{
name|path
operator|=
name|zkRoot
operator|+
literal|"/"
operator|+
name|name
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|method|createNodeState ()
specifier|private
name|CamelNodeState
name|createNodeState
parameter_list|()
block|{
name|String
name|containerId
init|=
name|getContainerIdFactory
argument_list|()
operator|.
name|newContainerId
argument_list|()
decl_stmt|;
name|CamelNodeState
name|state
init|=
operator|new
name|CamelNodeState
argument_list|(
name|getGroupName
argument_list|()
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|state
operator|.
name|setConsumer
argument_list|(
name|route
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
block|}
end_class

end_unit

