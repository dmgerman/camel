begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|SuspendableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A consumer which is only really active while it holds the master lock  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed ZooKeeper Master Consumer"
argument_list|)
DECL|class|MasterConsumer
specifier|public
class|class
name|MasterConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|groupListener
specifier|private
name|ZookeeperGroupListenerSupport
name|groupListener
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|MasterEndpoint
name|endpoint
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|Processor
name|processor
decl_stmt|;
DECL|field|delegate
specifier|private
name|Consumer
name|delegate
decl_stmt|;
DECL|field|delegateService
specifier|private
name|SuspendableService
name|delegateService
decl_stmt|;
DECL|field|thisNodeState
specifier|private
specifier|volatile
name|CamelNodeState
name|thisNodeState
decl_stmt|;
DECL|method|MasterConsumer (MasterEndpoint endpoint, Processor processor)
specifier|public
name|MasterConsumer
parameter_list|(
name|MasterEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|processor
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Are we connected to ZooKeeper"
argument_list|)
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|isConnected
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Are we the master"
argument_list|)
DECL|method|isMaster ()
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
return|return
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|isMaster
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Information about all the slaves"
argument_list|)
DECL|method|slaves ()
specifier|public
name|String
name|slaves
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|enable
argument_list|(
name|SerializationFeature
operator|.
name|INDENT_OUTPUT
argument_list|)
operator|.
name|disable
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|)
operator|.
name|writeValueAsString
argument_list|(
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|slaves
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Information about the last event in the cluster group"
argument_list|)
DECL|method|lastEvent ()
specifier|public
name|String
name|lastEvent
parameter_list|()
block|{
name|Object
name|event
init|=
name|groupListener
operator|.
name|getGroup
argument_list|()
operator|.
name|getLastState
argument_list|()
decl_stmt|;
return|return
name|event
operator|!=
literal|null
condition|?
name|event
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Information about this node"
argument_list|)
DECL|method|thisNode ()
specifier|public
name|String
name|thisNode
parameter_list|()
block|{
return|return
name|thisNodeState
operator|!=
literal|null
condition|?
name|thisNodeState
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getCamelClusterPath
argument_list|(
name|endpoint
operator|.
name|getGroupName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|groupListener
operator|=
operator|new
name|ZookeeperGroupListenerSupport
argument_list|(
name|path
argument_list|,
name|endpoint
argument_list|,
name|onLockOwned
argument_list|()
argument_list|,
name|onDisconnected
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setCamelContext
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setZooKeeperUrl
argument_list|(
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getZooKeeperUrl
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setZooKeeperPassword
argument_list|(
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getZooKeeperPassword
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setCurator
argument_list|(
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getCurator
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupListener
operator|.
name|setMaximumConnectionTimeout
argument_list|(
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getMaximumConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|groupListener
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempting to become master for endpoint: "
operator|+
name|endpoint
operator|+
literal|" in "
operator|+
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|+
literal|" with singletonID: "
operator|+
name|endpoint
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|thisNodeState
operator|=
name|createNodeState
argument_list|()
expr_stmt|;
name|groupListener
operator|.
name|updateState
argument_list|(
name|thisNodeState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|stopConsumer
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|groupListener
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|createNodeState ()
specifier|private
name|CamelNodeState
name|createNodeState
parameter_list|()
block|{
name|String
name|containerId
init|=
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getContainerIdFactory
argument_list|()
operator|.
name|newContainerId
argument_list|()
decl_stmt|;
name|CamelNodeState
name|state
init|=
operator|new
name|CamelNodeState
argument_list|(
name|endpoint
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|state
operator|.
name|setConsumer
argument_list|(
name|endpoint
operator|.
name|getConsumerEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|state
return|;
block|}
DECL|method|stopConsumer ()
specifier|private
name|void
name|stopConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|endpoint
operator|.
name|getConsumerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|=
literal|null
expr_stmt|;
name|delegateService
operator|=
literal|null
expr_stmt|;
name|thisNodeState
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|delegateService
operator|!=
literal|null
condition|)
block|{
name|delegateService
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doResume
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|delegateService
operator|!=
literal|null
condition|)
block|{
name|delegateService
operator|.
name|suspend
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doSuspend
argument_list|()
expr_stmt|;
block|}
DECL|method|onLockOwned ()
specifier|protected
name|Runnable
name|onLockOwned
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|delegate
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// ensure endpoint is also started
name|LOG
operator|.
name|info
argument_list|(
literal|"Elected as master. Starting consumer: {}"
argument_list|,
name|endpoint
operator|.
name|getConsumerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|endpoint
operator|.
name|getConsumerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|delegate
operator|=
name|endpoint
operator|.
name|getConsumerEndpoint
argument_list|()
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|delegateService
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|delegate
operator|instanceof
name|SuspendableService
condition|)
block|{
name|delegateService
operator|=
operator|(
name|SuspendableService
operator|)
name|delegate
expr_stmt|;
block|}
comment|// Lets show we are starting the consumer.
name|thisNodeState
operator|=
name|createNodeState
argument_list|()
expr_stmt|;
name|thisNodeState
operator|.
name|setStarted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|groupListener
operator|.
name|updateState
argument_list|(
name|thisNodeState
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start master consumer for: {}"
argument_list|,
name|endpoint
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Elected as master. Consumer started: {}"
argument_list|,
name|endpoint
operator|.
name|getConsumerEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|onDisconnected ()
specifier|protected
name|Runnable
name|onDisconnected
parameter_list|()
block|{
return|return
parameter_list|()
lambda|->
block|{
try|try
block|{
name|stopConsumer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to stop master consumer for: {}"
argument_list|,
name|endpoint
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

