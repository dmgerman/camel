begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster.group.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|MultiGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ZooKeeperMultiGroup
specifier|public
class|class
name|ZooKeeperMultiGroup
parameter_list|<
name|T
extends|extends
name|NodeState
parameter_list|>
extends|extends
name|ZooKeeperGroup
argument_list|<
name|T
argument_list|>
implements|implements
name|MultiGroup
argument_list|<
name|T
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|ZooKeeperMultiGroup (CuratorFramework client, String path, Class<T> clazz)
specifier|public
name|ZooKeeperMultiGroup
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|ZooKeeperMultiGroup (CuratorFramework client, String path, Class<T> clazz, ExecutorService executorService)
specifier|public
name|ZooKeeperMultiGroup
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|clazz
argument_list|,
name|executorService
argument_list|)
expr_stmt|;
block|}
DECL|method|ZooKeeperMultiGroup (CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory)
specifier|public
name|ZooKeeperMultiGroup
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|clazz
argument_list|,
name|threadFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isMaster (String name)
specifier|public
name|boolean
name|isMaster
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|children
init|=
name|getActiveChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|getSequenceComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildData
name|child
range|:
name|children
control|)
block|{
name|NodeState
name|node
init|=
operator|(
name|NodeState
operator|)
name|child
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|id
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|child
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

