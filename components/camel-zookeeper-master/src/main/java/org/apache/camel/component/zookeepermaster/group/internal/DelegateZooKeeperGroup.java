begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster.group.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|GroupListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|CloseableUtils
operator|.
name|closeQuietly
import|;
end_import

begin_class
DECL|class|DelegateZooKeeperGroup
specifier|public
class|class
name|DelegateZooKeeperGroup
parameter_list|<
name|T
extends|extends
name|NodeState
parameter_list|>
implements|implements
name|Group
argument_list|<
name|T
argument_list|>
block|{
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
decl_stmt|;
DECL|field|listeners
specifier|private
specifier|final
name|List
argument_list|<
name|GroupListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|listeners
decl_stmt|;
DECL|field|group
specifier|private
name|Group
argument_list|<
name|T
argument_list|>
name|group
decl_stmt|;
DECL|field|state
specifier|private
name|T
name|state
decl_stmt|;
DECL|field|started
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|DelegateZooKeeperGroup (String path, Class<T> clazz)
specifier|public
name|DelegateZooKeeperGroup
parameter_list|(
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
DECL|method|useCurator (CuratorFramework curator)
specifier|public
name|void
name|useCurator
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|)
block|{
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|closeQuietly
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curator
operator|!=
literal|null
condition|)
block|{
name|group
operator|=
name|createGroup
argument_list|(
name|curator
argument_list|,
name|path
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|group
operator|.
name|update
argument_list|(
name|state
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|listeners
control|)
block|{
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
block|}
DECL|method|createGroup (CuratorFramework client, String path, Class<T> clazz)
specifier|protected
name|Group
argument_list|<
name|T
argument_list|>
name|createGroup
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|ZooKeeperGroup
argument_list|<>
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|add (GroupListener<T> listener)
specifier|public
name|void
name|add
parameter_list|(
name|GroupListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove (GroupListener<T> listener)
specifier|public
name|void
name|remove
parameter_list|(
name|GroupListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
operator|.
name|isConnected
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|doStart
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|IOException
block|{
name|closeQuietly
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (T state)
specifier|public
name|void
name|update
parameter_list|(
name|T
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|update
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|members ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|members
parameter_list|()
block|{
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
operator|.
name|members
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isMaster ()
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
operator|.
name|isMaster
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|master ()
specifier|public
name|T
name|master
parameter_list|()
block|{
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
operator|.
name|master
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|slaves ()
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|slaves
parameter_list|()
block|{
name|Group
argument_list|<
name|T
argument_list|>
name|group
init|=
name|this
operator|.
name|group
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
operator|.
name|slaves
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
DECL|method|getGroup ()
specifier|public
name|Group
argument_list|<
name|T
argument_list|>
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
annotation|@
name|Override
DECL|method|getLastState ()
specifier|public
name|T
name|getLastState
parameter_list|()
block|{
return|return
name|group
operator|!=
literal|null
condition|?
name|group
operator|.
name|getLastState
argument_list|()
else|:
literal|null
return|;
block|}
block|}
end_class

end_unit

