begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster.group.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|DeserializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|GroupListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|listen
operator|.
name|ListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|state
operator|.
name|ConnectionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|state
operator|.
name|ConnectionStateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|EnsurePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|utils
operator|.
name|ZKPaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<p>A utility that attempts to keep all data from all children of a ZK path locally cached. This class  * will watch the ZK path, respond to update/create/delete events, pull down the data, etc. You can  * register a listener that will get notified when changes occur.</p>  *<p/>  *<p><b>IMPORTANT</b> - it's not possible to stay transactionally in sync. Users of this class must  * be prepared for false-positives and false-negatives. Additionally, always use the version number  * when updating data to avoid overwriting another process' change.</p>  */
end_comment

begin_class
DECL|class|ZooKeeperGroup
specifier|public
class|class
name|ZooKeeperGroup
parameter_list|<
name|T
extends|extends
name|NodeState
parameter_list|>
implements|implements
name|Group
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ZooKeeperGroup
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mapper
specifier|private
specifier|static
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|disable
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|)
decl_stmt|;
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|CuratorFramework
name|client
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|ensurePath
specifier|private
specifier|final
name|EnsurePath
name|ensurePath
decl_stmt|;
DECL|field|operations
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|listeners
specifier|private
specifier|final
name|ListenerContainer
argument_list|<
name|GroupListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|listeners
init|=
operator|new
name|ListenerContainer
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|currentData
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|currentData
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|started
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|connected
specifier|private
specifier|final
name|AtomicBoolean
name|connected
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|sequenceComparator
specifier|private
specifier|final
name|SequenceComparator
name|sequenceComparator
init|=
operator|new
name|SequenceComparator
argument_list|()
decl_stmt|;
DECL|field|uuid
specifier|private
specifier|final
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|id
specifier|private
specifier|volatile
name|String
name|id
decl_stmt|;
comment|// to help detecting whether ZK Group update failed
DECL|field|creating
specifier|private
specifier|final
name|AtomicBoolean
name|creating
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// flag indicating that ephemeral node could be created in registry, but exact sequence ID is uknown
comment|// this status means we may have (temporary - for the period of ZK session) duplication of nodes
DECL|field|unstable
specifier|private
specifier|final
name|AtomicBoolean
name|unstable
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|field|state
specifier|private
specifier|volatile
name|T
name|state
decl_stmt|;
DECL|field|childrenWatcher
specifier|private
specifier|final
name|Watcher
name|childrenWatcher
init|=
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|!=
name|Event
operator|.
name|EventType
operator|.
name|None
condition|)
block|{
comment|// only interested in real change events, eg no refresh on Keeper.Disconnect
name|offerOperation
argument_list|(
operator|new
name|RefreshOperation
argument_list|(
name|ZooKeeperGroup
operator|.
name|this
argument_list|,
name|RefreshMode
operator|.
name|STANDARD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
DECL|field|dataWatcher
specifier|private
specifier|final
name|Watcher
name|dataWatcher
init|=
operator|new
name|Watcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|NodeDeleted
condition|)
block|{
name|remove
argument_list|(
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|Event
operator|.
name|EventType
operator|.
name|NodeDataChanged
condition|)
block|{
name|offerOperation
argument_list|(
operator|new
name|GetDataOperation
argument_list|(
name|ZooKeeperGroup
operator|.
name|this
argument_list|,
name|event
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
DECL|field|connectionStateListener
specifier|private
specifier|final
name|ConnectionStateListener
name|connectionStateListener
init|=
operator|new
name|ConnectionStateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|ConnectionState
name|newState
parameter_list|)
block|{
name|handleStateChange
argument_list|(
name|newState
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**      * @param client the client      * @param path   path to watch      */
DECL|method|ZooKeeperGroup (CuratorFramework client, String path, Class<T> clazz)
specifier|public
name|ZooKeeperGroup
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|clazz
argument_list|,
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param client        the client      * @param path          path to watch      * @param threadFactory factory to use when creating internal threads      */
DECL|method|ZooKeeperGroup (CuratorFramework client, String path, Class<T> clazz, ThreadFactory threadFactory)
specifier|public
name|ZooKeeperGroup
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ThreadFactory
name|threadFactory
parameter_list|)
block|{
name|this
argument_list|(
name|client
argument_list|,
name|path
argument_list|,
name|clazz
argument_list|,
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
name|threadFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param client          the client      * @param path            path to watch      * @param executorService ExecutorService to use for the ZooKeeperGroup's background thread      */
DECL|method|ZooKeeperGroup (CuratorFramework client, String path, Class<T> clazz, final ExecutorService executorService)
specifier|public
name|ZooKeeperGroup
parameter_list|(
name|CuratorFramework
name|client
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|ExecutorService
name|executorService
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating ZK Group for path \""
operator|+
name|path
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
name|ensurePath
operator|=
name|client
operator|.
name|newNamespaceAwareEnsurePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|/**      * Start the cache. The cache is not started automatically. You must call this method.      */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting ZK Group for path: {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|connected
operator|.
name|set
argument_list|(
name|client
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
name|handleStateChange
argument_list|(
name|ConnectionState
operator|.
name|CONNECTED
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|getConnectionStateListenable
argument_list|()
operator|.
name|addListener
argument_list|(
name|connectionStateListener
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|mainLoop
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Close/end the cache      *      * @throws IOException errors      */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|+
literal|".close, connected:"
operator|+
name|connected
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|client
operator|.
name|getConnectionStateListenable
argument_list|()
operator|.
name|removeListener
argument_list|(
name|connectionStateListener
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
try|try
block|{
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|doUpdate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
name|callListeners
argument_list|(
name|GroupListener
operator|.
name|GroupEvent
operator|.
name|DISCONNECTED
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|listeners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|disable
argument_list|(
name|DeserializationFeature
operator|.
name|FAIL_ON_UNKNOWN_PROPERTIES
argument_list|)
expr_stmt|;
name|client
operator|.
name|clearWatcherReferences
argument_list|(
name|childrenWatcher
argument_list|)
expr_stmt|;
name|client
operator|.
name|clearWatcherReferences
argument_list|(
name|dataWatcher
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|add (GroupListener<T> listener)
specifier|public
name|void
name|add
parameter_list|(
name|GroupListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (GroupListener<T> listener)
specifier|public
name|void
name|remove
parameter_list|(
name|GroupListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|removeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (T state)
specifier|public
name|void
name|update
parameter_list|(
name|T
name|state
parameter_list|)
block|{
name|T
name|oldState
init|=
name|this
operator|.
name|state
decl_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|boolean
name|update
init|=
name|state
operator|==
literal|null
operator|&&
name|oldState
operator|!=
literal|null
operator|||
name|state
operator|!=
literal|null
operator|&&
name|oldState
operator|==
literal|null
operator|||
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|encode
argument_list|(
name|state
argument_list|)
argument_list|,
name|encode
argument_list|(
name|oldState
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|update
condition|)
block|{
name|offerOperation
argument_list|(
operator|new
name|CompositeOperation
argument_list|(
operator|new
name|RefreshOperation
argument_list|(
name|this
argument_list|,
name|RefreshMode
operator|.
name|FORCE_GET_DATA_AND_STAT
argument_list|)
argument_list|,
operator|new
name|UpdateOperation
argument_list|<>
argument_list|(
name|this
argument_list|,
name|state
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doUpdate (T state)
specifier|protected
name|void
name|doUpdate
parameter_list|(
name|T
name|state
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// state.toString() invokes Jackson ObjectMapper serialization
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" doUpdate, state:"
operator|+
name|state
operator|+
literal|" id:"
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
name|client
operator|.
name|delete
argument_list|()
operator|.
name|guaranteed
argument_list|()
operator|.
name|forPath
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|unstable
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
finally|finally
block|{
name|id
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|creating
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ephemeral node could be created in the registry, but ZooKeeper group didn't record its id"
argument_list|)
expr_stmt|;
name|unstable
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
comment|// We could have created the sequence, but then have crashed and our entry is already registered.
comment|// However, we ignore old ephemeral nodes, and create new ones. We can have double nodes for a bit,
comment|// but the old ones should be deleted by the server when session is invalidated.
comment|// See: https://issues.jboss.org/browse/FABRIC-1238
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|createEphemeralNode
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|updateEphemeralNode
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
name|id
operator|=
name|createEphemeralNode
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createEphemeralNode (T state)
specifier|private
name|String
name|createEphemeralNode
parameter_list|(
name|T
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|state
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|creating
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|pathId
init|=
name|client
operator|.
name|create
argument_list|()
operator|.
name|creatingParentsIfNeeded
argument_list|()
operator|.
name|withMode
argument_list|(
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
operator|.
name|forPath
argument_list|(
name|path
operator|+
literal|"/0"
argument_list|,
name|encode
argument_list|(
name|state
argument_list|)
argument_list|)
decl_stmt|;
name|creating
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|unstable
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
comment|// state.toString() invokes Jackson ObjectMapper serialization
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|", state:"
operator|+
name|state
operator|+
literal|", new ephemeralSequential path:"
operator|+
name|pathId
argument_list|)
expr_stmt|;
block|}
name|prunePartialState
argument_list|(
name|state
argument_list|,
name|pathId
argument_list|)
expr_stmt|;
name|state
operator|.
name|uuid
operator|=
literal|null
expr_stmt|;
return|return
name|pathId
return|;
block|}
DECL|method|updateEphemeralNode (T state)
specifier|private
name|void
name|updateEphemeralNode
parameter_list|(
name|T
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|state
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|client
operator|.
name|setData
argument_list|()
operator|.
name|forPath
argument_list|(
name|id
argument_list|,
name|encode
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|uuid
operator|=
literal|null
expr_stmt|;
block|}
comment|// remove ephemeral sequential nodes created on server but not visible on client
DECL|method|prunePartialState (final T ourState, final String pathId)
specifier|private
name|void
name|prunePartialState
parameter_list|(
specifier|final
name|T
name|ourState
parameter_list|,
specifier|final
name|String
name|pathId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ourState
operator|.
name|uuid
operator|!=
literal|null
condition|)
block|{
name|clearAndRefresh
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|currentData
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ChildData
argument_list|<
name|T
argument_list|>
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|ourState
operator|.
name|uuid
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNode
argument_list|()
operator|.
name|uuid
argument_list|)
operator|&&
operator|!
name|child
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|pathId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting partially created znode: {}"
argument_list|,
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|delete
argument_list|()
operator|.
name|guaranteed
argument_list|()
operator|.
name|forPath
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|members ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|members
parameter_list|()
block|{
name|List
argument_list|<
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|children
init|=
name|getActiveChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|sequenceComparator
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|members
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildData
argument_list|<
name|T
argument_list|>
name|child
range|:
name|children
control|)
block|{
name|members
operator|.
name|put
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|,
name|child
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|members
return|;
block|}
annotation|@
name|Override
DECL|method|isMaster ()
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
name|List
argument_list|<
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|children
init|=
name|getActiveChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|sequenceComparator
argument_list|)
expr_stmt|;
return|return
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
operator|&&
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|master ()
specifier|public
name|T
name|master
parameter_list|()
block|{
name|List
argument_list|<
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|children
init|=
name|getActiveChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|sequenceComparator
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|slaves ()
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|slaves
parameter_list|()
block|{
name|List
argument_list|<
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|children
init|=
name|getActiveChildren
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
name|sequenceComparator
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|slaves
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|slaves
operator|.
name|add
argument_list|(
name|children
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|slaves
return|;
block|}
comment|/**      * Filter stale nodes and return only active children from the current data.      *      * @return list of active children and data      */
DECL|method|getActiveChildren ()
specifier|protected
name|List
argument_list|<
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|getActiveChildren
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ChildData
argument_list|<
name|T
argument_list|>
argument_list|>
name|filtered
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildData
argument_list|<
name|T
argument_list|>
name|child
range|:
name|currentData
operator|.
name|values
argument_list|()
control|)
block|{
name|T
name|node
init|=
name|child
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filtered
operator|.
name|containsKey
argument_list|(
name|node
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|||
name|filtered
operator|.
name|get
argument_list|(
name|node
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|compareTo
argument_list|(
name|child
operator|.
name|getPath
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|filtered
operator|.
name|put
argument_list|(
name|node
operator|.
name|getContainer
argument_list|()
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|filtered
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getLastState ()
specifier|public
name|T
name|getLastState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
DECL|method|getSequenceComparator ()
specifier|public
name|SequenceComparator
name|getSequenceComparator
parameter_list|()
block|{
return|return
name|sequenceComparator
return|;
block|}
comment|/**      * Return the cache listenable      *      * @return listenable      */
DECL|method|getListenable ()
specifier|public
name|ListenerContainer
argument_list|<
name|GroupListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|getListenable
parameter_list|()
block|{
return|return
name|listeners
return|;
block|}
comment|/**      * Return the current data. There are no guarantees of accuracy. This is      * merely the most recent view of the data. The data is returned in sorted order.      *      * @return list of children and data      */
DECL|method|getCurrentData ()
specifier|public
name|List
argument_list|<
name|ChildData
argument_list|>
name|getCurrentData
parameter_list|()
block|{
name|List
argument_list|<
name|ChildData
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|answer
operator|.
name|addAll
argument_list|(
name|currentData
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Used for testing purpose      */
DECL|method|putCurrentData (String key, ChildData value)
name|void
name|putCurrentData
parameter_list|(
name|String
name|key
parameter_list|,
name|ChildData
name|value
parameter_list|)
block|{
name|currentData
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return the current data for the given path. There are no guarantees of accuracy. This is      * merely the most recent view of the data. If there is no child with that path,<code>null</code>      * is returned.      *      * @param fullPath full path to the node to check      * @return data or null      */
DECL|method|getCurrentData (String fullPath)
specifier|public
name|ChildData
name|getCurrentData
parameter_list|(
name|String
name|fullPath
parameter_list|)
block|{
return|return
name|currentData
operator|.
name|get
argument_list|(
name|fullPath
argument_list|)
return|;
block|}
comment|/**      * Clear out current data and begin a new query on the path      *      * @throws Exception errors      */
DECL|method|clearAndRefresh ()
specifier|public
name|void
name|clearAndRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|clearAndRefresh
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clear out current data and begin a new query on the path      *      * @param force - whether to force clear and refresh to trigger updates      * @param sync  - whether to run this synchronously (block current thread) or asynchronously      * @throws Exception errors      */
DECL|method|clearAndRefresh (boolean force, boolean sync)
specifier|public
name|void
name|clearAndRefresh
parameter_list|(
name|boolean
name|force
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|Exception
block|{
name|RefreshMode
name|mode
init|=
name|force
condition|?
name|RefreshMode
operator|.
name|FORCE_GET_DATA_AND_STAT
else|:
name|RefreshMode
operator|.
name|STANDARD
decl_stmt|;
name|currentData
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|sync
condition|)
block|{
name|this
operator|.
name|refresh
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|offerOperation
argument_list|(
operator|new
name|RefreshOperation
argument_list|(
name|this
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Clears the current data without beginning a new query and without generating any events      * for listeners.      */
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|currentData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|enum|RefreshMode
enum|enum
name|RefreshMode
block|{
DECL|enumConstant|STANDARD
name|STANDARD
block|,
DECL|enumConstant|FORCE_GET_DATA_AND_STAT
name|FORCE_GET_DATA_AND_STAT
block|}
DECL|method|refresh (final RefreshMode mode)
name|void
name|refresh
parameter_list|(
specifier|final
name|RefreshMode
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|ensurePath
operator|.
name|ensure
argument_list|(
name|client
operator|.
name|getZookeeperClient
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|client
operator|.
name|getChildren
argument_list|()
operator|.
name|usingWatcher
argument_list|(
name|childrenWatcher
argument_list|)
operator|.
name|forPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|children
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
return|return
name|left
operator|.
name|compareTo
argument_list|(
name|right
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|processChildren
argument_list|(
name|children
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|callListeners (final GroupListener.GroupEvent event)
name|void
name|callListeners
parameter_list|(
specifier|final
name|GroupListener
operator|.
name|GroupEvent
name|event
parameter_list|)
block|{
name|listeners
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
block|{
try|try
block|{
name|listener
operator|.
name|groupEvent
argument_list|(
name|ZooKeeperGroup
operator|.
name|this
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getDataAndStat (final String fullPath)
name|void
name|getDataAndStat
parameter_list|(
specifier|final
name|String
name|fullPath
parameter_list|)
throws|throws
name|Exception
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|client
operator|.
name|getData
argument_list|()
operator|.
name|storingStatIn
argument_list|(
name|stat
argument_list|)
operator|.
name|usingWatcher
argument_list|(
name|dataWatcher
argument_list|)
operator|.
name|forPath
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
name|applyNewData
argument_list|(
name|fullPath
argument_list|,
name|KeeperException
operator|.
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
argument_list|,
name|stat
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|/**      * Default behavior is just to log the exception      *      * @param e the exception      */
DECL|method|handleException (Throwable e)
specifier|protected
name|void
name|handleException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|IllegalStateException
operator|&&
literal|"Client is not started"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|remove (String fullPath)
specifier|protected
name|void
name|remove
parameter_list|(
name|String
name|fullPath
parameter_list|)
block|{
name|ChildData
name|data
init|=
name|currentData
operator|.
name|remove
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|offerOperation
argument_list|(
operator|new
name|EventOperation
argument_list|(
name|this
argument_list|,
name|GroupListener
operator|.
name|GroupEvent
operator|.
name|CHANGED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleStateChange (ConnectionState newState)
specifier|private
name|void
name|handleStateChange
parameter_list|(
name|ConnectionState
name|newState
parameter_list|)
block|{
switch|switch
condition|(
name|newState
condition|)
block|{
case|case
name|SUSPENDED
case|:
case|case
name|LOST
case|:
block|{
name|connected
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
name|EventOperation
name|op
init|=
operator|new
name|EventOperation
argument_list|(
name|this
argument_list|,
name|GroupListener
operator|.
name|GroupEvent
operator|.
name|DISCONNECTED
argument_list|)
decl_stmt|;
name|op
operator|.
name|invoke
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|CONNECTED
case|:
case|case
name|RECONNECTED
case|:
block|{
name|connected
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|offerOperation
argument_list|(
operator|new
name|CompositeOperation
argument_list|(
operator|new
name|RefreshOperation
argument_list|(
name|this
argument_list|,
name|RefreshMode
operator|.
name|FORCE_GET_DATA_AND_STAT
argument_list|)
argument_list|,
operator|new
name|UpdateOperation
argument_list|<>
argument_list|(
name|this
argument_list|,
name|state
argument_list|)
argument_list|,
operator|new
name|EventOperation
argument_list|(
name|this
argument_list|,
name|GroupListener
operator|.
name|GroupEvent
operator|.
name|CONNECTED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
comment|// noop
block|}
block|}
DECL|method|processChildren (List<String> children, RefreshMode mode)
specifier|private
name|void
name|processChildren
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|children
parameter_list|,
name|RefreshMode
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fullPaths
init|=
name|children
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|ZKPaths
operator|.
name|makePath
argument_list|(
name|path
argument_list|,
name|c
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|removedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|currentData
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|removedNodes
operator|.
name|removeAll
argument_list|(
name|fullPaths
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fullPath
range|:
name|removedNodes
control|)
block|{
name|remove
argument_list|(
name|fullPath
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|children
control|)
block|{
name|String
name|fullPath
init|=
name|ZKPaths
operator|.
name|makePath
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|mode
operator|==
name|RefreshMode
operator|.
name|FORCE_GET_DATA_AND_STAT
operator|)
operator|||
operator|!
name|currentData
operator|.
name|containsKey
argument_list|(
name|fullPath
argument_list|)
condition|)
block|{
try|try
block|{
name|getDataAndStat
argument_list|(
name|fullPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|ignore
parameter_list|)
block|{                 }
block|}
block|}
block|}
DECL|method|applyNewData (String fullPath, int resultCode, Stat stat, byte[] bytes)
specifier|private
name|void
name|applyNewData
parameter_list|(
name|String
name|fullPath
parameter_list|,
name|int
name|resultCode
parameter_list|,
name|Stat
name|stat
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|resultCode
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|OK
operator|.
name|intValue
argument_list|()
condition|)
block|{
comment|// otherwise - node must have dropped or something - we should be getting another event
name|ChildData
argument_list|<
name|T
argument_list|>
name|data
init|=
operator|new
name|ChildData
argument_list|<>
argument_list|(
name|fullPath
argument_list|,
name|stat
argument_list|,
name|bytes
argument_list|,
name|decode
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|ChildData
argument_list|<
name|T
argument_list|>
name|previousData
init|=
name|currentData
operator|.
name|put
argument_list|(
name|fullPath
argument_list|,
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousData
operator|==
literal|null
operator|||
name|previousData
operator|.
name|getStat
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|!=
name|stat
operator|.
name|getVersion
argument_list|()
condition|)
block|{
name|offerOperation
argument_list|(
operator|new
name|EventOperation
argument_list|(
name|this
argument_list|,
name|GroupListener
operator|.
name|GroupEvent
operator|.
name|CHANGED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mainLoop ()
specifier|private
name|void
name|mainLoop
parameter_list|()
block|{
while|while
condition|(
name|started
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|operations
operator|.
name|take
argument_list|()
operator|.
name|invoke
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|encode (T state)
specifier|private
name|byte
index|[]
name|encode
parameter_list|(
name|T
name|state
parameter_list|)
block|{
try|try
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|baos
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to decode data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|decode (byte[] data)
specifier|private
name|T
name|decode
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
try|try
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|data
argument_list|,
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to decode data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|offerOperation (Operation operation)
specifier|private
name|void
name|offerOperation
parameter_list|(
name|Operation
name|operation
parameter_list|)
block|{
if|if
condition|(
operator|!
name|operations
operator|.
name|contains
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|operations
operator|.
name|offer
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
comment|// operations.remove(operation);   // avoids herding for refresh operations
block|}
DECL|method|members (ObjectMapper mapper, CuratorFramework curator, String path, Class<T> clazz)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|members
parameter_list|(
name|ObjectMapper
name|mapper
parameter_list|,
name|CuratorFramework
name|curator
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|curator
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|byte
index|[]
name|data
init|=
name|curator
operator|.
name|getData
argument_list|()
operator|.
name|forPath
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|node
argument_list|)
decl_stmt|;
name|T
name|val
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|data
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (String id)
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
comment|/**      * Returns an indication that the sequential, ephemeral node may be registered more than once for this group      */
DECL|method|isUnstable ()
specifier|public
name|boolean
name|isUnstable
parameter_list|()
block|{
return|return
name|unstable
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

