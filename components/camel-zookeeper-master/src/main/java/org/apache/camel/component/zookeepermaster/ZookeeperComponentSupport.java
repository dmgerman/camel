begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zookeepermaster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zookeepermaster
operator|.
name|group
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_class
DECL|class|ZookeeperComponentSupport
specifier|public
specifier|abstract
class|class
name|ZookeeperComponentSupport
extends|extends
name|DefaultComponent
block|{
DECL|field|zookeeperGroupSupport
specifier|private
specifier|final
name|ZookeeperGroupSupport
name|zookeeperGroupSupport
init|=
operator|new
name|ZookeeperGroupSupport
argument_list|()
decl_stmt|;
comment|// use for component documentation
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|curator
specifier|private
name|CuratorFramework
name|curator
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|maximumConnectionTimeout
specifier|private
name|int
name|maximumConnectionTimeout
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"localhost:2181"
argument_list|)
DECL|field|zooKeeperUrl
specifier|private
name|String
name|zooKeeperUrl
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|zooKeeperPassword
specifier|private
name|String
name|zooKeeperPassword
decl_stmt|;
DECL|method|createGroup (String path)
specifier|public
name|Group
argument_list|<
name|CamelNodeState
argument_list|>
name|createGroup
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|zookeeperGroupSupport
operator|.
name|createGroup
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|getCurator ()
specifier|public
name|CuratorFramework
name|getCurator
parameter_list|()
block|{
return|return
name|zookeeperGroupSupport
operator|.
name|getCurator
argument_list|()
return|;
block|}
comment|/**      * To use a custom configured CuratorFramework as connection to zookeeper ensemble.      */
DECL|method|setCurator (CuratorFramework curator)
specifier|public
name|void
name|setCurator
parameter_list|(
name|CuratorFramework
name|curator
parameter_list|)
block|{
name|zookeeperGroupSupport
operator|.
name|setCurator
argument_list|(
name|curator
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaximumConnectionTimeout ()
specifier|public
name|int
name|getMaximumConnectionTimeout
parameter_list|()
block|{
return|return
name|zookeeperGroupSupport
operator|.
name|getMaximumConnectionTimeout
argument_list|()
return|;
block|}
comment|/**      * Timeout in millis to use when connecting to the zookeeper ensemble      */
DECL|method|setMaximumConnectionTimeout (int maximumConnectionTimeout)
specifier|public
name|void
name|setMaximumConnectionTimeout
parameter_list|(
name|int
name|maximumConnectionTimeout
parameter_list|)
block|{
name|zookeeperGroupSupport
operator|.
name|setMaximumConnectionTimeout
argument_list|(
name|maximumConnectionTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|getZooKeeperUrl ()
specifier|public
name|String
name|getZooKeeperUrl
parameter_list|()
block|{
return|return
name|zookeeperGroupSupport
operator|.
name|getZooKeeperUrl
argument_list|()
return|;
block|}
comment|/**      * The url for the zookeeper ensemble      */
DECL|method|setZooKeeperUrl (String zooKeeperUrl)
specifier|public
name|void
name|setZooKeeperUrl
parameter_list|(
name|String
name|zooKeeperUrl
parameter_list|)
block|{
name|zookeeperGroupSupport
operator|.
name|setZooKeeperUrl
argument_list|(
name|zooKeeperUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|getZooKeeperPassword ()
specifier|public
name|String
name|getZooKeeperPassword
parameter_list|()
block|{
return|return
name|zookeeperGroupSupport
operator|.
name|getZooKeeperPassword
argument_list|()
return|;
block|}
comment|/**      * The password to use when connecting to the zookeeper ensemble      */
DECL|method|setZooKeeperPassword (String zooKeeperPassword)
specifier|public
name|void
name|setZooKeeperPassword
parameter_list|(
name|String
name|zooKeeperPassword
parameter_list|)
block|{
name|zookeeperGroupSupport
operator|.
name|setZooKeeperPassword
argument_list|(
name|zooKeeperPassword
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|zookeeperGroupSupport
operator|.
name|setCamelContext
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|zookeeperGroupSupport
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|ServiceHelper
operator|.
name|stopAndShutdownServices
argument_list|(
name|zookeeperGroupSupport
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

