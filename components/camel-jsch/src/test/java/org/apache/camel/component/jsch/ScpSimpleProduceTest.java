begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jsch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jsch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ScpSimpleProduceTest
specifier|public
class|class
name|ScpSimpleProduceTest
extends|extends
name|ScpServerTestSupport
block|{
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testScpSimpleProduce ()
specifier|public
name|void
name|testScpSimpleProduce
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|isSetupComplete
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|getScpUri
argument_list|()
operator|+
literal|"?username=admin&password=admin&knownHostsFile="
operator|+
name|getKnownHostsFile
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|uri
argument_list|,
literal|"Hello World"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"hello.txt"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getScpPath
argument_list|()
operator|+
literal|"/hello.txt"
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScpSimpleSubPathProduce ()
specifier|public
name|void
name|testScpSimpleSubPathProduce
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|isSetupComplete
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|getScpUri
argument_list|()
operator|+
literal|"?username=admin&password=admin&knownHostsFile="
operator|+
name|getKnownHostsFile
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|uri
argument_list|,
literal|"Bye World"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"mysub/bye.txt"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getScpPath
argument_list|()
operator|+
literal|"/mysub/bye.txt"
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Bye World"
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScpSimpleTwoSubPathProduce ()
specifier|public
name|void
name|testScpSimpleTwoSubPathProduce
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|isSetupComplete
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|getScpUri
argument_list|()
operator|+
literal|"?username=admin&password=admin&knownHostsFile="
operator|+
name|getKnownHostsFile
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|uri
argument_list|,
literal|"Farewell World"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"mysub/mysubsub/farewell.txt"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getScpPath
argument_list|()
operator|+
literal|"/mysub/mysubsub/farewell.txt"
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Farewell World"
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScpProduceChmod ()
specifier|public
name|void
name|testScpProduceChmod
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|isSetupComplete
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|getScpUri
argument_list|()
operator|+
literal|"?username=admin&password=admin&chmod=640&knownHostsFile="
operator|+
name|getKnownHostsFile
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|uri
argument_list|,
literal|"Bonjour Monde"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"monde.txt"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getScpPath
argument_list|()
operator|+
literal|"/monde.txt"
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mina sshd we use for testing ignores file perms;
comment|// assertFalse("File should not have execute rights: " + file, file.canExecute());
name|assertEquals
argument_list|(
literal|"Bonjour Monde"
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScpProducePrivateKey ()
specifier|public
name|void
name|testScpProducePrivateKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|this
operator|.
name|isSetupComplete
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|getScpUri
argument_list|()
operator|+
literal|"?username=admin&privateKeyFile=src/test/resources/camel-key.priv&privateKeyFilePassphrase=password&knownHostsFile="
operator|+
name|getKnownHostsFile
argument_list|()
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
name|uri
argument_list|,
literal|"Hallo Welt"
argument_list|,
name|Exchange
operator|.
name|FILE_NAME
argument_list|,
literal|"welt.txt"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getScpPath
argument_list|()
operator|+
literal|"/welt.txt"
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mina sshd we use for testing ignores file perms;
comment|// assertFalse("File should not have execute rights: " + file, file.canExecute());
name|assertEquals
argument_list|(
literal|"Hallo Welt"
argument_list|,
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

