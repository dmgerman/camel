begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.bonita
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bonita
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ResolveEndpointFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bonita
operator|.
name|BonitaConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bonita
operator|.
name|BonitaEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|bonita
operator|.
name|util
operator|.
name|BonitaOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BonitaConfigurationTest
specifier|public
class|class
name|BonitaConfigurationTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testBonitaConfigurationDefaults ()
specifier|public
name|void
name|testBonitaConfigurationDefaults
parameter_list|()
block|{
name|BonitaEndpoint
name|bonitaEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"bonita:startCase"
argument_list|,
name|BonitaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BonitaConfiguration
name|configuration
init|=
name|bonitaEndpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|configuration
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8080"
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBonitaConfigurationCustom ()
specifier|public
name|void
name|testBonitaConfigurationCustom
parameter_list|()
block|{
name|BonitaEndpoint
name|bonitaEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"bonita:startCase?hostname=host&port=port&processName=processName&username=username&password=password"
argument_list|,
name|BonitaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|BonitaConfiguration
name|configuration
init|=
name|bonitaEndpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"host"
argument_list|,
name|configuration
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"port"
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"processName"
argument_list|,
name|configuration
operator|.
name|getProcessName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"username"
argument_list|,
name|configuration
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|configuration
operator|.
name|getOperation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|BonitaOperation
operator|.
name|startCase
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ResolveEndpointFailedException
operator|.
name|class
argument_list|)
DECL|method|testBonitaConfigurationWrongOperation ()
specifier|public
name|void
name|testBonitaConfigurationWrongOperation
parameter_list|()
block|{
name|BonitaEndpoint
name|bonitaEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"bonita:wrongOperation"
argument_list|,
name|BonitaEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

