begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cm.client
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
operator|.
name|client
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
operator|.
name|validation
operator|.
name|constraints
operator|.
name|E164
import|;
end_import

begin_comment
comment|/**  * Immutable. The message instance provided by the client.  */
end_comment

begin_class
DECL|class|SMSMessage
specifier|public
class|class
name|SMSMessage
block|{
comment|/**      * Required MSISDN. E164 value. The destination phone number. Format with a '+' and country code.      *      * @see<a href="https://en.wikipedia.org/wiki/E.164">https://en.wikipedia.org/wiki/E.164</a>      */
annotation|@
name|E164
DECL|field|phoneNumber
specifier|private
specifier|final
name|String
name|phoneNumber
decl_stmt|;
comment|/**      * This is the message to be sent. 2 options:      *<ul>      *<li>If the message is GSM 0038 encodeable the gateway will first check if a message is larger than 160 characters, if so, the message will be cut into multiple 153 characters parts limited by      * defaultMaxNumberOfParts set in the component uri.</li>      *<li>Otherwise, the gateway will check if a message is larger than 70 characters, if so, the message will be cut into multiple 67 characters parts to a maximum of defaultMaxNumberOfParts set in      * the component uri.</li>      *</ul>      *      * @see<a href="https://en.wikipedia.org/wiki/GSM_03.38">E.164</a>      */
annotation|@
name|NotNull
DECL|field|message
specifier|private
specifier|final
name|String
name|message
decl_stmt|;
comment|/**      * This is an optional dynamic sender name.      *<p>      * 1 - 11 alphanumeric characters and + char. Not Empty Strings. This field has a maximum length of 11 characters. If it is not set the defaultFrom required to configure the component will be set.      */
annotation|@
name|Size
argument_list|(
name|min
operator|=
literal|1
argument_list|,
name|max
operator|=
literal|11
argument_list|)
annotation|@
name|Pattern
argument_list|(
name|regexp
operator|=
literal|"^[A-Za-z0-9]+$"
argument_list|)
DECL|field|from
specifier|private
specifier|final
name|String
name|from
decl_stmt|;
comment|/**      * Unique identifier for a message.      *<p>      * 1 - 32 alphanumeric characters. Not Empty Strings. Will not work for demo accounts. This field corresponds to REFERENCE parameter in CM Api.      */
annotation|@
name|Size
argument_list|(
name|min
operator|=
literal|1
argument_list|,
name|max
operator|=
literal|32
argument_list|)
annotation|@
name|Pattern
argument_list|(
name|regexp
operator|=
literal|"^[A-Za-z0-9]+$"
argument_list|)
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|method|SMSMessage (final String message, final String phoneNumber)
specifier|public
name|SMSMessage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|String
name|phoneNumber
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|message
argument_list|,
name|phoneNumber
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SMSMessage (String id, final String message, final String phoneNumber)
specifier|public
name|SMSMessage
parameter_list|(
name|String
name|id
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|String
name|phoneNumber
parameter_list|)
block|{
name|this
argument_list|(
name|id
argument_list|,
name|message
argument_list|,
name|phoneNumber
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|SMSMessage (final String id, final String message, final String phoneNumber, final String from)
specifier|public
name|SMSMessage
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|String
name|phoneNumber
parameter_list|,
specifier|final
name|String
name|from
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|phoneNumber
operator|=
name|phoneNumber
expr_stmt|;
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
DECL|method|getPhoneNumber ()
specifier|public
name|String
name|getPhoneNumber
parameter_list|()
block|{
return|return
name|phoneNumber
return|;
block|}
DECL|method|getFrom ()
specifier|public
name|String
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|toS
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"{phoneNumber: "
operator|+
name|phoneNumber
operator|+
literal|", message: "
operator|+
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
operator|&&
operator|!
name|from
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toS
operator|.
name|append
argument_list|(
literal|", from: "
operator|+
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|toS
operator|.
name|append
argument_list|(
literal|", id: "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
name|toS
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|toS
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

