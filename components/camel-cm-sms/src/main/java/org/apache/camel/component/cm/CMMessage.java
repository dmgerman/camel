begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cm
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
package|;
end_package

begin_comment
comment|/**  * Valid message to be serialized and sent to CM Endpoints. If the message only uses GSM 7-bit characters, then 160 characters will fit in 1 SMS part, and 153*n characters will fit in n SMS parts for  * n>1. If the message contains other characters, then only 70 characters will fit in 1 SMS part, and 67*n characters will fit in n SMS parts for n>1.<br>  *<br>  * {@link https://dashboard.onlinesmsgateway.com/docs}<br>  * {@link http://support.telerivet.com/customer/portal/articles/1957426-multipart-unicode-sms-messages}  */
end_comment

begin_class
DECL|class|CMMessage
specifier|public
class|class
name|CMMessage
block|{
comment|/**      * Restrictions: 1 - 32 alphanumeric characters and reference will not work for demo accounts      */
comment|// TODO: use a ID generator?
DECL|field|idAsString
specifier|private
name|String
name|idAsString
decl_stmt|;
DECL|field|phoneNumber
specifier|private
name|String
name|phoneNumber
decl_stmt|;
DECL|field|message
specifier|private
name|String
name|message
decl_stmt|;
DECL|field|sender
specifier|private
name|String
name|sender
decl_stmt|;
DECL|field|unicode
specifier|private
name|boolean
name|unicode
decl_stmt|;
DECL|field|multipart
specifier|private
name|int
name|multipart
init|=
literal|1
decl_stmt|;
DECL|method|CMMessage (final String phoneNumber, final String message)
specifier|public
name|CMMessage
parameter_list|(
specifier|final
name|String
name|phoneNumber
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|phoneNumber
operator|=
name|phoneNumber
expr_stmt|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
DECL|method|setMessage (final String message)
specifier|public
name|void
name|setMessage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
DECL|method|getPhoneNumber ()
specifier|public
name|String
name|getPhoneNumber
parameter_list|()
block|{
return|return
name|phoneNumber
return|;
block|}
DECL|method|setPhoneNumber (final String phoneNumber)
specifier|public
name|void
name|setPhoneNumber
parameter_list|(
specifier|final
name|String
name|phoneNumber
parameter_list|)
block|{
name|this
operator|.
name|phoneNumber
operator|=
name|phoneNumber
expr_stmt|;
block|}
DECL|method|getSender ()
specifier|public
name|String
name|getSender
parameter_list|()
block|{
return|return
name|sender
return|;
block|}
DECL|method|setSender (final String sender)
specifier|public
name|void
name|setSender
parameter_list|(
specifier|final
name|String
name|sender
parameter_list|)
block|{
name|this
operator|.
name|sender
operator|=
name|sender
expr_stmt|;
block|}
DECL|method|getIdAsString ()
specifier|public
name|String
name|getIdAsString
parameter_list|()
block|{
return|return
name|idAsString
return|;
block|}
DECL|method|setIdAsString (final String idAsString)
specifier|public
name|void
name|setIdAsString
parameter_list|(
specifier|final
name|String
name|idAsString
parameter_list|)
block|{
name|this
operator|.
name|idAsString
operator|=
name|idAsString
expr_stmt|;
block|}
DECL|method|isUnicode ()
specifier|public
name|boolean
name|isUnicode
parameter_list|()
block|{
return|return
name|unicode
return|;
block|}
DECL|method|setUnicode (final boolean unicode)
specifier|public
name|void
name|setUnicode
parameter_list|(
specifier|final
name|boolean
name|unicode
parameter_list|)
block|{
name|this
operator|.
name|unicode
operator|=
name|unicode
expr_stmt|;
block|}
DECL|method|isMultipart ()
specifier|public
name|boolean
name|isMultipart
parameter_list|()
block|{
return|return
name|multipart
operator|>
literal|1
return|;
block|}
comment|/**      * For a CMMessage instance      *      * @param defaultMaxNumberOfParts      */
DECL|method|setUnicodeAndMultipart (int defaultMaxNumberOfParts)
specifier|public
name|void
name|setUnicodeAndMultipart
parameter_list|(
name|int
name|defaultMaxNumberOfParts
parameter_list|)
block|{
comment|// Set UNICODE and MULTIPART
specifier|final
name|String
name|msg
init|=
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|CMUtils
operator|.
name|isGsm0338Encodeable
argument_list|(
name|msg
argument_list|)
condition|)
block|{
comment|// Not Unicode is Multipart?
if|if
condition|(
name|msg
operator|.
name|length
argument_list|()
operator|>
name|CMConstants
operator|.
name|MAX_GSM_MESSAGE_LENGTH
condition|)
block|{
comment|// Multiparts. 153 caracteres max per part
name|int
name|parts
init|=
name|msg
operator|.
name|length
argument_list|()
operator|/
name|CMConstants
operator|.
name|MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|length
argument_list|()
operator|%
name|CMConstants
operator|.
name|MAX_GSM_MESSAGE_LENGTH_PER_PART_IF_MULTIPART
operator|!=
literal|0
condition|)
block|{
name|parts
operator|++
expr_stmt|;
block|}
name|setMultiparts
argument_list|(
operator|(
name|parts
operator|>
name|defaultMaxNumberOfParts
operator|)
condition|?
name|defaultMaxNumberOfParts
else|:
name|parts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise multipart = 1
name|setMultiparts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Unicode Message
name|setUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|length
argument_list|()
operator|>
name|CMConstants
operator|.
name|MAX_UNICODE_MESSAGE_LENGTH
condition|)
block|{
comment|// Multiparts. 67 caracteres max per part
name|int
name|parts
init|=
name|msg
operator|.
name|length
argument_list|()
operator|/
name|CMConstants
operator|.
name|MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|length
argument_list|()
operator|%
name|CMConstants
operator|.
name|MAX_UNICODE_MESSAGE_LENGTH_PER_PART_IF_MULTIPART
operator|!=
literal|0
condition|)
block|{
name|parts
operator|++
expr_stmt|;
block|}
name|setMultiparts
argument_list|(
operator|(
name|parts
operator|>
name|defaultMaxNumberOfParts
operator|)
condition|?
name|defaultMaxNumberOfParts
else|:
name|parts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise multipart = 1
name|setMultiparts
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setMultiparts (final int multipart)
specifier|public
name|void
name|setMultiparts
parameter_list|(
specifier|final
name|int
name|multipart
parameter_list|)
block|{
name|this
operator|.
name|multipart
operator|=
name|multipart
expr_stmt|;
block|}
DECL|method|getMultiparts ()
specifier|public
name|int
name|getMultiparts
parameter_list|()
block|{
return|return
name|multipart
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|" {phoneNumber: "
operator|+
name|phoneNumber
operator|+
literal|", message: "
operator|+
name|message
operator|+
literal|", sender="
operator|+
name|sender
operator|+
literal|", unicode: "
operator|+
name|unicode
operator|+
literal|", multipart: "
operator|+
name|multipart
argument_list|)
decl_stmt|;
if|if
condition|(
name|idAsString
operator|!=
literal|null
operator|&&
operator|!
name|idAsString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", idAsString="
operator|+
name|idAsString
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

