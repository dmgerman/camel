begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cm.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
operator|.
name|CMConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|classes
operator|=
block|{
name|ValidatorConfiguration
operator|.
name|class
block|}
argument_list|)
comment|// @DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
comment|// @DisableJmx(false)
comment|// @FixMethodOrder(MethodSorters.NAME_ASCENDING)
DECL|class|CMConfigurationTest
specifier|public
class|class
name|CMConfigurationTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
annotation|@
name|Autowired
DECL|field|validator
specifier|private
name|Validator
name|validator
decl_stmt|;
annotation|@
name|Before
DECL|method|beforeTest ()
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|// @After
comment|// public void afterTest() {
annotation|@
name|Test
DECL|method|testNullProductToken ()
specifier|public
name|void
name|testNullProductToken
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CMConfiguration
name|configuration
init|=
operator|new
name|CMConfiguration
argument_list|()
decl_stmt|;
comment|// length: 1-11
name|configuration
operator|.
name|setDefaultFrom
argument_list|(
literal|"DefaultFrom"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setProductToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultMaxNumberOfParts
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTestConnectionOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|CMConfiguration
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullDefaultFrom ()
specifier|public
name|void
name|testNullDefaultFrom
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CMConfiguration
name|configuration
init|=
operator|new
name|CMConfiguration
argument_list|()
decl_stmt|;
comment|// length: 1-11
name|configuration
operator|.
name|setDefaultFrom
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setProductToken
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultMaxNumberOfParts
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTestConnectionOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|CMConfiguration
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultFromFieldMaxLength ()
specifier|public
name|void
name|testDefaultFromFieldMaxLength
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CMConfiguration
name|configuration
init|=
operator|new
name|CMConfiguration
argument_list|()
decl_stmt|;
comment|// length: 1-11
name|configuration
operator|.
name|setDefaultFrom
argument_list|(
literal|"123456789012"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setProductToken
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultMaxNumberOfParts
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTestConnectionOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|CMConfiguration
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultFromFieldZeroLength ()
specifier|public
name|void
name|testDefaultFromFieldZeroLength
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CMConfiguration
name|configuration
init|=
operator|new
name|CMConfiguration
argument_list|()
decl_stmt|;
comment|// length: 1-11
name|configuration
operator|.
name|setDefaultFrom
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setProductToken
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultMaxNumberOfParts
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTestConnectionOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|CMConfiguration
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxNumberOfParts ()
specifier|public
name|void
name|testMaxNumberOfParts
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CMConfiguration
name|configuration
init|=
operator|new
name|CMConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setProductToken
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultFrom
argument_list|(
literal|"DefaultFrom"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultMaxNumberOfParts
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTestConnectionOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|CMConfiguration
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxNumberOfPartsZero ()
specifier|public
name|void
name|testMaxNumberOfPartsZero
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CMConfiguration
name|configuration
init|=
operator|new
name|CMConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setProductToken
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultFrom
argument_list|(
literal|"DefaultFrom"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDefaultMaxNumberOfParts
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setTestConnectionOnStartup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|CMConfiguration
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

