begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cm.test
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|i18n
operator|.
name|phonenumbers
operator|.
name|PhoneNumberUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|i18n
operator|.
name|phonenumbers
operator|.
name|PhoneNumberUtil
operator|.
name|PhoneNumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|i18n
operator|.
name|phonenumbers
operator|.
name|Phonenumber
operator|.
name|PhoneNumber
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|i18n
operator|.
name|phonenumbers
operator|.
name|Phonenumber
operator|.
name|PhoneNumber
operator|.
name|CountryCodeSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cm
operator|.
name|client
operator|.
name|SMSMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|classes
operator|=
block|{
name|ValidatorConfiguration
operator|.
name|class
block|}
argument_list|)
comment|// @DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
comment|// @DisableJmx(false)
comment|// @FixMethodOrder(MethodSorters.NAME_ASCENDING)
DECL|class|SMSMessageTest
specifier|public
class|class
name|SMSMessageTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
annotation|@
name|Autowired
DECL|field|validator
specifier|private
name|Validator
name|validator
decl_stmt|;
DECL|field|pnu
specifier|private
specifier|final
name|PhoneNumberUtil
name|pnu
init|=
name|PhoneNumberUtil
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|field|validNumber
specifier|private
name|String
name|validNumber
decl_stmt|;
annotation|@
name|Before
DECL|method|beforeTest ()
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|validNumber
operator|=
name|pnu
operator|.
name|format
argument_list|(
name|pnu
operator|.
name|getExampleNumber
argument_list|(
literal|"ES"
argument_list|)
argument_list|,
name|PhoneNumberFormat
operator|.
name|E164
argument_list|)
expr_stmt|;
block|}
comment|// @After
comment|// public void afterTest() {
annotation|@
name|Test
DECL|method|testSMSMessageConstructor ()
specifier|public
name|void
name|testSMSMessageConstructor
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Coverage ;)
name|SMSMessage
name|message
init|=
operator|new
name|SMSMessage
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isNull
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|isNull
argument_list|(
name|message
operator|.
name|getPhoneNumber
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
operator|new
name|SMSMessage
argument_list|(
literal|"idAsString"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"MySelf"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"idAsString"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|message
operator|.
name|getFrom
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MySelf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullMessageField ()
specifier|public
name|void
name|testNullMessageField
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|null
argument_list|,
name|validNumber
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullPhoneNumber ()
specifier|public
name|void
name|testNullPhoneNumber
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"Hello world!"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamicFromFieldMaxLength ()
specifier|public
name|void
name|testDynamicFromFieldMaxLength
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dynamicFrom
init|=
literal|"messagelengthgreaterthan12"
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"idAsString"
argument_list|,
literal|"Hello World"
argument_list|,
name|validNumber
argument_list|,
name|dynamicFrom
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamicFromFieldZeroLength ()
specifier|public
name|void
name|testDynamicFromFieldZeroLength
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zeroLengthDynamicFrom
init|=
literal|""
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"idAsString"
argument_list|,
literal|"Hello World"
argument_list|,
name|validNumber
argument_list|,
name|zeroLengthDynamicFrom
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIdAsStringMaxLength ()
specifier|public
name|void
name|testIdAsStringMaxLength
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|idAsString
init|=
literal|"thisistheidastringlengthgreaterthan32"
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
name|idAsString
argument_list|,
literal|"Hello World"
argument_list|,
name|validNumber
argument_list|,
literal|"MySelf"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIdAsStringFieldZeroLength ()
specifier|public
name|void
name|testIdAsStringFieldZeroLength
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|zeroLengthIdAsString
init|=
literal|""
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
name|zeroLengthIdAsString
argument_list|,
literal|"Hello World"
argument_list|,
name|validNumber
argument_list|,
literal|"MySelf"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testE164NullNumberIsInValid ()
specifier|public
name|void
name|testE164NullNumberIsInValid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|phoneNumber
init|=
literal|null
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"Hello world!"
argument_list|,
name|phoneNumber
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testE164IsValid ()
specifier|public
name|void
name|testE164IsValid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"Hello world!"
argument_list|,
name|validNumber
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|0
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testE164NoPlusSignedNumberIsInvalid ()
specifier|public
name|void
name|testE164NoPlusSignedNumberIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|phoneNumber
init|=
literal|"34600000000"
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"Hello world!"
argument_list|,
name|phoneNumber
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testE164NoPlusSignedNumberBut00IsInvalid ()
specifier|public
name|void
name|testE164NoPlusSignedNumberBut00IsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|phoneNumber
init|=
operator|new
name|PhoneNumber
argument_list|()
operator|.
name|setCountryCodeSource
argument_list|(
name|CountryCodeSource
operator|.
name|FROM_NUMBER_WITHOUT_PLUS_SIGN
argument_list|)
operator|.
name|setNationalNumber
argument_list|(
literal|0034600000000
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"Hello world!"
argument_list|,
name|phoneNumber
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testE164NumberWithPlusSignIsInvalid ()
specifier|public
name|void
name|testE164NumberWithPlusSignIsInvalid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|phoneNumber
init|=
literal|"+34 600 00 00 00"
decl_stmt|;
specifier|final
name|SMSMessage
name|m
init|=
operator|new
name|SMSMessage
argument_list|(
literal|"Hello world!"
argument_list|,
name|phoneNumber
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|ConstraintViolation
argument_list|<
name|SMSMessage
argument_list|>
argument_list|>
name|constraintViolations
init|=
name|validator
operator|.
name|validate
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
literal|1
operator|==
name|constraintViolations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

