begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb.gridfs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|gridfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObjectBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|gridfs
operator|.
name|GridFSDBFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|util
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
DECL|class|GridFsConsumer
specifier|public
class|class
name|GridFsConsumer
extends|extends
name|DefaultConsumer
implements|implements
name|Runnable
block|{
DECL|field|endpoint
specifier|final
name|GridFsEndpoint
name|endpoint
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
comment|/**      * @param endpoint      * @param processor      */
DECL|method|GridFsConsumer (GridFsEndpoint endpoint, Processor processor)
specifier|public
name|GridFsConsumer
parameter_list|(
name|GridFsEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|executor
operator|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newFixedThreadPool
argument_list|(
name|this
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DBCursor
name|c
init|=
literal|null
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|Date
name|fromDate
init|=
literal|null
decl_stmt|;
name|QueryStrategy
name|s
init|=
name|endpoint
operator|.
name|getQueryStrategy
argument_list|()
decl_stmt|;
name|boolean
name|usesTimestamp
init|=
name|s
operator|!=
name|QueryStrategy
operator|.
name|FileAttribute
decl_stmt|;
name|boolean
name|persistsTimestamp
init|=
name|s
operator|==
name|QueryStrategy
operator|.
name|PersistentTimestamp
operator|||
name|s
operator|==
name|QueryStrategy
operator|.
name|PersistentTimestampAndFileAttribute
decl_stmt|;
name|boolean
name|usesAttribute
init|=
name|s
operator|==
name|QueryStrategy
operator|.
name|FileAttribute
operator|||
name|s
operator|==
name|QueryStrategy
operator|.
name|TimeStampAndFileAttribute
operator|||
name|s
operator|==
name|QueryStrategy
operator|.
name|PersistentTimestampAndFileAttribute
decl_stmt|;
name|DBCollection
name|ptsCollection
init|=
literal|null
decl_stmt|;
name|DBObject
name|persistentTimestamp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|persistsTimestamp
condition|)
block|{
name|ptsCollection
operator|=
name|endpoint
operator|.
name|getDB
argument_list|()
operator|.
name|getCollection
argument_list|(
name|endpoint
operator|.
name|getPersistentTSCollection
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure standard indexes as long as collections are small
try|try
block|{
if|if
condition|(
name|ptsCollection
operator|.
name|count
argument_list|()
operator|<
literal|1000
condition|)
block|{
name|ptsCollection
operator|.
name|createIndex
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MongoException
name|e
parameter_list|)
block|{
comment|//TODO: Logging
block|}
name|persistentTimestamp
operator|=
name|ptsCollection
operator|.
name|findOne
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"id"
argument_list|,
name|endpoint
operator|.
name|getPersistentTSObject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|persistentTimestamp
operator|==
literal|null
condition|)
block|{
name|persistentTimestamp
operator|=
operator|new
name|BasicDBObject
argument_list|(
literal|"id"
argument_list|,
name|endpoint
operator|.
name|getPersistentTSObject
argument_list|()
argument_list|)
expr_stmt|;
name|fromDate
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
expr_stmt|;
name|persistentTimestamp
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|fromDate
argument_list|)
expr_stmt|;
name|ptsCollection
operator|.
name|save
argument_list|(
name|persistentTimestamp
argument_list|)
expr_stmt|;
block|}
name|fromDate
operator|=
operator|(
name|java
operator|.
name|util
operator|.
name|Date
operator|)
name|persistentTimestamp
operator|.
name|get
argument_list|(
literal|"timestamp"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|usesTimestamp
condition|)
block|{
name|fromDate
operator|=
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|endpoint
operator|.
name|getInitialDelay
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|isStarted
argument_list|()
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
operator|||
name|c
operator|.
name|getCursorId
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|queryString
init|=
name|endpoint
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|DBObject
name|query
decl_stmt|;
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usesTimestamp
condition|)
block|{
name|query
operator|.
name|put
argument_list|(
literal|"uploadDate"
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
literal|"$gt"
argument_list|,
name|fromDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usesAttribute
condition|)
block|{
name|query
operator|.
name|put
argument_list|(
name|endpoint
operator|.
name|getFileAttributeName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|c
operator|=
name|endpoint
operator|.
name|getFilesCollection
argument_list|()
operator|.
name|find
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
name|boolean
name|dateModified
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|c
operator|.
name|hasNext
argument_list|()
operator|&&
name|isStarted
argument_list|()
condition|)
block|{
name|GridFSDBFile
name|file
init|=
operator|(
name|GridFSDBFile
operator|)
name|c
operator|.
name|next
argument_list|()
decl_stmt|;
name|GridFSDBFile
name|forig
init|=
name|file
decl_stmt|;
if|if
condition|(
name|usesAttribute
condition|)
block|{
name|file
operator|.
name|put
argument_list|(
name|endpoint
operator|.
name|getFileAttributeName
argument_list|()
argument_list|,
literal|"processing"
argument_list|)
expr_stmt|;
name|DBObject
name|q
init|=
name|BasicDBObjectBuilder
operator|.
name|start
argument_list|(
literal|"_id"
argument_list|,
name|file
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"camel-processed"
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|forig
operator|=
operator|(
name|GridFSDBFile
operator|)
name|endpoint
operator|.
name|getFilesCollection
argument_list|()
operator|.
name|findAndModify
argument_list|(
name|q
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|file
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|forig
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
name|endpoint
operator|.
name|getGridFs
argument_list|()
operator|.
name|findOne
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
literal|"_id"
argument_list|,
name|file
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GridFsEndpoint
operator|.
name|GRIDFS_METADATA
argument_list|,
name|JSON
operator|.
name|serialize
argument_list|(
name|file
operator|.
name|getMetaData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_CONTENT_TYPE
argument_list|,
name|file
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LENGTH
argument_list|,
name|file
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|FILE_LAST_MODIFIED
argument_list|,
name|file
operator|.
name|getUploadDate
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|file
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|//System.out.println("Processing " + file.getFilename());
if|if
condition|(
name|usesAttribute
condition|)
block|{
name|forig
operator|.
name|put
argument_list|(
name|endpoint
operator|.
name|getFileAttributeName
argument_list|()
argument_list|,
literal|"done"
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getFilesCollection
argument_list|()
operator|.
name|save
argument_list|(
name|forig
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usesTimestamp
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|getUploadDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|fromDate
argument_list|)
operator|>
literal|0
condition|)
block|{
name|fromDate
operator|=
name|file
operator|.
name|getUploadDate
argument_list|()
expr_stmt|;
name|dateModified
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|persistsTimestamp
operator|&&
name|dateModified
condition|)
block|{
name|persistentTimestamp
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|fromDate
argument_list|)
expr_stmt|;
name|ptsCollection
operator|.
name|save
argument_list|(
name|persistentTimestamp
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|endpoint
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

