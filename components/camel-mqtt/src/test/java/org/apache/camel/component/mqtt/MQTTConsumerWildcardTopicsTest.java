begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mqtt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MQTTConsumerWildcardTopicsTest
specifier|public
class|class
name|MQTTConsumerWildcardTopicsTest
extends|extends
name|MQTTBaseTest
block|{
DECL|field|PUBLISH_TOPICS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|PUBLISH_TOPICS
init|=
block|{
name|TEST_TOPIC
block|,
name|TEST_TOPIC_2
block|,
literal|"base"
block|,
comment|// doesn't match wildcard
literal|"base/foo"
block|,
comment|// matches
literal|"base/foo/bar"
block|,
comment|// matches
literal|"base/bat/data/baz/splat"
comment|// matches
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testConsumeMultipleTopicsWithWildcards ()
specifier|public
name|void
name|testConsumeMultipleTopicsWithWildcards
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
operator|new
name|MQTT
argument_list|()
decl_stmt|;
name|BlockingConnection
name|publisherConnection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
name|numberOfMessages
operator|*
operator|(
name|PUBLISH_TOPICS
operator|.
name|length
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|publisherConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|String
name|payload
decl_stmt|;
for|for
control|(
name|String
name|topic
range|:
name|PUBLISH_TOPICS
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|payload
operator|=
literal|"Topic "
operator|+
name|topic
operator|+
literal|", Message "
operator|+
name|i
expr_stmt|;
name|publisherConnection
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|mock
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"mqtt:bar?subscribeTopicNames="
operator|+
name|TEST_TOPICS_WITH_WILDCARDS
argument_list|)
operator|.
name|transform
argument_list|(
name|body
argument_list|()
operator|.
name|convertToString
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

