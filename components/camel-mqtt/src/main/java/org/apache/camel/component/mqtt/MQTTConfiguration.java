begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mqtt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtdispatch
operator|.
name|DispatchQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtdispatch
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Tracer
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|MQTTConfiguration
specifier|public
class|class
name|MQTTConfiguration
extends|extends
name|MQTT
block|{
DECL|field|MQTT_SUBSCRIBE_TOPIC
specifier|public
specifier|static
specifier|final
name|String
name|MQTT_SUBSCRIBE_TOPIC
init|=
literal|"CamelMQTTSubscribeTopic"
decl_stmt|;
DECL|field|MQTT_PUBLISH_TOPIC
specifier|public
specifier|static
specifier|final
name|String
name|MQTT_PUBLISH_TOPIC
init|=
literal|"CamelMQTTPublishTopic"
decl_stmt|;
comment|/**      * These a properties that are looked for in an Exchange - to publish to      */
DECL|field|mqttTopicPropertyName
specifier|private
name|String
name|mqttTopicPropertyName
init|=
literal|"MQTTTopicPropertyName"
decl_stmt|;
DECL|field|mqttRetainPropertyName
specifier|private
name|String
name|mqttRetainPropertyName
init|=
literal|"MQTTRetain"
decl_stmt|;
DECL|field|mqttQosPropertyName
specifier|private
name|String
name|mqttQosPropertyName
init|=
literal|"MQTTQos"
decl_stmt|;
comment|/**      * These are set on the Endpoint - together with properties inherited from MQTT      */
annotation|@
name|UriParam
DECL|field|subscribeTopicName
specifier|private
name|String
name|subscribeTopicName
init|=
literal|""
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"camel/mqtt/test"
argument_list|)
DECL|field|publishTopicName
specifier|private
name|String
name|publishTopicName
init|=
literal|"camel/mqtt/test"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|connectWaitInSeconds
specifier|private
name|int
name|connectWaitInSeconds
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"5"
argument_list|)
DECL|field|disconnectWaitInSeconds
specifier|private
name|int
name|disconnectWaitInSeconds
init|=
literal|5
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"5"
argument_list|)
DECL|field|sendWaitInSeconds
specifier|private
name|int
name|sendWaitInSeconds
init|=
literal|5
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|byDefaultRetain
specifier|private
name|boolean
name|byDefaultRetain
decl_stmt|;
annotation|@
name|UriParam
DECL|field|qos
specifier|private
name|QoS
name|qos
init|=
name|QoS
operator|.
name|AT_LEAST_ONCE
decl_stmt|;
DECL|field|qualityOfService
specifier|private
name|String
name|qualityOfService
init|=
name|QoS
operator|.
name|AT_LEAST_ONCE
operator|.
name|name
argument_list|()
decl_stmt|;
comment|// inherited options from MQTT
annotation|@
name|UriParam
DECL|field|host
name|URI
name|host
decl_stmt|;
annotation|@
name|UriParam
DECL|field|localAddress
name|URI
name|localAddress
decl_stmt|;
annotation|@
name|UriParam
DECL|field|sslContext
name|SSLContext
name|sslContext
decl_stmt|;
annotation|@
name|UriParam
DECL|field|dispatchQueue
name|DispatchQueue
name|dispatchQueue
decl_stmt|;
annotation|@
name|UriParam
DECL|field|blockingExecutor
name|Executor
name|blockingExecutor
decl_stmt|;
annotation|@
name|UriParam
DECL|field|maxReadRate
name|int
name|maxReadRate
decl_stmt|;
annotation|@
name|UriParam
DECL|field|maxWriteRate
name|int
name|maxWriteRate
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|TcpTransport
operator|.
name|IPTOS_THROUGHPUT
argument_list|)
DECL|field|trafficClass
name|int
name|trafficClass
init|=
name|TcpTransport
operator|.
name|IPTOS_THROUGHPUT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
literal|1024
operator|*
literal|64
argument_list|)
DECL|field|receiveBufferSize
name|int
name|receiveBufferSize
init|=
literal|1024
operator|*
literal|64
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
literal|1024
operator|*
literal|64
argument_list|)
DECL|field|sendBufferSize
name|int
name|sendBufferSize
init|=
literal|1024
operator|*
literal|64
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|useLocalHost
name|boolean
name|useLocalHost
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|reconnectDelay
name|long
name|reconnectDelay
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
literal|30
operator|*
literal|1000
argument_list|)
DECL|field|reconnectDelayMax
name|long
name|reconnectDelayMax
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"2.0"
argument_list|)
DECL|field|reconnectBackOffMultiplier
name|double
name|reconnectBackOffMultiplier
init|=
literal|2.0f
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"-1"
argument_list|)
DECL|field|reconnectAttemptsMax
name|long
name|reconnectAttemptsMax
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"-1"
argument_list|)
DECL|field|connectAttemptsMax
name|long
name|connectAttemptsMax
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
DECL|field|tracer
name|Tracer
name|tracer
decl_stmt|;
DECL|method|getQualityOfService ()
specifier|public
name|String
name|getQualityOfService
parameter_list|()
block|{
return|return
name|qualityOfService
return|;
block|}
DECL|method|setQualityOfService (String qualityOfService)
specifier|public
name|void
name|setQualityOfService
parameter_list|(
name|String
name|qualityOfService
parameter_list|)
block|{
name|this
operator|.
name|qos
operator|=
name|getQoS
argument_list|(
name|qualityOfService
argument_list|)
expr_stmt|;
name|this
operator|.
name|qualityOfService
operator|=
name|qualityOfService
expr_stmt|;
block|}
DECL|method|getQoS ()
specifier|public
name|QoS
name|getQoS
parameter_list|()
block|{
return|return
name|qos
return|;
block|}
DECL|method|getSubscribeTopicName ()
specifier|public
name|String
name|getSubscribeTopicName
parameter_list|()
block|{
return|return
name|subscribeTopicName
return|;
block|}
DECL|method|setSubscribeTopicName (String subscribeTopicName)
specifier|public
name|void
name|setSubscribeTopicName
parameter_list|(
name|String
name|subscribeTopicName
parameter_list|)
block|{
name|this
operator|.
name|subscribeTopicName
operator|=
name|subscribeTopicName
expr_stmt|;
block|}
DECL|method|getPublishTopicName ()
specifier|public
name|String
name|getPublishTopicName
parameter_list|()
block|{
return|return
name|publishTopicName
return|;
block|}
DECL|method|setPublishTopicName (String publishTopicName)
specifier|public
name|void
name|setPublishTopicName
parameter_list|(
name|String
name|publishTopicName
parameter_list|)
block|{
name|this
operator|.
name|publishTopicName
operator|=
name|publishTopicName
expr_stmt|;
block|}
comment|/**      * Please use MQTT_SUBSCRIBE_TOPIC and MQTT_PUBLISH_TOPIC to set or get the topic name      */
annotation|@
name|Deprecated
DECL|method|getMqttTopicPropertyName ()
specifier|public
name|String
name|getMqttTopicPropertyName
parameter_list|()
block|{
return|return
name|mqttTopicPropertyName
return|;
block|}
comment|/**      * Please use MQTT_SUBSCRIBE_TOPIC and MQTT_PUBLISH_TOPIC to set or get the topic name      */
annotation|@
name|Deprecated
DECL|method|setMqttTopicPropertyName (String mqttTopicPropertyName)
specifier|public
name|void
name|setMqttTopicPropertyName
parameter_list|(
name|String
name|mqttTopicPropertyName
parameter_list|)
block|{
name|this
operator|.
name|mqttTopicPropertyName
operator|=
name|mqttTopicPropertyName
expr_stmt|;
block|}
DECL|method|getMqttRetainPropertyName ()
specifier|public
name|String
name|getMqttRetainPropertyName
parameter_list|()
block|{
return|return
name|mqttRetainPropertyName
return|;
block|}
DECL|method|setMqttRetainPropertyName (String mqttRetainPropertyName)
specifier|public
name|void
name|setMqttRetainPropertyName
parameter_list|(
name|String
name|mqttRetainPropertyName
parameter_list|)
block|{
name|this
operator|.
name|mqttRetainPropertyName
operator|=
name|mqttRetainPropertyName
expr_stmt|;
block|}
DECL|method|getMqttQosPropertyName ()
specifier|public
name|String
name|getMqttQosPropertyName
parameter_list|()
block|{
return|return
name|mqttQosPropertyName
return|;
block|}
DECL|method|setMqttQosPropertyName (String mqttQosPropertyName)
specifier|public
name|void
name|setMqttQosPropertyName
parameter_list|(
name|String
name|mqttQosPropertyName
parameter_list|)
block|{
name|this
operator|.
name|mqttQosPropertyName
operator|=
name|mqttQosPropertyName
expr_stmt|;
block|}
DECL|method|getConnectWaitInSeconds ()
specifier|public
name|int
name|getConnectWaitInSeconds
parameter_list|()
block|{
return|return
name|connectWaitInSeconds
return|;
block|}
DECL|method|setConnectWaitInSeconds (int connectWaitInSeconds)
specifier|public
name|void
name|setConnectWaitInSeconds
parameter_list|(
name|int
name|connectWaitInSeconds
parameter_list|)
block|{
name|this
operator|.
name|connectWaitInSeconds
operator|=
name|connectWaitInSeconds
expr_stmt|;
block|}
DECL|method|getDisconnectWaitInSeconds ()
specifier|public
name|int
name|getDisconnectWaitInSeconds
parameter_list|()
block|{
return|return
name|disconnectWaitInSeconds
return|;
block|}
DECL|method|setDisconnectWaitInSeconds (int disconnectWaitInSeconds)
specifier|public
name|void
name|setDisconnectWaitInSeconds
parameter_list|(
name|int
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|this
operator|.
name|disconnectWaitInSeconds
operator|=
name|disconnectWaitInSeconds
expr_stmt|;
block|}
DECL|method|getSendWaitInSeconds ()
specifier|public
name|int
name|getSendWaitInSeconds
parameter_list|()
block|{
return|return
name|sendWaitInSeconds
return|;
block|}
DECL|method|setSendWaitInSeconds (int sendWaitInSeconds)
specifier|public
name|void
name|setSendWaitInSeconds
parameter_list|(
name|int
name|sendWaitInSeconds
parameter_list|)
block|{
name|this
operator|.
name|sendWaitInSeconds
operator|=
name|sendWaitInSeconds
expr_stmt|;
block|}
DECL|method|isByDefaultRetain ()
specifier|public
name|boolean
name|isByDefaultRetain
parameter_list|()
block|{
return|return
name|byDefaultRetain
return|;
block|}
DECL|method|setByDefaultRetain (boolean byDefaultRetain)
specifier|public
name|void
name|setByDefaultRetain
parameter_list|(
name|boolean
name|byDefaultRetain
parameter_list|)
block|{
name|this
operator|.
name|byDefaultRetain
operator|=
name|byDefaultRetain
expr_stmt|;
block|}
DECL|method|getQoS (String qualityOfService)
specifier|static
name|QoS
name|getQoS
parameter_list|(
name|String
name|qualityOfService
parameter_list|)
block|{
for|for
control|(
name|QoS
name|q
range|:
name|QoS
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|qualityOfService
argument_list|)
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
if|if
condition|(
name|qualityOfService
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ATMOSTONCE"
argument_list|)
condition|)
block|{
return|return
name|QoS
operator|.
name|AT_MOST_ONCE
return|;
block|}
if|if
condition|(
name|qualityOfService
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EXACTLYONCE"
argument_list|)
condition|)
block|{
return|return
name|QoS
operator|.
name|EXACTLY_ONCE
return|;
block|}
if|if
condition|(
name|qualityOfService
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ATLEASTONCE"
argument_list|)
condition|)
block|{
return|return
name|QoS
operator|.
name|AT_LEAST_ONCE
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There is no QoS with name "
operator|+
name|qualityOfService
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

