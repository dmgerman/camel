begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mqtt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtdispatch
operator|.
name|DispatchQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtdispatch
operator|.
name|transport
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|MQTTConfiguration
specifier|public
class|class
name|MQTTConfiguration
extends|extends
name|MQTT
block|{
DECL|field|MQTT_SUBSCRIBE_TOPIC
specifier|public
specifier|static
specifier|final
name|String
name|MQTT_SUBSCRIBE_TOPIC
init|=
literal|"CamelMQTTSubscribeTopic"
decl_stmt|;
DECL|field|MQTT_PUBLISH_TOPIC
specifier|public
specifier|static
specifier|final
name|String
name|MQTT_PUBLISH_TOPIC
init|=
literal|"CamelMQTTPublishTopic"
decl_stmt|;
comment|// inherited options from MQTT
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"tcp://127.0.0.1:1883"
argument_list|)
DECL|field|host
name|URI
name|host
decl_stmt|;
annotation|@
name|UriParam
DECL|field|localAddress
name|URI
name|localAddress
decl_stmt|;
annotation|@
name|UriParam
DECL|field|sslContext
name|SSLContext
name|sslContext
decl_stmt|;
annotation|@
name|UriParam
DECL|field|dispatchQueue
name|DispatchQueue
name|dispatchQueue
decl_stmt|;
annotation|@
name|UriParam
DECL|field|blockingExecutor
name|Executor
name|blockingExecutor
decl_stmt|;
annotation|@
name|UriParam
DECL|field|maxReadRate
name|int
name|maxReadRate
decl_stmt|;
annotation|@
name|UriParam
DECL|field|maxWriteRate
name|int
name|maxWriteRate
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|TcpTransport
operator|.
name|IPTOS_THROUGHPUT
argument_list|)
DECL|field|trafficClass
name|int
name|trafficClass
init|=
name|TcpTransport
operator|.
name|IPTOS_THROUGHPUT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
literal|1024
operator|*
literal|64
argument_list|)
DECL|field|receiveBufferSize
name|int
name|receiveBufferSize
init|=
literal|1024
operator|*
literal|64
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
literal|1024
operator|*
literal|64
argument_list|)
DECL|field|sendBufferSize
name|int
name|sendBufferSize
init|=
literal|1024
operator|*
literal|64
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|reconnectDelay
name|long
name|reconnectDelay
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
literal|30
operator|*
literal|1000
argument_list|)
DECL|field|reconnectDelayMax
name|long
name|reconnectDelayMax
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"2.0"
argument_list|)
DECL|field|reconnectBackOffMultiplier
name|double
name|reconnectBackOffMultiplier
init|=
literal|2.0f
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"-1"
argument_list|)
DECL|field|reconnectAttemptsMax
name|long
name|reconnectAttemptsMax
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"-1"
argument_list|)
DECL|field|connectAttemptsMax
name|long
name|connectAttemptsMax
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
DECL|field|clientId
name|String
name|clientId
decl_stmt|;
annotation|@
name|UriParam
DECL|field|cleanSession
name|boolean
name|cleanSession
decl_stmt|;
annotation|@
name|UriParam
DECL|field|keepAlive
name|short
name|keepAlive
decl_stmt|;
annotation|@
name|UriParam
DECL|field|willTopic
name|String
name|willTopic
decl_stmt|;
annotation|@
name|UriParam
DECL|field|willMessage
name|String
name|willMessage
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"AtMostOnce,AtLeastOnce,ExactlyOnce"
argument_list|,
name|defaultValue
operator|=
literal|"AtMostOnce"
argument_list|)
DECL|field|willQos
name|QoS
name|willQos
init|=
name|QoS
operator|.
name|AT_MOST_ONCE
decl_stmt|;
annotation|@
name|UriParam
DECL|field|willRetain
name|QoS
name|willRetain
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"3.1"
argument_list|)
DECL|field|version
name|String
name|version
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|lazySessionCreation
specifier|private
name|boolean
name|lazySessionCreation
init|=
literal|true
decl_stmt|;
comment|/**      * These a properties that are looked for in an Exchange - to publish to      */
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"MQTTTopicPropertyName"
argument_list|)
DECL|field|mqttTopicPropertyName
specifier|private
name|String
name|mqttTopicPropertyName
init|=
literal|"MQTTTopicPropertyName"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"MQTTRetain"
argument_list|)
DECL|field|mqttRetainPropertyName
specifier|private
name|String
name|mqttRetainPropertyName
init|=
literal|"MQTTRetain"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"MQTTQos"
argument_list|)
DECL|field|mqttQosPropertyName
specifier|private
name|String
name|mqttQosPropertyName
init|=
literal|"MQTTQos"
decl_stmt|;
comment|/**      * These are set on the Endpoint - together with properties inherited from MQTT      */
annotation|@
name|UriParam
annotation|@
name|Deprecated
DECL|field|subscribeTopicName
specifier|private
name|String
name|subscribeTopicName
init|=
literal|""
decl_stmt|;
annotation|@
name|UriParam
DECL|field|subscribeTopicNames
specifier|private
name|String
name|subscribeTopicNames
init|=
literal|""
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"camel/mqtt/test"
argument_list|)
DECL|field|publishTopicName
specifier|private
name|String
name|publishTopicName
init|=
literal|"camel/mqtt/test"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|connectWaitInSeconds
specifier|private
name|int
name|connectWaitInSeconds
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"5"
argument_list|)
DECL|field|disconnectWaitInSeconds
specifier|private
name|int
name|disconnectWaitInSeconds
init|=
literal|5
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"5"
argument_list|)
DECL|field|sendWaitInSeconds
specifier|private
name|int
name|sendWaitInSeconds
init|=
literal|5
decl_stmt|;
annotation|@
name|UriParam
DECL|field|byDefaultRetain
specifier|private
name|boolean
name|byDefaultRetain
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"AtMostOnce,AtLeastOnce,ExactlyOnce"
argument_list|,
name|defaultValue
operator|=
literal|"AtLeastOnce"
argument_list|)
DECL|field|qualityOfService
specifier|private
name|String
name|qualityOfService
init|=
name|QoS
operator|.
name|AT_LEAST_ONCE
operator|.
name|name
argument_list|()
decl_stmt|;
DECL|field|qos
specifier|private
name|QoS
name|qos
init|=
name|QoS
operator|.
name|AT_LEAST_ONCE
decl_stmt|;
DECL|method|getQualityOfService ()
specifier|public
name|String
name|getQualityOfService
parameter_list|()
block|{
return|return
name|qualityOfService
return|;
block|}
comment|/**      * Quality of service level to use for topics.      */
DECL|method|setQualityOfService (String qualityOfService)
specifier|public
name|void
name|setQualityOfService
parameter_list|(
name|String
name|qualityOfService
parameter_list|)
block|{
name|this
operator|.
name|qos
operator|=
name|getQoS
argument_list|(
name|qualityOfService
argument_list|)
expr_stmt|;
name|this
operator|.
name|qualityOfService
operator|=
name|qualityOfService
expr_stmt|;
block|}
DECL|method|getQoS ()
specifier|public
name|QoS
name|getQoS
parameter_list|()
block|{
return|return
name|qos
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getSubscribeTopicName ()
specifier|public
name|String
name|getSubscribeTopicName
parameter_list|()
block|{
return|return
name|subscribeTopicName
return|;
block|}
comment|/**      * The name of the Topic to subscribe to for messages.      */
annotation|@
name|Deprecated
DECL|method|setSubscribeTopicName (String subscribeTopicName)
specifier|public
name|void
name|setSubscribeTopicName
parameter_list|(
name|String
name|subscribeTopicName
parameter_list|)
block|{
name|this
operator|.
name|subscribeTopicName
operator|=
name|subscribeTopicName
expr_stmt|;
block|}
DECL|method|getSubscribeTopicNames ()
specifier|public
name|String
name|getSubscribeTopicNames
parameter_list|()
block|{
return|return
name|subscribeTopicNames
return|;
block|}
comment|/**      * A comma-delimited list of Topics to subscribe to for messages.      * Note that each item of this list can contain MQTT wildcards (+ and/or #), in order to subscribe      * to topics matching a certain pattern within a hierarchy.      * For example, + is a wildcard for all topics at a level within the hierarchy,      * so if a broker has topics topics/one and topics/two, then topics/+ can be used to subscribe to both.      * A caveat to consider here is that if the broker adds topics/three, the route would also begin to receive messages from that topic.      */
DECL|method|setSubscribeTopicNames (String subscribeTopicNames)
specifier|public
name|void
name|setSubscribeTopicNames
parameter_list|(
name|String
name|subscribeTopicNames
parameter_list|)
block|{
name|this
operator|.
name|subscribeTopicNames
operator|=
name|subscribeTopicNames
expr_stmt|;
block|}
DECL|method|getPublishTopicName ()
specifier|public
name|String
name|getPublishTopicName
parameter_list|()
block|{
return|return
name|publishTopicName
return|;
block|}
comment|/**      * The default Topic to publish messages on      */
DECL|method|setPublishTopicName (String publishTopicName)
specifier|public
name|void
name|setPublishTopicName
parameter_list|(
name|String
name|publishTopicName
parameter_list|)
block|{
name|this
operator|.
name|publishTopicName
operator|=
name|publishTopicName
expr_stmt|;
block|}
comment|/**      * Please use MQTT_SUBSCRIBE_TOPIC and MQTT_PUBLISH_TOPIC to set or get the topic name      */
annotation|@
name|Deprecated
DECL|method|getMqttTopicPropertyName ()
specifier|public
name|String
name|getMqttTopicPropertyName
parameter_list|()
block|{
return|return
name|mqttTopicPropertyName
return|;
block|}
comment|/**      * Please use MQTT_SUBSCRIBE_TOPIC and MQTT_PUBLISH_TOPIC to set or get the topic name      */
annotation|@
name|Deprecated
DECL|method|setMqttTopicPropertyName (String mqttTopicPropertyName)
specifier|public
name|void
name|setMqttTopicPropertyName
parameter_list|(
name|String
name|mqttTopicPropertyName
parameter_list|)
block|{
name|this
operator|.
name|mqttTopicPropertyName
operator|=
name|mqttTopicPropertyName
expr_stmt|;
block|}
DECL|method|getMqttRetainPropertyName ()
specifier|public
name|String
name|getMqttRetainPropertyName
parameter_list|()
block|{
return|return
name|mqttRetainPropertyName
return|;
block|}
comment|/**      * The property name to look for on an Exchange for an individual published message.      * If this is set (expects a Boolean value) - then the retain property will be set on the message sent to the MQTT message broker.      */
DECL|method|setMqttRetainPropertyName (String mqttRetainPropertyName)
specifier|public
name|void
name|setMqttRetainPropertyName
parameter_list|(
name|String
name|mqttRetainPropertyName
parameter_list|)
block|{
name|this
operator|.
name|mqttRetainPropertyName
operator|=
name|mqttRetainPropertyName
expr_stmt|;
block|}
DECL|method|getMqttQosPropertyName ()
specifier|public
name|String
name|getMqttQosPropertyName
parameter_list|()
block|{
return|return
name|mqttQosPropertyName
return|;
block|}
comment|/**      * The property name to look for on an Exchange for an individual published message.      * If this is set (one of AtMostOnce, AtLeastOnce or ExactlyOnce ) - then that QoS will be set on the message sent to the MQTT message broker.      */
DECL|method|setMqttQosPropertyName (String mqttQosPropertyName)
specifier|public
name|void
name|setMqttQosPropertyName
parameter_list|(
name|String
name|mqttQosPropertyName
parameter_list|)
block|{
name|this
operator|.
name|mqttQosPropertyName
operator|=
name|mqttQosPropertyName
expr_stmt|;
block|}
DECL|method|getConnectWaitInSeconds ()
specifier|public
name|int
name|getConnectWaitInSeconds
parameter_list|()
block|{
return|return
name|connectWaitInSeconds
return|;
block|}
comment|/**      * Delay in seconds the Component will wait for a connection to be established to the MQTT broker      */
DECL|method|setConnectWaitInSeconds (int connectWaitInSeconds)
specifier|public
name|void
name|setConnectWaitInSeconds
parameter_list|(
name|int
name|connectWaitInSeconds
parameter_list|)
block|{
name|this
operator|.
name|connectWaitInSeconds
operator|=
name|connectWaitInSeconds
expr_stmt|;
block|}
DECL|method|getDisconnectWaitInSeconds ()
specifier|public
name|int
name|getDisconnectWaitInSeconds
parameter_list|()
block|{
return|return
name|disconnectWaitInSeconds
return|;
block|}
comment|/**      * The number of seconds the Component will wait for a valid disconnect on stop() from the MQTT broker      */
DECL|method|setDisconnectWaitInSeconds (int disconnectWaitInSeconds)
specifier|public
name|void
name|setDisconnectWaitInSeconds
parameter_list|(
name|int
name|disconnectWaitInSeconds
parameter_list|)
block|{
name|this
operator|.
name|disconnectWaitInSeconds
operator|=
name|disconnectWaitInSeconds
expr_stmt|;
block|}
DECL|method|getSendWaitInSeconds ()
specifier|public
name|int
name|getSendWaitInSeconds
parameter_list|()
block|{
return|return
name|sendWaitInSeconds
return|;
block|}
comment|/**      * The maximum time the Component will wait for a receipt from the MQTT broker to acknowledge a published message before throwing an exception      */
DECL|method|setSendWaitInSeconds (int sendWaitInSeconds)
specifier|public
name|void
name|setSendWaitInSeconds
parameter_list|(
name|int
name|sendWaitInSeconds
parameter_list|)
block|{
name|this
operator|.
name|sendWaitInSeconds
operator|=
name|sendWaitInSeconds
expr_stmt|;
block|}
DECL|method|isByDefaultRetain ()
specifier|public
name|boolean
name|isByDefaultRetain
parameter_list|()
block|{
return|return
name|byDefaultRetain
return|;
block|}
comment|/**      * The default retain policy to be used on messages sent to the MQTT broker      */
DECL|method|setByDefaultRetain (boolean byDefaultRetain)
specifier|public
name|void
name|setByDefaultRetain
parameter_list|(
name|boolean
name|byDefaultRetain
parameter_list|)
block|{
name|this
operator|.
name|byDefaultRetain
operator|=
name|byDefaultRetain
expr_stmt|;
block|}
DECL|method|getQoS (String qualityOfService)
specifier|static
name|QoS
name|getQoS
parameter_list|(
name|String
name|qualityOfService
parameter_list|)
block|{
for|for
control|(
name|QoS
name|q
range|:
name|QoS
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|qualityOfService
argument_list|)
condition|)
block|{
return|return
name|q
return|;
block|}
block|}
if|if
condition|(
name|qualityOfService
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ATMOSTONCE"
argument_list|)
condition|)
block|{
return|return
name|QoS
operator|.
name|AT_MOST_ONCE
return|;
block|}
if|if
condition|(
name|qualityOfService
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"EXACTLYONCE"
argument_list|)
condition|)
block|{
return|return
name|QoS
operator|.
name|EXACTLY_ONCE
return|;
block|}
if|if
condition|(
name|qualityOfService
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ATLEASTONCE"
argument_list|)
condition|)
block|{
return|return
name|QoS
operator|.
name|AT_LEAST_ONCE
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There is no QoS with name "
operator|+
name|qualityOfService
argument_list|)
throw|;
block|}
comment|/**      *  Use to set the client Id of the session.      *  This is what an MQTT server uses to identify a session where setCleanSession(false); is being used.      *  The id must be 23 characters or less. Defaults to auto generated id (based on your socket address, port and timestamp).      */
annotation|@
name|Override
DECL|method|setClientId (String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|super
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set to false if you want the MQTT server to persist topic subscriptions and ack positions across client sessions. Defaults to true.      */
annotation|@
name|Override
DECL|method|setCleanSession (boolean cleanSession)
specifier|public
name|void
name|setCleanSession
parameter_list|(
name|boolean
name|cleanSession
parameter_list|)
block|{
name|super
operator|.
name|setCleanSession
argument_list|(
name|cleanSession
argument_list|)
expr_stmt|;
block|}
comment|/**      * Configures the Keep Alive timer in seconds. Defines the maximum time interval between messages received from a client.      * It enables the server to detect that the network connection to a client has dropped, without having to wait for the long TCP/IP timeout.      */
annotation|@
name|Override
DECL|method|setKeepAlive (short keepAlive)
specifier|public
name|void
name|setKeepAlive
parameter_list|(
name|short
name|keepAlive
parameter_list|)
block|{
name|super
operator|.
name|setKeepAlive
argument_list|(
name|keepAlive
argument_list|)
expr_stmt|;
block|}
comment|/**      * Password to be used for authentication against the MQTT broker      */
annotation|@
name|Override
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|super
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
comment|/**      * Username to be used for authentication against the MQTT broker      */
annotation|@
name|Override
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|super
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
comment|/**      * The Will message to send. Defaults to a zero length message.      */
annotation|@
name|Override
DECL|method|setWillMessage (String willMessage)
specifier|public
name|void
name|setWillMessage
parameter_list|(
name|String
name|willMessage
parameter_list|)
block|{
name|super
operator|.
name|setWillMessage
argument_list|(
name|willMessage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the quality of service to use for the Will message. Defaults to AT_MOST_ONCE.      */
annotation|@
name|Override
DECL|method|setWillQos (QoS willQos)
specifier|public
name|void
name|setWillQos
parameter_list|(
name|QoS
name|willQos
parameter_list|)
block|{
name|super
operator|.
name|setWillQos
argument_list|(
name|willQos
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set to 3.1.1 to use MQTT version 3.1.1. Otherwise defaults to the 3.1 protocol version.      */
annotation|@
name|Override
DECL|method|setVersion (String version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|super
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVersion ()
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|super
operator|.
name|getVersion
argument_list|()
return|;
block|}
comment|/**      * Set to true if you want the Will to be published with the retain option.      */
annotation|@
name|Override
DECL|method|setWillRetain (boolean willRetain)
specifier|public
name|void
name|setWillRetain
parameter_list|(
name|boolean
name|willRetain
parameter_list|)
block|{
name|super
operator|.
name|setWillRetain
argument_list|(
name|willRetain
argument_list|)
expr_stmt|;
block|}
comment|/**      * If set the server will publish the client's Will message to the specified topics if the client has an unexpected disconnection.      */
annotation|@
name|Override
DECL|method|setWillTopic (String willTopic)
specifier|public
name|void
name|setWillTopic
parameter_list|(
name|String
name|willTopic
parameter_list|)
block|{
name|super
operator|.
name|setWillTopic
argument_list|(
name|willTopic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getBlockingExecutor ()
specifier|public
name|Executor
name|getBlockingExecutor
parameter_list|()
block|{
return|return
name|super
operator|.
name|getBlockingExecutor
argument_list|()
return|;
block|}
comment|/**      * SSL connections perform blocking operations against internal thread pool unless you call the setBlockingExecutor method to configure that executor they will use instead.      */
annotation|@
name|Override
DECL|method|setBlockingExecutor (Executor blockingExecutor)
specifier|public
name|void
name|setBlockingExecutor
parameter_list|(
name|Executor
name|blockingExecutor
parameter_list|)
block|{
name|super
operator|.
name|setBlockingExecutor
argument_list|(
name|blockingExecutor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDispatchQueue ()
specifier|public
name|DispatchQueue
name|getDispatchQueue
parameter_list|()
block|{
return|return
name|super
operator|.
name|getDispatchQueue
argument_list|()
return|;
block|}
comment|/**      * A HawtDispatch dispatch queue is used to synchronize access to the connection.      * If an explicit queue is not configured via the setDispatchQueue method, then a new queue will be created for the connection.      * Setting an explicit queue might be handy if you want multiple connection to share the same queue for synchronization.      */
annotation|@
name|Override
DECL|method|setDispatchQueue (DispatchQueue dispatchQueue)
specifier|public
name|void
name|setDispatchQueue
parameter_list|(
name|DispatchQueue
name|dispatchQueue
parameter_list|)
block|{
name|super
operator|.
name|setDispatchQueue
argument_list|(
name|dispatchQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLocalAddress ()
specifier|public
name|URI
name|getLocalAddress
parameter_list|()
block|{
return|return
name|super
operator|.
name|getLocalAddress
argument_list|()
return|;
block|}
comment|/**      * The local InetAddress and port to use      */
annotation|@
name|Override
DECL|method|setLocalAddress (String localAddress)
specifier|public
name|void
name|setLocalAddress
parameter_list|(
name|String
name|localAddress
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
operator|.
name|setLocalAddress
argument_list|(
name|localAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setLocalAddress (URI localAddress)
specifier|public
name|void
name|setLocalAddress
parameter_list|(
name|URI
name|localAddress
parameter_list|)
block|{
name|super
operator|.
name|setLocalAddress
argument_list|(
name|localAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxReadRate ()
specifier|public
name|int
name|getMaxReadRate
parameter_list|()
block|{
return|return
name|super
operator|.
name|getMaxReadRate
argument_list|()
return|;
block|}
comment|/**      * Sets the maximum bytes per second that this transport will receive data at.      * This setting throttles reads so that the rate is not exceeded. Defaults to 0 which disables throttling.      */
annotation|@
name|Override
DECL|method|setMaxReadRate (int maxReadRate)
specifier|public
name|void
name|setMaxReadRate
parameter_list|(
name|int
name|maxReadRate
parameter_list|)
block|{
name|super
operator|.
name|setMaxReadRate
argument_list|(
name|maxReadRate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxWriteRate ()
specifier|public
name|int
name|getMaxWriteRate
parameter_list|()
block|{
return|return
name|super
operator|.
name|getMaxWriteRate
argument_list|()
return|;
block|}
comment|/**      * Sets the maximum bytes per second that this transport will send data at.      * This setting throttles writes so that the rate is not exceeded. Defaults to 0 which disables throttling.      */
annotation|@
name|Override
DECL|method|setMaxWriteRate (int maxWriteRate)
specifier|public
name|void
name|setMaxWriteRate
parameter_list|(
name|int
name|maxWriteRate
parameter_list|)
block|{
name|super
operator|.
name|setMaxWriteRate
argument_list|(
name|maxWriteRate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReceiveBufferSize ()
specifier|public
name|int
name|getReceiveBufferSize
parameter_list|()
block|{
return|return
name|super
operator|.
name|getReceiveBufferSize
argument_list|()
return|;
block|}
comment|/**      * Sets the size of the internal socket receive buffer. Defaults to 65536 (64k)      */
annotation|@
name|Override
DECL|method|setReceiveBufferSize (int receiveBufferSize)
specifier|public
name|void
name|setReceiveBufferSize
parameter_list|(
name|int
name|receiveBufferSize
parameter_list|)
block|{
name|super
operator|.
name|setReceiveBufferSize
argument_list|(
name|receiveBufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHost ()
specifier|public
name|URI
name|getHost
parameter_list|()
block|{
return|return
name|super
operator|.
name|getHost
argument_list|()
return|;
block|}
comment|/**      * The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883      */
annotation|@
name|Override
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
comment|/**      * The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883      */
annotation|@
name|Override
DECL|method|setHost (URI host)
specifier|public
name|void
name|setHost
parameter_list|(
name|URI
name|host
parameter_list|)
block|{
name|super
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSendBufferSize ()
specifier|public
name|int
name|getSendBufferSize
parameter_list|()
block|{
return|return
name|super
operator|.
name|getSendBufferSize
argument_list|()
return|;
block|}
comment|/**      *  Sets the size of the internal socket send buffer. Defaults to 65536 (64k)      */
annotation|@
name|Override
DECL|method|setSendBufferSize (int sendBufferSize)
specifier|public
name|void
name|setSendBufferSize
parameter_list|(
name|int
name|sendBufferSize
parameter_list|)
block|{
name|super
operator|.
name|setSendBufferSize
argument_list|(
name|sendBufferSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSslContext ()
specifier|public
name|SSLContext
name|getSslContext
parameter_list|()
block|{
return|return
name|super
operator|.
name|getSslContext
argument_list|()
return|;
block|}
comment|/**      * To configure security using SSLContext configuration      */
annotation|@
name|Override
DECL|method|setSslContext (SSLContext sslContext)
specifier|public
name|void
name|setSslContext
parameter_list|(
name|SSLContext
name|sslContext
parameter_list|)
block|{
name|super
operator|.
name|setSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTrafficClass ()
specifier|public
name|int
name|getTrafficClass
parameter_list|()
block|{
return|return
name|super
operator|.
name|getTrafficClass
argument_list|()
return|;
block|}
comment|/**      * Sets traffic class or type-of-service octet in the IP header for packets sent from the transport.      * Defaults to 8 which means the traffic should be optimized for throughput.      */
annotation|@
name|Override
DECL|method|setTrafficClass (int trafficClass)
specifier|public
name|void
name|setTrafficClass
parameter_list|(
name|int
name|trafficClass
parameter_list|)
block|{
name|super
operator|.
name|setTrafficClass
argument_list|(
name|trafficClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConnectAttemptsMax ()
specifier|public
name|long
name|getConnectAttemptsMax
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConnectAttemptsMax
argument_list|()
return|;
block|}
comment|/**      * The maximum number of reconnect attempts before an error is reported back to the client on the first attempt      * by the client to connect to a server. Set to -1 to use unlimited attempts. Defaults to -1.      */
annotation|@
name|Override
DECL|method|setConnectAttemptsMax (long connectAttemptsMax)
specifier|public
name|void
name|setConnectAttemptsMax
parameter_list|(
name|long
name|connectAttemptsMax
parameter_list|)
block|{
name|super
operator|.
name|setConnectAttemptsMax
argument_list|(
name|connectAttemptsMax
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReconnectAttemptsMax ()
specifier|public
name|long
name|getReconnectAttemptsMax
parameter_list|()
block|{
return|return
name|super
operator|.
name|getReconnectAttemptsMax
argument_list|()
return|;
block|}
comment|/**      * The maximum number of reconnect attempts before an error is reported back to the client after a server      * connection had previously been established. Set to -1 to use unlimited attempts. Defaults to -1.      */
annotation|@
name|Override
DECL|method|setReconnectAttemptsMax (long reconnectAttemptsMax)
specifier|public
name|void
name|setReconnectAttemptsMax
parameter_list|(
name|long
name|reconnectAttemptsMax
parameter_list|)
block|{
name|super
operator|.
name|setReconnectAttemptsMax
argument_list|(
name|reconnectAttemptsMax
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReconnectBackOffMultiplier ()
specifier|public
name|double
name|getReconnectBackOffMultiplier
parameter_list|()
block|{
return|return
name|super
operator|.
name|getReconnectBackOffMultiplier
argument_list|()
return|;
block|}
comment|/**      * The Exponential backoff be used between reconnect attempts. Set to 1 to disable exponential backoff. Defaults to 2.      */
annotation|@
name|Override
DECL|method|setReconnectBackOffMultiplier (double reconnectBackOffMultiplier)
specifier|public
name|void
name|setReconnectBackOffMultiplier
parameter_list|(
name|double
name|reconnectBackOffMultiplier
parameter_list|)
block|{
name|super
operator|.
name|setReconnectBackOffMultiplier
argument_list|(
name|reconnectBackOffMultiplier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReconnectDelay ()
specifier|public
name|long
name|getReconnectDelay
parameter_list|()
block|{
return|return
name|super
operator|.
name|getReconnectDelay
argument_list|()
return|;
block|}
comment|/**      * How long to wait in ms before the first reconnect attempt. Defaults to 10.      */
annotation|@
name|Override
DECL|method|setReconnectDelay (long reconnectDelay)
specifier|public
name|void
name|setReconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|super
operator|.
name|setReconnectDelay
argument_list|(
name|reconnectDelay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReconnectDelayMax ()
specifier|public
name|long
name|getReconnectDelayMax
parameter_list|()
block|{
return|return
name|super
operator|.
name|getReconnectDelayMax
argument_list|()
return|;
block|}
comment|/**      * The maximum amount of time in ms to wait between reconnect attempts. Defaults to 30,000.      */
annotation|@
name|Override
DECL|method|setReconnectDelayMax (long reconnectDelayMax)
specifier|public
name|void
name|setReconnectDelayMax
parameter_list|(
name|long
name|reconnectDelayMax
parameter_list|)
block|{
name|super
operator|.
name|setReconnectDelayMax
argument_list|(
name|reconnectDelayMax
argument_list|)
expr_stmt|;
block|}
DECL|method|isLazySessionCreation ()
specifier|public
name|boolean
name|isLazySessionCreation
parameter_list|()
block|{
return|return
name|lazySessionCreation
return|;
block|}
comment|/**      * Sessions can be lazily created to avoid exceptions, if the remote server is not up and running when the Camel producer is started.      */
DECL|method|setLazySessionCreation (boolean lazySessionCreation)
specifier|public
name|void
name|setLazySessionCreation
parameter_list|(
name|boolean
name|lazySessionCreation
parameter_list|)
block|{
name|this
operator|.
name|lazySessionCreation
operator|=
name|lazySessionCreation
expr_stmt|;
block|}
block|}
end_class

end_unit

