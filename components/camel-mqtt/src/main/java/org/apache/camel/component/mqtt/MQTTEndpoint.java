begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mqtt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|CallbackConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Promise
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * MQTT endpoint  */
end_comment

begin_class
DECL|class|MQTTEndpoint
specifier|public
class|class
name|MQTTEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connection
specifier|private
name|CallbackConnection
name|connection
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|MQTTConfiguration
name|configuration
decl_stmt|;
DECL|field|consumers
specifier|private
specifier|final
name|List
argument_list|<
name|MQTTConsumer
argument_list|>
name|consumers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|MQTTConsumer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|MQTTEndpoint (String uri, MQTTComponent component, MQTTConfiguration properties)
specifier|public
name|MQTTEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|MQTTComponent
name|component
parameter_list|,
name|MQTTConfiguration
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|properties
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|MQTTConsumer
name|consumer
init|=
operator|new
name|MQTTConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTTProducer
name|producer
init|=
operator|new
name|MQTTProducer
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|producer
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|MQTTConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|connection
operator|=
name|configuration
operator|.
name|callbackConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|listener
argument_list|(
operator|new
name|Listener
argument_list|()
block|{
specifier|public
name|void
name|onConnected
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MQTT Endpoint Connected to "
operator|+
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onDisconnected
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MQTT Connection disconnected"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onPublish
parameter_list|(
name|UTF8Buffer
name|topic
parameter_list|,
name|Buffer
name|body
parameter_list|,
name|Runnable
name|ack
parameter_list|)
block|{
if|if
condition|(
operator|!
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|configuration
operator|.
name|getMqttTopicPropertyName
argument_list|()
argument_list|,
name|topic
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MQTTConsumer
name|consumer
range|:
name|consumers
control|)
block|{
try|try
block|{
name|consumer
operator|.
name|processExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process exchange "
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
name|ack
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|value
parameter_list|)
block|{
name|connection
operator|.
name|disconnect
argument_list|(
operator|new
name|Callback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|value
parameter_list|)
block|{                     }
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|value
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to disconnect from "
operator|+
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Promise
argument_list|<
name|Object
argument_list|>
name|promise
init|=
operator|new
name|Promise
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|(
operator|new
name|Callback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|value
parameter_list|)
block|{
name|String
name|subscribeTopicName
init|=
name|configuration
operator|.
name|getSubscribeTopicName
argument_list|()
decl_stmt|;
name|subscribeTopicName
operator|=
name|subscribeTopicName
operator|!=
literal|null
condition|?
name|subscribeTopicName
operator|.
name|trim
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|subscribeTopicName
operator|!=
literal|null
operator|&&
operator|!
name|subscribeTopicName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|subscribeTopicName
argument_list|,
name|configuration
operator|.
name|getQoS
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|,
operator|new
name|Callback
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|promise
operator|.
name|onSuccess
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|value
parameter_list|)
block|{
name|promise
operator|.
name|onFailure
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|promise
operator|.
name|onSuccess
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|value
parameter_list|)
block|{
name|promise
operator|.
name|onFailure
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|promise
operator|.
name|await
argument_list|(
name|configuration
operator|.
name|getConnectWaitInSeconds
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Promise
argument_list|<
name|Void
argument_list|>
name|promise
init|=
operator|new
name|Promise
argument_list|<
name|Void
argument_list|>
argument_list|()
decl_stmt|;
name|connection
operator|.
name|disconnect
argument_list|(
operator|new
name|Callback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|value
parameter_list|)
block|{
name|promise
operator|.
name|onSuccess
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|value
parameter_list|)
block|{
name|promise
operator|.
name|onFailure
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|promise
operator|.
name|await
argument_list|(
name|configuration
operator|.
name|getDisconnectWaitInSeconds
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|publish (String topic, byte[] payload, QoS qoS, boolean retain)
name|void
name|publish
parameter_list|(
name|String
name|topic
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|QoS
name|qoS
parameter_list|,
name|boolean
name|retain
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|payload
argument_list|,
name|qoS
argument_list|,
name|retain
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|addConsumer (MQTTConsumer consumer)
name|void
name|addConsumer
parameter_list|(
name|MQTTConsumer
name|consumer
parameter_list|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|removeConsumer (MQTTConsumer consumer)
name|void
name|removeConsumer
parameter_list|(
name|MQTTConsumer
name|consumer
parameter_list|)
block|{
name|consumers
operator|.
name|remove
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

