begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc.auth.jwt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|auth
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|JWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|algorithms
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|exceptions
operator|.
name|JWTCreationException
import|;
end_import

begin_comment
comment|/**  * JSON Web Token credentials generator helper  */
end_comment

begin_class
DECL|class|JwtHelper
specifier|public
specifier|final
class|class
name|JwtHelper
block|{
DECL|method|JwtHelper ()
specifier|private
name|JwtHelper
parameter_list|()
block|{     }
DECL|method|createJwtToken (JwtAlgorithm algorithmName, String secret, String issuer, String subject)
specifier|public
specifier|static
name|String
name|createJwtToken
parameter_list|(
name|JwtAlgorithm
name|algorithmName
parameter_list|,
name|String
name|secret
parameter_list|,
name|String
name|issuer
parameter_list|,
name|String
name|subject
parameter_list|)
block|{
try|try
block|{
name|Algorithm
name|algorithm
init|=
name|selectAlgorithm
argument_list|(
name|algorithmName
argument_list|,
name|secret
argument_list|)
decl_stmt|;
name|String
name|token
init|=
name|JWT
operator|.
name|create
argument_list|()
operator|.
name|withIssuer
argument_list|(
name|issuer
argument_list|)
operator|.
name|withSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|sign
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
return|return
name|token
return|;
block|}
catch|catch
parameter_list|(
name|JWTCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create JWT token"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UTF-8 encoding not supported during JWT token creation"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|selectAlgorithm (JwtAlgorithm algorithmName, String secret)
specifier|public
specifier|static
name|Algorithm
name|selectAlgorithm
parameter_list|(
name|JwtAlgorithm
name|algorithmName
parameter_list|,
name|String
name|secret
parameter_list|)
throws|throws
name|IllegalArgumentException
throws|,
name|UnsupportedEncodingException
block|{
switch|switch
condition|(
name|algorithmName
condition|)
block|{
case|case
name|HMAC256
case|:
return|return
name|Algorithm
operator|.
name|HMAC256
argument_list|(
name|secret
argument_list|)
return|;
case|case
name|HMAC384
case|:
return|return
name|Algorithm
operator|.
name|HMAC384
argument_list|(
name|secret
argument_list|)
return|;
case|case
name|HMAC512
case|:
return|return
name|Algorithm
operator|.
name|HMAC512
argument_list|(
name|secret
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JWT algorithm "
operator|+
name|algorithmName
operator|+
literal|" not implemented"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

