begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link GrpcEndpoint}.  */
end_comment

begin_class
DECL|class|GrpcComponent
specifier|public
class|class
name|GrpcComponent
extends|extends
name|DefaultComponent
block|{
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|GrpcConfiguration
name|config
init|=
operator|new
name|GrpcConfiguration
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// Extract service and package names from the full service name
name|config
operator|.
name|setServiceName
argument_list|(
name|extractServiceName
argument_list|(
name|remaining
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setServicePackage
argument_list|(
name|extractServicePackage
argument_list|(
name|remaining
argument_list|)
argument_list|)
expr_stmt|;
comment|// Convert method name to the camel case style
comment|// This requires if method name as described inside .proto file directly
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|config
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
name|config
operator|.
name|setMethod
argument_list|(
name|GrpcUtils
operator|.
name|convertMethod2CamelCase
argument_list|(
name|config
operator|.
name|getMethod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Endpoint
name|endpoint
init|=
operator|new
name|GrpcEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
decl_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|extractServiceName (String service)
specifier|private
name|String
name|extractServiceName
parameter_list|(
name|String
name|service
parameter_list|)
block|{
return|return
name|service
operator|.
name|substring
argument_list|(
name|service
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|extractServicePackage (String service)
specifier|private
name|String
name|extractServicePackage
parameter_list|(
name|String
name|service
parameter_list|)
block|{
return|return
name|service
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|service
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

