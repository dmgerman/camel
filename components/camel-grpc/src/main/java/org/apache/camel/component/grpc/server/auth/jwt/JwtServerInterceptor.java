begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc.server.auth.jwt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|server
operator|.
name|auth
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|JWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|JWTVerifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|algorithms
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|exceptions
operator|.
name|JWTCreationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|auth0
operator|.
name|jwt
operator|.
name|interfaces
operator|.
name|DecodedJWT
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Contexts
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerCall
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerCall
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerCallHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerInterceptor
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|GrpcConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * JSON Web Token credentials validator implementation  */
end_comment

begin_class
DECL|class|JwtServerInterceptor
specifier|public
class|class
name|JwtServerInterceptor
implements|implements
name|ServerInterceptor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JwtServerInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|NOOP_LISTENER
specifier|private
specifier|static
specifier|final
name|ServerCall
operator|.
name|Listener
name|NOOP_LISTENER
init|=
operator|new
name|ServerCall
operator|.
name|Listener
argument_list|()
block|{     }
decl_stmt|;
DECL|field|verifier
specifier|private
specifier|final
name|JWTVerifier
name|verifier
decl_stmt|;
DECL|method|JwtServerInterceptor (String secret, String issuer, String subject)
specifier|public
name|JwtServerInterceptor
parameter_list|(
name|String
name|secret
parameter_list|,
name|String
name|issuer
parameter_list|,
name|String
name|subject
parameter_list|)
block|{
name|verifier
operator|=
name|JwtHelper
operator|.
name|prepareJwtVerifier
argument_list|(
name|secret
argument_list|,
name|issuer
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|interceptCall (ServerCall<ReqT, RespT> call, Metadata metadata, ServerCallHandler<ReqT, RespT> serverCallHandler)
specifier|public
parameter_list|<
name|ReqT
parameter_list|,
name|RespT
parameter_list|>
name|Listener
argument_list|<
name|ReqT
argument_list|>
name|interceptCall
parameter_list|(
name|ServerCall
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|call
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|ServerCallHandler
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|serverCallHandler
parameter_list|)
block|{
name|String
name|jwtToken
init|=
name|metadata
operator|.
name|get
argument_list|(
name|GrpcConstants
operator|.
name|GRPC_JWT_METADATA_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|jwtToken
operator|==
literal|null
condition|)
block|{
name|call
operator|.
name|close
argument_list|(
name|Status
operator|.
name|UNAUTHENTICATED
operator|.
name|withDescription
argument_list|(
literal|"JWT Token is missing from metadata"
argument_list|)
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|NOOP_LISTENER
return|;
block|}
name|Context
name|ctx
decl_stmt|;
try|try
block|{
name|DecodedJWT
name|verified
init|=
name|verifier
operator|.
name|verify
argument_list|(
name|jwtToken
argument_list|)
decl_stmt|;
name|ctx
operator|=
name|Context
operator|.
name|current
argument_list|()
operator|.
name|withValue
argument_list|(
name|GrpcConstants
operator|.
name|GRPC_JWT_USER_ID_CTX_KEY
argument_list|,
name|verified
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|?
literal|"anonymous"
else|:
name|verified
operator|.
name|getSubject
argument_list|()
argument_list|)
operator|.
name|withValue
argument_list|(
name|GrpcConstants
operator|.
name|GRPC_JWT_CTX_KEY
argument_list|,
name|jwtToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"JWT token verification failed - Unauthenticated"
argument_list|)
expr_stmt|;
name|call
operator|.
name|close
argument_list|(
name|Status
operator|.
name|UNAUTHENTICATED
operator|.
name|withDescription
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
return|return
name|NOOP_LISTENER
return|;
block|}
return|return
name|Contexts
operator|.
name|interceptCall
argument_list|(
name|ctx
argument_list|,
name|call
argument_list|,
name|metadata
argument_list|,
name|serverCallHandler
argument_list|)
return|;
block|}
comment|/**      * JSON Web Token credentials validator helper      */
DECL|class|JwtHelper
specifier|public
specifier|static
specifier|final
class|class
name|JwtHelper
block|{
DECL|method|JwtHelper ()
specifier|private
name|JwtHelper
parameter_list|()
block|{         }
DECL|method|prepareJwtVerifier (String secret, String issuer, String subject)
specifier|public
specifier|static
name|JWTVerifier
name|prepareJwtVerifier
parameter_list|(
name|String
name|secret
parameter_list|,
name|String
name|issuer
parameter_list|,
name|String
name|subject
parameter_list|)
block|{
try|try
block|{
name|Algorithm
name|algorithm
init|=
name|Algorithm
operator|.
name|HMAC256
argument_list|(
name|secret
argument_list|)
decl_stmt|;
return|return
name|JWT
operator|.
name|require
argument_list|(
name|algorithm
argument_list|)
operator|.
name|withIssuer
argument_list|(
name|issuer
argument_list|)
operator|.
name|withSubject
argument_list|(
name|subject
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JWTCreationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to create JWT verifier"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UTF-8 encoding not supported during JWT verifier creation"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

