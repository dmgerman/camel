begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc.client.auth.jwt
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|client
operator|.
name|auth
operator|.
name|jwt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|CallCredentials
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|GrpcConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * JSON Web Token client credentials generator and injector   */
end_comment

begin_class
DECL|class|JwtCallCredentials
specifier|public
class|class
name|JwtCallCredentials
implements|implements
name|CallCredentials
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JwtCallCredentials
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jwtToken
specifier|private
specifier|final
name|String
name|jwtToken
decl_stmt|;
DECL|method|JwtCallCredentials (String jwtToken)
specifier|public
name|JwtCallCredentials
parameter_list|(
name|String
name|jwtToken
parameter_list|)
block|{
name|this
operator|.
name|jwtToken
operator|=
name|jwtToken
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyRequestMetadata (MethodDescriptor<?, ?> method, Attributes attrs, Executor executor, MetadataApplier applier)
specifier|public
name|void
name|applyRequestMetadata
parameter_list|(
name|MethodDescriptor
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|method
parameter_list|,
name|Attributes
name|attrs
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|MetadataApplier
name|applier
parameter_list|)
block|{
name|String
name|authority
init|=
name|attrs
operator|.
name|get
argument_list|(
name|ATTR_AUTHORITY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using authority {} for credentials"
argument_list|,
name|authority
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start to apply for the JWT token header"
argument_list|)
expr_stmt|;
name|Metadata
name|headers
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|Metadata
operator|.
name|Key
argument_list|<
name|String
argument_list|>
name|jwtKey
init|=
name|GrpcConstants
operator|.
name|GRPC_JWT_METADATA_KEY
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|jwtKey
argument_list|,
name|jwtToken
argument_list|)
expr_stmt|;
name|applier
operator|.
name|apply
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to set metadata credentials header"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|applier
operator|.
name|fail
argument_list|(
name|Status
operator|.
name|UNAUTHENTICATED
operator|.
name|withCause
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|thisUsesUnstableApi ()
specifier|public
name|void
name|thisUsesUnstableApi
parameter_list|()
block|{     }
block|}
end_class

end_unit

