begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc.server
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|stub
operator|.
name|StreamObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|GrpcConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|GrpcEndpoint
import|;
end_import

begin_comment
comment|/**  * gRPC request stream observer which is collecting received objects every  * onNext() call into the list and processing them in onCompleted()  */
end_comment

begin_class
DECL|class|GrpcRequestAggregationStreamObserver
specifier|public
class|class
name|GrpcRequestAggregationStreamObserver
extends|extends
name|GrpcRequestAbstractStreamObserver
block|{
DECL|method|GrpcRequestAggregationStreamObserver (GrpcEndpoint endpoint, GrpcConsumer consumer, StreamObserver<Object> responseObserver, Map<String, Object> headers)
specifier|public
name|GrpcRequestAggregationStreamObserver
parameter_list|(
name|GrpcEndpoint
name|endpoint
parameter_list|,
name|GrpcConsumer
name|consumer
parameter_list|,
name|StreamObserver
argument_list|<
name|Object
argument_list|>
name|responseObserver
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|consumer
argument_list|,
name|responseObserver
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNext (Object request)
specifier|public
name|void
name|onNext
parameter_list|(
name|Object
name|request
parameter_list|)
block|{
name|requestList
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onError (Throwable t)
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|onCompleted ()
specifier|public
name|void
name|onCompleted
parameter_list|()
block|{
name|exchange
operator|=
name|endpoint
operator|.
name|createExchange
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|requestList
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
name|doneSync
lambda|->
block|{         }
argument_list|)
expr_stmt|;
name|Object
name|responseBody
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseBody
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|responseList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|responseBody
decl_stmt|;
name|responseList
operator|.
name|forEach
argument_list|(
parameter_list|(
name|responseItem
parameter_list|)
lambda|->
block|{
name|responseObserver
operator|.
name|onNext
argument_list|(
name|responseItem
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responseObserver
operator|.
name|onNext
argument_list|(
name|responseBody
argument_list|)
expr_stmt|;
block|}
name|responseObserver
operator|.
name|onCompleted
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

