begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|GrpcConfiguration
specifier|public
class|class
name|GrpcConfiguration
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|service
specifier|private
name|String
name|service
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|method
specifier|private
name|String
name|method
decl_stmt|;
annotation|@
name|UriParam
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|UriParam
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|target
specifier|private
name|String
name|target
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|usePlainText
specifier|private
name|Boolean
name|usePlainText
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|processingStrategy
specifier|private
name|GrpcProcessingStrategies
name|processingStrategy
init|=
name|GrpcProcessingStrategies
operator|.
name|PROPAGATION
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|forwardOnCompleted
specifier|private
name|boolean
name|forwardOnCompleted
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|forwardOnError
specifier|private
name|boolean
name|forwardOnError
decl_stmt|;
DECL|field|serviceName
specifier|private
name|String
name|serviceName
decl_stmt|;
DECL|field|servicePackage
specifier|private
name|String
name|servicePackage
decl_stmt|;
comment|/**      * Fully qualified service name from the protocol buffer descriptor file      * (package dot service definition name)      */
DECL|method|getService ()
specifier|public
name|String
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
DECL|method|setService (String service)
specifier|public
name|void
name|setService
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
comment|/**      * gRPC method name      */
DECL|method|getMethod ()
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
DECL|method|setMethod (String method)
specifier|public
name|void
name|setMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
comment|/**      * The gRPC server host name      */
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
comment|/**      * The gRPC server port      */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
comment|/**      * The channel target name as alternative to host and port parameters      */
DECL|method|getTarget ()
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
DECL|method|setTarget (String target)
specifier|public
name|void
name|setTarget
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
comment|/**      * The plain text connection to the server flag      */
DECL|method|getUsePlainText ()
specifier|public
name|Boolean
name|getUsePlainText
parameter_list|()
block|{
return|return
name|usePlainText
return|;
block|}
DECL|method|setUsePlainText (Boolean usePlainText)
specifier|public
name|void
name|setUsePlainText
parameter_list|(
name|Boolean
name|usePlainText
parameter_list|)
block|{
name|this
operator|.
name|usePlainText
operator|=
name|usePlainText
expr_stmt|;
block|}
comment|/**      * This option specifies the top-level strategy for processing service      * requests and responses in streaming mode. If an aggregation strategy is      * selected, all requests will be accumulated in the list, then transferred      * to the flow, and the accumulated responses will be sent to the sender. If      * a propagation strategy is selected, request is sent to the stream, and the      * response will be immediately sent back to the sender.      */
DECL|method|getProcessingStrategy ()
specifier|public
name|GrpcProcessingStrategies
name|getProcessingStrategy
parameter_list|()
block|{
return|return
name|processingStrategy
return|;
block|}
DECL|method|setProcessingStrategy (GrpcProcessingStrategies processingStrategy)
specifier|public
name|void
name|setProcessingStrategy
parameter_list|(
name|GrpcProcessingStrategies
name|processingStrategy
parameter_list|)
block|{
name|this
operator|.
name|processingStrategy
operator|=
name|processingStrategy
expr_stmt|;
block|}
comment|/**      * Determines if onCompleted events should be pushed to the Camel route.      */
DECL|method|setForwardOnCompleted (boolean forwardOnCompleted)
specifier|public
name|void
name|setForwardOnCompleted
parameter_list|(
name|boolean
name|forwardOnCompleted
parameter_list|)
block|{
name|this
operator|.
name|forwardOnCompleted
operator|=
name|forwardOnCompleted
expr_stmt|;
block|}
DECL|method|isForwardOnCompleted ()
specifier|public
name|boolean
name|isForwardOnCompleted
parameter_list|()
block|{
return|return
name|forwardOnCompleted
return|;
block|}
comment|/**      * Determines if onError events should be pushed to the Camel route.      * Exceptions will be set as message body.      */
DECL|method|setForwardOnError (boolean forwardOnError)
specifier|public
name|void
name|setForwardOnError
parameter_list|(
name|boolean
name|forwardOnError
parameter_list|)
block|{
name|this
operator|.
name|forwardOnError
operator|=
name|forwardOnError
expr_stmt|;
block|}
DECL|method|isForwardOnError ()
specifier|public
name|boolean
name|isForwardOnError
parameter_list|()
block|{
return|return
name|forwardOnError
return|;
block|}
comment|/**      * The service name extracted from the full service name      */
DECL|method|getServiceName ()
specifier|protected
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|serviceName
return|;
block|}
DECL|method|setServiceName (String serviceName)
specifier|protected
name|void
name|setServiceName
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|this
operator|.
name|serviceName
operator|=
name|serviceName
expr_stmt|;
block|}
comment|/**      * The service package name extracted from the full service name      */
DECL|method|getServicePackage ()
specifier|protected
name|String
name|getServicePackage
parameter_list|()
block|{
return|return
name|servicePackage
return|;
block|}
DECL|method|setServicePackage (String servicePackage)
specifier|protected
name|void
name|setServicePackage
parameter_list|(
name|String
name|servicePackage
parameter_list|)
block|{
name|this
operator|.
name|servicePackage
operator|=
name|servicePackage
expr_stmt|;
block|}
block|}
end_class

end_unit

