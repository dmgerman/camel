begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|internal
operator|.
name|GrpcUtil
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|NegotiationType
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|NettyChannelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|auth
operator|.
name|jwt
operator|.
name|JwtAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|GrpcConfiguration
specifier|public
class|class
name|GrpcConfiguration
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|service
specifier|private
name|String
name|service
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|method
specifier|private
name|String
name|method
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
literal|"PLAINTEXT"
argument_list|)
DECL|field|negotiationType
specifier|private
name|NegotiationType
name|negotiationType
init|=
name|NegotiationType
operator|.
name|PLAINTEXT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
literal|"NONE"
argument_list|)
DECL|field|authenticationType
specifier|private
name|GrpcAuthType
name|authenticationType
init|=
name|GrpcAuthType
operator|.
name|NONE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|defaultValue
operator|=
literal|"HMAC256"
argument_list|)
DECL|field|jwtAlgorithm
specifier|private
name|JwtAlgorithm
name|jwtAlgorithm
init|=
name|JwtAlgorithm
operator|.
name|HMAC256
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|jwtSecret
specifier|private
name|String
name|jwtSecret
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|jwtIssuer
specifier|private
name|String
name|jwtIssuer
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|jwtSubject
specifier|private
name|String
name|jwtSubject
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|serviceAccountResource
specifier|private
name|String
name|serviceAccountResource
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|keyCertChainResource
specifier|private
name|String
name|keyCertChainResource
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|keyResource
specifier|private
name|String
name|keyResource
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|keyPassword
specifier|private
name|String
name|keyPassword
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|trustCertCollectionResource
specifier|private
name|String
name|trustCertCollectionResource
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"SIMPLE"
argument_list|)
DECL|field|producerStrategy
specifier|private
name|GrpcProducerStrategy
name|producerStrategy
init|=
name|GrpcProducerStrategy
operator|.
name|SIMPLE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|streamRepliesTo
specifier|private
name|String
name|streamRepliesTo
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|userAgent
specifier|private
name|String
name|userAgent
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"PROPAGATION"
argument_list|)
DECL|field|consumerStrategy
specifier|private
name|GrpcConsumerStrategy
name|consumerStrategy
init|=
name|GrpcConsumerStrategy
operator|.
name|PROPAGATION
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|forwardOnCompleted
specifier|private
name|boolean
name|forwardOnCompleted
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|forwardOnError
specifier|private
name|boolean
name|forwardOnError
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|NettyChannelBuilder
operator|.
name|DEFAULT_FLOW_CONTROL_WINDOW
argument_list|)
DECL|field|flowControlWindow
specifier|private
name|int
name|flowControlWindow
init|=
name|NettyChannelBuilder
operator|.
name|DEFAULT_FLOW_CONTROL_WINDOW
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|GrpcUtil
operator|.
name|DEFAULT_MAX_MESSAGE_SIZE
argument_list|)
DECL|field|maxMessageSize
specifier|private
name|int
name|maxMessageSize
init|=
name|GrpcUtil
operator|.
name|DEFAULT_MAX_MESSAGE_SIZE
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
DECL|field|maxConcurrentCallsPerConnection
specifier|private
name|int
name|maxConcurrentCallsPerConnection
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|/**      * Fully qualified service name from the protocol buffer descriptor file      * (package dot service definition name)      */
DECL|method|getService ()
specifier|public
name|String
name|getService
parameter_list|()
block|{
return|return
name|service
return|;
block|}
DECL|method|setService (String service)
specifier|public
name|void
name|setService
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
block|}
comment|/**      * gRPC method name      */
DECL|method|getMethod ()
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
DECL|method|setMethod (String method)
specifier|public
name|void
name|setMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
comment|/**      * The gRPC server host name. This is localhost or 0.0.0.0 when being a      * consumer or remote server host name when using producer.      */
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
comment|/**      * The gRPC local or remote server port      */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
comment|/**      * Identifies the security negotiation type used for HTTP/2 communication      */
DECL|method|setNegotiationType (NegotiationType negotiationType)
specifier|public
name|void
name|setNegotiationType
parameter_list|(
name|NegotiationType
name|negotiationType
parameter_list|)
block|{
name|this
operator|.
name|negotiationType
operator|=
name|negotiationType
expr_stmt|;
block|}
DECL|method|getNegotiationType ()
specifier|public
name|NegotiationType
name|getNegotiationType
parameter_list|()
block|{
return|return
name|negotiationType
return|;
block|}
comment|/**      * Authentication method type in advance to the SSL/TLS negotiation      */
DECL|method|getAuthenticationType ()
specifier|public
name|GrpcAuthType
name|getAuthenticationType
parameter_list|()
block|{
return|return
name|authenticationType
return|;
block|}
DECL|method|setAuthenticationType (GrpcAuthType authenticationType)
specifier|public
name|void
name|setAuthenticationType
parameter_list|(
name|GrpcAuthType
name|authenticationType
parameter_list|)
block|{
name|this
operator|.
name|authenticationType
operator|=
name|authenticationType
expr_stmt|;
block|}
comment|/**      * JSON Web Token sign algorithm      */
DECL|method|getJwtAlgorithm ()
specifier|public
name|JwtAlgorithm
name|getJwtAlgorithm
parameter_list|()
block|{
return|return
name|jwtAlgorithm
return|;
block|}
DECL|method|setJwtAlgorithm (JwtAlgorithm jwtAlgorithm)
specifier|public
name|void
name|setJwtAlgorithm
parameter_list|(
name|JwtAlgorithm
name|jwtAlgorithm
parameter_list|)
block|{
name|this
operator|.
name|jwtAlgorithm
operator|=
name|jwtAlgorithm
expr_stmt|;
block|}
comment|/**      * JSON Web Token secret      */
DECL|method|getJwtSecret ()
specifier|public
name|String
name|getJwtSecret
parameter_list|()
block|{
return|return
name|jwtSecret
return|;
block|}
DECL|method|setJwtSecret (String jwtSecret)
specifier|public
name|void
name|setJwtSecret
parameter_list|(
name|String
name|jwtSecret
parameter_list|)
block|{
name|this
operator|.
name|jwtSecret
operator|=
name|jwtSecret
expr_stmt|;
block|}
comment|/**      * JSON Web Token issuer      */
DECL|method|getJwtIssuer ()
specifier|public
name|String
name|getJwtIssuer
parameter_list|()
block|{
return|return
name|jwtIssuer
return|;
block|}
DECL|method|setJwtIssuer (String jwtIssuer)
specifier|public
name|void
name|setJwtIssuer
parameter_list|(
name|String
name|jwtIssuer
parameter_list|)
block|{
name|this
operator|.
name|jwtIssuer
operator|=
name|jwtIssuer
expr_stmt|;
block|}
comment|/**      * JSON Web Token subject      */
DECL|method|getJwtSubject ()
specifier|public
name|String
name|getJwtSubject
parameter_list|()
block|{
return|return
name|jwtSubject
return|;
block|}
DECL|method|setJwtSubject (String jwtSubject)
specifier|public
name|void
name|setJwtSubject
parameter_list|(
name|String
name|jwtSubject
parameter_list|)
block|{
name|this
operator|.
name|jwtSubject
operator|=
name|jwtSubject
expr_stmt|;
block|}
comment|/**      * Service Account key file in JSON format resource link supported by the Google Cloud SDK      */
DECL|method|getServiceAccountResource ()
specifier|public
name|String
name|getServiceAccountResource
parameter_list|()
block|{
return|return
name|serviceAccountResource
return|;
block|}
DECL|method|setServiceAccountResource (String serviceAccountResource)
specifier|public
name|void
name|setServiceAccountResource
parameter_list|(
name|String
name|serviceAccountResource
parameter_list|)
block|{
name|this
operator|.
name|serviceAccountResource
operator|=
name|serviceAccountResource
expr_stmt|;
block|}
comment|/**      * The X.509 certificate chain file resource in PEM format link       */
DECL|method|setKeyCertChainResource (String keyCertChainResource)
specifier|public
name|void
name|setKeyCertChainResource
parameter_list|(
name|String
name|keyCertChainResource
parameter_list|)
block|{
name|this
operator|.
name|keyCertChainResource
operator|=
name|keyCertChainResource
expr_stmt|;
block|}
DECL|method|getKeyCertChainResource ()
specifier|public
name|String
name|getKeyCertChainResource
parameter_list|()
block|{
return|return
name|keyCertChainResource
return|;
block|}
comment|/**      * The PKCS#8 private key file resource in PEM format link       */
DECL|method|setKeyResource (String keyResource)
specifier|public
name|void
name|setKeyResource
parameter_list|(
name|String
name|keyResource
parameter_list|)
block|{
name|this
operator|.
name|keyResource
operator|=
name|keyResource
expr_stmt|;
block|}
DECL|method|getKeyResource ()
specifier|public
name|String
name|getKeyResource
parameter_list|()
block|{
return|return
name|keyResource
return|;
block|}
comment|/**      * The PKCS#8 private key file password      */
DECL|method|getKeyPassword ()
specifier|public
name|String
name|getKeyPassword
parameter_list|()
block|{
return|return
name|keyPassword
return|;
block|}
DECL|method|setKeyPassword (String keyPassword)
specifier|public
name|void
name|setKeyPassword
parameter_list|(
name|String
name|keyPassword
parameter_list|)
block|{
name|this
operator|.
name|keyPassword
operator|=
name|keyPassword
expr_stmt|;
block|}
comment|/**      * The trusted certificates collection file resource in PEM format for verifying the remote endpoint's certificate      */
DECL|method|setTrustCertCollectionResource (String trustCertCollectionResource)
specifier|public
name|void
name|setTrustCertCollectionResource
parameter_list|(
name|String
name|trustCertCollectionResource
parameter_list|)
block|{
name|this
operator|.
name|trustCertCollectionResource
operator|=
name|trustCertCollectionResource
expr_stmt|;
block|}
DECL|method|getTrustCertCollectionResource ()
specifier|public
name|String
name|getTrustCertCollectionResource
parameter_list|()
block|{
return|return
name|trustCertCollectionResource
return|;
block|}
comment|/**      * This option specifies the top-level strategy for processing service      * requests and responses in streaming mode. If an aggregation strategy is      * selected, all requests will be accumulated in the list, then transferred      * to the flow, and the accumulated responses will be sent to the sender. If      * a propagation strategy is selected, request is sent to the stream, and the      * response will be immediately sent back to the sender.      */
DECL|method|getConsumerStrategy ()
specifier|public
name|GrpcConsumerStrategy
name|getConsumerStrategy
parameter_list|()
block|{
return|return
name|consumerStrategy
return|;
block|}
DECL|method|setConsumerStrategy (GrpcConsumerStrategy consumerStrategy)
specifier|public
name|void
name|setConsumerStrategy
parameter_list|(
name|GrpcConsumerStrategy
name|consumerStrategy
parameter_list|)
block|{
name|this
operator|.
name|consumerStrategy
operator|=
name|consumerStrategy
expr_stmt|;
block|}
comment|/**      * Determines if onCompleted events should be pushed to the Camel route.      */
DECL|method|setForwardOnCompleted (boolean forwardOnCompleted)
specifier|public
name|void
name|setForwardOnCompleted
parameter_list|(
name|boolean
name|forwardOnCompleted
parameter_list|)
block|{
name|this
operator|.
name|forwardOnCompleted
operator|=
name|forwardOnCompleted
expr_stmt|;
block|}
DECL|method|isForwardOnCompleted ()
specifier|public
name|boolean
name|isForwardOnCompleted
parameter_list|()
block|{
return|return
name|forwardOnCompleted
return|;
block|}
comment|/**      * Determines if onError events should be pushed to the Camel route.      * Exceptions will be set as message body.      */
DECL|method|setForwardOnError (boolean forwardOnError)
specifier|public
name|void
name|setForwardOnError
parameter_list|(
name|boolean
name|forwardOnError
parameter_list|)
block|{
name|this
operator|.
name|forwardOnError
operator|=
name|forwardOnError
expr_stmt|;
block|}
DECL|method|isForwardOnError ()
specifier|public
name|boolean
name|isForwardOnError
parameter_list|()
block|{
return|return
name|forwardOnError
return|;
block|}
DECL|method|getProducerStrategy ()
specifier|public
name|GrpcProducerStrategy
name|getProducerStrategy
parameter_list|()
block|{
return|return
name|producerStrategy
return|;
block|}
comment|/**      * The mode used to communicate with a remote gRPC server.      * In SIMPLE mode a single exchange is translated into a remote procedure call.      * In STREAMING mode all exchanges will be sent within the same request (input and output of the recipient gRPC service must be of type 'stream').      */
DECL|method|setProducerStrategy (GrpcProducerStrategy producerStrategy)
specifier|public
name|void
name|setProducerStrategy
parameter_list|(
name|GrpcProducerStrategy
name|producerStrategy
parameter_list|)
block|{
name|this
operator|.
name|producerStrategy
operator|=
name|producerStrategy
expr_stmt|;
block|}
DECL|method|getStreamRepliesTo ()
specifier|public
name|String
name|getStreamRepliesTo
parameter_list|()
block|{
return|return
name|streamRepliesTo
return|;
block|}
comment|/**      * When using STREAMING client mode, it indicates the endpoint where responses should be forwarded.      */
DECL|method|setStreamRepliesTo (String streamRepliesTo)
specifier|public
name|void
name|setStreamRepliesTo
parameter_list|(
name|String
name|streamRepliesTo
parameter_list|)
block|{
name|this
operator|.
name|streamRepliesTo
operator|=
name|streamRepliesTo
expr_stmt|;
block|}
comment|/**      * The user agent header passed to the server      */
DECL|method|getUserAgent ()
specifier|public
name|String
name|getUserAgent
parameter_list|()
block|{
return|return
name|userAgent
return|;
block|}
DECL|method|setUserAgent (String userAgent)
specifier|public
name|void
name|setUserAgent
parameter_list|(
name|String
name|userAgent
parameter_list|)
block|{
name|this
operator|.
name|userAgent
operator|=
name|userAgent
expr_stmt|;
block|}
comment|/**      * The HTTP/2 flow control window size (MiB)      */
DECL|method|getFlowControlWindow ()
specifier|public
name|int
name|getFlowControlWindow
parameter_list|()
block|{
return|return
name|flowControlWindow
return|;
block|}
DECL|method|setFlowControlWindow (int flowControlWindow)
specifier|public
name|void
name|setFlowControlWindow
parameter_list|(
name|int
name|flowControlWindow
parameter_list|)
block|{
name|this
operator|.
name|flowControlWindow
operator|=
name|flowControlWindow
expr_stmt|;
block|}
comment|/**      * The maximum message size allowed to be received/sent (MiB)      */
DECL|method|setMaxMessageSize (int maxMessageSize)
specifier|public
name|void
name|setMaxMessageSize
parameter_list|(
name|int
name|maxMessageSize
parameter_list|)
block|{
name|this
operator|.
name|maxMessageSize
operator|=
name|maxMessageSize
expr_stmt|;
block|}
DECL|method|getMaxMessageSize ()
specifier|public
name|int
name|getMaxMessageSize
parameter_list|()
block|{
return|return
name|maxMessageSize
return|;
block|}
comment|/**      * The maximum number of concurrent calls permitted for each incoming server connection      */
DECL|method|setMaxConcurrentCallsPerConnection (int maxConcurrentCallsPerConnection)
specifier|public
name|void
name|setMaxConcurrentCallsPerConnection
parameter_list|(
name|int
name|maxConcurrentCallsPerConnection
parameter_list|)
block|{
name|this
operator|.
name|maxConcurrentCallsPerConnection
operator|=
name|maxConcurrentCallsPerConnection
expr_stmt|;
block|}
DECL|method|getMaxConcurrentCallsPerConnection ()
specifier|public
name|int
name|getMaxConcurrentCallsPerConnection
parameter_list|()
block|{
return|return
name|maxConcurrentCallsPerConnection
return|;
block|}
DECL|method|parseURI (URI uri)
specifier|public
name|void
name|parseURI
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|setHost
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|setPort
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setService
argument_list|(
name|uri
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

