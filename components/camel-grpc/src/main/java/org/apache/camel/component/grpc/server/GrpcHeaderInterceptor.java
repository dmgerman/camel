begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc.server
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|server
package|;
end_package

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Contexts
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerCall
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerCall
operator|.
name|Listener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerCallHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ServerInterceptor
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|internal
operator|.
name|GrpcUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|GrpcConstants
import|;
end_import

begin_comment
comment|/**  * gRPC server header interceptor  */
end_comment

begin_class
DECL|class|GrpcHeaderInterceptor
specifier|public
class|class
name|GrpcHeaderInterceptor
implements|implements
name|ServerInterceptor
block|{
DECL|field|USER_AGENT_CONTEXT_KEY
specifier|public
specifier|static
specifier|final
name|Context
operator|.
name|Key
argument_list|<
name|String
argument_list|>
name|USER_AGENT_CONTEXT_KEY
init|=
name|Context
operator|.
name|key
argument_list|(
name|GrpcConstants
operator|.
name|GRPC_USER_AGENT_HEADER
argument_list|)
decl_stmt|;
DECL|field|CONTENT_TYPE_CONTEXT_KEY
specifier|public
specifier|static
specifier|final
name|Context
operator|.
name|Key
argument_list|<
name|String
argument_list|>
name|CONTENT_TYPE_CONTEXT_KEY
init|=
name|Context
operator|.
name|key
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|interceptCall (ServerCall<ReqT, RespT> call, Metadata requestHeaders, ServerCallHandler<ReqT, RespT> next)
specifier|public
parameter_list|<
name|ReqT
parameter_list|,
name|RespT
parameter_list|>
name|Listener
argument_list|<
name|ReqT
argument_list|>
name|interceptCall
parameter_list|(
name|ServerCall
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|call
parameter_list|,
name|Metadata
name|requestHeaders
parameter_list|,
name|ServerCallHandler
argument_list|<
name|ReqT
argument_list|,
name|RespT
argument_list|>
name|next
parameter_list|)
block|{
name|Context
name|context
init|=
name|Context
operator|.
name|current
argument_list|()
operator|.
name|withValue
argument_list|(
name|USER_AGENT_CONTEXT_KEY
argument_list|,
name|requestHeaders
operator|.
name|get
argument_list|(
name|GrpcUtil
operator|.
name|USER_AGENT_KEY
argument_list|)
argument_list|)
operator|.
name|withValue
argument_list|(
name|CONTENT_TYPE_CONTEXT_KEY
argument_list|,
name|requestHeaders
operator|.
name|get
argument_list|(
name|GrpcUtil
operator|.
name|CONTENT_TYPE_KEY
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Contexts
operator|.
name|interceptCall
argument_list|(
name|context
argument_list|,
name|call
argument_list|,
name|requestHeaders
argument_list|,
name|next
argument_list|)
return|;
block|}
block|}
end_class

end_unit

