begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grpc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|auth
operator|.
name|oauth2
operator|.
name|GoogleCredentials
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|CallCredentials
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|ManagedChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|auth
operator|.
name|MoreCallCredentials
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|GrpcSslContexts
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|NegotiationType
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|netty
operator|.
name|NettyChannelBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|grpc
operator|.
name|stub
operator|.
name|StreamObserver
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslContextBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|ssl
operator|.
name|SslProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|auth
operator|.
name|jwt
operator|.
name|JwtCallCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|auth
operator|.
name|jwt
operator|.
name|JwtHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|client
operator|.
name|GrpcExchangeForwarder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|client
operator|.
name|GrpcExchangeForwarderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|client
operator|.
name|GrpcResponseAggregationStreamObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grpc
operator|.
name|client
operator|.
name|GrpcResponseRouterStreamObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_comment
comment|/**  * Represents asynchronous and synchronous gRPC producer implementations.  */
end_comment

begin_class
DECL|class|GrpcProducer
specifier|public
class|class
name|GrpcProducer
extends|extends
name|DefaultProducer
implements|implements
name|AsyncProcessor
block|{
DECL|field|configuration
specifier|protected
specifier|final
name|GrpcConfiguration
name|configuration
decl_stmt|;
DECL|field|endpoint
specifier|protected
specifier|final
name|GrpcEndpoint
name|endpoint
decl_stmt|;
DECL|field|channel
specifier|private
name|ManagedChannel
name|channel
decl_stmt|;
DECL|field|grpcStub
specifier|private
name|Object
name|grpcStub
decl_stmt|;
DECL|field|forwarder
specifier|private
name|GrpcExchangeForwarder
name|forwarder
decl_stmt|;
DECL|field|globalResponseObserver
specifier|private
name|StreamObserver
argument_list|<
name|Object
argument_list|>
name|globalResponseObserver
decl_stmt|;
DECL|method|GrpcProducer (GrpcEndpoint endpoint, GrpcConfiguration configuration)
specifier|public
name|GrpcProducer
parameter_list|(
name|GrpcEndpoint
name|endpoint
parameter_list|,
name|GrpcConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getProducerStrategy
argument_list|()
operator|==
name|GrpcProducerStrategy
operator|.
name|STREAMING
condition|)
block|{
if|if
condition|(
name|endpoint
operator|.
name|isSynchronous
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot use synchronous processing in streaming mode"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|getStreamRepliesTo
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The streamReplyTo property is mandatory when using the STREAMING mode"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|configuration
operator|.
name|getAuthenticationType
argument_list|()
operator|==
name|GrpcAuthType
operator|.
name|GOOGLE
operator|&&
name|configuration
operator|.
name|getNegotiationType
argument_list|()
operator|!=
name|NegotiationType
operator|.
name|TLS
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Google token-based authentication requires SSL/TLS negotiation mode"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|StreamObserver
argument_list|<
name|Object
argument_list|>
name|streamObserver
init|=
name|this
operator|.
name|globalResponseObserver
decl_stmt|;
if|if
condition|(
name|globalResponseObserver
operator|==
literal|null
condition|)
block|{
name|streamObserver
operator|=
operator|new
name|GrpcResponseAggregationStreamObserver
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
return|return
name|forwarder
operator|.
name|forward
argument_list|(
name|exchange
argument_list|,
name|streamObserver
argument_list|,
name|callback
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|forwarder
operator|.
name|forward
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|channel
operator|==
literal|null
condition|)
block|{
name|CallCredentials
name|callCreds
init|=
literal|null
decl_stmt|;
name|initializeChannel
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getAuthenticationType
argument_list|()
operator|==
name|GrpcAuthType
operator|.
name|GOOGLE
condition|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
operator|.
name|getKeyCertChainResource
argument_list|()
argument_list|,
literal|"serviceAccountResource"
argument_list|)
expr_stmt|;
name|ClassResolver
name|classResolver
init|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
decl_stmt|;
name|Credentials
name|creds
init|=
name|GoogleCredentials
operator|.
name|fromStream
argument_list|(
name|ResourceHelper
operator|.
name|resolveResourceAsInputStream
argument_list|(
name|classResolver
argument_list|,
name|configuration
operator|.
name|getServiceAccountResource
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|callCreds
operator|=
name|MoreCallCredentials
operator|.
name|from
argument_list|(
name|creds
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|getAuthenticationType
argument_list|()
operator|==
name|GrpcAuthType
operator|.
name|JWT
condition|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
operator|.
name|getJwtSecret
argument_list|()
argument_list|,
literal|"jwtSecret"
argument_list|)
expr_stmt|;
name|String
name|jwtToken
init|=
name|JwtHelper
operator|.
name|createJwtToken
argument_list|(
name|configuration
operator|.
name|getJwtAlgorithm
argument_list|()
argument_list|,
name|configuration
operator|.
name|getJwtSecret
argument_list|()
argument_list|,
name|configuration
operator|.
name|getJwtIssuer
argument_list|()
argument_list|,
name|configuration
operator|.
name|getJwtSubject
argument_list|()
argument_list|)
decl_stmt|;
name|callCreds
operator|=
operator|new
name|JwtCallCredentials
argument_list|(
name|jwtToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|isSynchronous
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Getting synchronous method stub from channel"
argument_list|)
expr_stmt|;
name|grpcStub
operator|=
name|GrpcUtils
operator|.
name|constructGrpcBlockingStub
argument_list|(
name|endpoint
operator|.
name|getServicePackage
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getServiceName
argument_list|()
argument_list|,
name|channel
argument_list|,
name|callCreds
argument_list|,
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Getting asynchronous method stub from channel"
argument_list|)
expr_stmt|;
name|grpcStub
operator|=
name|GrpcUtils
operator|.
name|constructGrpcAsyncStub
argument_list|(
name|endpoint
operator|.
name|getServicePackage
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getServiceName
argument_list|()
argument_list|,
name|channel
argument_list|,
name|callCreds
argument_list|,
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|forwarder
operator|=
name|GrpcExchangeForwarderFactory
operator|.
name|createExchangeForwarder
argument_list|(
name|configuration
argument_list|,
name|grpcStub
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getStreamRepliesTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|globalResponseObserver
operator|=
operator|new
name|GrpcResponseRouterStreamObserver
argument_list|(
name|configuration
argument_list|,
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|forwarder
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|forwarder
operator|=
literal|null
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Terminating channel to the remote gRPC server"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|shutdown
argument_list|()
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|channel
operator|=
literal|null
expr_stmt|;
name|grpcStub
operator|=
literal|null
expr_stmt|;
name|globalResponseObserver
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeChannel ()
specifier|protected
name|void
name|initializeChannel
parameter_list|()
throws|throws
name|Exception
block|{
name|NettyChannelBuilder
name|channelBuilder
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
operator|!
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Creating channel to the remote gRPC server {}:{}"
argument_list|,
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|channelBuilder
operator|=
name|NettyChannelBuilder
operator|.
name|forAddress
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No connection properties (host or port) specified"
argument_list|)
throw|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getNegotiationType
argument_list|()
operator|==
name|NegotiationType
operator|.
name|TLS
condition|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
operator|.
name|getKeyCertChainResource
argument_list|()
argument_list|,
literal|"keyCertChainResource"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
operator|.
name|getKeyResource
argument_list|()
argument_list|,
literal|"keyResource"
argument_list|)
expr_stmt|;
name|ClassResolver
name|classResolver
init|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
decl_stmt|;
name|SslContextBuilder
name|sslContextBuilder
init|=
name|GrpcSslContexts
operator|.
name|forClient
argument_list|()
operator|.
name|sslProvider
argument_list|(
name|SslProvider
operator|.
name|OPENSSL
argument_list|)
operator|.
name|keyManager
argument_list|(
name|ResourceHelper
operator|.
name|resolveResourceAsInputStream
argument_list|(
name|classResolver
argument_list|,
name|configuration
operator|.
name|getKeyCertChainResource
argument_list|()
argument_list|)
argument_list|,
name|ResourceHelper
operator|.
name|resolveResourceAsInputStream
argument_list|(
name|classResolver
argument_list|,
name|configuration
operator|.
name|getKeyResource
argument_list|()
argument_list|)
argument_list|,
name|configuration
operator|.
name|getKeyPassword
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getTrustCertCollectionResource
argument_list|()
argument_list|)
condition|)
block|{
name|sslContextBuilder
operator|=
name|sslContextBuilder
operator|.
name|trustManager
argument_list|(
name|ResourceHelper
operator|.
name|resolveResourceAsInputStream
argument_list|(
name|classResolver
argument_list|,
name|configuration
operator|.
name|getTrustCertCollectionResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|channelBuilder
operator|=
name|channelBuilder
operator|.
name|sslContext
argument_list|(
name|sslContextBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|=
name|channelBuilder
operator|.
name|negotiationType
argument_list|(
name|configuration
operator|.
name|getNegotiationType
argument_list|()
argument_list|)
operator|.
name|flowControlWindow
argument_list|(
name|configuration
operator|.
name|getFlowControlWindow
argument_list|()
argument_list|)
operator|.
name|userAgent
argument_list|(
name|configuration
operator|.
name|getUserAgent
argument_list|()
argument_list|)
operator|.
name|maxInboundMessageSize
argument_list|(
name|configuration
operator|.
name|getMaxMessageSize
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

