begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|IsSingleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|sql
operator|.
name|SqlBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|josql
operator|.
name|QueryParseException
import|;
end_import

begin_comment
comment|/**  * XPath language.  *  * @version   */
end_comment

begin_class
DECL|class|SqlLanguage
specifier|public
class|class
name|SqlLanguage
implements|implements
name|Language
implements|,
name|IsSingleton
block|{
DECL|method|createPredicate (String expression)
specifier|public
name|Predicate
name|createPredicate
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
try|try
block|{
name|SqlBuilder
name|builder
init|=
name|SqlBuilder
operator|.
name|sql
argument_list|(
name|expression
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Canont create the SqlBuilder."
argument_list|,
name|e
argument_list|)
decl_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
DECL|method|createExpression (String expression)
specifier|public
name|Expression
name|createExpression
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
try|try
block|{
name|SqlBuilder
name|builder
init|=
name|SqlBuilder
operator|.
name|sql
argument_list|(
name|expression
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
catch|catch
parameter_list|(
name|QueryParseException
name|e
parameter_list|)
block|{
name|RuntimeException
name|exception
init|=
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Canont create the SqlBuilder."
argument_list|,
name|e
argument_list|)
decl_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

