begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.javaconfig
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|javaconfig
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Routes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeansException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|config
operator|.
name|java
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|config
operator|.
name|java
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A useful base class for writing  *<a href="http://www.springsource.org/javaconfig">Spring JavaConfig</a>  * configurations for working with Camel  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
annotation|@
name|Configuration
DECL|class|CamelConfiguration
specifier|public
specifier|abstract
class|class
name|CamelConfiguration
block|{
annotation|@
name|Bean
DECL|method|camelBeanPostProcessor ()
specifier|public
name|CamelBeanPostProcessor
name|camelBeanPostProcessor
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|CamelBeanPostProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|postProcessAfterInitialization
parameter_list|(
name|Object
name|bean
parameter_list|,
name|String
name|beanName
parameter_list|)
throws|throws
name|BeansException
block|{
try|try
block|{
name|SpringCamelContext
name|context
init|=
operator|(
name|SpringCamelContext
operator|)
name|getCamelContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
comment|// we have not yet injected the context so lets set it
name|setCamelContext
argument_list|(
name|camelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|postProcessAfterInitialization
argument_list|(
name|bean
argument_list|,
name|beanName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BeansException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BeanInitializationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Returns the CamelContext      */
annotation|@
name|Bean
DECL|method|camelContext ()
specifier|public
name|SpringCamelContext
name|camelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringCamelContext
name|camelContext
init|=
operator|new
name|SpringCamelContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|routes
init|=
name|routes
argument_list|()
decl_stmt|;
for|for
control|(
name|Routes
name|route
range|:
name|routes
control|)
block|{
name|camelContext
operator|.
name|addRoutes
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
return|return
name|camelContext
return|;
block|}
comment|/**      * Returns the list of routes to use in this configuration      */
annotation|@
name|Bean
DECL|method|routes ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|routes
parameter_list|()
function_decl|;
block|}
end_class

end_unit

