begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.javaconfig
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|javaconfig
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanFactoryAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|ListableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|AutowireCapableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationEventPublisherAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|MessageSourceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ResourceLoaderAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * A useful base class for writing  *<a href="http://www.springsource.org/javaconfig">Spring JavaConfig</a>  * configurations for working with Camel  *  * @version   */
end_comment

begin_class
annotation|@
name|Configuration
DECL|class|CamelConfiguration
specifier|public
specifier|abstract
class|class
name|CamelConfiguration
implements|implements
name|BeanFactoryAware
implements|,
name|ApplicationContextAware
block|{
DECL|field|beanFactory
specifier|private
name|BeanFactory
name|beanFactory
decl_stmt|;
DECL|field|autowireCapableBeanFactory
specifier|private
name|AutowireCapableBeanFactory
name|autowireCapableBeanFactory
decl_stmt|;
DECL|field|applicationContext
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
DECL|method|setBeanFactory (BeanFactory beanFactory)
specifier|public
name|void
name|setBeanFactory
parameter_list|(
name|BeanFactory
name|beanFactory
parameter_list|)
block|{
name|this
operator|.
name|beanFactory
operator|=
name|beanFactory
expr_stmt|;
if|if
condition|(
name|beanFactory
operator|instanceof
name|AutowireCapableBeanFactory
condition|)
block|{
name|autowireCapableBeanFactory
operator|=
operator|(
name|AutowireCapableBeanFactory
operator|)
name|beanFactory
expr_stmt|;
block|}
block|}
DECL|method|getBeanFactory ()
specifier|protected
name|BeanFactory
name|getBeanFactory
parameter_list|()
block|{
return|return
name|this
operator|.
name|beanFactory
return|;
block|}
DECL|method|setApplicationContext (ApplicationContext ac)
specifier|public
name|void
name|setApplicationContext
parameter_list|(
name|ApplicationContext
name|ac
parameter_list|)
block|{
name|this
operator|.
name|applicationContext
operator|=
name|ac
expr_stmt|;
block|}
DECL|method|getApplicationContext ()
specifier|protected
name|ApplicationContext
name|getApplicationContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationContext
return|;
block|}
DECL|method|getBean (String beanName)
specifier|public
name|Object
name|getBean
parameter_list|(
name|String
name|beanName
parameter_list|)
block|{
return|return
name|beanFactory
operator|.
name|getBean
argument_list|(
name|beanName
argument_list|)
return|;
block|}
DECL|method|getBean (Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBean
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|beanFactory
operator|.
name|getBean
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|getBean (String beanName, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBean
parameter_list|(
name|String
name|beanName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|beanFactory
operator|.
name|getBean
argument_list|(
name|beanName
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Invoke callbacks on the object, as though it were configured in the factory. If appropriate,      * the object may be wrapped before being returned. For this reason, it is recommended to always      * respect the return value when using this method.      *      * @param   object  object to configure      *      * @return  either the original object or a wrapped one after callbacks called on it.      */
DECL|method|getConfigured (T object)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfigured
parameter_list|(
name|T
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|autowireCapableBeanFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot configure object - not running in an AutowireCapableBeanFactory"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// See SPR-4955
name|T
name|configuredObject
init|=
operator|(
name|T
operator|)
name|autowireCapableBeanFactory
operator|.
name|initializeBean
argument_list|(
name|object
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// this block copied from ApplicationContextAwareProcessor.  See SJC-149.
if|if
condition|(
name|this
operator|.
name|applicationContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|configuredObject
operator|instanceof
name|ResourceLoaderAware
condition|)
block|{
operator|(
operator|(
name|ResourceLoaderAware
operator|)
name|configuredObject
operator|)
operator|.
name|setResourceLoader
argument_list|(
name|this
operator|.
name|applicationContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuredObject
operator|instanceof
name|ApplicationEventPublisherAware
condition|)
block|{
operator|(
operator|(
name|ApplicationEventPublisherAware
operator|)
name|configuredObject
operator|)
operator|.
name|setApplicationEventPublisher
argument_list|(
name|this
operator|.
name|applicationContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuredObject
operator|instanceof
name|MessageSourceAware
condition|)
block|{
operator|(
operator|(
name|MessageSourceAware
operator|)
name|configuredObject
operator|)
operator|.
name|setMessageSource
argument_list|(
name|this
operator|.
name|applicationContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuredObject
operator|instanceof
name|ApplicationContextAware
condition|)
block|{
operator|(
operator|(
name|ApplicationContextAware
operator|)
name|configuredObject
operator|)
operator|.
name|setApplicationContext
argument_list|(
name|this
operator|.
name|applicationContext
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configuredObject
return|;
block|}
annotation|@
name|Bean
DECL|method|camelBeanPostProcessor ()
specifier|public
name|CamelBeanPostProcessor
name|camelBeanPostProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelBeanPostProcessor
name|answer
init|=
operator|new
name|CamelBeanPostProcessor
argument_list|()
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|getBean
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// lets lookup a bean
name|answer
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Returns the CamelContext      */
annotation|@
name|Bean
DECL|method|camelContext ()
specifier|public
name|CamelContext
name|camelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|createCamelContext
argument_list|()
decl_stmt|;
name|setupCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|routes
init|=
name|routes
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutesBuilder
name|route
range|:
name|routes
control|)
block|{
name|camelContext
operator|.
name|addRoutes
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
return|return
name|camelContext
return|;
block|}
comment|// Can register the camel component, language here
DECL|method|setupCamelContext (CamelContext camelContext)
specifier|protected
name|void
name|setupCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{              }
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|SpringCamelContext
argument_list|(
name|getApplicationContext
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the list of routes to use in this configuration      */
DECL|method|routes ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|routes
parameter_list|()
function_decl|;
block|}
end_class

end_unit

