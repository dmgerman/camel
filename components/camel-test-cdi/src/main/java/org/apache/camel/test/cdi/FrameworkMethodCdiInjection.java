begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_class
DECL|class|FrameworkMethodCdiInjection
specifier|final
class|class
name|FrameworkMethodCdiInjection
extends|extends
name|Statement
block|{
DECL|field|method
specifier|private
specifier|final
name|FrameworkMethod
name|method
decl_stmt|;
DECL|field|test
specifier|private
specifier|final
name|Object
name|test
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|CamelCdiContext
name|context
decl_stmt|;
DECL|method|FrameworkMethodCdiInjection (FrameworkMethod method, Object test, CamelCdiContext context)
name|FrameworkMethodCdiInjection
parameter_list|(
name|FrameworkMethod
name|method
parameter_list|,
name|Object
name|test
parameter_list|,
name|CamelCdiContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evaluate ()
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
name|BeanManager
name|manager
init|=
name|context
operator|.
name|getBeanManager
argument_list|()
decl_stmt|;
name|Type
index|[]
name|types
init|=
name|method
operator|.
name|getMethod
argument_list|()
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
name|Object
index|[]
name|parameters
init|=
operator|new
name|Object
index|[
name|types
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO: use a proper CreationalContext...
name|parameters
index|[
name|i
index|]
operator|=
name|manager
operator|.
name|getInjectableReference
argument_list|(
operator|new
name|FrameworkMethodInjectionPoint
argument_list|(
name|method
operator|.
name|getMethod
argument_list|()
argument_list|,
name|i
argument_list|,
name|manager
argument_list|)
argument_list|,
name|manager
operator|.
name|createCreationalContext
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|method
operator|.
name|invokeExplosively
argument_list|(
name|test
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

