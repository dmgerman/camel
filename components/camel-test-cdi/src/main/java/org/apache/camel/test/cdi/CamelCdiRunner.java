begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|BlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|FrameworkMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|InitializationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_class
DECL|class|CamelCdiRunner
specifier|public
class|class
name|CamelCdiRunner
extends|extends
name|BlockJUnit4ClassRunner
block|{
DECL|field|context
specifier|private
specifier|final
name|CamelCdiContext
name|context
init|=
operator|new
name|CamelCdiContext
argument_list|()
decl_stmt|;
DECL|method|CamelCdiRunner (Class<?> clazz)
specifier|public
name|CamelCdiRunner
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|InitializationError
block|{
name|super
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validateConstructor (List<Throwable> errors)
specifier|protected
name|void
name|validateConstructor
parameter_list|(
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
parameter_list|)
block|{
comment|// The test class is instantiated as a CDI bean so we bypass the
comment|// default JUnit test class constructor constraints validation.
block|}
annotation|@
name|Override
DECL|method|validatePublicVoidNoArgMethods (Class<? extends Annotation> annotation, boolean isStatic, List<Throwable> errors)
specifier|protected
name|void
name|validatePublicVoidNoArgMethods
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotation
parameter_list|,
name|boolean
name|isStatic
parameter_list|,
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
parameter_list|)
block|{
comment|// Overrides the default validation to allow test methods with
comment|// parameters so that we can inject CDI references.
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|methods
init|=
name|getTestClass
argument_list|()
operator|.
name|getAnnotatedMethods
argument_list|(
name|annotation
argument_list|)
decl_stmt|;
for|for
control|(
name|FrameworkMethod
name|eachTestMethod
range|:
name|methods
control|)
block|{
name|eachTestMethod
operator|.
name|validatePublicVoid
argument_list|(
name|isStatic
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getChildren ()
specifier|protected
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|getChildren
parameter_list|()
block|{
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|children
init|=
name|super
operator|.
name|getChildren
argument_list|()
decl_stmt|;
name|boolean
name|hasDefinedOrder
init|=
literal|false
decl_stmt|;
for|for
control|(
name|FrameworkMethod
name|method
range|:
name|children
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getAnnotation
argument_list|(
name|Order
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasDefinedOrder
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasDefinedOrder
condition|)
block|{
name|List
argument_list|<
name|FrameworkMethod
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|children
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
operator|new
name|FrameworkMethodSorter
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
return|return
name|children
return|;
block|}
annotation|@
name|Override
DECL|method|classRules ()
specifier|protected
name|List
argument_list|<
name|TestRule
argument_list|>
name|classRules
parameter_list|()
block|{
name|List
argument_list|<
name|TestRule
argument_list|>
name|rules
init|=
name|super
operator|.
name|classRules
argument_list|()
decl_stmt|;
comment|// Add the CDI container rule before all the other class rules
comment|// so that it's the last one in FIFO
name|rules
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|CamelCdiDeployment
argument_list|(
name|getTestClass
argument_list|()
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rules
return|;
block|}
annotation|@
name|Override
DECL|method|createTest ()
specifier|protected
name|Object
name|createTest
parameter_list|()
block|{
name|BeanManager
name|manager
init|=
name|context
operator|.
name|getBeanManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bean
argument_list|<
name|?
argument_list|>
argument_list|>
name|beans
init|=
name|manager
operator|.
name|getBeans
argument_list|(
name|getTestClass
argument_list|()
operator|.
name|getJavaClass
argument_list|()
argument_list|,
name|AnyLiteral
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|Bean
argument_list|<
name|?
argument_list|>
name|bean
init|=
name|beans
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// TODO: manage lifecycle of @Dependent beans
return|return
name|manager
operator|.
name|getReference
argument_list|(
name|bean
argument_list|,
name|bean
operator|.
name|getBeanClass
argument_list|()
argument_list|,
name|manager
operator|.
name|createCreationalContext
argument_list|(
name|bean
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|methodInvoker (FrameworkMethod method, Object test)
specifier|protected
name|Statement
name|methodInvoker
parameter_list|(
name|FrameworkMethod
name|method
parameter_list|,
name|Object
name|test
parameter_list|)
block|{
return|return
operator|new
name|FrameworkMethodCdiInjection
argument_list|(
name|method
argument_list|,
name|test
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

