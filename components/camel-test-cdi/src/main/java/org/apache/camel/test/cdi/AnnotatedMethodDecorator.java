begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedParameter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|AnnotatedType
import|;
end_import

begin_class
DECL|class|AnnotatedMethodDecorator
specifier|final
class|class
name|AnnotatedMethodDecorator
parameter_list|<
name|X
parameter_list|>
extends|extends
name|AnnotatedDecorator
implements|implements
name|AnnotatedMethod
argument_list|<
name|X
argument_list|>
block|{
DECL|field|decoratedMethod
specifier|private
specifier|final
name|AnnotatedMethod
argument_list|<
name|X
argument_list|>
name|decoratedMethod
decl_stmt|;
DECL|method|AnnotatedMethodDecorator (AnnotatedMethod<X> decoratedMethod, Annotation decoratingAnnotation)
name|AnnotatedMethodDecorator
parameter_list|(
name|AnnotatedMethod
argument_list|<
name|X
argument_list|>
name|decoratedMethod
parameter_list|,
name|Annotation
name|decoratingAnnotation
parameter_list|)
block|{
name|super
argument_list|(
name|decoratedMethod
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|decoratingAnnotation
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|decoratedMethod
operator|=
name|decoratedMethod
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getJavaMember ()
specifier|public
name|Method
name|getJavaMember
parameter_list|()
block|{
return|return
name|decoratedMethod
operator|.
name|getJavaMember
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isStatic ()
specifier|public
name|boolean
name|isStatic
parameter_list|()
block|{
return|return
name|decoratedMethod
operator|.
name|isStatic
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDeclaringType ()
specifier|public
name|AnnotatedType
argument_list|<
name|X
argument_list|>
name|getDeclaringType
parameter_list|()
block|{
return|return
name|decoratedMethod
operator|.
name|getDeclaringType
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getParameters ()
specifier|public
name|List
argument_list|<
name|AnnotatedParameter
argument_list|<
name|X
argument_list|>
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|decoratedMethod
operator|.
name|getParameters
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|decoratedMethod
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|decoratedMethod
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|decoratedMethod
operator|.
name|equals
argument_list|(
name|object
argument_list|)
return|;
block|}
block|}
end_class

end_unit

