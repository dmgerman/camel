begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cdi
operator|.
name|CdiCamelExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|config
operator|.
name|ConfigurationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|environment
operator|.
name|se
operator|.
name|Weld
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|weld
operator|.
name|environment
operator|.
name|se
operator|.
name|WeldContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|TestClass
import|;
end_import

begin_class
DECL|class|CamelCdiDeployment
specifier|final
class|class
name|CamelCdiDeployment
implements|implements
name|TestRule
block|{
DECL|field|context
specifier|private
specifier|final
name|CamelCdiContext
name|context
decl_stmt|;
DECL|field|weld
specifier|private
specifier|final
name|Weld
name|weld
decl_stmt|;
DECL|method|CamelCdiDeployment (TestClass test, CamelCdiContext context)
name|CamelCdiDeployment
parameter_list|(
name|TestClass
name|test
parameter_list|,
name|CamelCdiContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|weld
operator|=
operator|new
name|Weld
argument_list|()
comment|// TODO: check parallel execution
operator|.
name|containerId
argument_list|(
literal|"camel-context-cdi"
argument_list|)
operator|.
name|property
argument_list|(
name|ConfigurationKey
operator|.
name|RELAXED_CONSTRUCTION
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|enableDiscovery
argument_list|()
operator|.
name|beanClasses
argument_list|(
name|test
operator|.
name|getJavaClass
argument_list|()
operator|.
name|getDeclaredClasses
argument_list|()
argument_list|)
operator|.
name|addBeanClass
argument_list|(
name|test
operator|.
name|getJavaClass
argument_list|()
argument_list|)
operator|.
name|addExtension
argument_list|(
operator|new
name|CdiCamelExtension
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|apply (final Statement base, Description description)
specifier|public
name|Statement
name|apply
parameter_list|(
specifier|final
name|Statement
name|base
parameter_list|,
name|Description
name|description
parameter_list|)
block|{
return|return
operator|new
name|Statement
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
name|WeldContainer
name|container
init|=
name|weld
operator|.
name|initialize
argument_list|()
decl_stmt|;
name|context
operator|.
name|setBeanManager
argument_list|(
name|container
operator|.
name|getBeanManager
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|base
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|container
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|context
operator|.
name|unsetBeanManager
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

