begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.cdi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|cdi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|enterprise
operator|.
name|inject
operator|.
name|spi
operator|.
name|BeanManager
import|;
end_import

begin_class
DECL|class|CamelCdiContext
specifier|final
class|class
name|CamelCdiContext
block|{
DECL|field|manager
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|BeanManager
argument_list|>
name|manager
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getBeanManager ()
name|BeanManager
name|getBeanManager
parameter_list|()
block|{
name|BeanManager
name|manager
init|=
name|this
operator|.
name|manager
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Bean manager is not set!"
argument_list|)
throw|;
block|}
return|return
name|manager
return|;
block|}
DECL|method|setBeanManager (BeanManager manager)
name|void
name|setBeanManager
parameter_list|(
name|BeanManager
name|manager
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|manager
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Bean manager already set!"
argument_list|)
throw|;
block|}
block|}
DECL|method|unsetBeanManager ()
name|void
name|unsetBeanManager
parameter_list|()
block|{
if|if
condition|(
name|manager
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Bean manager is not set!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

