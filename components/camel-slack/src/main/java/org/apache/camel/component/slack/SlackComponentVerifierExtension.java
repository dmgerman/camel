begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.slack
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|slack
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|DefaultComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|verifier
operator|.
name|ResultErrorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|slack
operator|.
name|helper
operator|.
name|SlackMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|entity
operator|.
name|UrlEncodedFormEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicNameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|Jsoner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|slack
operator|.
name|utils
operator|.
name|SlackUtils
operator|.
name|readResponse
import|;
end_import

begin_class
DECL|class|SlackComponentVerifierExtension
specifier|public
class|class
name|SlackComponentVerifierExtension
extends|extends
name|DefaultComponentVerifierExtension
block|{
DECL|method|SlackComponentVerifierExtension ()
specifier|public
name|SlackComponentVerifierExtension
parameter_list|()
block|{
name|this
argument_list|(
literal|"slack"
argument_list|)
expr_stmt|;
block|}
DECL|method|SlackComponentVerifierExtension (String scheme)
specifier|public
name|SlackComponentVerifierExtension
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|super
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
block|}
comment|// *********************************
comment|// Parameters validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyParameters (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|PARAMETERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|"webhookUrl"
argument_list|)
argument_list|)
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|GENERIC
argument_list|,
literal|"You must specify a webhookUrl (for producer) or a token (for consumer)"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"webhookUrl"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"token"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|"webhookUrl"
argument_list|)
argument_list|)
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|GENERIC
argument_list|,
literal|"You must specify a webhookUrl (for producer) or a token (for consumer). You can't specify both."
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"webhookUrl"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"token"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Connectivity validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyConnectivity (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyConnectivity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
return|return
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|CONNECTIVITY
argument_list|)
operator|.
name|error
argument_list|(
name|parameters
argument_list|,
name|this
operator|::
name|verifyCredentials
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|verifyCredentials (ResultBuilder builder, Map<String, Object> parameters)
specifier|private
name|void
name|verifyCredentials
parameter_list|(
name|ResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|String
name|webhookUrl
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"webhookUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|webhookUrl
argument_list|)
condition|)
block|{
try|try
block|{
name|HttpClient
name|client
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|useSystemProperties
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpPost
name|httpPost
init|=
operator|new
name|HttpPost
argument_list|(
name|webhookUrl
argument_list|)
decl_stmt|;
comment|// Build Helper object
name|SlackMessage
name|slackMessage
decl_stmt|;
name|slackMessage
operator|=
operator|new
name|SlackMessage
argument_list|()
expr_stmt|;
name|slackMessage
operator|.
name|setText
argument_list|(
literal|"Test connection"
argument_list|)
expr_stmt|;
comment|// Set the post body
name|String
name|json
init|=
name|asJson
argument_list|(
name|slackMessage
argument_list|)
decl_stmt|;
name|StringEntity
name|body
init|=
operator|new
name|StringEntity
argument_list|(
name|json
argument_list|)
decl_stmt|;
comment|// Do the post
name|httpPost
operator|.
name|setEntity
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|httpPost
argument_list|)
decl_stmt|;
comment|// 2xx is OK, anything else we regard as failure
if|if
condition|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|<
literal|200
operator|||
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|>
literal|299
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Invalid webhookUrl"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"webhookUrl"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Invalid webhookUrl"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"webhookUrl"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|token
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpClient
name|client
init|=
name|HttpClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|useSystemProperties
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpPost
name|httpPost
init|=
operator|new
name|HttpPost
argument_list|(
literal|"https://slack.com/api/channels.list"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BasicNameValuePair
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|BasicNameValuePair
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|BasicNameValuePair
argument_list|(
literal|"token"
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|httpPost
operator|.
name|setEntity
argument_list|(
operator|new
name|UrlEncodedFormEntity
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|client
operator|.
name|execute
argument_list|(
name|httpPost
argument_list|)
decl_stmt|;
name|String
name|jsonString
init|=
name|readResponse
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|<
literal|200
operator|||
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|>
literal|299
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Invalid token"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"token"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|Jsoner
operator|.
name|deserialize
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|get
argument_list|(
literal|"ok"
argument_list|)
operator|!=
literal|null
operator|&&
name|obj
operator|.
name|get
argument_list|(
literal|"ok"
argument_list|)
operator|.
name|equals
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Invalid token"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"token"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withCodeAndDescription
argument_list|(
name|VerificationError
operator|.
name|StandardCode
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Invalid token"
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"token"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|asJson (SlackMessage message)
specifier|protected
name|String
name|asJson
parameter_list|(
name|SlackMessage
name|message
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Put the values in a map
name|jsonMap
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate a JSONObject
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonMap
argument_list|)
decl_stmt|;
comment|// Return the string based on the JSON Object
return|return
name|JSONObject
operator|.
name|toJSONString
argument_list|(
name|jsonObject
argument_list|)
return|;
block|}
block|}
end_class

end_unit

