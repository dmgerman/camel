begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.slack.helper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|slack
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|SlackMessage
specifier|public
class|class
name|SlackMessage
block|{
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|channel
specifier|private
name|String
name|channel
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|iconUrl
specifier|private
name|String
name|iconUrl
decl_stmt|;
DECL|field|iconEmoji
specifier|private
name|String
name|iconEmoji
decl_stmt|;
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|text
return|;
block|}
DECL|method|setText (String text)
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
DECL|method|getChannel ()
specifier|public
name|String
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
DECL|method|setChannel (String channel)
specifier|public
name|void
name|setChannel
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getIconUrl ()
specifier|public
name|String
name|getIconUrl
parameter_list|()
block|{
return|return
name|iconUrl
return|;
block|}
DECL|method|setIconUrl (String iconUrl)
specifier|public
name|void
name|setIconUrl
parameter_list|(
name|String
name|iconUrl
parameter_list|)
block|{
name|this
operator|.
name|iconUrl
operator|=
name|iconUrl
expr_stmt|;
block|}
DECL|method|getIconEmoji ()
specifier|public
name|String
name|getIconEmoji
parameter_list|()
block|{
return|return
name|iconEmoji
return|;
block|}
DECL|method|setIconEmoji (String iconEmoji)
specifier|public
name|void
name|setIconEmoji
parameter_list|(
name|String
name|iconEmoji
parameter_list|)
block|{
name|this
operator|.
name|iconEmoji
operator|=
name|iconEmoji
expr_stmt|;
block|}
comment|/**      * Returns a JSON string to be posted to the Slack API      *      * @return JSON string      */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|jsonMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Put the values in a map
name|jsonMap
operator|.
name|put
argument_list|(
literal|"text"
argument_list|,
name|this
operator|.
name|text
argument_list|)
expr_stmt|;
name|jsonMap
operator|.
name|put
argument_list|(
literal|"channel"
argument_list|,
name|this
operator|.
name|channel
argument_list|)
expr_stmt|;
name|jsonMap
operator|.
name|put
argument_list|(
literal|"username"
argument_list|,
name|this
operator|.
name|username
argument_list|)
expr_stmt|;
name|jsonMap
operator|.
name|put
argument_list|(
literal|"icon_url"
argument_list|,
name|this
operator|.
name|iconUrl
argument_list|)
expr_stmt|;
name|jsonMap
operator|.
name|put
argument_list|(
literal|"icon_emoji"
argument_list|,
name|this
operator|.
name|iconEmoji
argument_list|)
expr_stmt|;
comment|// Generate a JSONObject
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|(
name|jsonMap
argument_list|)
decl_stmt|;
comment|// Return the string based on the JSON Object
return|return
name|JSONObject
operator|.
name|toJSONString
argument_list|(
name|jsonMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

