begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.stax.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|stax
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_class
DECL|class|RecordsUtil
specifier|public
specifier|final
class|class
name|RecordsUtil
block|{
DECL|method|RecordsUtil ()
specifier|private
name|RecordsUtil
parameter_list|()
block|{
comment|// no-op
block|}
DECL|method|createXMLFile ()
specifier|public
specifier|static
name|void
name|createXMLFile
parameter_list|()
block|{
name|File
name|in
init|=
operator|new
name|File
argument_list|(
literal|"target/in/records.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|in
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"can't create "
operator|+
name|in
operator|.
name|getParent
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Records
name|records
init|=
operator|new
name|Records
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Record
name|record
init|=
operator|new
name|Record
argument_list|()
decl_stmt|;
name|record
operator|.
name|setKey
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|.
name|setValue
argument_list|(
literal|"#"
operator|+
name|i
argument_list|)
expr_stmt|;
name|records
operator|.
name|getRecord
argument_list|()
operator|.
name|add
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
name|Marshaller
name|marshaller
decl_stmt|;
try|try
block|{
name|JAXBContext
name|jaxbCtx
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Records
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|marshaller
operator|=
name|jaxbCtx
operator|.
name|createMarshaller
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|FileWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|records
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// no-op
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

