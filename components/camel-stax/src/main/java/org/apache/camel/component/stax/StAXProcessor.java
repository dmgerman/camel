begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.stax
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ctc
operator|.
name|wstx
operator|.
name|sr
operator|.
name|ValidatingStreamReader
import|;
end_import

begin_comment
comment|/**  * It uses SAX content handler to handle events.  *<p/>  * The {@link Exchange} is expected to contain a message body, that is  * convertable to both a {@link InputSource} and a {@link XMLStreamReader}  * to support StAX streaming.  */
end_comment

begin_class
DECL|class|StAXProcessor
specifier|public
class|class
name|StAXProcessor
implements|implements
name|Processor
block|{
DECL|field|contentHandlerClass
specifier|private
specifier|final
name|Class
argument_list|<
name|ContentHandler
argument_list|>
name|contentHandlerClass
decl_stmt|;
DECL|field|contentHandler
specifier|private
specifier|final
name|ContentHandler
name|contentHandler
decl_stmt|;
DECL|method|StAXProcessor (Class<ContentHandler> contentHandlerClass)
specifier|public
name|StAXProcessor
parameter_list|(
name|Class
argument_list|<
name|ContentHandler
argument_list|>
name|contentHandlerClass
parameter_list|)
block|{
name|this
operator|.
name|contentHandlerClass
operator|=
name|contentHandlerClass
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|StAXProcessor (ContentHandler contentHandler)
specifier|public
name|StAXProcessor
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|)
block|{
name|this
operator|.
name|contentHandler
operator|=
name|contentHandler
expr_stmt|;
name|this
operator|.
name|contentHandlerClass
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|XMLStreamReader
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|StaxStreamXMLReader
name|reader
init|=
operator|new
name|StaxStreamXMLReader
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|ContentHandler
name|handler
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|contentHandlerClass
operator|!=
literal|null
condition|)
block|{
name|handler
operator|=
operator|(
name|ContentHandler
operator|)
name|this
operator|.
name|contentHandlerClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|=
name|this
operator|.
name|contentHandler
expr_stmt|;
block|}
name|reader
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
comment|// InputSource is ignored anyway
name|reader
operator|.
name|parse
argument_list|(
operator|(
name|InputSource
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|instanceof
name|ValidatingStreamReader
condition|)
block|{
comment|// didn't find any method without using the woodstox package
operator|(
operator|(
name|ValidatingStreamReader
operator|)
name|stream
operator|)
operator|.
name|closeCompletely
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

