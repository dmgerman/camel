begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.stax
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|XMLEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|LRUSoftCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|stax
operator|.
name|StAXUtil
operator|.
name|getTagName
import|;
end_import

begin_comment
comment|/**  * {@link org.apache.camel.Expression} to walk a {@link org.apache.camel.Message} body  * using an {@link Iterator}, which uses StAX to walk in streaming mode.  * The elements returned is a POJO which is bound using JAXB annotations.  *<p/>  * The message body must be able to convert to {@link XMLEventReader} type which is used as stream  * to access the message body. And there must be a JAXB annotated class to use as binding.  */
end_comment

begin_class
DECL|class|StAXJAXBIteratorExpression
specifier|public
class|class
name|StAXJAXBIteratorExpression
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ExpressionAdapter
block|{
DECL|field|JAX_CONTEXTS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
name|JAX_CONTEXTS
init|=
operator|new
name|LRUSoftCache
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|JAXBContext
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
DECL|field|handled
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|handled
decl_stmt|;
DECL|field|handledName
specifier|private
specifier|final
name|String
name|handledName
decl_stmt|;
comment|/**      * Creates this expression.      *      * @param handled the class which has JAXB annotations to bind POJO.      */
DECL|method|StAXJAXBIteratorExpression (Class<T> handled)
specifier|public
name|StAXJAXBIteratorExpression
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|handled
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|handled
argument_list|,
literal|"handled"
argument_list|)
expr_stmt|;
name|this
operator|.
name|handled
operator|=
name|handled
expr_stmt|;
name|this
operator|.
name|handledName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Creates this expression.      *      * @param handledName the FQN name of the class which has JAXB annotations to bind POJO.      */
DECL|method|StAXJAXBIteratorExpression (String handledName)
specifier|public
name|StAXJAXBIteratorExpression
parameter_list|(
name|String
name|handledName
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|handledName
argument_list|,
literal|"handledName"
argument_list|)
expr_stmt|;
name|this
operator|.
name|handledName
operator|=
name|handledName
expr_stmt|;
name|this
operator|.
name|handled
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|jaxbContext (Class<?> handled)
specifier|private
specifier|static
name|JAXBContext
name|jaxbContext
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|handled
parameter_list|)
throws|throws
name|JAXBException
block|{
if|if
condition|(
name|JAX_CONTEXTS
operator|.
name|containsKey
argument_list|(
name|handled
argument_list|)
condition|)
block|{
return|return
name|JAX_CONTEXTS
operator|.
name|get
argument_list|(
name|handled
argument_list|)
return|;
block|}
name|JAXBContext
name|context
decl_stmt|;
synchronized|synchronized
init|(
name|JAX_CONTEXTS
init|)
block|{
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|handled
argument_list|)
expr_stmt|;
name|JAX_CONTEXTS
operator|.
name|put
argument_list|(
name|handled
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
name|XMLEventReader
name|reader
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|XMLEventReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
init|=
name|handled
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|&&
name|handledName
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|resolveMandatoryClass
argument_list|(
name|handledName
argument_list|)
expr_stmt|;
block|}
return|return
name|createIterator
argument_list|(
name|reader
argument_list|,
name|clazz
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|createIterator (XMLEventReader reader, Class<T> clazz)
specifier|private
name|Iterator
argument_list|<
name|T
argument_list|>
name|createIterator
parameter_list|(
name|XMLEventReader
name|reader
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|JAXBException
block|{
return|return
operator|new
name|StAXJAXBIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|clazz
argument_list|,
name|reader
argument_list|)
return|;
block|}
comment|/**      * Iterator to walk the XML reader      */
DECL|class|StAXJAXBIterator
specifier|static
class|class
name|StAXJAXBIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|reader
specifier|private
specifier|final
name|XMLEventReader
name|reader
decl_stmt|;
DECL|field|clazz
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|unmarshaller
specifier|private
specifier|final
name|Unmarshaller
name|unmarshaller
decl_stmt|;
DECL|field|element
specifier|private
name|T
name|element
decl_stmt|;
DECL|method|StAXJAXBIterator (Class<T> clazz, XMLEventReader reader)
name|StAXJAXBIterator
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|XMLEventReader
name|reader
parameter_list|)
throws|throws
name|JAXBException
block|{
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|name
operator|=
name|getTagName
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|JAXBContext
name|jaxb
init|=
name|jaxbContext
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
comment|// unmarshaller is not thread safe so we need to create a new instance per iterator
name|unmarshaller
operator|=
name|jaxb
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
name|element
operator|=
name|getNextElement
argument_list|()
expr_stmt|;
block|}
return|return
name|element
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
name|element
operator|=
name|getNextElement
argument_list|()
expr_stmt|;
block|}
name|T
name|answer
init|=
name|element
decl_stmt|;
name|element
operator|=
literal|null
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|getNextElement ()
name|T
name|getNextElement
parameter_list|()
block|{
name|XMLEvent
name|xmlEvent
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|xmlEvent
operator|=
name|reader
operator|.
name|peek
argument_list|()
expr_stmt|;
if|if
condition|(
name|xmlEvent
operator|!=
literal|null
operator|&&
name|xmlEvent
operator|.
name|isStartElement
argument_list|()
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|xmlEvent
operator|.
name|asStartElement
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|clazz
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

