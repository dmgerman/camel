begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.stax
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|stax
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|DTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|Locator2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * class extracted from spring 3.0.6.RELEASE.  */
end_comment

begin_comment
comment|// CHECKSTYLE:OFF
end_comment

begin_class
DECL|class|StaxStreamXMLReader
specifier|public
class|class
name|StaxStreamXMLReader
implements|implements
name|XMLReader
block|{
DECL|field|DEFAULT_XML_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_XML_VERSION
init|=
literal|"1.0"
decl_stmt|;
DECL|field|NAMESPACES_FEATURE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACES_FEATURE_NAME
init|=
literal|"http://xml.org/sax/features/namespaces"
decl_stmt|;
DECL|field|NAMESPACE_PREFIXES_FEATURE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|NAMESPACE_PREFIXES_FEATURE_NAME
init|=
literal|"http://xml.org/sax/features/namespace-prefixes"
decl_stmt|;
DECL|field|IS_STANDALONE_FEATURE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|IS_STANDALONE_FEATURE_NAME
init|=
literal|"http://xml.org/sax/features/is-standalone"
decl_stmt|;
DECL|field|dtdHandler
specifier|private
name|DTDHandler
name|dtdHandler
decl_stmt|;
DECL|field|contentHandler
specifier|private
name|ContentHandler
name|contentHandler
decl_stmt|;
DECL|field|entityResolver
specifier|private
name|EntityResolver
name|entityResolver
decl_stmt|;
DECL|field|errorHandler
specifier|private
name|ErrorHandler
name|errorHandler
decl_stmt|;
DECL|field|lexicalHandler
specifier|private
name|LexicalHandler
name|lexicalHandler
decl_stmt|;
DECL|field|namespacesFeature
specifier|private
name|boolean
name|namespacesFeature
init|=
literal|true
decl_stmt|;
DECL|field|namespacePrefixesFeature
specifier|private
name|boolean
name|namespacePrefixesFeature
init|=
literal|false
decl_stmt|;
DECL|field|isStandalone
specifier|private
name|Boolean
name|isStandalone
decl_stmt|;
DECL|field|namespaces
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|reader
specifier|private
specifier|final
name|XMLStreamReader
name|reader
decl_stmt|;
DECL|field|xmlVersion
specifier|private
name|String
name|xmlVersion
init|=
name|DEFAULT_XML_VERSION
decl_stmt|;
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
comment|/** 	 * Constructs a new instance of the<code>StaxStreamXmlReader</code> that reads from the given 	 *<code>XMLStreamReader</code>.  The supplied stream reader must be in<code>XMLStreamConstants.START_DOCUMENT</code> 	 * or<code>XMLStreamConstants.START_ELEMENT</code> state. 	 * 	 * @param reader the<code>XMLEventReader</code> to read from 	 * @throws IllegalStateException if the reader is not at the start of a document or element 	 */
DECL|method|StaxStreamXMLReader (XMLStreamReader reader)
name|StaxStreamXMLReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'reader' must not be null"
argument_list|)
throw|;
block|}
name|int
name|event
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|event
operator|==
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
operator|||
name|event
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"XMLEventReader not at start of document or element"
argument_list|)
throw|;
block|}
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
block|}
DECL|method|parseInternal ()
specifier|protected
name|void
name|parseInternal
parameter_list|()
throws|throws
name|SAXException
throws|,
name|XMLStreamException
block|{
name|boolean
name|documentStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|documentEnded
init|=
literal|false
decl_stmt|;
name|int
name|elementDepth
init|=
literal|0
decl_stmt|;
name|int
name|eventType
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|eventType
operator|!=
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
operator|&&
name|eventType
operator|!=
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
operator|&&
operator|!
name|documentStarted
condition|)
block|{
name|handleStartDocument
argument_list|()
expr_stmt|;
name|documentStarted
operator|=
literal|true
expr_stmt|;
block|}
switch|switch
condition|(
name|eventType
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
name|elementDepth
operator|++
expr_stmt|;
name|handleStartElement
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
name|elementDepth
operator|--
expr_stmt|;
if|if
condition|(
name|elementDepth
operator|>=
literal|0
condition|)
block|{
name|handleEndElement
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|PROCESSING_INSTRUCTION
case|:
name|handleProcessingInstruction
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
case|case
name|XMLStreamConstants
operator|.
name|SPACE
case|:
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
name|handleCharacters
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
case|:
name|handleStartDocument
argument_list|()
expr_stmt|;
name|documentStarted
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
case|:
name|handleEndDocument
argument_list|()
expr_stmt|;
name|documentEnded
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
name|handleComment
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|DTD
case|:
name|handleDtd
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ENTITY_REFERENCE
case|:
name|handleEntityReference
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
operator|&&
name|elementDepth
operator|>=
literal|0
condition|)
block|{
name|eventType
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|documentEnded
condition|)
block|{
name|handleEndDocument
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleStartDocument ()
specifier|private
name|void
name|handleStartDocument
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
operator|==
name|reader
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|String
name|xmlVersion
init|=
name|reader
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|xmlVersion
argument_list|)
condition|)
block|{
name|this
operator|.
name|xmlVersion
operator|=
name|xmlVersion
expr_stmt|;
block|}
name|this
operator|.
name|encoding
operator|=
name|reader
operator|.
name|getCharacterEncodingScheme
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Location
name|location
init|=
name|reader
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|getContentHandler
argument_list|()
operator|.
name|setDocumentLocator
argument_list|(
operator|new
name|Locator2
argument_list|()
block|{
specifier|public
name|int
name|getColumnNumber
parameter_list|()
block|{
return|return
name|location
operator|!=
literal|null
condition|?
name|location
operator|.
name|getColumnNumber
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
name|location
operator|!=
literal|null
condition|?
name|location
operator|.
name|getLineNumber
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|getPublicId
parameter_list|()
block|{
return|return
name|location
operator|!=
literal|null
condition|?
name|location
operator|.
name|getPublicId
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
name|location
operator|!=
literal|null
condition|?
name|location
operator|.
name|getSystemId
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|getXMLVersion
parameter_list|()
block|{
return|return
name|xmlVersion
return|;
block|}
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|getContentHandler
argument_list|()
operator|.
name|startDocument
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|standaloneSet
argument_list|()
condition|)
block|{
name|setStandalone
argument_list|(
name|reader
operator|.
name|isStandalone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleStartElement ()
specifier|private
name|void
name|handleStartElement
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|QName
name|qName
init|=
name|reader
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasNamespacesFeature
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|startPrefixMapping
argument_list|(
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|prefix
init|=
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
name|getContentHandler
argument_list|()
operator|.
name|startElement
argument_list|(
name|qName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|toQualifiedName
argument_list|(
name|qName
argument_list|)
argument_list|,
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getContentHandler
argument_list|()
operator|.
name|startElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|toQualifiedName
argument_list|(
name|qName
argument_list|)
argument_list|,
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleEndElement ()
specifier|private
name|void
name|handleEndElement
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|QName
name|qName
init|=
name|reader
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasNamespacesFeature
argument_list|()
condition|)
block|{
name|getContentHandler
argument_list|()
operator|.
name|endElement
argument_list|(
name|qName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|toQualifiedName
argument_list|(
name|qName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|prefix
init|=
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
name|endPrefixMapping
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getContentHandler
argument_list|()
operator|.
name|endElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|toQualifiedName
argument_list|(
name|qName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleCharacters ()
specifier|private
name|void
name|handleCharacters
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
operator|&&
name|reader
operator|.
name|isWhiteSpace
argument_list|()
condition|)
block|{
name|getContentHandler
argument_list|()
operator|.
name|ignorableWhitespace
argument_list|(
name|reader
operator|.
name|getTextCharacters
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextStart
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextLength
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|XMLStreamConstants
operator|.
name|CDATA
operator|==
name|reader
operator|.
name|getEventType
argument_list|()
operator|&&
name|getLexicalHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLexicalHandler
argument_list|()
operator|.
name|startCDATA
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getContentHandler
argument_list|()
operator|.
name|characters
argument_list|(
name|reader
operator|.
name|getTextCharacters
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextStart
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|XMLStreamConstants
operator|.
name|CDATA
operator|==
name|reader
operator|.
name|getEventType
argument_list|()
operator|&&
name|getLexicalHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLexicalHandler
argument_list|()
operator|.
name|endCDATA
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleComment ()
specifier|private
name|void
name|handleComment
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getLexicalHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLexicalHandler
argument_list|()
operator|.
name|comment
argument_list|(
name|reader
operator|.
name|getTextCharacters
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextStart
argument_list|()
argument_list|,
name|reader
operator|.
name|getTextLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleDtd ()
specifier|private
name|void
name|handleDtd
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getLexicalHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
name|location
init|=
name|reader
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|getLexicalHandler
argument_list|()
operator|.
name|startDTD
argument_list|(
literal|null
argument_list|,
name|location
operator|.
name|getPublicId
argument_list|()
argument_list|,
name|location
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLexicalHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLexicalHandler
argument_list|()
operator|.
name|endDTD
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleEntityReference ()
specifier|private
name|void
name|handleEntityReference
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getLexicalHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLexicalHandler
argument_list|()
operator|.
name|startEntity
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLexicalHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLexicalHandler
argument_list|()
operator|.
name|endEntity
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleEndDocument ()
specifier|private
name|void
name|handleEndDocument
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getContentHandler
argument_list|()
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleProcessingInstruction ()
specifier|private
name|void
name|handleProcessingInstruction
parameter_list|()
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getContentHandler
argument_list|()
operator|.
name|processingInstruction
argument_list|(
name|reader
operator|.
name|getPITarget
argument_list|()
argument_list|,
name|reader
operator|.
name|getPIData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getAttributes ()
specifier|private
name|Attributes
name|getAttributes
parameter_list|()
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|namespace
init|=
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
operator|||
operator|!
name|hasNamespacesFeature
argument_list|()
condition|)
block|{
name|namespace
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|type
init|=
name|reader
operator|.
name|getAttributeType
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
literal|"CDATA"
expr_stmt|;
block|}
name|attributes
operator|.
name|addAttribute
argument_list|(
name|namespace
argument_list|,
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|toQualifiedName
argument_list|(
name|reader
operator|.
name|getAttributeName
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|type
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasNamespacePrefixesFeature
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|prefix
init|=
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|namespaceUri
init|=
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|qName
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|qName
operator|=
literal|"xmlns:"
operator|+
name|prefix
expr_stmt|;
block|}
else|else
block|{
name|qName
operator|=
literal|"xmlns"
expr_stmt|;
block|}
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|qName
argument_list|,
literal|"CDATA"
argument_list|,
name|namespaceUri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributes
return|;
block|}
comment|// AbstractStaxXmlReader
annotation|@
name|Override
DECL|method|getFeature (String name)
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|NAMESPACES_FEATURE_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|namespacesFeature
return|;
block|}
elseif|else
if|if
condition|(
name|NAMESPACE_PREFIXES_FEATURE_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|namespacePrefixesFeature
return|;
block|}
elseif|else
if|if
condition|(
name|IS_STANDALONE_FEATURE_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|isStandalone
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|isStandalone
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
literal|"startDocument() callback not completed yet"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|setFeature (String name, boolean value)
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|NAMESPACES_FEATURE_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|namespacesFeature
operator|=
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|NAMESPACE_PREFIXES_FEATURE_NAME
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|namespacePrefixesFeature
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
block|}
DECL|method|setStandalone (boolean standalone)
specifier|protected
name|void
name|setStandalone
parameter_list|(
name|boolean
name|standalone
parameter_list|)
block|{
name|this
operator|.
name|isStandalone
operator|=
name|standalone
expr_stmt|;
block|}
comment|/** 	 * Indicates whether the SAX feature<code>http://xml.org/sax/features/namespaces</code> is turned on. 	 */
DECL|method|hasNamespacesFeature ()
specifier|protected
name|boolean
name|hasNamespacesFeature
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespacesFeature
return|;
block|}
comment|/** 	 * Indicates whether the SAX feature<code>http://xml.org/sax/features/namespaces-prefixes</code> is turned on. 	 */
DECL|method|hasNamespacePrefixesFeature ()
specifier|protected
name|boolean
name|hasNamespacePrefixesFeature
parameter_list|()
block|{
return|return
name|this
operator|.
name|namespacePrefixesFeature
return|;
block|}
comment|/** 	 * Convert a<code>QName</code> to a qualified name, as used by DOM and SAX. 	 * The returned string has a format of<code>prefix:localName</code> if the 	 * prefix is set, or just<code>localName</code> if not. 	 * @param qName the<code>QName</code> 	 * @return the qualified name 	 */
DECL|method|toQualifiedName (QName qName)
specifier|protected
name|String
name|toQualifiedName
parameter_list|(
name|QName
name|qName
parameter_list|)
block|{
name|String
name|prefix
init|=
name|qName
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|qName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|prefix
operator|+
literal|":"
operator|+
name|qName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
block|}
comment|/** 	 * Parse the StAX XML reader passed at construction-time. 	 *<p><b>NOTE:</b>: The given<code>InputSource</code> is not read, but ignored. 	 * @param ignored is ignored 	 * @throws SAXException a SAX exception, possibly wrapping a<code>XMLStreamException</code> 	 */
DECL|method|parse (InputSource ignored)
specifier|public
specifier|final
name|void
name|parse
parameter_list|(
name|InputSource
name|ignored
parameter_list|)
throws|throws
name|SAXException
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Parse the StAX XML reader passed at construction-time. 	 *<p><b>NOTE:</b>: The given system identifier is not read, but ignored. 	 * @param ignored is ignored 	 * @throws SAXException A SAX exception, possibly wrapping a<code>XMLStreamException</code> 	 */
DECL|method|parse (String ignored)
specifier|public
specifier|final
name|void
name|parse
parameter_list|(
name|String
name|ignored
parameter_list|)
throws|throws
name|SAXException
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
DECL|method|parse ()
specifier|private
name|void
name|parse
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|parseInternal
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|ex
parameter_list|)
block|{
name|Locator
name|locator
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ex
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|locator
operator|=
operator|new
name|StaxLocator
argument_list|(
name|ex
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SAXParseException
name|saxException
init|=
operator|new
name|SAXParseException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|locator
argument_list|,
name|ex
argument_list|)
decl_stmt|;
if|if
condition|(
name|getErrorHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getErrorHandler
argument_list|()
operator|.
name|fatalError
argument_list|(
name|saxException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|saxException
throw|;
block|}
block|}
block|}
comment|/** 	 * Starts the prefix mapping for the given prefix. 	 * @see org.xml.sax.ContentHandler#startPrefixMapping(String, String) 	 */
DECL|method|startPrefixMapping (String prefix, String namespace)
specifier|protected
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|namespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
condition|)
block|{
name|getContentHandler
argument_list|()
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Ends the prefix mapping for the given prefix. 	 * @see org.xml.sax.ContentHandler#endPrefixMapping(String) 	 */
DECL|method|endPrefixMapping (String prefix)
specifier|protected
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|getContentHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|namespaces
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|getContentHandler
argument_list|()
operator|.
name|endPrefixMapping
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Implementation of the<code>Locator</code> interface that is based on a StAX<code>Location</code>. 	 * @see Locator 	 * @see Location 	 */
DECL|class|StaxLocator
specifier|private
specifier|static
class|class
name|StaxLocator
implements|implements
name|Locator
block|{
DECL|field|location
specifier|private
name|Location
name|location
decl_stmt|;
DECL|method|StaxLocator (Location location)
specifier|protected
name|StaxLocator
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
DECL|method|getPublicId ()
specifier|public
name|String
name|getPublicId
parameter_list|()
block|{
return|return
name|location
operator|.
name|getPublicId
argument_list|()
return|;
block|}
DECL|method|getSystemId ()
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
name|location
operator|.
name|getSystemId
argument_list|()
return|;
block|}
DECL|method|getLineNumber ()
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
name|location
operator|.
name|getLineNumber
argument_list|()
return|;
block|}
DECL|method|getColumnNumber ()
specifier|public
name|int
name|getColumnNumber
parameter_list|()
block|{
return|return
name|location
operator|.
name|getColumnNumber
argument_list|()
return|;
block|}
block|}
comment|// AbstractXMLReader
DECL|method|getContentHandler ()
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
block|{
return|return
name|contentHandler
return|;
block|}
DECL|method|setContentHandler (ContentHandler contentHandler)
specifier|public
name|void
name|setContentHandler
parameter_list|(
name|ContentHandler
name|contentHandler
parameter_list|)
block|{
name|this
operator|.
name|contentHandler
operator|=
name|contentHandler
expr_stmt|;
block|}
DECL|method|setDTDHandler (DTDHandler dtdHandler)
specifier|public
name|void
name|setDTDHandler
parameter_list|(
name|DTDHandler
name|dtdHandler
parameter_list|)
block|{
name|this
operator|.
name|dtdHandler
operator|=
name|dtdHandler
expr_stmt|;
block|}
DECL|method|getDTDHandler ()
specifier|public
name|DTDHandler
name|getDTDHandler
parameter_list|()
block|{
return|return
name|dtdHandler
return|;
block|}
DECL|method|getEntityResolver ()
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
name|entityResolver
return|;
block|}
DECL|method|setEntityResolver (EntityResolver entityResolver)
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|entityResolver
parameter_list|)
block|{
name|this
operator|.
name|entityResolver
operator|=
name|entityResolver
expr_stmt|;
block|}
DECL|method|getErrorHandler ()
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
DECL|method|setErrorHandler (ErrorHandler errorHandler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
DECL|method|getLexicalHandler ()
specifier|protected
name|LexicalHandler
name|getLexicalHandler
parameter_list|()
block|{
return|return
name|lexicalHandler
return|;
block|}
comment|/** 	 * Throws a<code>SAXNotRecognizedException</code> exception when the given property does not signify a lexical 	 * handler. The property name for a lexical handler is<code>http://xml.org/sax/properties/lexical-handler</code>. 	 */
DECL|method|getProperty (String name)
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
literal|"http://xml.org/sax/properties/lexical-handler"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|lexicalHandler
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Throws a<code>SAXNotRecognizedException</code> exception when the given property does not signify a lexical 	 * handler. The property name for a lexical handler is<code>http://xml.org/sax/properties/lexical-handler</code>. 	 */
DECL|method|setProperty (String name, Object value)
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
literal|"http://xml.org/sax/properties/lexical-handler"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|lexicalHandler
operator|=
operator|(
name|LexicalHandler
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
name|name
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_comment
comment|// CHECKSTYLE:ON
end_comment

end_unit

