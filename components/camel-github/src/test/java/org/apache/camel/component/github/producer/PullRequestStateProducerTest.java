begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.github.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|GitHubComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|GitHubComponentTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|egit
operator|.
name|github
operator|.
name|core
operator|.
name|CommitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|PullRequestStateProducerTest
specifier|public
class|class
name|PullRequestStateProducerTest
extends|extends
name|GitHubComponentTestBase
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PullRequestStateProducerTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|commitsha
specifier|private
name|String
name|commitsha
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addComponent
argument_list|(
literal|"github"
argument_list|,
operator|new
name|GitHubComponent
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:validPullRequest"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MockPullRequestStateProducerProcessor
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"github://pullRequestState?state=success&"
operator|+
name|GITHUB_CREDENTIALS_STRING
argument_list|)
expr_stmt|;
block|}
comment|// end of configure
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testPullRequestStateProducer ()
specifier|public
name|void
name|testPullRequestStateProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|commitsha
operator|=
name|commitService
operator|.
name|getNextSha
argument_list|()
expr_stmt|;
name|Endpoint
name|stateProducerEndpoint
init|=
name|getMandatoryEndpoint
argument_list|(
literal|"direct:validPullRequest"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|stateProducerEndpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|String
name|text
init|=
literal|"Message sent at "
operator|+
operator|new
name|Date
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Exchange
name|response
init|=
name|template
operator|.
name|send
argument_list|(
name|stateProducerEndpoint
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|response
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|instanceof
name|CommitStatus
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expecting CommitStatus"
argument_list|)
expr_stmt|;
block|}
name|CommitStatus
name|status
init|=
name|response
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|CommitStatus
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Check status set on commit service
if|if
condition|(
name|commitService
operator|.
name|getCommitStatus
argument_list|(
name|commitsha
argument_list|)
operator|!=
name|status
condition|)
block|{
name|fail
argument_list|(
literal|"Commit status sent to service is different from response"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|status
operator|.
name|getState
argument_list|()
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|status
operator|.
name|getDescription
argument_list|()
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
DECL|class|MockPullRequestStateProducerProcessor
specifier|public
class|class
name|MockPullRequestStateProducerProcessor
implements|implements
name|Processor
block|{
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|in
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"GitHubPullRequestHeadCommitSHA"
argument_list|,
name|commitsha
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

