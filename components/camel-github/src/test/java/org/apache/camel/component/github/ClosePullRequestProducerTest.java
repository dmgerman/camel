begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.github
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|egit
operator|.
name|github
operator|.
name|core
operator|.
name|CommitComment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|egit
operator|.
name|github
operator|.
name|core
operator|.
name|PullRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ClosePullRequestProducerTest
specifier|public
class|class
name|ClosePullRequestProducerTest
extends|extends
name|GitHubComponentTestBase
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClosePullRequestProducerTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|latestPullRequestId
specifier|private
name|long
name|latestPullRequestId
decl_stmt|;
DECL|field|PULL_REQUEST_PRODUCER_ENDPOINT
specifier|public
specifier|static
specifier|final
name|String
name|PULL_REQUEST_PRODUCER_ENDPOINT
init|=
literal|"direct:validPullRequest"
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addComponent
argument_list|(
literal|"github"
argument_list|,
operator|new
name|GitHubComponent
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|PULL_REQUEST_PRODUCER_ENDPOINT
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|ClosePullRequestProducerProcessor
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"github://closePullRequest?"
operator|+
name|GITHUB_CREDENTIALS_STRING
argument_list|)
expr_stmt|;
block|}
comment|// end of configure
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testPullRequestCommentProducer ()
specifier|public
name|void
name|testPullRequestCommentProducer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a pull request
name|PullRequest
name|pullRequest
init|=
name|pullRequestService
operator|.
name|addPullRequest
argument_list|(
literal|"testPullRequestCommentProducer"
argument_list|)
decl_stmt|;
name|latestPullRequestId
operator|=
name|pullRequest
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|// Close it
name|Endpoint
name|closePullRequestEndpoint
init|=
name|getMandatoryEndpoint
argument_list|(
name|PULL_REQUEST_PRODUCER_ENDPOINT
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|closePullRequestEndpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|template
operator|.
name|send
argument_list|(
name|closePullRequestEndpoint
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Verify that it was closed
name|List
argument_list|<
name|PullRequest
argument_list|>
name|closedPullRequests
init|=
name|pullRequestService
operator|.
name|getPullRequests
argument_list|(
literal|null
argument_list|,
literal|"closed"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|closedPullRequests
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PullRequest
name|pr
range|:
name|closedPullRequests
control|)
block|{
if|if
condition|(
name|pr
operator|.
name|getId
argument_list|()
operator|==
name|latestPullRequestId
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Didn't find pull request "
operator|+
name|latestPullRequestId
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
DECL|class|ClosePullRequestProducerProcessor
specifier|public
class|class
name|ClosePullRequestProducerProcessor
implements|implements
name|Processor
block|{
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|in
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"GitHubPullRequest"
argument_list|,
name|latestPullRequestId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

