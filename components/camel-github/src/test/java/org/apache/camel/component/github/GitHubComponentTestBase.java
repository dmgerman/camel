begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.github
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|services
operator|.
name|MockCommitService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|services
operator|.
name|MockIssueService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|services
operator|.
name|MockPullRequestService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|services
operator|.
name|MockRepositoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GitHubComponentTestBase
specifier|public
specifier|abstract
class|class
name|GitHubComponentTestBase
extends|extends
name|CamelTestSupport
block|{
DECL|field|commitService
specifier|protected
name|MockCommitService
name|commitService
decl_stmt|;
DECL|field|repositoryService
specifier|protected
name|MockRepositoryService
name|repositoryService
decl_stmt|;
DECL|field|pullRequestService
specifier|protected
name|MockPullRequestService
name|pullRequestService
decl_stmt|;
DECL|field|issueService
specifier|protected
name|MockIssueService
name|issueService
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|mockResultEndpoint
specifier|protected
name|MockEndpoint
name|mockResultEndpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|commitService
operator|=
operator|new
name|MockCommitService
argument_list|()
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
name|GitHubConstants
operator|.
name|GITHUB_COMMIT_SERVICE
argument_list|,
name|commitService
argument_list|)
expr_stmt|;
name|repositoryService
operator|=
operator|new
name|MockRepositoryService
argument_list|()
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
name|GitHubConstants
operator|.
name|GITHUB_REPOSITORY_SERVICE
argument_list|,
name|repositoryService
argument_list|)
expr_stmt|;
name|pullRequestService
operator|=
operator|new
name|MockPullRequestService
argument_list|()
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
name|GitHubConstants
operator|.
name|GITHUB_PULL_REQUEST_SERVICE
argument_list|,
name|pullRequestService
argument_list|)
expr_stmt|;
name|issueService
operator|=
operator|new
name|MockIssueService
argument_list|(
name|pullRequestService
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
name|GitHubConstants
operator|.
name|GITHUB_ISSUE_SERVICE
argument_list|,
name|issueService
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Test
DECL|method|emptyAtStartupTest ()
specifier|public
name|void
name|emptyAtStartupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mockResultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

