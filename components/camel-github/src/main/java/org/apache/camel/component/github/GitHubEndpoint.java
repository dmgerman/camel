begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.github
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|consumer
operator|.
name|CommitConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|consumer
operator|.
name|ConsumerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|consumer
operator|.
name|PullRequestCommentConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|consumer
operator|.
name|PullRequestConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|consumer
operator|.
name|TagConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|producer
operator|.
name|ProducerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|producer
operator|.
name|PullRequestCommentProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_comment
comment|/**  * The endpoint encapsulates portions of the GitHub API, relying on the org.eclipse.egit.github.core Java SDK.  * Available endpoint URIs include:  *   * CONSUMERS  * github://pullRequest (new pull requests)  * github://pullRequestComment (new pull request comments)  * github://commit/[branch] (new commits)  * github://tag (new tags)  *   * PRODUCERS  * github://pullRequestComment (create a new pull request comment; see PullRequestCommentProducer for header requirements)  *   * The endpoints will respond with org.eclipse.egit.github.core-provided POJOs (PullRequest, CommitComment,  * RepositoryTag, RepositoryCommit, etc.)  *   * Note: Rather than webhooks, this endpoint relies on simple polling.  Reasons include:  * - concerned about reliability/stability if this somehow relied on an exposed, embedded server (Jetty?)  * - the types of payloads we're polling aren't typically large (plus, paging is available in the API)  * - need to support apps running somewhere not publicly accessible where a webhook would fail  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"github"
argument_list|)
annotation|@
name|UriParams
DECL|class|GitHubEndpoint
specifier|public
class|class
name|GitHubEndpoint
extends|extends
name|DefaultEndpoint
block|{
annotation|@
name|UriParam
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|UriParam
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|UriParam
DECL|field|oauthToken
specifier|private
name|String
name|oauthToken
decl_stmt|;
annotation|@
name|UriParam
DECL|field|repoOwner
specifier|private
name|String
name|repoOwner
decl_stmt|;
annotation|@
name|UriParam
DECL|field|repoName
specifier|private
name|String
name|repoName
decl_stmt|;
DECL|method|GitHubEndpoint (String uri, GitHubComponent component)
specifier|public
name|GitHubEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|GitHubComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|getEndpointUri
argument_list|()
decl_stmt|;
name|String
index|[]
name|uriSplit
init|=
name|splitUri
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|ProducerType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
case|case
name|PULLREQUESTCOMMENT
case|:
return|return
operator|new
name|PullRequestCommentProducer
argument_list|(
name|this
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any producer with uri "
operator|+
name|uri
operator|+
literal|". A producer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|getEndpointUri
argument_list|()
decl_stmt|;
name|String
index|[]
name|uriSplit
init|=
name|splitUri
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|ConsumerType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
case|case
name|COMMIT
case|:
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>=
literal|2
operator|&&
name|uriSplit
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
operator|new
name|CommitConsumer
argument_list|(
name|uriSplit
index|[
literal|1
index|]
argument_list|,
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Must provide a branch name when using the COMMIT consumer.  github://commit/[branch name]?[options]"
argument_list|)
throw|;
block|}
case|case
name|PULLREQUEST
case|:
return|return
operator|new
name|PullRequestConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|PULLREQUESTCOMMENT
case|:
return|return
operator|new
name|PullRequestCommentConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|TAG
case|:
return|return
operator|new
name|TagConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any consumer with uri "
operator|+
name|uri
operator|+
literal|". A consumer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|splitUri (String uri)
specifier|private
specifier|static
name|String
index|[]
name|splitUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Pattern
name|p1
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"github:(//)*"
argument_list|)
decl_stmt|;
name|Pattern
name|p2
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\?.*"
argument_list|)
decl_stmt|;
name|uri
operator|=
name|p1
operator|.
name|matcher
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|uri
operator|=
name|p2
operator|.
name|matcher
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|uri
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getOauthToken ()
specifier|public
name|String
name|getOauthToken
parameter_list|()
block|{
return|return
name|oauthToken
return|;
block|}
DECL|method|setOauthToken (String oauthToken)
specifier|public
name|void
name|setOauthToken
parameter_list|(
name|String
name|oauthToken
parameter_list|)
block|{
name|this
operator|.
name|oauthToken
operator|=
name|oauthToken
expr_stmt|;
block|}
DECL|method|hasOauth ()
specifier|public
name|boolean
name|hasOauth
parameter_list|()
block|{
return|return
name|oauthToken
operator|!=
literal|null
operator|&&
name|oauthToken
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|getRepoOwner ()
specifier|public
name|String
name|getRepoOwner
parameter_list|()
block|{
return|return
name|repoOwner
return|;
block|}
DECL|method|setRepoOwner (String repoOwner)
specifier|public
name|void
name|setRepoOwner
parameter_list|(
name|String
name|repoOwner
parameter_list|)
block|{
name|this
operator|.
name|repoOwner
operator|=
name|repoOwner
expr_stmt|;
block|}
DECL|method|getRepoName ()
specifier|public
name|String
name|getRepoName
parameter_list|()
block|{
return|return
name|repoName
return|;
block|}
DECL|method|setRepoName (String repoName)
specifier|public
name|void
name|setRepoName
parameter_list|(
name|String
name|repoName
parameter_list|)
block|{
name|this
operator|.
name|repoName
operator|=
name|repoName
expr_stmt|;
block|}
block|}
end_class

end_unit

