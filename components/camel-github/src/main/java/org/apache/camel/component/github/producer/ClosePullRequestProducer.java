begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.github.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|github
operator|.
name|GitHubEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|egit
operator|.
name|github
operator|.
name|core
operator|.
name|PullRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|egit
operator|.
name|github
operator|.
name|core
operator|.
name|service
operator|.
name|PullRequestService
import|;
end_import

begin_comment
comment|/**  * Producer endpoint that closes a pull request.  The endpoint requires the "GitHubPullRequest" header,  * identifying the pull request number (integer).  */
end_comment

begin_class
DECL|class|ClosePullRequestProducer
specifier|public
class|class
name|ClosePullRequestProducer
extends|extends
name|AbstractGitHubProducer
block|{
DECL|field|pullRequestService
specifier|private
name|PullRequestService
name|pullRequestService
decl_stmt|;
DECL|method|ClosePullRequestProducer (GitHubEndpoint endpoint)
specifier|public
name|ClosePullRequestProducer
parameter_list|(
name|GitHubEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|pullRequestService
operator|=
operator|new
name|PullRequestService
argument_list|()
expr_stmt|;
name|initService
argument_list|(
name|pullRequestService
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Integer
name|pullRequestNumber
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"GitHubPullRequest"
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|PullRequest
name|pullRequest
init|=
name|pullRequestService
operator|.
name|getPullRequest
argument_list|(
name|getRepository
argument_list|()
argument_list|,
name|pullRequestNumber
argument_list|)
decl_stmt|;
name|pullRequest
operator|.
name|setState
argument_list|(
literal|"closed"
argument_list|)
expr_stmt|;
name|pullRequest
operator|.
name|setClosedAt
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|pullRequest
operator|=
name|pullRequestService
operator|.
name|editPullRequest
argument_list|(
name|getRepository
argument_list|()
argument_list|,
name|pullRequest
argument_list|)
expr_stmt|;
comment|// support InOut
if|if
condition|(
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
comment|// copy the header of in message to the out message
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|pullRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

