begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.snmp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyEditorSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|smi
operator|.
name|OID
import|;
end_import

begin_class
DECL|class|OIDListEditor
specifier|public
class|class
name|OIDListEditor
extends|extends
name|PropertyEditorSupport
block|{
annotation|@
name|Override
DECL|method|setAsText (String text)
specifier|public
name|void
name|setAsText
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|OIDList
name|list
init|=
operator|new
name|OIDList
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// seems to be a comma separated oid list
name|StringTokenizer
name|strTok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|text
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|strTok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|tok
init|=
name|strTok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|tok
operator|!=
literal|null
operator|&&
name|tok
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|OID
argument_list|(
name|tok
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// empty token - skip
block|}
block|}
block|}
else|else
block|{
comment|// maybe a single oid
name|list
operator|.
name|add
argument_list|(
operator|new
name|OID
argument_list|(
name|text
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setValue
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

