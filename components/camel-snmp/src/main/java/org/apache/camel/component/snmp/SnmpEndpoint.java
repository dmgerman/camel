begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.snmp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPollingEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|CommandResponderEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|PDU
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|mp
operator|.
name|SnmpConstants
import|;
end_import

begin_class
DECL|class|SnmpEndpoint
specifier|public
class|class
name|SnmpEndpoint
extends|extends
name|DefaultPollingEndpoint
block|{
DECL|field|DEFAULT_COMMUNITY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_COMMUNITY
init|=
literal|"public"
decl_stmt|;
DECL|field|DEFAULT_SNMP_VERSION
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SNMP_VERSION
init|=
name|SnmpConstants
operator|.
name|version1
decl_stmt|;
DECL|field|DEFAULT_SNMP_RETRIES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SNMP_RETRIES
init|=
literal|2
decl_stmt|;
DECL|field|DEFAULT_SNMP_TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SNMP_TIMEOUT
init|=
literal|1500
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SnmpEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|oids
specifier|private
name|OIDList
name|oids
init|=
operator|new
name|OIDList
argument_list|()
decl_stmt|;
DECL|field|address
specifier|private
name|String
name|address
decl_stmt|;
DECL|field|protocol
specifier|private
name|String
name|protocol
init|=
literal|"udp"
decl_stmt|;
DECL|field|retries
specifier|private
name|int
name|retries
init|=
name|DEFAULT_SNMP_RETRIES
decl_stmt|;
DECL|field|timeout
specifier|private
name|int
name|timeout
init|=
name|DEFAULT_SNMP_TIMEOUT
decl_stmt|;
DECL|field|snmpVersion
specifier|private
name|int
name|snmpVersion
init|=
name|DEFAULT_SNMP_VERSION
decl_stmt|;
DECL|field|snmpCommunity
specifier|private
name|String
name|snmpCommunity
init|=
name|DEFAULT_COMMUNITY
decl_stmt|;
DECL|field|type
specifier|private
name|SnmpActionType
name|type
decl_stmt|;
DECL|field|delay
specifier|private
name|int
name|delay
init|=
literal|60
decl_stmt|;
comment|/**      * creates a snmp endpoint      *      * @param uri       the endpoint uri      * @param component the component      */
DECL|method|SnmpEndpoint (String uri, SnmpComponent component)
specifier|public
name|SnmpEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|SnmpComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|type
operator|==
name|SnmpActionType
operator|.
name|TRAP
condition|)
block|{
name|SnmpTrapConsumer
name|answer
init|=
operator|new
name|SnmpTrapConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|type
operator|==
name|SnmpActionType
operator|.
name|POLL
condition|)
block|{
name|SnmpOIDPoller
name|answer
init|=
operator|new
name|SnmpOIDPoller
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The type '"
operator|+
name|this
operator|.
name|type
operator|+
literal|"' is not valid!"
argument_list|)
throw|;
block|}
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"SnmpProducer is not implemented"
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * creates an exchange for the given message      *      * @param pdu the pdu      * @return an exchange      */
DECL|method|createExchange (PDU pdu)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|PDU
name|pdu
parameter_list|)
block|{
return|return
name|createExchange
argument_list|(
name|getExchangePattern
argument_list|()
argument_list|,
name|pdu
argument_list|)
return|;
block|}
comment|/**      * creates an exchange for the given message      *      * @param pdu the pdu      * @param event a snmp4j CommandResponderEvent      * @return an exchange      */
DECL|method|createExchange (PDU pdu, CommandResponderEvent event)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|PDU
name|pdu
parameter_list|,
name|CommandResponderEvent
name|event
parameter_list|)
block|{
return|return
name|createExchange
argument_list|(
name|getExchangePattern
argument_list|()
argument_list|,
name|pdu
argument_list|,
name|event
argument_list|)
return|;
block|}
comment|/**      * creates an exchange for the given pattern and message      *      * @param pattern the message exchange pattern      * @param pdu     the pdu      * @return the exchange      */
DECL|method|createExchange (ExchangePattern pattern, PDU pdu)
specifier|private
name|Exchange
name|createExchange
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|PDU
name|pdu
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|this
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
operator|new
name|SnmpMessage
argument_list|(
name|pdu
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
comment|/**      * creates an exchange for the given pattern and message      *      * @param pattern the message exchange pattern      * @param pdu     the pdu      * @param event   a snmp4j CommandResponderEvent      * @return the exchange      */
DECL|method|createExchange (ExchangePattern pattern, PDU pdu, CommandResponderEvent event)
specifier|private
name|Exchange
name|createExchange
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|,
name|PDU
name|pdu
parameter_list|,
name|CommandResponderEvent
name|event
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|this
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
operator|new
name|SnmpMessage
argument_list|(
name|pdu
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
comment|/**      * creates and configures the endpoint      *      * @throws Exception if unable to setup connection      */
DECL|method|initiate ()
specifier|public
name|void
name|initiate
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
operator|||
name|host
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
block|{
name|host
operator|=
literal|"127.0.0.1"
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|SnmpActionType
operator|.
name|POLL
condition|)
block|{
name|port
operator|=
literal|161
expr_stmt|;
comment|// default snmp poll port
block|}
else|else
block|{
name|port
operator|=
literal|162
expr_stmt|;
comment|// default trap port
block|}
block|}
comment|// set the address
name|String
name|address
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s/%d"
argument_list|,
name|getProtocol
argument_list|()
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using snmp address {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
DECL|method|getDelay ()
specifier|public
name|int
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
comment|/**      * Sets update rate in seconds      *      * @param updateEvery the update rate in seconds      */
DECL|method|setDelay (int updateEvery)
specifier|public
name|void
name|setDelay
parameter_list|(
name|int
name|updateEvery
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|updateEvery
expr_stmt|;
block|}
DECL|method|getType ()
specifier|public
name|SnmpActionType
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
DECL|method|setType (SnmpActionType type)
specifier|public
name|void
name|setType
parameter_list|(
name|SnmpActionType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getOids ()
specifier|public
name|OIDList
name|getOids
parameter_list|()
block|{
return|return
name|this
operator|.
name|oids
return|;
block|}
DECL|method|setOids (OIDList oids)
specifier|public
name|void
name|setOids
parameter_list|(
name|OIDList
name|oids
parameter_list|)
block|{
name|this
operator|.
name|oids
operator|=
name|oids
expr_stmt|;
block|}
DECL|method|getAddress ()
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|address
return|;
block|}
DECL|method|setAddress (String address)
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
DECL|method|getRetries ()
specifier|public
name|int
name|getRetries
parameter_list|()
block|{
return|return
name|this
operator|.
name|retries
return|;
block|}
DECL|method|setRetries (int retries)
specifier|public
name|void
name|setRetries
parameter_list|(
name|int
name|retries
parameter_list|)
block|{
name|this
operator|.
name|retries
operator|=
name|retries
expr_stmt|;
block|}
DECL|method|getTimeout ()
specifier|public
name|int
name|getTimeout
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeout
return|;
block|}
DECL|method|setTimeout (int timeout)
specifier|public
name|void
name|setTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
DECL|method|getSnmpVersion ()
specifier|public
name|int
name|getSnmpVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|snmpVersion
return|;
block|}
DECL|method|setSnmpVersion (int snmpVersion)
specifier|public
name|void
name|setSnmpVersion
parameter_list|(
name|int
name|snmpVersion
parameter_list|)
block|{
name|this
operator|.
name|snmpVersion
operator|=
name|snmpVersion
expr_stmt|;
block|}
DECL|method|getSnmpCommunity ()
specifier|public
name|String
name|getSnmpCommunity
parameter_list|()
block|{
return|return
name|this
operator|.
name|snmpCommunity
return|;
block|}
DECL|method|setSnmpCommunity (String snmpCommunity)
specifier|public
name|void
name|setSnmpCommunity
parameter_list|(
name|String
name|snmpCommunity
parameter_list|)
block|{
name|this
operator|.
name|snmpCommunity
operator|=
name|snmpCommunity
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|this
operator|.
name|protocol
return|;
block|}
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// only show address to avoid user and password details to be shown
return|return
literal|"SnmpEndpoint["
operator|+
name|address
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

