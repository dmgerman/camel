begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.snmp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|snmp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|PDU
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|mp
operator|.
name|SnmpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|smi
operator|.
name|OID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|smi
operator|.
name|OctetString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|smi
operator|.
name|TimeTicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|smi
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|snmp4j
operator|.
name|smi
operator|.
name|VariableBinding
import|;
end_import

begin_comment
comment|/**  * This test covers both producing and consuming snmp traps  */
end_comment

begin_class
DECL|class|TrapTest
specifier|public
class|class
name|TrapTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TrapTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testStartRoute ()
specifier|public
name|void
name|testStartRoute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing here , just make sure the camel route can started.
block|}
annotation|@
name|Test
DECL|method|testSendReceiveTraps ()
specifier|public
name|void
name|testSendReceiveTraps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a trap PDU
name|PDU
name|trap
init|=
operator|new
name|PDU
argument_list|()
decl_stmt|;
name|trap
operator|.
name|setType
argument_list|(
name|PDU
operator|.
name|TRAP
argument_list|)
expr_stmt|;
name|OID
name|oid
init|=
operator|new
name|OID
argument_list|(
literal|"1.2.3.4.5"
argument_list|)
decl_stmt|;
name|trap
operator|.
name|add
argument_list|(
operator|new
name|VariableBinding
argument_list|(
name|SnmpConstants
operator|.
name|snmpTrapOID
argument_list|,
name|oid
argument_list|)
argument_list|)
expr_stmt|;
name|trap
operator|.
name|add
argument_list|(
operator|new
name|VariableBinding
argument_list|(
name|SnmpConstants
operator|.
name|sysUpTime
argument_list|,
operator|new
name|TimeTicks
argument_list|(
literal|5000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// put your uptime here
name|trap
operator|.
name|add
argument_list|(
operator|new
name|VariableBinding
argument_list|(
name|SnmpConstants
operator|.
name|sysDescr
argument_list|,
operator|new
name|OctetString
argument_list|(
literal|"System Description"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Add Payload
name|Variable
name|var
init|=
operator|new
name|OctetString
argument_list|(
literal|"some string"
argument_list|)
decl_stmt|;
name|trap
operator|.
name|add
argument_list|(
operator|new
name|VariableBinding
argument_list|(
name|oid
argument_list|,
name|var
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send it
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending pdu "
operator|+
name|trap
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"direct:snmptrap"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|trap
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// If all goes right it should come here
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|SnmpMessage
name|msg
init|=
operator|(
name|SnmpMessage
operator|)
name|exchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|PDU
name|receivedTrap
init|=
name|msg
operator|.
name|getSnmpMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|trap
argument_list|,
name|receivedTrap
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received SNMP TRAP:"
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|?
extends|extends
name|VariableBinding
argument_list|>
name|variableBindings
init|=
name|receivedTrap
operator|.
name|getVariableBindings
argument_list|()
decl_stmt|;
for|for
control|(
name|VariableBinding
name|vb
range|:
name|variableBindings
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|vb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * RouteBuilders for the SNMP TRAP producer and consumer      */
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RoutesBuilder
index|[]
name|createRouteBuilders
parameter_list|()
block|{
return|return
operator|new
name|RoutesBuilder
index|[]
block|{
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:snmptrap"
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
literal|"Sending Trap pdu ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"snmp:127.0.0.1:1662?protocol=udp&type=TRAP&snmpVersion="
operator|+
name|SnmpConstants
operator|.
name|version2c
argument_list|)
expr_stmt|;
block|}
block|}
operator|,
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"snmp:0.0.0.0:1662?protocol=udp&type=TRAP&snmpVersion="
operator|+
name|SnmpConstants
operator|.
name|version2c
argument_list|)
operator|.
name|id
argument_list|(
literal|"SnmpTrapConsumer"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

unit|} }
end_unit

