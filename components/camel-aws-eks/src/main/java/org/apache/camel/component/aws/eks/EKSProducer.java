begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.eks
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|eks
package|;
end_package

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|AmazonEKS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|CreateClusterRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|CreateClusterResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|DeleteClusterRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|DeleteClusterResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|DescribeClusterRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|DescribeClusterResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|ListClustersRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|ListClustersResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|eks
operator|.
name|model
operator|.
name|VpcConfigRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * A Producer which sends messages to the Amazon EKS Service  *<a href="http://aws.amazon.com/eks/">AWS EKS</a>  */
end_comment

begin_class
DECL|class|EKSProducer
specifier|public
class|class
name|EKSProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|eksProducerToString
specifier|private
specifier|transient
name|String
name|eksProducerToString
decl_stmt|;
DECL|method|EKSProducer (Endpoint endpoint)
specifier|public
name|EKSProducer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|determineOperation
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
case|case
name|listClusters
case|:
name|listClusters
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEksClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|describeCluster
case|:
name|describeCluster
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEksClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|createCluster
case|:
name|createCluster
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEksClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|deleteCluster
case|:
name|deleteCluster
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEksClient
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
block|}
DECL|method|determineOperation (Exchange exchange)
specifier|private
name|EKSOperations
name|determineOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|EKSOperations
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|OPERATION
argument_list|,
name|EKSOperations
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|operation
operator|=
name|getConfiguration
argument_list|()
operator|.
name|getOperation
argument_list|()
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|EKSConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|eksProducerToString
operator|==
literal|null
condition|)
block|{
name|eksProducerToString
operator|=
literal|"KMSProducer["
operator|+
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|eksProducerToString
return|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|EKSEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|EKSEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|listClusters (AmazonEKS eksClient, Exchange exchange)
specifier|private
name|void
name|listClusters
parameter_list|(
name|AmazonEKS
name|eksClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|ListClustersRequest
name|request
init|=
operator|new
name|ListClustersRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|MAX_RESULTS
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|maxRes
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|MAX_RESULTS
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withMaxResults
argument_list|(
name|maxRes
argument_list|)
expr_stmt|;
block|}
name|ListClustersResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|eksClient
operator|.
name|listClusters
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"List Clusters command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|createCluster (AmazonEKS eksClient, Exchange exchange)
specifier|private
name|void
name|createCluster
parameter_list|(
name|AmazonEKS
name|eksClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|CreateClusterRequest
name|request
init|=
operator|new
name|CreateClusterRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|CLUSTER_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|CLUSTER_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|ROLE_ARN
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|roleArn
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|ROLE_ARN
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withRoleArn
argument_list|(
name|roleArn
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|VPC_CONFIG
argument_list|)
argument_list|)
condition|)
block|{
name|VpcConfigRequest
name|vpcConfig
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|VPC_CONFIG
argument_list|,
name|VpcConfigRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withResourcesVpcConfig
argument_list|(
name|vpcConfig
argument_list|)
expr_stmt|;
block|}
name|CreateClusterResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|eksClient
operator|.
name|createCluster
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Create Cluster command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|describeCluster (AmazonEKS eksClient, Exchange exchange)
specifier|private
name|void
name|describeCluster
parameter_list|(
name|AmazonEKS
name|eksClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|DescribeClusterRequest
name|request
init|=
operator|new
name|DescribeClusterRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|CLUSTER_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|CLUSTER_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cluster name must be specified"
argument_list|)
throw|;
block|}
name|DescribeClusterResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|eksClient
operator|.
name|describeCluster
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Describe Cluster command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteCluster (AmazonEKS eksClient, Exchange exchange)
specifier|private
name|void
name|deleteCluster
parameter_list|(
name|AmazonEKS
name|eksClient
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|DeleteClusterRequest
name|request
init|=
operator|new
name|DeleteClusterRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|CLUSTER_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|EKSConstants
operator|.
name|CLUSTER_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|withName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cluster name must be specified"
argument_list|)
throw|;
block|}
name|DeleteClusterResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|eksClient
operator|.
name|deleteCluster
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Delete Cluster command returned the error code {}"
argument_list|,
name|ase
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ase
throw|;
block|}
name|Message
name|message
init|=
name|getMessageForResponse
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getMessageForResponse (final Exchange exchange)
specifier|public
specifier|static
name|Message
name|getMessageForResponse
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|out
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
return|return
name|exchange
operator|.
name|getIn
argument_list|()
return|;
block|}
block|}
end_class

end_unit

