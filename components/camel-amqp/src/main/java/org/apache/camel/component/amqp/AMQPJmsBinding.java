begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.amqp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|jms
operator|.
name|message
operator|.
name|JmsMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|jms
operator|.
name|provider
operator|.
name|amqp
operator|.
name|message
operator|.
name|AmqpJmsMessageFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Strategy used to convert between a Camel {@link Exchange} and {@link org.apache.camel.component.jms.JmsMessage}  * to and from a Qpid JMS {@link JmsMessage}  */
end_comment

begin_class
DECL|class|AMQPJmsBinding
specifier|public
class|class
name|AMQPJmsBinding
extends|extends
name|JmsBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQPJmsBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|includeAmqpAnnotations
specifier|private
name|boolean
name|includeAmqpAnnotations
decl_stmt|;
DECL|method|AMQPJmsBinding (JmsEndpoint endpoint)
specifier|public
name|AMQPJmsBinding
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|AMQPConfiguration
condition|)
block|{
name|includeAmqpAnnotations
operator|=
operator|(
operator|(
name|AMQPConfiguration
operator|)
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|isIncludeAmqpAnnotations
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|extractHeadersFromJms (Message jmsMessage, Exchange exchange)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|extractHeadersFromJms
parameter_list|(
name|Message
name|jmsMessage
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|super
operator|.
name|extractHeadersFromJms
argument_list|(
name|jmsMessage
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|includeAmqpAnnotations
condition|)
block|{
return|return
name|headers
return|;
block|}
name|AmqpJmsMessageFacade
name|facade
init|=
name|getMessageFacade
argument_list|(
name|jmsMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|facade
operator|==
literal|null
condition|)
block|{
return|return
name|headers
return|;
block|}
comment|// message annotations
name|facade
operator|.
name|filterTracingAnnotations
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Extract message annotation: {} = {}"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|AMQPConstants
operator|.
name|JMS_AMQP_MA_PREFIX
operator|+
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// delivery annotations
comment|// currently not possible to read due to the Facade API limitations
comment|// https://issues.apache.org/jira/browse/QPIDJMS-153
return|return
name|headers
return|;
block|}
DECL|method|getMessageFacade (Message message)
specifier|private
name|AmqpJmsMessageFacade
name|getMessageFacade
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|instanceof
name|JmsMessage
condition|)
block|{
name|JmsMessage
name|jmsMessage
init|=
operator|(
name|JmsMessage
operator|)
name|message
decl_stmt|;
if|if
condition|(
name|jmsMessage
operator|.
name|getFacade
argument_list|()
operator|instanceof
name|AmqpJmsMessageFacade
condition|)
block|{
return|return
operator|(
name|AmqpJmsMessageFacade
operator|)
name|jmsMessage
operator|.
name|getFacade
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

