begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.amqp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_comment
comment|/**  * A simple POJO for testing  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|PurchaseOrder
specifier|public
class|class
name|PurchaseOrder
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|product
specifier|private
name|String
name|product
decl_stmt|;
DECL|field|amount
specifier|private
name|double
name|amount
decl_stmt|;
DECL|method|PurchaseOrder (String product, double amount)
specifier|public
name|PurchaseOrder
parameter_list|(
name|String
name|product
parameter_list|,
name|double
name|amount
parameter_list|)
block|{
name|this
operator|.
name|product
operator|=
name|product
expr_stmt|;
name|this
operator|.
name|amount
operator|=
name|amount
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|this
operator|.
name|getClass
argument_list|()
operator|!=
name|other
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PurchaseOrder
name|that
init|=
operator|(
name|PurchaseOrder
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|product
operator|.
name|equals
argument_list|(
name|that
operator|.
name|product
argument_list|)
operator|&&
name|this
operator|.
name|amount
operator|==
name|that
operator|.
name|amount
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|product
operator|.
name|hashCode
argument_list|()
operator|*
literal|37
operator|+
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|amount
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PurchaseOrder["
operator|+
name|product
operator|+
literal|" x "
operator|+
name|amount
operator|+
literal|"]"
return|;
block|}
DECL|method|getAmount ()
specifier|public
name|double
name|getAmount
parameter_list|()
block|{
return|return
name|amount
return|;
block|}
DECL|method|getProduct ()
specifier|public
name|String
name|getProduct
parameter_list|()
block|{
return|return
name|product
return|;
block|}
block|}
end_class

end_unit

