begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.amqp.artemis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|amqp
operator|.
name|artemis
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|api
operator|.
name|core
operator|.
name|RoutingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|config
operator|.
name|CoreAddressConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|config
operator|.
name|impl
operator|.
name|ConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|server
operator|.
name|embedded
operator|.
name|EmbeddedActiveMQ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|artemis
operator|.
name|core
operator|.
name|settings
operator|.
name|impl
operator|.
name|AddressSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|amqp
operator|.
name|AMQPComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|PropertyPlaceholderDelegateRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|amqp
operator|.
name|AMQPConnectionDetails
operator|.
name|AMQP_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|amqp
operator|.
name|AMQPConnectionDetails
operator|.
name|AMQP_SET_TOPIC_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|amqp
operator|.
name|AMQPConnectionDetails
operator|.
name|discoverAMQP
import|;
end_import

begin_class
DECL|class|AMQPEmbeddedBrokerTest
specifier|public
class|class
name|AMQPEmbeddedBrokerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|amqpPort
specifier|static
name|int
name|amqpPort
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|server
specifier|static
name|EmbeddedActiveMQ
name|server
init|=
operator|new
name|EmbeddedActiveMQ
argument_list|()
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|resultEndpoint
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
DECL|field|expectedBody
name|String
name|expectedBody
init|=
literal|"Hello there!"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|ConfigurationImpl
argument_list|()
decl_stmt|;
name|AddressSettings
name|addressSettings
init|=
operator|new
name|AddressSettings
argument_list|()
decl_stmt|;
comment|// Disable auto create address to make sure that topic name is correct without prefix
name|addressSettings
operator|.
name|setAutoCreateAddresses
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|addAcceptorConfiguration
argument_list|(
literal|"amqp"
argument_list|,
literal|"tcp://0.0.0.0:"
operator|+
name|amqpPort
operator|+
literal|"?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpMinCredits=300"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setPersistenceEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|addAddressesSetting
argument_list|(
literal|"#"
argument_list|,
name|addressSettings
argument_list|)
expr_stmt|;
name|config
operator|.
name|setSecurityEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Set explicit topic name
name|CoreAddressConfiguration
name|pingTopicConfig
init|=
operator|new
name|CoreAddressConfiguration
argument_list|()
decl_stmt|;
name|pingTopicConfig
operator|.
name|setName
argument_list|(
literal|"topic.ping"
argument_list|)
expr_stmt|;
name|pingTopicConfig
operator|.
name|addRoutingType
argument_list|(
name|RoutingType
operator|.
name|MULTICAST
argument_list|)
expr_stmt|;
name|config
operator|.
name|addAddressConfiguration
argument_list|(
name|pingTopicConfig
argument_list|)
expr_stmt|;
name|server
operator|.
name|setConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|AMQP_PORT
argument_list|,
name|amqpPort
operator|+
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|AMQP_SET_TOPIC_PREFIX
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTopicWithoutPrefix ()
specifier|public
name|void
name|testTopicWithoutPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:send-topic"
argument_list|,
name|expectedBody
argument_list|)
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
return|return
name|registry
return|;
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|JndiRegistry
name|registry
init|=
call|(
name|JndiRegistry
call|)
argument_list|(
operator|(
name|PropertyPlaceholderDelegateRegistry
operator|)
name|camelContext
operator|.
name|getRegistry
argument_list|()
argument_list|)
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"amqpConnection"
argument_list|,
name|discoverAMQP
argument_list|(
name|camelContext
argument_list|)
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"amqp-customized"
argument_list|,
operator|new
name|AMQPComponent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:send-topic"
argument_list|)
operator|.
name|to
argument_list|(
literal|"amqp-customized:topic:topic.ping"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"amqp-customized:topic:topic.ping"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:routing"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

