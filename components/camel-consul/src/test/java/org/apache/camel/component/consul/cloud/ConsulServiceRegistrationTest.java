begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|CatalogClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|HealthClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|catalog
operator|.
name|CatalogService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|health
operator|.
name|ServiceHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|support
operator|.
name|ConsulTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|service
operator|.
name|ServiceComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|SocketUtils
import|;
end_import

begin_class
DECL|class|ConsulServiceRegistrationTest
specifier|public
class|class
name|ConsulServiceRegistrationTest
extends|extends
name|ConsulTestSupport
block|{
DECL|field|SERVICE_NAME
specifier|private
specifier|final
specifier|static
name|String
name|SERVICE_NAME
init|=
literal|"my-service"
decl_stmt|;
DECL|field|SERVICE_HOST
specifier|private
specifier|final
specifier|static
name|String
name|SERVICE_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|SERVICE_PORT
specifier|private
specifier|final
specifier|static
name|int
name|SERVICE_PORT
init|=
name|SocketUtils
operator|.
name|findAvailableTcpPort
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"service"
argument_list|,
operator|new
name|ServiceComponent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ConsulServiceRegistry
name|registry
init|=
operator|new
name|ConsulServiceRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|setId
argument_list|(
name|context
operator|.
name|getUuidGenerator
argument_list|()
operator|.
name|generateUuid
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|setUrl
argument_list|(
name|consulUrl
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|setServiceHost
argument_list|(
name|SERVICE_HOST
argument_list|)
expr_stmt|;
name|registry
operator|.
name|setOverrideServiceHost
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|addService
argument_list|(
name|registry
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|fromF
argument_list|(
literal|"service:%s:jetty:http://0.0.0.0:%d?serviceMeta.type=consul"
argument_list|,
name|SERVICE_NAME
argument_list|,
name|SERVICE_PORT
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"exposed"
argument_list|)
operator|.
name|noAutoStartup
argument_list|()
operator|.
name|to
argument_list|(
literal|"log:service-registry?level=INFO"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testRegistrationFromRoute ()
specifier|public
name|void
name|testRegistrationFromRoute
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CatalogClient
name|catalog
init|=
name|getConsul
argument_list|()
operator|.
name|catalogClient
argument_list|()
decl_stmt|;
specifier|final
name|HealthClient
name|health
init|=
name|getConsul
argument_list|()
operator|.
name|healthClient
argument_list|()
decl_stmt|;
comment|// the service should not be registered as the route is not running
name|assertTrue
argument_list|(
name|catalog
operator|.
name|getService
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|getResponse
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// let start the route
name|context
argument_list|()
operator|.
name|startRoute
argument_list|(
literal|"exposed"
argument_list|)
expr_stmt|;
comment|// check that service has been registered
name|List
argument_list|<
name|CatalogService
argument_list|>
name|services
init|=
name|catalog
operator|.
name|getService
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|services
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SERVICE_PORT
argument_list|,
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServicePort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServiceTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"type=consul"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServiceTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"service.protocol=http"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServiceTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"service.path=/"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServiceTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"service.port="
operator|+
name|SERVICE_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServiceHealth
argument_list|>
name|checks
init|=
name|health
operator|.
name|getHealthyServiceInstances
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|checks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SERVICE_PORT
argument_list|,
name|checks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getService
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|checks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getService
argument_list|()
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// let stop the route
name|context
argument_list|()
operator|.
name|stopRoute
argument_list|(
literal|"exposed"
argument_list|)
expr_stmt|;
comment|// the service should be removed once the route is stopped
name|assertTrue
argument_list|(
name|catalog
operator|.
name|getService
argument_list|(
name|SERVICE_NAME
argument_list|)
operator|.
name|getResponse
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

