begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Unit test for Camel Registry implementation for Consul  */
end_comment

begin_class
DECL|class|ConsulRegistryTest
specifier|public
class|class
name|ConsulRegistryTest
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3482971969351609265L
decl_stmt|;
DECL|field|registry
specifier|private
specifier|static
name|ConsulRegistry
name|registry
decl_stmt|;
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsulRegistryTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|ConsulTestClass
specifier|public
class|class
name|ConsulTestClass
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|4815945688487114891L
decl_stmt|;
DECL|method|hello (String name)
specifier|public
name|String
name|hello
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|"Hello "
operator|+
name|name
return|;
block|}
block|}
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|registry
operator|=
operator|new
name|ConsulRegistry
operator|.
name|Builder
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|storeString ()
specifier|public
name|void
name|storeString
parameter_list|()
block|{
name|registry
operator|.
name|put
argument_list|(
literal|"stringTestKey"
argument_list|,
literal|"stringValue"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|(
name|String
operator|)
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"stringTestKey"
argument_list|)
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"stringTestKey"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringValue"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|overrideExistingKey ()
specifier|public
name|void
name|overrideExistingKey
parameter_list|()
block|{
name|registry
operator|.
name|put
argument_list|(
literal|"uniqueKey"
argument_list|,
literal|"stringValueOne"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"uniqueKey"
argument_list|,
literal|"stringValueTwo"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|(
name|String
operator|)
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"uniqueKey"
argument_list|)
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"uniqueKey"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringValueTwo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkLookupByName ()
specifier|public
name|void
name|checkLookupByName
parameter_list|()
block|{
name|registry
operator|.
name|put
argument_list|(
literal|"namedKey"
argument_list|,
literal|"namedValue"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|(
name|String
operator|)
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"namedKey"
argument_list|)
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"namedKey"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"namedValue"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFailedLookupByName ()
specifier|public
name|void
name|checkFailedLookupByName
parameter_list|()
block|{
name|registry
operator|.
name|put
argument_list|(
literal|"namedKey"
argument_list|,
literal|"namedValue"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"namedKey"
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|(
name|String
operator|)
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"namedKey"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkLookupByNameAndType ()
specifier|public
name|void
name|checkLookupByNameAndType
parameter_list|()
block|{
name|ConsulTestClass
name|consulTestClass
init|=
operator|new
name|ConsulTestClass
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"testClass"
argument_list|,
name|consulTestClass
argument_list|)
expr_stmt|;
name|ConsulTestClass
name|consulTestClassClone
init|=
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"testClass"
argument_list|,
name|consulTestClass
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"testClass"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|consulTestClassClone
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|consulTestClass
operator|.
name|getClass
argument_list|()
argument_list|,
name|consulTestClassClone
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFailedLookupByNameAndType ()
specifier|public
name|void
name|checkFailedLookupByNameAndType
parameter_list|()
block|{
name|ConsulTestClass
name|consulTestClass
init|=
operator|new
name|ConsulTestClass
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"testClass"
argument_list|,
name|consulTestClass
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"testClass"
argument_list|)
expr_stmt|;
name|ConsulTestClass
name|consulTestClassClone
init|=
name|registry
operator|.
name|lookupByNameAndType
argument_list|(
literal|"testClass"
argument_list|,
name|consulTestClass
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|consulTestClassClone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkFindByTypeWithName ()
specifier|public
name|void
name|checkFindByTypeWithName
parameter_list|()
block|{
name|ConsulTestClass
name|consulTestClassOne
init|=
operator|new
name|ConsulTestClass
argument_list|()
decl_stmt|;
name|ConsulTestClass
name|consulTestClassTwo
init|=
operator|new
name|ConsulTestClass
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"testClassOne"
argument_list|,
name|consulTestClassOne
argument_list|)
expr_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"testClassTwo"
argument_list|,
name|consulTestClassTwo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|ConsulTestClass
argument_list|>
name|consulTestClassMap
init|=
name|registry
operator|.
name|findByTypeWithName
argument_list|(
name|consulTestClassOne
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"testClassOne"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"testClassTwo"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConsulTestClass
argument_list|>
name|emptyHashMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConsulTestClass
argument_list|>
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|consulTestClassMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|consulTestClassMap
operator|.
name|getClass
argument_list|()
argument_list|,
name|emptyHashMap
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|consulTestClassMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailedFindByTypeWithName ()
specifier|public
name|void
name|checkFailedFindByTypeWithName
parameter_list|()
block|{      }
annotation|@
name|Test
DECL|method|storeObject ()
specifier|public
name|void
name|storeObject
parameter_list|()
block|{
name|ConsulTestClass
name|testObject
init|=
operator|new
name|ConsulTestClass
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"objectTestClass"
argument_list|,
name|testObject
argument_list|)
expr_stmt|;
name|ConsulTestClass
name|clone
init|=
operator|(
name|ConsulTestClass
operator|)
name|registry
operator|.
name|lookupByName
argument_list|(
literal|"objectTestClass"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|clone
operator|.
name|hello
argument_list|(
literal|"World"
argument_list|)
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"objectTestClass"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findByType ()
specifier|public
name|void
name|findByType
parameter_list|()
block|{
name|ConsulTestClass
name|classOne
init|=
operator|new
name|ConsulTestClass
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"classOne"
argument_list|,
name|classOne
argument_list|)
expr_stmt|;
name|ConsulTestClass
name|classTwo
init|=
operator|new
name|ConsulTestClass
argument_list|()
decl_stmt|;
name|registry
operator|.
name|put
argument_list|(
literal|"classTwo"
argument_list|,
name|classTwo
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|ConsulTestClass
argument_list|>
name|results
init|=
name|registry
operator|.
name|findByType
argument_list|(
name|classOne
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|ConsulTestClass
argument_list|>
name|hashSet
init|=
operator|new
name|HashSet
argument_list|<
name|ConsulTestClass
argument_list|>
argument_list|()
decl_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"classOne"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|remove
argument_list|(
literal|"classTwo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|getClass
argument_list|()
argument_list|,
name|hashSet
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|notFindByType ()
specifier|public
name|void
name|notFindByType
parameter_list|()
block|{      }
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NoSuchBeanException
operator|.
name|class
argument_list|)
DECL|method|deleteNonExisting ()
specifier|public
name|void
name|deleteNonExisting
parameter_list|()
block|{
name|registry
operator|.
name|remove
argument_list|(
literal|"nonExisting"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

