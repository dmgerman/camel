begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|Consul
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|KeyValueClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|testcontainers
operator|.
name|ContainerAwareTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|testcontainers
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|testcontainers
operator|.
name|containers
operator|.
name|GenericContainer
import|;
end_import

begin_class
DECL|class|ConsulTestSupport
specifier|public
class|class
name|ConsulTestSupport
extends|extends
name|ContainerAwareTestSupport
block|{
DECL|field|CONTAINER_IMAGE
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINER_IMAGE
init|=
literal|"consul:1.0.0"
decl_stmt|;
DECL|field|CONTAINER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINER_NAME
init|=
literal|"consul"
decl_stmt|;
DECL|field|KV_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|KV_PREFIX
init|=
literal|"/camel"
decl_stmt|;
annotation|@
name|Rule
DECL|field|testName
specifier|public
specifier|final
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|ConsulComponent
name|component
init|=
operator|new
name|ConsulComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setUrl
argument_list|(
name|consulUrl
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"consul"
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
DECL|method|getConsul ()
specifier|protected
name|Consul
name|getConsul
parameter_list|()
block|{
return|return
name|Consul
operator|.
name|builder
argument_list|()
operator|.
name|withUrl
argument_list|(
name|consulUrl
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getKeyValueClient ()
specifier|protected
name|KeyValueClient
name|getKeyValueClient
parameter_list|()
block|{
return|return
name|getConsul
argument_list|()
operator|.
name|keyValueClient
argument_list|()
return|;
block|}
DECL|method|generateRandomString ()
specifier|protected
name|String
name|generateRandomString
parameter_list|()
block|{
return|return
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|generateRandomArrayOfStrings (int size)
specifier|protected
name|String
index|[]
name|generateRandomArrayOfStrings
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
name|Arrays
operator|.
name|setAll
argument_list|(
name|array
argument_list|,
name|i
lambda|->
name|generateRandomString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
DECL|method|generateRandomListOfStrings (int size)
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|generateRandomListOfStrings
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|generateRandomArrayOfStrings
argument_list|(
name|size
argument_list|)
argument_list|)
return|;
block|}
DECL|method|generateKey ()
specifier|protected
name|String
name|generateKey
parameter_list|()
block|{
return|return
name|KV_PREFIX
operator|+
literal|"/"
operator|+
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"/"
operator|+
name|generateRandomString
argument_list|()
return|;
block|}
DECL|method|consulUrl ()
specifier|protected
name|String
name|consulUrl
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"http://%s:%d"
argument_list|,
name|getContainerHost
argument_list|(
name|CONTAINER_NAME
argument_list|)
argument_list|,
name|getContainerPort
argument_list|(
name|CONTAINER_NAME
argument_list|,
name|Consul
operator|.
name|DEFAULT_HTTP_PORT
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createContainer ()
specifier|protected
name|GenericContainer
argument_list|<
name|?
argument_list|>
name|createContainer
parameter_list|()
block|{
return|return
name|consulContainer
argument_list|()
return|;
block|}
DECL|method|consulContainer ()
specifier|public
specifier|static
name|GenericContainer
name|consulContainer
parameter_list|()
block|{
return|return
operator|new
name|GenericContainer
argument_list|(
name|CONTAINER_IMAGE
argument_list|)
operator|.
name|withNetworkAliases
argument_list|(
name|CONTAINER_NAME
argument_list|)
operator|.
name|withExposedPorts
argument_list|(
name|Consul
operator|.
name|DEFAULT_HTTP_PORT
argument_list|)
operator|.
name|waitingFor
argument_list|(
name|Wait
operator|.
name|forLogMessageContaining
argument_list|(
literal|"Synced node info"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|withCommand
argument_list|(
literal|"agent"
argument_list|,
literal|"-dev"
argument_list|,
literal|"-server"
argument_list|,
literal|"-bootstrap"
argument_list|,
literal|"-client"
argument_list|,
literal|"0.0.0.0"
argument_list|,
literal|"-log-level"
argument_list|,
literal|"trace"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

