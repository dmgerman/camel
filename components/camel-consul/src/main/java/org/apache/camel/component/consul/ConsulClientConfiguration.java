begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|Consul
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|option
operator|.
name|ConsistencyMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|ConsulClientConfiguration
specifier|public
class|class
name|ConsulClientConfiguration
implements|implements
name|Cloneable
block|{
annotation|@
name|UriParam
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|datacenter
specifier|private
name|String
name|datacenter
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|nearNode
specifier|private
name|String
name|nearNode
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|nodeMeta
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nodeMeta
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"DEFAULT"
argument_list|,
name|enums
operator|=
literal|"DEFAULT,STALE,CONSISTENT"
argument_list|)
DECL|field|consistencyMode
specifier|private
name|ConsistencyMode
name|consistencyMode
init|=
name|ConsistencyMode
operator|.
name|DEFAULT
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|tags
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|tags
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|aclToken
specifier|private
name|String
name|aclToken
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|UriParam
DECL|field|connectTimeoutMillis
specifier|private
name|Long
name|connectTimeoutMillis
decl_stmt|;
annotation|@
name|UriParam
DECL|field|readTimeoutMillis
specifier|private
name|Long
name|readTimeoutMillis
decl_stmt|;
annotation|@
name|UriParam
DECL|field|writeTimeoutMillis
specifier|private
name|Long
name|writeTimeoutMillis
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|pingInstance
specifier|private
name|boolean
name|pingInstance
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,watch"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|blockSeconds
specifier|private
name|Integer
name|blockSeconds
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,watch"
argument_list|,
name|defaultValue
operator|=
literal|"0"
argument_list|)
DECL|field|firstIndex
specifier|private
name|BigInteger
name|firstIndex
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,watch"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|recursive
specifier|private
name|boolean
name|recursive
decl_stmt|;
DECL|method|ConsulClientConfiguration ()
specifier|public
name|ConsulClientConfiguration
parameter_list|()
block|{     }
DECL|method|getUrl ()
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
comment|/**      * The Consul agent URL      */
DECL|method|setUrl (String url)
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
comment|/**      * @deprecated replaced by {@link #getDatacenter()} ()}      */
annotation|@
name|Deprecated
DECL|method|getDc ()
specifier|public
name|String
name|getDc
parameter_list|()
block|{
return|return
name|datacenter
return|;
block|}
comment|/**      * The data center      *      * @deprecated replaced by {@link #setDatacenter(String)} ()}      */
annotation|@
name|Deprecated
DECL|method|setDc (String dc)
specifier|public
name|void
name|setDc
parameter_list|(
name|String
name|dc
parameter_list|)
block|{
name|this
operator|.
name|datacenter
operator|=
name|dc
expr_stmt|;
block|}
DECL|method|getDatacenter ()
specifier|public
name|String
name|getDatacenter
parameter_list|()
block|{
return|return
name|datacenter
return|;
block|}
comment|/**      * The data center      */
DECL|method|setDatacenter (String datacenter)
specifier|public
name|void
name|setDatacenter
parameter_list|(
name|String
name|datacenter
parameter_list|)
block|{
name|this
operator|.
name|datacenter
operator|=
name|datacenter
expr_stmt|;
block|}
DECL|method|getNearNode ()
specifier|public
name|String
name|getNearNode
parameter_list|()
block|{
return|return
name|nearNode
return|;
block|}
comment|/**      * The near node to use for queries.      */
DECL|method|setNearNode (String nearNode)
specifier|public
name|void
name|setNearNode
parameter_list|(
name|String
name|nearNode
parameter_list|)
block|{
name|this
operator|.
name|nearNode
operator|=
name|nearNode
expr_stmt|;
block|}
DECL|method|getNodeMeta ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNodeMeta
parameter_list|()
block|{
return|return
name|nodeMeta
return|;
block|}
comment|/**      * The note meta-data to use for queries.      */
DECL|method|setNodeMeta (List<String> nodeMeta)
specifier|public
name|void
name|setNodeMeta
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodeMeta
parameter_list|)
block|{
name|this
operator|.
name|nodeMeta
operator|=
name|nodeMeta
expr_stmt|;
block|}
DECL|method|getConsistencyMode ()
specifier|public
name|ConsistencyMode
name|getConsistencyMode
parameter_list|()
block|{
return|return
name|consistencyMode
return|;
block|}
comment|/**      * The consistencyMode used for queries, default ConsistencyMode.DEFAULT      */
DECL|method|setConsistencyMode (ConsistencyMode consistencyMode)
specifier|public
name|void
name|setConsistencyMode
parameter_list|(
name|ConsistencyMode
name|consistencyMode
parameter_list|)
block|{
name|this
operator|.
name|consistencyMode
operator|=
name|consistencyMode
expr_stmt|;
block|}
DECL|method|getTags ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getTags
parameter_list|()
block|{
return|return
name|tags
return|;
block|}
comment|/**      * Set tags. You can separate multiple tags by comma.      */
DECL|method|setTags (Set<String> tags)
specifier|public
name|void
name|setTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|this
operator|.
name|tags
operator|=
name|tags
expr_stmt|;
block|}
comment|/**      * Set tags. You can separate multiple tags by comma.      */
DECL|method|setTags (String tagsAsString)
specifier|public
name|void
name|setTags
parameter_list|(
name|String
name|tagsAsString
parameter_list|)
block|{
name|this
operator|.
name|tags
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|tags
argument_list|,
name|tagsAsString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * SSL configuration using an org.apache.camel.util.jsse.SSLContextParameters      * instance.      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getAclToken ()
specifier|public
name|String
name|getAclToken
parameter_list|()
block|{
return|return
name|aclToken
return|;
block|}
comment|/**      * Sets the ACL token to be used with Consul      */
DECL|method|setAclToken (String aclToken)
specifier|public
name|void
name|setAclToken
parameter_list|(
name|String
name|aclToken
parameter_list|)
block|{
name|this
operator|.
name|aclToken
operator|=
name|aclToken
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**      * Sets the username to be used for basic authentication      */
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * Sets the password to be used for basic authentication      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|requiresBasicAuthentication ()
specifier|public
name|boolean
name|requiresBasicAuthentication
parameter_list|()
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|userName
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|password
argument_list|)
return|;
block|}
DECL|method|getConnectTimeoutMillis ()
specifier|public
name|Long
name|getConnectTimeoutMillis
parameter_list|()
block|{
return|return
name|connectTimeoutMillis
return|;
block|}
comment|/**      * Connect timeout for OkHttpClient      */
DECL|method|setConnectTimeoutMillis (Long connectTimeoutMillis)
specifier|public
name|void
name|setConnectTimeoutMillis
parameter_list|(
name|Long
name|connectTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|connectTimeoutMillis
operator|=
name|connectTimeoutMillis
expr_stmt|;
block|}
DECL|method|getReadTimeoutMillis ()
specifier|public
name|Long
name|getReadTimeoutMillis
parameter_list|()
block|{
return|return
name|readTimeoutMillis
return|;
block|}
comment|/**      * Read timeout for OkHttpClient      */
DECL|method|setReadTimeoutMillis (Long readTimeoutMillis)
specifier|public
name|void
name|setReadTimeoutMillis
parameter_list|(
name|Long
name|readTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|readTimeoutMillis
operator|=
name|readTimeoutMillis
expr_stmt|;
block|}
DECL|method|getWriteTimeoutMillis ()
specifier|public
name|Long
name|getWriteTimeoutMillis
parameter_list|()
block|{
return|return
name|writeTimeoutMillis
return|;
block|}
comment|/**      * Write timeout for OkHttpClient      */
DECL|method|setWriteTimeoutMillis (Long writeTimeoutMillis)
specifier|public
name|void
name|setWriteTimeoutMillis
parameter_list|(
name|Long
name|writeTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|writeTimeoutMillis
operator|=
name|writeTimeoutMillis
expr_stmt|;
block|}
DECL|method|isPingInstance ()
specifier|public
name|boolean
name|isPingInstance
parameter_list|()
block|{
return|return
name|pingInstance
return|;
block|}
comment|/**      * Configure if the AgentClient should attempt a ping before returning the Consul instance      */
DECL|method|setPingInstance (boolean pingInstance)
specifier|public
name|void
name|setPingInstance
parameter_list|(
name|boolean
name|pingInstance
parameter_list|)
block|{
name|this
operator|.
name|pingInstance
operator|=
name|pingInstance
expr_stmt|;
block|}
DECL|method|getBlockSeconds ()
specifier|public
name|Integer
name|getBlockSeconds
parameter_list|()
block|{
return|return
name|blockSeconds
return|;
block|}
comment|/**      * The second to wait for a watch event, default 10 seconds      */
DECL|method|setBlockSeconds (Integer blockSeconds)
specifier|public
name|void
name|setBlockSeconds
parameter_list|(
name|Integer
name|blockSeconds
parameter_list|)
block|{
name|this
operator|.
name|blockSeconds
operator|=
name|blockSeconds
expr_stmt|;
block|}
DECL|method|getFirstIndex ()
specifier|public
name|BigInteger
name|getFirstIndex
parameter_list|()
block|{
return|return
name|firstIndex
return|;
block|}
comment|/**      * The first index for watch for, default 0      */
DECL|method|setFirstIndex (BigInteger firstIndex)
specifier|public
name|void
name|setFirstIndex
parameter_list|(
name|BigInteger
name|firstIndex
parameter_list|)
block|{
name|this
operator|.
name|firstIndex
operator|=
name|firstIndex
expr_stmt|;
block|}
DECL|method|isRecursive ()
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|recursive
return|;
block|}
comment|/**      * Recursively watch, default false      */
DECL|method|setRecursive (boolean recursive)
specifier|public
name|void
name|setRecursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
comment|// ****************************************
comment|// Create a client
comment|// ****************************************
DECL|method|createConsulClient ()
specifier|public
name|Consul
name|createConsulClient
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createConsulClient
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|createConsulClient (CamelContext camelContext)
specifier|public
name|Consul
name|createConsulClient
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Consul
operator|.
name|Builder
name|builder
init|=
name|Consul
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|withPing
argument_list|(
name|pingInstance
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|camelContext
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|sslContextParameters
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withSslContext
argument_list|(
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|(
name|camelContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|aclToken
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withAclToken
argument_list|(
name|aclToken
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requiresBasicAuthentication
argument_list|()
condition|)
block|{
name|builder
operator|.
name|withBasicAuth
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|connectTimeoutMillis
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withConnectTimeoutMillis
argument_list|(
name|connectTimeoutMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|readTimeoutMillis
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withReadTimeoutMillis
argument_list|(
name|readTimeoutMillis
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|writeTimeoutMillis
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withWriteTimeoutMillis
argument_list|(
name|writeTimeoutMillis
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// ****************************************
comment|// Copy
comment|// ****************************************
DECL|method|copy ()
specifier|public
name|ConsulClientConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|ConsulClientConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

