begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|Consul
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|NotRegisteredException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|agent
operator|.
name|ImmutableRegCheck
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|agent
operator|.
name|ImmutableRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|agent
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|health
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|AbstractServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ConsulServiceRegistry
specifier|public
class|class
name|ConsulServiceRegistry
extends|extends
name|AbstractServiceRegistry
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsulServiceRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serviceList
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|serviceList
decl_stmt|;
DECL|field|configuration
specifier|private
name|ConsulServiceRegistryConfiguration
name|configuration
decl_stmt|;
DECL|field|client
specifier|private
name|Consul
name|client
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
DECL|method|ConsulServiceRegistry ()
specifier|public
name|ConsulServiceRegistry
parameter_list|()
block|{
name|this
operator|.
name|serviceList
operator|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
operator|new
name|ConsulServiceRegistryConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|ConsulServiceRegistry (ConsulServiceRegistryConfiguration configuration)
specifier|public
name|ConsulServiceRegistry
parameter_list|(
name|ConsulServiceRegistryConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|serviceList
operator|=
name|ConcurrentHashMap
operator|.
name|newKeySet
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
comment|// ****************
comment|// Properties
comment|// ****************
DECL|method|getConfiguration ()
specifier|public
name|ConsulServiceRegistryConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (ConsulServiceRegistryConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|ConsulServiceRegistryConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
DECL|method|getUrl ()
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getUrl
argument_list|()
return|;
block|}
DECL|method|setUrl (String url)
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|configuration
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
DECL|method|getDatacenter ()
specifier|public
name|String
name|getDatacenter
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getDatacenter
argument_list|()
return|;
block|}
DECL|method|setDatacenter (String datacenter)
specifier|public
name|void
name|setDatacenter
parameter_list|(
name|String
name|datacenter
parameter_list|)
block|{
name|configuration
operator|.
name|setDatacenter
argument_list|(
name|datacenter
argument_list|)
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getSslContextParameters
argument_list|()
return|;
block|}
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|configuration
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
block|}
DECL|method|getAclToken ()
specifier|public
name|String
name|getAclToken
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getAclToken
argument_list|()
return|;
block|}
DECL|method|setAclToken (String aclToken)
specifier|public
name|void
name|setAclToken
parameter_list|(
name|String
name|aclToken
parameter_list|)
block|{
name|configuration
operator|.
name|setAclToken
argument_list|(
name|aclToken
argument_list|)
expr_stmt|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getUserName
argument_list|()
return|;
block|}
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|configuration
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getPassword
argument_list|()
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|configuration
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnectTimeoutMillis ()
specifier|public
name|Long
name|getConnectTimeoutMillis
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getConnectTimeoutMillis
argument_list|()
return|;
block|}
DECL|method|setConnectTimeoutMillis (Long connectTimeoutMillis)
specifier|public
name|void
name|setConnectTimeoutMillis
parameter_list|(
name|Long
name|connectTimeoutMillis
parameter_list|)
block|{
name|configuration
operator|.
name|setConnectTimeoutMillis
argument_list|(
name|connectTimeoutMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|getReadTimeoutMillis ()
specifier|public
name|Long
name|getReadTimeoutMillis
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getReadTimeoutMillis
argument_list|()
return|;
block|}
DECL|method|setReadTimeoutMillis (Long readTimeoutMillis)
specifier|public
name|void
name|setReadTimeoutMillis
parameter_list|(
name|Long
name|readTimeoutMillis
parameter_list|)
block|{
name|configuration
operator|.
name|setReadTimeoutMillis
argument_list|(
name|readTimeoutMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|getWriteTimeoutMillis ()
specifier|public
name|Long
name|getWriteTimeoutMillis
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getWriteTimeoutMillis
argument_list|()
return|;
block|}
DECL|method|setWriteTimeoutMillis (Long writeTimeoutMillis)
specifier|public
name|void
name|setWriteTimeoutMillis
parameter_list|(
name|Long
name|writeTimeoutMillis
parameter_list|)
block|{
name|configuration
operator|.
name|setWriteTimeoutMillis
argument_list|(
name|writeTimeoutMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|getBlockSeconds ()
specifier|public
name|Integer
name|getBlockSeconds
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getBlockSeconds
argument_list|()
return|;
block|}
DECL|method|setBlockSeconds (Integer blockSeconds)
specifier|public
name|void
name|setBlockSeconds
parameter_list|(
name|Integer
name|blockSeconds
parameter_list|)
block|{
name|configuration
operator|.
name|setBlockSeconds
argument_list|(
name|blockSeconds
argument_list|)
expr_stmt|;
block|}
DECL|method|isOverrideServiceHost ()
specifier|public
name|boolean
name|isOverrideServiceHost
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isOverrideServiceHost
argument_list|()
return|;
block|}
DECL|method|setOverrideServiceHost (boolean overrideServiceHost)
specifier|public
name|void
name|setOverrideServiceHost
parameter_list|(
name|boolean
name|overrideServiceHost
parameter_list|)
block|{
name|configuration
operator|.
name|setOverrideServiceHost
argument_list|(
name|overrideServiceHost
argument_list|)
expr_stmt|;
block|}
DECL|method|getServiceHost ()
specifier|public
name|String
name|getServiceHost
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getServiceHost
argument_list|()
return|;
block|}
DECL|method|setServiceHost (String serviceHost)
specifier|public
name|void
name|setServiceHost
parameter_list|(
name|String
name|serviceHost
parameter_list|)
block|{
name|configuration
operator|.
name|setServiceHost
argument_list|(
name|serviceHost
argument_list|)
expr_stmt|;
block|}
DECL|method|getCheckTtl ()
specifier|public
name|int
name|getCheckTtl
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getCheckTtl
argument_list|()
return|;
block|}
DECL|method|setCheckTtl (int checkTtl)
specifier|public
name|void
name|setCheckTtl
parameter_list|(
name|int
name|checkTtl
parameter_list|)
block|{
name|configuration
operator|.
name|setCheckTtl
argument_list|(
name|checkTtl
argument_list|)
expr_stmt|;
block|}
DECL|method|getCheckInterval ()
specifier|public
name|int
name|getCheckInterval
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getCheckInterval
argument_list|()
return|;
block|}
DECL|method|setCheckInterval (int checkInterval)
specifier|public
name|void
name|setCheckInterval
parameter_list|(
name|int
name|checkInterval
parameter_list|)
block|{
name|configuration
operator|.
name|setCheckInterval
argument_list|(
name|checkInterval
argument_list|)
expr_stmt|;
block|}
DECL|method|getDeregisterAfter ()
specifier|public
name|int
name|getDeregisterAfter
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getDeregisterAfter
argument_list|()
return|;
block|}
DECL|method|setDeregisterAfter (int deregisterAfter)
specifier|public
name|void
name|setDeregisterAfter
parameter_list|(
name|int
name|deregisterAfter
parameter_list|)
block|{
name|configuration
operator|.
name|setDeregisterAfter
argument_list|(
name|deregisterAfter
argument_list|)
expr_stmt|;
block|}
DECL|method|isDeregisterServicesOnStop ()
specifier|public
name|boolean
name|isDeregisterServicesOnStop
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isDeregisterServicesOnStop
argument_list|()
return|;
block|}
DECL|method|setDeregisterServicesOnStop (boolean deregisterServicesOnStop)
specifier|public
name|void
name|setDeregisterServicesOnStop
parameter_list|(
name|boolean
name|deregisterServicesOnStop
parameter_list|)
block|{
name|configuration
operator|.
name|setDeregisterServicesOnStop
argument_list|(
name|deregisterServicesOnStop
argument_list|)
expr_stmt|;
block|}
comment|// ****************
comment|// Lifecycle
comment|// ****************
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|=
name|this
operator|.
name|configuration
operator|.
name|createConsulClient
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"ConsulServiceRegistry"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|isDeregisterServicesOnStop
argument_list|()
condition|)
block|{
for|for
control|(
name|Service
name|service
range|:
name|client
operator|.
name|agentClient
argument_list|()
operator|.
name|getServices
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|serviceList
operator|.
name|contains
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|client
operator|.
name|agentClient
argument_list|()
operator|.
name|deregister
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|serviceList
operator|.
name|remove
argument_list|(
name|service
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error de-registering service: "
operator|+
name|service
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|client
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ****************
comment|// Registry
comment|// ****************
annotation|@
name|Override
DECL|method|register (ServiceDefinition definition)
specifier|public
name|void
name|register
parameter_list|(
name|ServiceDefinition
name|definition
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Service ID must be defined (definition="
operator|+
name|definition
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|definition
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Service Name must be defined (definition="
operator|+
name|definition
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|Registration
name|registration
init|=
name|ImmutableRegistration
operator|.
name|builder
argument_list|()
operator|.
name|address
argument_list|(
name|computeServiceHost
argument_list|(
name|definition
argument_list|)
argument_list|)
operator|.
name|port
argument_list|(
name|definition
operator|.
name|getPort
argument_list|()
argument_list|)
operator|.
name|name
argument_list|(
name|definition
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|id
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|check
argument_list|(
name|computeCheck
argument_list|(
name|definition
argument_list|)
argument_list|)
operator|.
name|tags
argument_list|(
name|definition
operator|.
name|getMetadata
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
argument_list|)
operator|.
name|map
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addTags
argument_list|(
literal|"_consul.service.registry.id="
operator|+
name|getId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// perform service registration against consul
name|client
operator|.
name|agentClient
argument_list|()
operator|.
name|register
argument_list|(
name|registration
argument_list|)
expr_stmt|;
try|try
block|{
comment|// mark the service as healthy
name|client
operator|.
name|agentClient
argument_list|()
operator|.
name|pass
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the service has TTL enabled
name|registration
operator|.
name|getCheck
argument_list|()
operator|.
name|flatMap
argument_list|(
name|Registration
operator|.
name|RegCheck
operator|::
name|getTtl
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|ignored
lambda|->
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Configure service pass for: {}"
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
if|if
condition|(
name|serviceList
operator|.
name|contains
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|client
operator|.
name|agentClient
argument_list|()
operator|.
name|pass
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NotRegisteredException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Service with id: {} is not more registered"
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|serviceList
operator|.
name|remove
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
operator|/
literal|2
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotRegisteredException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"There was an issue registering service: {}"
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add the serviceId to the list of known server
name|serviceList
operator|.
name|add
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|deregister (ServiceDefinition definition)
specifier|public
name|void
name|deregister
parameter_list|(
name|ServiceDefinition
name|definition
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ServiceID must be defined (definition="
operator|+
name|definition
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|client
operator|.
name|agentClient
argument_list|()
operator|.
name|deregister
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//remove the serviceId to the list of known server
name|serviceList
operator|.
name|remove
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|computeServiceHost (ServiceDefinition definition)
specifier|private
name|String
name|computeServiceHost
parameter_list|(
name|ServiceDefinition
name|definition
parameter_list|)
block|{
name|String
name|host
init|=
name|definition
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isOverrideServiceHost
argument_list|()
operator|&&
name|configuration
operator|.
name|getServiceHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|host
operator|=
name|configuration
operator|.
name|getServiceHost
argument_list|()
expr_stmt|;
block|}
return|return
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|host
argument_list|,
literal|"service host"
argument_list|)
return|;
block|}
comment|// TODO: this need to be improved
DECL|method|computeCheck (ServiceDefinition definition)
specifier|private
name|Registration
operator|.
name|RegCheck
name|computeCheck
parameter_list|(
name|ServiceDefinition
name|definition
parameter_list|)
block|{
if|if
condition|(
name|definition
operator|.
name|getHealth
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|ImmutableRegCheck
operator|.
name|builder
argument_list|()
operator|.
name|ttl
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
argument_list|)
argument_list|)
operator|.
name|deregisterCriticalServiceAfter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getDeregisterAfter
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|definition
operator|.
name|getHealth
argument_list|()
operator|.
name|getEndpoint
argument_list|()
operator|.
name|flatMap
argument_list|(
name|uri
lambda|->
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
literal|"http"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ImmutableRegCheck
operator|.
name|builder
argument_list|()
operator|.
name|http
argument_list|(
name|uri
operator|.
name|toASCIIString
argument_list|()
argument_list|)
operator|.
name|interval
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
argument_list|)
argument_list|)
operator|.
name|deregisterCriticalServiceAfter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getDeregisterAfter
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ImmutableRegCheck
operator|.
name|builder
argument_list|()
operator|.
name|http
argument_list|(
name|uri
operator|.
name|toASCIIString
argument_list|()
argument_list|)
operator|.
name|interval
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
argument_list|)
argument_list|)
operator|.
name|deregisterCriticalServiceAfter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getDeregisterAfter
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
literal|"tcp"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ImmutableRegCheck
operator|.
name|builder
argument_list|()
operator|.
name|tcp
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|interval
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
argument_list|)
argument_list|)
operator|.
name|deregisterCriticalServiceAfter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getDeregisterAfter
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
literal|"grpc"
argument_list|,
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|ImmutableRegCheck
operator|.
name|builder
argument_list|()
operator|.
name|grpc
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|interval
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
argument_list|)
argument_list|)
operator|.
name|deregisterCriticalServiceAfter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getDeregisterAfter
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|ImmutableRegCheck
operator|.
name|builder
argument_list|()
operator|.
name|ttl
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getCheckInterval
argument_list|()
argument_list|)
argument_list|)
operator|.
name|deregisterCriticalServiceAfter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%ss"
argument_list|,
name|configuration
operator|.
name|getDeregisterAfter
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

