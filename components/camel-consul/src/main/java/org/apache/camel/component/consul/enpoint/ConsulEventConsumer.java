begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul.enpoint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|enpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|EventClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|async
operator|.
name|EventResponseCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|EventResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|option
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|AbstractConsulConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConstants
import|;
end_import

begin_class
DECL|class|ConsulEventConsumer
specifier|public
class|class
name|ConsulEventConsumer
extends|extends
name|AbstractConsulConsumer
argument_list|<
name|EventClient
argument_list|>
block|{
DECL|method|ConsulEventConsumer (ConsulEventEndpoint endpoint, ConsulConfiguration configuration, Processor processor)
specifier|protected
name|ConsulEventConsumer
parameter_list|(
name|ConsulEventEndpoint
name|endpoint
parameter_list|,
name|ConsulConfiguration
name|configuration
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|configuration
argument_list|,
name|processor
argument_list|,
name|c
lambda|->
name|c
operator|.
name|eventClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWatcher (EventClient client)
specifier|protected
name|Runnable
name|createWatcher
parameter_list|(
name|EventClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|EventWatcher
argument_list|(
name|client
argument_list|)
return|;
block|}
comment|// *************************************************************************
comment|// Watch
comment|// *************************************************************************
DECL|class|EventWatcher
specifier|private
class|class
name|EventWatcher
extends|extends
name|AbstractWatcher
implements|implements
name|EventResponseCallback
block|{
DECL|method|EventWatcher (EventClient client)
name|EventWatcher
parameter_list|(
name|EventClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|watch (EventClient client)
specifier|public
name|void
name|watch
parameter_list|(
name|EventClient
name|client
parameter_list|)
block|{
name|client
operator|.
name|listEvents
argument_list|(
name|key
argument_list|,
name|QueryOptions
operator|.
name|blockSeconds
argument_list|(
name|configuration
operator|.
name|getBlockSeconds
argument_list|()
argument_list|,
name|index
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onComplete (EventResponse eventResponse)
specifier|public
name|void
name|onComplete
parameter_list|(
name|EventResponse
name|eventResponse
parameter_list|)
block|{
if|if
condition|(
name|isRunAllowed
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|filterEvents
argument_list|(
name|eventResponse
operator|.
name|getEvents
argument_list|()
argument_list|,
name|index
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|events
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|onEvent
argument_list|)
expr_stmt|;
name|setIndex
argument_list|(
name|eventResponse
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|watch
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure (Throwable throwable)
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|onError
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|onEvent (Event event)
specifier|private
name|void
name|onEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_RESULT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_EVENT_ID
argument_list|,
name|event
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_EVENT_NAME
argument_list|,
name|event
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_EVENT_LTIME
argument_list|,
name|event
operator|.
name|getLTime
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_NODE_FILTER
argument_list|,
name|event
operator|.
name|getNodeFilter
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_SERVICE_FILTER
argument_list|,
name|event
operator|.
name|getServiceFilter
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_TAG_FILTER
argument_list|,
name|event
operator|.
name|getTagFilter
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_VERSION
argument_list|,
name|event
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|event
operator|.
name|getPayload
argument_list|()
operator|.
name|orNull
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * from spring-cloud-consul (https://github.com/spring-cloud/spring-cloud-consul):          *     spring-cloud-consul-bus/src/main/java/org/springframework/cloud/consul/bus/EventService.java          */
DECL|method|filterEvents (List<Event> toFilter, BigInteger lastIndex)
specifier|private
name|List
argument_list|<
name|Event
argument_list|>
name|filterEvents
parameter_list|(
name|List
argument_list|<
name|Event
argument_list|>
name|toFilter
parameter_list|,
name|BigInteger
name|lastIndex
parameter_list|)
block|{
name|List
argument_list|<
name|Event
argument_list|>
name|events
init|=
name|toFilter
decl_stmt|;
if|if
condition|(
name|lastIndex
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|events
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Event
name|event
init|=
name|events
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BigInteger
name|eventIndex
init|=
name|getEventIndexFromId
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventIndex
operator|.
name|equals
argument_list|(
name|lastIndex
argument_list|)
condition|)
block|{
name|events
operator|=
name|events
operator|.
name|subList
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|events
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|events
return|;
block|}
DECL|method|getEventIndexFromId (Event event)
specifier|private
name|BigInteger
name|getEventIndexFromId
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|String
name|eventId
init|=
name|event
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|lower
init|=
name|eventId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
operator|+
name|eventId
operator|.
name|substring
argument_list|(
literal|9
argument_list|,
literal|13
argument_list|)
operator|+
name|eventId
operator|.
name|substring
argument_list|(
literal|14
argument_list|,
literal|18
argument_list|)
decl_stmt|;
name|String
name|upper
init|=
name|eventId
operator|.
name|substring
argument_list|(
literal|19
argument_list|,
literal|23
argument_list|)
operator|+
name|eventId
operator|.
name|substring
argument_list|(
literal|24
argument_list|,
literal|36
argument_list|)
decl_stmt|;
name|BigInteger
name|lowVal
init|=
operator|new
name|BigInteger
argument_list|(
name|lower
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|BigInteger
name|highVal
init|=
operator|new
name|BigInteger
argument_list|(
name|upper
argument_list|,
literal|16
argument_list|)
decl_stmt|;
return|return
name|lowVal
operator|.
name|xor
argument_list|(
name|highVal
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

