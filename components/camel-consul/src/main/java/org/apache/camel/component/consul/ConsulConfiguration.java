begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|ConsulConfiguration
specifier|public
class|class
name|ConsulConfiguration
block|{
annotation|@
name|UriParam
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|aclToken
specifier|private
name|String
name|aclToken
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|UriParam
DECL|field|connectTimeoutMillis
specifier|private
name|Long
name|connectTimeoutMillis
decl_stmt|;
annotation|@
name|UriParam
DECL|field|readTimeoutMillis
specifier|private
name|Long
name|readTimeoutMillis
decl_stmt|;
annotation|@
name|UriParam
DECL|field|writeTimeoutMillis
specifier|private
name|Long
name|writeTimeoutMillis
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|pingInstance
specifier|private
name|boolean
name|pingInstance
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|action
specifier|private
name|String
name|action
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,kv"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|valueAsString
specifier|private
name|boolean
name|valueAsString
decl_stmt|;
annotation|@
name|UriParam
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,watch"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|blockSeconds
specifier|private
name|Integer
name|blockSeconds
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,watch"
argument_list|,
name|defaultValue
operator|=
literal|"0"
argument_list|)
DECL|field|firstIndex
specifier|private
name|long
name|firstIndex
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,watch"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|recursive
specifier|private
name|boolean
name|recursive
decl_stmt|;
DECL|method|getUrl ()
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
return|return
name|url
return|;
block|}
comment|/**      * The Consul agent URL      */
DECL|method|setUrl (String url)
specifier|public
name|void
name|setUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * SSL configuration using an org.apache.camel.util.jsse.SSLContextParameters      * instance.      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getAclToken ()
specifier|public
name|String
name|getAclToken
parameter_list|()
block|{
return|return
name|aclToken
return|;
block|}
comment|/**      * Sets the ACL token to be used with Consul      */
DECL|method|setAclToken (String aclToken)
specifier|public
name|void
name|setAclToken
parameter_list|(
name|String
name|aclToken
parameter_list|)
block|{
name|this
operator|.
name|aclToken
operator|=
name|aclToken
expr_stmt|;
block|}
DECL|method|getAction ()
specifier|public
name|String
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
DECL|method|getUserName ()
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
comment|/**      * Sets the username to be used for basic authentication      */
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * Sets the password to be used for basic authentication      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|requiresBasicAuthentication ()
specifier|public
name|boolean
name|requiresBasicAuthentication
parameter_list|()
block|{
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|userName
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|password
argument_list|)
return|;
block|}
DECL|method|getConnectTimeoutMillis ()
specifier|public
name|Long
name|getConnectTimeoutMillis
parameter_list|()
block|{
return|return
name|connectTimeoutMillis
return|;
block|}
comment|/**      * Connect timeout for OkHttpClient      */
DECL|method|setConnectTimeoutMillis (Long connectTimeoutMillis)
specifier|public
name|void
name|setConnectTimeoutMillis
parameter_list|(
name|Long
name|connectTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|connectTimeoutMillis
operator|=
name|connectTimeoutMillis
expr_stmt|;
block|}
DECL|method|getReadTimeoutMillis ()
specifier|public
name|Long
name|getReadTimeoutMillis
parameter_list|()
block|{
return|return
name|readTimeoutMillis
return|;
block|}
comment|/**      * Read timeout for OkHttpClient      */
DECL|method|setReadTimeoutMillis (Long readTimeoutMillis)
specifier|public
name|void
name|setReadTimeoutMillis
parameter_list|(
name|Long
name|readTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|readTimeoutMillis
operator|=
name|readTimeoutMillis
expr_stmt|;
block|}
DECL|method|getWriteTimeoutMillis ()
specifier|public
name|Long
name|getWriteTimeoutMillis
parameter_list|()
block|{
return|return
name|writeTimeoutMillis
return|;
block|}
comment|/**      * Write timeout for OkHttpClient      */
DECL|method|setWriteTimeoutMillis (Long writeTimeoutMillis)
specifier|public
name|void
name|setWriteTimeoutMillis
parameter_list|(
name|Long
name|writeTimeoutMillis
parameter_list|)
block|{
name|this
operator|.
name|writeTimeoutMillis
operator|=
name|writeTimeoutMillis
expr_stmt|;
block|}
DECL|method|isPingInstance ()
specifier|public
name|boolean
name|isPingInstance
parameter_list|()
block|{
return|return
name|pingInstance
return|;
block|}
comment|/**      * Configure if the AgentClient should attempt a ping before returning the Consul instance      */
DECL|method|setPingInstance (boolean pingInstance)
specifier|public
name|void
name|setPingInstance
parameter_list|(
name|boolean
name|pingInstance
parameter_list|)
block|{
name|this
operator|.
name|pingInstance
operator|=
name|pingInstance
expr_stmt|;
block|}
comment|/**      * The default action. Can be overridden by CamelConsulAction      */
DECL|method|setAction (String action)
specifier|public
name|void
name|setAction
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
DECL|method|isValueAsString ()
specifier|public
name|boolean
name|isValueAsString
parameter_list|()
block|{
return|return
name|valueAsString
return|;
block|}
comment|/**      * Default to transform values retrieved from Consul i.e. on KV endpoint to      * string.      */
DECL|method|setValueAsString (boolean valueAsString)
specifier|public
name|void
name|setValueAsString
parameter_list|(
name|boolean
name|valueAsString
parameter_list|)
block|{
name|this
operator|.
name|valueAsString
operator|=
name|valueAsString
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * The default key. Can be overridden by CamelConsulKey      */
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getBlockSeconds ()
specifier|public
name|Integer
name|getBlockSeconds
parameter_list|()
block|{
return|return
name|blockSeconds
return|;
block|}
comment|/**      * The second to wait for a watch event, default 10 seconds      */
DECL|method|setBlockSeconds (Integer blockSeconds)
specifier|public
name|void
name|setBlockSeconds
parameter_list|(
name|Integer
name|blockSeconds
parameter_list|)
block|{
name|this
operator|.
name|blockSeconds
operator|=
name|blockSeconds
expr_stmt|;
block|}
DECL|method|getFirstIndex ()
specifier|public
name|long
name|getFirstIndex
parameter_list|()
block|{
return|return
name|firstIndex
return|;
block|}
comment|/**      * The first index for watch for, default 0      */
DECL|method|setFirstIndex (long firstIndex)
specifier|public
name|void
name|setFirstIndex
parameter_list|(
name|long
name|firstIndex
parameter_list|)
block|{
name|this
operator|.
name|firstIndex
operator|=
name|firstIndex
expr_stmt|;
block|}
DECL|method|isRecursive ()
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|recursive
return|;
block|}
comment|/**      * Recursively watch, default false      */
DECL|method|setRecursive (boolean recursive)
specifier|public
name|void
name|setRecursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
block|}
end_class

end_unit

