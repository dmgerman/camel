begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
package|;
end_package

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|Consul
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|ConsulConfiguration
specifier|public
class|class
name|ConsulConfiguration
extends|extends
name|ConsulClientConfiguration
block|{
annotation|@
name|UriParam
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"common"
argument_list|)
DECL|field|consulClient
specifier|private
name|Consul
name|consulClient
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|action
specifier|private
name|String
name|action
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|valueAsString
specifier|private
name|boolean
name|valueAsString
decl_stmt|;
DECL|method|ConsulConfiguration ()
specifier|public
name|ConsulConfiguration
parameter_list|()
block|{     }
DECL|method|getAction ()
specifier|public
name|String
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * The default action. Can be overridden by CamelConsulAction      */
DECL|method|setAction (String action)
specifier|public
name|void
name|setAction
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
DECL|method|isValueAsString ()
specifier|public
name|boolean
name|isValueAsString
parameter_list|()
block|{
return|return
name|valueAsString
return|;
block|}
comment|/**      * Default to transform values retrieved from Consul i.e. on KV endpoint to      * string.      */
DECL|method|setValueAsString (boolean valueAsString)
specifier|public
name|void
name|setValueAsString
parameter_list|(
name|boolean
name|valueAsString
parameter_list|)
block|{
name|this
operator|.
name|valueAsString
operator|=
name|valueAsString
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * The default key. Can be overridden by CamelConsulKey      */
DECL|method|setKey (String key)
specifier|public
name|void
name|setKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|getConsulClient ()
specifier|public
name|Consul
name|getConsulClient
parameter_list|()
block|{
return|return
name|consulClient
return|;
block|}
comment|/**      * Reference to a `com.orbitz.consul.Consul` in the registry.      */
DECL|method|setConsulClient (Consul consulClient)
specifier|public
name|void
name|setConsulClient
parameter_list|(
name|Consul
name|consulClient
parameter_list|)
block|{
name|this
operator|.
name|consulClient
operator|=
name|consulClient
expr_stmt|;
block|}
comment|// ****************************************
comment|// Copy
comment|// ****************************************
annotation|@
name|Override
DECL|method|copy ()
specifier|public
name|ConsulConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|ConsulConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

