begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul.enpoint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|enpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|KeyValueClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|async
operator|.
name|ConsulResponseCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|ConsulResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|kv
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|option
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|AbstractConsulConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulEndpoint
import|;
end_import

begin_class
DECL|class|ConsulKeyValueConsumer
specifier|public
class|class
name|ConsulKeyValueConsumer
extends|extends
name|AbstractConsulConsumer
argument_list|<
name|KeyValueClient
argument_list|>
block|{
DECL|method|ConsulKeyValueConsumer (ConsulEndpoint endpoint, ConsulConfiguration configuration, Processor processor)
specifier|public
name|ConsulKeyValueConsumer
parameter_list|(
name|ConsulEndpoint
name|endpoint
parameter_list|,
name|ConsulConfiguration
name|configuration
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|configuration
argument_list|,
name|processor
argument_list|,
name|c
lambda|->
name|c
operator|.
name|keyValueClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWatcher (KeyValueClient client)
specifier|protected
name|Runnable
name|createWatcher
parameter_list|(
name|KeyValueClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|configuration
operator|.
name|isRecursive
argument_list|()
condition|?
operator|new
name|RecursivePathWatcher
argument_list|(
name|client
argument_list|)
else|:
operator|new
name|PathWatcher
argument_list|(
name|client
argument_list|)
return|;
block|}
comment|// *************************************************************************
comment|// Watch
comment|// *************************************************************************
DECL|class|AbstractPathWatcher
specifier|private
specifier|abstract
class|class
name|AbstractPathWatcher
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractWatcher
implements|implements
name|ConsulResponseCallback
argument_list|<
name|T
argument_list|>
block|{
DECL|method|AbstractPathWatcher (KeyValueClient client)
specifier|protected
name|AbstractPathWatcher
parameter_list|(
name|KeyValueClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
DECL|method|queryOptions ()
specifier|protected
name|QueryOptions
name|queryOptions
parameter_list|()
block|{
return|return
name|QueryOptions
operator|.
name|blockSeconds
argument_list|(
name|configuration
operator|.
name|getBlockSeconds
argument_list|()
argument_list|,
name|index
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onComplete (ConsulResponse<T> consulResponse)
specifier|public
name|void
name|onComplete
parameter_list|(
name|ConsulResponse
argument_list|<
name|T
argument_list|>
name|consulResponse
parameter_list|)
block|{
if|if
condition|(
name|isRunAllowed
argument_list|()
condition|)
block|{
name|onResponse
argument_list|(
name|consulResponse
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|setIndex
argument_list|(
name|consulResponse
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|watch
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFailure (Throwable throwable)
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|onError
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
DECL|method|onValue (Value value)
specifier|protected
name|void
name|onValue
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_KEY
argument_list|,
name|value
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_RESULT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_FLAGS
argument_list|,
name|value
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_CREATE_INDEX
argument_list|,
name|value
operator|.
name|getCreateIndex
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_LOCK_INDEX
argument_list|,
name|value
operator|.
name|getLockIndex
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_MODIFY_INDEX
argument_list|,
name|value
operator|.
name|getModifyIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|getSession
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_SESSION
argument_list|,
name|value
operator|.
name|getSession
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setBody
argument_list|(
name|configuration
operator|.
name|isValueAsString
argument_list|()
condition|?
name|value
operator|.
name|getValueAsString
argument_list|()
operator|.
name|orNull
argument_list|()
else|:
name|value
operator|.
name|getValue
argument_list|()
operator|.
name|orNull
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onResponse (T consulResponse)
specifier|protected
specifier|abstract
name|void
name|onResponse
parameter_list|(
name|T
name|consulResponse
parameter_list|)
function_decl|;
block|}
DECL|class|PathWatcher
specifier|private
class|class
name|PathWatcher
extends|extends
name|AbstractPathWatcher
argument_list|<
name|Optional
argument_list|<
name|Value
argument_list|>
argument_list|>
block|{
DECL|method|PathWatcher (KeyValueClient client)
name|PathWatcher
parameter_list|(
name|KeyValueClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|watch (KeyValueClient client)
specifier|public
name|void
name|watch
parameter_list|(
name|KeyValueClient
name|client
parameter_list|)
block|{
name|client
operator|.
name|getValue
argument_list|(
name|key
argument_list|,
name|queryOptions
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse (Optional<Value> value)
specifier|public
name|void
name|onResponse
parameter_list|(
name|Optional
argument_list|<
name|Value
argument_list|>
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|onValue
argument_list|(
name|value
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|RecursivePathWatcher
specifier|private
class|class
name|RecursivePathWatcher
extends|extends
name|AbstractPathWatcher
argument_list|<
name|List
argument_list|<
name|Value
argument_list|>
argument_list|>
block|{
DECL|method|RecursivePathWatcher (KeyValueClient client)
name|RecursivePathWatcher
parameter_list|(
name|KeyValueClient
name|client
parameter_list|)
block|{
name|super
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|watch (KeyValueClient client)
specifier|public
name|void
name|watch
parameter_list|(
name|KeyValueClient
name|client
parameter_list|)
block|{
name|client
operator|.
name|getValues
argument_list|(
name|key
argument_list|,
name|queryOptions
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse (List<Value> values)
specifier|public
name|void
name|onResponse
parameter_list|(
name|List
argument_list|<
name|Value
argument_list|>
name|values
parameter_list|)
block|{
name|values
operator|.
name|forEach
argument_list|(
name|this
operator|::
name|onValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

