begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|Consul
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|HeaderSelectorProducer
import|;
end_import

begin_class
DECL|class|AbstractConsulProducer
specifier|public
specifier|abstract
class|class
name|AbstractConsulProducer
parameter_list|<
name|C
parameter_list|>
extends|extends
name|HeaderSelectorProducer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|ConsulEndpoint
name|endpoint
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|ConsulConfiguration
name|configuration
decl_stmt|;
DECL|field|clientSupplier
specifier|private
specifier|final
name|Function
argument_list|<
name|Consul
argument_list|,
name|C
argument_list|>
name|clientSupplier
decl_stmt|;
DECL|field|client
specifier|private
name|C
name|client
decl_stmt|;
DECL|method|AbstractConsulProducer (ConsulEndpoint endpoint, ConsulConfiguration configuration, Function<Consul, C> clientSupplier)
specifier|protected
name|AbstractConsulProducer
parameter_list|(
name|ConsulEndpoint
name|endpoint
parameter_list|,
name|ConsulConfiguration
name|configuration
parameter_list|,
name|Function
argument_list|<
name|Consul
argument_list|,
name|C
argument_list|>
name|clientSupplier
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|ConsulConstants
operator|.
name|CONSUL_ACTION
argument_list|,
name|configuration
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|clientSupplier
operator|=
name|clientSupplier
expr_stmt|;
name|this
operator|.
name|client
operator|=
literal|null
expr_stmt|;
block|}
comment|// *************************************************************************
comment|//
comment|// *************************************************************************
DECL|method|getConsul ()
specifier|protected
name|Consul
name|getConsul
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|endpoint
operator|.
name|getConsul
argument_list|()
return|;
block|}
DECL|method|getClient ()
specifier|protected
name|C
name|getClient
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|client
operator|=
name|clientSupplier
operator|.
name|apply
argument_list|(
name|getConsul
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|ConsulConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|getHeader (Message message, String header, D defaultValue, Class<D> type)
specifier|protected
parameter_list|<
name|D
parameter_list|>
name|D
name|getHeader
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|header
parameter_list|,
name|D
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|D
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|header
argument_list|,
name|defaultValue
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|getMandatoryHeader (Message message, String header, Class<D> type)
specifier|protected
parameter_list|<
name|D
parameter_list|>
name|D
name|getMandatoryHeader
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|header
parameter_list|,
name|Class
argument_list|<
name|D
argument_list|>
name|type
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getMandatoryHeader
argument_list|(
name|message
argument_list|,
name|header
argument_list|,
literal|null
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|getMandatoryHeader (Message message, String header, D defaultValue, Class<D> type)
specifier|protected
parameter_list|<
name|D
parameter_list|>
name|D
name|getMandatoryHeader
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|header
parameter_list|,
name|D
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|D
argument_list|>
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|D
name|value
init|=
name|getHeader
argument_list|(
name|message
argument_list|,
name|header
argument_list|,
name|defaultValue
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchHeaderException
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
name|header
argument_list|,
name|type
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
DECL|method|getKey (Message message)
specifier|protected
name|String
name|getKey
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_KEY
argument_list|,
name|configuration
operator|.
name|getKey
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getMandatoryKey (Message message)
specifier|protected
name|String
name|getMandatoryKey
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getMandatoryHeader
argument_list|(
name|message
argument_list|,
name|ConsulConstants
operator|.
name|CONSUL_KEY
argument_list|,
name|configuration
operator|.
name|getKey
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getOption (Message message, T defaultValue, Class<T> type)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getOption
parameter_list|(
name|Message
name|message
parameter_list|,
name|T
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_OPTIONS
argument_list|,
name|defaultValue
argument_list|,
name|type
argument_list|)
return|;
block|}
DECL|method|isValueAsString (Message message)
specifier|protected
name|boolean
name|isValueAsString
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_VALUE_AS_STRING
argument_list|,
name|configuration
operator|.
name|isValueAsString
argument_list|()
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getBody (Message message, T defaultValue, Class<T> type)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getBody
parameter_list|(
name|Message
name|message
parameter_list|,
name|T
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|T
name|body
init|=
name|message
operator|.
name|getBody
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|body
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|body
return|;
block|}
DECL|method|setBodyAndResult (Message message, Object body)
specifier|protected
name|void
name|setBodyAndResult
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|body
parameter_list|)
throws|throws
name|Exception
block|{
name|setBodyAndResult
argument_list|(
name|message
argument_list|,
name|body
argument_list|,
name|body
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setBodyAndResult (Message message, Object body, boolean result)
specifier|protected
name|void
name|setBodyAndResult
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|body
parameter_list|,
name|boolean
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|ConsulConstants
operator|.
name|CONSUL_RESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|wrap (Function<C, Object> supplier)
specifier|protected
name|Processor
name|wrap
parameter_list|(
name|Function
argument_list|<
name|C
argument_list|,
name|Object
argument_list|>
name|supplier
parameter_list|)
block|{
return|return
name|exchange
lambda|->
name|setBodyAndResult
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|supplier
operator|.
name|apply
argument_list|(
name|getClient
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

