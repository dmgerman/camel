begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul.processor.service
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|processor
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|catalog
operator|.
name|CatalogService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|health
operator|.
name|ServiceHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ConsulServiceCallServerListStrategies
specifier|public
specifier|final
class|class
name|ConsulServiceCallServerListStrategies
block|{
DECL|method|ConsulServiceCallServerListStrategies ()
specifier|private
name|ConsulServiceCallServerListStrategies
parameter_list|()
block|{     }
DECL|class|OnDemand
specifier|public
specifier|static
specifier|final
class|class
name|OnDemand
extends|extends
name|ConsulServiceCallServerListStrategy
block|{
DECL|method|OnDemand (ConsulConfiguration configuration)
specifier|public
name|OnDemand
parameter_list|(
name|ConsulConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUpdatedListOfServers (String name)
specifier|public
name|Collection
argument_list|<
name|ServiceCallServer
argument_list|>
name|getUpdatedListOfServers
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|CatalogService
argument_list|>
name|services
init|=
name|getCatalogClient
argument_list|()
operator|.
name|getService
argument_list|(
name|name
argument_list|,
name|getCatalogOptions
argument_list|()
argument_list|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServiceHealth
argument_list|>
name|healths
init|=
name|getHealthClient
argument_list|()
operator|.
name|getAllServiceInstances
argument_list|(
name|name
argument_list|,
name|getCatalogOptions
argument_list|()
argument_list|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
return|return
name|services
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|service
lambda|->
operator|!
name|hasFailingChecks
argument_list|(
name|service
argument_list|,
name|healths
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|newServer
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OnDemand"
return|;
block|}
block|}
comment|// *************************************************************************
comment|// Helpers
comment|// *************************************************************************
DECL|method|onDemand (ConsulConfiguration configuration)
specifier|public
specifier|static
name|ConsulServiceCallServerListStrategy
name|onDemand
parameter_list|(
name|ConsulConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|OnDemand
argument_list|(
name|configuration
argument_list|)
return|;
block|}
block|}
end_class

end_unit

