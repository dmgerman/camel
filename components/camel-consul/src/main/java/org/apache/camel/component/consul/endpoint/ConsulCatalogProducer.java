begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|CatalogClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|Consul
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|catalog
operator|.
name|CatalogDeregistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|catalog
operator|.
name|CatalogRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvokeOnHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulEndpoint
import|;
end_import

begin_class
DECL|class|ConsulCatalogProducer
specifier|public
specifier|final
class|class
name|ConsulCatalogProducer
extends|extends
name|AbstractConsulProducer
argument_list|<
name|CatalogClient
argument_list|>
block|{
DECL|method|ConsulCatalogProducer (ConsulEndpoint endpoint, ConsulConfiguration configuration)
specifier|public
name|ConsulCatalogProducer
parameter_list|(
name|ConsulEndpoint
name|endpoint
parameter_list|,
name|ConsulConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|configuration
argument_list|,
name|Consul
operator|::
name|catalogClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
name|ConsulCatalogActions
operator|.
name|REGISTER
argument_list|)
DECL|method|register (Message message)
specifier|protected
name|void
name|register
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|getClient
argument_list|()
operator|.
name|register
argument_list|(
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|CatalogRegistration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|setBodyAndResult
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
name|ConsulCatalogActions
operator|.
name|DEREGISTER
argument_list|)
DECL|method|deregister (Message message)
specifier|protected
name|void
name|deregister
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|getClient
argument_list|()
operator|.
name|deregister
argument_list|(
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|CatalogDeregistration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|setBodyAndResult
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
name|ConsulCatalogActions
operator|.
name|LIST_DATACENTERS
argument_list|)
DECL|method|listDatacenters (Message message)
specifier|protected
name|void
name|listDatacenters
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|setBodyAndResult
argument_list|(
name|message
argument_list|,
name|getClient
argument_list|()
operator|.
name|getDatacenters
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
name|ConsulCatalogActions
operator|.
name|LIST_NODES
argument_list|)
DECL|method|listNodes (Message message)
specifier|protected
name|void
name|listNodes
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|processConsulResponse
argument_list|(
name|message
argument_list|,
name|getClient
argument_list|()
operator|.
name|getNodes
argument_list|(
name|buildQueryOptions
argument_list|(
name|message
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
name|ConsulCatalogActions
operator|.
name|LIST_SERVICES
argument_list|)
DECL|method|listServices (Message message)
specifier|protected
name|void
name|listServices
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|processConsulResponse
argument_list|(
name|message
argument_list|,
name|getClient
argument_list|()
operator|.
name|getNodes
argument_list|(
name|buildQueryOptions
argument_list|(
name|message
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
name|ConsulCatalogActions
operator|.
name|GET_SERVICE
argument_list|)
DECL|method|getService (Message message)
specifier|protected
name|void
name|getService
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|processConsulResponse
argument_list|(
name|message
argument_list|,
name|getClient
argument_list|()
operator|.
name|getService
argument_list|(
name|getMandatoryHeader
argument_list|(
name|message
argument_list|,
name|ConsulConstants
operator|.
name|CONSUL_SERVICE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|buildQueryOptions
argument_list|(
name|message
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
name|ConsulCatalogActions
operator|.
name|GET_NODE
argument_list|)
DECL|method|getNode (Message message)
specifier|protected
name|void
name|getNode
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|processConsulResponse
argument_list|(
name|message
argument_list|,
name|getClient
argument_list|()
operator|.
name|getNode
argument_list|(
name|getMandatoryHeader
argument_list|(
name|message
argument_list|,
name|ConsulConstants
operator|.
name|CONSUL_NODE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|buildQueryOptions
argument_list|(
name|message
argument_list|,
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

