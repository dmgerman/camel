begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.consul.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|Consul
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|catalog
operator|.
name|CatalogService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|model
operator|.
name|health
operator|.
name|ServiceHealth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|option
operator|.
name|ImmutableQueryOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|orbitz
operator|.
name|consul
operator|.
name|option
operator|.
name|QueryOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|consul
operator|.
name|ConsulConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceHealth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|function
operator|.
name|Suppliers
import|;
end_import

begin_class
DECL|class|ConsulServiceDiscovery
specifier|public
specifier|final
class|class
name|ConsulServiceDiscovery
extends|extends
name|DefaultServiceDiscovery
block|{
DECL|field|client
specifier|private
specifier|final
name|Supplier
argument_list|<
name|Consul
argument_list|>
name|client
decl_stmt|;
DECL|field|queryOptions
specifier|private
specifier|final
name|QueryOptions
name|queryOptions
decl_stmt|;
DECL|method|ConsulServiceDiscovery (ConsulConfiguration configuration)
specifier|public
name|ConsulServiceDiscovery
parameter_list|(
name|ConsulConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|client
operator|=
name|Suppliers
operator|.
name|memorize
argument_list|(
parameter_list|()
lambda|->
name|configuration
operator|.
name|createConsulClient
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
argument_list|,
name|e
lambda|->
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|ImmutableQueryOptions
operator|.
name|Builder
name|builder
init|=
name|ImmutableQueryOptions
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getDatacenter
argument_list|()
argument_list|,
name|builder
operator|::
name|datacenter
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getTags
argument_list|()
argument_list|,
name|builder
operator|::
name|tag
argument_list|)
expr_stmt|;
name|queryOptions
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getServices (String name)
specifier|public
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|getServices
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|CatalogService
argument_list|>
name|services
init|=
name|client
operator|.
name|get
argument_list|()
operator|.
name|catalogClient
argument_list|()
operator|.
name|getService
argument_list|(
name|name
argument_list|,
name|queryOptions
argument_list|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServiceHealth
argument_list|>
name|healths
init|=
name|client
operator|.
name|get
argument_list|()
operator|.
name|healthClient
argument_list|()
operator|.
name|getAllServiceInstances
argument_list|(
name|name
argument_list|,
name|queryOptions
argument_list|)
operator|.
name|getResponse
argument_list|()
decl_stmt|;
return|return
name|services
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|service
lambda|->
name|newService
argument_list|(
name|name
argument_list|,
name|service
argument_list|,
name|healths
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|// *************************
comment|// Helpers
comment|// *************************
DECL|method|isHealthy (ServiceHealth serviceHealth)
specifier|private
name|boolean
name|isHealthy
parameter_list|(
name|ServiceHealth
name|serviceHealth
parameter_list|)
block|{
return|return
name|serviceHealth
operator|.
name|getChecks
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|check
lambda|->
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|check
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|"passing"
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newService (String serviceName, CatalogService service, List<ServiceHealth> serviceHealthList)
specifier|private
name|ServiceDefinition
name|newService
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|CatalogService
name|service
parameter_list|,
name|List
argument_list|<
name|ServiceHealth
argument_list|>
name|serviceHealthList
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|service
operator|.
name|getServiceId
argument_list|()
argument_list|,
name|val
lambda|->
name|meta
operator|.
name|put
argument_list|(
literal|"service_id"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|service
operator|.
name|getNode
argument_list|()
argument_list|,
name|val
lambda|->
name|meta
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|service
operator|.
name|getServiceName
argument_list|()
argument_list|,
name|val
lambda|->
name|meta
operator|.
name|put
argument_list|(
literal|"service_name"
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|service
operator|.
name|getServiceTags
argument_list|()
decl_stmt|;
if|if
condition|(
name|tags
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|tag
range|:
name|service
operator|.
name|getServiceTags
argument_list|()
control|)
block|{
name|String
index|[]
name|items
init|=
name|tag
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|items
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|meta
operator|.
name|put
argument_list|(
name|items
index|[
literal|0
index|]
argument_list|,
name|items
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|items
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|meta
operator|.
name|put
argument_list|(
name|items
index|[
literal|0
index|]
argument_list|,
name|items
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|DefaultServiceDefinition
argument_list|(
name|serviceName
argument_list|,
name|service
operator|.
name|getServiceAddress
argument_list|()
argument_list|,
name|service
operator|.
name|getServicePort
argument_list|()
argument_list|,
name|meta
argument_list|,
operator|new
name|DefaultServiceHealth
argument_list|(
name|serviceHealthList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|h
lambda|->
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|h
operator|.
name|getService
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|service
operator|.
name|getServiceId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|allMatch
argument_list|(
name|this
operator|::
name|isHealthy
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

