begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|AS2HeaderUtils
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|ParserCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|CharArrayBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|AS2HeaderUtilsTest
specifier|public
class|class
name|AS2HeaderUtilsTest
block|{
DECL|field|TEST_NAME_VALUES
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NAME_VALUES
init|=
literal|" signed-receipt-protocol   =   optional  , pkcs7-signature  ;    signed-receipt-micalg   =    required  ,  sha1  "
decl_stmt|;
DECL|field|SIGNED_RECEIPT_PROTOCOL_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|String
name|SIGNED_RECEIPT_PROTOCOL_ATTRIBUTE
init|=
literal|"signed-receipt-protocol"
decl_stmt|;
DECL|field|SIGNED_RECEIPT_PROTOCOL_IMPORTANCE
specifier|private
specifier|static
specifier|final
name|String
name|SIGNED_RECEIPT_PROTOCOL_IMPORTANCE
init|=
literal|"optional"
decl_stmt|;
DECL|field|SIGNED_RECEIPT_PROTOCOL_VALUES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SIGNED_RECEIPT_PROTOCOL_VALUES
init|=
block|{
literal|"pkcs7-signature"
block|}
decl_stmt|;
DECL|field|SIGNED_RECEIPT_MICALG_ATTRIBUTE
specifier|private
specifier|static
specifier|final
name|String
name|SIGNED_RECEIPT_MICALG_ATTRIBUTE
init|=
literal|"signed-receipt-micalg"
decl_stmt|;
DECL|field|SIGNED_RECEIPT_MICALG_IMPORTANCE
specifier|private
specifier|static
specifier|final
name|String
name|SIGNED_RECEIPT_MICALG_IMPORTANCE
init|=
literal|"required"
decl_stmt|;
DECL|field|SIGNED_RECEIPT_MICALG_VALUES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SIGNED_RECEIPT_MICALG_VALUES
init|=
block|{
literal|"sha1"
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|parseNameValuePairTest ()
specifier|public
name|void
name|parseNameValuePairTest
parameter_list|()
block|{
specifier|final
name|CharArrayBuffer
name|buffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
name|TEST_NAME_VALUES
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|TEST_NAME_VALUES
argument_list|)
expr_stmt|;
specifier|final
name|ParserCursor
name|cursor
init|=
operator|new
name|ParserCursor
argument_list|(
literal|0
argument_list|,
name|TEST_NAME_VALUES
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Parameter
name|parameter
init|=
name|AS2HeaderUtils
operator|.
name|parseParameter
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for parameter attribute"
argument_list|,
name|SIGNED_RECEIPT_PROTOCOL_ATTRIBUTE
argument_list|,
name|parameter
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for parameter importance"
argument_list|,
name|SIGNED_RECEIPT_PROTOCOL_IMPORTANCE
argument_list|,
name|parameter
operator|.
name|getImportance
argument_list|()
operator|.
name|getImportance
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Unexpected value for parameter values"
argument_list|,
name|SIGNED_RECEIPT_PROTOCOL_VALUES
argument_list|,
name|parameter
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|parameter
operator|=
name|AS2HeaderUtils
operator|.
name|parseParameter
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for parameter attribute"
argument_list|,
name|SIGNED_RECEIPT_MICALG_ATTRIBUTE
argument_list|,
name|parameter
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for parameter importance"
argument_list|,
name|SIGNED_RECEIPT_MICALG_IMPORTANCE
argument_list|,
name|parameter
operator|.
name|getImportance
argument_list|()
operator|.
name|getImportance
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Unexpected value for parameter values"
argument_list|,
name|SIGNED_RECEIPT_MICALG_VALUES
argument_list|,
name|parameter
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

