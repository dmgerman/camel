begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|AS2DispositionModifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|AS2DispositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|AS2MessageDispositionNotificationEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationEDIEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationEDIFACTEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationPkcs7SignatureEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|DispositionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|DispositionNotificationMultipartReportEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|MimeEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|MultipartSignedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|TextPlainEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|HttpMessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|MicUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|MicUtils
operator|.
name|ReceivedContentMic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|EnglishReasonPhraseCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpDateGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1EncodableVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|AttributeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|IssuerAndSerialNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapabilitiesAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapabilityVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMEEncryptionKeyPreferenceAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaCertStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JcaSimpleSignerInfoGeneratorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|AS2MessageTest
specifier|public
class|class
name|AS2MessageTest
block|{
DECL|field|EDI_MESSAGE
specifier|public
specifier|static
specifier|final
name|String
name|EDI_MESSAGE
init|=
literal|"UNB+UNOA:1+005435656:1+006415160:1+060515:1434+00000000000778'\n"
operator|+
literal|"UNH+00000000000117+INVOIC:D:97B:UN'\n"
operator|+
literal|"BGM+380+342459+9'\n"
operator|+
literal|"DTM+3:20060515:102'\n"
operator|+
literal|"RFF+ON:521052'\n"
operator|+
literal|"NAD+BY+792820524::16++CUMMINS MID-RANGE ENGINE PLANT'\n"
operator|+
literal|"NAD+SE+005435656::16++GENERAL WIDGET COMPANY'\n"
operator|+
literal|"CUX+1:USD'\n"
operator|+
literal|"LIN+1++157870:IN'\n"
operator|+
literal|"IMD+F++:::WIDGET'\n"
operator|+
literal|"QTY+47:1020:EA'\n"
operator|+
literal|"ALI+US'\n"
operator|+
literal|"MOA+203:1202.58'\n"
operator|+
literal|"PRI+INV:1.179'\n"
operator|+
literal|"LIN+2++157871:IN'\n"
operator|+
literal|"IMD+F++:::DIFFERENT WIDGET'\n"
operator|+
literal|"QTY+47:20:EA'\n"
operator|+
literal|"ALI+JP'\n"
operator|+
literal|"MOA+203:410'\n"
operator|+
literal|"PRI+INV:20.5'\n"
operator|+
literal|"UNS+S'\n"
operator|+
literal|"MOA+39:2137.58'\n"
operator|+
literal|"ALC+C+ABG'\n"
operator|+
literal|"MOA+8:525'\n"
operator|+
literal|"UNT+23+00000000000117'\n"
operator|+
literal|"UNZ+1+00000000000778'"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AS2MessageTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|METHOD
specifier|private
specifier|static
specifier|final
name|String
name|METHOD
init|=
literal|"POST"
decl_stmt|;
DECL|field|TARGET_HOST
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|TARGET_PORT
specifier|private
specifier|static
specifier|final
name|int
name|TARGET_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|8080
argument_list|)
decl_stmt|;
DECL|field|RECIPIENT_DELIVERY_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RECIPIENT_DELIVERY_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|TARGET_PORT
operator|+
literal|"/handle-receipts"
decl_stmt|;
DECL|field|AS2_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|AS2_VERSION
init|=
literal|"1.1"
decl_stmt|;
DECL|field|USER_AGENT
specifier|private
specifier|static
specifier|final
name|String
name|USER_AGENT
init|=
literal|"Camel AS2 Endpoint"
decl_stmt|;
DECL|field|REQUEST_URI
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_URI
init|=
literal|"/"
decl_stmt|;
DECL|field|AS2_NAME
specifier|private
specifier|static
specifier|final
name|String
name|AS2_NAME
init|=
literal|"878051556"
decl_stmt|;
DECL|field|SUBJECT
specifier|private
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
literal|"Test Case"
decl_stmt|;
DECL|field|FROM
specifier|private
specifier|static
specifier|final
name|String
name|FROM
init|=
literal|"mrAS@example.org"
decl_stmt|;
DECL|field|CLIENT_FQDN
specifier|private
specifier|static
specifier|final
name|String
name|CLIENT_FQDN
init|=
literal|"client.example.org"
decl_stmt|;
DECL|field|SERVER_FQDN
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_FQDN
init|=
literal|"server.example.org"
decl_stmt|;
DECL|field|REPORTING_UA
specifier|private
specifier|static
specifier|final
name|String
name|REPORTING_UA
init|=
literal|"Server Responding with MDN"
decl_stmt|;
DECL|field|DISPOSITION_NOTIFICATION_TO
specifier|private
specifier|static
specifier|final
name|String
name|DISPOSITION_NOTIFICATION_TO
init|=
literal|"mrAS@example.org"
decl_stmt|;
DECL|field|DISPOSITION_NOTIFICATION_OPTIONS
specifier|private
specifier|static
specifier|final
name|String
name|DISPOSITION_NOTIFICATION_OPTIONS
init|=
literal|"signed-receipt-protocol=optional,pkcs7-signature; signed-receipt-micalg=optional,sha1"
decl_stmt|;
DECL|field|SIGNED_RECEIPT_MIC_ALGORITHMS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SIGNED_RECEIPT_MIC_ALGORITHMS
init|=
operator|new
name|String
index|[]
block|{
literal|"sha1"
block|,
literal|"md5"
block|}
decl_stmt|;
DECL|field|DATE_GENERATOR
specifier|private
specifier|static
specifier|final
name|HttpDateGenerator
name|DATE_GENERATOR
init|=
operator|new
name|HttpDateGenerator
argument_list|()
decl_stmt|;
DECL|field|testServer
specifier|private
specifier|static
name|AS2ServerConnection
name|testServer
decl_stmt|;
DECL|field|gen
specifier|private
name|AS2SignedDataGenerator
name|gen
decl_stmt|;
DECL|field|issueKP
specifier|private
name|KeyPair
name|issueKP
decl_stmt|;
DECL|field|issueCert
specifier|private
name|X509Certificate
name|issueCert
decl_stmt|;
DECL|field|signingKP
specifier|private
name|KeyPair
name|signingKP
decl_stmt|;
DECL|field|signingCert
specifier|private
name|X509Certificate
name|signingCert
decl_stmt|;
DECL|field|certList
specifier|private
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certList
decl_stmt|;
DECL|method|setupKeysAndCertificates ()
specifier|private
name|void
name|setupKeysAndCertificates
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// set up our certificates
comment|//
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
literal|1024
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|issueDN
init|=
literal|"O=Punkhorn Software, C=US"
decl_stmt|;
name|issueKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|issueCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|issueKP
argument_list|,
name|issueDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
comment|//
comment|// certificate we sign against
comment|//
name|String
name|signingDN
init|=
literal|"CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US"
decl_stmt|;
name|signingKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|signingCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|signingKP
argument_list|,
name|signingDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
name|certList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|signingCert
argument_list|)
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|issueCert
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setUpOnce ()
specifier|public
specifier|static
name|void
name|setUpOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// set up our certificates
comment|//
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
literal|1024
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|issueDN
init|=
literal|"O=Punkhorn Software, C=US"
decl_stmt|;
name|KeyPair
name|issueKP
init|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
decl_stmt|;
name|X509Certificate
name|issueCert
init|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|issueKP
argument_list|,
name|issueDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
decl_stmt|;
comment|//
comment|// certificate we sign against
comment|//
name|String
name|signingDN
init|=
literal|"CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US"
decl_stmt|;
name|KeyPair
name|signingKP
init|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
decl_stmt|;
name|X509Certificate
name|signingCert
init|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|signingKP
argument_list|,
name|signingDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|signingCert
argument_list|)
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|issueCert
argument_list|)
expr_stmt|;
name|testServer
operator|=
operator|new
name|AS2ServerConnection
argument_list|(
name|AS2_VERSION
argument_list|,
literal|"MyServer-HTTP/1.1"
argument_list|,
name|SERVER_FQDN
argument_list|,
name|TARGET_PORT
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|testServer
operator|.
name|listen
argument_list|(
literal|"*"
argument_list|,
operator|new
name|HttpRequestHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
try|try
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|EntityParser
operator|.
name|parseAS2MessageEntity
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|AS2ServerManager
operator|.
name|SUBJECT
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|AS2ServerManager
operator|.
name|FROM
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|Util
operator|.
name|printMessage
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to parse AS2 Message Entity"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownOnce ()
specifier|public
specifier|static
name|void
name|tearDownOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|testServer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
name|setupKeysAndCertificates
argument_list|()
expr_stmt|;
comment|// Create and populate certificate store.
name|JcaCertStore
name|certs
init|=
operator|new
name|JcaCertStore
argument_list|(
name|certList
argument_list|)
decl_stmt|;
comment|// Create capabilities vector
name|SMIMECapabilityVector
name|capabilities
init|=
operator|new
name|SMIMECapabilityVector
argument_list|()
decl_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|dES_EDE3_CBC
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|rC2_CBC
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|dES_CBC
argument_list|)
expr_stmt|;
comment|// Create signing attributes
name|ASN1EncodableVector
name|attributes
init|=
operator|new
name|ASN1EncodableVector
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|SMIMEEncryptionKeyPreferenceAttribute
argument_list|(
operator|new
name|IssuerAndSerialNumber
argument_list|(
operator|new
name|X500Name
argument_list|(
name|signingCert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|signingCert
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|SMIMECapabilitiesAttribute
argument_list|(
name|capabilities
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|signingAlgorithmName
range|:
name|AS2SignedDataGenerator
operator|.
name|getSupportedSignatureAlgorithmNamesForKey
argument_list|(
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
control|)
block|{
try|try
block|{
name|this
operator|.
name|gen
operator|=
operator|new
name|AS2SignedDataGenerator
argument_list|()
expr_stmt|;
name|this
operator|.
name|gen
operator|.
name|addSignerInfoGenerator
argument_list|(
operator|new
name|JcaSimpleSignerInfoGeneratorBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
literal|"BC"
argument_list|)
operator|.
name|setSignedAttributeGenerator
argument_list|(
operator|new
name|AttributeTable
argument_list|(
name|attributes
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|signingAlgorithmName
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|signingCert
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|gen
operator|.
name|addCertificates
argument_list|(
name|certs
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|gen
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|gen
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"failed to create signing generator"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|plainEDIMessageTest ()
specifier|public
name|void
name|plainEDIMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AS2ClientConnection
name|clientConnection
init|=
operator|new
name|AS2ClientConnection
argument_list|(
name|AS2_VERSION
argument_list|,
name|USER_AGENT
argument_list|,
name|CLIENT_FQDN
argument_list|,
name|TARGET_HOST
argument_list|,
name|TARGET_PORT
argument_list|)
decl_stmt|;
name|AS2ClientManager
name|clientManager
init|=
operator|new
name|AS2ClientManager
argument_list|(
name|clientConnection
argument_list|)
decl_stmt|;
name|HttpCoreContext
name|httpContext
init|=
name|clientManager
operator|.
name|send
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|REQUEST_URI
argument_list|,
name|SUBJECT
argument_list|,
name|FROM
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2MessageStructure
operator|.
name|PLAIN
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_NOTIFICATION_TO
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|)
decl_stmt|;
name|HttpRequest
name|request
init|=
name|httpContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected method value"
argument_list|,
name|METHOD
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected request URI value"
argument_list|,
name|REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected HTTP version value"
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected subject value"
argument_list|,
name|SUBJECT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected from value"
argument_list|,
name|FROM
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version value"
argument_list|,
name|AS2_VERSION
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected message id value"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CLIENT_FQDN
operator|+
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected target host value"
argument_list|,
name|TARGET_HOST
operator|+
literal|":"
operator|+
name|TARGET_PORT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|TARGET_HOST
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected user agent value"
argument_list|,
name|USER_AGENT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|USER_AGENT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Date value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Content length value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for message"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|request
operator|instanceof
name|BasicHttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|BasicHttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected request entity type"
argument_list|,
name|entity
operator|instanceof
name|ApplicationEDIFACTEntity
argument_list|)
expr_stmt|;
name|ApplicationEDIFACTEntity
name|ediEntity
init|=
operator|(
name|ApplicationEDIFACTEntity
operator|)
name|entity
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for entity"
argument_list|,
name|ediEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Entity not set as main body of request"
argument_list|,
name|ediEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipartSignedMessageTest ()
specifier|public
name|void
name|multipartSignedMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AS2ClientConnection
name|clientConnection
init|=
operator|new
name|AS2ClientConnection
argument_list|(
name|AS2_VERSION
argument_list|,
name|USER_AGENT
argument_list|,
name|CLIENT_FQDN
argument_list|,
name|TARGET_HOST
argument_list|,
name|TARGET_PORT
argument_list|)
decl_stmt|;
name|AS2ClientManager
name|clientManager
init|=
operator|new
name|AS2ClientManager
argument_list|(
name|clientConnection
argument_list|)
decl_stmt|;
name|HttpCoreContext
name|httpContext
init|=
name|clientManager
operator|.
name|send
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|REQUEST_URI
argument_list|,
name|SUBJECT
argument_list|,
name|FROM
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2MessageStructure
operator|.
name|SIGNED
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|DISPOSITION_NOTIFICATION_TO
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|)
decl_stmt|;
name|HttpRequest
name|request
init|=
name|httpContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected method value"
argument_list|,
name|METHOD
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected request URI value"
argument_list|,
name|REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected HTTP version value"
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected subject value"
argument_list|,
name|SUBJECT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected from value"
argument_list|,
name|FROM
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version value"
argument_list|,
name|AS2_VERSION
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected message id value"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CLIENT_FQDN
operator|+
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected target host value"
argument_list|,
name|TARGET_HOST
operator|+
literal|":"
operator|+
name|TARGET_PORT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|TARGET_HOST
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected user agent value"
argument_list|,
name|USER_AGENT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|USER_AGENT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Date value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Content length value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for message"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|MULTIPART_SIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|request
operator|instanceof
name|BasicHttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|BasicHttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected request entity type"
argument_list|,
name|entity
operator|instanceof
name|MultipartSignedEntity
argument_list|)
expr_stmt|;
name|MultipartSignedEntity
name|signedEntity
init|=
operator|(
name|MultipartSignedEntity
operator|)
name|entity
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Entity not set as main body of request"
argument_list|,
name|signedEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request contains invalid number of mime parts"
argument_list|,
name|signedEntity
operator|.
name|getPartCount
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// Validated first mime part.
name|assertTrue
argument_list|(
literal|"First mime part incorrect type "
argument_list|,
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ApplicationEDIFACTEntity
argument_list|)
expr_stmt|;
name|ApplicationEDIFACTEntity
name|ediEntity
init|=
operator|(
name|ApplicationEDIFACTEntity
operator|)
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for first mime part"
argument_list|,
name|ediEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"First mime type set as main body of request"
argument_list|,
name|ediEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate second mime part.
name|assertTrue
argument_list|(
literal|"Second mime part incorrect type "
argument_list|,
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ApplicationPkcs7SignatureEntity
argument_list|)
expr_stmt|;
name|ApplicationPkcs7SignatureEntity
name|signatureEntity
init|=
operator|(
name|ApplicationPkcs7SignatureEntity
operator|)
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for second mime part"
argument_list|,
name|signatureEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_PKCS7_SIGNATURE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"First mime type set as main body of request"
argument_list|,
name|signatureEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|signatureVerificationTest ()
specifier|public
name|void
name|signatureVerificationTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AS2ClientConnection
name|clientConnection
init|=
operator|new
name|AS2ClientConnection
argument_list|(
name|AS2_VERSION
argument_list|,
name|USER_AGENT
argument_list|,
name|CLIENT_FQDN
argument_list|,
name|TARGET_HOST
argument_list|,
name|TARGET_PORT
argument_list|)
decl_stmt|;
name|AS2ClientManager
name|clientManager
init|=
operator|new
name|AS2ClientManager
argument_list|(
name|clientConnection
argument_list|)
decl_stmt|;
name|HttpCoreContext
name|httpContext
init|=
name|clientManager
operator|.
name|send
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|REQUEST_URI
argument_list|,
name|SUBJECT
argument_list|,
name|FROM
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2MessageStructure
operator|.
name|SIGNED
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|DISPOSITION_NOTIFICATION_TO
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|)
decl_stmt|;
name|HttpRequest
name|request
init|=
name|httpContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|request
operator|instanceof
name|BasicHttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|BasicHttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected request entity type"
argument_list|,
name|entity
operator|instanceof
name|MultipartSignedEntity
argument_list|)
expr_stmt|;
name|MultipartSignedEntity
name|multipartSignedEntity
init|=
operator|(
name|MultipartSignedEntity
operator|)
name|entity
decl_stmt|;
name|MimeEntity
name|signedEntity
init|=
name|multipartSignedEntity
operator|.
name|getSignedDataEntity
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signed entity wrong type"
argument_list|,
name|signedEntity
operator|instanceof
name|ApplicationEDIEntity
argument_list|)
expr_stmt|;
name|ApplicationEDIEntity
name|ediMessageEntity
init|=
operator|(
name|ApplicationEDIEntity
operator|)
name|signedEntity
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Multipart signed entity does not contain EDI message entity"
argument_list|,
name|ediMessageEntity
argument_list|)
expr_stmt|;
name|ApplicationPkcs7SignatureEntity
name|signatureEntity
init|=
name|multipartSignedEntity
operator|.
name|getSignatureEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Multipart signed entity does not contain signature entity"
argument_list|,
name|signatureEntity
argument_list|)
expr_stmt|;
comment|// Validate Signature
name|assertTrue
argument_list|(
literal|"Signature is invalid"
argument_list|,
name|multipartSignedEntity
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|mdnMessageTest ()
specifier|public
name|void
name|mdnMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AS2ClientConnection
name|clientConnection
init|=
operator|new
name|AS2ClientConnection
argument_list|(
name|AS2_VERSION
argument_list|,
name|USER_AGENT
argument_list|,
name|CLIENT_FQDN
argument_list|,
name|TARGET_HOST
argument_list|,
name|TARGET_PORT
argument_list|)
decl_stmt|;
name|AS2ClientManager
name|clientManager
init|=
operator|new
name|AS2ClientManager
argument_list|(
name|clientConnection
argument_list|)
decl_stmt|;
name|HttpCoreContext
name|httpContext
init|=
name|clientManager
operator|.
name|send
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|REQUEST_URI
argument_list|,
name|SUBJECT
argument_list|,
name|FROM
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2MessageStructure
operator|.
name|PLAIN
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_NOTIFICATION_TO
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|)
decl_stmt|;
name|HttpResponse
name|response
init|=
name|httpContext
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected method value"
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected method value"
argument_list|,
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected method value"
argument_list|,
name|EnglishReasonPhraseCatalog
operator|.
name|INSTANCE
operator|.
name|getReason
argument_list|(
literal|200
argument_list|,
literal|null
argument_list|)
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
name|HttpEntity
name|responseEntity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response entity"
argument_list|,
name|responseEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected response entity type"
argument_list|,
name|responseEntity
operator|instanceof
name|MultipartSignedEntity
argument_list|)
expr_stmt|;
name|MultipartSignedEntity
name|responseSignedEntity
init|=
operator|(
name|MultipartSignedEntity
operator|)
name|responseEntity
decl_stmt|;
name|MimeEntity
name|responseSignedDataEntity
init|=
name|responseSignedEntity
operator|.
name|getSignedDataEntity
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signed entity wrong type"
argument_list|,
name|responseSignedDataEntity
operator|instanceof
name|DispositionNotificationMultipartReportEntity
argument_list|)
expr_stmt|;
name|DispositionNotificationMultipartReportEntity
name|reportEntity
init|=
operator|(
name|DispositionNotificationMultipartReportEntity
operator|)
name|responseSignedDataEntity
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of body parts in report"
argument_list|,
literal|2
argument_list|,
name|reportEntity
operator|.
name|getPartCount
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|firstPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in first body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|TEXT_PLAIN
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|firstPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|secondPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in second body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|secondPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationPkcs7SignatureEntity
name|signatureEntity
init|=
name|responseSignedEntity
operator|.
name|getSignatureEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Signature Entity"
argument_list|,
name|signatureEntity
argument_list|)
expr_stmt|;
comment|// Validate Signature
name|assertTrue
argument_list|(
literal|"Signature is invalid"
argument_list|,
name|responseSignedEntity
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|synchronousMdnMessageTest ()
specifier|public
name|void
name|synchronousMdnMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AS2AsynchronousMDNManager
name|mdnManager
init|=
operator|new
name|AS2AsynchronousMDNManager
argument_list|(
name|AS2_VERSION
argument_list|,
name|USER_AGENT
argument_list|,
name|CLIENT_FQDN
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|X509Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create plain edi request message to acknowledge
name|ApplicationEDIEntity
name|ediEntity
init|=
name|EntityUtils
operator|.
name|createEDIEntity
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HttpEntityEnclosingRequest
name|request
init|=
operator|new
name|BasicHttpEntityEnclosingRequest
argument_list|(
literal|"POST"
argument_list|,
name|REQUEST_URI
argument_list|)
decl_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|SUBJECT
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
name|String
name|httpdate
init|=
name|DATE_GENERATOR
operator|.
name|getCurrentDate
argument_list|()
decl_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|DATE
argument_list|,
name|httpdate
argument_list|)
expr_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|AS2_TO
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|AS2_FROM
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
name|String
name|originalMessageId
init|=
name|Util
operator|.
name|createMessageId
argument_list|(
name|SERVER_FQDN
argument_list|)
decl_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|,
name|originalMessageId
argument_list|)
expr_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|DISPOSITION_NOTIFICATION_OPTIONS
argument_list|,
name|DISPOSITION_NOTIFICATION_OPTIONS
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|setMessageEntity
argument_list|(
name|request
argument_list|,
name|ediEntity
argument_list|)
expr_stmt|;
comment|// Create response for MDN creation.
name|HttpResponse
name|response
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
literal|200
argument_list|,
literal|"OK"
argument_list|)
decl_stmt|;
name|httpdate
operator|=
name|DATE_GENERATOR
operator|.
name|getCurrentDate
argument_list|()
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|AS2Header
operator|.
name|DATE
argument_list|,
name|httpdate
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|AS2Header
operator|.
name|SERVER
argument_list|,
name|REPORTING_UA
argument_list|)
expr_stmt|;
comment|// Create a receipt for edi message
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extensionFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|extensionFields
operator|.
name|put
argument_list|(
literal|"Original-Recipient"
argument_list|,
literal|"rfc822;"
operator|+
name|AS2_NAME
argument_list|)
expr_stmt|;
name|AS2DispositionModifier
name|dispositionModifier
init|=
name|AS2DispositionModifier
operator|.
name|createWarning
argument_list|(
literal|"AS2 is cool!"
argument_list|)
decl_stmt|;
name|String
index|[]
name|failureFields
init|=
operator|new
name|String
index|[]
block|{
literal|"failure-field-1"
block|}
decl_stmt|;
name|String
index|[]
name|errorFields
init|=
operator|new
name|String
index|[]
block|{
literal|"error-field-1"
block|}
decl_stmt|;
name|String
index|[]
name|warningFields
init|=
operator|new
name|String
index|[]
block|{
literal|"warning-field-1"
block|}
decl_stmt|;
name|DispositionNotificationMultipartReportEntity
name|mdn
init|=
operator|new
name|DispositionNotificationMultipartReportEntity
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|DispositionMode
operator|.
name|AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY
argument_list|,
name|AS2DispositionType
operator|.
name|PROCESSED
argument_list|,
name|dispositionModifier
argument_list|,
name|failureFields
argument_list|,
name|errorFields
argument_list|,
name|warningFields
argument_list|,
name|extensionFields
argument_list|,
literal|null
argument_list|,
literal|"boundary"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Send MDN
name|HttpCoreContext
name|httpContext
init|=
name|mdnManager
operator|.
name|send
argument_list|(
name|mdn
argument_list|,
name|RECIPIENT_DELIVERY_ADDRESS
argument_list|)
decl_stmt|;
name|HttpRequest
name|mndRequest
init|=
name|httpContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|DispositionNotificationMultipartReportEntity
name|reportEntity
init|=
name|HttpMessageUtils
operator|.
name|getEntity
argument_list|(
name|mndRequest
argument_list|,
name|DispositionNotificationMultipartReportEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request does not contain resport"
argument_list|,
name|reportEntity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Report entity contains invalid number of parts"
argument_list|,
literal|2
argument_list|,
name|reportEntity
operator|.
name|getPartCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Report first part is not text entity"
argument_list|,
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TextPlainEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Report second part is not MDN entity"
argument_list|,
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|AS2MessageDispositionNotificationEntity
argument_list|)
expr_stmt|;
name|AS2MessageDispositionNotificationEntity
name|mdnEntity
init|=
operator|(
name|AS2MessageDispositionNotificationEntity
operator|)
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Reporting UA"
argument_list|,
name|REPORTING_UA
argument_list|,
name|mdnEntity
operator|.
name|getReportingUA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Final Recipient"
argument_list|,
name|AS2_NAME
argument_list|,
name|mdnEntity
operator|.
name|getFinalRecipient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Original Message ID"
argument_list|,
name|originalMessageId
argument_list|,
name|mdnEntity
operator|.
name|getOriginalMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Disposition Mode"
argument_list|,
name|DispositionMode
operator|.
name|AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY
argument_list|,
name|mdnEntity
operator|.
name|getDispositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Disposition Type"
argument_list|,
name|AS2DispositionType
operator|.
name|PROCESSED
argument_list|,
name|mdnEntity
operator|.
name|getDispositionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Disposition Modifier"
argument_list|,
name|dispositionModifier
argument_list|,
name|mdnEntity
operator|.
name|getDispositionModifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Unexpected value for Failure Fields"
argument_list|,
name|failureFields
argument_list|,
name|mdnEntity
operator|.
name|getFailureFields
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Unexpected value for Error Fields"
argument_list|,
name|errorFields
argument_list|,
name|mdnEntity
operator|.
name|getErrorFields
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Unexpected value for Warning Fields"
argument_list|,
name|warningFields
argument_list|,
name|mdnEntity
operator|.
name|getWarningFields
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Extension Fields"
argument_list|,
name|extensionFields
argument_list|,
name|mdnEntity
operator|.
name|getExtensionFields
argument_list|()
argument_list|)
expr_stmt|;
name|ReceivedContentMic
name|expectedMic
init|=
name|MicUtils
operator|.
name|createReceivedContentMic
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ReceivedContentMic
name|mdnMic
init|=
name|mdnEntity
operator|.
name|getReceivedContentMic
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for Recieved Content Mic"
argument_list|,
name|expectedMic
operator|.
name|getEncodedMessageDigest
argument_list|()
argument_list|,
name|mdnMic
operator|.
name|getEncodedMessageDigest
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\r\n"
operator|+
name|Util
operator|.
name|printMessage
argument_list|(
name|mndRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

