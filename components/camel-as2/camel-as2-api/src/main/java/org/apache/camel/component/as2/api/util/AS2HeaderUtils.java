begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|Importance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HeaderElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|ParserCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|TokenParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Args
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|CharArrayBuffer
import|;
end_import

begin_class
DECL|class|AS2HeaderUtils
specifier|public
specifier|final
class|class
name|AS2HeaderUtils
block|{
DECL|class|Parameter
specifier|public
specifier|static
class|class
name|Parameter
block|{
DECL|field|attribute
specifier|private
specifier|final
name|String
name|attribute
decl_stmt|;
DECL|field|importance
specifier|private
specifier|final
name|Importance
name|importance
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|String
index|[]
name|values
decl_stmt|;
DECL|method|Parameter (String attribute, String importance, String[] values)
specifier|public
name|Parameter
parameter_list|(
name|String
name|attribute
parameter_list|,
name|String
name|importance
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|attribute
operator|=
name|Args
operator|.
name|notNull
argument_list|(
name|attribute
argument_list|,
literal|"attribute"
argument_list|)
expr_stmt|;
name|this
operator|.
name|importance
operator|=
name|Importance
operator|.
name|get
argument_list|(
name|importance
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
DECL|method|getAttribute ()
specifier|public
name|String
name|getAttribute
parameter_list|()
block|{
return|return
name|attribute
return|;
block|}
DECL|method|getImportance ()
specifier|public
name|Importance
name|getImportance
parameter_list|()
block|{
return|return
name|importance
return|;
block|}
DECL|method|getValues ()
specifier|public
name|String
index|[]
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|importance
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"="
operator|+
name|importance
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|field|PARAM_DELIMITER
specifier|private
specifier|static
specifier|final
name|char
name|PARAM_DELIMITER
init|=
literal|','
decl_stmt|;
DECL|field|ELEM_DELIMITER
specifier|private
specifier|static
specifier|final
name|char
name|ELEM_DELIMITER
init|=
literal|';'
decl_stmt|;
DECL|field|NAME_VALUE_DELIMITER
specifier|private
specifier|static
specifier|final
name|char
name|NAME_VALUE_DELIMITER
init|=
literal|'='
decl_stmt|;
DECL|field|TOKEN_PARSER
specifier|private
specifier|static
specifier|final
name|TokenParser
name|TOKEN_PARSER
init|=
name|TokenParser
operator|.
name|INSTANCE
decl_stmt|;
DECL|field|TOKEN_DELIMS
specifier|private
specifier|static
specifier|final
name|BitSet
name|TOKEN_DELIMS
init|=
name|TokenParser
operator|.
name|INIT_BITSET
argument_list|(
name|NAME_VALUE_DELIMITER
argument_list|,
name|PARAM_DELIMITER
argument_list|,
name|ELEM_DELIMITER
argument_list|)
decl_stmt|;
DECL|field|VALUE_DELIMS
specifier|private
specifier|static
specifier|final
name|BitSet
name|VALUE_DELIMS
init|=
name|TokenParser
operator|.
name|INIT_BITSET
argument_list|(
name|PARAM_DELIMITER
argument_list|,
name|ELEM_DELIMITER
argument_list|)
decl_stmt|;
DECL|method|AS2HeaderUtils ()
specifier|private
name|AS2HeaderUtils
parameter_list|()
block|{     }
DECL|method|createHeader (String headerName, String[]... elements)
specifier|public
specifier|static
name|Header
name|createHeader
parameter_list|(
name|String
name|headerName
parameter_list|,
name|String
index|[]
modifier|...
name|elements
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstElement
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
index|[]
name|element
range|:
name|elements
control|)
block|{
if|if
condition|(
name|element
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|firstElement
condition|)
block|{
name|firstElement
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ELEM_DELIMITER
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|element
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|NAME_VALUE_DELIMITER
operator|+
name|element
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|BasicHeader
name|header
init|=
operator|new
name|BasicHeader
argument_list|(
name|headerName
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|header
return|;
block|}
DECL|method|parseParameter (final CharArrayBuffer buffer, final ParserCursor cursor)
specifier|public
specifier|static
name|Parameter
name|parseParameter
parameter_list|(
specifier|final
name|CharArrayBuffer
name|buffer
parameter_list|,
specifier|final
name|ParserCursor
name|cursor
parameter_list|)
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|buffer
argument_list|,
literal|"Char array buffer"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|cursor
argument_list|,
literal|"Parser cursor"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
name|TOKEN_PARSER
operator|.
name|parseToken
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|,
name|TOKEN_DELIMS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cursor
operator|.
name|atEnd
argument_list|()
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|final
name|int
name|delim
init|=
name|buffer
operator|.
name|charAt
argument_list|(
name|cursor
operator|.
name|getPos
argument_list|()
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|updatePos
argument_list|(
name|cursor
operator|.
name|getPos
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|delim
operator|!=
name|NAME_VALUE_DELIMITER
condition|)
block|{
return|return
operator|new
name|Parameter
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|final
name|String
name|importance
init|=
name|TOKEN_PARSER
operator|.
name|parseValue
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|,
name|VALUE_DELIMS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cursor
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|cursor
operator|.
name|updatePos
argument_list|(
name|cursor
operator|.
name|getPos
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|cursor
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|TOKEN_PARSER
operator|.
name|parseValue
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|,
name|VALUE_DELIMS
argument_list|)
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|cursor
operator|.
name|atEnd
argument_list|()
condition|)
block|{
break|break;
block|}
specifier|final
name|int
name|delimiter
init|=
name|buffer
operator|.
name|charAt
argument_list|(
name|cursor
operator|.
name|getPos
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cursor
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|cursor
operator|.
name|updatePos
argument_list|(
name|cursor
operator|.
name|getPos
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delimiter
operator|==
name|ELEM_DELIMITER
condition|)
block|{
break|break;
block|}
block|}
return|return
operator|new
name|Parameter
argument_list|(
name|name
argument_list|,
name|importance
argument_list|,
name|values
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getBoundaryParameterValue (Header[] headers, String headerName)
specifier|public
specifier|static
name|String
name|getBoundaryParameterValue
parameter_list|(
name|Header
index|[]
name|headers
parameter_list|,
name|String
name|headerName
parameter_list|)
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|headers
argument_list|,
literal|"headers"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|headerName
argument_list|,
literal|"headerName"
argument_list|)
expr_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
if|if
condition|(
name|header
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|headerName
argument_list|)
condition|)
block|{
for|for
control|(
name|HeaderElement
name|headerElement
range|:
name|header
operator|.
name|getElements
argument_list|()
control|)
block|{
for|for
control|(
name|NameValuePair
name|nameValuePair
range|:
name|headerElement
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|nameValuePair
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boundary"
argument_list|)
condition|)
block|{
return|return
name|nameValuePair
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

