begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_class
DECL|class|CanonicalOutputStream
specifier|public
class|class
name|CanonicalOutputStream
extends|extends
name|FilterOutputStream
block|{
DECL|field|newline
specifier|private
specifier|static
name|byte
index|[]
name|newline
decl_stmt|;
DECL|field|lastByte
specifier|private
name|int
name|lastByte
decl_stmt|;
static|static
block|{
name|newline
operator|=
operator|new
name|byte
index|[
literal|2
index|]
expr_stmt|;
name|newline
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
literal|'\r'
expr_stmt|;
name|newline
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
literal|'\n'
expr_stmt|;
block|}
DECL|field|charset
specifier|private
name|String
name|charset
decl_stmt|;
DECL|method|CanonicalOutputStream (OutputStream out, String charset)
specifier|public
name|CanonicalOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|charset
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|charset
operator|=
name|charset
expr_stmt|;
name|lastByte
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|write (int i)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|i
operator|==
literal|'\r'
condition|)
block|{
comment|// convert all carriage-return characters into line-break sequence
name|out
operator|.
name|write
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|'\n'
condition|)
block|{
comment|// convert line-feed character into line-break sequence if not
comment|// preceded by carriage-return
if|if
condition|(
name|lastByte
operator|!=
literal|'\r'
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
comment|// otherwise the line-feed was preceded by carriage-return so ignore it.
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|lastByte
operator|=
name|i
expr_stmt|;
block|}
DECL|method|write (byte[] buf)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|write (byte buf[], int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|off
init|;
name|i
operator|!=
name|off
operator|+
name|len
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|write
argument_list|(
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeln (String s)
specifier|public
name|void
name|writeln
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|s
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
DECL|method|writeln ()
specifier|public
name|void
name|writeln
parameter_list|()
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

