begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * AS2 Server Manager  *  *<p>Receives EDI Messages over HTTP  *  */
end_comment

begin_class
DECL|class|AS2ServerManager
specifier|public
class|class
name|AS2ServerManager
block|{
comment|//
comment|// AS2 HTTP Context Attribute Keys
comment|//
comment|/**      * Prefix for all AS2 HTTP Context Attributes used by the Http Server      * Manager.      */
DECL|field|CAMEL_AS2_SERVER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|CAMEL_AS2_SERVER_PREFIX
init|=
literal|"camel-as2.server"
decl_stmt|;
comment|/**      * The HTTP Context Attribute containing the subject header sent in an AS2      * response.      */
DECL|field|SUBJECT
specifier|public
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
name|CAMEL_AS2_SERVER_PREFIX
operator|+
literal|"subject"
decl_stmt|;
comment|/**      * The HTTP Context Attribute containing the internet e-mail address of      * responding system      */
DECL|field|FROM
specifier|public
specifier|static
specifier|final
name|String
name|FROM
init|=
name|CAMEL_AS2_SERVER_PREFIX
operator|+
literal|"from"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AS2ServerManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|as2ServerConnection
specifier|private
name|AS2ServerConnection
name|as2ServerConnection
decl_stmt|;
DECL|method|AS2ServerManager (AS2ServerConnection as2ServerConnection)
specifier|public
name|AS2ServerManager
parameter_list|(
name|AS2ServerConnection
name|as2ServerConnection
parameter_list|)
block|{
name|this
operator|.
name|as2ServerConnection
operator|=
name|as2ServerConnection
expr_stmt|;
block|}
DECL|method|listen (String requestUriPattern, HttpRequestHandler handler)
specifier|public
name|void
name|listen
parameter_list|(
name|String
name|requestUriPattern
parameter_list|,
name|HttpRequestHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|as2ServerConnection
operator|.
name|listen
argument_list|(
name|requestUriPattern
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to listen for '"
operator|+
name|requestUriPattern
operator|+
literal|"' requests: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to listen for '"
operator|+
name|requestUriPattern
operator|+
literal|"' requests: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|stopListening (String requestUri)
specifier|public
name|void
name|stopListening
parameter_list|(
name|String
name|requestUri
parameter_list|)
block|{
name|as2ServerConnection
operator|.
name|stopListening
argument_list|(
name|requestUri
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMDNResponse (HttpEntityEnclosingRequest request, HttpResponse response, HttpContext httpContext, String subject, String from)
specifier|public
name|void
name|handleMDNResponse
parameter_list|(
name|HttpEntityEnclosingRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|httpContext
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|from
parameter_list|)
throws|throws
name|HttpException
block|{
comment|// Add Context attributes for Response
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|SUBJECT
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|FROM
argument_list|,
name|from
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

