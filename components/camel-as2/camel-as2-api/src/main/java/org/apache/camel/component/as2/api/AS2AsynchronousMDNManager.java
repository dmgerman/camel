begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|DispositionNotificationMultipartReportEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|EntityParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|io
operator|.
name|AS2BHttpClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|protocol
operator|.
name|RequestAsynchronousMDN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|DefaultBHttpClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpProcessorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestConnControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestExpectContinue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestTargetHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|RequestUserAgent
import|;
end_import

begin_class
DECL|class|AS2AsynchronousMDNManager
specifier|public
class|class
name|AS2AsynchronousMDNManager
block|{
comment|//
comment|// AS2 HTTP Context Attribute Keys
comment|//
comment|/**      * Prefix for all AS2 HTTP Context Attributes used by the AS2 Asynchronous MDN      * Manager.      */
DECL|field|CAMEL_AS2_ASYNC_MDN_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|CAMEL_AS2_ASYNC_MDN_PREFIX
init|=
literal|"camel-as2.async-mdn."
decl_stmt|;
comment|/**      * The HTTP Context Attribute containing the HTTP request message      * transporting the EDI message      */
DECL|field|HTTP_REQUEST
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_REQUEST
init|=
name|HttpCoreContext
operator|.
name|HTTP_REQUEST
decl_stmt|;
comment|/**      * The HTTP Context Attribute containing the HTTP response message      * transporting the EDI message      */
DECL|field|HTTP_RESPONSE
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_RESPONSE
init|=
name|HttpCoreContext
operator|.
name|HTTP_RESPONSE
decl_stmt|;
comment|/**      * The HTTP Context Attribute containing the AS2 Connection used to send      * request message.      */
DECL|field|AS2_CONNECTION
specifier|public
specifier|static
specifier|final
name|String
name|AS2_CONNECTION
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"as2-connection"
decl_stmt|;
comment|/**      * The HTTP Context Attribute indicating the target host MDN sent to.      */
DECL|field|TARGET_HOST
specifier|public
specifier|static
specifier|final
name|String
name|TARGET_HOST
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"target-host"
decl_stmt|;
comment|/**      * The HTTP Context Attribute indicating the target port MDN sent to.      */
DECL|field|TARGET_PORT
specifier|public
specifier|static
specifier|final
name|String
name|TARGET_PORT
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"target-port"
decl_stmt|;
comment|/**      * The HTTP Context Attribute containing the subject header sent in MDN.      */
DECL|field|SUBJECT
specifier|public
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"subject"
decl_stmt|;
comment|/**      * The HTTP Context Attribute containing the internet e-mail address of this      * responding system      */
DECL|field|FROM
specifier|public
specifier|static
specifier|final
name|String
name|FROM
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"from"
decl_stmt|;
comment|/**      * The HTTP Context Attribute indicating the AS2 name of MDN recipient.      */
DECL|field|AS2_TO
specifier|public
specifier|static
specifier|final
name|String
name|AS2_TO
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"as2-to"
decl_stmt|;
comment|/**      * The HTTP Context Attribute indicating the AS2 name of MDN sender.      */
DECL|field|AS2_FROM
specifier|public
specifier|static
specifier|final
name|String
name|AS2_FROM
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"as2-from"
decl_stmt|;
comment|/**      * The HTTP Context Attribute indicating the AS2 name of MDN sender.      */
DECL|field|RECIPIENT_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RECIPIENT_ADDRESS
init|=
name|CAMEL_AS2_ASYNC_MDN_PREFIX
operator|+
literal|"recipient-address"
decl_stmt|;
DECL|field|httpProcessor
specifier|private
name|HttpProcessor
name|httpProcessor
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|signingCertificateChain
specifier|private
name|Certificate
index|[]
name|signingCertificateChain
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|signingPrivateKey
specifier|private
name|PrivateKey
name|signingPrivateKey
decl_stmt|;
DECL|method|AS2AsynchronousMDNManager (String as2Version, String userAgent, String senderFQDN, Certificate[] signingCertificateChain, PrivateKey signingPrivateKey)
specifier|public
name|AS2AsynchronousMDNManager
parameter_list|(
name|String
name|as2Version
parameter_list|,
name|String
name|userAgent
parameter_list|,
name|String
name|senderFQDN
parameter_list|,
name|Certificate
index|[]
name|signingCertificateChain
parameter_list|,
name|PrivateKey
name|signingPrivateKey
parameter_list|)
block|{
name|this
operator|.
name|signingCertificateChain
operator|=
name|signingCertificateChain
expr_stmt|;
name|this
operator|.
name|signingPrivateKey
operator|=
name|signingPrivateKey
expr_stmt|;
comment|// Build Processor
name|httpProcessor
operator|=
name|HttpProcessorBuilder
operator|.
name|create
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RequestAsynchronousMDN
argument_list|(
name|as2Version
argument_list|,
name|senderFQDN
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestTargetHost
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestUserAgent
argument_list|(
name|userAgent
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestDate
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestContent
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestConnControl
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RequestExpectContinue
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|send (DispositionNotificationMultipartReportEntity mdn, String targetHostName, Integer targetPortNumber, String requestUri, String subject, String from, String as2From, String as2To)
specifier|public
name|HttpCoreContext
name|send
parameter_list|(
name|DispositionNotificationMultipartReportEntity
name|mdn
parameter_list|,
name|String
name|targetHostName
parameter_list|,
name|Integer
name|targetPortNumber
parameter_list|,
name|String
name|requestUri
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|from
parameter_list|,
name|String
name|as2From
parameter_list|,
name|String
name|as2To
parameter_list|)
throws|throws
name|HttpException
block|{
if|if
condition|(
name|targetHostName
operator|==
literal|null
operator|||
name|targetHostName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|targetHostName
operator|=
literal|"localhost"
expr_stmt|;
block|}
if|if
condition|(
name|targetPortNumber
operator|==
literal|null
operator|||
name|targetPortNumber
operator|<
literal|0
condition|)
block|{
name|targetPortNumber
operator|=
literal|80
expr_stmt|;
block|}
name|AS2BHttpClientConnection
name|httpConnection
init|=
operator|new
name|AS2BHttpClientConnection
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpHost
name|targetHost
init|=
operator|new
name|HttpHost
argument_list|(
name|targetHostName
argument_list|,
name|targetPortNumber
argument_list|)
decl_stmt|;
comment|// Create socket and bind to connection;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
name|targetHost
operator|.
name|getHostName
argument_list|()
argument_list|,
name|targetHost
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|httpConnection
operator|.
name|bind
argument_list|(
name|socket
argument_list|)
expr_stmt|;
comment|// Add Context attributes
name|HttpCoreContext
name|httpContext
init|=
name|HttpCoreContext
operator|.
name|create
argument_list|()
decl_stmt|;
name|httpContext
operator|.
name|setTargetHost
argument_list|(
name|targetHost
argument_list|)
expr_stmt|;
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|AS2AsynchronousMDNManager
operator|.
name|SUBJECT
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|AS2AsynchronousMDNManager
operator|.
name|FROM
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|AS2AsynchronousMDNManager
operator|.
name|AS2_FROM
argument_list|,
name|as2From
argument_list|)
expr_stmt|;
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|AS2AsynchronousMDNManager
operator|.
name|AS2_TO
argument_list|,
name|as2To
argument_list|)
expr_stmt|;
name|BasicHttpEntityEnclosingRequest
name|request
init|=
operator|new
name|BasicHttpEntityEnclosingRequest
argument_list|(
literal|"POST"
argument_list|,
name|requestUri
argument_list|)
decl_stmt|;
name|request
operator|.
name|setHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|,
name|mdn
operator|.
name|getMainMessageContentType
argument_list|()
argument_list|)
expr_stmt|;
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|HttpCoreContext
operator|.
name|HTTP_REQUEST
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|mdn
operator|.
name|setMainBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|setMessageEntity
argument_list|(
name|request
argument_list|,
name|mdn
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
decl_stmt|;
try|try
block|{
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|AS2_CONNECTION
argument_list|,
name|httpConnection
argument_list|)
expr_stmt|;
name|response
operator|=
name|send
argument_list|(
name|httpConnection
argument_list|,
name|request
argument_list|,
name|httpContext
argument_list|)
expr_stmt|;
name|EntityParser
operator|.
name|parseAS2MessageEntity
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to send http request message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|httpContext
operator|.
name|setAttribute
argument_list|(
name|HTTP_RESPONSE
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|httpContext
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"failed to send MDN"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|httpConnection
operator|.
name|flush
argument_list|()
expr_stmt|;
name|httpConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to flush and close connection"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|send (DefaultBHttpClientConnection httpConnection, HttpRequest request, HttpCoreContext httpContext)
specifier|private
name|HttpResponse
name|send
parameter_list|(
name|DefaultBHttpClientConnection
name|httpConnection
parameter_list|,
name|HttpRequest
name|request
parameter_list|,
name|HttpCoreContext
name|httpContext
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
comment|// Execute Request
name|HttpRequestExecutor
name|httpexecutor
init|=
operator|new
name|HttpRequestExecutor
argument_list|()
decl_stmt|;
name|httpexecutor
operator|.
name|preProcess
argument_list|(
name|request
argument_list|,
name|httpProcessor
argument_list|,
name|httpContext
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|httpexecutor
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|httpConnection
argument_list|,
name|httpContext
argument_list|)
decl_stmt|;
name|httpexecutor
operator|.
name|postProcess
argument_list|(
name|response
argument_list|,
name|httpProcessor
argument_list|,
name|httpContext
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

