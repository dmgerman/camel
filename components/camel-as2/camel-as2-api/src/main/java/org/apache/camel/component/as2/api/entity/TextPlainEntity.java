begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api.entity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|CanonicalOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HeaderIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Args
import|;
end_import

begin_class
DECL|class|TextPlainEntity
specifier|public
class|class
name|TextPlainEntity
extends|extends
name|MimeEntity
block|{
DECL|field|content
specifier|private
name|String
name|content
decl_stmt|;
DECL|method|TextPlainEntity (String content, String charset, String contentTransferEncoding, boolean isMainBody)
specifier|public
name|TextPlainEntity
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|charset
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|,
name|boolean
name|isMainBody
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|Args
operator|.
name|notNull
argument_list|(
name|content
argument_list|,
literal|"Content"
argument_list|)
expr_stmt|;
name|setContentType
argument_list|(
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|TEXT_PLAIN
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
name|setContentTransferEncoding
argument_list|(
name|contentTransferEncoding
argument_list|)
expr_stmt|;
name|setMainBody
argument_list|(
name|isMainBody
argument_list|)
expr_stmt|;
block|}
DECL|method|getText ()
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|content
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo (OutputStream outstream)
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|outstream
parameter_list|)
throws|throws
name|IOException
block|{
name|NoCloseOutputStream
name|ncos
init|=
operator|new
name|NoCloseOutputStream
argument_list|(
name|outstream
argument_list|)
decl_stmt|;
try|try
init|(
name|CanonicalOutputStream
name|canonicalOutstream
init|=
operator|new
name|CanonicalOutputStream
argument_list|(
name|ncos
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
init|)
block|{
comment|// Write out mime part headers if this is not the main body of message.
if|if
condition|(
operator|!
name|isMainBody
argument_list|()
condition|)
block|{
name|HeaderIterator
name|it
init|=
name|headerIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Header
name|header
init|=
name|it
operator|.
name|nextHeader
argument_list|()
decl_stmt|;
name|canonicalOutstream
operator|.
name|writeln
argument_list|(
name|header
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|canonicalOutstream
operator|.
name|writeln
argument_list|()
expr_stmt|;
comment|// ensure empty line between headers and body; RFC2046 - 5.1.1
block|}
comment|// Write out content
name|canonicalOutstream
operator|.
name|write
argument_list|(
name|content
operator|.
name|getBytes
argument_list|(
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

