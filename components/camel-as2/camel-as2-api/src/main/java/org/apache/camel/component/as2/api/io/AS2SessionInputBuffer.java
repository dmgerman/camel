begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api.io
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CoderResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|MessageConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|MessageConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|io
operator|.
name|HttpTransportMetricsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|io
operator|.
name|BufferInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|io
operator|.
name|HttpTransportMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|io
operator|.
name|SessionInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HTTP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Args
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Asserts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|ByteArrayBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|CharArrayBuffer
import|;
end_import

begin_class
DECL|class|AS2SessionInputBuffer
specifier|public
class|class
name|AS2SessionInputBuffer
implements|implements
name|SessionInputBuffer
implements|,
name|BufferInfo
block|{
DECL|field|metrics
specifier|private
specifier|final
name|HttpTransportMetricsImpl
name|metrics
decl_stmt|;
DECL|field|buffer
specifier|private
specifier|final
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|linebuffer
specifier|private
specifier|final
name|ByteArrayBuffer
name|linebuffer
decl_stmt|;
DECL|field|minChunkLimit
specifier|private
specifier|final
name|int
name|minChunkLimit
decl_stmt|;
DECL|field|constraints
specifier|private
specifier|final
name|MessageConstraints
name|constraints
decl_stmt|;
DECL|field|decoder
specifier|private
name|CharsetDecoder
name|decoder
decl_stmt|;
DECL|field|transferEncoding
specifier|private
name|String
name|transferEncoding
decl_stmt|;
DECL|field|instream
specifier|private
name|InputStream
name|instream
decl_stmt|;
DECL|field|bufferpos
specifier|private
name|int
name|bufferpos
decl_stmt|;
DECL|field|bufferlen
specifier|private
name|int
name|bufferlen
decl_stmt|;
DECL|field|cbuf
specifier|private
name|CharBuffer
name|cbuf
decl_stmt|;
DECL|method|AS2SessionInputBuffer (final HttpTransportMetricsImpl metrics, final int buffersize, final int minChunkLimit, MessageConstraints constraints)
specifier|public
name|AS2SessionInputBuffer
parameter_list|(
specifier|final
name|HttpTransportMetricsImpl
name|metrics
parameter_list|,
specifier|final
name|int
name|buffersize
parameter_list|,
specifier|final
name|int
name|minChunkLimit
parameter_list|,
name|MessageConstraints
name|constraints
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|Args
operator|.
name|notNull
argument_list|(
name|metrics
argument_list|,
literal|"metrics"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|positive
argument_list|(
name|buffersize
argument_list|,
literal|"buffersize"
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
name|buffersize
index|]
expr_stmt|;
name|this
operator|.
name|bufferpos
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bufferlen
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|minChunkLimit
operator|=
name|minChunkLimit
operator|>=
literal|0
condition|?
name|minChunkLimit
else|:
literal|512
expr_stmt|;
name|this
operator|.
name|constraints
operator|=
name|constraints
operator|!=
literal|null
condition|?
name|constraints
else|:
name|MessageConstraints
operator|.
name|DEFAULT
expr_stmt|;
name|this
operator|.
name|linebuffer
operator|=
operator|new
name|ByteArrayBuffer
argument_list|(
name|buffersize
argument_list|)
expr_stmt|;
block|}
DECL|method|AS2SessionInputBuffer (final HttpTransportMetricsImpl metrics, final int buffersize)
specifier|public
name|AS2SessionInputBuffer
parameter_list|(
specifier|final
name|HttpTransportMetricsImpl
name|metrics
parameter_list|,
specifier|final
name|int
name|buffersize
parameter_list|)
block|{
name|this
argument_list|(
name|metrics
argument_list|,
name|buffersize
argument_list|,
name|buffersize
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getCharsetDecoder ()
specifier|public
name|CharsetDecoder
name|getCharsetDecoder
parameter_list|()
block|{
return|return
name|decoder
return|;
block|}
DECL|method|setCharsetDecoder (CharsetDecoder chardecoder)
specifier|public
name|void
name|setCharsetDecoder
parameter_list|(
name|CharsetDecoder
name|chardecoder
parameter_list|)
block|{
name|this
operator|.
name|decoder
operator|=
name|chardecoder
expr_stmt|;
block|}
DECL|method|getTransferEncoding ()
specifier|public
name|String
name|getTransferEncoding
parameter_list|()
block|{
return|return
name|transferEncoding
return|;
block|}
DECL|method|setTransferEncoding (String transferEncoding)
specifier|public
name|void
name|setTransferEncoding
parameter_list|(
name|String
name|transferEncoding
parameter_list|)
block|{
name|this
operator|.
name|transferEncoding
operator|=
name|transferEncoding
expr_stmt|;
block|}
DECL|method|bind (final InputStream instream)
specifier|public
name|void
name|bind
parameter_list|(
specifier|final
name|InputStream
name|instream
parameter_list|)
block|{
name|this
operator|.
name|instream
operator|=
name|instream
expr_stmt|;
block|}
DECL|method|isBound ()
specifier|public
name|boolean
name|isBound
parameter_list|()
block|{
return|return
name|this
operator|.
name|instream
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|length ()
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|this
operator|.
name|bufferlen
operator|-
name|this
operator|.
name|bufferpos
return|;
block|}
annotation|@
name|Override
DECL|method|capacity ()
specifier|public
name|int
name|capacity
parameter_list|()
block|{
return|return
name|this
operator|.
name|buffer
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|capacity
argument_list|()
operator|-
name|length
argument_list|()
return|;
block|}
DECL|method|fillBuffer ()
specifier|public
name|int
name|fillBuffer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// compact the buffer if necessary
if|if
condition|(
name|this
operator|.
name|bufferpos
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|len
init|=
name|this
operator|.
name|bufferlen
operator|-
name|this
operator|.
name|bufferpos
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|this
operator|.
name|bufferpos
argument_list|,
name|this
operator|.
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bufferpos
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|bufferlen
operator|=
name|len
expr_stmt|;
block|}
specifier|final
name|int
name|l
decl_stmt|;
specifier|final
name|int
name|off
init|=
name|this
operator|.
name|bufferlen
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|this
operator|.
name|buffer
operator|.
name|length
operator|-
name|off
decl_stmt|;
name|l
operator|=
name|streamRead
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|this
operator|.
name|bufferlen
operator|=
name|off
operator|+
name|l
expr_stmt|;
name|this
operator|.
name|metrics
operator|.
name|incrementBytesTransferred
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
block|}
DECL|method|hasBufferedData ()
specifier|public
name|boolean
name|hasBufferedData
parameter_list|()
block|{
return|return
name|this
operator|.
name|bufferpos
operator|<
name|this
operator|.
name|bufferlen
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|hasBufferedData
argument_list|()
condition|)
block|{
specifier|final
name|int
name|chunk
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|this
operator|.
name|bufferlen
operator|-
name|this
operator|.
name|bufferpos
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|this
operator|.
name|bufferpos
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferpos
operator|+=
name|chunk
expr_stmt|;
return|return
name|chunk
return|;
block|}
comment|// If the remaining capacity is big enough, read directly from the
comment|// underlying input stream bypassing the buffer.
if|if
condition|(
name|len
operator|>
name|this
operator|.
name|minChunkLimit
condition|)
block|{
specifier|final
name|int
name|read
init|=
name|streamRead
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|metrics
operator|.
name|incrementBytesTransferred
argument_list|(
name|read
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
else|else
block|{
comment|// otherwise read to the buffer first
while|while
condition|(
operator|!
name|hasBufferedData
argument_list|()
condition|)
block|{
specifier|final
name|int
name|noRead
init|=
name|fillBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|noRead
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|final
name|int
name|chunk
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|this
operator|.
name|bufferlen
operator|-
name|this
operator|.
name|bufferpos
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|this
operator|.
name|bufferpos
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferpos
operator|+=
name|chunk
expr_stmt|;
return|return
name|chunk
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|read (byte[] b)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|noRead
decl_stmt|;
while|while
condition|(
operator|!
name|hasBufferedData
argument_list|()
condition|)
block|{
name|noRead
operator|=
name|fillBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|noRead
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|this
operator|.
name|buffer
index|[
name|this
operator|.
name|bufferpos
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
annotation|@
name|Override
DECL|method|readLine (CharArrayBuffer charbuffer)
specifier|public
name|int
name|readLine
parameter_list|(
name|CharArrayBuffer
name|charbuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|charbuffer
argument_list|,
literal|"Char array buffer"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxLineLen
init|=
name|this
operator|.
name|constraints
operator|.
name|getMaxLineLength
argument_list|()
decl_stmt|;
name|int
name|noRead
init|=
literal|0
decl_stmt|;
name|boolean
name|retry
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|retry
condition|)
block|{
comment|// attempt to find end of line (LF)
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|this
operator|.
name|bufferpos
init|;
name|i
operator|<
name|this
operator|.
name|bufferlen
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|this
operator|.
name|buffer
index|[
name|i
index|]
operator|==
name|HTTP
operator|.
name|LF
condition|)
block|{
name|pos
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|maxLineLen
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|currentLen
init|=
name|this
operator|.
name|linebuffer
operator|.
name|length
argument_list|()
operator|+
operator|(
name|pos
operator|>
literal|0
condition|?
name|pos
else|:
name|this
operator|.
name|bufferlen
operator|)
operator|-
name|this
operator|.
name|bufferpos
decl_stmt|;
if|if
condition|(
name|currentLen
operator|>=
name|maxLineLen
condition|)
block|{
throw|throw
operator|new
name|MessageConstraintException
argument_list|(
literal|"Maximum line length limit exceeded"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// end of line found.
if|if
condition|(
name|this
operator|.
name|linebuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the entire line is preset in the read buffer
return|return
name|lineFromReadBuffer
argument_list|(
name|charbuffer
argument_list|,
name|pos
argument_list|)
return|;
block|}
name|retry
operator|=
literal|false
expr_stmt|;
name|addTransferDecodedBytesToLinebuffer
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// end of line not found
if|if
condition|(
name|hasBufferedData
argument_list|()
condition|)
block|{
name|addTransferDecodedBytesToLinebuffer
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
name|noRead
operator|=
name|fillBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|noRead
operator|==
operator|-
literal|1
condition|)
block|{
name|retry
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|noRead
operator|==
operator|-
literal|1
operator|&&
name|this
operator|.
name|linebuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// indicate the end of stream
return|return
operator|-
literal|1
return|;
block|}
return|return
name|lineFromLineBuffer
argument_list|(
name|charbuffer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readLine ()
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|CharArrayBuffer
name|charbuffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
literal|64
argument_list|)
decl_stmt|;
specifier|final
name|int
name|l
init|=
name|readLine
argument_list|(
name|charbuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|charbuffer
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|isDataAvailable (int timeout)
specifier|public
name|boolean
name|isDataAvailable
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|hasBufferedData
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMetrics ()
specifier|public
name|HttpTransportMetrics
name|getMetrics
parameter_list|()
block|{
return|return
name|this
operator|.
name|metrics
return|;
block|}
DECL|method|streamRead (final byte[] b, final int off, final int len)
specifier|private
name|int
name|streamRead
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|Asserts
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|instream
argument_list|,
literal|"Input stream"
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|instream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|method|lineFromLineBuffer (final CharArrayBuffer charbuffer)
specifier|private
name|int
name|lineFromLineBuffer
parameter_list|(
specifier|final
name|CharArrayBuffer
name|charbuffer
parameter_list|)
throws|throws
name|IOException
block|{
comment|// discard LF if found
name|int
name|len
init|=
name|this
operator|.
name|linebuffer
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|linebuffer
operator|.
name|byteAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
operator|==
name|HTTP
operator|.
name|LF
condition|)
block|{
name|len
operator|--
expr_stmt|;
block|}
comment|// discard CR if found
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|linebuffer
operator|.
name|byteAt
argument_list|(
name|len
operator|-
literal|1
argument_list|)
operator|==
name|HTTP
operator|.
name|CR
condition|)
block|{
name|len
operator|--
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|this
operator|.
name|decoder
operator|==
literal|null
condition|)
block|{
name|charbuffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|linebuffer
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ByteBuffer
name|bbuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|this
operator|.
name|linebuffer
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|len
operator|=
name|appendDecoded
argument_list|(
name|charbuffer
argument_list|,
name|bbuf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|linebuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|len
return|;
block|}
DECL|method|lineFromReadBuffer (final CharArrayBuffer charbuffer, final int position)
specifier|private
name|int
name|lineFromReadBuffer
parameter_list|(
specifier|final
name|CharArrayBuffer
name|charbuffer
parameter_list|,
specifier|final
name|int
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|pos
init|=
name|position
decl_stmt|;
specifier|final
name|int
name|off
init|=
name|this
operator|.
name|bufferpos
decl_stmt|;
name|int
name|len
decl_stmt|;
name|this
operator|.
name|bufferpos
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|pos
operator|>
name|off
operator|&&
name|this
operator|.
name|buffer
index|[
name|pos
operator|-
literal|1
index|]
operator|==
name|HTTP
operator|.
name|CR
condition|)
block|{
comment|// skip CR if found
name|pos
operator|--
expr_stmt|;
block|}
name|len
operator|=
name|pos
operator|-
name|off
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|decoder
operator|==
literal|null
condition|)
block|{
name|charbuffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|ByteBuffer
name|bbuf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|len
operator|=
name|appendDecoded
argument_list|(
name|charbuffer
argument_list|,
name|bbuf
argument_list|)
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
DECL|method|appendDecoded (final CharArrayBuffer charbuffer, final ByteBuffer bbuf)
specifier|private
name|int
name|appendDecoded
parameter_list|(
specifier|final
name|CharArrayBuffer
name|charbuffer
parameter_list|,
specifier|final
name|ByteBuffer
name|bbuf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|bbuf
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|this
operator|.
name|cbuf
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|cbuf
operator|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|decoder
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bbuf
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
specifier|final
name|CoderResult
name|result
init|=
name|this
operator|.
name|decoder
operator|.
name|decode
argument_list|(
name|bbuf
argument_list|,
name|this
operator|.
name|cbuf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|len
operator|+=
name|handleDecodingResult
argument_list|(
name|result
argument_list|,
name|charbuffer
argument_list|,
name|bbuf
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CoderResult
name|result
init|=
name|this
operator|.
name|decoder
operator|.
name|flush
argument_list|(
name|this
operator|.
name|cbuf
argument_list|)
decl_stmt|;
name|len
operator|+=
name|handleDecodingResult
argument_list|(
name|result
argument_list|,
name|charbuffer
argument_list|,
name|bbuf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cbuf
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|len
return|;
block|}
DECL|method|handleDecodingResult (final CoderResult result, final CharArrayBuffer charbuffer, final ByteBuffer bbuf)
specifier|private
name|int
name|handleDecodingResult
parameter_list|(
specifier|final
name|CoderResult
name|result
parameter_list|,
specifier|final
name|CharArrayBuffer
name|charbuffer
parameter_list|,
specifier|final
name|ByteBuffer
name|bbuf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|.
name|isError
argument_list|()
condition|)
block|{
name|result
operator|.
name|throwException
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|cbuf
operator|.
name|flip
argument_list|()
expr_stmt|;
specifier|final
name|int
name|len
init|=
name|this
operator|.
name|cbuf
operator|.
name|remaining
argument_list|()
decl_stmt|;
while|while
condition|(
name|this
operator|.
name|cbuf
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|charbuffer
operator|.
name|append
argument_list|(
name|this
operator|.
name|cbuf
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cbuf
operator|.
name|compact
argument_list|()
expr_stmt|;
return|return
name|len
return|;
block|}
DECL|method|addTransferDecodedBytesToLinebuffer (int pos)
specifier|private
name|void
name|addTransferDecodedBytesToLinebuffer
parameter_list|(
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|len
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|len
operator|=
name|pos
operator|+
literal|1
operator|-
name|this
operator|.
name|bufferpos
expr_stmt|;
block|}
else|else
block|{
name|len
operator|=
name|this
operator|.
name|bufferlen
operator|-
name|this
operator|.
name|bufferpos
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|this
operator|.
name|buffer
argument_list|,
name|this
operator|.
name|bufferpos
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|data
operator|=
name|EntityUtils
operator|.
name|decode
argument_list|(
name|data
argument_list|,
name|transferEncoding
argument_list|)
expr_stmt|;
comment|//
name|this
operator|.
name|linebuffer
operator|.
name|append
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|bufferpos
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to decode transfer encoding"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

