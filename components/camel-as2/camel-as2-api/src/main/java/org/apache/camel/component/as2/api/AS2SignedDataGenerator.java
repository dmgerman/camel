begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1ObjectIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|CMSSignedDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInfoGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|SignerInformation
import|;
end_import

begin_class
DECL|class|AS2SignedDataGenerator
specifier|public
class|class
name|AS2SignedDataGenerator
extends|extends
name|CMSSignedDataGenerator
block|{
DECL|field|STANDARD_MICALGS
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|ASN1ObjectIdentifier
argument_list|,
name|String
argument_list|>
name|STANDARD_MICALGS
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|ASN1ObjectIdentifier
argument_list|,
name|String
argument_list|>
name|stdMicAlgs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|MD5
argument_list|,
literal|"md5"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|SHA1
argument_list|,
literal|"sha-1"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|SHA224
argument_list|,
literal|"sha-224"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|SHA256
argument_list|,
literal|"sha-256"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|SHA384
argument_list|,
literal|"sha-384"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|SHA512
argument_list|,
literal|"sha-512"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|GOST3411
argument_list|,
literal|"gostr3411-94"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|GOST3411_2012_256
argument_list|,
literal|"gostr3411-2012-256"
argument_list|)
expr_stmt|;
name|stdMicAlgs
operator|.
name|put
argument_list|(
name|CMSAlgorithm
operator|.
name|GOST3411_2012_512
argument_list|,
literal|"gostr3411-2012-512"
argument_list|)
expr_stmt|;
name|STANDARD_MICALGS
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|stdMicAlgs
argument_list|)
expr_stmt|;
block|}
comment|/**      * Signing algorithms for DSA keys in order of preference      */
DECL|field|DSA_SIGNING_ALGORITHMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DSA_SIGNING_ALGORITHMS
init|=
block|{
literal|"SHA512WITHDSA"
block|,
literal|"SHA384WITHDSA"
block|,
literal|"SHA256WITHDSA"
block|,
literal|"SHA224WITHDSA"
block|,
literal|"SHA1WITHDSA"
block|,     }
decl_stmt|;
comment|/**      * Signing algorithms for RSA keys in order of preference      */
DECL|field|RSA_SIGNING_ALGORITHMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|RSA_SIGNING_ALGORITHMS
init|=
block|{
literal|"SHA512WITHRSA"
block|,
literal|"SHA384WITHRSA"
block|,
literal|"SHA256WITHRSA"
block|,
literal|"SHA224WITHRSA"
block|,
literal|"SHA1WITHRSA"
block|,
literal|"MD5WITHRSA"
block|,
literal|"MD2WITHRSA"
block|,     }
decl_stmt|;
comment|/**      * Signing algorithms for EC keys in order of preference      */
DECL|field|EC_SIGNING_ALGORITHMS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|EC_SIGNING_ALGORITHMS
init|=
block|{
literal|"SHA512WITHECDSA"
block|,
literal|"SHA384WITHECDSA"
block|,
literal|"SHA256WITHECDSA"
block|,
literal|"SHA224WITHECDSA"
block|,
literal|"SHA1WITHECDSA"
block|,     }
decl_stmt|;
DECL|method|AS2SignedDataGenerator ()
specifier|public
name|AS2SignedDataGenerator
parameter_list|()
block|{     }
comment|/**      * Creates a<code>multipart/signed</code> content type containing the algorithms used by this generator.      *      * @param boundary - boundary to use to demarcate content.      * @return A<code>multipart/signed</code> content type      */
DECL|method|createMultipartSignedContentType (String boundary)
specifier|public
name|ContentType
name|createMultipartSignedContentType
parameter_list|(
name|String
name|boundary
parameter_list|)
block|{
name|StringBuffer
name|header
init|=
operator|new
name|StringBuffer
argument_list|(
name|AS2MediaType
operator|.
name|MULTIPART_SIGNED
argument_list|)
decl_stmt|;
name|header
operator|.
name|append
argument_list|(
literal|"; boundary="
operator|+
name|boundary
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|micAlgSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Collect algorithm names used by pre-calculated signers
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Iterator
name|it
init|=
name|_signers
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SignerInformation
name|signer
init|=
operator|(
name|SignerInformation
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ASN1ObjectIdentifier
name|digestOID
init|=
name|signer
operator|.
name|getDigestAlgorithmID
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|String
name|micAlg
init|=
name|STANDARD_MICALGS
operator|.
name|get
argument_list|(
name|digestOID
argument_list|)
decl_stmt|;
if|if
condition|(
name|micAlg
operator|==
literal|null
condition|)
block|{
name|micAlgSet
operator|.
name|add
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|micAlgSet
operator|.
name|add
argument_list|(
name|micAlg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Collect algorithm names used by signer generators
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Iterator
name|it
init|=
name|signerGens
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SignerInfoGenerator
name|signerInfoGen
init|=
operator|(
name|SignerInfoGenerator
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ASN1ObjectIdentifier
name|digestOID
init|=
name|signerInfoGen
operator|.
name|getDigestAlgorithm
argument_list|()
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|String
name|micAlg
init|=
name|STANDARD_MICALGS
operator|.
name|get
argument_list|(
name|digestOID
argument_list|)
decl_stmt|;
if|if
condition|(
name|micAlg
operator|==
literal|null
condition|)
block|{
name|micAlgSet
operator|.
name|add
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|micAlgSet
operator|.
name|add
argument_list|(
name|micAlg
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add algorithm names to multipart signed header.
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|micAlg
range|:
name|micAlgSet
control|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|micAlgSet
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|header
operator|.
name|append
argument_list|(
literal|"; micalg=\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|header
operator|.
name|append
argument_list|(
literal|"; micalg="
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|header
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|append
argument_list|(
name|micAlg
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|micAlgSet
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|header
operator|.
name|append
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ContentType
operator|.
name|parse
argument_list|(
name|header
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getSupportedSignatureAlgorithmNamesForKey (Key key)
specifier|public
specifier|static
name|String
index|[]
name|getSupportedSignatureAlgorithmNamesForKey
parameter_list|(
name|Key
name|key
parameter_list|)
block|{
switch|switch
condition|(
name|key
operator|.
name|getAlgorithm
argument_list|()
condition|)
block|{
case|case
literal|"DSA"
case|:
return|return
name|DSA_SIGNING_ALGORITHMS
return|;
case|case
literal|"RSA"
case|:
return|return
name|RSA_SIGNING_ALGORITHMS
return|;
case|case
literal|"EC"
case|:
return|return
name|EC_SIGNING_ALGORITHMS
return|;
default|default:
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
block|}
end_class

end_unit

