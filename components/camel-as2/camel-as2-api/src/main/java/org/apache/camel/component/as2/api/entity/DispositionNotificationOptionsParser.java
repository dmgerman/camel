begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api.entity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|AS2HeaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|AS2HeaderUtils
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|ParserCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Args
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|CharArrayBuffer
import|;
end_import

begin_class
DECL|class|DispositionNotificationOptionsParser
specifier|public
class|class
name|DispositionNotificationOptionsParser
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|DispositionNotificationOptionsParser
name|INSTANCE
init|=
operator|new
name|DispositionNotificationOptionsParser
argument_list|()
decl_stmt|;
DECL|field|SIGNED_RECEIPT_PROTOCOL_ATTR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SIGNED_RECEIPT_PROTOCOL_ATTR_NAME
init|=
literal|"signed-receipt-protocol"
decl_stmt|;
DECL|field|SIGNED_RECEIPT_MICALG_ATTR_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SIGNED_RECEIPT_MICALG_ATTR_NAME
init|=
literal|"signed-receipt-micalg"
decl_stmt|;
DECL|method|parseDispositionNotificationOptions (final String value, DispositionNotificationOptionsParser parser)
specifier|public
specifier|static
name|DispositionNotificationOptions
name|parseDispositionNotificationOptions
parameter_list|(
specifier|final
name|String
name|value
parameter_list|,
name|DispositionNotificationOptionsParser
name|parser
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|DispositionNotificationOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|final
name|CharArrayBuffer
name|buffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
specifier|final
name|ParserCursor
name|cursor
init|=
operator|new
name|ParserCursor
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|parser
operator|!=
literal|null
condition|?
name|parser
else|:
name|DispositionNotificationOptionsParser
operator|.
name|INSTANCE
operator|)
operator|.
name|parseDispositionNotificationOptions
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|)
return|;
block|}
DECL|method|parseDispositionNotificationOptions (final CharArrayBuffer buffer, final ParserCursor cursor)
specifier|public
name|DispositionNotificationOptions
name|parseDispositionNotificationOptions
parameter_list|(
specifier|final
name|CharArrayBuffer
name|buffer
parameter_list|,
specifier|final
name|ParserCursor
name|cursor
parameter_list|)
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|buffer
argument_list|,
literal|"buffer"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|cursor
argument_list|,
literal|"cursor"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Parameter
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|cursor
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|Parameter
name|parameter
init|=
name|AS2HeaderUtils
operator|.
name|parseParameter
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|parameter
operator|.
name|getAttribute
argument_list|()
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
name|Parameter
name|signedReceiptProtocolParameter
init|=
name|parameters
operator|.
name|get
argument_list|(
name|SIGNED_RECEIPT_PROTOCOL_ATTR_NAME
argument_list|)
decl_stmt|;
name|Parameter
name|signedReceiptMicalgParameter
init|=
name|parameters
operator|.
name|get
argument_list|(
name|SIGNED_RECEIPT_MICALG_ATTR_NAME
argument_list|)
decl_stmt|;
return|return
operator|new
name|DispositionNotificationOptions
argument_list|(
name|signedReceiptProtocolParameter
argument_list|,
name|signedReceiptMicalgParameter
argument_list|)
return|;
block|}
block|}
end_class

end_unit

