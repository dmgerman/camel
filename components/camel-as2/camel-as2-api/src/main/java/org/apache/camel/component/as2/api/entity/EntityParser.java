begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api.entity
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|io
operator|.
name|AS2SessionInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|AS2HeaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|ContentTypeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|DispositionNotificationContentUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|HttpMessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|io
operator|.
name|AbstractMessageParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|io
operator|.
name|HttpTransportMetricsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|LineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|ParserCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Args
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|CharArrayBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|EntityParser
specifier|public
specifier|final
class|class
name|EntityParser
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EntityParser
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
DECL|field|APPLICATION_EDI_CONTENT_TYPE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_EDI_CONTENT_TYPE_PREFIX
init|=
literal|"application/edi"
decl_stmt|;
DECL|method|EntityParser ()
specifier|private
name|EntityParser
parameter_list|()
block|{     }
DECL|method|isBoundaryCloseDelimiter (final CharArrayBuffer buffer, ParserCursor cursor, String boundary)
specifier|public
specifier|static
name|boolean
name|isBoundaryCloseDelimiter
parameter_list|(
specifier|final
name|CharArrayBuffer
name|buffer
parameter_list|,
name|ParserCursor
name|cursor
parameter_list|,
name|String
name|boundary
parameter_list|)
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|buffer
argument_list|,
literal|"Buffer"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|boundary
argument_list|,
literal|"Boundary"
argument_list|)
expr_stmt|;
name|String
name|boundaryCloseDelimiter
init|=
literal|"--"
operator|+
name|boundary
operator|+
literal|"--"
decl_stmt|;
comment|// boundary
comment|// close-delimiter
comment|// - RFC2046
comment|// 5.1.1
if|if
condition|(
name|cursor
operator|==
literal|null
condition|)
block|{
name|cursor
operator|=
operator|new
name|ParserCursor
argument_list|(
literal|0
argument_list|,
name|boundaryCloseDelimiter
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|indexFrom
init|=
name|cursor
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|int
name|indexTo
init|=
name|cursor
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|indexFrom
operator|+
name|boundaryCloseDelimiter
operator|.
name|length
argument_list|()
operator|)
operator|>
name|indexTo
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|indexFrom
init|;
name|i
operator|<
name|indexTo
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|boundaryCloseDelimiter
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|isBoundaryDelimiter (final CharArrayBuffer buffer, ParserCursor cursor, String boundary)
specifier|public
specifier|static
name|boolean
name|isBoundaryDelimiter
parameter_list|(
specifier|final
name|CharArrayBuffer
name|buffer
parameter_list|,
name|ParserCursor
name|cursor
parameter_list|,
name|String
name|boundary
parameter_list|)
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|buffer
argument_list|,
literal|"Buffer"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|boundary
argument_list|,
literal|"Boundary"
argument_list|)
expr_stmt|;
name|String
name|boundaryDelimiter
init|=
literal|"--"
operator|+
name|boundary
decl_stmt|;
comment|// boundary delimiter -
comment|// RFC2046 5.1.1
if|if
condition|(
name|cursor
operator|==
literal|null
condition|)
block|{
name|cursor
operator|=
operator|new
name|ParserCursor
argument_list|(
literal|0
argument_list|,
name|boundaryDelimiter
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|indexFrom
init|=
name|cursor
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|int
name|indexTo
init|=
name|cursor
operator|.
name|getUpperBound
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|indexFrom
operator|+
name|boundaryDelimiter
operator|.
name|length
argument_list|()
operator|)
operator|>
name|indexTo
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|indexFrom
init|;
name|i
operator|<
name|indexTo
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|buffer
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|boundaryDelimiter
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|skipPreambleAndStartBoundary (AS2SessionInputBuffer inbuffer, String boundary)
specifier|public
specifier|static
name|void
name|skipPreambleAndStartBoundary
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|)
throws|throws
name|HttpException
block|{
name|boolean
name|foundStartBoundary
decl_stmt|;
try|try
block|{
name|foundStartBoundary
operator|=
literal|false
expr_stmt|;
name|CharArrayBuffer
name|lineBuffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
while|while
condition|(
name|inbuffer
operator|.
name|readLine
argument_list|(
name|lineBuffer
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|ParserCursor
name|cursor
init|=
operator|new
name|ParserCursor
argument_list|(
literal|0
argument_list|,
name|lineBuffer
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBoundaryDelimiter
argument_list|(
name|lineBuffer
argument_list|,
name|cursor
argument_list|,
name|boundary
argument_list|)
condition|)
block|{
name|foundStartBoundary
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|lineBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to read start boundary for body part"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|foundStartBoundary
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to find start boundary for body part"
argument_list|)
throw|;
block|}
block|}
DECL|method|skipToBoundary (AS2SessionInputBuffer inbuffer, String boundary)
specifier|public
specifier|static
name|void
name|skipToBoundary
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|)
throws|throws
name|HttpException
block|{
name|boolean
name|foundEndBoundary
decl_stmt|;
try|try
block|{
name|foundEndBoundary
operator|=
literal|false
expr_stmt|;
name|CharArrayBuffer
name|lineBuffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
while|while
condition|(
name|inbuffer
operator|.
name|readLine
argument_list|(
name|lineBuffer
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|ParserCursor
name|cursor
init|=
operator|new
name|ParserCursor
argument_list|(
literal|0
argument_list|,
name|lineBuffer
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBoundaryDelimiter
argument_list|(
name|lineBuffer
argument_list|,
name|cursor
argument_list|,
name|boundary
argument_list|)
condition|)
block|{
name|foundEndBoundary
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|lineBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to read start boundary for body part"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|foundEndBoundary
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to find start boundary for body part"
argument_list|)
throw|;
block|}
block|}
DECL|method|parseMultipartSignedEntity (HttpMessage message)
specifier|public
specifier|static
name|void
name|parseMultipartSignedEntity
parameter_list|(
name|HttpMessage
name|message
parameter_list|)
throws|throws
name|HttpException
block|{
name|MultipartSignedEntity
name|multipartSignedEntity
init|=
literal|null
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|Args
operator|.
name|notNull
argument_list|(
name|EntityUtils
operator|.
name|getMessageEntity
argument_list|(
name|message
argument_list|)
argument_list|,
literal|"message entity"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|MultipartSignedEntity
condition|)
block|{
return|return;
block|}
name|Args
operator|.
name|check
argument_list|(
name|entity
operator|.
name|isStreaming
argument_list|()
argument_list|,
literal|"Entity is not streaming"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Determine and validate the Content Type
name|Header
name|contentTypeHeader
init|=
name|entity
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentTypeHeader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Content-Type header is missing"
argument_list|)
throw|;
block|}
name|ContentType
name|contentType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contentType
operator|.
name|getMimeType
argument_list|()
operator|.
name|equals
argument_list|(
name|AS2MimeType
operator|.
name|MULTIPART_SIGNED
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Entity has invalid MIME type '"
operator|+
name|contentType
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// Determine Charset
name|String
name|charsetName
init|=
name|AS2Charset
operator|.
name|US_ASCII
decl_stmt|;
name|Charset
name|charset
init|=
name|contentType
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
name|charsetName
operator|=
name|charset
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
comment|// Determine content transfer encoding
name|String
name|contentTransferEncoding
init|=
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|message
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TRANSFER_ENCODING
argument_list|)
decl_stmt|;
name|AS2SessionInputBuffer
name|inbuffer
init|=
operator|new
name|AS2SessionInputBuffer
argument_list|(
operator|new
name|HttpTransportMetricsImpl
argument_list|()
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|inbuffer
operator|.
name|bind
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get Boundary Value
name|String
name|boundary
init|=
name|HttpMessageUtils
operator|.
name|getBoundaryParameterValue
argument_list|(
name|message
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|boundary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to retrive boundary value"
argument_list|)
throw|;
block|}
name|multipartSignedEntity
operator|=
name|parseMultipartSignedEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|charsetName
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
name|multipartSignedEntity
operator|.
name|setMainBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|setMessageEntity
argument_list|(
name|message
argument_list|,
name|multipartSignedEntity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to parse entity content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseApplicationEDIEntity (HttpMessage message)
specifier|public
specifier|static
name|void
name|parseApplicationEDIEntity
parameter_list|(
name|HttpMessage
name|message
parameter_list|)
throws|throws
name|HttpException
block|{
name|ApplicationEDIEntity
name|applicationEDIEntity
init|=
literal|null
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|Args
operator|.
name|notNull
argument_list|(
name|EntityUtils
operator|.
name|getMessageEntity
argument_list|(
name|message
argument_list|)
argument_list|,
literal|"message entity"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|ApplicationEDIEntity
condition|)
block|{
return|return;
block|}
name|Args
operator|.
name|check
argument_list|(
name|entity
operator|.
name|isStreaming
argument_list|()
argument_list|,
literal|"Entity is not streaming"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Determine and validate the Content Type
name|Header
name|contentTypeHeader
init|=
name|entity
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentTypeHeader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Content-Type header is missing"
argument_list|)
throw|;
block|}
name|ContentType
name|contentType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contentType
operator|.
name|getMimeType
argument_list|()
operator|.
name|startsWith
argument_list|(
name|EntityParser
operator|.
name|APPLICATION_EDI_CONTENT_TYPE_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Entity has invalid MIME type '"
operator|+
name|contentType
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// Determine Transfer Encoding
name|Header
name|transferEncoding
init|=
name|entity
operator|.
name|getContentEncoding
argument_list|()
decl_stmt|;
name|String
name|contentTransferEncoding
init|=
name|transferEncoding
operator|==
literal|null
condition|?
literal|null
else|:
name|transferEncoding
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|AS2SessionInputBuffer
name|inBuffer
init|=
operator|new
name|AS2SessionInputBuffer
argument_list|(
operator|new
name|HttpTransportMetricsImpl
argument_list|()
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|inBuffer
operator|.
name|bind
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|applicationEDIEntity
operator|=
name|parseEDIEntityBody
argument_list|(
name|inBuffer
argument_list|,
literal|null
argument_list|,
name|contentType
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
name|applicationEDIEntity
operator|.
name|setMainBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|setMessageEntity
argument_list|(
name|message
argument_list|,
name|applicationEDIEntity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to parse entity content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseMessageDispositionNotificationReportEntity (HttpMessage message)
specifier|public
specifier|static
name|void
name|parseMessageDispositionNotificationReportEntity
parameter_list|(
name|HttpMessage
name|message
parameter_list|)
throws|throws
name|HttpException
block|{
name|DispositionNotificationMultipartReportEntity
name|dispositionNotificationMultipartReportEntity
init|=
literal|null
decl_stmt|;
name|HttpEntity
name|entity
init|=
name|Args
operator|.
name|notNull
argument_list|(
name|EntityUtils
operator|.
name|getMessageEntity
argument_list|(
name|message
argument_list|)
argument_list|,
literal|"message entity"
argument_list|)
decl_stmt|;
if|if
condition|(
name|entity
operator|instanceof
name|DispositionNotificationMultipartReportEntity
condition|)
block|{
return|return;
block|}
name|Args
operator|.
name|check
argument_list|(
name|entity
operator|.
name|isStreaming
argument_list|()
argument_list|,
literal|"Entity is not streaming"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Determine and validate the Content Type
name|Header
name|contentTypeHeader
init|=
name|entity
operator|.
name|getContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentTypeHeader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Content-Type header is missing"
argument_list|)
throw|;
block|}
name|ContentType
name|contentType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|entity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contentType
operator|.
name|getMimeType
argument_list|()
operator|.
name|equals
argument_list|(
name|AS2MimeType
operator|.
name|MULTIPART_REPORT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Entity has invalid MIME type '"
operator|+
name|contentType
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// Determine Charset
name|String
name|charsetName
init|=
name|AS2Charset
operator|.
name|US_ASCII
decl_stmt|;
name|Charset
name|charset
init|=
name|contentType
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|!=
literal|null
condition|)
block|{
name|charsetName
operator|=
name|charset
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
comment|// Determine content transfer encoding
name|String
name|contentTransferEncoding
init|=
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|message
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TRANSFER_ENCODING
argument_list|)
decl_stmt|;
name|AS2SessionInputBuffer
name|inbuffer
init|=
operator|new
name|AS2SessionInputBuffer
argument_list|(
operator|new
name|HttpTransportMetricsImpl
argument_list|()
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|inbuffer
operator|.
name|bind
argument_list|(
name|entity
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get Boundary Value
name|String
name|boundary
init|=
name|HttpMessageUtils
operator|.
name|getBoundaryParameterValue
argument_list|(
name|message
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|boundary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to retrive boundary value"
argument_list|)
throw|;
block|}
name|dispositionNotificationMultipartReportEntity
operator|=
name|parseMultipartReportEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|charsetName
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|setMessageEntity
argument_list|(
name|message
argument_list|,
name|dispositionNotificationMultipartReportEntity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to parse entity content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|parseAS2MessageEntity (HttpMessage message)
specifier|public
specifier|static
name|void
name|parseAS2MessageEntity
parameter_list|(
name|HttpMessage
name|message
parameter_list|)
throws|throws
name|HttpException
block|{
if|if
condition|(
name|EntityUtils
operator|.
name|hasEntity
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|String
name|contentTypeStr
init|=
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|message
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentTypeStr
operator|!=
literal|null
condition|)
block|{
name|ContentType
name|contentType
decl_stmt|;
try|try
block|{
name|contentType
operator|=
name|ContentType
operator|.
name|parse
argument_list|(
name|contentTypeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to get content type of message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|contentType
operator|.
name|getMimeType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
condition|)
block|{
case|case
name|AS2MimeType
operator|.
name|APPLICATION_EDIFACT
case|:
case|case
name|AS2MimeType
operator|.
name|APPLICATION_EDI_X12
case|:
case|case
name|AS2MimeType
operator|.
name|APPLICATION_EDI_CONSENT
case|:
name|parseApplicationEDIEntity
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2MimeType
operator|.
name|MULTIPART_SIGNED
case|:
name|parseMultipartSignedEntity
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2MimeType
operator|.
name|APPLICATION_PKCS7_MIME
case|:
break|break;
case|case
name|AS2MimeType
operator|.
name|MULTIPART_REPORT
case|:
name|parseMessageDispositionNotificationReportEntity
argument_list|(
name|message
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
block|}
DECL|method|parseMultipartSignedEntityBody (AS2SessionInputBuffer inbuffer, String boundary, String charsetName, String contentTransferEncoding)
specifier|public
specifier|static
name|MultipartSignedEntity
name|parseMultipartSignedEntityBody
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharsetDecoder
name|previousDecoder
init|=
name|inbuffer
operator|.
name|getCharsetDecoder
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
name|charsetName
operator|=
name|AS2Charset
operator|.
name|US_ASCII
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
decl_stmt|;
name|CharsetDecoder
name|charsetDecoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|charsetDecoder
argument_list|)
expr_stmt|;
name|MultipartSignedEntity
name|multipartSignedEntity
init|=
operator|new
name|MultipartSignedEntity
argument_list|(
name|boundary
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Skip Preamble and Start Boundary line
name|skipPreambleAndStartBoundary
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|)
expr_stmt|;
comment|//
comment|// Parse Signed Entity Part
comment|//
comment|// Read Text Report Body Part Headers
name|Header
index|[]
name|headers
init|=
name|AbstractMessageParser
operator|.
name|parseHeaders
argument_list|(
name|inbuffer
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|BasicLineParser
operator|.
name|INSTANCE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CharArrayBuffer
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get Content-Type and Content-Transfer-Encoding
name|ContentType
name|signedEntityContentType
init|=
literal|null
decl_stmt|;
name|String
name|signedEntityContentTransferEncoding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
switch|switch
condition|(
name|header
operator|.
name|getName
argument_list|()
condition|)
block|{
case|case
name|AS2Header
operator|.
name|CONTENT_TYPE
case|:
name|signedEntityContentType
operator|=
name|ContentType
operator|.
name|parse
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2Header
operator|.
name|CONTENT_TRANSFER_ENCODING
case|:
name|signedEntityContentTransferEncoding
operator|=
name|header
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
block|}
if|if
condition|(
name|signedEntityContentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to find Content-Type header in signed entity body part"
argument_list|)
throw|;
block|}
name|MimeEntity
name|signedEntity
init|=
name|parseEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|signedEntityContentType
argument_list|,
name|signedEntityContentTransferEncoding
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|signedEntity
operator|.
name|removeAllHeaders
argument_list|()
expr_stmt|;
name|signedEntity
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|multipartSignedEntity
operator|.
name|addPart
argument_list|(
name|signedEntity
argument_list|)
expr_stmt|;
comment|//
comment|// End Signed Entity Part
comment|//
comment|// Parse Signature Body Part
comment|//
comment|// Read Signature Body Part Headers
name|headers
operator|=
name|AbstractMessageParser
operator|.
name|parseHeaders
argument_list|(
name|inbuffer
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|BasicLineParser
operator|.
name|INSTANCE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CharArrayBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get Content-Type and Content-Transfer-Encoding
name|ContentType
name|signatureContentType
init|=
literal|null
decl_stmt|;
name|String
name|signatureContentTransferEncoding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
switch|switch
condition|(
name|header
operator|.
name|getName
argument_list|()
condition|)
block|{
case|case
name|AS2Header
operator|.
name|CONTENT_TYPE
case|:
name|signatureContentType
operator|=
name|ContentType
operator|.
name|parse
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2Header
operator|.
name|CONTENT_TRANSFER_ENCODING
case|:
name|signatureContentTransferEncoding
operator|=
name|header
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
block|}
if|if
condition|(
name|signatureContentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to find Content-Type header in signature body part"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ContentTypeUtils
operator|.
name|isPkcs7SignatureType
argument_list|(
name|signatureContentType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Invalid content type '"
operator|+
name|signatureContentType
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"' for signature body part"
argument_list|)
throw|;
block|}
name|ApplicationPkcs7SignatureEntity
name|applicationPkcs7SignatureEntity
init|=
name|parseApplicationPkcs7SignatureEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|signatureContentType
argument_list|,
name|signatureContentTransferEncoding
argument_list|)
decl_stmt|;
name|applicationPkcs7SignatureEntity
operator|.
name|removeAllHeaders
argument_list|()
expr_stmt|;
name|applicationPkcs7SignatureEntity
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|multipartSignedEntity
operator|.
name|addPart
argument_list|(
name|applicationPkcs7SignatureEntity
argument_list|)
expr_stmt|;
comment|//
comment|// End Signature Body Part
name|ContentType
name|contentType
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|MULTIPART_SIGNED
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|multipartSignedEntity
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|multipartSignedEntity
operator|.
name|setContentTransferEncoding
argument_list|(
name|contentTransferEncoding
argument_list|)
expr_stmt|;
return|return
name|multipartSignedEntity
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to parse text entity"
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|parseException
throw|;
block|}
finally|finally
block|{
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|previousDecoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseMultipartReportEntityBody (AS2SessionInputBuffer inbuffer, String boundary, String charsetName, String contentTransferEncoding)
specifier|public
specifier|static
name|DispositionNotificationMultipartReportEntity
name|parseMultipartReportEntityBody
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharsetDecoder
name|previousDecoder
init|=
name|inbuffer
operator|.
name|getCharsetDecoder
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
name|charsetName
operator|=
name|AS2Charset
operator|.
name|US_ASCII
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
decl_stmt|;
name|CharsetDecoder
name|charsetDecoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|charsetDecoder
argument_list|)
expr_stmt|;
name|DispositionNotificationMultipartReportEntity
name|dispositionNotificationMultipartReportEntity
init|=
operator|new
name|DispositionNotificationMultipartReportEntity
argument_list|(
name|boundary
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Skip Preamble and Start Boundary line
name|skipPreambleAndStartBoundary
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|)
expr_stmt|;
comment|//
comment|// Parse Text Report Body Part
comment|//
comment|// Read Text Report Body Part Headers
name|Header
index|[]
name|headers
init|=
name|AbstractMessageParser
operator|.
name|parseHeaders
argument_list|(
name|inbuffer
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|BasicLineParser
operator|.
name|INSTANCE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CharArrayBuffer
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get Content-Type and Content-Transfer-Encoding
name|ContentType
name|textReportContentType
init|=
literal|null
decl_stmt|;
name|String
name|textReportContentTransferEncoding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
switch|switch
condition|(
name|header
operator|.
name|getName
argument_list|()
condition|)
block|{
case|case
name|AS2Header
operator|.
name|CONTENT_TYPE
case|:
name|textReportContentType
operator|=
name|ContentType
operator|.
name|parse
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2Header
operator|.
name|CONTENT_TRANSFER_ENCODING
case|:
name|textReportContentTransferEncoding
operator|=
name|header
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
block|}
if|if
condition|(
name|textReportContentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to find Content-Type header in EDI message body part"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|textReportContentType
operator|.
name|getMimeType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|AS2MimeType
operator|.
name|TEXT_PLAIN
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Invalid content type '"
operator|+
name|textReportContentType
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"' for first body part of disposition notification"
argument_list|)
throw|;
block|}
name|String
name|textReportCharsetName
init|=
name|textReportContentType
operator|.
name|getCharset
argument_list|()
operator|==
literal|null
condition|?
name|AS2Charset
operator|.
name|US_ASCII
else|:
name|textReportContentType
operator|.
name|getCharset
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|TextPlainEntity
name|textReportEntity
init|=
name|parseTextPlainEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|textReportCharsetName
argument_list|,
name|textReportContentTransferEncoding
argument_list|)
decl_stmt|;
name|textReportEntity
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|dispositionNotificationMultipartReportEntity
operator|.
name|addPart
argument_list|(
name|textReportEntity
argument_list|)
expr_stmt|;
comment|//
comment|// End Text Report Body Part
comment|//
comment|// Parse Disposition Notification Body Part
comment|//
comment|// Read Disposition Notification Body Part Headers
name|headers
operator|=
name|AbstractMessageParser
operator|.
name|parseHeaders
argument_list|(
name|inbuffer
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|BasicLineParser
operator|.
name|INSTANCE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CharArrayBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get Content-Type and Content-Transfer-Encoding
name|ContentType
name|dispositionNotificationContentType
init|=
literal|null
decl_stmt|;
name|String
name|dispositionNotificationContentTransferEncoding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
switch|switch
condition|(
name|header
operator|.
name|getName
argument_list|()
condition|)
block|{
case|case
name|AS2Header
operator|.
name|CONTENT_TYPE
case|:
name|dispositionNotificationContentType
operator|=
name|ContentType
operator|.
name|parse
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2Header
operator|.
name|CONTENT_TRANSFER_ENCODING
case|:
name|dispositionNotificationContentTransferEncoding
operator|=
name|header
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
block|}
if|if
condition|(
name|dispositionNotificationContentType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to find Content-Type header in body part"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|dispositionNotificationContentType
operator|.
name|getMimeType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Invalid content type '"
operator|+
name|dispositionNotificationContentType
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"' for second body part of disposition notification"
argument_list|)
throw|;
block|}
name|String
name|dispositionNotificationCharsetName
init|=
name|dispositionNotificationContentType
operator|.
name|getCharset
argument_list|()
operator|==
literal|null
condition|?
name|AS2Charset
operator|.
name|US_ASCII
else|:
name|dispositionNotificationContentType
operator|.
name|getCharset
argument_list|()
operator|.
name|name
argument_list|()
decl_stmt|;
name|AS2MessageDispositionNotificationEntity
name|messageDispositionNotificationEntity
init|=
name|parseMessageDispositionNotificationEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|dispositionNotificationCharsetName
argument_list|,
name|dispositionNotificationContentTransferEncoding
argument_list|)
decl_stmt|;
name|messageDispositionNotificationEntity
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|dispositionNotificationMultipartReportEntity
operator|.
name|addPart
argument_list|(
name|messageDispositionNotificationEntity
argument_list|)
expr_stmt|;
comment|//
comment|// End Disposition Notification Body Part
name|dispositionNotificationMultipartReportEntity
operator|.
name|setContentTransferEncoding
argument_list|(
name|contentTransferEncoding
argument_list|)
expr_stmt|;
return|return
name|dispositionNotificationMultipartReportEntity
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to parse text entity"
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|parseException
throw|;
block|}
finally|finally
block|{
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|previousDecoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseTextPlainEntityBody (AS2SessionInputBuffer inbuffer, String boundary, String charsetName, String contentTransferEncoding)
specifier|public
specifier|static
name|TextPlainEntity
name|parseTextPlainEntityBody
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharsetDecoder
name|previousDecoder
init|=
name|inbuffer
operator|.
name|getCharsetDecoder
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
name|charsetName
operator|=
name|AS2Charset
operator|.
name|US_ASCII
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
decl_stmt|;
name|CharsetDecoder
name|charsetDecoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|charsetDecoder
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|parseBodyPartText
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentTransferEncoding
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|EntityUtils
operator|.
name|decode
argument_list|(
name|text
argument_list|,
name|charset
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TextPlainEntity
argument_list|(
name|text
argument_list|,
name|charsetName
argument_list|,
name|contentTransferEncoding
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to parse text entity"
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|parseException
throw|;
block|}
finally|finally
block|{
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|previousDecoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseMessageDispositionNotificationEntityBody (AS2SessionInputBuffer inbuffer, String boundary, String charsetName, String contentTransferEncoding)
specifier|public
specifier|static
name|AS2MessageDispositionNotificationEntity
name|parseMessageDispositionNotificationEntityBody
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharsetDecoder
name|previousDecoder
init|=
name|inbuffer
operator|.
name|getCharsetDecoder
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|charsetName
operator|==
literal|null
condition|)
block|{
name|charsetName
operator|=
name|AS2Charset
operator|.
name|US_ASCII
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
decl_stmt|;
name|CharsetDecoder
name|charsetDecoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|charsetDecoder
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CharArrayBuffer
argument_list|>
name|dispositionNotificationFields
init|=
name|parseBodyPartFields
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|BasicLineParser
operator|.
name|INSTANCE
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|CharArrayBuffer
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|AS2MessageDispositionNotificationEntity
name|as2MessageDispositionNotificationEntity
init|=
name|DispositionNotificationContentUtils
operator|.
name|parseDispositionNotification
argument_list|(
name|dispositionNotificationFields
argument_list|)
decl_stmt|;
name|ContentType
name|contentType
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|as2MessageDispositionNotificationEntity
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
return|return
name|as2MessageDispositionNotificationEntity
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to parse MDN entity"
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|parseException
throw|;
block|}
finally|finally
block|{
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|previousDecoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseEntityBody (AS2SessionInputBuffer inbuffer, String boundary, ContentType entityContentType, String contentTransferEncoding, Header[] headers)
specifier|public
specifier|static
name|MimeEntity
name|parseEntityBody
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|,
name|ContentType
name|entityContentType
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|,
name|Header
index|[]
name|headers
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharsetDecoder
name|previousDecoder
init|=
name|inbuffer
operator|.
name|getCharsetDecoder
argument_list|()
decl_stmt|;
try|try
block|{
name|Charset
name|charset
init|=
name|entityContentType
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
block|}
name|CharsetDecoder
name|charsetDecoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|charsetDecoder
argument_list|)
expr_stmt|;
name|MimeEntity
name|entity
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|entityContentType
operator|.
name|getMimeType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
condition|)
block|{
case|case
name|AS2MimeType
operator|.
name|APPLICATION_EDIFACT
case|:
case|case
name|AS2MimeType
operator|.
name|APPLICATION_EDI_X12
case|:
case|case
name|AS2MimeType
operator|.
name|APPLICATION_EDI_CONSENT
case|:
name|entity
operator|=
name|parseEDIEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|entityContentType
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2MimeType
operator|.
name|MULTIPART_SIGNED
case|:
name|String
name|multipartSignedBoundary
init|=
name|AS2HeaderUtils
operator|.
name|getBoundaryParameterValue
argument_list|(
name|headers
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|entity
operator|=
name|parseMultipartSignedEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|multipartSignedBoundary
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
name|skipToBoundary
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
case|:
name|entity
operator|=
name|parseMessageDispositionNotificationEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2MimeType
operator|.
name|MULTIPART_REPORT
case|:
name|String
name|multipartReportBoundary
init|=
name|AS2HeaderUtils
operator|.
name|getBoundaryParameterValue
argument_list|(
name|headers
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|entity
operator|=
name|parseMultipartReportEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|multipartReportBoundary
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
name|skipToBoundary
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2MimeType
operator|.
name|TEXT_PLAIN
case|:
name|entity
operator|=
name|parseTextPlainEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|charset
operator|.
name|name
argument_list|()
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
break|break;
case|case
name|AS2MimeType
operator|.
name|APPLICATION_PKCS7_SIGNATURE
case|:
name|entity
operator|=
name|parseApplicationPkcs7SignatureEntityBody
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|,
name|entityContentType
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|entity
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to parse EDI entity"
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|parseException
throw|;
block|}
finally|finally
block|{
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|previousDecoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseEDIEntityBody (AS2SessionInputBuffer inbuffer, String boundary, ContentType ediMessageContentType, String contentTransferEncoding)
specifier|public
specifier|static
name|ApplicationEDIEntity
name|parseEDIEntityBody
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|,
name|ContentType
name|ediMessageContentType
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharsetDecoder
name|previousDecoder
init|=
name|inbuffer
operator|.
name|getCharsetDecoder
argument_list|()
decl_stmt|;
try|try
block|{
name|Charset
name|charset
init|=
name|ediMessageContentType
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
block|}
name|CharsetDecoder
name|charsetDecoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|charsetDecoder
argument_list|)
expr_stmt|;
name|String
name|ediMessageBodyPartContent
init|=
name|parseBodyPartText
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentTransferEncoding
operator|!=
literal|null
condition|)
block|{
name|ediMessageBodyPartContent
operator|=
name|EntityUtils
operator|.
name|decode
argument_list|(
name|ediMessageBodyPartContent
argument_list|,
name|charset
argument_list|,
name|contentTransferEncoding
argument_list|)
expr_stmt|;
block|}
name|ApplicationEDIEntity
name|applicationEDIEntity
init|=
name|EntityUtils
operator|.
name|createEDIEntity
argument_list|(
name|ediMessageBodyPartContent
argument_list|,
name|ediMessageContentType
argument_list|,
name|contentTransferEncoding
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|applicationEDIEntity
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to parse EDI entity"
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|parseException
throw|;
block|}
finally|finally
block|{
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|previousDecoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseApplicationPkcs7SignatureEntityBody (AS2SessionInputBuffer inbuffer, String boundary, ContentType contentType, String contentTransferEncoding)
specifier|public
specifier|static
name|ApplicationPkcs7SignatureEntity
name|parseApplicationPkcs7SignatureEntityBody
parameter_list|(
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
name|String
name|boundary
parameter_list|,
name|ContentType
name|contentType
parameter_list|,
name|String
name|contentTransferEncoding
parameter_list|)
throws|throws
name|ParseException
block|{
name|CharsetDecoder
name|previousDecoder
init|=
name|inbuffer
operator|.
name|getCharsetDecoder
argument_list|()
decl_stmt|;
try|try
block|{
name|Charset
name|charset
init|=
name|contentType
operator|.
name|getCharset
argument_list|()
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
block|}
name|CharsetDecoder
name|charsetDecoder
init|=
name|charset
operator|.
name|newDecoder
argument_list|()
decl_stmt|;
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|charsetDecoder
argument_list|)
expr_stmt|;
name|String
name|pkcs7SignatureBodyContent
init|=
name|parseBodyPartText
argument_list|(
name|inbuffer
argument_list|,
name|boundary
argument_list|)
decl_stmt|;
name|byte
index|[]
name|signature
init|=
name|EntityUtils
operator|.
name|decode
argument_list|(
name|pkcs7SignatureBodyContent
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|,
name|contentTransferEncoding
argument_list|)
decl_stmt|;
name|String
name|charsetName
init|=
name|charset
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ApplicationPkcs7SignatureEntity
name|applicationPkcs7SignatureEntity
init|=
operator|new
name|ApplicationPkcs7SignatureEntity
argument_list|(
name|signature
argument_list|,
name|charsetName
argument_list|,
name|contentTransferEncoding
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|applicationPkcs7SignatureEntity
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ParseException
name|parseException
init|=
operator|new
name|ParseException
argument_list|(
literal|"failed to parse PKCS7 Signature entity"
argument_list|)
decl_stmt|;
name|parseException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|parseException
throw|;
block|}
finally|finally
block|{
name|inbuffer
operator|.
name|setCharsetDecoder
argument_list|(
name|previousDecoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|parseBodyPartText (final AS2SessionInputBuffer inbuffer, final String boundary)
specifier|public
specifier|static
name|String
name|parseBodyPartText
parameter_list|(
specifier|final
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
specifier|final
name|String
name|boundary
parameter_list|)
throws|throws
name|IOException
block|{
name|CharArrayBuffer
name|buffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
name|DEFAULT_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|CharArrayBuffer
name|line
init|=
operator|new
name|CharArrayBuffer
argument_list|(
name|DEFAULT_BUFFER_SIZE
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|int
name|l
init|=
name|inbuffer
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|boundary
operator|!=
literal|null
operator|&&
name|isBoundaryDelimiter
argument_list|(
name|line
argument_list|,
literal|null
argument_list|,
name|boundary
argument_list|)
condition|)
block|{
comment|// remove last CRLF from buffer which belongs to boundary
name|int
name|length
init|=
name|buffer
operator|.
name|length
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
break|break;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|inbuffer
operator|.
name|isLastLineReadTerminatedByLineFeed
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseBodyPartFields (final AS2SessionInputBuffer inbuffer, final String boundary, final LineParser parser, final List<CharArrayBuffer> fields)
specifier|public
specifier|static
name|List
argument_list|<
name|CharArrayBuffer
argument_list|>
name|parseBodyPartFields
parameter_list|(
specifier|final
name|AS2SessionInputBuffer
name|inbuffer
parameter_list|,
specifier|final
name|String
name|boundary
parameter_list|,
specifier|final
name|LineParser
name|parser
parameter_list|,
specifier|final
name|List
argument_list|<
name|CharArrayBuffer
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|parser
argument_list|,
literal|"parser"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|fields
argument_list|,
literal|"fields"
argument_list|)
expr_stmt|;
name|CharArrayBuffer
name|current
init|=
literal|null
decl_stmt|;
name|CharArrayBuffer
name|previous
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|current
operator|=
operator|new
name|CharArrayBuffer
argument_list|(
literal|64
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|l
init|=
name|inbuffer
operator|.
name|readLine
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
operator|-
literal|1
operator|||
name|current
operator|.
name|length
argument_list|()
operator|<
literal|1
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|boundary
operator|!=
literal|null
operator|&&
name|isBoundaryDelimiter
argument_list|(
name|current
argument_list|,
literal|null
argument_list|,
name|boundary
argument_list|)
condition|)
block|{
break|break;
block|}
comment|// check if current line part of folded headers
if|if
condition|(
operator|(
name|current
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|' '
operator|||
name|current
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\t'
operator|)
operator|&&
name|previous
operator|!=
literal|null
condition|)
block|{
comment|// we have continuation of folded header : append value
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|current
operator|.
name|length
argument_list|()
condition|)
block|{
specifier|final
name|char
name|ch
init|=
name|current
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|' '
operator|&&
name|ch
operator|!=
literal|'\t'
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
comment|// Just append current line to previous line
name|previous
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|previous
operator|.
name|append
argument_list|(
name|current
argument_list|,
name|i
argument_list|,
name|current
operator|.
name|length
argument_list|()
operator|-
name|i
argument_list|)
expr_stmt|;
comment|// leave current line buffer for reuse for next header
name|current
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|previous
operator|=
name|current
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|fields
return|;
block|}
block|}
end_class

end_unit

