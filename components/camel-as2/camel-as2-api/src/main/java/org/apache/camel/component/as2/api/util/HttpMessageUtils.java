begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|EntityParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HeaderElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|io
operator|.
name|SessionInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Args
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|CharArrayBuffer
import|;
end_import

begin_class
DECL|class|HttpMessageUtils
specifier|public
specifier|final
class|class
name|HttpMessageUtils
block|{
DECL|method|HttpMessageUtils ()
specifier|private
name|HttpMessageUtils
parameter_list|()
block|{     }
DECL|method|getHeaderValue (HttpMessage message, String headerName)
specifier|public
specifier|static
name|String
name|getHeaderValue
parameter_list|(
name|HttpMessage
name|message
parameter_list|,
name|String
name|headerName
parameter_list|)
block|{
name|Header
name|header
init|=
name|message
operator|.
name|getFirstHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
return|return
name|header
operator|==
literal|null
condition|?
literal|null
else|:
name|header
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|setHeaderValue (HttpMessage message, String headerName, String headerValue)
specifier|public
specifier|static
name|void
name|setHeaderValue
parameter_list|(
name|HttpMessage
name|message
parameter_list|,
name|String
name|headerName
parameter_list|,
name|String
name|headerValue
parameter_list|)
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|message
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|headerName
argument_list|,
literal|"headerName"
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerValue
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|removeHeaders
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEntity (HttpMessage request, Class<T> type)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getEntity
parameter_list|(
name|HttpMessage
name|request
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
condition|)
block|{
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
operator|&&
name|type
operator|.
name|isInstance
argument_list|(
name|entity
argument_list|)
condition|)
block|{
return|return
name|type
operator|.
name|cast
argument_list|(
name|entity
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|parseBodyPartContent (SessionInputBuffer inBuffer, String boundary)
specifier|public
specifier|static
name|String
name|parseBodyPartContent
parameter_list|(
name|SessionInputBuffer
name|inBuffer
parameter_list|,
name|String
name|boundary
parameter_list|)
throws|throws
name|HttpException
block|{
try|try
block|{
name|CharArrayBuffer
name|bodyPartContentBuffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|CharArrayBuffer
name|lineBuffer
init|=
operator|new
name|CharArrayBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|boolean
name|foundMultipartEndBoundary
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|inBuffer
operator|.
name|readLine
argument_list|(
name|lineBuffer
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|EntityParser
operator|.
name|isBoundaryDelimiter
argument_list|(
name|lineBuffer
argument_list|,
literal|null
argument_list|,
name|boundary
argument_list|)
condition|)
block|{
name|foundMultipartEndBoundary
operator|=
literal|true
expr_stmt|;
comment|// Remove previous line ending: this is associated with
comment|// boundary
name|bodyPartContentBuffer
operator|.
name|setLength
argument_list|(
name|bodyPartContentBuffer
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|lineBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
name|lineBuffer
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
comment|// add line delimiter
name|bodyPartContentBuffer
operator|.
name|append
argument_list|(
name|lineBuffer
argument_list|)
expr_stmt|;
name|lineBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundMultipartEndBoundary
condition|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to find end boundary delimiter for body part"
argument_list|)
throw|;
block|}
return|return
name|bodyPartContentBuffer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|HttpException
argument_list|(
literal|"Failed to parse body part content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getBoundaryParameterValue (HttpMessage message, String headerName)
specifier|public
specifier|static
name|String
name|getBoundaryParameterValue
parameter_list|(
name|HttpMessage
name|message
parameter_list|,
name|String
name|headerName
parameter_list|)
block|{
name|Args
operator|.
name|notNull
argument_list|(
name|message
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|notNull
argument_list|(
name|headerName
argument_list|,
literal|"headerName"
argument_list|)
expr_stmt|;
name|Header
name|header
init|=
name|message
operator|.
name|getFirstHeader
argument_list|(
name|headerName
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|HeaderElement
name|headerElement
range|:
name|header
operator|.
name|getElements
argument_list|()
control|)
block|{
for|for
control|(
name|NameValuePair
name|nameValuePair
range|:
name|headerElement
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|nameValuePair
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"boundary"
argument_list|)
condition|)
block|{
return|return
name|nameValuePair
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

