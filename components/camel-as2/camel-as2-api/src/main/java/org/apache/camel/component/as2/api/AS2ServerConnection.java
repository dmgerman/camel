begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.api
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|io
operator|.
name|AS2BHttpServerConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|protocol
operator|.
name|ResponseMDN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ConnectionClosedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpInetConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpServerConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|BasicHttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ImmutableHttpProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ResponseConnControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ResponseContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ResponseDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|ResponseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|UriHttpRequestHandlerMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|Args
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AS2ServerConnection
specifier|public
class|class
name|AS2ServerConnection
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AS2ServerConnection
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REQUEST_LISTENER_THREAD_NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_LISTENER_THREAD_NAME_PREFIX
init|=
literal|"AS2Svr-"
decl_stmt|;
DECL|field|REQUEST_HANDLER_THREAD_NAME_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_HANDLER_THREAD_NAME_PREFIX
init|=
literal|"AS2Hdlr-"
decl_stmt|;
DECL|class|RequestListenerThread
specifier|static
class|class
name|RequestListenerThread
extends|extends
name|Thread
block|{
DECL|field|serversocket
specifier|private
specifier|final
name|ServerSocket
name|serversocket
decl_stmt|;
DECL|field|httpService
specifier|private
specifier|final
name|HttpService
name|httpService
decl_stmt|;
DECL|field|reqistry
specifier|private
name|UriHttpRequestHandlerMapper
name|reqistry
decl_stmt|;
DECL|method|RequestListenerThread (String as2Version, String originServer, String serverFqdn, int port, Certificate[] signingCertificateChain, PrivateKey signingPrivateKey)
specifier|public
name|RequestListenerThread
parameter_list|(
name|String
name|as2Version
parameter_list|,
name|String
name|originServer
parameter_list|,
name|String
name|serverFqdn
parameter_list|,
name|int
name|port
parameter_list|,
name|Certificate
index|[]
name|signingCertificateChain
parameter_list|,
name|PrivateKey
name|signingPrivateKey
parameter_list|)
throws|throws
name|IOException
block|{
name|setName
argument_list|(
name|REQUEST_LISTENER_THREAD_NAME_PREFIX
operator|+
name|port
argument_list|)
expr_stmt|;
name|serversocket
operator|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|)
expr_stmt|;
comment|// Set up HTTP protocol processor for incoming connections
specifier|final
name|HttpProcessor
name|inhttpproc
init|=
operator|new
name|ImmutableHttpProcessor
argument_list|(
operator|new
name|HttpResponseInterceptor
index|[]
block|{
operator|new
name|ResponseContent
argument_list|(
literal|true
argument_list|)
block|,
operator|new
name|ResponseServer
argument_list|(
name|originServer
argument_list|)
block|,
operator|new
name|ResponseDate
argument_list|()
block|,
operator|new
name|ResponseConnControl
argument_list|()
block|,
operator|new
name|ResponseMDN
argument_list|(
name|as2Version
argument_list|,
name|serverFqdn
argument_list|,
name|signingCertificateChain
argument_list|,
name|signingPrivateKey
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|reqistry
operator|=
operator|new
name|UriHttpRequestHandlerMapper
argument_list|()
expr_stmt|;
comment|// Set up the HTTP service
name|httpService
operator|=
operator|new
name|HttpService
argument_list|(
name|inhttpproc
argument_list|,
name|reqistry
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Listening on port "
operator|+
name|this
operator|.
name|serversocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|int
name|bufsize
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
comment|// Set up incoming HTTP connection
specifier|final
name|Socket
name|insocket
init|=
name|this
operator|.
name|serversocket
operator|.
name|accept
argument_list|()
decl_stmt|;
specifier|final
name|AS2BHttpServerConnection
name|inconn
init|=
operator|new
name|AS2BHttpServerConnection
argument_list|(
name|bufsize
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Incoming connection from "
operator|+
name|insocket
operator|.
name|getInetAddress
argument_list|()
argument_list|)
expr_stmt|;
name|inconn
operator|.
name|bind
argument_list|(
name|insocket
argument_list|)
expr_stmt|;
comment|// Start worker thread
specifier|final
name|Thread
name|t
init|=
operator|new
name|RequestHandlerThread
argument_list|(
name|this
operator|.
name|httpService
argument_list|,
name|inconn
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedIOException
name|ex
parameter_list|)
block|{
break|break;
block|}
catch|catch
parameter_list|(
specifier|final
name|SocketException
name|e
parameter_list|)
block|{
comment|// Server socket closed
break|break;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"I/O error initialising connection thread: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|registerHandler (String requestUriPattern, HttpRequestHandler httpRequestHandler)
name|void
name|registerHandler
parameter_list|(
name|String
name|requestUriPattern
parameter_list|,
name|HttpRequestHandler
name|httpRequestHandler
parameter_list|)
block|{
name|reqistry
operator|.
name|register
argument_list|(
name|requestUriPattern
argument_list|,
name|httpRequestHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterHandler (String requestUri)
name|void
name|unregisterHandler
parameter_list|(
name|String
name|requestUri
parameter_list|)
block|{
name|reqistry
operator|.
name|unregister
argument_list|(
name|requestUri
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RequestHandlerThread
specifier|static
class|class
name|RequestHandlerThread
extends|extends
name|Thread
block|{
DECL|field|httpService
specifier|private
name|HttpService
name|httpService
decl_stmt|;
DECL|field|serverConnection
specifier|private
name|HttpServerConnection
name|serverConnection
decl_stmt|;
DECL|method|RequestHandlerThread (HttpService httpService, HttpServerConnection serverConnection)
specifier|public
name|RequestHandlerThread
parameter_list|(
name|HttpService
name|httpService
parameter_list|,
name|HttpServerConnection
name|serverConnection
parameter_list|)
block|{
if|if
condition|(
name|serverConnection
operator|instanceof
name|HttpInetConnection
condition|)
block|{
name|HttpInetConnection
name|inetConnection
init|=
operator|(
name|HttpInetConnection
operator|)
name|serverConnection
decl_stmt|;
name|setName
argument_list|(
name|REQUEST_HANDLER_THREAD_NAME_PREFIX
operator|+
name|inetConnection
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
name|REQUEST_HANDLER_THREAD_NAME_PREFIX
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|httpService
operator|=
name|httpService
expr_stmt|;
name|this
operator|.
name|serverConnection
operator|=
name|serverConnection
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing new AS2 request"
argument_list|)
expr_stmt|;
specifier|final
name|HttpContext
name|context
init|=
operator|new
name|BasicHttpContext
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
name|this
operator|.
name|httpService
operator|.
name|handleRequest
argument_list|(
name|this
operator|.
name|serverConnection
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// Send asynchronous MDN if any.
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ConnectionClosedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client closed connection"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"I/O error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|HttpException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unrecoverable HTTP protocol violation: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|this
operator|.
name|serverConnection
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ignore
parameter_list|)
block|{                 }
block|}
block|}
block|}
DECL|field|listenerThread
specifier|private
name|RequestListenerThread
name|listenerThread
decl_stmt|;
DECL|field|as2Version
specifier|private
name|String
name|as2Version
decl_stmt|;
DECL|field|originServer
specifier|private
name|String
name|originServer
decl_stmt|;
DECL|field|serverFqdn
specifier|private
name|String
name|serverFqdn
decl_stmt|;
DECL|field|serverPortNumber
specifier|private
name|Integer
name|serverPortNumber
decl_stmt|;
DECL|field|signingCertificateChain
specifier|private
name|Certificate
index|[]
name|signingCertificateChain
decl_stmt|;
DECL|field|signingPrivateKey
specifier|private
name|PrivateKey
name|signingPrivateKey
decl_stmt|;
DECL|method|AS2ServerConnection (String as2Version, String originServer, String serverFqdn, Integer serverPortNumber, Certificate[] signingCertificateChain, PrivateKey signingPrivateKey)
specifier|public
name|AS2ServerConnection
parameter_list|(
name|String
name|as2Version
parameter_list|,
name|String
name|originServer
parameter_list|,
name|String
name|serverFqdn
parameter_list|,
name|Integer
name|serverPortNumber
parameter_list|,
name|Certificate
index|[]
name|signingCertificateChain
parameter_list|,
name|PrivateKey
name|signingPrivateKey
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|as2Version
operator|=
name|Args
operator|.
name|notNull
argument_list|(
name|as2Version
argument_list|,
literal|"as2Version"
argument_list|)
expr_stmt|;
name|this
operator|.
name|originServer
operator|=
name|Args
operator|.
name|notNull
argument_list|(
name|originServer
argument_list|,
literal|"userAgent"
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverFqdn
operator|=
name|Args
operator|.
name|notNull
argument_list|(
name|serverFqdn
argument_list|,
literal|"serverFqdn"
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverPortNumber
operator|=
name|Args
operator|.
name|notNull
argument_list|(
name|serverPortNumber
argument_list|,
literal|"serverPortNumber"
argument_list|)
expr_stmt|;
name|this
operator|.
name|signingCertificateChain
operator|=
name|signingCertificateChain
expr_stmt|;
name|this
operator|.
name|signingPrivateKey
operator|=
name|signingPrivateKey
expr_stmt|;
name|listenerThread
operator|=
operator|new
name|RequestListenerThread
argument_list|(
name|this
operator|.
name|as2Version
argument_list|,
name|this
operator|.
name|originServer
argument_list|,
name|this
operator|.
name|serverFqdn
argument_list|,
name|this
operator|.
name|serverPortNumber
argument_list|,
name|this
operator|.
name|signingCertificateChain
argument_list|,
name|this
operator|.
name|signingPrivateKey
argument_list|)
expr_stmt|;
name|listenerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|listenerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|listenerThread
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|listenerThread
init|)
block|{
try|try
block|{
name|listenerThread
operator|.
name|serversocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|listenerThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|listen (String requestUri, HttpRequestHandler handler)
specifier|public
name|void
name|listen
parameter_list|(
name|String
name|requestUri
parameter_list|,
name|HttpRequestHandler
name|handler
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|listenerThread
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|listenerThread
init|)
block|{
name|listenerThread
operator|.
name|registerHandler
argument_list|(
name|requestUri
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|stopListening (String requestUri)
specifier|public
name|void
name|stopListening
parameter_list|(
name|String
name|requestUri
parameter_list|)
block|{
if|if
condition|(
name|listenerThread
operator|!=
literal|null
condition|)
block|{
name|listenerThread
operator|.
name|unregisterHandler
argument_list|(
name|requestUri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

