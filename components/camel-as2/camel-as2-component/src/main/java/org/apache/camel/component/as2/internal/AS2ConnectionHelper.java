begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|AS2Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2ClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2ServerConnection
import|;
end_import

begin_comment
comment|/**  * Utility class for creating AS2 connections.  */
end_comment

begin_class
DECL|class|AS2ConnectionHelper
specifier|public
specifier|final
class|class
name|AS2ConnectionHelper
block|{
DECL|field|serverConnections
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|AS2ServerConnection
argument_list|>
name|serverConnections
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|AS2ServerConnection
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Prevent instantiation      */
DECL|method|AS2ConnectionHelper ()
specifier|private
name|AS2ConnectionHelper
parameter_list|()
block|{     }
comment|/**      * Create an AS2 client connection.      *       * @param configuration - configuration used to configure connection.      * @return The AS2 client connection.      * @throws UnknownHostException Failed to establish connection due to unknown host.      * @throws IOException - Failed to establish connection.      */
DECL|method|createAS2ClientConnection (AS2Configuration configuration)
specifier|public
specifier|static
name|AS2ClientConnection
name|createAS2ClientConnection
parameter_list|(
name|AS2Configuration
name|configuration
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
return|return
operator|new
name|AS2ClientConnection
argument_list|(
name|configuration
operator|.
name|getAs2Version
argument_list|()
argument_list|,
name|configuration
operator|.
name|getUserAgent
argument_list|()
argument_list|,
name|configuration
operator|.
name|getClientFqdn
argument_list|()
argument_list|,
name|configuration
operator|.
name|getTargetHostname
argument_list|()
argument_list|,
name|configuration
operator|.
name|getTargetPortNumber
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Create an AS2 server connection.      *       * @param configuration - configuration used to configure connection.      * @return The AS2 server connection.      * @throws IOException       */
DECL|method|createAS2ServerConnection (AS2Configuration configuration)
specifier|public
specifier|static
name|AS2ServerConnection
name|createAS2ServerConnection
parameter_list|(
name|AS2Configuration
name|configuration
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|serverConnections
init|)
block|{
name|AS2ServerConnection
name|serverConnection
init|=
name|serverConnections
operator|.
name|get
argument_list|(
name|configuration
operator|.
name|getServerPortNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serverConnection
operator|==
literal|null
condition|)
block|{
name|serverConnection
operator|=
operator|new
name|AS2ServerConnection
argument_list|(
name|configuration
operator|.
name|getAs2Version
argument_list|()
argument_list|,
name|configuration
operator|.
name|getServer
argument_list|()
argument_list|,
name|configuration
operator|.
name|getServerFqdn
argument_list|()
argument_list|,
name|configuration
operator|.
name|getServerPortNumber
argument_list|()
argument_list|,
name|configuration
operator|.
name|getSigningCertificateChain
argument_list|()
argument_list|,
name|configuration
operator|.
name|getSigningPrivateKey
argument_list|()
argument_list|)
expr_stmt|;
name|serverConnections
operator|.
name|put
argument_list|(
name|configuration
operator|.
name|getServerPortNumber
argument_list|()
argument_list|,
name|serverConnection
argument_list|)
expr_stmt|;
block|}
return|return
name|serverConnection
return|;
block|}
block|}
block|}
end_class

end_unit

