begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2ClientConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2ClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2MessageStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2SignedDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationEDIFACTEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationPkcs7SignatureEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|MultipartSignedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|SigningUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|internal
operator|.
name|AS2ApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|internal
operator|.
name|AS2ServerManagerApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|BasicHttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1EncodableVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|IssuerAndSerialNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapabilitiesAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapabilityVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMEEncryptionKeyPreferenceAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaCertStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.as2.api.AS2ServerManager} APIs.  */
end_comment

begin_class
DECL|class|AS2ServerManagerIntegrationTest
specifier|public
class|class
name|AS2ServerManagerIntegrationTest
extends|extends
name|AbstractAS2TestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AS2ServerManagerIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|AS2ApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|AS2ServerManagerApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|METHOD
specifier|private
specifier|static
specifier|final
name|String
name|METHOD
init|=
literal|"POST"
decl_stmt|;
DECL|field|TARGET_HOST
specifier|private
specifier|static
specifier|final
name|String
name|TARGET_HOST
init|=
literal|"localhost"
decl_stmt|;
DECL|field|TARGET_PORT
specifier|private
specifier|static
specifier|final
name|int
name|TARGET_PORT
init|=
literal|8888
decl_stmt|;
DECL|field|AS2_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|AS2_VERSION
init|=
literal|"1.1"
decl_stmt|;
DECL|field|USER_AGENT
specifier|private
specifier|static
specifier|final
name|String
name|USER_AGENT
init|=
literal|"Camel AS2 Endpoint"
decl_stmt|;
DECL|field|REQUEST_URI
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_URI
init|=
literal|"/"
decl_stmt|;
DECL|field|AS2_NAME
specifier|private
specifier|static
specifier|final
name|String
name|AS2_NAME
init|=
literal|"878051556"
decl_stmt|;
DECL|field|SUBJECT
specifier|private
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
literal|"Test Case"
decl_stmt|;
DECL|field|FROM
specifier|private
specifier|static
specifier|final
name|String
name|FROM
init|=
literal|"mrAS@example.org"
decl_stmt|;
DECL|field|CLIENT_FQDN
specifier|private
specifier|static
specifier|final
name|String
name|CLIENT_FQDN
init|=
literal|"example.org"
decl_stmt|;
DECL|field|DISPOSITION_NOTIFICATION_TO
specifier|private
specifier|static
specifier|final
name|String
name|DISPOSITION_NOTIFICATION_TO
init|=
literal|"mrAS@example.org"
decl_stmt|;
DECL|field|SIGNED_RECEIPT_MIC_ALGORITHMS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SIGNED_RECEIPT_MIC_ALGORITHMS
init|=
operator|new
name|String
index|[]
block|{
literal|"sha1"
block|,
literal|"md5"
block|}
decl_stmt|;
DECL|field|EDI_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|EDI_MESSAGE
init|=
literal|"UNB+UNOA:1+005435656:1+006415160:1+060515:1434+00000000000778'\n"
operator|+
literal|"UNH+00000000000117+INVOIC:D:97B:UN'\n"
operator|+
literal|"BGM+380+342459+9'\n"
operator|+
literal|"DTM+3:20060515:102'\n"
operator|+
literal|"RFF+ON:521052'\n"
operator|+
literal|"NAD+BY+792820524::16++CUMMINS MID-RANGE ENGINE PLANT'\n"
operator|+
literal|"NAD+SE+005435656::16++GENERAL WIDGET COMPANY'\n"
operator|+
literal|"CUX+1:USD'\n"
operator|+
literal|"LIN+1++157870:IN'\n"
operator|+
literal|"IMD+F++:::WIDGET'\n"
operator|+
literal|"QTY+47:1020:EA'\n"
operator|+
literal|"ALI+US'\n"
operator|+
literal|"MOA+203:1202.58'\n"
operator|+
literal|"PRI+INV:1.179'\n"
operator|+
literal|"LIN+2++157871:IN'\n"
operator|+
literal|"IMD+F++:::DIFFERENT WIDGET'\n"
operator|+
literal|"QTY+47:20:EA'\n"
operator|+
literal|"ALI+JP'\n"
operator|+
literal|"MOA+203:410'\n"
operator|+
literal|"PRI+INV:20.5'\n"
operator|+
literal|"UNS+S'\n"
operator|+
literal|"MOA+39:2137.58'\n"
operator|+
literal|"ALC+C+ABG'\n"
operator|+
literal|"MOA+8:525'\n"
operator|+
literal|"UNT+23+00000000000117'\n"
operator|+
literal|"UNZ+1+00000000000778'"
decl_stmt|;
DECL|field|gen
specifier|private
name|AS2SignedDataGenerator
name|gen
decl_stmt|;
DECL|field|issueKP
specifier|private
name|KeyPair
name|issueKP
decl_stmt|;
DECL|field|issueCert
specifier|private
name|X509Certificate
name|issueCert
decl_stmt|;
DECL|field|signingKP
specifier|private
name|KeyPair
name|signingKP
decl_stmt|;
DECL|field|signingCert
specifier|private
name|X509Certificate
name|signingCert
decl_stmt|;
DECL|field|certList
specifier|private
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certList
decl_stmt|;
annotation|@
name|Test
DECL|method|receivePlainEDIMessageTest ()
specifier|public
name|void
name|receivePlainEDIMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AS2ClientConnection
name|clientConnection
init|=
operator|new
name|AS2ClientConnection
argument_list|(
name|AS2_VERSION
argument_list|,
name|USER_AGENT
argument_list|,
name|CLIENT_FQDN
argument_list|,
name|TARGET_HOST
argument_list|,
name|TARGET_PORT
argument_list|)
decl_stmt|;
name|AS2ClientManager
name|clientManager
init|=
operator|new
name|AS2ClientManager
argument_list|(
name|clientConnection
argument_list|)
decl_stmt|;
name|clientManager
operator|.
name|send
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|REQUEST_URI
argument_list|,
name|SUBJECT
argument_list|,
name|FROM
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2MessageStructure
operator|.
name|PLAIN
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_NOTIFICATION_TO
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:as2RcvMsgs"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|setResultWaitTime
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"listen result"
argument_list|,
name|exchanges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"listen result"
argument_list|,
name|exchanges
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"poll result: "
operator|+
name|exchanges
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"exchange message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|BasicHttpContext
name|context
init|=
name|message
operator|.
name|getBody
argument_list|(
name|BasicHttpContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"context"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|HttpCoreContext
name|coreContext
init|=
name|HttpCoreContext
operator|.
name|adapt
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|HttpRequest
name|request
init|=
name|coreContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected method value"
argument_list|,
name|METHOD
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected request URI value"
argument_list|,
name|REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected HTTP version value"
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected subject value"
argument_list|,
name|SUBJECT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected from value"
argument_list|,
name|FROM
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version value"
argument_list|,
name|AS2_VERSION
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected message id value"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CLIENT_FQDN
operator|+
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected target host value"
argument_list|,
name|TARGET_HOST
operator|+
literal|":"
operator|+
name|TARGET_PORT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|TARGET_HOST
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected user agent value"
argument_list|,
name|USER_AGENT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|USER_AGENT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Date value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Content length value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for message"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|request
operator|instanceof
name|BasicHttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|BasicHttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected request entity type"
argument_list|,
name|entity
operator|instanceof
name|ApplicationEDIFACTEntity
argument_list|)
expr_stmt|;
name|ApplicationEDIFACTEntity
name|ediEntity
init|=
operator|(
name|ApplicationEDIFACTEntity
operator|)
name|entity
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for entity"
argument_list|,
name|ediEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Entity not set as main body of request"
argument_list|,
name|ediEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rcvdMessage
init|=
name|ediEntity
operator|.
name|getEdiMessage
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\r"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EDI message does not match"
argument_list|,
name|EDI_MESSAGE
argument_list|,
name|rcvdMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|receiveMultipartSignedMessageTest ()
specifier|public
name|void
name|receiveMultipartSignedMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
name|setupSigningGenerator
argument_list|()
expr_stmt|;
name|AS2ClientConnection
name|clientConnection
init|=
operator|new
name|AS2ClientConnection
argument_list|(
name|AS2_VERSION
argument_list|,
name|USER_AGENT
argument_list|,
name|CLIENT_FQDN
argument_list|,
name|TARGET_HOST
argument_list|,
name|TARGET_PORT
argument_list|)
decl_stmt|;
name|AS2ClientManager
name|clientManager
init|=
operator|new
name|AS2ClientManager
argument_list|(
name|clientConnection
argument_list|)
decl_stmt|;
name|clientManager
operator|.
name|send
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|REQUEST_URI
argument_list|,
name|SUBJECT
argument_list|,
name|FROM
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2_NAME
argument_list|,
name|AS2MessageStructure
operator|.
name|SIGNED
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
name|AS2SignatureAlgorithm
operator|.
name|SHA256WITHRSA
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_NOTIFICATION_TO
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:as2RcvMsgs"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|setResultWaitTime
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"listen result"
argument_list|,
name|exchanges
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"listen result"
argument_list|,
name|exchanges
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"poll result: "
operator|+
name|exchanges
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|exchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"exchange message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|BasicHttpContext
name|context
init|=
name|message
operator|.
name|getBody
argument_list|(
name|BasicHttpContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"context"
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|HttpCoreContext
name|coreContext
init|=
name|HttpCoreContext
operator|.
name|adapt
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|HttpRequest
name|request
init|=
name|coreContext
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected method value"
argument_list|,
name|METHOD
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected request URI value"
argument_list|,
name|REQUEST_URI
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected HTTP version value"
argument_list|,
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|request
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getProtocolVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected subject value"
argument_list|,
name|SUBJECT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected from value"
argument_list|,
name|FROM
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version value"
argument_list|,
name|AS2_VERSION
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to value"
argument_list|,
name|AS2_NAME
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected message id value"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CLIENT_FQDN
operator|+
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected target host value"
argument_list|,
name|TARGET_HOST
operator|+
literal|":"
operator|+
name|TARGET_PORT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|TARGET_HOST
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected user agent value"
argument_list|,
name|USER_AGENT
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|USER_AGENT
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Date value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|DATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Content length value missing"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_LENGTH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for message"
argument_list|,
name|request
operator|.
name|getFirstHeader
argument_list|(
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|MULTIPART_SIGNED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|request
operator|instanceof
name|BasicHttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|BasicHttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request does not contain entity"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected request entity type"
argument_list|,
name|entity
operator|instanceof
name|MultipartSignedEntity
argument_list|)
expr_stmt|;
name|MultipartSignedEntity
name|signedEntity
init|=
operator|(
name|MultipartSignedEntity
operator|)
name|entity
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Entity not set as main body of request"
argument_list|,
name|signedEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request contains invalid number of mime parts"
argument_list|,
name|signedEntity
operator|.
name|getPartCount
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// Validated first mime part.
name|assertTrue
argument_list|(
literal|"First mime part incorrect type "
argument_list|,
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ApplicationEDIFACTEntity
argument_list|)
expr_stmt|;
name|ApplicationEDIFACTEntity
name|ediEntity
init|=
operator|(
name|ApplicationEDIFACTEntity
operator|)
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for first mime part"
argument_list|,
name|ediEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"First mime type set as main body of request"
argument_list|,
name|ediEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate second mime part.
name|assertTrue
argument_list|(
literal|"Second mime part incorrect type "
argument_list|,
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|ApplicationPkcs7SignatureEntity
argument_list|)
expr_stmt|;
name|ApplicationPkcs7SignatureEntity
name|signatureEntity
init|=
operator|(
name|ApplicationPkcs7SignatureEntity
operator|)
name|signedEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected content type for second mime part"
argument_list|,
name|signatureEntity
operator|.
name|getContentType
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|startsWith
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_PKCS7_SIGNATURE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"First mime type set as main body of request"
argument_list|,
name|signatureEntity
operator|.
name|isMainBody
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate Signature
name|assertTrue
argument_list|(
literal|"Signature is invalid"
argument_list|,
name|signedEntity
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupSigningGenerator ()
specifier|private
name|void
name|setupSigningGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
name|setupKeysAndCertificates
argument_list|()
expr_stmt|;
comment|// Create and populate certificate store.
name|JcaCertStore
name|certs
init|=
operator|new
name|JcaCertStore
argument_list|(
name|certList
argument_list|)
decl_stmt|;
comment|// Create capabilities vector
name|SMIMECapabilityVector
name|capabilities
init|=
operator|new
name|SMIMECapabilityVector
argument_list|()
decl_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|dES_EDE3_CBC
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|rC2_CBC
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|dES_CBC
argument_list|)
expr_stmt|;
comment|// Create signing attributes
name|ASN1EncodableVector
name|attributes
init|=
operator|new
name|ASN1EncodableVector
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|SMIMEEncryptionKeyPreferenceAttribute
argument_list|(
operator|new
name|IssuerAndSerialNumber
argument_list|(
operator|new
name|X500Name
argument_list|(
name|signingCert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|signingCert
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|SMIMECapabilitiesAttribute
argument_list|(
name|capabilities
argument_list|)
argument_list|)
expr_stmt|;
name|gen
operator|=
name|SigningUtils
operator|.
name|createSigningGenerator
argument_list|(
name|AS2SignatureAlgorithm
operator|.
name|SHA256WITHRSA
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|X509Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|gen
operator|.
name|addCertificates
argument_list|(
name|certs
argument_list|)
expr_stmt|;
block|}
DECL|method|setupKeysAndCertificates ()
specifier|private
name|void
name|setupKeysAndCertificates
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// set up our certificates
comment|//
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
literal|1024
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|issueDN
init|=
literal|"O=Punkhorn Software, C=US"
decl_stmt|;
name|issueKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|issueCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|issueKP
argument_list|,
name|issueDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
comment|//
comment|// certificate we sign against
comment|//
name|String
name|signingDN
init|=
literal|"CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US"
decl_stmt|;
name|signingKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|signingCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|signingKP
argument_list|,
name|signingDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
name|certList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|signingCert
argument_list|)
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|issueCert
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for listen
name|from
argument_list|(
literal|"as2://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/listen?requestUriPattern=/"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:as2RcvMsgs"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

