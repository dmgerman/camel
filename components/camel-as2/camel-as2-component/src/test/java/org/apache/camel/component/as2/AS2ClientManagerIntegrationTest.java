begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.as2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|AS2ClientManagerIntegrationTest
operator|.
name|RequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2AsynchronousMDNManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2CompressionAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2EncryptionAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2MessageStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2ServerConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2SignatureAlgorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|AS2SignedDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|AS2DispositionModifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|AS2DispositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|AS2MessageDispositionNotificationEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationEDIEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationPkcs7MimeCompressedDataEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationPkcs7MimeEnvelopedDataEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|ApplicationPkcs7SignatureEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|DispositionMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|DispositionNotificationMultipartReportEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|MimeEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|entity
operator|.
name|MultipartSignedEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|AS2Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|HttpMessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|MicUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|api
operator|.
name|util
operator|.
name|MicUtils
operator|.
name|ReceivedContentMic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|internal
operator|.
name|AS2ApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|as2
operator|.
name|internal
operator|.
name|AS2ClientManagerApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpDateGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|ASN1EncodableVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|AttributeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|cms
operator|.
name|IssuerAndSerialNumber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapabilitiesAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMECapabilityVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|smime
operator|.
name|SMIMEEncryptionKeyPreferenceAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|x500
operator|.
name|X500Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cert
operator|.
name|jcajce
operator|.
name|JcaCertStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|JcaSimpleSignerInfoGeneratorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|cms
operator|.
name|jcajce
operator|.
name|ZlibExpanderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|provider
operator|.
name|BouncyCastleProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.as2.api.AS2ClientManager} APIs.  */
end_comment

begin_class
DECL|class|AS2ClientManagerIntegrationTest
specifier|public
class|class
name|AS2ClientManagerIntegrationTest
extends|extends
name|AbstractAS2TestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AS2ClientManagerIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|AS2ApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|AS2ClientManagerApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|SERVER_FQDN
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_FQDN
init|=
literal|"server.example.com"
decl_stmt|;
DECL|field|ORIGIN_SERVER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ORIGIN_SERVER_NAME
init|=
literal|"AS2ClientManagerIntegrationTest Server"
decl_stmt|;
DECL|field|AS2_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|AS2_VERSION
init|=
literal|"1.1"
decl_stmt|;
DECL|field|REQUEST_URI
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_URI
init|=
literal|"/"
decl_stmt|;
DECL|field|SUBJECT
specifier|private
specifier|static
specifier|final
name|String
name|SUBJECT
init|=
literal|"Test Case"
decl_stmt|;
DECL|field|AS2_NAME
specifier|private
specifier|static
specifier|final
name|String
name|AS2_NAME
init|=
literal|"878051556"
decl_stmt|;
DECL|field|FROM
specifier|private
specifier|static
specifier|final
name|String
name|FROM
init|=
literal|"mrAS@example.org"
decl_stmt|;
DECL|field|MDN_FROM
specifier|private
specifier|static
specifier|final
name|String
name|MDN_FROM
init|=
literal|"as2Test@server.example.com"
decl_stmt|;
DECL|field|MDN_SUBJECT_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|MDN_SUBJECT_PREFIX
init|=
literal|"MDN Response:"
decl_stmt|;
DECL|field|EDI_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|EDI_MESSAGE
init|=
literal|"UNB+UNOA:1+005435656:1+006415160:1+060515:1434+00000000000778'\n"
operator|+
literal|"UNH+00000000000117+INVOIC:D:97B:UN'\n"
operator|+
literal|"BGM+380+342459+9'\n"
operator|+
literal|"DTM+3:20060515:102'\n"
operator|+
literal|"RFF+ON:521052'\n"
operator|+
literal|"NAD+BY+792820524::16++CUMMINS MID-RANGE ENGINE PLANT'\n"
operator|+
literal|"NAD+SE+005435656::16++GENERAL WIDGET COMPANY'\n"
operator|+
literal|"CUX+1:USD'\n"
operator|+
literal|"LIN+1++157870:IN'\n"
operator|+
literal|"IMD+F++:::WIDGET'\n"
operator|+
literal|"QTY+47:1020:EA'\n"
operator|+
literal|"ALI+US'\n"
operator|+
literal|"MOA+203:1202.58'\n"
operator|+
literal|"PRI+INV:1.179'\n"
operator|+
literal|"LIN+2++157871:IN'\n"
operator|+
literal|"IMD+F++:::DIFFERENT WIDGET'\n"
operator|+
literal|"QTY+47:20:EA'\n"
operator|+
literal|"ALI+JP'\n"
operator|+
literal|"MOA+203:410'\n"
operator|+
literal|"PRI+INV:20.5'\n"
operator|+
literal|"UNS+S'\n"
operator|+
literal|"MOA+39:2137.58'\n"
operator|+
literal|"ALC+C+ABG'\n"
operator|+
literal|"MOA+8:525'\n"
operator|+
literal|"UNT+23+00000000000117'\n"
operator|+
literal|"UNZ+1+00000000000778'\n"
decl_stmt|;
DECL|field|EDI_MESSAGE_CONTENT_TRANSFER_ENCODING
specifier|private
specifier|static
specifier|final
name|String
name|EDI_MESSAGE_CONTENT_TRANSFER_ENCODING
init|=
literal|"7bit"
decl_stmt|;
DECL|field|EXPECTED_AS2_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_AS2_VERSION
init|=
name|AS2_VERSION
decl_stmt|;
DECL|field|EXPECTED_MDN_SUBJECT
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_MDN_SUBJECT
init|=
name|MDN_SUBJECT_PREFIX
operator|+
name|SUBJECT
decl_stmt|;
DECL|field|SIGNED_RECEIPT_MIC_ALGORITHMS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SIGNED_RECEIPT_MIC_ALGORITHMS
init|=
operator|new
name|String
index|[]
block|{
literal|"sha1"
block|,
literal|"md5"
block|}
decl_stmt|;
DECL|field|DISPOSITION_NOTIFICATION_OPTIONS
specifier|private
specifier|static
specifier|final
name|String
name|DISPOSITION_NOTIFICATION_OPTIONS
init|=
literal|"signed-receipt-protocol=optional,pkcs7-signature; signed-receipt-micalg=optional,sha1"
decl_stmt|;
DECL|field|PARTNER_TARGET_PORT
specifier|private
specifier|static
specifier|final
name|int
name|PARTNER_TARGET_PORT
init|=
literal|8888
decl_stmt|;
DECL|field|MDN_TARGET_PORT
specifier|private
specifier|static
specifier|final
name|int
name|MDN_TARGET_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|8889
argument_list|)
decl_stmt|;
DECL|field|RECIPIENT_DELIVERY_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RECIPIENT_DELIVERY_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|MDN_TARGET_PORT
operator|+
literal|"/handle-receipts"
decl_stmt|;
DECL|field|REPORTING_UA
specifier|private
specifier|static
specifier|final
name|String
name|REPORTING_UA
init|=
literal|"Server Responding with MDN"
decl_stmt|;
DECL|field|serverConnection
specifier|private
specifier|static
name|AS2ServerConnection
name|serverConnection
decl_stmt|;
DECL|field|serverSigningKP
specifier|private
specifier|static
name|KeyPair
name|serverSigningKP
decl_stmt|;
DECL|field|serverCertList
specifier|private
specifier|static
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|serverCertList
decl_stmt|;
DECL|field|DATE_GENERATOR
specifier|private
specifier|static
specifier|final
name|HttpDateGenerator
name|DATE_GENERATOR
init|=
operator|new
name|HttpDateGenerator
argument_list|()
decl_stmt|;
DECL|field|issueKP
specifier|private
name|KeyPair
name|issueKP
decl_stmt|;
DECL|field|issueCert
specifier|private
name|X509Certificate
name|issueCert
decl_stmt|;
DECL|field|signingKP
specifier|private
name|KeyPair
name|signingKP
decl_stmt|;
DECL|field|decryptingKP
specifier|private
name|KeyPair
name|decryptingKP
decl_stmt|;
DECL|field|signingCert
specifier|private
name|X509Certificate
name|signingCert
decl_stmt|;
DECL|field|certList
specifier|private
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|certList
decl_stmt|;
DECL|field|gen
specifier|private
name|AS2SignedDataGenerator
name|gen
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
name|setupKeysAndCertificates
argument_list|()
expr_stmt|;
comment|// Create and populate certificate store.
name|JcaCertStore
name|certs
init|=
operator|new
name|JcaCertStore
argument_list|(
name|certList
argument_list|)
decl_stmt|;
comment|// Create capabilities vector
name|SMIMECapabilityVector
name|capabilities
init|=
operator|new
name|SMIMECapabilityVector
argument_list|()
decl_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|dES_EDE3_CBC
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|rC2_CBC
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|capabilities
operator|.
name|addCapability
argument_list|(
name|SMIMECapability
operator|.
name|dES_CBC
argument_list|)
expr_stmt|;
comment|// Create signing attributes
name|ASN1EncodableVector
name|attributes
init|=
operator|new
name|ASN1EncodableVector
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|SMIMEEncryptionKeyPreferenceAttribute
argument_list|(
operator|new
name|IssuerAndSerialNumber
argument_list|(
operator|new
name|X500Name
argument_list|(
name|signingCert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|signingCert
operator|.
name|getSerialNumber
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|SMIMECapabilitiesAttribute
argument_list|(
name|capabilities
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|signingAlgorithmName
range|:
name|AS2SignedDataGenerator
operator|.
name|getSupportedSignatureAlgorithmNamesForKey
argument_list|(
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
control|)
block|{
try|try
block|{
name|this
operator|.
name|gen
operator|=
operator|new
name|AS2SignedDataGenerator
argument_list|()
expr_stmt|;
name|this
operator|.
name|gen
operator|.
name|addSignerInfoGenerator
argument_list|(
operator|new
name|JcaSimpleSignerInfoGeneratorBuilder
argument_list|()
operator|.
name|setProvider
argument_list|(
literal|"BC"
argument_list|)
operator|.
name|setSignedAttributeGenerator
argument_list|(
operator|new
name|AttributeTable
argument_list|(
name|attributes
argument_list|)
argument_list|)
operator|.
name|build
argument_list|(
name|signingAlgorithmName
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|signingCert
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|gen
operator|.
name|addCertificates
argument_list|(
name|certs
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|gen
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|gen
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"failed to create signing generator"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|plainMessageSendTest ()
specifier|public
name|void
name|plainMessageSendTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.requestUri"
argument_list|,
name|REQUEST_URI
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.subject"
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.from"
argument_list|,
name|FROM
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2From"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2To"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.as2.api.AS2MessageStructure
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2MessageStructure"
argument_list|,
name|AS2MessageStructure
operator|.
name|PLAIN
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.http.entity.ContentType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageContentType"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageTransferEncoding"
argument_list|,
name|EDI_MESSAGE_CONTENT_TRANSFER_ENCODING
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.dispositionNotificationTo"
argument_list|,
literal|"mrAS2@example.com"
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://SEND"
argument_list|,
name|EDI_MESSAGE
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"send result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"send: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|HttpRequest
name|request
init|=
name|result
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain body"
argument_list|,
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request body"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request body does not contain EDI entity"
argument_list|,
name|entity
operator|instanceof
name|ApplicationEDIEntity
argument_list|)
expr_stmt|;
name|String
name|ediMessage
init|=
operator|(
operator|(
name|ApplicationEDIEntity
operator|)
name|entity
operator|)
operator|.
name|getEdiMessage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EDI message is different"
argument_list|,
name|EDI_MESSAGE
argument_list|,
name|ediMessage
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|result
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected response type"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|startsWith
argument_list|(
name|AS2MimeType
operator|.
name|MULTIPART_REPORT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected mime version"
argument_list|,
name|AS2Constants
operator|.
name|MIME_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MIME_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version"
argument_list|,
name|EXPECTED_AS2_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN subject"
argument_list|,
name|EXPECTED_MDN_SUBJECT
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN from"
argument_list|,
name|MDN_FROM
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing message id"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEntity
name|responseEntity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response entity"
argument_list|,
name|responseEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected response entity type"
argument_list|,
name|responseEntity
operator|instanceof
name|DispositionNotificationMultipartReportEntity
argument_list|)
expr_stmt|;
name|DispositionNotificationMultipartReportEntity
name|reportEntity
init|=
operator|(
name|DispositionNotificationMultipartReportEntity
operator|)
name|responseEntity
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of body parts in report"
argument_list|,
literal|2
argument_list|,
name|reportEntity
operator|.
name|getPartCount
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|firstPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in first body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|TEXT_PLAIN
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|firstPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|secondPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in second body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|secondPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|secondPart
operator|instanceof
name|AS2MessageDispositionNotificationEntity
argument_list|)
expr_stmt|;
name|AS2MessageDispositionNotificationEntity
name|messageDispositionNotificationEntity
init|=
operator|(
name|AS2MessageDispositionNotificationEntity
operator|)
name|secondPart
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for reporting UA"
argument_list|,
name|ORIGIN_SERVER_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getReportingUA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for final recipient"
argument_list|,
name|AS2_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getFinalRecipient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for original message ID"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getOriginalMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition mode"
argument_list|,
name|DispositionMode
operator|.
name|AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition type"
argument_list|,
name|AS2DispositionType
operator|.
name|PROCESSED
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|envelopedMessageSendTest ()
specifier|public
name|void
name|envelopedMessageSendTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.requestUri"
argument_list|,
name|REQUEST_URI
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.subject"
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.from"
argument_list|,
name|FROM
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2From"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2To"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.as2.api.AS2MessageStructure
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2MessageStructure"
argument_list|,
name|AS2MessageStructure
operator|.
name|ENCRYPTED
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.http.entity.ContentType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageContentType"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageTransferEncoding"
argument_list|,
name|EDI_MESSAGE_CONTENT_TRANSFER_ENCODING
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.dispositionNotificationTo"
argument_list|,
literal|"mrAS2@example.com"
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.as2.api.AS2EncryptionAlgorithm
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.encryptingAlgorithm"
argument_list|,
name|AS2EncryptionAlgorithm
operator|.
name|AES128_CBC
argument_list|)
expr_stmt|;
comment|// parameter type is java.security.cert.Certificate[]
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.encryptingCertificateChain"
argument_list|,
name|certList
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://SEND"
argument_list|,
name|EDI_MESSAGE
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"send result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"send: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|HttpRequest
name|request
init|=
name|result
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain body"
argument_list|,
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request body"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request body does not contain ApplicationPkcs7Mime entity"
argument_list|,
name|entity
operator|instanceof
name|ApplicationPkcs7MimeEnvelopedDataEntity
argument_list|)
expr_stmt|;
name|MimeEntity
name|envelopeEntity
init|=
operator|(
operator|(
name|ApplicationPkcs7MimeEnvelopedDataEntity
operator|)
name|entity
operator|)
operator|.
name|getEncryptedEntity
argument_list|(
name|decryptingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Enveloped entity is not an EDI entity"
argument_list|,
name|envelopeEntity
operator|instanceof
name|ApplicationEDIEntity
argument_list|)
expr_stmt|;
name|String
name|ediMessage
init|=
operator|(
operator|(
name|ApplicationEDIEntity
operator|)
name|envelopeEntity
operator|)
operator|.
name|getEdiMessage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EDI message is different"
argument_list|,
name|EDI_MESSAGE
operator|.
name|replaceAll
argument_list|(
literal|"[\n\r]"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|ediMessage
operator|.
name|replaceAll
argument_list|(
literal|"[\n\r]"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|result
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected response type"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|startsWith
argument_list|(
name|AS2MimeType
operator|.
name|MULTIPART_REPORT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected mime version"
argument_list|,
name|AS2Constants
operator|.
name|MIME_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MIME_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version"
argument_list|,
name|EXPECTED_AS2_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN subject"
argument_list|,
name|EXPECTED_MDN_SUBJECT
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN from"
argument_list|,
name|MDN_FROM
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing message id"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEntity
name|responseEntity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response entity"
argument_list|,
name|responseEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected response entity type"
argument_list|,
name|responseEntity
operator|instanceof
name|DispositionNotificationMultipartReportEntity
argument_list|)
expr_stmt|;
name|DispositionNotificationMultipartReportEntity
name|reportEntity
init|=
operator|(
name|DispositionNotificationMultipartReportEntity
operator|)
name|responseEntity
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of body parts in report"
argument_list|,
literal|2
argument_list|,
name|reportEntity
operator|.
name|getPartCount
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|firstPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in first body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|TEXT_PLAIN
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|firstPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|secondPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in second body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|secondPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|secondPart
operator|instanceof
name|AS2MessageDispositionNotificationEntity
argument_list|)
expr_stmt|;
name|AS2MessageDispositionNotificationEntity
name|messageDispositionNotificationEntity
init|=
operator|(
name|AS2MessageDispositionNotificationEntity
operator|)
name|secondPart
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for reporting UA"
argument_list|,
name|ORIGIN_SERVER_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getReportingUA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for final recipient"
argument_list|,
name|AS2_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getFinalRecipient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for original message ID"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getOriginalMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition mode"
argument_list|,
name|DispositionMode
operator|.
name|AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition type"
argument_list|,
name|AS2DispositionType
operator|.
name|PROCESSED
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multipartSignedMessageTest ()
specifier|public
name|void
name|multipartSignedMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.requestUri"
argument_list|,
name|REQUEST_URI
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.subject"
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.from"
argument_list|,
name|FROM
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2From"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2To"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.as2.api.AS2MessageStructure
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2MessageStructure"
argument_list|,
name|AS2MessageStructure
operator|.
name|SIGNED
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.http.entity.ContentType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageContentType"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageTransferEncoding"
argument_list|,
name|EDI_MESSAGE_CONTENT_TRANSFER_ENCODING
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.as2.api.AS2SignatureAlgorithm
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.signingAlgorithm"
argument_list|,
name|AS2SignatureAlgorithm
operator|.
name|SHA512WITHRSA
argument_list|)
expr_stmt|;
comment|// parameter type is java.security.cert.Certificate[]
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.signingCertificateChain"
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// parameter type is java.security.PrivateKey
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.signingPrivateKey"
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.dispositionNotificationTo"
argument_list|,
literal|"mrAS2@example.com"
argument_list|)
expr_stmt|;
comment|// parameter type is String[]
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.signedReceiptMicAlgorithms"
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://SEND"
argument_list|,
name|EDI_MESSAGE
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"send result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"send: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|HttpRequest
name|request
init|=
name|result
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain body"
argument_list|,
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request body"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request body does not contain EDI entity"
argument_list|,
name|entity
operator|instanceof
name|MultipartSignedEntity
argument_list|)
expr_stmt|;
name|MimeEntity
name|signedEntity
init|=
operator|(
operator|(
name|MultipartSignedEntity
operator|)
name|entity
operator|)
operator|.
name|getSignedDataEntity
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signed entity wrong type"
argument_list|,
name|signedEntity
operator|instanceof
name|ApplicationEDIEntity
argument_list|)
expr_stmt|;
name|ApplicationEDIEntity
name|ediMessageEntity
init|=
operator|(
name|ApplicationEDIEntity
operator|)
name|signedEntity
decl_stmt|;
name|String
name|ediMessage
init|=
name|ediMessageEntity
operator|.
name|getEdiMessage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EDI message is different"
argument_list|,
name|EDI_MESSAGE
argument_list|,
name|ediMessage
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|result
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|contentTypeHeaderValue
init|=
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|ContentType
name|responseContentType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|contentTypeHeaderValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected response type"
argument_list|,
name|AS2MimeType
operator|.
name|MULTIPART_SIGNED
argument_list|,
name|responseContentType
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected mime version"
argument_list|,
name|AS2Constants
operator|.
name|MIME_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MIME_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version"
argument_list|,
name|EXPECTED_AS2_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN subject"
argument_list|,
name|EXPECTED_MDN_SUBJECT
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN from"
argument_list|,
name|MDN_FROM
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing message id"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEntity
name|responseEntity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response entity"
argument_list|,
name|responseEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected response entity type"
argument_list|,
name|responseEntity
operator|instanceof
name|MultipartSignedEntity
argument_list|)
expr_stmt|;
name|MultipartSignedEntity
name|responseSignedEntity
init|=
operator|(
name|MultipartSignedEntity
operator|)
name|responseEntity
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signature for response entity is invalid"
argument_list|,
name|responseSignedEntity
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|responseSignedDataEntity
init|=
name|responseSignedEntity
operator|.
name|getSignedDataEntity
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signed entity wrong type"
argument_list|,
name|responseSignedDataEntity
operator|instanceof
name|DispositionNotificationMultipartReportEntity
argument_list|)
expr_stmt|;
name|DispositionNotificationMultipartReportEntity
name|reportEntity
init|=
operator|(
name|DispositionNotificationMultipartReportEntity
operator|)
name|responseSignedDataEntity
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of body parts in report"
argument_list|,
literal|2
argument_list|,
name|reportEntity
operator|.
name|getPartCount
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|firstPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in first body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|TEXT_PLAIN
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|firstPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|secondPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in second body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|secondPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationPkcs7SignatureEntity
name|signatureEntity
init|=
name|responseSignedEntity
operator|.
name|getSignatureEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Signature Entity"
argument_list|,
name|signatureEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|secondPart
operator|instanceof
name|AS2MessageDispositionNotificationEntity
argument_list|)
expr_stmt|;
name|AS2MessageDispositionNotificationEntity
name|messageDispositionNotificationEntity
init|=
operator|(
name|AS2MessageDispositionNotificationEntity
operator|)
name|secondPart
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for reporting UA"
argument_list|,
name|ORIGIN_SERVER_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getReportingUA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for final recipient"
argument_list|,
name|AS2_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getFinalRecipient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for original message ID"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getOriginalMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition mode"
argument_list|,
name|DispositionMode
operator|.
name|AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition type"
argument_list|,
name|AS2DispositionType
operator|.
name|PROCESSED
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionType
argument_list|()
argument_list|)
expr_stmt|;
name|ReceivedContentMic
name|receivedContentMic
init|=
name|messageDispositionNotificationEntity
operator|.
name|getReceivedContentMic
argument_list|()
decl_stmt|;
name|ReceivedContentMic
name|computedContentMic
init|=
name|MicUtils
operator|.
name|createReceivedContentMic
argument_list|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
argument_list|,
name|decryptingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Received content MIC does not match computed"
argument_list|,
name|computedContentMic
operator|.
name|getEncodedMessageDigest
argument_list|()
argument_list|,
name|receivedContentMic
operator|.
name|getEncodedMessageDigest
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|compressedMessageTest ()
specifier|public
name|void
name|compressedMessageTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.requestUri"
argument_list|,
name|REQUEST_URI
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.subject"
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.from"
argument_list|,
name|FROM
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2From"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2To"
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.as2.api.AS2MessageStructure
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.as2MessageStructure"
argument_list|,
name|AS2MessageStructure
operator|.
name|PLAIN_COMPRESSED
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.http.entity.ContentType
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageContentType"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.ediMessageTransferEncoding"
argument_list|,
name|EDI_MESSAGE_CONTENT_TRANSFER_ENCODING
argument_list|)
expr_stmt|;
comment|// parameter type is org.apache.camel.component.as2.api.AS2CompressionAlgorithm
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.compressionAlgorithm"
argument_list|,
name|AS2CompressionAlgorithm
operator|.
name|ZLIB
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.dispositionNotificationTo"
argument_list|,
literal|"mrAS2@example.com"
argument_list|)
expr_stmt|;
comment|// parameter type is String[]
name|headers
operator|.
name|put
argument_list|(
literal|"CamelAS2.signedReceiptMicAlgorithms"
argument_list|,
name|SIGNED_RECEIPT_MIC_ALGORITHMS
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpCoreContext
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://SEND"
argument_list|,
name|EDI_MESSAGE
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"send result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"send: "
operator|+
name|result
argument_list|)
expr_stmt|;
name|HttpRequest
name|request
init|=
name|result
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request does not contain body"
argument_list|,
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
argument_list|)
expr_stmt|;
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Request body"
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Request body does not contain EDI entity"
argument_list|,
name|entity
operator|instanceof
name|ApplicationPkcs7MimeCompressedDataEntity
argument_list|)
expr_stmt|;
name|MimeEntity
name|compressedEntity
init|=
operator|(
operator|(
name|ApplicationPkcs7MimeCompressedDataEntity
operator|)
name|entity
operator|)
operator|.
name|getCompressedEntity
argument_list|(
operator|new
name|ZlibExpanderProvider
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signed entity wrong type"
argument_list|,
name|compressedEntity
operator|instanceof
name|ApplicationEDIEntity
argument_list|)
expr_stmt|;
name|ApplicationEDIEntity
name|ediMessageEntity
init|=
operator|(
name|ApplicationEDIEntity
operator|)
name|compressedEntity
decl_stmt|;
name|String
name|ediMessage
init|=
name|ediMessageEntity
operator|.
name|getEdiMessage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"EDI message is different"
argument_list|,
name|EDI_MESSAGE
operator|.
name|replaceAll
argument_list|(
literal|"[\n\r]"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|ediMessage
operator|.
name|replaceAll
argument_list|(
literal|"[\n\r]"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
name|result
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|contentTypeHeaderValue
init|=
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|CONTENT_TYPE
argument_list|)
decl_stmt|;
name|ContentType
name|responseContentType
init|=
name|ContentType
operator|.
name|parse
argument_list|(
name|contentTypeHeaderValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected response type"
argument_list|,
name|AS2MimeType
operator|.
name|MULTIPART_SIGNED
argument_list|,
name|responseContentType
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected mime version"
argument_list|,
name|AS2Constants
operator|.
name|MIME_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MIME_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 version"
argument_list|,
name|EXPECTED_AS2_VERSION
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN subject"
argument_list|,
name|EXPECTED_MDN_SUBJECT
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected MDN from"
argument_list|,
name|MDN_FROM
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 from"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_FROM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected AS2 to"
argument_list|,
name|AS2_NAME
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|AS2_TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing message id"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|response
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|HttpEntity
name|responseEntity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Response entity"
argument_list|,
name|responseEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected response entity type"
argument_list|,
name|responseEntity
operator|instanceof
name|MultipartSignedEntity
argument_list|)
expr_stmt|;
name|MultipartSignedEntity
name|responseSignedEntity
init|=
operator|(
name|MultipartSignedEntity
operator|)
name|responseEntity
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signature for response entity is invalid"
argument_list|,
name|responseSignedEntity
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|responseSignedDataEntity
init|=
name|responseSignedEntity
operator|.
name|getSignedDataEntity
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Signed entity wrong type"
argument_list|,
name|responseSignedDataEntity
operator|instanceof
name|DispositionNotificationMultipartReportEntity
argument_list|)
expr_stmt|;
name|DispositionNotificationMultipartReportEntity
name|reportEntity
init|=
operator|(
name|DispositionNotificationMultipartReportEntity
operator|)
name|responseSignedDataEntity
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of body parts in report"
argument_list|,
literal|2
argument_list|,
name|reportEntity
operator|.
name|getPartCount
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|firstPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in first body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|TEXT_PLAIN
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|firstPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|MimeEntity
name|secondPart
init|=
name|reportEntity
operator|.
name|getPart
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected content type in second body part of report"
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MimeType
operator|.
name|MESSAGE_DISPOSITION_NOTIFICATION
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|secondPart
operator|.
name|getContentTypeValue
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationPkcs7SignatureEntity
name|signatureEntity
init|=
name|responseSignedEntity
operator|.
name|getSignatureEntity
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Signature Entity"
argument_list|,
name|signatureEntity
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|secondPart
operator|instanceof
name|AS2MessageDispositionNotificationEntity
argument_list|)
expr_stmt|;
name|AS2MessageDispositionNotificationEntity
name|messageDispositionNotificationEntity
init|=
operator|(
name|AS2MessageDispositionNotificationEntity
operator|)
name|secondPart
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for reporting UA"
argument_list|,
name|ORIGIN_SERVER_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getReportingUA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for final recipient"
argument_list|,
name|AS2_NAME
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getFinalRecipient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for original message ID"
argument_list|,
name|HttpMessageUtils
operator|.
name|getHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getOriginalMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition mode"
argument_list|,
name|DispositionMode
operator|.
name|AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for disposition type"
argument_list|,
name|AS2DispositionType
operator|.
name|PROCESSED
argument_list|,
name|messageDispositionNotificationEntity
operator|.
name|getDispositionType
argument_list|()
argument_list|)
expr_stmt|;
name|ReceivedContentMic
name|receivedContentMic
init|=
name|messageDispositionNotificationEntity
operator|.
name|getReceivedContentMic
argument_list|()
decl_stmt|;
name|ReceivedContentMic
name|computedContentMic
init|=
name|MicUtils
operator|.
name|createReceivedContentMic
argument_list|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
argument_list|,
name|decryptingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Received content MIC does not match computed"
argument_list|,
name|computedContentMic
operator|.
name|getEncodedMessageDigest
argument_list|()
argument_list|,
name|receivedContentMic
operator|.
name|getEncodedMessageDigest
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|asyncMDNTest ()
specifier|public
name|void
name|asyncMDNTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AS2AsynchronousMDNManager
name|mdnManager
init|=
operator|new
name|AS2AsynchronousMDNManager
argument_list|(
name|AS2_VERSION
argument_list|,
name|ORIGIN_SERVER_NAME
argument_list|,
name|SERVER_FQDN
argument_list|,
name|certList
operator|.
name|toArray
argument_list|(
operator|new
name|X509Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|signingKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create plain edi request message to acknowledge
name|ApplicationEDIEntity
name|ediEntity
init|=
name|EntityUtils
operator|.
name|createEDIEntity
argument_list|(
name|EDI_MESSAGE
argument_list|,
name|ContentType
operator|.
name|create
argument_list|(
name|AS2MediaType
operator|.
name|APPLICATION_EDIFACT
argument_list|,
name|AS2Charset
operator|.
name|US_ASCII
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HttpEntityEnclosingRequest
name|request
init|=
operator|new
name|BasicHttpEntityEnclosingRequest
argument_list|(
literal|"POST"
argument_list|,
name|REQUEST_URI
argument_list|)
decl_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|SUBJECT
argument_list|,
name|SUBJECT
argument_list|)
expr_stmt|;
name|String
name|httpdate
init|=
name|DATE_GENERATOR
operator|.
name|getCurrentDate
argument_list|()
decl_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|DATE
argument_list|,
name|httpdate
argument_list|)
expr_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|AS2_TO
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|AS2_FROM
argument_list|,
name|AS2_NAME
argument_list|)
expr_stmt|;
name|String
name|originalMessageId
init|=
name|AS2Utils
operator|.
name|createMessageId
argument_list|(
name|SERVER_FQDN
argument_list|)
decl_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|MESSAGE_ID
argument_list|,
name|originalMessageId
argument_list|)
expr_stmt|;
name|HttpMessageUtils
operator|.
name|setHeaderValue
argument_list|(
name|request
argument_list|,
name|AS2Header
operator|.
name|DISPOSITION_NOTIFICATION_OPTIONS
argument_list|,
name|DISPOSITION_NOTIFICATION_OPTIONS
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|setMessageEntity
argument_list|(
name|request
argument_list|,
name|ediEntity
argument_list|)
expr_stmt|;
comment|// Create response for MDN creation.
name|HttpResponse
name|response
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
literal|200
argument_list|,
literal|"OK"
argument_list|)
decl_stmt|;
name|httpdate
operator|=
name|DATE_GENERATOR
operator|.
name|getCurrentDate
argument_list|()
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|AS2Header
operator|.
name|DATE
argument_list|,
name|httpdate
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
name|AS2Header
operator|.
name|SERVER
argument_list|,
name|REPORTING_UA
argument_list|)
expr_stmt|;
comment|// Create a receipt for edi message
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extensionFields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|extensionFields
operator|.
name|put
argument_list|(
literal|"Original-Recipient"
argument_list|,
literal|"rfc822;"
operator|+
name|AS2_NAME
argument_list|)
expr_stmt|;
name|AS2DispositionModifier
name|dispositionModifier
init|=
name|AS2DispositionModifier
operator|.
name|createWarning
argument_list|(
literal|"AS2 is cool!"
argument_list|)
decl_stmt|;
name|String
index|[]
name|failureFields
init|=
operator|new
name|String
index|[]
block|{
literal|"failure-field-1"
block|}
decl_stmt|;
name|String
index|[]
name|errorFields
init|=
operator|new
name|String
index|[]
block|{
literal|"error-field-1"
block|}
decl_stmt|;
name|String
index|[]
name|warningFields
init|=
operator|new
name|String
index|[]
block|{
literal|"warning-field-1"
block|}
decl_stmt|;
name|DispositionNotificationMultipartReportEntity
name|mdn
init|=
operator|new
name|DispositionNotificationMultipartReportEntity
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|DispositionMode
operator|.
name|AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY
argument_list|,
name|AS2DispositionType
operator|.
name|PROCESSED
argument_list|,
name|dispositionModifier
argument_list|,
name|failureFields
argument_list|,
name|errorFields
argument_list|,
name|warningFields
argument_list|,
name|extensionFields
argument_list|,
literal|null
argument_list|,
literal|"boundary"
argument_list|,
literal|true
argument_list|,
name|serverSigningKP
operator|.
name|getPrivate
argument_list|()
argument_list|,
literal|"Got your message!"
argument_list|)
decl_stmt|;
comment|// Send MDN
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|HttpCoreContext
name|httpContext
init|=
name|mdnManager
operator|.
name|send
argument_list|(
name|mdn
argument_list|,
name|RECIPIENT_DELIVERY_ADDRESS
argument_list|)
decl_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupTest ()
specifier|public
specifier|static
name|void
name|setupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|setupServerKeysAndCertificates
argument_list|()
expr_stmt|;
name|receiveTestMessages
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownTest ()
specifier|public
specifier|static
name|void
name|teardownTest
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|serverConnection
operator|!=
literal|null
condition|)
block|{
name|serverConnection
operator|.
name|stopListening
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|RequestHandler
specifier|public
specifier|static
class|class
name|RequestHandler
implements|implements
name|HttpRequestHandler
block|{
annotation|@
name|Override
DECL|method|handle (HttpRequest request, HttpResponse response, HttpContext context)
specifier|public
name|void
name|handle
parameter_list|(
name|HttpRequest
name|request
parameter_list|,
name|HttpResponse
name|response
parameter_list|,
name|HttpContext
name|context
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received test message: "
operator|+
name|request
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|AS2ServerManager
operator|.
name|FROM
argument_list|,
name|MDN_FROM
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAttribute
argument_list|(
name|AS2ServerManager
operator|.
name|SUBJECT
argument_list|,
name|MDN_SUBJECT_PREFIX
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|Processor
name|proc
init|=
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpMessage
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|(
name|HttpMessage
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|String
name|body
init|=
name|message
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
block|}
decl_stmt|;
comment|// test route for send
name|from
argument_list|(
literal|"direct://SEND"
argument_list|)
operator|.
name|to
argument_list|(
literal|"as2://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/send?inBody=ediMessage"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|MDN_TARGET_PORT
operator|+
literal|"/handle-receipts"
argument_list|)
operator|.
name|process
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|setupServerKeysAndCertificates ()
specifier|private
specifier|static
name|void
name|setupServerKeysAndCertificates
parameter_list|()
throws|throws
name|Exception
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|new
name|BouncyCastleProvider
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// set up our certificates
comment|//
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
literal|1024
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|issueDN
init|=
literal|"O=Punkhorn Software, C=US"
decl_stmt|;
name|KeyPair
name|issueKP
init|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
decl_stmt|;
name|X509Certificate
name|issueCert
init|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|issueKP
argument_list|,
name|issueDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
decl_stmt|;
comment|//
comment|// certificate we sign against
comment|//
name|String
name|signingDN
init|=
literal|"CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US"
decl_stmt|;
name|serverSigningKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|X509Certificate
name|signingCert
init|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|serverSigningKP
argument_list|,
name|signingDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
decl_stmt|;
name|serverCertList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|serverCertList
operator|.
name|add
argument_list|(
name|signingCert
argument_list|)
expr_stmt|;
name|serverCertList
operator|.
name|add
argument_list|(
name|issueCert
argument_list|)
expr_stmt|;
block|}
DECL|method|receiveTestMessages ()
specifier|private
specifier|static
name|void
name|receiveTestMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|serverConnection
operator|=
operator|new
name|AS2ServerConnection
argument_list|(
name|AS2_VERSION
argument_list|,
name|ORIGIN_SERVER_NAME
argument_list|,
name|SERVER_FQDN
argument_list|,
name|PARTNER_TARGET_PORT
argument_list|,
name|AS2SignatureAlgorithm
operator|.
name|SHA256WITHRSA
argument_list|,
name|serverCertList
operator|.
name|toArray
argument_list|(
operator|new
name|Certificate
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|serverSigningKP
operator|.
name|getPrivate
argument_list|()
argument_list|,
name|serverSigningKP
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|serverConnection
operator|.
name|listen
argument_list|(
literal|"/"
argument_list|,
operator|new
name|RequestHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupKeysAndCertificates ()
specifier|private
name|void
name|setupKeysAndCertificates
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// set up our certificates
comment|//
name|KeyPairGenerator
name|kpg
init|=
name|KeyPairGenerator
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|,
literal|"BC"
argument_list|)
decl_stmt|;
name|kpg
operator|.
name|initialize
argument_list|(
literal|1024
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|issueDN
init|=
literal|"O=Punkhorn Software, C=US"
decl_stmt|;
name|issueKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|issueCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|issueKP
argument_list|,
name|issueDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
comment|//
comment|// certificate we sign against
comment|//
name|String
name|signingDN
init|=
literal|"CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US"
decl_stmt|;
name|signingKP
operator|=
name|kpg
operator|.
name|generateKeyPair
argument_list|()
expr_stmt|;
name|signingCert
operator|=
name|Utils
operator|.
name|makeCertificate
argument_list|(
name|signingKP
argument_list|,
name|signingDN
argument_list|,
name|issueKP
argument_list|,
name|issueDN
argument_list|)
expr_stmt|;
name|certList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|signingCert
argument_list|)
expr_stmt|;
name|certList
operator|.
name|add
argument_list|(
name|issueCert
argument_list|)
expr_stmt|;
comment|// keys used to encrypt/decrypt
name|decryptingKP
operator|=
name|signingKP
expr_stmt|;
block|}
block|}
end_class

end_unit

