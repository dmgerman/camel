begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.shiro.security
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|shiro
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|crypto
operator|.
name|AesCipherService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|crypto
operator|.
name|CipherService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|util
operator|.
name|ByteSource
import|;
end_import

begin_class
DECL|class|ShiroSecurityTokenInjector
specifier|public
class|class
name|ShiroSecurityTokenInjector
implements|implements
name|Processor
block|{
DECL|field|bits128
specifier|private
specifier|final
name|byte
index|[]
name|bits128
init|=
block|{
operator|(
name|byte
operator|)
literal|0x08
block|,
operator|(
name|byte
operator|)
literal|0x09
block|,
operator|(
name|byte
operator|)
literal|0x0A
block|,
operator|(
name|byte
operator|)
literal|0x0B
block|,
operator|(
name|byte
operator|)
literal|0x0C
block|,
operator|(
name|byte
operator|)
literal|0x0D
block|,
operator|(
name|byte
operator|)
literal|0x0E
block|,
operator|(
name|byte
operator|)
literal|0x0F
block|,
operator|(
name|byte
operator|)
literal|0x10
block|,
operator|(
name|byte
operator|)
literal|0x11
block|,
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x13
block|,
operator|(
name|byte
operator|)
literal|0x14
block|,
operator|(
name|byte
operator|)
literal|0x15
block|,
operator|(
name|byte
operator|)
literal|0x16
block|,
operator|(
name|byte
operator|)
literal|0x17
block|}
decl_stmt|;
DECL|field|passPhrase
specifier|private
name|byte
index|[]
name|passPhrase
decl_stmt|;
DECL|field|securityToken
specifier|private
name|ShiroSecurityToken
name|securityToken
decl_stmt|;
DECL|field|cipherService
specifier|private
name|CipherService
name|cipherService
decl_stmt|;
DECL|field|base64
specifier|private
name|boolean
name|base64
decl_stmt|;
DECL|method|ShiroSecurityTokenInjector ()
specifier|public
name|ShiroSecurityTokenInjector
parameter_list|()
block|{
name|this
operator|.
name|passPhrase
operator|=
name|bits128
expr_stmt|;
comment|// Set up AES encryption based cipher service, by default
name|cipherService
operator|=
operator|new
name|AesCipherService
argument_list|()
expr_stmt|;
block|}
DECL|method|ShiroSecurityTokenInjector (ShiroSecurityToken securityToken, byte[] passPhrase)
specifier|public
name|ShiroSecurityTokenInjector
parameter_list|(
name|ShiroSecurityToken
name|securityToken
parameter_list|,
name|byte
index|[]
name|passPhrase
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|setSecurityToken
argument_list|(
name|securityToken
argument_list|)
expr_stmt|;
name|this
operator|.
name|setPassPhrase
argument_list|(
name|passPhrase
argument_list|)
expr_stmt|;
block|}
DECL|method|ShiroSecurityTokenInjector (ShiroSecurityToken securityToken, byte[] passPhrase, CipherService cipherService)
specifier|public
name|ShiroSecurityTokenInjector
parameter_list|(
name|ShiroSecurityToken
name|securityToken
parameter_list|,
name|byte
index|[]
name|passPhrase
parameter_list|,
name|CipherService
name|cipherService
parameter_list|)
block|{
name|this
argument_list|(
name|securityToken
argument_list|,
name|passPhrase
argument_list|)
expr_stmt|;
name|this
operator|.
name|cipherService
operator|=
name|cipherService
expr_stmt|;
block|}
DECL|method|encrypt ()
specifier|public
name|ByteSource
name|encrypt
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ShiroSecurityHelper
operator|.
name|encrypt
argument_list|(
name|securityToken
argument_list|,
name|passPhrase
argument_list|,
name|cipherService
argument_list|)
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteSource
name|bytes
init|=
name|encrypt
argument_list|()
decl_stmt|;
name|Object
name|token
decl_stmt|;
if|if
condition|(
name|isBase64
argument_list|()
condition|)
block|{
name|token
operator|=
name|bytes
operator|.
name|toBase64
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|bytes
expr_stmt|;
block|}
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|ShiroSecurityConstants
operator|.
name|SHIRO_SECURITY_TOKEN
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|getPassPhrase ()
specifier|public
name|byte
index|[]
name|getPassPhrase
parameter_list|()
block|{
return|return
name|passPhrase
return|;
block|}
DECL|method|setPassPhrase (byte[] passPhrase)
specifier|public
name|void
name|setPassPhrase
parameter_list|(
name|byte
index|[]
name|passPhrase
parameter_list|)
block|{
name|this
operator|.
name|passPhrase
operator|=
name|passPhrase
expr_stmt|;
block|}
DECL|method|setSecurityToken (ShiroSecurityToken securityToken)
specifier|public
name|void
name|setSecurityToken
parameter_list|(
name|ShiroSecurityToken
name|securityToken
parameter_list|)
block|{
name|this
operator|.
name|securityToken
operator|=
name|securityToken
expr_stmt|;
block|}
DECL|method|getSecurityToken ()
specifier|public
name|ShiroSecurityToken
name|getSecurityToken
parameter_list|()
block|{
return|return
name|securityToken
return|;
block|}
DECL|method|getCipherService ()
specifier|public
name|CipherService
name|getCipherService
parameter_list|()
block|{
return|return
name|cipherService
return|;
block|}
DECL|method|setCipherService (CipherService cipherService)
specifier|public
name|void
name|setCipherService
parameter_list|(
name|CipherService
name|cipherService
parameter_list|)
block|{
name|this
operator|.
name|cipherService
operator|=
name|cipherService
expr_stmt|;
block|}
DECL|method|isBase64 ()
specifier|public
name|boolean
name|isBase64
parameter_list|()
block|{
return|return
name|base64
return|;
block|}
DECL|method|setBase64 (boolean base64)
specifier|public
name|void
name|setBase64
parameter_list|(
name|boolean
name|base64
parameter_list|)
block|{
name|this
operator|.
name|base64
operator|=
name|base64
expr_stmt|;
block|}
block|}
end_class

end_unit

