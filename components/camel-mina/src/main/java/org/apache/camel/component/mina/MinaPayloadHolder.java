begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mina
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mina
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_comment
comment|/**  * Holder object for sending an exchange over the wire using the MINA ObjectSerializationCodecFactory codec.  * This is configured using the<tt>transferExchange=true</tt> option for the TCP protocol.  *<p/>  * As opposed to normal usage of camel-mina where only the body part of the exchange is transfered, this holder  * object serializes the following fields over the wire:  *<ul>  *<li>in body</li>  *<li>out body</li>  *<li>in headers</li>  *<li>out headers</li>  *<li>exchange properties</li>  *<li>exception</li>  *</ul>  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|MinaPayloadHolder
specifier|public
class|class
name|MinaPayloadHolder
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|inBody
specifier|private
name|Object
name|inBody
decl_stmt|;
DECL|field|outBody
specifier|private
name|Object
name|outBody
decl_stmt|;
DECL|field|inHeaders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|inHeaders
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|outHeaders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outHeaders
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|exception
specifier|private
name|Throwable
name|exception
decl_stmt|;
comment|/**      * Creates a payload object with the information from the given exchange.      *      * @param exchange     the exchange      * @return the holder object with information copied form the exchange      */
DECL|method|marshal (Exchange exchange)
specifier|public
specifier|static
name|MinaPayloadHolder
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|MinaPayloadHolder
name|payload
init|=
operator|new
name|MinaPayloadHolder
argument_list|()
decl_stmt|;
name|payload
operator|.
name|inBody
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getOut
argument_list|(
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|payload
operator|.
name|outBody
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
name|payload
operator|.
name|inHeaders
operator|.
name|putAll
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|payload
operator|.
name|outHeaders
operator|.
name|putAll
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|payload
operator|.
name|properties
operator|.
name|putAll
argument_list|(
name|exchange
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|payload
operator|.
name|exception
operator|=
name|exchange
operator|.
name|getException
argument_list|()
expr_stmt|;
return|return
name|payload
return|;
block|}
comment|/**      * Transfers the information from the payload to the exchange.      *      * @param exchange   the exchange to set values from the payload      * @param payload    the payload with the values      */
DECL|method|unmarshal (Exchange exchange, MinaPayloadHolder payload)
specifier|public
specifier|static
name|void
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MinaPayloadHolder
name|payload
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|payload
operator|.
name|inBody
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|payload
operator|.
name|outBody
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|payload
operator|.
name|inHeaders
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|payload
operator|.
name|outHeaders
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|payload
operator|.
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|payload
operator|.
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setException
argument_list|(
name|payload
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MinaPayloadHolder{"
operator|+
literal|"inBody="
operator|+
name|inBody
operator|+
literal|", outBody="
operator|+
name|outBody
operator|+
literal|", inHeaders="
operator|+
name|inHeaders
operator|+
literal|", outHeaders="
operator|+
name|outHeaders
operator|+
literal|", properties="
operator|+
name|properties
operator|+
literal|", exception="
operator|+
name|exception
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

