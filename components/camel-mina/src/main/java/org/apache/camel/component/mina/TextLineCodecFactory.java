begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mina
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mina
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|textline
operator|.
name|LineDelimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|textline
operator|.
name|TextLineDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|textline
operator|.
name|TextLineEncoder
import|;
end_import

begin_comment
comment|/**  * Text line codec that supports setting charset and delimiter.  *<p/>  * Uses Mina's default TextLineEncoder and TextLineDncoder.   */
end_comment

begin_class
DECL|class|TextLineCodecFactory
specifier|public
class|class
name|TextLineCodecFactory
implements|implements
name|ProtocolCodecFactory
block|{
DECL|field|encoder
specifier|private
name|ProtocolEncoder
name|encoder
decl_stmt|;
DECL|field|decoder
specifier|private
name|ProtocolDecoder
name|decoder
decl_stmt|;
DECL|method|TextLineCodecFactory (Charset charset, LineDelimiter delimiter)
specifier|public
name|TextLineCodecFactory
parameter_list|(
name|Charset
name|charset
parameter_list|,
name|LineDelimiter
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|delimiter
operator|.
name|equals
argument_list|(
name|LineDelimiter
operator|.
name|AUTO
argument_list|)
condition|)
block|{
comment|// AUTO not supported by encoder
name|encoder
operator|=
operator|new
name|TextLineEncoder
argument_list|(
name|charset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|encoder
operator|=
operator|new
name|TextLineEncoder
argument_list|(
name|charset
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
name|decoder
operator|=
operator|new
name|TextLineDecoder
argument_list|(
name|charset
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
DECL|method|getEncoder ()
specifier|public
name|ProtocolEncoder
name|getEncoder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|encoder
return|;
block|}
DECL|method|getDecoder ()
specifier|public
name|ProtocolDecoder
name|getDecoder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|decoder
return|;
block|}
block|}
end_class

end_unit

