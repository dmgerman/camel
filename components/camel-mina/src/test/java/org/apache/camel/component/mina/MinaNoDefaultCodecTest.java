begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mina
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mina
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|IoFilterChain
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * For unit testing the<tt>noDefaultCodec</tt> option.  */
end_comment

begin_class
DECL|class|MinaNoDefaultCodecTest
specifier|public
class|class
name|MinaNoDefaultCodecTest
extends|extends
name|BaseMinaTest
block|{
DECL|field|port1
name|int
name|port1
decl_stmt|;
DECL|field|port2
name|int
name|port2
decl_stmt|;
annotation|@
name|Test
DECL|method|testFilter ()
specifier|public
name|void
name|testFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|port1
operator|=
name|getPort
argument_list|()
expr_stmt|;
name|port2
operator|=
name|getNextPort
argument_list|()
expr_stmt|;
specifier|final
name|String
name|uri1
init|=
literal|"mina:tcp://localhost:"
operator|+
name|port1
operator|+
literal|"?allowDefaultCodec=false"
decl_stmt|;
specifier|final
name|String
name|uri2
init|=
literal|"mina:tcp://localhost:"
operator|+
name|port2
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|uri1
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|uri2
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MinaEndpoint
name|endpoint1
init|=
operator|(
name|MinaEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri1
argument_list|)
decl_stmt|;
name|MinaEndpoint
name|endpoint2
init|=
operator|(
name|MinaEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
name|uri2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|filters1
init|=
name|endpoint1
operator|.
name|getAcceptorConfig
argument_list|()
operator|.
name|getFilterChain
argument_list|()
operator|.
name|getAll
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Entry
argument_list|>
name|filters2
init|=
name|endpoint2
operator|.
name|getAcceptorConfig
argument_list|()
operator|.
name|getFilterChain
argument_list|()
operator|.
name|getAll
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|filters1
operator|.
name|size
argument_list|()
operator|<
name|filters2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

