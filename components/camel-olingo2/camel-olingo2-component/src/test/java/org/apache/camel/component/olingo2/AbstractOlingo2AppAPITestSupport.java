begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|Olingo2ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|entry
operator|.
name|ODataEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|feed
operator|.
name|ODataDeltaFeed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|feed
operator|.
name|ODataFeed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|// CHECKSTYLE:OFF
end_comment

begin_class
DECL|class|AbstractOlingo2AppAPITestSupport
specifier|public
class|class
name|AbstractOlingo2AppAPITestSupport
block|{
DECL|field|SERVICE_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"MyFormula.svc"
decl_stmt|;
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Olingo2AppAPITest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PORT
specifier|protected
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|TIMEOUT
specifier|protected
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|100000
decl_stmt|;
DECL|field|MANUFACTURERS
specifier|protected
specifier|static
specifier|final
name|String
name|MANUFACTURERS
init|=
literal|"Manufacturers"
decl_stmt|;
DECL|field|FQN_MANUFACTURERS
specifier|protected
specifier|static
specifier|final
name|String
name|FQN_MANUFACTURERS
init|=
literal|"DefaultContainer.Manufacturers"
decl_stmt|;
DECL|field|ADDRESS
specifier|protected
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"Address"
decl_stmt|;
DECL|field|CARS
specifier|protected
specifier|static
specifier|final
name|String
name|CARS
init|=
literal|"Cars"
decl_stmt|;
DECL|field|TEST_KEY
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_KEY
init|=
literal|"'1'"
decl_stmt|;
DECL|field|TEST_CREATE_KEY
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_CREATE_KEY
init|=
literal|"'123'"
decl_stmt|;
DECL|field|TEST_MANUFACTURER
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER
init|=
name|FQN_MANUFACTURERS
operator|+
literal|"("
operator|+
name|TEST_KEY
operator|+
literal|")"
decl_stmt|;
DECL|field|TEST_CREATE_MANUFACTURER
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_CREATE_MANUFACTURER
init|=
name|MANUFACTURERS
operator|+
literal|"("
operator|+
name|TEST_CREATE_KEY
operator|+
literal|")"
decl_stmt|;
DECL|field|TEST_RESOURCE_CONTENT_ID
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_RESOURCE_CONTENT_ID
init|=
literal|"1"
decl_stmt|;
DECL|field|TEST_RESOURCE
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_RESOURCE
init|=
literal|"$"
operator|+
name|TEST_RESOURCE_CONTENT_ID
decl_stmt|;
DECL|field|NEW_LINE
specifier|protected
specifier|static
specifier|final
name|char
name|NEW_LINE
init|=
literal|'\n'
decl_stmt|;
DECL|field|TEST_CAR
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_CAR
init|=
literal|"Manufacturers('1')/Cars('1')"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_FOUNDED_PROPERTY
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_FOUNDED_PROPERTY
init|=
literal|"Manufacturers('1')/Founded"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_FOUNDED_VALUE
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_FOUNDED_VALUE
init|=
literal|"Manufacturers('1')/Founded/$value"
decl_stmt|;
DECL|field|FOUNDED_PROPERTY
specifier|protected
specifier|static
specifier|final
name|String
name|FOUNDED_PROPERTY
init|=
literal|"Founded"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_ADDRESS_PROPERTY
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_ADDRESS_PROPERTY
init|=
literal|"Manufacturers('1')/Address"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_LINKS_CARS
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_LINKS_CARS
init|=
literal|"Manufacturers('1')/$links/Cars"
decl_stmt|;
DECL|field|TEST_CAR_LINK_MANUFACTURER
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_CAR_LINK_MANUFACTURER
init|=
literal|"Cars('1')/$links/Manufacturer"
decl_stmt|;
DECL|field|COUNT_OPTION
specifier|protected
specifier|static
specifier|final
name|String
name|COUNT_OPTION
init|=
literal|"/$count"
decl_stmt|;
DECL|field|TEST_SERVICE_URL
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_SERVICE_URL
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/"
operator|+
name|SERVICE_NAME
decl_stmt|;
DECL|field|TEST_FORMAT
specifier|protected
specifier|static
specifier|final
name|ContentType
name|TEST_FORMAT
init|=
name|ContentType
operator|.
name|APPLICATION_JSON
decl_stmt|;
DECL|field|TEST_FORMAT_STRING
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_FORMAT_STRING
init|=
name|TEST_FORMAT
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|ID_PROPERTY
specifier|protected
specifier|static
specifier|final
name|String
name|ID_PROPERTY
init|=
literal|"Id"
decl_stmt|;
DECL|method|getEntityData ()
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getEntityData
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|ID_PROPERTY
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|FOUNDED_PROPERTY
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"ZipCode"
argument_list|,
literal|"42421"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"City"
argument_list|,
literal|"Fairy City"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Country"
argument_list|,
literal|"FarFarAway"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|ADDRESS
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|indent (StringBuilder builder, int indentLevel)
specifier|protected
specifier|static
name|void
name|indent
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|int
name|indentLevel
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indentLevel
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prettyPrint (ODataFeed dataFeed)
specifier|protected
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|ODataFeed
name|dataFeed
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"[\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ODataEntry
name|entry
range|:
name|dataFeed
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prettyPrint
argument_list|(
name|entry
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|prettyPrint (ODataEntry createdEntry)
specifier|protected
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|ODataEntry
name|createdEntry
parameter_list|)
block|{
return|return
name|prettyPrint
argument_list|(
name|createdEntry
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|prettyPrint (Map<String, Object> properties, int level)
specifier|protected
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|properties
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|indent
argument_list|(
name|b
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|objectMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
name|value
operator|=
name|prettyPrint
argument_list|(
name|objectMap
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
block|{
name|Calendar
name|cal
init|=
operator|(
name|Calendar
operator|)
name|value
decl_stmt|;
name|value
operator|=
name|DateFormat
operator|.
name|getInstance
argument_list|()
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ODataDeltaFeed
condition|)
block|{
name|ODataDeltaFeed
name|feed
init|=
operator|(
name|ODataDeltaFeed
operator|)
name|value
decl_stmt|;
name|List
argument_list|<
name|ODataEntry
argument_list|>
name|inlineEntries
init|=
name|feed
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|ODataEntry
name|oDataEntry
range|:
name|inlineEntries
control|)
block|{
name|value
operator|=
name|prettyPrint
argument_list|(
name|oDataEntry
operator|.
name|getProperties
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n[\n"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n],"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|deleteCharAt
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|indent
argument_list|(
name|b
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove last line break
name|b
operator|.
name|deleteCharAt
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|TestOlingo2ResponseHandler
specifier|protected
specifier|static
specifier|final
class|class
name|TestOlingo2ResponseHandler
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|response
specifier|private
name|T
name|response
decl_stmt|;
DECL|field|error
specifier|private
name|Exception
name|error
decl_stmt|;
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onResponse (T response, Map<String, String> responseHeaders)
specifier|public
name|void
name|onResponse
parameter_list|(
name|T
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|responseHeaders
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|instanceof
name|ODataFeed
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: {}"
argument_list|,
name|prettyPrint
argument_list|(
operator|(
name|ODataFeed
operator|)
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|response
operator|instanceof
name|ODataEntry
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: {}"
argument_list|,
name|prettyPrint
argument_list|(
operator|(
name|ODataEntry
operator|)
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onException (Exception ex)
specifier|public
name|void
name|onException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|error
operator|=
name|ex
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCanceled ()
specifier|public
name|void
name|onCanceled
parameter_list|()
block|{
name|error
operator|=
operator|new
name|IllegalStateException
argument_list|(
literal|"Request Canceled"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|await ()
specifier|public
name|T
name|await
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|await (long timeout, TimeUnit unit)
specifier|public
name|T
name|await
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Timeout waiting for response"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|assertNotNull
argument_list|(
literal|"Response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
name|error
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

