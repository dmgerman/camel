begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|Olingo2App
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|Olingo2ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|impl
operator|.
name|Olingo2AppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|impl
operator|.
name|SystemQueryOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|commons
operator|.
name|HttpStatusCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|Edm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmEntitySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmEntitySetInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProviderReadProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|entry
operator|.
name|ODataEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|feed
operator|.
name|ODataDeltaFeed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|feed
operator|.
name|ODataFeed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|servicedocument
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|servicedocument
operator|.
name|ServiceDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Integration test for {@link org.apache.camel.component.olingo2.api.impl.Olingo2AppImpl}  * using the sample Olingo2 Server dynamically downloaded and started during the test.  */
end_comment

begin_class
DECL|class|Olingo2AppAPITest
specifier|public
class|class
name|Olingo2AppAPITest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Olingo2AppAPITest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PORT
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|TIMEOUT
init|=
literal|10
decl_stmt|;
DECL|field|MANUFACTURERS
specifier|private
specifier|static
specifier|final
name|String
name|MANUFACTURERS
init|=
literal|"Manufacturers"
decl_stmt|;
DECL|field|FQN_MANUFACTURERS
specifier|private
specifier|static
specifier|final
name|String
name|FQN_MANUFACTURERS
init|=
literal|"DefaultContainer.Manufacturers"
decl_stmt|;
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"Address"
decl_stmt|;
DECL|field|CARS
specifier|private
specifier|static
specifier|final
name|String
name|CARS
init|=
literal|"Cars"
decl_stmt|;
DECL|field|TEST_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_KEY
init|=
literal|"'1'"
decl_stmt|;
DECL|field|TEST_CREATE_KEY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CREATE_KEY
init|=
literal|"'123'"
decl_stmt|;
DECL|field|TEST_MANUFACTURER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER
init|=
name|FQN_MANUFACTURERS
operator|+
literal|"("
operator|+
name|TEST_KEY
operator|+
literal|")"
decl_stmt|;
DECL|field|TEST_CREATE_MANUFACTURER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CREATE_MANUFACTURER
init|=
name|MANUFACTURERS
operator|+
literal|"("
operator|+
name|TEST_CREATE_KEY
operator|+
literal|")"
decl_stmt|;
DECL|field|TEST_RESOURCE_CONTENT_ID
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCE_CONTENT_ID
init|=
literal|"1"
decl_stmt|;
DECL|field|TEST_RESOURCE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCE
init|=
literal|"$"
operator|+
name|TEST_RESOURCE_CONTENT_ID
decl_stmt|;
DECL|field|NEW_LINE
specifier|private
specifier|static
specifier|final
name|char
name|NEW_LINE
init|=
literal|'\n'
decl_stmt|;
DECL|field|TEST_CAR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CAR
init|=
literal|"Manufacturers('1')/Cars('1')"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_FOUNDED_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_FOUNDED_PROPERTY
init|=
literal|"Manufacturers('1')/Founded"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_FOUNDED_VALUE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_FOUNDED_VALUE
init|=
literal|"Manufacturers('1')/Founded/$value"
decl_stmt|;
DECL|field|FOUNDED_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|FOUNDED_PROPERTY
init|=
literal|"Founded"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_ADDRESS_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_ADDRESS_PROPERTY
init|=
literal|"Manufacturers('1')/Address"
decl_stmt|;
DECL|field|TEST_MANUFACTURER_LINKS_CARS
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER_LINKS_CARS
init|=
literal|"Manufacturers('1')/$links/Cars"
decl_stmt|;
DECL|field|TEST_CAR_LINK_MANUFACTURER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CAR_LINK_MANUFACTURER
init|=
literal|"Cars('1')/$links/Manufacturer"
decl_stmt|;
DECL|field|COUNT_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|COUNT_OPTION
init|=
literal|"/$count"
decl_stmt|;
DECL|field|TEST_SERVICE_URL
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SERVICE_URL
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/MyFormula.svc"
decl_stmt|;
comment|//    private static final String TEST_SERVICE_URL = "http://localhost:8080/cars-annotations-sample/MyFormula.svc";
comment|//    private static final ContentType TEST_FORMAT = ContentType.APPLICATION_XML_CS_UTF_8;
DECL|field|TEST_FORMAT
specifier|private
specifier|static
specifier|final
name|ContentType
name|TEST_FORMAT
init|=
name|ContentType
operator|.
name|APPLICATION_JSON
decl_stmt|;
DECL|field|TEST_FORMAT_STRING
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FORMAT_STRING
init|=
name|TEST_FORMAT
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//    private static final Pattern LINK_PATTERN = Pattern.compile("[^(]+\\('([^']+)'\\)");
DECL|field|ID_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|ID_PROPERTY
init|=
literal|"Id"
decl_stmt|;
DECL|field|olingoApp
specifier|private
specifier|static
name|Olingo2App
name|olingoApp
decl_stmt|;
DECL|field|edm
specifier|private
specifier|static
name|Edm
name|edm
decl_stmt|;
DECL|field|edmEntitySetMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|EdmEntitySet
argument_list|>
name|edmEntitySetMap
decl_stmt|;
DECL|field|server
specifier|private
specifier|static
name|Olingo2SampleServer
name|server
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|startServers
argument_list|(
name|PORT
argument_list|)
expr_stmt|;
name|Olingo2SampleServer
operator|.
name|generateSampleData
argument_list|(
name|TEST_SERVICE_URL
argument_list|)
expr_stmt|;
name|setupClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|olingoApp
operator|!=
literal|null
condition|)
block|{
name|olingoApp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startServers (int port)
specifier|protected
specifier|static
name|void
name|startServers
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|server
operator|=
operator|new
name|Olingo2SampleServer
argument_list|(
name|port
argument_list|,
literal|"/olingo2_ref"
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|setupClient ()
specifier|protected
specifier|static
name|void
name|setupClient
parameter_list|()
throws|throws
name|Exception
block|{
name|olingoApp
operator|=
operator|new
name|Olingo2AppImpl
argument_list|(
name|TEST_SERVICE_URL
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|olingoApp
operator|.
name|setContentType
argument_list|(
name|TEST_FORMAT_STRING
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read Edm "
argument_list|)
expr_stmt|;
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|Edm
argument_list|>
name|responseHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
literal|null
argument_list|,
name|Olingo2AppImpl
operator|.
name|METADATA
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
name|edm
operator|=
name|responseHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read default EntityContainer:  {}"
argument_list|,
name|responseHandler
operator|.
name|await
argument_list|()
operator|.
name|getDefaultEntityContainer
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|edmEntitySetMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|EdmEntitySet
name|ees
range|:
name|edm
operator|.
name|getEntitySets
argument_list|()
control|)
block|{
name|edmEntitySetMap
operator|.
name|put
argument_list|(
name|ees
operator|.
name|getName
argument_list|()
argument_list|,
name|ees
argument_list|)
expr_stmt|;
block|}
comment|// wait for generated data to be registered in server
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServiceDocument ()
specifier|public
name|void
name|testServiceDocument
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|ServiceDocument
argument_list|>
name|responseHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
specifier|final
name|ServiceDocument
name|serviceDocument
init|=
name|responseHandler
operator|.
name|await
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Collection
argument_list|>
name|collections
init|=
name|serviceDocument
operator|.
name|getAtomInfo
argument_list|()
operator|.
name|getWorkspaces
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCollections
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Service Atom Collections"
argument_list|,
literal|3
argument_list|,
name|collections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service Atom Collections:  {}"
argument_list|,
name|collections
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|EdmEntitySetInfo
argument_list|>
name|entitySetsInfo
init|=
name|serviceDocument
operator|.
name|getEntitySetsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Service Entity Sets"
argument_list|,
literal|3
argument_list|,
name|entitySetsInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service Document Entries:  {}"
argument_list|,
name|entitySetsInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadFeed ()
specifier|public
name|void
name|testReadFeed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|ODataFeed
argument_list|>
name|responseHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|MANUFACTURERS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
specifier|final
name|ODataFeed
name|dataFeed
init|=
name|responseHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Data feed"
argument_list|,
name|dataFeed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Entries:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|dataFeed
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadUnparsedFeed ()
specifier|public
name|void
name|testReadUnparsedFeed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|InputStream
argument_list|>
name|responseHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|uread
argument_list|(
name|edm
argument_list|,
name|MANUFACTURERS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
specifier|final
name|InputStream
name|rawfeed
init|=
name|responseHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Data feed"
argument_list|,
name|rawfeed
argument_list|)
expr_stmt|;
comment|// for this test, we just let EP to verify the stream data
specifier|final
name|ODataFeed
name|dataFeed
init|=
name|EntityProvider
operator|.
name|readFeed
argument_list|(
name|TEST_FORMAT_STRING
argument_list|,
name|edmEntitySetMap
operator|.
name|get
argument_list|(
name|MANUFACTURERS
argument_list|)
argument_list|,
name|rawfeed
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Entries:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|dataFeed
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadEntry ()
specifier|public
name|void
name|testReadEntry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|ODataEntry
argument_list|>
name|responseHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
name|ODataEntry
name|entry
init|=
name|responseHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single Entry:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|responseHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_CAR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
name|entry
operator|=
name|responseHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single Entry:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|responseHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|queryParams
operator|.
name|put
argument_list|(
name|SystemQueryOption
operator|.
name|$expand
operator|.
name|toString
argument_list|()
argument_list|,
name|CARS
argument_list|)
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER
argument_list|,
name|queryParams
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
name|ODataEntry
name|entryExpanded
init|=
name|responseHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single Entry with expanded Cars relation:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|entryExpanded
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadUnparsedEntry ()
specifier|public
name|void
name|testReadUnparsedEntry
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|InputStream
argument_list|>
name|responseHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|uread
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
name|InputStream
name|rawentry
init|=
name|responseHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|ODataEntry
name|entry
init|=
name|EntityProvider
operator|.
name|readEntry
argument_list|(
name|TEST_FORMAT_STRING
argument_list|,
name|edmEntitySetMap
operator|.
name|get
argument_list|(
name|MANUFACTURERS
argument_list|)
argument_list|,
name|rawentry
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single Entry:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|responseHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|uread
argument_list|(
name|edm
argument_list|,
name|TEST_CAR
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
name|rawentry
operator|=
name|responseHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|entry
operator|=
name|EntityProvider
operator|.
name|readEntry
argument_list|(
name|TEST_FORMAT_STRING
argument_list|,
name|edmEntitySetMap
operator|.
name|get
argument_list|(
name|CARS
argument_list|)
argument_list|,
name|rawentry
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single Entry:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|responseHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|queryParams
operator|.
name|put
argument_list|(
name|SystemQueryOption
operator|.
name|$expand
operator|.
name|toString
argument_list|()
argument_list|,
name|CARS
argument_list|)
expr_stmt|;
name|olingoApp
operator|.
name|uread
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER
argument_list|,
name|queryParams
argument_list|,
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
name|rawentry
operator|=
name|responseHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|ODataEntry
name|entryExpanded
init|=
name|EntityProvider
operator|.
name|readEntry
argument_list|(
name|TEST_FORMAT_STRING
argument_list|,
name|edmEntitySetMap
operator|.
name|get
argument_list|(
name|MANUFACTURERS
argument_list|)
argument_list|,
name|rawentry
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Single Entry with expanded Cars relation:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|entryExpanded
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadUpdateProperties ()
specifier|public
name|void
name|testReadUpdateProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test simple property Manufacturer.Founded
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propertyHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_FOUNDED_PROPERTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|propertyHandler
argument_list|)
expr_stmt|;
name|Calendar
name|founded
init|=
operator|(
name|Calendar
operator|)
name|propertyHandler
operator|.
name|await
argument_list|()
operator|.
name|get
argument_list|(
name|FOUNDED_PROPERTY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Founded property {}"
argument_list|,
name|founded
argument_list|)
expr_stmt|;
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|Calendar
argument_list|>
name|valueHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_FOUNDED_VALUE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|valueHandler
argument_list|)
expr_stmt|;
name|founded
operator|=
name|valueHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Founded property {}"
argument_list|,
name|founded
argument_list|)
expr_stmt|;
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|HttpStatusCodes
argument_list|>
name|statusHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|FOUNDED_PROPERTY
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
comment|//        olingoApp.update(edm, TEST_MANUFACTURER_FOUNDED_PROPERTY, properties, statusHandler);
comment|// requires a plain Date for XML
name|olingoApp
operator|.
name|update
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_FOUNDED_PROPERTY
argument_list|,
literal|null
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Founded property updated with status {}"
argument_list|,
name|statusHandler
operator|.
name|await
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|statusHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|update
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_FOUNDED_VALUE
argument_list|,
literal|null
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Founded property updated with status {}"
argument_list|,
name|statusHandler
operator|.
name|await
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// test complex property Manufacturer.Address
name|propertyHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_ADDRESS_PROPERTY
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|propertyHandler
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
name|propertyHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address property {}"
argument_list|,
name|prettyPrint
argument_list|(
name|address
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|statusHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|address
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Olingo2 sample server MERGE/PATCH behaves like PUT!!!
comment|//        address.put("Street", "Main Street");
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Star Street 137"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"City"
argument_list|,
literal|"Stuttgart"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"ZipCode"
argument_list|,
literal|"70173"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Country"
argument_list|,
literal|"Germany"
argument_list|)
expr_stmt|;
comment|//        olingoApp.patch(edm, TEST_MANUFACTURER_ADDRESS_PROPERTY, address, statusHandler);
name|olingoApp
operator|.
name|merge
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_ADDRESS_PROPERTY
argument_list|,
literal|null
argument_list|,
name|address
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Address property updated with status {}"
argument_list|,
name|statusHandler
operator|.
name|await
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadDeleteCreateLinks ()
specifier|public
name|void
name|testReadDeleteCreateLinks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|linksHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_LINKS_CARS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|linksHandler
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|links
init|=
name|linksHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|links
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read links: {}"
argument_list|,
name|links
argument_list|)
expr_stmt|;
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|String
argument_list|>
name|linkHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_CAR_LINK_MANUFACTURER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|linkHandler
argument_list|)
expr_stmt|;
specifier|final
name|String
name|link
init|=
name|linkHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read link: {}"
argument_list|,
name|link
argument_list|)
expr_stmt|;
comment|//Deleting relationships through links is not supported in Olingo2 at the time of writing this test
comment|/*         final TestOlingo2ResponseHandler<HttpStatusCodes> statusHandler =             new TestOlingo2ResponseHandler<HttpStatusCodes>();          final ArrayList<Map<String, Object>> carKeys = new ArrayList<Map<String, Object>>();         for (String carLink : links) {             final Matcher matcher = LINK_PATTERN.matcher(carLink);             assertTrue("Link pattern " + carLink, matcher.matches());             final String carId = matcher.group(1);              final HashMap<String, Object> keys = new HashMap<String, Object>();             keys.put(ID_PROPERTY, carId);             carKeys.add(keys);              // delete manufacturer->car link             statusHandler.reset();             final String resourcePath = TEST_MANUFACTURER_LINKS_CARS + "('" + carId + "')";             olingoApp.delete(resourcePath, statusHandler);              assertEquals("Delete car link " + resourcePath, HttpStatusCodes.OK.getStatusCode(),                 statusHandler.await().getStatusCode());         }          // add links to all Cars         statusHandler.reset();         olingoApp.create(edm, TEST_MANUFACTURER_LINKS_CARS, carKeys, statusHandler);          assertEquals("Links update", HttpStatusCodes.ACCEPTED.getStatusCode(), statusHandler.await().getStatusCode());          // delete car->manufacturer link         statusHandler.reset();         olingoApp.delete(TEST_CAR_LINK_MANUFACTURER, statusHandler);          assertEquals("Delete manufacturer link " + TEST_CAR_LINK_MANUFACTURER, HttpStatusCodes.OK.getStatusCode(),             statusHandler.await().getStatusCode());          // add link to Manufacturer         statusHandler.reset();         final HashMap<String, Object> manufacturerKey = new HashMap<String, Object>();         manufacturerKey.put(ID_PROPERTY, "1");          olingoApp.create(edm, TEST_CAR_LINK_MANUFACTURER, manufacturerKey, statusHandler);          assertEquals("Link update", HttpStatusCodes.ACCEPTED.getStatusCode(), statusHandler.await().getStatusCode()); */
block|}
annotation|@
name|Test
DECL|method|testReadCount ()
specifier|public
name|void
name|testReadCount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|Long
argument_list|>
name|countHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|MANUFACTURERS
operator|+
name|COUNT_OPTION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|countHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Manufacturers count: {}"
argument_list|,
name|countHandler
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|countHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER
operator|+
name|COUNT_OPTION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|countHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Manufacturer count: {}"
argument_list|,
name|countHandler
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|countHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_MANUFACTURER_LINKS_CARS
operator|+
name|COUNT_OPTION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|countHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Manufacturers links count: {}"
argument_list|,
name|countHandler
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
name|countHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_CAR_LINK_MANUFACTURER
operator|+
name|COUNT_OPTION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|countHandler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Manufacturer link count: {}"
argument_list|,
name|countHandler
operator|.
name|await
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateUpdateDeleteEntry ()
specifier|public
name|void
name|testCreateUpdateDeleteEntry
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create entry to update
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|ODataEntry
argument_list|>
name|entryHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|create
argument_list|(
name|edm
argument_list|,
name|MANUFACTURERS
argument_list|,
literal|null
argument_list|,
name|getEntityData
argument_list|()
argument_list|,
name|entryHandler
argument_list|)
expr_stmt|;
name|ODataEntry
name|createdEntry
init|=
name|entryHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created Entry:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|createdEntry
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|getEntityData
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
name|ADDRESS
argument_list|)
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Renamed"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main Street"
argument_list|)
expr_stmt|;
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|HttpStatusCodes
argument_list|>
name|statusHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|olingoApp
operator|.
name|update
argument_list|(
name|edm
argument_list|,
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
name|data
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|statusHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|statusHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Patched"
argument_list|)
expr_stmt|;
name|olingoApp
operator|.
name|patch
argument_list|(
name|edm
argument_list|,
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
name|data
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|statusHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|entryHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|entryHandler
argument_list|)
expr_stmt|;
name|ODataEntry
name|updatedEntry
init|=
name|entryHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated Entry successfully:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|updatedEntry
argument_list|)
argument_list|)
expr_stmt|;
name|statusHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|delete
argument_list|(
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|HttpStatusCodes
name|statusCode
init|=
name|statusHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deletion of Entry was successful:  {}: {}"
argument_list|,
name|statusCode
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|statusCode
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verify Delete Entry"
argument_list|)
expr_stmt|;
name|entryHandler
operator|.
name|reset
argument_list|()
expr_stmt|;
name|olingoApp
operator|.
name|read
argument_list|(
name|edm
argument_list|,
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|entryHandler
argument_list|)
expr_stmt|;
name|entryHandler
operator|.
name|await
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Entry not deleted!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted entry not found: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBatchRequest ()
specifier|public
name|void
name|testBatchRequest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Olingo2BatchRequest
argument_list|>
name|batchParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Edm query
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|Olingo2AppImpl
operator|.
name|METADATA
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// feed query
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|MANUFACTURERS
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// read
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_MANUFACTURER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// read with expand
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|queryParams
operator|.
name|put
argument_list|(
name|SystemQueryOption
operator|.
name|$expand
operator|.
name|toString
argument_list|()
argument_list|,
name|CARS
argument_list|)
expr_stmt|;
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_MANUFACTURER
argument_list|)
operator|.
name|queryParams
argument_list|(
name|queryParams
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// create
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|getEntityData
argument_list|()
decl_stmt|;
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchChangeRequest
operator|.
name|resourcePath
argument_list|(
name|MANUFACTURERS
argument_list|)
operator|.
name|contentId
argument_list|(
name|TEST_RESOURCE_CONTENT_ID
argument_list|)
operator|.
name|operation
argument_list|(
name|Operation
operator|.
name|CREATE
argument_list|)
operator|.
name|body
argument_list|(
name|data
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// update
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updateData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|data
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|updateData
operator|.
name|get
argument_list|(
name|ADDRESS
argument_list|)
decl_stmt|;
name|updateData
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Renamed"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main Street"
argument_list|)
expr_stmt|;
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchChangeRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_RESOURCE
argument_list|)
operator|.
name|operation
argument_list|(
name|Operation
operator|.
name|UPDATE
argument_list|)
operator|.
name|body
argument_list|(
name|updateData
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchChangeRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_RESOURCE
argument_list|)
operator|.
name|operation
argument_list|(
name|Operation
operator|.
name|DELETE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TestOlingo2ResponseHandler
argument_list|<
name|List
argument_list|<
name|Olingo2BatchResponse
argument_list|>
argument_list|>
name|responseHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
comment|// read to verify delete
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_CREATE_MANUFACTURER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|olingoApp
operator|.
name|batch
argument_list|(
name|edm
argument_list|,
literal|null
argument_list|,
name|batchParts
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Olingo2BatchResponse
argument_list|>
name|responseParts
init|=
name|responseHandler
operator|.
name|await
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Batch responses expected"
argument_list|,
literal|8
argument_list|,
name|responseParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|responseParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ODataFeed
name|feed
init|=
operator|(
name|ODataFeed
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Batch feed:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|feed
argument_list|)
argument_list|)
expr_stmt|;
name|ODataEntry
name|dataEntry
init|=
operator|(
name|ODataEntry
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dataEntry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Batch read entry:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|dataEntry
argument_list|)
argument_list|)
expr_stmt|;
name|dataEntry
operator|=
operator|(
name|ODataEntry
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|dataEntry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Batch read entry with expand:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|dataEntry
argument_list|)
argument_list|)
expr_stmt|;
name|dataEntry
operator|=
operator|(
name|ODataEntry
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|dataEntry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Batch create entry:  {}"
argument_list|,
name|prettyPrint
argument_list|(
name|dataEntry
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|responseParts
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|responseParts
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NOT_FOUND
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|responseParts
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Exception
name|exception
init|=
operator|(
name|Exception
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Batch retrieve deleted entry:  {}"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
DECL|method|getEntityData ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getEntityData
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|ID_PROPERTY
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|FOUNDED_PROPERTY
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"ZipCode"
argument_list|,
literal|"42421"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"City"
argument_list|,
literal|"Fairy City"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Country"
argument_list|,
literal|"FarFarAway"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|ADDRESS
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|prettyPrint (ODataFeed dataFeed)
specifier|private
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|ODataFeed
name|dataFeed
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"[\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ODataEntry
name|entry
range|:
name|dataFeed
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|prettyPrint
argument_list|(
name|entry
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|prettyPrint (ODataEntry createdEntry)
specifier|private
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|ODataEntry
name|createdEntry
parameter_list|)
block|{
return|return
name|prettyPrint
argument_list|(
name|createdEntry
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|prettyPrint (Map<String, Object> properties, int level)
specifier|private
specifier|static
name|String
name|prettyPrint
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|properties
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|indent
argument_list|(
name|b
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|objectMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|value
decl_stmt|;
name|value
operator|=
name|prettyPrint
argument_list|(
name|objectMap
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
block|{
name|Calendar
name|cal
init|=
operator|(
name|Calendar
operator|)
name|value
decl_stmt|;
name|value
operator|=
name|DateFormat
operator|.
name|getInstance
argument_list|()
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|ODataDeltaFeed
condition|)
block|{
name|ODataDeltaFeed
name|feed
init|=
operator|(
name|ODataDeltaFeed
operator|)
name|value
decl_stmt|;
name|List
argument_list|<
name|ODataEntry
argument_list|>
name|inlineEntries
init|=
name|feed
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
for|for
control|(
name|ODataEntry
name|oDataEntry
range|:
name|inlineEntries
control|)
block|{
name|value
operator|=
name|prettyPrint
argument_list|(
name|oDataEntry
operator|.
name|getProperties
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"\n[\n"
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n],"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|deleteCharAt
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|indent
argument_list|(
name|b
argument_list|,
name|level
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
name|NEW_LINE
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove last line break
name|b
operator|.
name|deleteCharAt
argument_list|(
name|b
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|indent (StringBuilder builder, int indentLevel)
specifier|private
specifier|static
name|void
name|indent
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|int
name|indentLevel
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indentLevel
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestOlingo2ResponseHandler
specifier|private
specifier|static
specifier|final
class|class
name|TestOlingo2ResponseHandler
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
block|{
DECL|field|response
specifier|private
name|T
name|response
decl_stmt|;
DECL|field|error
specifier|private
name|Exception
name|error
decl_stmt|;
DECL|field|latch
specifier|private
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|onResponse (T response, Map<String, String> responseHeaders)
specifier|public
name|void
name|onResponse
parameter_list|(
name|T
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|responseHeaders
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|instanceof
name|ODataFeed
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: {}"
argument_list|,
name|prettyPrint
argument_list|(
operator|(
name|ODataFeed
operator|)
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|response
operator|instanceof
name|ODataEntry
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: {}"
argument_list|,
name|prettyPrint
argument_list|(
operator|(
name|ODataEntry
operator|)
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onException (Exception ex)
specifier|public
name|void
name|onException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|error
operator|=
name|ex
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCanceled ()
specifier|public
name|void
name|onCanceled
parameter_list|()
block|{
name|error
operator|=
operator|new
name|IllegalStateException
argument_list|(
literal|"Request Canceled"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|await ()
specifier|public
name|T
name|await
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|await
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
DECL|method|await (long timeout, TimeUnit unit)
specifier|public
name|T
name|await
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Timeout waiting for response"
argument_list|,
name|latch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
name|error
throw|;
block|}
name|assertNotNull
argument_list|(
literal|"Response"
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
name|error
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

