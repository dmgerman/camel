begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|HttpUrl
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|mockwebserver
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|mockwebserver
operator|.
name|MockResponse
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|mockwebserver
operator|.
name|MockWebServer
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|mockwebserver
operator|.
name|RecordedRequest
import|;
end_import

begin_import
import|import
name|okio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|Olingo2App
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|impl
operator|.
name|Olingo2AppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|commons
operator|.
name|HttpStatusCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|commons
operator|.
name|ODataHttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|Edm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmEntityContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmEntitySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmServiceMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProviderWriteProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|processor
operator|.
name|ODataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|HttpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests support for concurrency properties which generate and require reading  * eTags before patch, update and delete operations. Since the embedded olingo2  * odata service does not contain any concurrency properties, it is necessary to  * mock up a new server. Uses a cutdown version of the reference odata service  * and adds in extra concurrency properties. Service's dispatcher only tests the  * correct calls are made and whether the eTags are correctly added as headers  * to the requisite requests.  */
end_comment

begin_class
DECL|class|Olingo2AppAPIETagEnabledTest
specifier|public
class|class
name|Olingo2AppAPIETagEnabledTest
extends|extends
name|AbstractOlingo2AppAPITestSupport
block|{
DECL|field|server
specifier|private
specifier|static
name|MockWebServer
name|server
decl_stmt|;
DECL|field|olingoApp
specifier|private
specifier|static
name|Olingo2App
name|olingoApp
decl_stmt|;
DECL|field|edm
specifier|private
specifier|static
name|Edm
name|edm
decl_stmt|;
DECL|field|manufacturersSet
specifier|private
specifier|static
name|EdmEntitySet
name|manufacturersSet
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|scaffold ()
specifier|public
specifier|static
name|void
name|scaffold
parameter_list|()
throws|throws
name|Exception
block|{
name|initEdm
argument_list|()
expr_stmt|;
name|initServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|unscaffold ()
specifier|public
specifier|static
name|void
name|unscaffold
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|olingoApp
operator|!=
literal|null
condition|)
block|{
name|olingoApp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initEdm ()
specifier|private
specifier|static
name|void
name|initEdm
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|edmXml
init|=
name|Olingo2AppAPIETagEnabledTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"etag-enabled-service.xml"
argument_list|)
decl_stmt|;
name|edm
operator|=
name|EntityProvider
operator|.
name|readMetadata
argument_list|(
name|edmXml
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|edm
argument_list|)
expr_stmt|;
name|EdmEntityContainer
name|entityContainer
init|=
name|edm
operator|.
name|getDefaultEntityContainer
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entityContainer
argument_list|)
expr_stmt|;
name|manufacturersSet
operator|=
name|entityContainer
operator|.
name|getEntitySet
argument_list|(
name|MANUFACTURERS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|manufacturersSet
argument_list|)
expr_stmt|;
name|EdmEntityType
name|entityType
init|=
name|manufacturersSet
operator|.
name|getEntityType
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entityType
argument_list|)
expr_stmt|;
comment|//
comment|// Check we have enabled eTag properties
comment|//
name|EdmProperty
name|property
init|=
operator|(
name|EdmProperty
operator|)
name|entityType
operator|.
name|getProperty
argument_list|(
literal|"Id"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|property
operator|.
name|getFacets
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initServer ()
specifier|private
specifier|static
name|void
name|initServer
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|=
operator|new
name|MockWebServer
argument_list|()
expr_stmt|;
comment|//
comment|// Init dispatcher prior to start of server
comment|//
name|server
operator|.
name|setDispatcher
argument_list|(
operator|new
name|Dispatcher
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
annotation|@
name|Override
specifier|public
name|MockResponse
name|dispatch
parameter_list|(
name|RecordedRequest
name|recordedRequest
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|MockResponse
name|mockResponse
init|=
operator|new
name|MockResponse
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|recordedRequest
operator|.
name|getMethod
argument_list|()
condition|)
block|{
case|case
name|HttpMethod
operator|.
name|GET
case|:
try|try
block|{
if|if
condition|(
name|recordedRequest
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|TEST_CREATE_MANUFACTURER
argument_list|)
condition|)
block|{
name|ODataResponse
name|odataResponse
init|=
name|EntityProvider
operator|.
name|writeEntry
argument_list|(
name|TEST_FORMAT
operator|.
name|getMimeType
argument_list|()
argument_list|,
name|manufacturersSet
argument_list|,
name|getEntityData
argument_list|()
argument_list|,
name|EntityProviderWriteProperties
operator|.
name|serviceRoot
argument_list|(
name|getServiceUrl
argument_list|()
operator|.
name|uri
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|InputStream
name|entityStream
init|=
name|odataResponse
operator|.
name|getEntityAsStream
argument_list|()
decl_stmt|;
name|mockResponse
operator|.
name|setResponseCode
argument_list|(
name|HttpStatusCodes
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|mockResponse
operator|.
name|setBody
argument_list|(
operator|new
name|Buffer
argument_list|()
operator|.
name|readFrom
argument_list|(
name|entityStream
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mockResponse
return|;
block|}
elseif|else
if|if
condition|(
name|recordedRequest
operator|.
name|getPath
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|Olingo2AppImpl
operator|.
name|METADATA
argument_list|)
condition|)
block|{
name|EdmServiceMetadata
name|serviceMetadata
init|=
name|edm
operator|.
name|getServiceMetadata
argument_list|()
decl_stmt|;
return|return
name|mockResponse
operator|.
name|setResponseCode
argument_list|(
name|HttpStatusCodes
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|addHeader
argument_list|(
name|ODataHttpHeaders
operator|.
name|DATASERVICEVERSION
argument_list|,
name|serviceMetadata
operator|.
name|getDataServiceVersion
argument_list|()
argument_list|)
operator|.
name|setBody
argument_list|(
operator|new
name|Buffer
argument_list|()
operator|.
name|readFrom
argument_list|(
name|serviceMetadata
operator|.
name|getMetadata
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
break|break;
case|case
name|HttpMethod
operator|.
name|PATCH
case|:
case|case
name|HttpMethod
operator|.
name|PUT
case|:
case|case
name|HttpMethod
operator|.
name|POST
case|:
case|case
name|HttpMethod
operator|.
name|DELETE
case|:
comment|//
comment|// Objective of the test:
comment|// The Read has to have been called by
comment|// Olingo2AppImpl.argumentWithETag
comment|// which should then populate the IF-MATCH header with the
comment|// eTag value.
comment|// Verify the eTag value is present.
comment|//
name|assertNotNull
argument_list|(
name|recordedRequest
operator|.
name|getHeader
argument_list|(
name|HttpHeader
operator|.
name|IF_MATCH
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mockResponse
operator|.
name|setResponseCode
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|)
return|;
default|default:
break|break;
block|}
name|mockResponse
operator|.
name|setResponseCode
argument_list|(
name|HttpStatusCodes
operator|.
name|NOT_FOUND
operator|.
name|getStatusCode
argument_list|()
argument_list|)
operator|.
name|setBody
argument_list|(
literal|"{ status: \"Not Found\"}"
argument_list|)
expr_stmt|;
return|return
name|mockResponse
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//
comment|// have to init olingoApp after start of server
comment|// since getBaseUrl() will call server start
comment|//
name|olingoApp
operator|=
operator|new
name|Olingo2AppImpl
argument_list|(
name|getServiceUrl
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|olingoApp
operator|.
name|setContentType
argument_list|(
name|TEST_FORMAT_STRING
argument_list|)
expr_stmt|;
block|}
DECL|method|getServiceUrl ()
specifier|private
specifier|static
name|HttpUrl
name|getServiceUrl
parameter_list|()
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Test programming failure. Server not initialised"
argument_list|)
expr_stmt|;
block|}
return|return
name|server
operator|.
name|url
argument_list|(
name|SERVICE_NAME
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testPatchEntityWithETag ()
specifier|public
name|void
name|testPatchEntityWithETag
parameter_list|()
throws|throws
name|Exception
block|{
name|TestOlingo2ResponseHandler
argument_list|<
name|HttpStatusCodes
argument_list|>
name|statusHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|getEntityData
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
name|ADDRESS
argument_list|)
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Renamed"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main Street"
argument_list|)
expr_stmt|;
comment|//
comment|// Call patch
comment|//
name|olingoApp
operator|.
name|patch
argument_list|(
name|edm
argument_list|,
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
name|data
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|HttpStatusCodes
name|statusCode
init|=
name|statusHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateEntityWithETag ()
specifier|public
name|void
name|testUpdateEntityWithETag
parameter_list|()
throws|throws
name|Exception
block|{
name|TestOlingo2ResponseHandler
argument_list|<
name|HttpStatusCodes
argument_list|>
name|statusHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|getEntityData
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
name|ADDRESS
argument_list|)
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Renamed"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main Street"
argument_list|)
expr_stmt|;
comment|//
comment|// Call update
comment|//
name|olingoApp
operator|.
name|update
argument_list|(
name|edm
argument_list|,
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
name|data
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|HttpStatusCodes
name|statusCode
init|=
name|statusHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteEntityWithETag ()
specifier|public
name|void
name|testDeleteEntityWithETag
parameter_list|()
throws|throws
name|Exception
block|{
name|TestOlingo2ResponseHandler
argument_list|<
name|HttpStatusCodes
argument_list|>
name|statusHandler
init|=
operator|new
name|TestOlingo2ResponseHandler
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|getEntityData
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
name|ADDRESS
argument_list|)
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Renamed"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main Street"
argument_list|)
expr_stmt|;
comment|//
comment|// Call delete
comment|//
name|olingoApp
operator|.
name|delete
argument_list|(
name|TEST_CREATE_MANUFACTURER
argument_list|,
literal|null
argument_list|,
name|statusHandler
argument_list|)
expr_stmt|;
name|HttpStatusCodes
name|statusCode
init|=
name|statusHandler
operator|.
name|await
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

