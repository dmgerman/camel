begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo2
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|impl
operator|.
name|Olingo2AppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|impl
operator|.
name|SystemQueryOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|internal
operator|.
name|Olingo2Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|commons
operator|.
name|HttpStatusCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|Edm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|entry
operator|.
name|ODataEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|feed
operator|.
name|ODataFeed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|servicedocument
operator|.
name|ServiceDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link org.apache.camel.component.olingo2.api.Olingo2App} APIs.  *<p>  * The integration test runs against Apache Olingo 2.0 sample server  * which is dynamically installed and started during the test.  *</p>  */
end_comment

begin_class
DECL|class|Olingo2ComponentTest
specifier|public
class|class
name|Olingo2ComponentTest
extends|extends
name|AbstractOlingo2TestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Olingo2ComponentTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PORT
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|ID_PROPERTY
specifier|private
specifier|static
specifier|final
name|String
name|ID_PROPERTY
init|=
literal|"Id"
decl_stmt|;
DECL|field|MANUFACTURERS
specifier|private
specifier|static
specifier|final
name|String
name|MANUFACTURERS
init|=
literal|"Manufacturers"
decl_stmt|;
DECL|field|TEST_MANUFACTURER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_MANUFACTURER
init|=
literal|"Manufacturers('1')"
decl_stmt|;
DECL|field|CARS
specifier|private
specifier|static
specifier|final
name|String
name|CARS
init|=
literal|"Cars"
decl_stmt|;
DECL|field|TEST_RESOURCE_CONTENT_ID
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCE_CONTENT_ID
init|=
literal|"1"
decl_stmt|;
DECL|field|ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"Address"
decl_stmt|;
DECL|field|TEST_RESOURCE
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCE
init|=
literal|"$1"
decl_stmt|;
DECL|field|TEST_RESOURCE_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCE_ADDRESS
init|=
name|TEST_RESOURCE
operator|+
literal|"/Address"
decl_stmt|;
DECL|field|TEST_CREATE_MANUFACTURER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_CREATE_MANUFACTURER
init|=
literal|"DefaultContainer.Manufacturers('123')"
decl_stmt|;
DECL|field|TEST_SERVICE_URL
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SERVICE_URL
init|=
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/MyFormula.svc"
decl_stmt|;
DECL|field|server
specifier|private
specifier|static
name|Olingo2SampleServer
name|server
decl_stmt|;
DECL|method|Olingo2ComponentTest ()
specifier|public
name|Olingo2ComponentTest
parameter_list|()
block|{
name|setDefaultTestProperty
argument_list|(
literal|"serviceUri"
argument_list|,
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/MyFormula.svc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|startServers
argument_list|(
name|PORT
argument_list|)
expr_stmt|;
name|Olingo2SampleServer
operator|.
name|generateSampleData
argument_list|(
name|TEST_SERVICE_URL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startServers (int port)
specifier|protected
specifier|static
name|void
name|startServers
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|server
operator|=
operator|new
name|Olingo2SampleServer
argument_list|(
name|port
argument_list|,
literal|"/olingo2_ref"
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRead ()
specifier|public
name|void
name|testRead
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// read ServiceDocument
specifier|final
name|ServiceDocument
name|document
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct:READSERVICEDOC"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ServiceDocument entity sets"
argument_list|,
name|document
operator|.
name|getEntitySetsInfo
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Service document has {} entity sets"
argument_list|,
name|document
operator|.
name|getEntitySetsInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// parameter type is java.util.Map
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|queryParams
operator|.
name|put
argument_list|(
name|SystemQueryOption
operator|.
name|$top
operator|.
name|name
argument_list|()
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"CamelOlingo2.queryParams"
argument_list|,
name|queryParams
argument_list|)
expr_stmt|;
comment|// read ODataFeed
specifier|final
name|ODataFeed
name|manufacturers
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct:READFEED"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|manufacturers
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ODataEntry
argument_list|>
name|manufacturersEntries
init|=
name|manufacturers
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Manufacturers empty entries"
argument_list|,
name|manufacturersEntries
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Manufacturers feed has {} entries"
argument_list|,
name|manufacturersEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// read ODataEntry
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Olingo2Constants
operator|.
name|PROPERTY_PREFIX
operator|+
literal|"keyPredicate"
argument_list|,
literal|"'1'"
argument_list|)
expr_stmt|;
specifier|final
name|ODataEntry
name|manufacturer
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct:READENTRY"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|manufacturer
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|manufacturer
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Manufacturer Id"
argument_list|,
literal|"1"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|ID_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Manufacturer: {}"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateUpdateDelete ()
specifier|public
name|void
name|testCreateUpdateDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|getEntityData
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
decl_stmt|;
specifier|final
name|ODataEntry
name|manufacturer
init|=
name|requestBody
argument_list|(
literal|"direct:CREATE"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Created Manufacturer"
argument_list|,
name|manufacturer
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|manufacturer
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Created Manufacturer Id"
argument_list|,
literal|"123"
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|ID_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created Manufacturer: {}"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
comment|// update
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Renamed"
argument_list|)
expr_stmt|;
name|address
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|data
operator|.
name|get
argument_list|(
literal|"Address"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main Street"
argument_list|)
expr_stmt|;
name|HttpStatusCodes
name|status
init|=
name|requestBody
argument_list|(
literal|"direct:UPDATE"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Update status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Update status"
argument_list|,
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|status
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Update status: {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
comment|// delete
name|status
operator|=
name|requestBody
argument_list|(
literal|"direct:DELETE"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Delete status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Delete status"
argument_list|,
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|status
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete status: {}"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
DECL|method|getEntityData ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getEntityData
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Id"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Founded"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"ZipCode"
argument_list|,
literal|"42421"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"City"
argument_list|,
literal|"Fairy City"
argument_list|)
expr_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Country"
argument_list|,
literal|"FarFarAway"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Address"
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
annotation|@
name|Test
DECL|method|testBatch ()
specifier|public
name|void
name|testBatch
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Olingo2BatchRequest
argument_list|>
name|batchParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 1. Edm query
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|Olingo2AppImpl
operator|.
name|METADATA
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2. feed query
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|MANUFACTURERS
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. read
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_MANUFACTURER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4. read with expand
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|queryParams
operator|.
name|put
argument_list|(
name|SystemQueryOption
operator|.
name|$expand
operator|.
name|toString
argument_list|()
argument_list|,
name|CARS
argument_list|)
expr_stmt|;
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_MANUFACTURER
argument_list|)
operator|.
name|queryParams
argument_list|(
name|queryParams
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5. create
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
name|getEntityData
argument_list|()
decl_stmt|;
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchChangeRequest
operator|.
name|resourcePath
argument_list|(
name|MANUFACTURERS
argument_list|)
operator|.
name|contentId
argument_list|(
name|TEST_RESOURCE_CONTENT_ID
argument_list|)
operator|.
name|operation
argument_list|(
name|Operation
operator|.
name|CREATE
argument_list|)
operator|.
name|body
argument_list|(
name|data
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 6. update address in created entry
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updateData
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|address
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|updateData
operator|.
name|get
argument_list|(
name|ADDRESS
argument_list|)
decl_stmt|;
name|address
operator|.
name|put
argument_list|(
literal|"Street"
argument_list|,
literal|"Main Street"
argument_list|)
expr_stmt|;
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchChangeRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_RESOURCE_ADDRESS
argument_list|)
operator|.
name|operation
argument_list|(
name|Operation
operator|.
name|UPDATE
argument_list|)
operator|.
name|body
argument_list|(
name|address
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 7. update
name|updateData
operator|.
name|put
argument_list|(
literal|"Name"
argument_list|,
literal|"MyCarManufacturer Renamed"
argument_list|)
expr_stmt|;
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchChangeRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_RESOURCE
argument_list|)
operator|.
name|operation
argument_list|(
name|Operation
operator|.
name|UPDATE
argument_list|)
operator|.
name|body
argument_list|(
name|updateData
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 8. delete
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchChangeRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_RESOURCE
argument_list|)
operator|.
name|operation
argument_list|(
name|Operation
operator|.
name|DELETE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// 9. read to verify delete
name|batchParts
operator|.
name|add
argument_list|(
name|Olingo2BatchQueryRequest
operator|.
name|resourcePath
argument_list|(
name|TEST_CREATE_MANUFACTURER
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// execute batch request
specifier|final
name|List
argument_list|<
name|Olingo2BatchResponse
argument_list|>
name|responseParts
init|=
name|requestBody
argument_list|(
literal|"direct:BATCH"
argument_list|,
name|batchParts
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Batch response"
argument_list|,
name|responseParts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Batch responses expected"
argument_list|,
literal|9
argument_list|,
name|responseParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Edm
name|edm
init|=
operator|(
name|Edm
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|edm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Edm entity sets: {}"
argument_list|,
name|edm
operator|.
name|getEntitySets
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ODataFeed
name|feed
init|=
operator|(
name|ODataFeed
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|feed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read feed: {}"
argument_list|,
name|feed
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|ODataEntry
name|dataEntry
init|=
operator|(
name|ODataEntry
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|dataEntry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read entry: {}"
argument_list|,
name|dataEntry
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|dataEntry
operator|=
operator|(
name|ODataEntry
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|dataEntry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read entry with $expand: {}"
argument_list|,
name|dataEntry
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|dataEntry
operator|=
operator|(
name|ODataEntry
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getBody
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|dataEntry
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created entry: {}"
argument_list|,
name|dataEntry
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|statusCode
init|=
name|responseParts
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Update address status: {}"
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|statusCode
operator|=
name|responseParts
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getStatusCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Update entry status: {}"
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|statusCode
operator|=
name|responseParts
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getStatusCode
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NO_CONTENT
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete status: {}"
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatusCodes
operator|.
name|NOT_FOUND
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|responseParts
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Exception
name|exception
init|=
operator|(
name|Exception
operator|)
name|responseParts
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read deleted entry exception: {}"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read entity set of the People object      * and filter already seen items on subsequent exchanges      * Use a delay since the mock endpoint does not always get      * the correct number of exchanges before being satisfied.      */
annotation|@
name|Test
DECL|method|testConsumerReadFilterAlreadySeen ()
specifier|public
name|void
name|testConsumerReadFilterAlreadySeen
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|endpoint
init|=
literal|"olingo2://read/Manufacturers?filterAlreadySeen=true&consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true"
decl_stmt|;
specifier|final
name|ODataFeed
name|manufacturers
init|=
operator|(
name|ODataFeed
operator|)
name|requestBodyAndHeaders
argument_list|(
name|endpoint
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|manufacturers
argument_list|)
expr_stmt|;
name|int
name|expectedManufacturers
init|=
name|manufacturers
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|expectedMsgCount
init|=
literal|3
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:consumer-alreadyseen"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|expectedMsgCount
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|setResultWaitTime
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|//
comment|// First polled messages contained all the manufacturers
comment|//
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ODataFeed
argument_list|)
expr_stmt|;
name|ODataFeed
name|set
init|=
operator|(
name|ODataFeed
operator|)
name|body
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedManufacturers
argument_list|,
name|set
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//
comment|// Subsequent polling messages should be empty
comment|// since the filterAlreadySeen property is true
comment|//
name|assertNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *      * Read entity set of the People object      * and with no filter already seen, all items      * should be present in each message      *      * @throws Exception      */
annotation|@
name|Test
DECL|method|testProducerReadNoFilterAlreadySeen ()
specifier|public
name|void
name|testProducerReadNoFilterAlreadySeen
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|endpoint
init|=
literal|"direct:read-people-nofilterseen"
decl_stmt|;
name|int
name|expectedMsgCount
init|=
literal|3
decl_stmt|;
name|int
name|expectedEntities
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|ODataFeed
name|manufacturers
init|=
operator|(
name|ODataFeed
operator|)
name|requestBodyAndHeaders
argument_list|(
name|endpoint
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|manufacturers
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|expectedEntities
operator|=
name|manufacturers
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:producer-noalreadyseen"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|expectedMsgCount
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ODataFeed
argument_list|)
expr_stmt|;
name|ODataFeed
name|set
init|=
operator|(
name|ODataFeed
operator|)
name|body
decl_stmt|;
comment|//
comment|// All messages contained all the manufacturers
comment|//
name|assertEquals
argument_list|(
name|expectedEntities
argument_list|,
name|set
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read entity set of the People object      * and filter already seen items on subsequent exchanges      */
annotation|@
name|Test
DECL|method|testProducerReadFilterAlreadySeen ()
specifier|public
name|void
name|testProducerReadFilterAlreadySeen
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|endpoint
init|=
literal|"direct:read-people-filterseen"
decl_stmt|;
name|int
name|expectedMsgCount
init|=
literal|3
decl_stmt|;
name|int
name|expectedEntities
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|ODataFeed
name|manufacturers
init|=
operator|(
name|ODataFeed
operator|)
name|requestBodyAndHeaders
argument_list|(
name|endpoint
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|manufacturers
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|expectedEntities
operator|=
name|manufacturers
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:producer-alreadyseen"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|expectedMsgCount
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMsgCount
condition|;
operator|++
name|i
control|)
block|{
name|Object
name|body
init|=
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|body
operator|instanceof
name|ODataFeed
argument_list|)
expr_stmt|;
name|ODataFeed
name|set
init|=
operator|(
name|ODataFeed
operator|)
name|body
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|//
comment|// First polled messages contained all the manufacturers
comment|//
name|assertEquals
argument_list|(
name|expectedEntities
argument_list|,
name|set
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//
comment|// Subsequent messages should be empty
comment|// since the filterAlreadySeen property is true
comment|//
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test routes for read
name|from
argument_list|(
literal|"direct:READSERVICEDOC"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://read/"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:READFEED"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://read/Manufacturers?$orderBy=Name%20asc"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:READENTRY"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://read/DefaultContainer.Manufacturers"
argument_list|)
expr_stmt|;
comment|// test route for create
name|from
argument_list|(
literal|"direct:CREATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://create/Manufacturers"
argument_list|)
expr_stmt|;
comment|// test route for update
name|from
argument_list|(
literal|"direct:UPDATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://update/Manufacturers('123')"
argument_list|)
expr_stmt|;
comment|// test route for delete
name|from
argument_list|(
literal|"direct:DELETE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://delete/Manufacturers('123')"
argument_list|)
expr_stmt|;
comment|/*                 // test route for merge                 from("direct:MERGE")                     .to("olingo2://merge");                  // test route for patch                 from("direct:PATCH")                     .to("olingo2://patch"); */
comment|// test route for batch
name|from
argument_list|(
literal|"direct:BATCH"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://batch"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:read-people-nofilterseen"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://read/Manufacturers"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:producer-noalreadyseen"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:read-people-filterseen"
argument_list|)
operator|.
name|to
argument_list|(
literal|"olingo2://read/Manufacturers?filterAlreadySeen=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:producer-alreadyseen"
argument_list|)
expr_stmt|;
comment|//
comment|// Consumer endpoint
comment|//
name|from
argument_list|(
literal|"olingo2://read/Manufacturers?filterAlreadySeen=true&consumer.delay=2&consumer.sendEmptyMessageWhenIdle=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:consumer-alreadyseen"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

