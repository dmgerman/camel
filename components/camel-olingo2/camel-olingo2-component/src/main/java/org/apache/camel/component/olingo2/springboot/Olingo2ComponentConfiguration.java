begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo2.springboot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|springboot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|Olingo2Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|internal
operator|.
name|Olingo2ApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * Communicates with OData 2.0 and 3.0 services using Apache Olingo.  *   * Generated by camel-package-maven-plugin - do not edit this file!  */
end_comment

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.component.olingo2"
argument_list|)
DECL|class|Olingo2ComponentConfiguration
specifier|public
class|class
name|Olingo2ComponentConfiguration
block|{
comment|/**      * To use the shared configuration. Properties of the shared configuration      * can also be set individually.      */
DECL|field|configuration
specifier|private
name|Olingo2Configuration
name|configuration
decl_stmt|;
comment|/**      * What kind of operation to perform      */
DECL|field|apiName
specifier|private
name|Olingo2ApiName
name|apiName
decl_stmt|;
comment|/**      * What sub operation to use for the selected operation      */
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
comment|/**      * Target OData service base URI e.g.      * http://services.odata.org/OData/OData.svc      */
DECL|field|serviceUri
specifier|private
name|String
name|serviceUri
decl_stmt|;
comment|/**      * Content-Type header value can be used to specify JSON or XML message      * format defaults to application/json;charset=utf-8      */
DECL|field|contentType
specifier|private
name|String
name|contentType
decl_stmt|;
comment|/**      * Custom HTTP headers to inject into every request this could include OAuth      * tokens etc.      */
DECL|field|httpHeaders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
decl_stmt|;
comment|/**      * HTTP connection creation timeout in milliseconds defaults to 30000 (30      * seconds)      */
DECL|field|connectTimeout
specifier|private
name|Integer
name|connectTimeout
decl_stmt|;
comment|/**      * HTTP request timeout in milliseconds defaults to 30000 (30 seconds)      */
DECL|field|socketTimeout
specifier|private
name|Integer
name|socketTimeout
decl_stmt|;
comment|/**      * HTTP proxy server configuration      */
DECL|field|proxy
specifier|private
name|HttpHost
name|proxy
decl_stmt|;
comment|/**      * To configure security using SSLContextParameters      */
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
comment|/**      * Custom HTTP async client builder for more complex HTTP client      * configuration overrides connectionTimeout socketTimeout proxy and      * sslContext. Note that a socketTimeout MUST be specified in the builder      * otherwise OData requests could block indefinitely      */
DECL|field|httpAsyncClientBuilder
specifier|private
name|HttpAsyncClientBuilder
name|httpAsyncClientBuilder
decl_stmt|;
DECL|method|getConfiguration ()
specifier|public
name|Olingo2Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (Olingo2Configuration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|Olingo2Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getApiName ()
specifier|public
name|Olingo2ApiName
name|getApiName
parameter_list|()
block|{
return|return
name|apiName
return|;
block|}
DECL|method|setApiName (Olingo2ApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|Olingo2ApiName
name|apiName
parameter_list|)
block|{
name|this
operator|.
name|apiName
operator|=
name|apiName
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
DECL|method|getServiceUri ()
specifier|public
name|String
name|getServiceUri
parameter_list|()
block|{
return|return
name|serviceUri
return|;
block|}
DECL|method|setServiceUri (String serviceUri)
specifier|public
name|void
name|setServiceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|this
operator|.
name|serviceUri
operator|=
name|serviceUri
expr_stmt|;
block|}
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
return|;
block|}
DECL|method|setContentType (String contentType)
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
DECL|method|getHttpHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHttpHeaders
parameter_list|()
block|{
return|return
name|httpHeaders
return|;
block|}
DECL|method|setHttpHeaders (Map<String, String> httpHeaders)
specifier|public
name|void
name|setHttpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|this
operator|.
name|httpHeaders
operator|=
name|httpHeaders
expr_stmt|;
block|}
DECL|method|getConnectTimeout ()
specifier|public
name|Integer
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
DECL|method|setConnectTimeout (Integer connectTimeout)
specifier|public
name|void
name|setConnectTimeout
parameter_list|(
name|Integer
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
DECL|method|getSocketTimeout ()
specifier|public
name|Integer
name|getSocketTimeout
parameter_list|()
block|{
return|return
name|socketTimeout
return|;
block|}
DECL|method|setSocketTimeout (Integer socketTimeout)
specifier|public
name|void
name|setSocketTimeout
parameter_list|(
name|Integer
name|socketTimeout
parameter_list|)
block|{
name|this
operator|.
name|socketTimeout
operator|=
name|socketTimeout
expr_stmt|;
block|}
DECL|method|getProxy ()
specifier|public
name|HttpHost
name|getProxy
parameter_list|()
block|{
return|return
name|proxy
return|;
block|}
DECL|method|setProxy (HttpHost proxy)
specifier|public
name|void
name|setProxy
parameter_list|(
name|HttpHost
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters ( SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getHttpAsyncClientBuilder ()
specifier|public
name|HttpAsyncClientBuilder
name|getHttpAsyncClientBuilder
parameter_list|()
block|{
return|return
name|httpAsyncClientBuilder
return|;
block|}
DECL|method|setHttpAsyncClientBuilder ( HttpAsyncClientBuilder httpAsyncClientBuilder)
specifier|public
name|void
name|setHttpAsyncClientBuilder
parameter_list|(
name|HttpAsyncClientBuilder
name|httpAsyncClientBuilder
parameter_list|)
block|{
name|this
operator|.
name|httpAsyncClientBuilder
operator|=
name|httpAsyncClientBuilder
expr_stmt|;
block|}
block|}
end_class

end_unit

