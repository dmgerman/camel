begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo2.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Copied from Olingo2 core package.  */
end_comment

begin_enum
DECL|enum|UriType
specifier|public
enum|enum
name|UriType
block|{
comment|/**      * Service document      */
DECL|enumConstant|URI0
name|URI0
parameter_list|(
name|SystemQueryOption
operator|.
name|$format
parameter_list|)
operator|,
comment|/**      * Entity set      */
DECL|enumConstant|URI1
constructor|URI1(SystemQueryOption.$format
operator|,
constructor|SystemQueryOption.$filter
operator|,
constructor|SystemQueryOption.$inlinecount
operator|,
constructor|SystemQueryOption.$orderby
operator|,
constructor|SystemQueryOption.$skiptoken
operator|,
constructor|SystemQueryOption.$skip
operator|,
constructor|SystemQueryOption.$top
operator|,
constructor|SystemQueryOption.$expand
operator|,
constructor|SystemQueryOption.$select
block|)
enum|,
comment|/**      * Entity set with key predicate      */
DECL|enumConstant|URI2
name|URI2
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|,
name|SystemQueryOption
operator|.
name|$filter
argument_list|,
name|SystemQueryOption
operator|.
name|$expand
argument_list|,
name|SystemQueryOption
operator|.
name|$select
argument_list|)
operator|,
comment|/**      * Complex property of an entity      */
DECL|enumConstant|URI3
name|URI3
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Simple property of a complex property of an entity      */
DECL|enumConstant|URI4
name|URI4
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Simple property of an entity      */
DECL|enumConstant|URI5
name|URI5
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Navigation property of an entity with target multiplicity '1' or '0..1'      */
DECL|enumConstant|URI6A
name|URI6A
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|,
name|SystemQueryOption
operator|.
name|$filter
argument_list|,
name|SystemQueryOption
operator|.
name|$expand
argument_list|,
name|SystemQueryOption
operator|.
name|$select
argument_list|)
operator|,
comment|/**      * Navigation property of an entity with target multiplicity '*'      */
DECL|enumConstant|URI6B
name|URI6B
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|,
name|SystemQueryOption
operator|.
name|$filter
argument_list|,
name|SystemQueryOption
operator|.
name|$inlinecount
argument_list|,
name|SystemQueryOption
operator|.
name|$orderby
argument_list|,
name|SystemQueryOption
operator|.
name|$skiptoken
argument_list|,
name|SystemQueryOption
operator|.
name|$skip
argument_list|,
name|SystemQueryOption
operator|.
name|$top
argument_list|,
name|SystemQueryOption
operator|.
name|$expand
argument_list|,
name|SystemQueryOption
operator|.
name|$select
argument_list|)
operator|,
comment|/**      * Link to a single entity      */
DECL|enumConstant|URI7A
name|URI7A
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|,
name|SystemQueryOption
operator|.
name|$filter
argument_list|)
operator|,
comment|/**      * Link to multiple entities      */
DECL|enumConstant|URI7B
name|URI7B
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|,
name|SystemQueryOption
operator|.
name|$filter
argument_list|,
name|SystemQueryOption
operator|.
name|$inlinecount
argument_list|,
name|SystemQueryOption
operator|.
name|$orderby
argument_list|,
name|SystemQueryOption
operator|.
name|$skiptoken
argument_list|,
name|SystemQueryOption
operator|.
name|$skip
argument_list|,
name|SystemQueryOption
operator|.
name|$top
argument_list|)
operator|,
comment|/**      * Metadata document      */
DECL|enumConstant|URI8
name|URI8
argument_list|()
operator|,
comment|/**      * Batch request      */
DECL|enumConstant|URI9
name|URI9
argument_list|()
operator|,
comment|/**      * Function import returning a single instance of an entity type      */
DECL|enumConstant|URI10
name|URI10
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Function import returning a collection of complex-type instances      */
DECL|enumConstant|URI11
name|URI11
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Function import returning a single instance of a complex type      */
DECL|enumConstant|URI12
name|URI12
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Function import returning a collection of primitive-type instances      */
DECL|enumConstant|URI13
name|URI13
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Function import returning a single instance of a primitive type      */
DECL|enumConstant|URI14
name|URI14
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|)
operator|,
comment|/**      * Count of an entity set      */
DECL|enumConstant|URI15
name|URI15
argument_list|(
name|SystemQueryOption
operator|.
name|$filter
argument_list|,
name|SystemQueryOption
operator|.
name|$orderby
argument_list|,
name|SystemQueryOption
operator|.
name|$skip
argument_list|,
name|SystemQueryOption
operator|.
name|$top
argument_list|)
operator|,
comment|/**      * Count of a single entity      */
DECL|enumConstant|URI16
name|URI16
argument_list|(
name|SystemQueryOption
operator|.
name|$filter
argument_list|)
operator|,
comment|/**      * Media resource of an entity      */
DECL|enumConstant|URI17
name|URI17
argument_list|(
name|SystemQueryOption
operator|.
name|$format
argument_list|,
name|SystemQueryOption
operator|.
name|$filter
argument_list|)
operator|,
comment|/**      * Count of link to a single entity      */
DECL|enumConstant|URI50A
name|URI50A
argument_list|(
name|SystemQueryOption
operator|.
name|$filter
argument_list|)
operator|,
comment|/**      * Count of links to multiple entities      */
DECL|enumConstant|URI50B
name|URI50B
argument_list|(
name|SystemQueryOption
operator|.
name|$filter
argument_list|,
name|SystemQueryOption
operator|.
name|$orderby
argument_list|,
name|SystemQueryOption
operator|.
name|$skip
argument_list|,
name|SystemQueryOption
operator|.
name|$top
argument_list|)
enum|;
end_enum

begin_decl_stmt
DECL|field|whiteList
specifier|private
name|ArrayList
argument_list|<
name|SystemQueryOption
argument_list|>
name|whiteList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|UriType (final SystemQueryOption... compatibleQueryOptions)
name|UriType
argument_list|(
name|final
name|SystemQueryOption
operator|...
name|compatibleQueryOptions
argument_list|)
block|{
for|for
control|(
name|SystemQueryOption
name|queryOption
range|:
name|compatibleQueryOptions
control|)
block|{
name|whiteList
operator|.
name|add
argument_list|(
name|queryOption
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_function
unit|}      public
DECL|method|isCompatible (final SystemQueryOption queryOption)
name|boolean
name|isCompatible
parameter_list|(
specifier|final
name|SystemQueryOption
name|queryOption
parameter_list|)
block|{
return|return
name|whiteList
operator|.
name|contains
argument_list|(
name|queryOption
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

