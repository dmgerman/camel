begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.olingo2.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|Olingo2App
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|Olingo2ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Olingo2BatchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|olingo2
operator|.
name|api
operator|.
name|batch
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpDelete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpEntityEnclosingRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|InputStreamEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicStatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|client
operator|.
name|util
operator|.
name|HttpAsyncClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ODataServiceVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|batch
operator|.
name|BatchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|client
operator|.
name|batch
operator|.
name|BatchChangeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|client
operator|.
name|batch
operator|.
name|BatchChangeSetPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|client
operator|.
name|batch
operator|.
name|BatchPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|client
operator|.
name|batch
operator|.
name|BatchQueryPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|client
operator|.
name|batch
operator|.
name|BatchSingleResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|commons
operator|.
name|HttpStatusCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|commons
operator|.
name|ODataHttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|Edm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmEntityContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmEntitySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|edm
operator|.
name|EdmProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProviderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProviderReadProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|ep
operator|.
name|EntityProviderWriteProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|exception
operator|.
name|ODataApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|exception
operator|.
name|ODataException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|processor
operator|.
name|ODataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|uri
operator|.
name|PathSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|api
operator|.
name|uri
operator|.
name|UriParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|core
operator|.
name|ODataPathSegmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|core
operator|.
name|commons
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|olingo
operator|.
name|odata2
operator|.
name|core
operator|.
name|uri
operator|.
name|UriInfoImpl
import|;
end_import

begin_comment
comment|/**  * Application API used by Olingo2 Component.  */
end_comment

begin_class
DECL|class|Olingo2AppImpl
specifier|public
specifier|final
class|class
name|Olingo2AppImpl
implements|implements
name|Olingo2App
block|{
DECL|field|APPLICATION_FORM_URL_ENCODED
specifier|public
specifier|static
specifier|final
name|ContentType
name|APPLICATION_FORM_URL_ENCODED
init|=
name|ContentType
operator|.
name|create
argument_list|(
literal|"application"
argument_list|,
literal|"x-www-form-urlencoded"
argument_list|)
decl_stmt|;
DECL|field|METADATA
specifier|public
specifier|static
specifier|final
name|String
name|METADATA
init|=
literal|"$metadata"
decl_stmt|;
DECL|field|SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
DECL|field|BOUNDARY_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|BOUNDARY_PREFIX
init|=
literal|"batch_"
decl_stmt|;
DECL|field|BOUNDARY_PARAMETER
specifier|private
specifier|static
specifier|final
name|String
name|BOUNDARY_PARAMETER
init|=
literal|"boundary"
decl_stmt|;
DECL|field|METADATA_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|METADATA_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|APPLICATION_XML_CS_UTF_8
decl_stmt|;
DECL|field|SERVICE_DOCUMENT_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|SERVICE_DOCUMENT_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|APPLICATION_ATOM_SVC_CS_UTF_8
decl_stmt|;
DECL|field|BATCH_CONTENT_TYPE
specifier|private
specifier|static
specifier|final
name|ContentType
name|BATCH_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|MULTIPART_MIXED
operator|.
name|receiveWithCharsetParameter
argument_list|(
name|ContentType
operator|.
name|CHARSET_UTF_8
argument_list|)
decl_stmt|;
DECL|field|BATCH
specifier|private
specifier|static
specifier|final
name|String
name|BATCH
init|=
literal|"$batch"
decl_stmt|;
DECL|field|MAX_DATA_SERVICE_VERSION
specifier|private
specifier|static
specifier|final
name|String
name|MAX_DATA_SERVICE_VERSION
init|=
literal|"Max"
operator|+
name|ODataHttpHeaders
operator|.
name|DATASERVICEVERSION
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|CloseableHttpAsyncClient
name|client
decl_stmt|;
DECL|field|serviceUri
specifier|private
name|String
name|serviceUri
decl_stmt|;
DECL|field|contentType
specifier|private
name|ContentType
name|contentType
decl_stmt|;
DECL|field|httpHeaders
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
decl_stmt|;
comment|/**      * Create Olingo2 Application with default HTTP configuration.      */
DECL|method|Olingo2AppImpl (String serviceUri)
specifier|public
name|Olingo2AppImpl
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|this
argument_list|(
name|serviceUri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create Olingo2 Application with custom HTTP client builder.      *      * @param serviceUri Service Application base URI.      * @param builder custom HTTP client builder.      */
DECL|method|Olingo2AppImpl (String serviceUri, HttpAsyncClientBuilder builder)
specifier|public
name|Olingo2AppImpl
parameter_list|(
name|String
name|serviceUri
parameter_list|,
name|HttpAsyncClientBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|serviceUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"serviceUri"
argument_list|)
throw|;
block|}
name|this
operator|.
name|serviceUri
operator|=
name|serviceUri
expr_stmt|;
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|client
operator|=
name|HttpAsyncClients
operator|.
name|createDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|client
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|ContentType
operator|.
name|APPLICATION_JSON_CS_UTF_8
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setServiceUri (String serviceUri)
specifier|public
name|void
name|setServiceUri
parameter_list|(
name|String
name|serviceUri
parameter_list|)
block|{
name|this
operator|.
name|serviceUri
operator|=
name|serviceUri
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getServiceUri ()
specifier|public
name|String
name|getServiceUri
parameter_list|()
block|{
return|return
name|serviceUri
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHttpHeaders
parameter_list|()
block|{
return|return
name|httpHeaders
return|;
block|}
annotation|@
name|Override
DECL|method|setHttpHeaders (Map<String, String> httpHeaders)
specifier|public
name|void
name|setHttpHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|httpHeaders
parameter_list|)
block|{
name|this
operator|.
name|httpHeaders
operator|=
name|httpHeaders
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|contentType
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setContentType (String contentType)
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|contentType
operator|=
name|ContentType
operator|.
name|parse
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|HttpAsyncClientUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read (final Edm edm, final String resourcePath, final Map<String, String> queryParams, final Olingo2ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|read
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
specifier|final
name|String
name|resourcePath
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
parameter_list|,
specifier|final
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
name|queryParams
argument_list|)
decl_stmt|;
name|execute
argument_list|(
operator|new
name|HttpGet
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
name|queryParams
argument_list|)
argument_list|)
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
argument_list|,
operator|new
name|AbstractFutureCallback
argument_list|<
name|T
argument_list|>
argument_list|(
name|responseHandler
argument_list|)
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|onCompleted
parameter_list|(
name|HttpResponse
name|result
parameter_list|)
throws|throws
name|IOException
block|{
name|readContent
argument_list|(
name|uriInfo
argument_list|,
name|result
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|?
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
else|:
literal|null
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getResourceContentType (UriInfoImpl uriInfo)
specifier|private
name|ContentType
name|getResourceContentType
parameter_list|(
name|UriInfoImpl
name|uriInfo
parameter_list|)
block|{
name|ContentType
name|resourceContentType
decl_stmt|;
switch|switch
condition|(
name|uriInfo
operator|.
name|getUriType
argument_list|()
condition|)
block|{
case|case
name|URI0
case|:
comment|// service document
name|resourceContentType
operator|=
name|SERVICE_DOCUMENT_CONTENT_TYPE
expr_stmt|;
break|break;
case|case
name|URI8
case|:
comment|// metadata
name|resourceContentType
operator|=
name|METADATA_CONTENT_TYPE
expr_stmt|;
break|break;
case|case
name|URI4
case|:
case|case
name|URI5
case|:
comment|// is it a $value URI??
if|if
condition|(
name|uriInfo
operator|.
name|isValue
argument_list|()
condition|)
block|{
comment|// property value and $count
name|resourceContentType
operator|=
name|ContentType
operator|.
name|TEXT_PLAIN_CS_UTF_8
expr_stmt|;
block|}
else|else
block|{
name|resourceContentType
operator|=
name|contentType
expr_stmt|;
block|}
break|break;
case|case
name|URI15
case|:
case|case
name|URI16
case|:
case|case
name|URI50A
case|:
case|case
name|URI50B
case|:
comment|// $count
name|resourceContentType
operator|=
name|ContentType
operator|.
name|TEXT_PLAIN_CS_UTF_8
expr_stmt|;
break|break;
default|default:
name|resourceContentType
operator|=
name|contentType
expr_stmt|;
block|}
return|return
name|resourceContentType
return|;
block|}
annotation|@
name|Override
DECL|method|create (Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|create
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPost
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|update
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPut
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|patch (Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|patch
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPatch
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge (Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|merge
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpMerge
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|batch (Edm edm, Object data, Olingo2ResponseHandler<List<Olingo2BatchResponse>> responseHandler)
specifier|public
name|void
name|batch
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|Object
name|data
parameter_list|,
name|Olingo2ResponseHandler
argument_list|<
name|List
argument_list|<
name|Olingo2BatchResponse
argument_list|>
argument_list|>
name|responseHandler
parameter_list|)
block|{
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|BATCH
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|writeContent
argument_list|(
name|edm
argument_list|,
operator|new
name|HttpPost
argument_list|(
name|createUri
argument_list|(
name|BATCH
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|,
name|uriInfo
argument_list|,
name|data
argument_list|,
name|responseHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete (String resourcePath, final Olingo2ResponseHandler<HttpStatusCodes> responseHandler)
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|resourcePath
parameter_list|,
specifier|final
name|Olingo2ResponseHandler
argument_list|<
name|HttpStatusCodes
argument_list|>
name|responseHandler
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|HttpDelete
argument_list|(
name|createUri
argument_list|(
name|resourcePath
argument_list|)
argument_list|)
argument_list|,
name|contentType
argument_list|,
operator|new
name|AbstractFutureCallback
argument_list|<
name|HttpStatusCodes
argument_list|>
argument_list|(
name|responseHandler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|(
name|HttpResponse
name|result
parameter_list|)
block|{
specifier|final
name|StatusLine
name|statusLine
init|=
name|result
operator|.
name|getStatusLine
argument_list|()
decl_stmt|;
name|responseHandler
operator|.
name|onResponse
argument_list|(
name|HttpStatusCodes
operator|.
name|fromStatusCode
argument_list|(
name|statusLine
operator|.
name|getStatusCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|readContent (UriInfoImpl uriInfo, InputStream content, Olingo2ResponseHandler<T> responseHandler)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|readContent
parameter_list|(
name|UriInfoImpl
name|uriInfo
parameter_list|,
name|InputStream
name|content
parameter_list|,
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
try|try
block|{
name|responseHandler
operator|.
name|onResponse
argument_list|(
name|this
operator|.
expr|<
name|T
operator|>
name|readContent
argument_list|(
name|uriInfo
argument_list|,
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EntityProviderException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ODataApplicationException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readContent (UriInfoImpl uriInfo, InputStream content)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|readContent
parameter_list|(
name|UriInfoImpl
name|uriInfo
parameter_list|,
name|InputStream
name|content
parameter_list|)
throws|throws
name|EntityProviderException
throws|,
name|ODataApplicationException
block|{
name|T
name|response
decl_stmt|;
switch|switch
condition|(
name|uriInfo
operator|.
name|getUriType
argument_list|()
condition|)
block|{
case|case
name|URI0
case|:
comment|// service document
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readServiceDocument
argument_list|(
name|content
argument_list|,
name|SERVICE_DOCUMENT_CONTENT_TYPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI8
case|:
comment|// $metadata
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readMetadata
argument_list|(
name|content
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI7A
case|:
comment|// link
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readLink
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI7B
case|:
comment|// links
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readLinks
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI3
case|:
comment|// complex property
specifier|final
name|List
argument_list|<
name|EdmProperty
argument_list|>
name|complexPropertyPath
init|=
name|uriInfo
operator|.
name|getPropertyPath
argument_list|()
decl_stmt|;
specifier|final
name|EdmProperty
name|complexProperty
init|=
name|complexPropertyPath
operator|.
name|get
argument_list|(
name|complexPropertyPath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readProperty
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|complexProperty
argument_list|,
name|content
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI4
case|:
case|case
name|URI5
case|:
comment|// simple property
specifier|final
name|List
argument_list|<
name|EdmProperty
argument_list|>
name|simplePropertyPath
init|=
name|uriInfo
operator|.
name|getPropertyPath
argument_list|()
decl_stmt|;
specifier|final
name|EdmProperty
name|simpleProperty
init|=
name|simplePropertyPath
operator|.
name|get
argument_list|(
name|simplePropertyPath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriInfo
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readPropertyValue
argument_list|(
name|simpleProperty
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readProperty
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|simpleProperty
argument_list|,
name|content
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|URI15
case|:
case|case
name|URI16
case|:
case|case
name|URI50A
case|:
case|case
name|URI50B
case|:
comment|// $count
try|try
block|{
specifier|final
name|String
name|stringCount
init|=
operator|new
name|String
argument_list|(
name|EntityProvider
operator|.
name|readBinary
argument_list|(
name|content
argument_list|)
argument_list|,
name|ContentType
operator|.
name|CHARSET_UTF_8
argument_list|)
decl_stmt|;
name|response
operator|=
operator|(
name|T
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|stringCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EntityProviderException
argument_list|(
name|EntityProviderException
operator|.
name|EXCEPTION_OCCURRED
argument_list|,
name|e
argument_list|)
throw|;
block|}
break|break;
case|case
name|URI1
case|:
case|case
name|URI6B
case|:
if|if
condition|(
name|uriInfo
operator|.
name|getCustomQueryOptions
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"!deltatoken"
argument_list|)
condition|)
block|{
comment|// ODataDeltaFeed
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readDeltaFeed
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
argument_list|,
name|content
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ODataFeed
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readFeed
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
argument_list|,
name|content
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|URI2
case|:
case|case
name|URI6A
case|:
name|response
operator|=
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readEntry
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
argument_list|,
name|content
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ODataApplicationException
argument_list|(
literal|"Unsupported resource type "
operator|+
name|uriInfo
operator|.
name|getTargetType
argument_list|()
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
DECL|method|writeContent (final Edm edm, HttpEntityEnclosingRequestBase httpEntityRequest, final UriInfoImpl uriInfo, final Object content, final Olingo2ResponseHandler<T> responseHandler)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|writeContent
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
name|HttpEntityEnclosingRequestBase
name|httpEntityRequest
parameter_list|,
specifier|final
name|UriInfoImpl
name|uriInfo
parameter_list|,
specifier|final
name|Object
name|content
parameter_list|,
specifier|final
name|Olingo2ResponseHandler
argument_list|<
name|T
argument_list|>
name|responseHandler
parameter_list|)
block|{
try|try
block|{
comment|// process resource by UriType
specifier|final
name|ODataResponse
name|response
init|=
name|writeContent
argument_list|(
name|edm
argument_list|,
name|uriInfo
argument_list|,
name|content
argument_list|)
decl_stmt|;
comment|// copy all response headers
for|for
control|(
name|String
name|header
range|:
name|response
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
name|httpEntityRequest
operator|.
name|setHeader
argument_list|(
name|header
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get (http) entity which is for default Olingo2 implementation an InputStream
if|if
condition|(
name|response
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|InputStream
condition|)
block|{
name|httpEntityRequest
operator|.
name|setEntity
argument_list|(
operator|new
name|InputStreamEntity
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/*                 // avoid sending it without a header field set                 if (!httpEntityRequest.containsHeader(HttpHeaders.CONTENT_TYPE)) {                     httpEntityRequest.addHeader(HttpHeaders.CONTENT_TYPE, getContentType());                 } */
block|}
comment|// execute HTTP request
name|execute
argument_list|(
name|httpEntityRequest
argument_list|,
name|contentType
argument_list|,
operator|new
name|AbstractFutureCallback
argument_list|<
name|T
argument_list|>
argument_list|(
name|responseHandler
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|onCompleted
parameter_list|(
name|HttpResponse
name|result
parameter_list|)
throws|throws
name|IOException
throws|,
name|EntityProviderException
throws|,
name|BatchException
throws|,
name|ODataApplicationException
block|{
comment|// if a entity is created (via POST request) the response body contains the new created entity
name|HttpStatusCodes
name|statusCode
init|=
name|HttpStatusCodes
operator|.
name|fromStatusCode
argument_list|(
name|result
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusCode
operator|!=
name|HttpStatusCodes
operator|.
name|NO_CONTENT
condition|)
block|{
comment|// TODO do we need to handle response based on other UriTypes???
switch|switch
condition|(
name|uriInfo
operator|.
name|getUriType
argument_list|()
condition|)
block|{
case|case
name|URI9
case|:
comment|// $batch
specifier|final
name|List
argument_list|<
name|BatchSingleResponse
argument_list|>
name|singleResponses
init|=
name|EntityProvider
operator|.
name|parseBatchResponse
argument_list|(
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|result
operator|.
name|getFirstHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// parse batch response bodies
specifier|final
name|List
argument_list|<
name|Olingo2BatchResponse
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<
name|Olingo2BatchResponse
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentIdLocationMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Olingo2BatchRequest
argument_list|>
name|batchRequests
init|=
operator|(
name|List
argument_list|<
name|Olingo2BatchRequest
argument_list|>
operator|)
name|content
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Olingo2BatchRequest
argument_list|>
name|iterator
init|=
name|batchRequests
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchSingleResponse
name|response
range|:
name|singleResponses
control|)
block|{
specifier|final
name|Olingo2BatchRequest
name|request
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|Olingo2BatchChangeRequest
operator|&&
operator|(
operator|(
name|Olingo2BatchChangeRequest
operator|)
name|request
operator|)
operator|.
name|getContentId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|contentIdLocationMap
operator|.
name|put
argument_list|(
literal|"$"
operator|+
operator|(
operator|(
name|Olingo2BatchChangeRequest
operator|)
name|request
operator|)
operator|.
name|getContentId
argument_list|()
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|responses
operator|.
name|add
argument_list|(
name|parseResponse
argument_list|(
name|edm
argument_list|,
name|contentIdLocationMap
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// report any parsing errors as error response
name|responses
operator|.
name|add
argument_list|(
operator|new
name|Olingo2BatchResponse
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|,
name|response
operator|.
name|getContentId
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaders
argument_list|()
argument_list|,
operator|new
name|ODataApplicationException
argument_list|(
literal|"Error parsing response for "
operator|+
name|request
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|,
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|responseHandler
operator|.
name|onResponse
argument_list|(
operator|(
name|T
operator|)
name|responses
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// get the response content as an ODataEntry object
name|responseHandler
operator|.
name|onResponse
argument_list|(
operator|(
name|T
operator|)
name|EntityProvider
operator|.
name|readEntry
argument_list|(
name|response
operator|.
name|getContentHeader
argument_list|()
argument_list|,
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
argument_list|,
name|result
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|,
name|EntityProviderReadProperties
operator|.
name|init
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|responseHandler
operator|.
name|onResponse
argument_list|(
operator|(
name|T
operator|)
name|HttpStatusCodes
operator|.
name|fromStatusCode
argument_list|(
name|result
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ODataException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|responseHandler
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeContent (Edm edm, UriInfoImpl uriInfo, Object content)
specifier|private
name|ODataResponse
name|writeContent
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|UriInfoImpl
name|uriInfo
parameter_list|,
name|Object
name|content
parameter_list|)
throws|throws
name|ODataApplicationException
throws|,
name|EdmException
throws|,
name|EntityProviderException
throws|,
name|URISyntaxException
throws|,
name|IOException
block|{
name|String
name|responseContentType
init|=
name|getContentType
argument_list|()
decl_stmt|;
name|ODataResponse
name|response
decl_stmt|;
switch|switch
condition|(
name|uriInfo
operator|.
name|getUriType
argument_list|()
condition|)
block|{
case|case
name|URI4
case|:
case|case
name|URI5
case|:
comment|// simple property
specifier|final
name|List
argument_list|<
name|EdmProperty
argument_list|>
name|simplePropertyPath
init|=
name|uriInfo
operator|.
name|getPropertyPath
argument_list|()
decl_stmt|;
specifier|final
name|EdmProperty
name|simpleProperty
init|=
name|simplePropertyPath
operator|.
name|get
argument_list|(
name|simplePropertyPath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|responseContentType
operator|=
name|simpleProperty
operator|.
name|getMimeType
argument_list|()
expr_stmt|;
if|if
condition|(
name|uriInfo
operator|.
name|isValue
argument_list|()
condition|)
block|{
name|response
operator|=
name|EntityProvider
operator|.
name|writePropertyValue
argument_list|(
name|simpleProperty
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|responseContentType
operator|=
name|ContentType
operator|.
name|TEXT_PLAIN_CS_UTF_8
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|response
operator|=
name|EntityProvider
operator|.
name|writeProperty
argument_list|(
name|getContentType
argument_list|()
argument_list|,
name|simpleProperty
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|URI3
case|:
comment|// complex property
specifier|final
name|List
argument_list|<
name|EdmProperty
argument_list|>
name|complexPropertyPath
init|=
name|uriInfo
operator|.
name|getPropertyPath
argument_list|()
decl_stmt|;
specifier|final
name|EdmProperty
name|complexProperty
init|=
name|complexPropertyPath
operator|.
name|get
argument_list|(
name|complexPropertyPath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|response
operator|=
name|EntityProvider
operator|.
name|writeProperty
argument_list|(
name|responseContentType
argument_list|,
name|complexProperty
argument_list|,
name|content
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI7A
case|:
comment|// $links with 0..1 cardinality property
specifier|final
name|EdmEntitySet
name|targetLinkEntitySet
init|=
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|rootLinkUri
init|=
operator|new
name|URI
argument_list|(
name|targetLinkEntitySet
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|EntityProviderWriteProperties
name|linkProperties
init|=
name|EntityProviderWriteProperties
operator|.
name|serviceRoot
argument_list|(
name|rootLinkUri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|linkMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|content
decl_stmt|;
name|response
operator|=
name|EntityProvider
operator|.
name|writeLink
argument_list|(
name|responseContentType
argument_list|,
name|targetLinkEntitySet
argument_list|,
name|linkMap
argument_list|,
name|linkProperties
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI7B
case|:
comment|// $links with * cardinality property
specifier|final
name|EdmEntitySet
name|targetLinksEntitySet
init|=
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|rootLinksUri
init|=
operator|new
name|URI
argument_list|(
name|targetLinksEntitySet
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|EntityProviderWriteProperties
name|linksProperties
init|=
name|EntityProviderWriteProperties
operator|.
name|serviceRoot
argument_list|(
name|rootLinksUri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|linksMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|content
decl_stmt|;
name|response
operator|=
name|EntityProvider
operator|.
name|writeLink
argument_list|(
name|responseContentType
argument_list|,
name|targetLinksEntitySet
argument_list|,
name|linksMap
argument_list|,
name|linksProperties
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI1
case|:
case|case
name|URI2
case|:
case|case
name|URI6A
case|:
case|case
name|URI6B
case|:
comment|// Entity
specifier|final
name|EdmEntitySet
name|targetEntitySet
init|=
name|uriInfo
operator|.
name|getTargetEntitySet
argument_list|()
decl_stmt|;
specifier|final
name|URI
name|rootUri
init|=
operator|new
name|URI
argument_list|(
name|targetEntitySet
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|EntityProviderWriteProperties
name|properties
init|=
name|EntityProviderWriteProperties
operator|.
name|serviceRoot
argument_list|(
name|rootUri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|objectMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|content
decl_stmt|;
name|response
operator|=
name|EntityProvider
operator|.
name|writeEntry
argument_list|(
name|responseContentType
argument_list|,
name|targetEntitySet
argument_list|,
name|objectMap
argument_list|,
name|properties
argument_list|)
expr_stmt|;
break|break;
case|case
name|URI9
case|:
comment|// $batch
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|List
argument_list|<
name|Olingo2BatchRequest
argument_list|>
name|batchParts
init|=
operator|(
name|List
argument_list|<
name|Olingo2BatchRequest
argument_list|>
operator|)
name|content
decl_stmt|;
name|response
operator|=
name|parseBatchRequest
argument_list|(
name|edm
argument_list|,
name|batchParts
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// notify exception and return!!!
throw|throw
operator|new
name|ODataApplicationException
argument_list|(
literal|"Unsupported resource type "
operator|+
name|uriInfo
operator|.
name|getTargetType
argument_list|()
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
throw|;
block|}
return|return
name|response
operator|.
name|getContentHeader
argument_list|()
operator|!=
literal|null
condition|?
name|response
else|:
name|ODataResponse
operator|.
name|fromResponse
argument_list|(
name|response
argument_list|)
operator|.
name|contentHeader
argument_list|(
name|responseContentType
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|parseBatchRequest (final Edm edm, final List<Olingo2BatchRequest> batchParts)
specifier|private
name|ODataResponse
name|parseBatchRequest
parameter_list|(
specifier|final
name|Edm
name|edm
parameter_list|,
specifier|final
name|List
argument_list|<
name|Olingo2BatchRequest
argument_list|>
name|batchParts
parameter_list|)
throws|throws
name|IOException
throws|,
name|EntityProviderException
throws|,
name|ODataApplicationException
throws|,
name|EdmException
throws|,
name|URISyntaxException
block|{
comment|// create Batch request from parts
specifier|final
name|ArrayList
argument_list|<
name|BatchPart
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchPart
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|BatchChangeSetPart
argument_list|>
name|changeSetParts
init|=
operator|new
name|ArrayList
argument_list|<
name|BatchChangeSetPart
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentIdMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Olingo2BatchRequest
name|batchPart
range|:
name|batchParts
control|)
block|{
if|if
condition|(
name|batchPart
operator|instanceof
name|Olingo2BatchQueryRequest
condition|)
block|{
comment|// need to add change set parts collected so far??
if|if
condition|(
operator|!
name|changeSetParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addChangeSetParts
argument_list|(
name|parts
argument_list|,
name|changeSetParts
argument_list|)
expr_stmt|;
name|changeSetParts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|contentIdMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// add to request parts
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|batchPart
operator|.
name|getResourcePath
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|createBatchQueryPart
argument_list|(
name|uriInfo
argument_list|,
operator|(
name|Olingo2BatchQueryRequest
operator|)
name|batchPart
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add to change set parts
specifier|final
name|BatchChangeSetPart
name|changeSetPart
init|=
name|createBatchChangeSetPart
argument_list|(
name|edm
argument_list|,
name|contentIdMap
argument_list|,
operator|(
name|Olingo2BatchChangeRequest
operator|)
name|batchPart
argument_list|)
decl_stmt|;
name|changeSetParts
operator|.
name|add
argument_list|(
name|changeSetPart
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add any remaining change set parts
if|if
condition|(
operator|!
name|changeSetParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addChangeSetParts
argument_list|(
name|parts
argument_list|,
name|changeSetParts
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|boundary
init|=
name|BOUNDARY_PREFIX
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
name|InputStream
name|batchRequest
init|=
name|EntityProvider
operator|.
name|writeBatchRequest
argument_list|(
name|parts
argument_list|,
name|boundary
argument_list|)
decl_stmt|;
comment|// add two blank lines before all --batch boundaries
comment|// otherwise Olingo2 EntityProvider parser barfs in the server!!!
specifier|final
name|byte
index|[]
name|bytes
init|=
name|EntityProvider
operator|.
name|readBinary
argument_list|(
name|batchRequest
argument_list|)
decl_stmt|;
specifier|final
name|String
name|batchRequestBody
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|ContentType
operator|.
name|CHARSET_UTF_8
argument_list|)
decl_stmt|;
name|batchRequest
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|batchRequestBody
operator|.
name|replaceAll
argument_list|(
literal|"--(batch_)"
argument_list|,
literal|"\r\n\r\n--$1"
argument_list|)
operator|.
name|getBytes
argument_list|(
name|ContentType
operator|.
name|CHARSET_UTF_8
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|contentHeader
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|BATCH_CONTENT_TYPE
argument_list|,
name|BOUNDARY_PARAMETER
argument_list|,
name|boundary
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|ODataResponse
operator|.
name|entity
argument_list|(
name|batchRequest
argument_list|)
operator|.
name|contentHeader
argument_list|(
name|contentHeader
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|addChangeSetParts (ArrayList<BatchPart> parts, ArrayList<BatchChangeSetPart> changeSetParts)
specifier|private
name|void
name|addChangeSetParts
parameter_list|(
name|ArrayList
argument_list|<
name|BatchPart
argument_list|>
name|parts
parameter_list|,
name|ArrayList
argument_list|<
name|BatchChangeSetPart
argument_list|>
name|changeSetParts
parameter_list|)
block|{
specifier|final
name|BatchChangeSet
name|changeSet
init|=
name|BatchChangeSet
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|BatchChangeSetPart
name|changeSetPart
range|:
name|changeSetParts
control|)
block|{
name|changeSet
operator|.
name|add
argument_list|(
name|changeSetPart
argument_list|)
expr_stmt|;
block|}
name|parts
operator|.
name|add
argument_list|(
name|changeSet
argument_list|)
expr_stmt|;
block|}
DECL|method|createBatchChangeSetPart (Edm edm, Map<String, String> contentIdMap, Olingo2BatchChangeRequest batchRequest)
specifier|private
name|BatchChangeSetPart
name|createBatchChangeSetPart
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentIdMap
parameter_list|,
name|Olingo2BatchChangeRequest
name|batchRequest
parameter_list|)
throws|throws
name|EdmException
throws|,
name|URISyntaxException
throws|,
name|EntityProviderException
throws|,
name|IOException
throws|,
name|ODataApplicationException
block|{
comment|// build body string
name|String
name|resourcePath
init|=
name|batchRequest
operator|.
name|getResourcePath
argument_list|()
decl_stmt|;
comment|// is it a referenced entity?
if|if
condition|(
name|resourcePath
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|resourcePath
operator|=
name|replaceContentId
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
name|contentIdMap
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resourcePath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// serialize data into ODataResponse object, if set in request and this is not a DELETE request
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|body
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|batchRequest
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|Operation
operator|.
name|DELETE
operator|.
name|equals
argument_list|(
name|batchRequest
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|ODataResponse
name|response
init|=
name|writeContent
argument_list|(
name|edm
argument_list|,
name|uriInfo
argument_list|,
name|batchRequest
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
comment|// copy response headers
for|for
control|(
name|String
name|header
range|:
name|response
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|header
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get (http) entity which is for default Olingo2 implementation an InputStream
name|body
operator|=
name|response
operator|.
name|getEntity
argument_list|()
operator|instanceof
name|InputStream
condition|?
name|EntityProvider
operator|.
name|readBinary
argument_list|(
operator|(
name|InputStream
operator|)
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_LENGTH
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|body
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add request headers
name|headers
operator|.
name|putAll
argument_list|(
name|batchRequest
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|contentId
init|=
name|batchRequest
operator|.
name|getContentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentId
operator|!=
literal|null
condition|)
block|{
name|contentIdMap
operator|.
name|put
argument_list|(
literal|"$"
operator|+
name|contentId
argument_list|,
name|resourcePath
argument_list|)
expr_stmt|;
block|}
return|return
name|BatchChangeSetPart
operator|.
name|uri
argument_list|(
name|createBatchUri
argument_list|(
name|batchRequest
argument_list|)
argument_list|)
operator|.
name|method
argument_list|(
name|batchRequest
operator|.
name|getOperation
argument_list|()
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
operator|.
name|contentId
argument_list|(
name|contentId
argument_list|)
operator|.
name|headers
argument_list|(
name|headers
argument_list|)
operator|.
name|body
argument_list|(
name|body
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|String
argument_list|(
name|body
argument_list|,
name|ContentType
operator|.
name|CHARSET_UTF_8
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createBatchQueryPart (UriInfoImpl uriInfo, Olingo2BatchQueryRequest batchRequest)
specifier|private
name|BatchQueryPart
name|createBatchQueryPart
parameter_list|(
name|UriInfoImpl
name|uriInfo
parameter_list|,
name|Olingo2BatchQueryRequest
name|batchRequest
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|batchRequest
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|)
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|getResourceContentType
argument_list|(
name|uriInfo
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|BatchQueryPart
operator|.
name|method
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|uri
argument_list|(
name|createBatchUri
argument_list|(
name|batchRequest
argument_list|)
argument_list|)
operator|.
name|headers
argument_list|(
name|headers
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|replaceContentId (Edm edm, String entityReference, Map<String, String> contentIdMap)
specifier|private
specifier|static
name|String
name|replaceContentId
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|entityReference
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentIdMap
parameter_list|)
throws|throws
name|EdmException
block|{
specifier|final
name|int
name|pathSeparator
init|=
name|entityReference
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|referencedEntity
decl_stmt|;
if|if
condition|(
name|pathSeparator
operator|==
operator|-
literal|1
condition|)
block|{
name|referencedEntity
operator|=
operator|new
name|StringBuilder
argument_list|(
name|contentIdMap
operator|.
name|get
argument_list|(
name|entityReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|referencedEntity
operator|=
operator|new
name|StringBuilder
argument_list|(
name|contentIdMap
operator|.
name|get
argument_list|(
name|entityReference
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathSeparator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create a dummy entity location by adding a dummy key predicate
comment|// look for a Container name if available
name|String
name|referencedEntityName
init|=
name|referencedEntity
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|int
name|containerSeparator
init|=
name|referencedEntityName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
specifier|final
name|EdmEntityContainer
name|entityContainer
decl_stmt|;
if|if
condition|(
name|containerSeparator
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|final
name|String
name|containerName
init|=
name|referencedEntityName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|containerSeparator
argument_list|)
decl_stmt|;
name|referencedEntityName
operator|=
name|referencedEntityName
operator|.
name|substring
argument_list|(
name|containerSeparator
operator|+
literal|1
argument_list|)
expr_stmt|;
name|entityContainer
operator|=
name|edm
operator|.
name|getEntityContainer
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
if|if
condition|(
name|entityContainer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"EDM does not have entity container "
operator|+
name|containerName
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|entityContainer
operator|=
name|edm
operator|.
name|getDefaultEntityContainer
argument_list|()
expr_stmt|;
if|if
condition|(
name|entityContainer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"EDM does not have a default entity container"
operator|+
literal|", use a fully qualified entity set name"
argument_list|)
throw|;
block|}
block|}
specifier|final
name|EdmEntitySet
name|entitySet
init|=
name|entityContainer
operator|.
name|getEntitySet
argument_list|(
name|referencedEntityName
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|EdmProperty
argument_list|>
name|keyProperties
init|=
name|entitySet
operator|.
name|getEntityType
argument_list|()
operator|.
name|getKeyProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyProperties
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|referencedEntity
operator|.
name|append
argument_list|(
literal|"('dummy')"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|referencedEntity
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|EdmProperty
name|keyProperty
range|:
name|keyProperties
control|)
block|{
name|referencedEntity
operator|.
name|append
argument_list|(
name|keyProperty
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
literal|"'dummy',"
argument_list|)
expr_stmt|;
block|}
name|referencedEntity
operator|.
name|deleteCharAt
argument_list|(
name|referencedEntity
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|referencedEntity
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
return|return
name|pathSeparator
operator|==
operator|-
literal|1
condition|?
name|referencedEntityName
else|:
name|referencedEntity
operator|.
name|append
argument_list|(
name|entityReference
operator|.
name|substring
argument_list|(
name|pathSeparator
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseResponse (Edm edm, Map<String, String> contentIdLocationMap, Olingo2BatchRequest request, BatchSingleResponse response)
specifier|private
name|Olingo2BatchResponse
name|parseResponse
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentIdLocationMap
parameter_list|,
name|Olingo2BatchRequest
name|request
parameter_list|,
name|BatchSingleResponse
name|response
parameter_list|)
throws|throws
name|EntityProviderException
throws|,
name|ODataApplicationException
block|{
comment|// validate HTTP status
specifier|final
name|int
name|statusCode
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|response
operator|.
name|getStatusCode
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|statusInfo
init|=
name|response
operator|.
name|getStatusInfo
argument_list|()
decl_stmt|;
specifier|final
name|BasicHttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
operator|new
name|BasicStatusLine
argument_list|(
name|HttpVersion
operator|.
name|HTTP_1_1
argument_list|,
name|statusCode
argument_list|,
name|statusInfo
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|response
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|httpResponse
operator|.
name|setHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ByteArrayInputStream
name|content
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|response
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ContentType
name|partContentType
init|=
name|ContentType
operator|.
name|create
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
operator|.
name|receiveWithCharsetParameter
argument_list|(
name|ContentType
operator|.
name|CHARSET_UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|String
name|charset
init|=
name|partContentType
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|ContentType
operator|.
name|PARAMETER_CHARSET
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
name|response
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|content
operator|=
name|body
operator|!=
literal|null
condition|?
operator|new
name|ByteArrayInputStream
argument_list|(
name|body
operator|.
name|getBytes
argument_list|(
name|charset
argument_list|)
argument_list|)
else|:
literal|null
expr_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
name|body
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AbstractFutureCallback
operator|.
name|checkStatus
argument_list|(
name|httpResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ODataApplicationException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Olingo2BatchResponse
argument_list|(
name|statusCode
argument_list|,
name|statusInfo
argument_list|,
name|response
operator|.
name|getContentId
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
operator|new
name|Olingo2BatchResponse
argument_list|(
name|statusCode
argument_list|,
name|statusInfo
argument_list|,
name|response
operator|.
name|getContentId
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|e
argument_list|)
return|;
block|}
comment|// resolve resource path and query params and parse batch part uri
specifier|final
name|String
name|resourcePath
init|=
name|request
operator|.
name|getResourcePath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|resolvedResourcePath
decl_stmt|;
if|if
condition|(
name|resourcePath
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
operator|&&
operator|!
operator|(
name|METADATA
operator|.
name|equals
argument_list|(
name|resourcePath
argument_list|)
operator|||
name|BATCH
operator|.
name|equals
argument_list|(
name|resourcePath
argument_list|)
operator|)
condition|)
block|{
name|resolvedResourcePath
operator|=
name|findLocation
argument_list|(
name|resourcePath
argument_list|,
name|contentIdLocationMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|resourceLocation
init|=
name|response
operator|.
name|getHeader
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
name|resolvedResourcePath
operator|=
name|resourceLocation
operator|!=
literal|null
condition|?
name|resourceLocation
operator|.
name|substring
argument_list|(
name|serviceUri
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|resourcePath
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resolvedQueryParams
init|=
name|request
operator|instanceof
name|Olingo2BatchQueryRequest
condition|?
operator|(
operator|(
name|Olingo2BatchQueryRequest
operator|)
name|request
operator|)
operator|.
name|getQueryParams
argument_list|()
else|:
literal|null
decl_stmt|;
specifier|final
name|UriInfoImpl
name|uriInfo
init|=
name|parseUri
argument_list|(
name|edm
argument_list|,
name|resolvedResourcePath
argument_list|,
name|resolvedQueryParams
argument_list|)
decl_stmt|;
comment|// resolve response content
specifier|final
name|Object
name|resolvedContent
init|=
name|content
operator|!=
literal|null
condition|?
name|readContent
argument_list|(
name|uriInfo
argument_list|,
name|content
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
operator|new
name|Olingo2BatchResponse
argument_list|(
name|statusCode
argument_list|,
name|statusInfo
argument_list|,
name|response
operator|.
name|getContentId
argument_list|()
argument_list|,
name|response
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|resolvedContent
argument_list|)
return|;
block|}
DECL|method|findLocation (String resourcePath, Map<String, String> contentIdLocationMap)
specifier|private
name|String
name|findLocation
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|contentIdLocationMap
parameter_list|)
block|{
specifier|final
name|int
name|pathSeparator
init|=
name|resourcePath
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathSeparator
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|contentIdLocationMap
operator|.
name|get
argument_list|(
name|resourcePath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|contentIdLocationMap
operator|.
name|get
argument_list|(
name|resourcePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pathSeparator
argument_list|)
argument_list|)
operator|+
name|resourcePath
operator|.
name|substring
argument_list|(
name|pathSeparator
argument_list|)
return|;
block|}
block|}
DECL|method|createBatchUri (Olingo2BatchRequest part)
specifier|private
name|String
name|createBatchUri
parameter_list|(
name|Olingo2BatchRequest
name|part
parameter_list|)
block|{
name|String
name|result
decl_stmt|;
if|if
condition|(
name|part
operator|instanceof
name|Olingo2BatchQueryRequest
condition|)
block|{
specifier|final
name|Olingo2BatchQueryRequest
name|queryPart
init|=
operator|(
name|Olingo2BatchQueryRequest
operator|)
name|part
decl_stmt|;
name|result
operator|=
name|createUri
argument_list|(
name|queryPart
operator|.
name|getResourcePath
argument_list|()
argument_list|,
name|queryPart
operator|.
name|getQueryParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|createUri
argument_list|(
name|part
operator|.
name|getResourcePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// strip base URI
return|return
name|result
operator|.
name|substring
argument_list|(
name|serviceUri
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|createUri (String resourcePath)
specifier|private
name|String
name|createUri
parameter_list|(
name|String
name|resourcePath
parameter_list|)
block|{
return|return
name|createUri
argument_list|(
name|resourcePath
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createUri (String resourcePath, Map<String, String> queryParams)
specifier|private
name|String
name|createUri
parameter_list|(
name|String
name|resourcePath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|absolutUri
init|=
operator|new
name|StringBuilder
argument_list|(
name|serviceUri
argument_list|)
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|resourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryParams
operator|!=
literal|null
operator|&&
operator|!
name|queryParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|absolutUri
operator|.
name|append
argument_list|(
literal|"/?"
argument_list|)
expr_stmt|;
name|int
name|nParams
init|=
name|queryParams
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|queryParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|absolutUri
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|index
operator|<
name|nParams
condition|)
block|{
name|absolutUri
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|absolutUri
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseUri (Edm edm, String resourcePath, Map<String, String> queryParams)
specifier|private
specifier|static
name|UriInfoImpl
name|parseUri
parameter_list|(
name|Edm
name|edm
parameter_list|,
name|String
name|resourcePath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queryParams
parameter_list|)
block|{
name|UriInfoImpl
name|result
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|PathSegment
argument_list|>
name|pathSegments
init|=
operator|new
name|ArrayList
argument_list|<
name|PathSegment
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|segments
init|=
operator|new
name|URI
argument_list|(
name|resourcePath
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|split
argument_list|(
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryParams
operator|==
literal|null
condition|)
block|{
name|queryParams
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|segment
range|:
name|segments
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|pathSegments
operator|.
name|add
argument_list|(
operator|new
name|ODataPathSegmentImpl
argument_list|(
name|segment
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// handle matrix params in path segment
specifier|final
name|String
index|[]
name|splitSegment
init|=
name|segment
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|segment
operator|=
name|splitSegment
index|[
literal|0
index|]
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|matrixParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|splitSegment
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
index|[]
name|param
init|=
name|splitSegment
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|matrixParams
operator|.
name|get
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|matrixParams
operator|.
name|put
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
index|[
literal|1
index|]
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|param
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|values
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|param
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|pathSegments
operator|.
name|add
argument_list|(
operator|new
name|ODataPathSegmentImpl
argument_list|(
name|segment
argument_list|,
name|matrixParams
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
operator|(
name|UriInfoImpl
operator|)
name|UriParser
operator|.
name|parse
argument_list|(
name|edm
argument_list|,
name|pathSegments
argument_list|,
name|queryParams
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"resourcePath: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ODataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"resourcePath: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|// public for unit test, not to be used otherwise
DECL|method|execute (HttpUriRequest httpUriRequest, ContentType contentType, FutureCallback<HttpResponse> callback)
specifier|public
name|void
name|execute
parameter_list|(
name|HttpUriRequest
name|httpUriRequest
parameter_list|,
name|ContentType
name|contentType
parameter_list|,
name|FutureCallback
argument_list|<
name|HttpResponse
argument_list|>
name|callback
parameter_list|)
block|{
comment|// add accept header when its not a form or multipart
specifier|final
name|String
name|contentTypeString
init|=
name|contentType
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|APPLICATION_FORM_URL_ENCODED
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|&&
operator|!
name|contentType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ContentType
operator|.
name|MULTIPART_MIXED
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
comment|// otherwise accept what is being sent
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|ACCEPT
argument_list|,
name|contentTypeString
argument_list|)
expr_stmt|;
block|}
comment|// is something being sent?
if|if
condition|(
name|httpUriRequest
operator|instanceof
name|HttpEntityEnclosingRequestBase
condition|)
block|{
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|HttpHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentTypeString
argument_list|)
expr_stmt|;
block|}
comment|// set user specified custom headers
if|if
condition|(
name|httpHeaders
operator|!=
literal|null
operator|&&
operator|!
name|httpHeaders
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|httpHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|httpUriRequest
operator|.
name|setHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add client protocol version if not specified
if|if
condition|(
operator|!
name|httpUriRequest
operator|.
name|containsHeader
argument_list|(
name|ODataHttpHeaders
operator|.
name|DATASERVICEVERSION
argument_list|)
condition|)
block|{
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|ODataHttpHeaders
operator|.
name|DATASERVICEVERSION
argument_list|,
name|ODataServiceVersion
operator|.
name|V20
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|httpUriRequest
operator|.
name|containsHeader
argument_list|(
name|MAX_DATA_SERVICE_VERSION
argument_list|)
condition|)
block|{
name|httpUriRequest
operator|.
name|addHeader
argument_list|(
name|MAX_DATA_SERVICE_VERSION
argument_list|,
name|ODataServiceVersion
operator|.
name|V30
argument_list|)
expr_stmt|;
block|}
comment|// execute request
name|client
operator|.
name|execute
argument_list|(
name|httpUriRequest
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

