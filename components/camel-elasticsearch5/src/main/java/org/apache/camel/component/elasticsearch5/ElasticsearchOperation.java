begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.elasticsearch5
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|elasticsearch5
package|;
end_package

begin_comment
comment|/**  * The ElasticSearch server operations list which are implemented  *   * INDEX        - Index a document associated with a given index and type  * UPDATE       - Updates a document based on a script  * BULK         - Executes a bulk of index / delete operations  * BULK_INDEX   - Executes a bulk of index / delete operations  * GET_BY_ID    - Gets the document that was indexed from an index with a type and id  * MULTIGET     - Multiple get documents  * DELETE       - Deletes a document from the index based on the index, type and id  * DELETE_INDEX - Deletes an index based on the index name  * SEARCH       - Search across one or more indices and one or more types with a query  * MULTISEARCH  - Performs multiple search requests  * EXISTS       - Checks the index exists or not (using search with size=0 and terminate_after=1 parameters)  *   */
end_comment

begin_enum
DECL|enum|ElasticsearchOperation
specifier|public
enum|enum
name|ElasticsearchOperation
block|{
DECL|enumConstant|INDEX
name|INDEX
argument_list|(
literal|"INDEX"
argument_list|)
block|,
DECL|enumConstant|UPDATE
name|UPDATE
argument_list|(
literal|"UPDATE"
argument_list|)
block|,
DECL|enumConstant|BULK
name|BULK
argument_list|(
literal|"BULK"
argument_list|)
block|,
DECL|enumConstant|BULK_INDEX
name|BULK_INDEX
argument_list|(
literal|"BULK_INDEX"
argument_list|)
block|,
DECL|enumConstant|GET_BY_ID
name|GET_BY_ID
argument_list|(
literal|"GET_BY_ID"
argument_list|)
block|,
DECL|enumConstant|MULTIGET
name|MULTIGET
argument_list|(
literal|"MULTIGET"
argument_list|)
block|,
DECL|enumConstant|DELETE
name|DELETE
argument_list|(
literal|"DELETE"
argument_list|)
block|,
DECL|enumConstant|DELETE_INDEX
name|DELETE_INDEX
argument_list|(
literal|"DELETE_INDEX"
argument_list|)
block|,
DECL|enumConstant|SEARCH
name|SEARCH
argument_list|(
literal|"SEARCH"
argument_list|)
block|,
DECL|enumConstant|MULTISEARCH
name|MULTISEARCH
argument_list|(
literal|"MULTISEARCH"
argument_list|)
block|,
DECL|enumConstant|EXISTS
name|EXISTS
argument_list|(
literal|"EXISTS"
argument_list|)
block|;
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|method|ElasticsearchOperation (final String text)
name|ElasticsearchOperation
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|text
return|;
block|}
block|}
end_enum

end_unit

