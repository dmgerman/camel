begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.digitalocean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
package|;
end_package

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|impl
operator|.
name|DigitalOceanClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanAccountProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanActionsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanBlockStoragesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanDropletsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanFloatingIPsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanImagesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanKeysProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanRegionsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanSizesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanSnapshotsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|producer
operator|.
name|DigitalOceanTagsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The DigitalOcean component allows you to manage Droplets and resources within the DigitalOcean cloud.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.19.0"
argument_list|,
name|scheme
operator|=
literal|"digitalocean"
argument_list|,
name|title
operator|=
literal|"DigitalOcean"
argument_list|,
name|syntax
operator|=
literal|"digitalocean:operation"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"cloud,management"
argument_list|)
DECL|class|DigitalOceanEndpoint
specifier|public
class|class
name|DigitalOceanEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DigitalOceanEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|DigitalOceanConfiguration
name|configuration
decl_stmt|;
DECL|field|digitalOceanClient
specifier|private
name|DigitalOceanClient
name|digitalOceanClient
decl_stmt|;
DECL|method|DigitalOceanEndpoint (String uri, DigitalOceanComponent component, DigitalOceanConfiguration configuration)
specifier|public
name|DigitalOceanEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|DigitalOceanComponent
name|component
parameter_list|,
name|DigitalOceanConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Resolve producer digitalocean endpoint {{}}"
argument_list|,
name|configuration
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|configuration
operator|.
name|getResource
argument_list|()
condition|)
block|{
case|case
name|account
case|:
return|return
operator|new
name|DigitalOceanAccountProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|actions
case|:
return|return
operator|new
name|DigitalOceanActionsProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|blockStorages
case|:
return|return
operator|new
name|DigitalOceanBlockStoragesProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|droplets
case|:
return|return
operator|new
name|DigitalOceanDropletsProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|images
case|:
return|return
operator|new
name|DigitalOceanImagesProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|snapshots
case|:
return|return
operator|new
name|DigitalOceanSnapshotsProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|keys
case|:
return|return
operator|new
name|DigitalOceanKeysProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|regions
case|:
return|return
operator|new
name|DigitalOceanRegionsProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|sizes
case|:
return|return
operator|new
name|DigitalOceanSizesProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|floatingIPs
case|:
return|return
operator|new
name|DigitalOceanFloatingIPsProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
case|case
name|tags
case|:
return|return
operator|new
name|DigitalOceanTagsProducer
argument_list|(
name|this
argument_list|,
name|configuration
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Operation specified is not valid for producer"
argument_list|)
throw|;
block|}
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot receive messages from this endpoint"
argument_list|)
throw|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getDigitalOceanClient
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|digitalOceanClient
operator|=
name|configuration
operator|.
name|getDigitalOceanClient
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configuration
operator|.
name|getHttpProxyHost
argument_list|()
operator|!=
literal|null
operator|&&
name|configuration
operator|.
name|getHttpProxyPort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HttpClientBuilder
name|builder
init|=
name|HttpClients
operator|.
name|custom
argument_list|()
operator|.
name|useSystemProperties
argument_list|()
operator|.
name|setProxy
argument_list|(
operator|new
name|HttpHost
argument_list|(
name|configuration
operator|.
name|getHttpProxyHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getHttpProxyPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getHttpProxyUser
argument_list|()
operator|!=
literal|null
operator|&&
name|configuration
operator|.
name|getHttpProxyPassword
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BasicCredentialsProvider
name|credsProvider
init|=
operator|new
name|BasicCredentialsProvider
argument_list|()
decl_stmt|;
name|credsProvider
operator|.
name|setCredentials
argument_list|(
operator|new
name|AuthScope
argument_list|(
name|configuration
operator|.
name|getHttpProxyHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getHttpProxyPort
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|configuration
operator|.
name|getHttpProxyUser
argument_list|()
argument_list|,
name|configuration
operator|.
name|getHttpProxyPassword
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDefaultCredentialsProvider
argument_list|(
name|credsProvider
argument_list|)
expr_stmt|;
block|}
name|digitalOceanClient
operator|=
operator|new
name|DigitalOceanClient
argument_list|(
literal|"v2"
argument_list|,
name|configuration
operator|.
name|getOAuthToken
argument_list|()
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|digitalOceanClient
operator|=
operator|new
name|DigitalOceanClient
argument_list|(
name|configuration
operator|.
name|getOAuthToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConfiguration ()
specifier|public
name|DigitalOceanConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|getDigitalOceanClient ()
specifier|public
name|DigitalOceanClient
name|getDigitalOceanClient
parameter_list|()
block|{
return|return
name|digitalOceanClient
return|;
block|}
block|}
end_class

end_unit

