begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.digitalocean
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
package|;
end_package

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|impl
operator|.
name|DigitalOceanClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|constants
operator|.
name|DigitalOceanOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|constants
operator|.
name|DigitalOceanResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|DigitalOceanConfiguration
specifier|public
class|class
name|DigitalOceanConfiguration
block|{
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"account,actions,blockStorages,droplets,mages,snapshots,keys,regions,sizes,floatingIPs,tags"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|resource
specifier|private
name|DigitalOceanResources
name|resource
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|enums
operator|=
literal|"create,update,delete,list,ownList,get,listBackups,listActions,listNeighbors,listSnapshots,listKernels,listAllNeighbors,"
operator|+
literal|"enableBackups,disableBackups,reboot,powerCycle,shutdown,powerOn,powerOff,restore,resetPassword,"
operator|+
literal|"resize,rebuild,rename,changeKernel,enableIpv6,enablePrivateNetworking,takeSnapshot,transfer,convert,"
operator|+
literal|"attach,detach,assign,unassign,tag,untag"
argument_list|)
DECL|field|operation
specifier|private
name|DigitalOceanOperations
name|operation
decl_stmt|;
annotation|@
name|UriParam
DECL|field|digitalOceanClient
specifier|private
name|DigitalOceanClient
name|digitalOceanClient
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|oAuthToken
specifier|private
name|String
name|oAuthToken
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1"
argument_list|)
DECL|field|page
specifier|private
name|Integer
name|page
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"25"
argument_list|)
DECL|field|perPage
specifier|private
name|Integer
name|perPage
init|=
literal|25
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyHost
specifier|private
name|String
name|httpProxyHost
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyUser
specifier|private
name|String
name|httpProxyUser
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyPassword
specifier|private
name|String
name|httpProxyPassword
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyPort
specifier|private
name|Integer
name|httpProxyPort
decl_stmt|;
DECL|method|getResource ()
specifier|public
name|DigitalOceanResources
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
comment|/**      * The DigitalOcean resource type on which perform the operation.      */
DECL|method|setResource (DigitalOceanResources resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|DigitalOceanResources
name|resource
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
comment|/**      * The operation to perform to the given resource.      */
DECL|method|getOperation ()
specifier|public
name|DigitalOceanOperations
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
DECL|method|setOperation (DigitalOceanOperations operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|DigitalOceanOperations
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getOAuthToken ()
specifier|public
name|String
name|getOAuthToken
parameter_list|()
block|{
return|return
name|oAuthToken
return|;
block|}
comment|/**      * DigitalOcean OAuth Token      */
DECL|method|setOAuthToken (String oAuthToken)
specifier|public
name|void
name|setOAuthToken
parameter_list|(
name|String
name|oAuthToken
parameter_list|)
block|{
name|this
operator|.
name|oAuthToken
operator|=
name|oAuthToken
expr_stmt|;
block|}
comment|/**      * Use for pagination. Set the number of item per request. The maximum number of results per page is 200.      */
DECL|method|getPerPage ()
specifier|public
name|Integer
name|getPerPage
parameter_list|()
block|{
return|return
name|perPage
return|;
block|}
DECL|method|setPerPage (Integer perPage)
specifier|public
name|void
name|setPerPage
parameter_list|(
name|Integer
name|perPage
parameter_list|)
block|{
name|this
operator|.
name|perPage
operator|=
name|perPage
expr_stmt|;
block|}
comment|/**      * Use for paginsation. Force the page number.      */
DECL|method|getPage ()
specifier|public
name|Integer
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
DECL|method|setPage (Integer page)
specifier|public
name|void
name|setPage
parameter_list|(
name|Integer
name|page
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
comment|/**      * Set a proxy host if needed      */
DECL|method|getHttpProxyHost ()
specifier|public
name|String
name|getHttpProxyHost
parameter_list|()
block|{
return|return
name|httpProxyHost
return|;
block|}
DECL|method|setHttpProxyHost (String httpProxyHost)
specifier|public
name|void
name|setHttpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|this
operator|.
name|httpProxyHost
operator|=
name|httpProxyHost
expr_stmt|;
block|}
comment|/**      * Set a proxy user if needed      */
DECL|method|getHttpProxyUser ()
specifier|public
name|String
name|getHttpProxyUser
parameter_list|()
block|{
return|return
name|httpProxyUser
return|;
block|}
DECL|method|setHttpProxyUser (String httpProxyUser)
specifier|public
name|void
name|setHttpProxyUser
parameter_list|(
name|String
name|httpProxyUser
parameter_list|)
block|{
name|this
operator|.
name|httpProxyUser
operator|=
name|httpProxyUser
expr_stmt|;
block|}
comment|/**      * Set a proxy password if needed      */
DECL|method|getHttpProxyPassword ()
specifier|public
name|String
name|getHttpProxyPassword
parameter_list|()
block|{
return|return
name|httpProxyPassword
return|;
block|}
DECL|method|setHttpProxyPassword (String httpProxyPassword)
specifier|public
name|void
name|setHttpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPassword
operator|=
name|httpProxyPassword
expr_stmt|;
block|}
comment|/**      * Set a proxy port if needed      */
DECL|method|getHttpProxyPort ()
specifier|public
name|Integer
name|getHttpProxyPort
parameter_list|()
block|{
return|return
name|httpProxyPort
return|;
block|}
DECL|method|setHttpProxyPort (Integer httpProxyPort)
specifier|public
name|void
name|setHttpProxyPort
parameter_list|(
name|Integer
name|httpProxyPort
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPort
operator|=
name|httpProxyPort
expr_stmt|;
block|}
comment|/**      * To use a existing configured DigitalOceanClient as client      */
DECL|method|getDigitalOceanClient ()
specifier|public
name|DigitalOceanClient
name|getDigitalOceanClient
parameter_list|()
block|{
return|return
name|digitalOceanClient
return|;
block|}
DECL|method|setDigitalOceanClient (DigitalOceanClient digitalOceanClient)
specifier|public
name|void
name|setDigitalOceanClient
parameter_list|(
name|DigitalOceanClient
name|digitalOceanClient
parameter_list|)
block|{
name|this
operator|.
name|digitalOceanClient
operator|=
name|digitalOceanClient
expr_stmt|;
block|}
block|}
end_class

end_unit

