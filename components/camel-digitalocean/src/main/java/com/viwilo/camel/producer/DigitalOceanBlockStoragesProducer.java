begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.viwilo.camel.producer
package|package
name|com
operator|.
name|viwilo
operator|.
name|camel
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|viwilo
operator|.
name|camel
operator|.
name|DigitalOceanConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|viwilo
operator|.
name|camel
operator|.
name|constants
operator|.
name|DigitalOceanHeaders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|viwilo
operator|.
name|camel
operator|.
name|DigitalOceanEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The DigitalOcean producer for BlockStorages API.  */
end_comment

begin_class
DECL|class|DigitalOceanBlockStoragesProducer
specifier|public
class|class
name|DigitalOceanBlockStoragesProducer
extends|extends
name|DigitalOceanProducer
block|{
DECL|method|DigitalOceanBlockStoragesProducer (DigitalOceanEndpoint endpoint, DigitalOceanConfiguration configuration)
specifier|public
name|DigitalOceanBlockStoragesProducer
parameter_list|(
name|DigitalOceanEndpoint
name|endpoint
parameter_list|,
name|DigitalOceanConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|determineOperation
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
case|case
name|list
case|:
name|getVolumes
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|get
case|:
name|getVolume
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|listSnapshots
case|:
name|getVolumeSnapshots
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|create
case|:
name|createVolume
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|delete
case|:
name|deleteVolume
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|attach
case|:
name|attachVolumeToDroplet
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|detach
case|:
name|detachVolumeToDroplet
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|resize
case|:
name|resizeVolume
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|listActions
case|:
name|getVolumeActions
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported operation"
argument_list|)
throw|;
block|}
block|}
DECL|method|getVolumes (Exchange exchange)
specifier|private
name|void
name|getVolumes
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|region
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|region
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|Volumes
name|volumes
init|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|getAvailableVolumes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"All Volumes for region {} [{}] "
argument_list|,
name|region
argument_list|,
name|volumes
operator|.
name|getVolumes
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|volumes
operator|.
name|getVolumes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createVolume (Exchange exchange)
specifier|private
name|void
name|createVolume
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Volume
name|volume
init|=
operator|new
name|Volume
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|VOLUME_SIZE_GIGABYTES
argument_list|)
argument_list|)
condition|)
name|volume
operator|.
name|setSize
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|VOLUME_SIZE_GIGABYTES
argument_list|,
name|Double
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|VOLUME_SIZE_GIGABYTES
operator|+
literal|" must be specified"
argument_list|)
throw|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|)
argument_list|)
condition|)
name|volume
operator|.
name|setName
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
operator|+
literal|" must be specified"
argument_list|)
throw|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|)
argument_list|)
condition|)
name|volume
operator|.
name|setRegion
argument_list|(
operator|new
name|Region
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
operator|+
literal|" must be specified"
argument_list|)
throw|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DESCRIPTION
argument_list|)
argument_list|)
condition|)
name|volume
operator|.
name|setDescription
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DESCRIPTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DESCRIPTION
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|volume
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|createVolume
argument_list|(
name|volume
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Volume created {} "
argument_list|,
name|volume
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|volume
argument_list|)
expr_stmt|;
block|}
DECL|method|getVolume (Exchange exchange)
specifier|private
name|void
name|getVolume
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|volumeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Volume
name|volume
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|volumeId
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|region
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
operator|+
literal|" or "
operator|+
name|DigitalOceanHeaders
operator|.
name|NAME
operator|+
literal|" and "
operator|+
name|DigitalOceanHeaders
operator|.
name|REGION
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|List
argument_list|<
name|Volume
argument_list|>
name|volumes
init|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|getVolumeInfo
argument_list|(
name|name
argument_list|,
name|region
argument_list|)
operator|.
name|getVolumes
argument_list|()
decl_stmt|;
if|if
condition|(
name|volumes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|volume
operator|=
name|volumes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
name|volume
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|getVolumeInfo
argument_list|(
name|volumeId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Volume [{}] "
argument_list|,
name|volume
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|volume
argument_list|)
expr_stmt|;
block|}
DECL|method|getVolumeSnapshots (Exchange exchange)
specifier|private
name|void
name|getVolumeSnapshots
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|volumeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|volumeId
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|Snapshots
name|snapshots
init|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|getVolumeSnapshots
argument_list|(
name|volumeId
argument_list|,
name|configuration
operator|.
name|getPage
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPerPage
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"All Snapshots for volume {} [{}] "
argument_list|,
name|volumeId
argument_list|,
name|snapshots
operator|.
name|getSnapshots
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|snapshots
operator|.
name|getSnapshots
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteVolume (Exchange exchange)
specifier|private
name|void
name|deleteVolume
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|volumeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Delete
name|delete
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|volumeId
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|name
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|region
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
operator|+
literal|" or "
operator|+
name|DigitalOceanHeaders
operator|.
name|NAME
operator|+
literal|" and "
operator|+
name|DigitalOceanHeaders
operator|.
name|REGION
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|delete
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|deleteVolume
argument_list|(
name|name
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
else|else
name|delete
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|deleteVolume
argument_list|(
name|volumeId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Delete Volume [{}] "
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
DECL|method|attachVolumeToDroplet (Exchange exchange)
specifier|private
name|void
name|attachVolumeToDroplet
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|volumeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|VOLUME_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|dropletId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_ID
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|dropletId
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_ID
operator|+
literal|" must be specified"
argument_list|)
throw|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|region
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|Action
name|action
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|volumeName
argument_list|)
condition|)
block|{
name|action
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|attachVolumeByName
argument_list|(
name|dropletId
argument_list|,
name|volumeName
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Attach Volume {} to Droplet {} [{}] "
argument_list|,
name|volumeName
argument_list|,
name|dropletId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|volumeId
argument_list|)
condition|)
block|{
name|action
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|attachVolume
argument_list|(
name|dropletId
argument_list|,
name|volumeId
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Attach Volume {} to Droplet {} [{}] "
argument_list|,
name|volumeId
argument_list|,
name|dropletId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
operator|+
literal|" or "
operator|+
name|DigitalOceanHeaders
operator|.
name|VOLUME_NAME
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|detachVolumeToDroplet (Exchange exchange)
specifier|private
name|void
name|detachVolumeToDroplet
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|volumeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|VOLUME_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|dropletId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_ID
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|region
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|dropletId
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_ID
operator|+
literal|" must be specified"
argument_list|)
throw|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|region
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|Action
name|action
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|volumeName
argument_list|)
condition|)
block|{
name|action
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|detachVolumeByName
argument_list|(
name|dropletId
argument_list|,
name|volumeName
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Detach Volume {} to Droplet {} [{}] "
argument_list|,
name|volumeName
argument_list|,
name|dropletId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|volumeId
argument_list|)
condition|)
block|{
name|action
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|detachVolume
argument_list|(
name|dropletId
argument_list|,
name|volumeId
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Detach Volume {} to Droplet {} [{}] "
argument_list|,
name|volumeId
argument_list|,
name|dropletId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
operator|+
literal|" or "
operator|+
name|DigitalOceanHeaders
operator|.
name|VOLUME_NAME
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|resizeVolume (Exchange exchange)
specifier|private
name|void
name|resizeVolume
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|volumeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|volumeId
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|String
name|region
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|region
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|Double
name|size
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|VOLUME_SIZE_GIGABYTES
argument_list|,
name|Double
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|size
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|VOLUME_SIZE_GIGABYTES
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|Action
name|action
init|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|resizeVolume
argument_list|(
name|volumeId
argument_list|,
name|region
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Resize Volume {} [{}] "
argument_list|,
name|volumeId
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
DECL|method|getVolumeActions (Exchange exchange)
specifier|private
name|void
name|getVolumeActions
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|volumeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|volumeId
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
operator|+
literal|" must be specified"
argument_list|)
throw|;
name|Actions
name|actions
init|=
name|getEndpoint
argument_list|()
operator|.
name|getDigitalOceanClient
argument_list|()
operator|.
name|getAvailableVolumeActions
argument_list|(
name|volumeId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Actions for Volume {} [{}] "
argument_list|,
name|volumeId
argument_list|,
name|actions
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|actions
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

