begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.digitalocean.integration
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|integration
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|Droplet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|com
operator|.
name|myjeeva
operator|.
name|digitalocean
operator|.
name|pojo
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|constants
operator|.
name|DigitalOceanHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|digitalocean
operator|.
name|constants
operator|.
name|DigitalOceanOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Must be manually tested. Provide your own oAuthToken"
argument_list|)
DECL|class|DigitalOceanComponentIntegrationTest
specifier|public
class|class
name|DigitalOceanComponentIntegrationTest
extends|extends
name|DigitalOceanTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|mockResultEndpoint
specifier|protected
name|MockEndpoint
name|mockResultEndpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:getAccountInfo"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|get
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:account?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getAccountInfo2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:account?operation="
operator|+
name|DigitalOceanOperations
operator|.
name|get
operator|+
literal|"&oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getActions"
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:actions?operation=list&oAuthToken={{oAuthToken}}&perPage=30"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getActionInfo"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|get
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|constant
argument_list|(
literal|133459716
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:actions?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getDroplets"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|list
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:droplets?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getDroplet"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|constant
argument_list|(
literal|5428878
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:droplets?operation=get&oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getDroplet2"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|get
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|constant
argument_list|(
literal|5428878
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:droplets?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:createDroplet"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|create
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|,
name|constant
argument_list|(
literal|"camel-test"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|constant
argument_list|(
literal|"fra1"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_IMAGE
argument_list|,
name|constant
argument_list|(
literal|"ubuntu-14-04-x64"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_SIZE
argument_list|,
name|constant
argument_list|(
literal|"512mb"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"tag1"
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|)
expr_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_TAGS
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean:droplets?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:createMultipleDroplets"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|create
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"droplet1"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"droplet2"
argument_list|)
expr_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAMES
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|REGION
argument_list|,
name|constant
argument_list|(
literal|"fra1"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_IMAGE
argument_list|,
name|constant
argument_list|(
literal|"ubuntu-14-04-x64"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_SIZE
argument_list|,
name|constant
argument_list|(
literal|"512mb"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"tag1"
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"tag2"
argument_list|)
expr_stmt|;
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_TAGS
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://droplets?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getDropletBackups"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|listBackups
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|ID
argument_list|,
name|constant
argument_list|(
literal|5428878
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://droplets?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:createTag"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|create
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|,
name|constant
argument_list|(
literal|"tag1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://tags?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getTags"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|list
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://tags?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getImages"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|list
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://images?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getImage"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|get
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|DROPLET_IMAGE
argument_list|,
name|constant
argument_list|(
literal|"ubuntu-14-04-x64"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://images?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getSizes"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|list
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://sizes?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getSize"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|get
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|,
name|constant
argument_list|(
literal|"512mb"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://sizes?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getRegions"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|list
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://regions?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:getRegion"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|OPERATION
argument_list|,
name|constant
argument_list|(
name|DigitalOceanOperations
operator|.
name|get
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|DigitalOceanHeaders
operator|.
name|NAME
argument_list|,
name|constant
argument_list|(
literal|"nyc1"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"digitalocean://regions?oAuthToken={{oAuthToken}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testGetAccountInfo ()
specifier|public
name|void
name|testGetAccountInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getAccountInfo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Account
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|isEmailVerified
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getAccountInfo2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Account
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|isEmailVerified
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllActions ()
specifier|public
name|void
name|testGetAllActions
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getActions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|List
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|size
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetActionInfo ()
specifier|public
name|void
name|testGetActionInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getActionInfo"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|Action
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|133459716
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDropletInfo ()
specifier|public
name|void
name|testGetDropletInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getDroplet"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|Droplet
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5428878
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getDroplet2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|Droplet
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|Integer
argument_list|(
literal|5428878
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateDroplet ()
specifier|public
name|void
name|testCreateDroplet
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:createDroplet"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Droplet
name|droplet
init|=
operator|(
name|Droplet
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|droplet
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|droplet
operator|.
name|getRegion
argument_list|()
operator|.
name|getSlug
argument_list|()
argument_list|,
literal|"fra1"
argument_list|)
expr_stmt|;
name|assertCollectionSize
argument_list|(
name|droplet
operator|.
name|getTags
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateMultipleDroplets ()
specifier|public
name|void
name|testCreateMultipleDroplets
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:createMultipleDroplets"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Droplet
argument_list|>
name|droplets
init|=
operator|(
name|List
argument_list|<
name|Droplet
argument_list|>
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertCollectionSize
argument_list|(
name|droplets
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllDroplets ()
specifier|public
name|void
name|testGetAllDroplets
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getDroplets"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|List
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDropletBackups ()
specifier|public
name|void
name|testGetDropletBackups
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getDropletBackups"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertCollectionSize
argument_list|(
operator|(
name|List
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTag ()
specifier|public
name|void
name|testCreateTag
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:createTag"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|Tag
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"tag1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetTags ()
specifier|public
name|void
name|testGetTags
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getTags"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|List
argument_list|<
name|Tag
argument_list|>
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"tag1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getImages ()
specifier|public
name|void
name|getImages
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getImages"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Image
argument_list|>
name|images
init|=
operator|(
name|List
argument_list|<
name|Image
argument_list|>
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|images
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getImage ()
specifier|public
name|void
name|getImage
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getImage"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|Image
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getSlug
argument_list|()
argument_list|,
literal|"ubuntu-14-04-x64"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getSizes ()
specifier|public
name|void
name|getSizes
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getSizes"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Size
argument_list|>
name|sizes
init|=
operator|(
name|List
argument_list|<
name|Size
argument_list|>
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sizes
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|sizes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getRegions ()
specifier|public
name|void
name|getRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|mockResultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:getRegions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
operator|(
name|List
argument_list|<
name|Region
argument_list|>
operator|)
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

