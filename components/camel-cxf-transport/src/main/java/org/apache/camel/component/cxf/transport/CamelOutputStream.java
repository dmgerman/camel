begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.cxf.transport
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|header
operator|.
name|CxfHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfMessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CamelOutputStream
class|class
name|CamelOutputStream
extends|extends
name|CachedOutputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *       */
DECL|field|outMessage
specifier|private
name|Message
name|outMessage
decl_stmt|;
DECL|field|isOneWay
specifier|private
name|boolean
name|isOneWay
decl_stmt|;
DECL|field|targetCamelEndpointUri
specifier|private
name|String
name|targetCamelEndpointUri
decl_stmt|;
DECL|field|producer
specifier|private
name|Producer
name|producer
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|field|observer
specifier|private
name|MessageObserver
name|observer
decl_stmt|;
DECL|method|CamelOutputStream (String targetCamelEndpointUri, Producer producer, HeaderFilterStrategy headerFilterStrategy, MessageObserver observer, Message m)
specifier|public
name|CamelOutputStream
parameter_list|(
name|String
name|targetCamelEndpointUri
parameter_list|,
name|Producer
name|producer
parameter_list|,
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|,
name|MessageObserver
name|observer
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|this
operator|.
name|targetCamelEndpointUri
operator|=
name|targetCamelEndpointUri
expr_stmt|;
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
name|this
operator|.
name|observer
operator|=
name|observer
expr_stmt|;
name|outMessage
operator|=
name|m
expr_stmt|;
block|}
DECL|method|doFlush ()
specifier|protected
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing here
block|}
DECL|method|doClose ()
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|isOneWay
operator|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
expr_stmt|;
name|commitOutputMessage
argument_list|()
expr_stmt|;
block|}
DECL|method|onWrite ()
specifier|protected
name|void
name|onWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing here
block|}
DECL|method|commitOutputMessage ()
specifier|private
name|void
name|commitOutputMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|ExchangePattern
name|pattern
decl_stmt|;
if|if
condition|(
name|isOneWay
condition|)
block|{
name|pattern
operator|=
name|ExchangePattern
operator|.
name|InOnly
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
name|ExchangePattern
operator|.
name|InOut
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"send the message to endpoint {}"
argument_list|,
name|this
operator|.
name|targetCamelEndpointUri
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
init|=
name|this
operator|.
name|producer
operator|.
name|createExchange
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|,
name|this
operator|.
name|targetCamelEndpointUri
argument_list|)
expr_stmt|;
name|CachedOutputStream
name|outputStream
init|=
operator|(
name|CachedOutputStream
operator|)
name|outMessage
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Send out the request message here, copy the protocolHeader back
name|CxfHeaderHelper
operator|.
name|propagateCxfToCamel
argument_list|(
name|this
operator|.
name|headerFilterStrategy
argument_list|,
name|outMessage
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// TODO support different encoding
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|outputStream
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"template sending request: "
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|exception
decl_stmt|;
try|try
block|{
name|this
operator|.
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exception
operator|=
name|ex
expr_stmt|;
block|}
comment|// Throw the exception that the template get
name|exception
operator|=
name|exchange
operator|.
name|getException
argument_list|()
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot send the request message."
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|exchange
operator|.
name|setProperty
argument_list|(
name|CamelTransportConstants
operator|.
name|CXF_EXCHANGE
argument_list|,
name|outMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOneWay
condition|)
block|{
name|handleResponse
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleResponse (org.apache.camel.Exchange exchange)
specifier|private
name|void
name|handleResponse
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|inMessage
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inMessage
operator|=
name|CxfMessageHelper
operator|.
name|getCxfInMessage
argument_list|(
name|this
operator|.
name|headerFilterStrategy
argument_list|,
name|exchange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot get the response message. "
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|this
operator|.
name|observer
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

