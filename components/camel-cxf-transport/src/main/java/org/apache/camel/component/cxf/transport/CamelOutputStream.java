begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.transport
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|header
operator|.
name|CxfHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfMessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|AutomaticWorkQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CamelOutputStream
class|class
name|CamelOutputStream
extends|extends
name|CachedOutputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *       */
DECL|field|outMessage
specifier|private
specifier|final
name|Message
name|outMessage
decl_stmt|;
DECL|field|isOneWay
specifier|private
name|boolean
name|isOneWay
decl_stmt|;
DECL|field|targetCamelEndpointUri
specifier|private
name|String
name|targetCamelEndpointUri
decl_stmt|;
DECL|field|producer
specifier|private
name|Producer
name|producer
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|field|observer
specifier|private
name|MessageObserver
name|observer
decl_stmt|;
DECL|field|hasLoggedAsyncWarning
specifier|private
name|boolean
name|hasLoggedAsyncWarning
decl_stmt|;
DECL|method|CamelOutputStream (String targetCamelEndpointUri, Producer producer, HeaderFilterStrategy headerFilterStrategy, MessageObserver observer, Message m)
specifier|public
name|CamelOutputStream
parameter_list|(
name|String
name|targetCamelEndpointUri
parameter_list|,
name|Producer
name|producer
parameter_list|,
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|,
name|MessageObserver
name|observer
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|this
operator|.
name|targetCamelEndpointUri
operator|=
name|targetCamelEndpointUri
expr_stmt|;
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
name|this
operator|.
name|observer
operator|=
name|observer
expr_stmt|;
name|outMessage
operator|=
name|m
expr_stmt|;
block|}
DECL|method|doFlush ()
specifier|protected
name|void
name|doFlush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing here
block|}
DECL|method|doClose ()
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{
name|isOneWay
operator|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|isOneWay
argument_list|()
expr_stmt|;
name|commitOutputMessage
argument_list|()
expr_stmt|;
block|}
DECL|method|onWrite ()
specifier|protected
name|void
name|onWrite
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing here
block|}
DECL|method|commitOutputMessage ()
specifier|private
name|void
name|commitOutputMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|ExchangePattern
name|pattern
decl_stmt|;
if|if
condition|(
name|isOneWay
condition|)
block|{
name|pattern
operator|=
name|ExchangePattern
operator|.
name|InOnly
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
name|ExchangePattern
operator|.
name|InOut
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"send the message to endpoint {}"
argument_list|,
name|this
operator|.
name|targetCamelEndpointUri
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
init|=
name|this
operator|.
name|producer
operator|.
name|createExchange
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|TO_ENDPOINT
argument_list|,
name|this
operator|.
name|targetCamelEndpointUri
argument_list|)
expr_stmt|;
name|CachedOutputStream
name|outputStream
init|=
operator|(
name|CachedOutputStream
operator|)
name|outMessage
operator|.
name|getContent
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Send out the request message here, copy the protocolHeader back
name|CxfHeaderHelper
operator|.
name|propagateCxfToCamel
argument_list|(
name|this
operator|.
name|headerFilterStrategy
argument_list|,
name|outMessage
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// TODO support different encoding
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|outputStream
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"template sending request: "
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|isSynchronous
argument_list|()
condition|)
block|{
name|syncInvoke
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// submit the request to the work queue
name|asyncInvokeFromWorkQueue
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|syncInvoke (org.apache.camel.Exchange exchange)
specifier|protected
name|void
name|syncInvoke
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// Throw the exception that the template get
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot send the request message."
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
throw|;
block|}
name|exchange
operator|.
name|setProperty
argument_list|(
name|CamelTransportConstants
operator|.
name|CXF_EXCHANGE
argument_list|,
name|outMessage
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isOneWay
condition|)
block|{
name|handleResponseInternal
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|asyncInvokeFromWorkQueue (final org.apache.camel.Exchange exchange)
specifier|protected
name|void
name|asyncInvokeFromWorkQueue
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|syncInvoke
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
operator|(
operator|(
name|PhaseInterceptorChain
operator|)
name|outMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|)
operator|.
name|abort
argument_list|()
expr_stmt|;
name|outMessage
operator|.
name|setContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
name|e
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PhaseInterceptorChain
operator|)
name|outMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|)
operator|.
name|unwind
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|MessageObserver
name|mo
init|=
name|outMessage
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|getFaultObserver
argument_list|()
decl_stmt|;
if|if
condition|(
name|mo
operator|==
literal|null
condition|)
block|{
name|mo
operator|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|mo
operator|.
name|onMessage
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|Executor
name|ex
init|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Executor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|Executor
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".USING_SPECIFIED"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ex
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|WorkQueueManager
name|mgr
init|=
name|outMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
operator|.
name|getExtension
argument_list|(
name|WorkQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|AutomaticWorkQueue
name|qu
init|=
name|mgr
operator|.
name|getNamedWorkQueue
argument_list|(
literal|"camel-cxf-conduit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|qu
operator|==
literal|null
condition|)
block|{
name|qu
operator|=
name|mgr
operator|.
name|getAutomaticWorkQueue
argument_list|()
expr_stmt|;
block|}
comment|// need to set the time out somewhere
name|qu
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|rex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasLoggedAsyncWarning
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Executor rejected background task to retrieve the response.  Suggest increasing the workqueue settings."
argument_list|)
expr_stmt|;
name|hasLoggedAsyncWarning
operator|=
literal|true
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Executor rejected background task to retrieve the response, running on current thread."
argument_list|)
expr_stmt|;
name|syncInvoke
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleResponseInternal (org.apache.camel.Exchange exchange)
specifier|private
name|void
name|handleResponseInternal
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|inMessage
init|=
literal|null
decl_stmt|;
name|inMessage
operator|=
name|CxfMessageHelper
operator|.
name|getCxfInMessage
argument_list|(
name|this
operator|.
name|headerFilterStrategy
argument_list|,
name|exchange
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|observer
operator|.
name|onMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

