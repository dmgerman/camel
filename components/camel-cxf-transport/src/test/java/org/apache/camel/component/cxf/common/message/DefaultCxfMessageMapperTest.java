begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.common.message
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|transport
operator|.
name|CamelTransportConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SimplePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DefaultCxfMessageMapperTest
specifier|public
class|class
name|DefaultCxfMessageMapperTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
DECL|method|testRequestUriAndPath ()
specifier|public
name|void
name|testRequestUriAndPath
parameter_list|()
block|{
specifier|final
name|String
name|requestURI
init|=
literal|"/path;a=b"
decl_stmt|;
specifier|final
name|String
name|requestPath
init|=
literal|"/path"
decl_stmt|;
name|DefaultCxfMessageMapper
name|mapper
init|=
operator|new
name|DefaultCxfMessageMapper
argument_list|()
decl_stmt|;
name|Exchange
name|camelExchange
init|=
name|setupCamelExchange
argument_list|(
name|requestURI
argument_list|,
name|requestPath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Message
name|cxfMessage
init|=
name|mapper
operator|.
name|createCxfMessageFromCamelExchange
argument_list|(
name|camelExchange
argument_list|,
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HeaderFilterStrategy
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|requestURI
argument_list|,
name|cxfMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestPath
argument_list|,
name|cxfMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecurityContext ()
specifier|public
name|void
name|testSecurityContext
parameter_list|()
block|{
name|DefaultCxfMessageMapper
name|mapper
init|=
operator|new
name|DefaultCxfMessageMapper
argument_list|()
decl_stmt|;
name|HttpServletRequest
name|request
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|getUserPrincipal
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|SimplePrincipal
argument_list|(
literal|"barry"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|isUserInRole
argument_list|(
literal|"role1"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|isUserInRole
argument_list|(
literal|"role2"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Exchange
name|camelExchange
init|=
name|setupCamelExchange
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|Message
name|cxfMessage
init|=
name|mapper
operator|.
name|createCxfMessageFromCamelExchange
argument_list|(
name|camelExchange
argument_list|,
name|EasyMock
operator|.
name|createMock
argument_list|(
name|HeaderFilterStrategy
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|SecurityContext
name|sc
init|=
name|cxfMessage
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barry"
argument_list|,
name|sc
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sc
operator|.
name|isUserInRole
argument_list|(
literal|"role2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupCamelExchange (String requestURI, String requestPath, HttpServletRequest request)
specifier|private
name|Exchange
name|setupCamelExchange
parameter_list|(
name|String
name|requestURI
parameter_list|,
name|String
name|requestPath
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|camelMessage
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exchange
name|camelExchange
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|camelExchange
operator|.
name|getProperty
argument_list|(
name|CamelTransportConstants
operator|.
name|CXF_EXCHANGE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|ExchangeImpl
argument_list|()
argument_list|)
expr_stmt|;
name|camelExchange
operator|.
name|hasOut
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|camelExchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|camelMessage
argument_list|)
operator|.
name|times
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeaders
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
literal|"Accept"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_CHARACTER_ENCODING
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|requestURI
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|requestPath
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_BASE_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|requestPath
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_SERVLET_REQUEST
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_SERVLET_RESPONSE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|camelMessage
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|camelExchange
argument_list|,
name|camelMessage
argument_list|)
expr_stmt|;
return|return
name|camelExchange
return|;
block|}
block|}
end_class

end_unit

