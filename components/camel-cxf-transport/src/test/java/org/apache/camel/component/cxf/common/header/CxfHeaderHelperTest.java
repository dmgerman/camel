begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.common.header
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|header
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultHeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfHeaderHelperTest
specifier|public
class|class
name|CxfHeaderHelperTest
extends|extends
name|Assert
block|{
DECL|field|context
specifier|private
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testPropagateCamelToCxf ()
specifier|public
name|void
name|testPropagateCamelToCxf
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"soapAction"
argument_list|,
literal|"urn:hello:world"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"MyFruitHeader"
argument_list|,
literal|"peach"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"MyBrewHeader"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cappuccino"
argument_list|,
literal|"espresso"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
literal|"/hello/cxf"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
literal|"/hello/cxf"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"request"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"response"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|,
name|requestContext
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|,
name|responseContext
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|cxfMessage
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
argument_list|()
decl_stmt|;
name|CxfHeaderHelper
operator|.
name|propagateCamelToCxf
argument_list|(
operator|new
name|DefaultHeaderFilterStrategy
argument_list|()
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|cxfMessage
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml"
argument_list|,
name|cxfMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"200"
argument_list|,
name|cxfMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestContext
argument_list|,
name|cxfMessage
operator|.
name|get
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|responseContext
argument_list|,
name|cxfMessage
operator|.
name|get
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cxfMessage
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
comment|// check the protocol headers
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cxfHeaders
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|cxfMessage
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cxfHeaders
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cxfHeaders
operator|.
name|size
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
literal|"soapaction"
argument_list|,
literal|"urn:hello:world"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
literal|"SoapAction"
argument_list|,
literal|"urn:hello:world"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
literal|"SOAPAction"
argument_list|,
literal|"urn:hello:world"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
literal|"myfruitheader"
argument_list|,
literal|"peach"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
literal|"myFruitHeader"
argument_list|,
literal|"peach"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
literal|"MYFRUITHEADER"
argument_list|,
literal|"peach"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
literal|"MyBrewHeader"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cappuccino"
argument_list|,
literal|"espresso"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/xml"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
name|Message
operator|.
name|REQUEST_URI
argument_list|,
literal|"/hello/cxf"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|verifyHeader
argument_list|(
name|cxfHeaders
argument_list|,
name|Message
operator|.
name|PATH_INFO
argument_list|,
literal|"/hello/cxf"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cxfHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cxfHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cxfHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cxfHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropagateCxfToCamel ()
specifier|public
name|void
name|testPropagateCxfToCamel
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|cxfMessage
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cxfHeaders
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
literal|"Content-Length"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"241"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
literal|"soapAction"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"urn:hello:world"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
literal|"myfruitheader"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"peach"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
literal|"mybrewheader"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cappuccino"
argument_list|,
literal|"espresso"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|CONTENT_TYPE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"text/xml"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|ENCODING
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ignored
name|cxfHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/base/hello/cxf"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"GET"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/base/hello/cxf"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
name|Message
operator|.
name|BASE_PATH
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/base"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfMessage
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|cxfHeaders
argument_list|)
expr_stmt|;
name|cxfMessage
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"request"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"response"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|cxfMessage
operator|.
name|put
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|,
name|requestContext
argument_list|)
expr_stmt|;
name|cxfMessage
operator|.
name|put
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|,
name|responseContext
argument_list|)
expr_stmt|;
name|CxfHeaderHelper
operator|.
name|propagateCxfToCamel
argument_list|(
operator|new
name|DefaultHeaderFilterStrategy
argument_list|()
argument_list|,
name|cxfMessage
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|camelHeaders
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"urn:hello:world"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
literal|"soapaction"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:hello:world"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
literal|"SoapAction"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"241"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
literal|"content-length"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"peach"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
literal|"MyFruitHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cappuccino"
argument_list|,
literal|"espresso"
argument_list|)
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
literal|"MyBrewHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/xml; charset=UTF-8"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/base/hello/cxf"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GET"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/hello/cxf"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"200"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestContext
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|responseContext
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|camelHeaders
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|camelHeaders
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUEST_URI
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|camelHeaders
operator|.
name|get
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|camelHeaders
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PATH_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|camelHeaders
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPropagateCxfToCamelWithMerged ()
specifier|public
name|void
name|testPropagateCxfToCamelWithMerged
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_PROTOCOL_HEADERS_MERGED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|cxfMessage
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cxfHeaders
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|String
operator|.
name|CASE_INSENSITIVE_ORDER
argument_list|)
decl_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
literal|"myfruitheader"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"peach"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfHeaders
operator|.
name|put
argument_list|(
literal|"mybrewheader"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cappuccino"
argument_list|,
literal|"espresso"
argument_list|)
argument_list|)
expr_stmt|;
name|cxfMessage
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|cxfHeaders
argument_list|)
expr_stmt|;
name|CxfHeaderHelper
operator|.
name|propagateCxfToCamel
argument_list|(
operator|new
name|DefaultHeaderFilterStrategy
argument_list|()
argument_list|,
name|cxfMessage
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|camelHeaders
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"peach"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
literal|"MyFruitHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cappuccino, espresso"
argument_list|,
name|camelHeaders
operator|.
name|get
argument_list|(
literal|"MyBrewHeader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyHeader (Map<String, List<String>> headers, String name, List<String> value)
specifier|private
name|void
name|verifyHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The entry must be available"
argument_list|,
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|==
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value must match"
argument_list|,
name|value
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyHeader (Map<String, List<String>> headers, String name, String value)
specifier|private
name|void
name|verifyHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|headers
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The entry must be available"
argument_list|,
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The value must match"
argument_list|,
name|value
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

