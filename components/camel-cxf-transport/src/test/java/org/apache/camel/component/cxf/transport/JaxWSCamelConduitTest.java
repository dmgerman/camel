begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.transport
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Test CXF-CamelConduit when the destination is not a pipeline  */
end_comment

begin_class
DECL|class|JaxWSCamelConduitTest
specifier|public
class|class
name|JaxWSCamelConduitTest
extends|extends
name|JaxWSCamelTestSupport
block|{
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start1"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
name|ANSWER
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start2"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
name|ANSWER
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"Force pipeline creation"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start3"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"text/xml; charset=UTF-8"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|ANSWER
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// otherwise you will get the request message back
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testStart1 ()
specifier|public
name|void
name|testStart1
parameter_list|()
block|{
name|assertThat
argument_list|(
name|getSampleWS
argument_list|(
literal|"direct:start1"
argument_list|)
operator|.
name|getSomething
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Success      */
annotation|@
name|Test
DECL|method|testStart2 ()
specifier|public
name|void
name|testStart2
parameter_list|()
block|{
name|assertThat
argument_list|(
name|getSampleWSWithCXFAPI
argument_list|(
literal|"direct:start2"
argument_list|)
operator|.
name|getSomething
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test the content type
annotation|@
name|Test
DECL|method|testStart3 ()
specifier|public
name|void
name|testStart3
parameter_list|()
block|{
name|assertThat
argument_list|(
name|getSampleWS
argument_list|(
literal|"direct:start3"
argument_list|)
operator|.
name|getSomething
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"Something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncInvocation ()
specifier|public
name|void
name|testAsyncInvocation
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Future
argument_list|<
name|?
argument_list|>
name|result
init|=
name|getSampleWSAsyncWithCXFAPI
argument_list|(
literal|"direct:start2"
argument_list|)
operator|.
name|getSomethingAsync
argument_list|()
decl_stmt|;
comment|// as the CXF will build the getSomethingResponse by using asm, so we cannot get the response directly.
name|assertNotNull
argument_list|(
name|result
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

