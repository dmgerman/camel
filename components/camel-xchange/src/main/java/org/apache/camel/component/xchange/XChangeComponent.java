begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xchange
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|knowm
operator|.
name|xchange
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|knowm
operator|.
name|xchange
operator|.
name|ExchangeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|knowm
operator|.
name|xchange
operator|.
name|utils
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|XChangeComponent
specifier|public
class|class
name|XChangeComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|exchange
specifier|private
name|XChange
name|exchange
decl_stmt|;
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Init the configuration
name|XChangeConfiguration
name|configuration
init|=
operator|new
name|XChangeConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|configuration
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// Set the the required name of the exchange
name|configuration
operator|.
name|setName
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|XChange
name|exchange
init|=
name|createXChange
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|XChangeEndpoint
name|endpoint
init|=
operator|new
name|XChangeEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|configuration
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getXChange ()
specifier|public
name|XChange
name|getXChange
parameter_list|()
block|{
return|return
name|exchange
return|;
block|}
DECL|method|createXChange (XChangeConfiguration configuration)
specifier|private
specifier|synchronized
name|XChange
name|createXChange
parameter_list|(
name|XChangeConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
comment|// Get the XChange implementation
name|Class
argument_list|<
name|?
extends|extends
name|Exchange
argument_list|>
name|exchangeClass
init|=
name|configuration
operator|.
name|getXChangeClass
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|exchangeClass
argument_list|,
literal|"XChange not supported: "
operator|+
name|configuration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the XChange and associated Endpoint
name|exchange
operator|=
operator|new
name|XChange
argument_list|(
name|ExchangeFactory
operator|.
name|INSTANCE
operator|.
name|createExchange
argument_list|(
name|exchangeClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
block|}
end_class

end_unit

