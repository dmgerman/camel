begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jclouds
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jclouds
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|JcloudsBlobStoreHelper
specifier|public
specifier|final
class|class
name|JcloudsBlobStoreHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JcloudsBlobStoreHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|JcloudsBlobStoreHelper ()
specifier|private
name|JcloudsBlobStoreHelper
parameter_list|()
block|{
comment|//Utility Class
block|}
comment|/**      * Writes payload to the the blobstore.      *      * @param blobStore      * @param container      * @param blobName      * @param payload      */
DECL|method|writeBlob (BlobStore blobStore, String container, String blobName, Object payload)
specifier|public
specifier|static
name|void
name|writeBlob
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|blobName
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
if|if
condition|(
name|blobName
operator|!=
literal|null
operator|&&
name|payload
operator|!=
literal|null
condition|)
block|{
name|Blob
name|blob
init|=
name|blobStore
operator|.
name|blobBuilder
argument_list|(
name|blobName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|blob
operator|.
name|setPayload
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|blobStore
operator|.
name|putBlob
argument_list|(
name|container
argument_list|,
name|blob
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while writing blob"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|oos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                     }
block|}
if|if
condition|(
name|baos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
block|}
comment|/**      * Reads from a {@link BlobStore}. It returns an Object.      *      * @param container      * @param blobName      * @return      */
DECL|method|readBlob (BlobStore blobStore, String container, String blobName, final ClassLoader classLoader)
specifier|public
specifier|static
name|Object
name|readBlob
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|,
name|String
name|container
parameter_list|,
name|String
name|blobName
parameter_list|,
specifier|final
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|ois
init|=
literal|null
decl_stmt|;
name|blobStore
operator|.
name|createContainerInLocation
argument_list|(
literal|null
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|blobStore
operator|.
name|getBlob
argument_list|(
name|container
argument_list|,
name|blobName
argument_list|)
operator|.
name|getPayload
argument_list|()
operator|.
name|getInput
argument_list|()
decl_stmt|;
try|try
block|{
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|is
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|resolveClass
parameter_list|(
name|ObjectStreamClass
name|desc
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|classLoader
operator|.
name|loadClass
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
return|return
name|super
operator|.
name|resolveClass
argument_list|(
name|desc
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|result
operator|=
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ois
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ois
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

