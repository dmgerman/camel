begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jclouds
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jclouds
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|BlobStoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|domain
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|JcloudsBlobStoreProducer
specifier|public
class|class
name|JcloudsBlobStoreProducer
extends|extends
name|JcloudsProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JcloudsBlobStoreProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|blobStoreContext
specifier|private
name|BlobStoreContext
name|blobStoreContext
decl_stmt|;
DECL|field|container
specifier|private
name|String
name|container
decl_stmt|;
DECL|method|JcloudsBlobStoreProducer (JcloudsEndpoint endpoint, BlobStoreContext blobStoreContext, String container)
specifier|public
name|JcloudsBlobStoreProducer
parameter_list|(
name|JcloudsEndpoint
name|endpoint
parameter_list|,
name|BlobStoreContext
name|blobStoreContext
parameter_list|,
name|String
name|container
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStoreContext
operator|=
name|blobStoreContext
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|blobName
init|=
name|extractBlobName
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobName
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getIn
argument_list|()
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|BlobStore
name|blobStore
init|=
name|blobStoreContext
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
name|Blob
name|blob
init|=
name|blobStore
operator|.
name|newBlob
argument_list|(
name|blobName
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|blob
operator|.
name|setPayload
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|blobStore
operator|.
name|putBlob
argument_list|(
name|container
argument_list|,
name|blob
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while writing blob"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|oos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                     }
block|}
if|if
condition|(
name|baos
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
block|}
comment|/**      * Extracts the BLOB_NAME from Exchange headers / properties.      *      * @param exchange      * @return      */
DECL|method|extractBlobName (Exchange exchange)
specifier|public
name|String
name|extractBlobName
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|blobName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|JcloudsConstants
operator|.
name|BLOB_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|blobName
operator|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getProperty
argument_list|(
name|JcloudsConstants
operator|.
name|BLOB_NAME
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JcloudsConstants
operator|.
name|BLOB_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|blobName
operator|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JcloudsConstants
operator|.
name|BLOB_NAME
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|blobName
return|;
block|}
block|}
end_class

end_unit

