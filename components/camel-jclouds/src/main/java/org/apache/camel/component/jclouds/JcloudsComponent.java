begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jclouds
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jclouds
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|ComputeService
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link JcloudsEndpoint}.  */
end_comment

begin_class
DECL|class|JcloudsComponent
specifier|public
class|class
name|JcloudsComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|blobStores
specifier|private
name|List
argument_list|<
name|BlobStore
argument_list|>
name|blobStores
decl_stmt|;
DECL|field|computeServices
specifier|private
name|List
argument_list|<
name|ComputeService
argument_list|>
name|computeServices
decl_stmt|;
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|uriParts
init|=
name|remaining
operator|.
name|split
argument_list|(
name|JcloudsConstants
operator|.
name|DELIMETER
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriParts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Endpoint URI: "
operator|+
name|uri
operator|+
literal|". It should contains a valid command and providerId"
argument_list|)
throw|;
block|}
name|String
name|endpointType
init|=
name|uriParts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|providerId
init|=
name|uriParts
index|[
literal|1
index|]
decl_stmt|;
name|JcloudsCommand
name|command
init|=
name|JcloudsCommand
operator|.
name|valueOf
argument_list|(
name|endpointType
argument_list|)
decl_stmt|;
name|JcloudsConfiguration
name|configuration
init|=
operator|new
name|JcloudsConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setProviderId
argument_list|(
name|providerId
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|configuration
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|JcloudsEndpoint
name|endpoint
decl_stmt|;
if|if
condition|(
name|JcloudsCommand
operator|.
name|blobstore
operator|==
name|command
condition|)
block|{
name|endpoint
operator|=
operator|new
name|JcloudsBlobStoreEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|getBlobStore
argument_list|(
name|providerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|=
operator|new
name|JcloudsComputeEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|getComputeService
argument_list|(
name|providerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
comment|/**      * Returns the {@link BlobStore} that matches the given providerOrApi.      * @param predicate The blobstore context name, provider or api.      * @return The matching {@link BlobStore}      */
DECL|method|getBlobStore (String predicate)
specifier|protected
name|BlobStore
name|getBlobStore
parameter_list|(
name|String
name|predicate
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|blobStores
operator|!=
literal|null
operator|&&
operator|!
name|blobStores
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//First try using name and then fallback to the provider or api.
if|if
condition|(
name|isNameSupportedByContext
argument_list|()
condition|)
block|{
for|for
control|(
name|BlobStore
name|blobStore
range|:
name|blobStores
control|)
block|{
if|if
condition|(
name|blobStore
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
return|return
name|blobStore
return|;
block|}
block|}
block|}
for|for
control|(
name|BlobStore
name|blobStore
range|:
name|blobStores
control|)
block|{
if|if
condition|(
name|blobStore
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
return|return
name|blobStore
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No blobstore found for:%s"
argument_list|,
name|predicate
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No blobstore available."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the {@link ComputeService} that matches the given predicate.      * @param predicate The compute context name, provider or api.      * @return The matching {@link ComputeService}      */
DECL|method|getComputeService (String predicate)
specifier|protected
name|ComputeService
name|getComputeService
parameter_list|(
name|String
name|predicate
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|computeServices
operator|!=
literal|null
operator|&&
operator|!
name|computeServices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//First try using name and then fallback to the provider or api.
if|if
condition|(
name|isNameSupportedByContext
argument_list|()
condition|)
block|{
for|for
control|(
name|ComputeService
name|computeService
range|:
name|computeServices
control|)
block|{
if|if
condition|(
name|computeService
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
return|return
name|computeService
return|;
block|}
block|}
block|}
for|for
control|(
name|ComputeService
name|computeService
range|:
name|computeServices
control|)
block|{
if|if
condition|(
name|computeService
operator|.
name|getContext
argument_list|()
operator|.
name|unwrap
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|predicate
argument_list|)
condition|)
block|{
return|return
name|computeService
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"No compute service found for :%s"
argument_list|,
name|predicate
argument_list|)
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No compute service available."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Checks if jclouds {@link Context} supports the name.      * We need this method as getName is not supported in earlier micro version of 1.5.x.      * So we use this check to fallback to traditional means of looking up contexts and services, if name is not present.      */
DECL|method|isNameSupportedByContext ()
specifier|private
name|boolean
name|isNameSupportedByContext
parameter_list|()
block|{
try|try
block|{
name|Context
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getName"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|getBlobStores ()
specifier|public
name|List
argument_list|<
name|BlobStore
argument_list|>
name|getBlobStores
parameter_list|()
block|{
return|return
name|blobStores
return|;
block|}
DECL|method|setBlobStores (List<BlobStore> blobStores)
specifier|public
name|void
name|setBlobStores
parameter_list|(
name|List
argument_list|<
name|BlobStore
argument_list|>
name|blobStores
parameter_list|)
block|{
name|this
operator|.
name|blobStores
operator|=
name|blobStores
expr_stmt|;
block|}
DECL|method|getComputeServices ()
specifier|public
name|List
argument_list|<
name|ComputeService
argument_list|>
name|getComputeServices
parameter_list|()
block|{
return|return
name|computeServices
return|;
block|}
DECL|method|setComputeServices (List<ComputeService> computeServices)
specifier|public
name|void
name|setComputeServices
parameter_list|(
name|List
argument_list|<
name|ComputeService
argument_list|>
name|computeServices
parameter_list|)
block|{
name|this
operator|.
name|computeServices
operator|=
name|computeServices
expr_stmt|;
block|}
block|}
end_class

end_unit

