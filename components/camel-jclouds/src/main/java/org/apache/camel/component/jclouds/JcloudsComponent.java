begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jclouds
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jclouds
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|BlobStoreContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|blobstore
operator|.
name|BlobStoreContextFactory
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link JcloudsEndpoint}.  */
end_comment

begin_class
DECL|class|JcloudsComponent
specifier|public
class|class
name|JcloudsComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|provider
specifier|private
name|String
name|provider
decl_stmt|;
DECL|field|identity
specifier|private
name|String
name|identity
decl_stmt|;
DECL|field|creadential
specifier|private
name|String
name|creadential
decl_stmt|;
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|uriParts
init|=
literal|null
decl_stmt|;
name|String
name|endpointType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remaining
operator|!=
literal|null
condition|)
block|{
name|uriParts
operator|=
name|remaining
operator|.
name|split
argument_list|(
name|JcloudsConstants
operator|.
name|DELIMETER
argument_list|)
expr_stmt|;
if|if
condition|(
name|uriParts
operator|!=
literal|null
operator|&&
name|uriParts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|endpointType
operator|=
name|uriParts
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|JcloudsConstants
operator|.
name|BLOBSTORE
operator|.
name|endsWith
argument_list|(
name|endpointType
argument_list|)
condition|)
block|{
if|if
condition|(
name|uriParts
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|String
name|container
init|=
name|uriParts
index|[
literal|1
index|]
decl_stmt|;
name|BlobStoreContext
name|blobStoreContext
init|=
operator|new
name|BlobStoreContextFactory
argument_list|()
operator|.
name|createContext
argument_list|(
name|provider
argument_list|,
name|identity
argument_list|,
name|creadential
argument_list|)
decl_stmt|;
name|endpoint
operator|=
operator|new
name|JcloudsBlobStoreEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|blobStoreContext
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid Endpoint URI. It should contains a valid container name"
argument_list|)
throw|;
block|}
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getProvider ()
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
DECL|method|setProvider (String provider)
specifier|public
name|void
name|setProvider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
DECL|method|getIdentity ()
specifier|public
name|String
name|getIdentity
parameter_list|()
block|{
return|return
name|identity
return|;
block|}
DECL|method|setIdentity (String identity)
specifier|public
name|void
name|setIdentity
parameter_list|(
name|String
name|identity
parameter_list|)
block|{
name|this
operator|.
name|identity
operator|=
name|identity
expr_stmt|;
block|}
DECL|method|getCreadential ()
specifier|public
name|String
name|getCreadential
parameter_list|()
block|{
return|return
name|creadential
return|;
block|}
DECL|method|setCreadential (String creadential)
specifier|public
name|void
name|setCreadential
parameter_list|(
name|String
name|creadential
parameter_list|)
block|{
name|this
operator|.
name|creadential
operator|=
name|creadential
expr_stmt|;
block|}
block|}
end_class

end_unit

