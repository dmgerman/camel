begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jclouds
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jclouds
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|JcloudsConfiguration
specifier|public
class|class
name|JcloudsConfiguration
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|command
specifier|private
name|JcloudsCommand
name|command
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|providerId
specifier|private
name|String
name|providerId
decl_stmt|;
comment|// compute options
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|)
DECL|field|imageId
specifier|private
name|String
name|imageId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|)
DECL|field|locationId
specifier|private
name|String
name|locationId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|)
DECL|field|hardwareId
specifier|private
name|String
name|hardwareId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|)
DECL|field|operation
specifier|private
name|String
name|operation
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|,
name|enums
operator|=
literal|"PENDING,TERMINATED,SUSPENDED,RUNNING,ERROR,UNRECOGNIZED"
argument_list|)
DECL|field|nodeState
specifier|private
name|String
name|nodeState
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|)
DECL|field|nodeId
specifier|private
name|String
name|nodeId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|)
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,compute"
argument_list|)
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
comment|// blob options
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"blobstore"
argument_list|)
DECL|field|container
specifier|private
name|String
name|container
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,blobstore"
argument_list|)
DECL|field|directory
specifier|private
name|String
name|directory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,blobstore"
argument_list|)
DECL|field|blobName
specifier|private
name|String
name|blobName
decl_stmt|;
DECL|method|getCommand ()
specifier|public
name|JcloudsCommand
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
comment|/**      * What command to execute such as blobstore or compute.      */
DECL|method|setCommand (JcloudsCommand command)
specifier|public
name|void
name|setCommand
parameter_list|(
name|JcloudsCommand
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
DECL|method|getProviderId ()
specifier|public
name|String
name|getProviderId
parameter_list|()
block|{
return|return
name|providerId
return|;
block|}
comment|/**      * The name of the cloud provider that provides the target service (e.g. aws-s3 or aws_ec2).      */
DECL|method|setProviderId (String providerId)
specifier|public
name|void
name|setProviderId
parameter_list|(
name|String
name|providerId
parameter_list|)
block|{
name|this
operator|.
name|providerId
operator|=
name|providerId
expr_stmt|;
block|}
DECL|method|getImageId ()
specifier|public
name|String
name|getImageId
parameter_list|()
block|{
return|return
name|imageId
return|;
block|}
comment|/**      * The imageId that will be used for creating a node. Values depend on the actual cloud provider.      */
DECL|method|setImageId (String imageId)
specifier|public
name|void
name|setImageId
parameter_list|(
name|String
name|imageId
parameter_list|)
block|{
name|this
operator|.
name|imageId
operator|=
name|imageId
expr_stmt|;
block|}
DECL|method|getLocationId ()
specifier|public
name|String
name|getLocationId
parameter_list|()
block|{
return|return
name|locationId
return|;
block|}
comment|/**      * The location that will be used for creating a node. Values depend on the actual cloud provider.      */
DECL|method|setLocationId (String locationId)
specifier|public
name|void
name|setLocationId
parameter_list|(
name|String
name|locationId
parameter_list|)
block|{
name|this
operator|.
name|locationId
operator|=
name|locationId
expr_stmt|;
block|}
DECL|method|getHardwareId ()
specifier|public
name|String
name|getHardwareId
parameter_list|()
block|{
return|return
name|hardwareId
return|;
block|}
comment|/**      * The hardware that will be used for creating a node. Values depend on the actual cloud provider.      */
DECL|method|setHardwareId (String hardwareId)
specifier|public
name|void
name|setHardwareId
parameter_list|(
name|String
name|hardwareId
parameter_list|)
block|{
name|this
operator|.
name|hardwareId
operator|=
name|hardwareId
expr_stmt|;
block|}
DECL|method|getOperation ()
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
comment|/**      * Specifies the type of operation that will be performed to the blobstore.      */
DECL|method|setOperation (String operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getNodeState ()
specifier|public
name|String
name|getNodeState
parameter_list|()
block|{
return|return
name|nodeState
return|;
block|}
comment|/**      * To filter by node status to only select running nodes etc.      */
DECL|method|setNodeState (String nodeState)
specifier|public
name|void
name|setNodeState
parameter_list|(
name|String
name|nodeState
parameter_list|)
block|{
name|this
operator|.
name|nodeState
operator|=
name|nodeState
expr_stmt|;
block|}
DECL|method|getNodeId ()
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
comment|/**      * The id of the node that will run the script or destroyed.      */
DECL|method|setNodeId (String nodeId)
specifier|public
name|void
name|setNodeId
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
DECL|method|getGroup ()
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
comment|/**      * The group that will be assigned to the newly created node. Values depend on the actual cloud provider.      */
DECL|method|setGroup (String group)
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
comment|/**      * The user on the target node that will run the script.      */
DECL|method|setUser (String user)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|getContainer ()
specifier|public
name|String
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
comment|/**      * The name of the blob container.      */
DECL|method|setContainer (String container)
specifier|public
name|void
name|setContainer
parameter_list|(
name|String
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
DECL|method|getDirectory ()
specifier|public
name|String
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
comment|/**      * An optional directory name to use      */
DECL|method|setDirectory (String directory)
specifier|public
name|void
name|setDirectory
parameter_list|(
name|String
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
DECL|method|getBlobName ()
specifier|public
name|String
name|getBlobName
parameter_list|()
block|{
return|return
name|blobName
return|;
block|}
comment|/**      * The name of the blob.      */
DECL|method|setBlobName (String blobName)
specifier|public
name|void
name|setBlobName
parameter_list|(
name|String
name|blobName
parameter_list|)
block|{
name|this
operator|.
name|blobName
operator|=
name|blobName
expr_stmt|;
block|}
block|}
end_class

end_unit

