begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jclouds
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jclouds
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|Hardware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jclouds
operator|.
name|compute
operator|.
name|domain
operator|.
name|NodeMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|JcloudsSpringComputeTest
specifier|public
class|class
name|JcloudsSpringComputeTest
extends|extends
name|CamelSpringTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|result
specifier|protected
name|MockEndpoint
name|result
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:resultlist"
argument_list|)
DECL|field|resultlist
specifier|protected
name|MockEndpoint
name|resultlist
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|destroyHeaders
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"classpath:compute-test.xml"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testListImages ()
specifier|public
name|void
name|testListImages
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|LIST_IMAGES
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|!=
literal|null
operator|&&
operator|!
name|exchanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|images
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|images
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|images
control|)
block|{
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|Image
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testListHardware ()
specifier|public
name|void
name|testListHardware
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|LIST_HARDWARE
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|!=
literal|null
operator|&&
operator|!
name|exchanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|hardwares
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hardwares
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|hardwares
control|)
block|{
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|Hardware
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testListNodes ()
specifier|public
name|void
name|testListNodes
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|LIST_NODES
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|!=
literal|null
operator|&&
operator|!
name|exchanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|nodeMetadatas
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Nodes should be 0"
argument_list|,
literal|0
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateAndListNodes ()
specifier|public
name|void
name|testCreateAndListNodes
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|LIST_NODES
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|!=
literal|null
operator|&&
operator|!
name|exchanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|nodeMetadatas
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Nodes should be 1"
argument_list|,
literal|1
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateAndListWithPredicates ()
specifier|public
name|void
name|testCreateAndListWithPredicates
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|//Create a node for the default group
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Create a node for the group 'other'
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"2"
argument_list|,
literal|"other"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|listNodeHeaders
argument_list|(
literal|null
argument_list|,
literal|"other"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|listNodeHeaders
argument_list|(
literal|"3"
argument_list|,
literal|"other"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|listNodeHeaders
argument_list|(
literal|"3"
argument_list|,
literal|"other"
argument_list|,
literal|"RUNNING"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAndDestroyNode ()
specifier|public
name|void
name|testCreateAndDestroyNode
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|!=
literal|null
operator|&&
operator|!
name|exchanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|nodeMetadatas
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be no node running"
argument_list|,
literal|1
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|nodeMetadatas
control|)
block|{
name|NodeMetadata
name|nodeMetadata
init|=
operator|(
name|NodeMetadata
operator|)
name|obj
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|destroyHeaders
argument_list|(
name|nodeMetadata
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateAndRebootNode ()
specifier|public
name|void
name|testCreateAndRebootNode
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|!=
literal|null
operator|&&
operator|!
name|exchanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|nodeMetadatas
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be one node running"
argument_list|,
literal|1
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|nodeMetadatas
control|)
block|{
name|NodeMetadata
name|nodeMetadata
init|=
operator|(
name|NodeMetadata
operator|)
name|obj
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|rebootHeaders
argument_list|(
name|nodeMetadata
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|resultlist
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:nodelist"
argument_list|,
literal|null
argument_list|,
name|listNodeHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|,
literal|"RUNNING"
argument_list|)
argument_list|)
expr_stmt|;
name|resultlist
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchangesNodeList
init|=
name|resultlist
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchangesNodeList
operator|!=
literal|null
operator|&&
operator|!
name|exchangesNodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchangesNodeList
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|nodeMetadatas
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be one node running"
argument_list|,
literal|1
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|nodeMetadatas
control|)
block|{
name|NodeMetadata
name|nodeMetadata
init|=
operator|(
name|NodeMetadata
operator|)
name|obj
decl_stmt|;
name|assertEquals
argument_list|(
name|nodeMetadata
operator|.
name|getId
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateAndSuspendNode ()
specifier|public
name|void
name|testCreateAndSuspendNode
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchanges
operator|!=
literal|null
operator|&&
operator|!
name|exchanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|nodeMetadatas
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be one node running"
argument_list|,
literal|1
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|nodeMetadatas
control|)
block|{
name|NodeMetadata
name|nodeMetadata
init|=
operator|(
name|NodeMetadata
operator|)
name|obj
decl_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|suspendHeaders
argument_list|(
name|nodeMetadata
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|resultlist
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:nodelist"
argument_list|,
literal|null
argument_list|,
name|listNodeHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|,
literal|"SUSPENDED"
argument_list|)
argument_list|)
expr_stmt|;
name|resultlist
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchangesNodeList
init|=
name|resultlist
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchangesNodeList
operator|!=
literal|null
operator|&&
operator|!
name|exchangesNodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchangesNodeList
control|)
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|nodeMetadatas
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be one node suspended"
argument_list|,
literal|1
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|nodeMetadatas
control|)
block|{
name|NodeMetadata
name|nodeMetadata
init|=
operator|(
name|NodeMetadata
operator|)
name|obj
decl_stmt|;
name|assertEquals
argument_list|(
name|nodeMetadata
operator|.
name|getId
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Ignore
argument_list|(
literal|"For now not possible to combine stub provider with ssh module, required for runScript"
argument_list|)
annotation|@
name|Test
DECL|method|testRunScript ()
specifier|public
name|void
name|testRunScript
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|runScriptHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|runScriptHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|RUN_SCRIPT
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|NodeMetadata
argument_list|>
name|nodeMetadatas
init|=
operator|(
name|Set
argument_list|<
name|?
extends|extends
name|NodeMetadata
argument_list|>
operator|)
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:in-out"
argument_list|,
literal|null
argument_list|,
name|createHeaders
argument_list|(
literal|"1"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be a node running"
argument_list|,
literal|1
argument_list|,
name|nodeMetadatas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeMetadata
name|nodeMetadata
range|:
name|nodeMetadatas
control|)
block|{
name|runScriptHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|NODE_ID
argument_list|,
name|nodeMetadata
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:in-out"
argument_list|,
literal|null
argument_list|,
name|runScriptHeaders
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:in-out"
argument_list|,
literal|null
argument_list|,
name|destroyHeaders
argument_list|(
name|nodeMetadata
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns a {@Map} with the create headers.      *      * @param imageId The imageId to use for creating the node.      * @param group   The group to be assigned to the node.      */
DECL|method|createHeaders (String imageId, String group)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createHeaders
parameter_list|(
name|String
name|imageId
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|createHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|createHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|CREATE_NODE
argument_list|)
expr_stmt|;
name|createHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|IMAGE_ID
argument_list|,
name|imageId
argument_list|)
expr_stmt|;
name|createHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|GROUP
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|createHeaders
return|;
block|}
comment|/**      * Returns a {@Map} with the destroy headers.      *      * @param nodeId The id of the node to destroy.      * @param group  The group of the node to destroy.      */
DECL|method|destroyHeaders (String nodeId, String group)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|destroyHeaders
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|destroyHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|destroyHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|DESTROY_NODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|destroyHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|NODE_ID
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|destroyHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|GROUP
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|destroyHeaders
return|;
block|}
comment|/**      * Returns a {@Map} with the destroy headers.      *      * @param nodeId The id of the node to destroy.      * @param group  The group of the node to destroy.      */
DECL|method|listNodeHeaders (String nodeId, String group, Object state)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|listNodeHeaders
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|group
parameter_list|,
name|Object
name|state
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|listHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|listHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|LIST_NODES
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|listHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|NODE_ID
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|listHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|GROUP
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|listHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|NODE_STATE
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
return|return
name|listHeaders
return|;
block|}
comment|/**      * Returns a {@Map} with the reboot headers.      *      * @param nodeId The id of the node to reboot.      * @param group  The group of the node to reboot.      */
DECL|method|rebootHeaders (String nodeId, String group)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rebootHeaders
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rebootHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|rebootHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|REBOOT_NODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|rebootHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|NODE_ID
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|rebootHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|GROUP
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|rebootHeaders
return|;
block|}
comment|/**      * Returns a {@Map} with the suspend headers.      *      * @param nodeId The id of the node to suspend.      * @param group  The group of the node to suspend.      */
DECL|method|suspendHeaders (String nodeId, String group)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|suspendHeaders
parameter_list|(
name|String
name|nodeId
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rebootHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|rebootHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|OPERATION
argument_list|,
name|JcloudsConstants
operator|.
name|SUSPEND_NODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|rebootHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|NODE_ID
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|rebootHeaders
operator|.
name|put
argument_list|(
name|JcloudsConstants
operator|.
name|GROUP
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|rebootHeaders
return|;
block|}
block|}
end_class

end_unit

