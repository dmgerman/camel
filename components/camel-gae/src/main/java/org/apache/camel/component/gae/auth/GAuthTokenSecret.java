begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
package|;
end_package

begin_comment
comment|/**  * A request token secret container with marshalling/unmarshalling methods to  * and from a cookie.  *   * @see GAuthAuthorizeBinding  * @see GAuthUpgradeBinding  */
end_comment

begin_class
DECL|class|GAuthTokenSecret
specifier|public
class|class
name|GAuthTokenSecret
block|{
comment|/**      * Name of the request token secret cookie.      */
DECL|field|COOKIE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COOKIE_NAME
init|=
literal|"gauth-token-secret"
decl_stmt|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
comment|/**      * Creates a new {@link GAuthTokenSecret}      *       * @param value      *            request token secret.      */
DECL|method|GAuthTokenSecret (String value)
specifier|public
name|GAuthTokenSecret
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Returns the request token secret.      */
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Creates a cookie from this {@link GAuthTokenSecret}.      */
DECL|method|toCookie ()
specifier|public
name|String
name|toCookie
parameter_list|()
block|{
return|return
name|COOKIE_NAME
operator|+
literal|"="
operator|+
name|value
return|;
block|}
comment|/**      * Create a {@link GAuthTokenSecret} from a cookies string.      *       * @param cookies cookies string.      * @return either an {@link GAuthTokenSecret} instance or<code>null</code>      *         if there's no cookie with name {@link #COOKIE_NAME}.      */
DECL|method|fromCookie (String cookies)
specifier|public
specifier|static
name|GAuthTokenSecret
name|fromCookie
parameter_list|(
name|String
name|cookies
parameter_list|)
block|{
if|if
condition|(
name|cookies
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|cookie
range|:
name|cookies
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
name|String
index|[]
name|pair
init|=
name|cookie
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|COOKIE_NAME
argument_list|)
condition|)
block|{
return|return
operator|new
name|GAuthTokenSecret
argument_list|(
name|pair
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

