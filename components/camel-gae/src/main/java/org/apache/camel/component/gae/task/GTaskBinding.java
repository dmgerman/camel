begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.task
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|task
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|labs
operator|.
name|taskqueue
operator|.
name|TaskOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|bind
operator|.
name|InboundBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|bind
operator|.
name|OutboundBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|DefaultHttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_comment
comment|/**  * Binds the {@link TaskOptions} of the task queueing service to a Camel  * {@link Exchange} for outbound communication. For inbound communication a  * {@link HttpMessage} is bound to {@link Exchange}.  */
end_comment

begin_class
DECL|class|GTaskBinding
specifier|public
class|class
name|GTaskBinding
implements|implements
name|OutboundBinding
argument_list|<
name|GTaskEndpoint
argument_list|,
name|TaskOptions
argument_list|,
name|Void
argument_list|>
implements|,
name|InboundBinding
argument_list|<
name|GTaskEndpoint
argument_list|,
name|HttpServletRequest
argument_list|,
name|HttpServletResponse
argument_list|>
block|{
comment|/**      * Camel header name corresponding to<code>X-AppEngine-QueueName</code>      * header created by task queueing service.      */
DECL|field|GTASK_QUEUE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|GTASK_QUEUE_NAME
init|=
literal|"org.apache.camel.component.gae.task.QueueName"
decl_stmt|;
comment|/**      * Camel header name corresponding to<code>X-AppEngine-TaskName</code>      * header created by task queueing service.      */
DECL|field|GTASK_TASK_NAME
specifier|public
specifier|static
specifier|final
name|String
name|GTASK_TASK_NAME
init|=
literal|"org.apache.camel.component.gae.task.TaskName"
decl_stmt|;
comment|/**      * Camel header name corresponding to<code>X-AppEngine-TaskRetryCount</code>      * header created by task queueing service.      */
DECL|field|GTASK_RETRY_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|GTASK_RETRY_COUNT
init|=
literal|"org.apache.camel.component.gae.task.RetryCount"
decl_stmt|;
DECL|field|GAE_QUEUE_NAME
specifier|static
specifier|final
name|String
name|GAE_QUEUE_NAME
init|=
literal|"X-AppEngine-QueueName"
decl_stmt|;
DECL|field|GAE_TASK_NAME
specifier|static
specifier|final
name|String
name|GAE_TASK_NAME
init|=
literal|"X-AppEngine-TaskName"
decl_stmt|;
DECL|field|GAE_RETRY_COUNT
specifier|static
specifier|final
name|String
name|GAE_RETRY_COUNT
init|=
literal|"X-AppEngine-TaskRetryCount"
decl_stmt|;
comment|// ----------------------------------------------------------------
comment|//  Outbound binding
comment|// ----------------------------------------------------------------
comment|/**      * Reads data from<code>exchange</code> and writes it to a newly created      * {@link TaskOptions} instance. The<code>request</code> parameter is      * ignored.      *       * @param endpoint      * @param exchange      * @param request      *            ignored.      * @return a newly created {@link TaskOptions} instance containing data from      *<code>exchange</code>.      */
DECL|method|writeRequest (GTaskEndpoint endpoint, Exchange exchange, TaskOptions request)
specifier|public
name|TaskOptions
name|writeRequest
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|TaskOptions
name|request
parameter_list|)
block|{
name|TaskOptions
name|answer
init|=
name|TaskOptions
operator|.
name|Builder
operator|.
name|url
argument_list|(
name|getWorkerRoot
argument_list|(
name|endpoint
argument_list|)
operator|+
name|endpoint
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|writeRequestHeaders
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|writeRequestBody
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|answer
argument_list|)
expr_stmt|;
comment|// TODO: consider TaskOptions method (POST, GET, ...)
return|return
name|answer
return|;
block|}
comment|/**      * @throws UnsupportedOperationException.      */
DECL|method|readResponse (GTaskEndpoint endpoint, Exchange exchange, Void response)
specifier|public
name|Exchange
name|readResponse
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Void
name|response
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"gtask responses not supported"
argument_list|)
throw|;
block|}
comment|// ----------------------------------------------------------------
comment|//  Inbound binding
comment|// ----------------------------------------------------------------
comment|/**      * Replaces the task service-specific headers (<code>X-AppEngine-*</code>)      * with Camel-specific headers.      *       * @see GTaskBinding#GTASK_QUEUE_NAME      * @see GTaskBinding#GTASK_TASK_NAME      * @see GTaskBinding#GTASK_RETRY_COUNT      * @see DefaultHttpBinding#readRequest(HttpServletRequest, HttpMessage)      */
DECL|method|readRequest (GTaskEndpoint endpoint, Exchange exchange, HttpServletRequest request)
specifier|public
name|Exchange
name|readRequest
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|readRequestHeaders
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
comment|/**      * @throws UnsupportedOperationException.      */
DECL|method|writeResponse (GTaskEndpoint endpoint, Exchange exchange, HttpServletResponse response)
specifier|public
name|HttpServletResponse
name|writeResponse
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"gtask responses not supported"
argument_list|)
throw|;
block|}
comment|// ----------------------------------------------------------------
comment|//  Customization points
comment|// ----------------------------------------------------------------
DECL|method|writeRequestHeaders (GTaskEndpoint endpoint, Exchange exchange, TaskOptions request)
specifier|protected
name|void
name|writeRequestHeaders
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|TaskOptions
name|request
parameter_list|)
block|{
name|HeaderFilterStrategy
name|strategy
init|=
name|endpoint
operator|.
name|getHeaderFilterStrategy
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|headerName
range|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|headerValue
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|headerName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|strategy
operator|!=
literal|null
operator|&&
operator|!
name|strategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|request
operator|.
name|header
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readRequestHeaders (GTaskEndpoint endpoint, Exchange exchange, HttpServletRequest request)
specifier|protected
name|void
name|readRequestHeaders
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|GAE_QUEUE_NAME
decl_stmt|;
name|Object
name|val
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|GTASK_QUEUE_NAME
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|GAE_TASK_NAME
expr_stmt|;
name|val
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|GTASK_TASK_NAME
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|key
operator|=
name|GAE_RETRY_COUNT
expr_stmt|;
name|val
operator|=
name|message
operator|.
name|getHeader
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|GTASK_RETRY_COUNT
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
comment|// EXPERIMENTAL // TODO: resolve gzip encoding issues
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
literal|"Accept-Encoding"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
literal|"Content-Encoding"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeRequestBody (GTaskEndpoint endpoint, Exchange exchange, TaskOptions request)
specifier|protected
name|void
name|writeRequestBody
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|TaskOptions
name|request
parameter_list|)
block|{
comment|// TODO: allow message header or endpoint uri to configure character encoding and content type
name|request
operator|.
name|payload
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
block|}
DECL|method|getWorkerRoot (GTaskEndpoint endpoint)
specifier|protected
name|String
name|getWorkerRoot
parameter_list|(
name|GTaskEndpoint
name|endpoint
parameter_list|)
block|{
return|return
literal|"/"
operator|+
name|endpoint
operator|.
name|getWorkerRoot
argument_list|()
return|;
block|}
block|}
end_class

end_unit

