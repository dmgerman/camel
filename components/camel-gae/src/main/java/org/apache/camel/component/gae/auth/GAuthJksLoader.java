begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
operator|.
name|PasswordProtection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
operator|.
name|PrivateKeyEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_comment
comment|/**  * A Java keystore specific key loader.   */
end_comment

begin_class
DECL|class|GAuthJksLoader
specifier|public
class|class
name|GAuthJksLoader
implements|implements
name|GAuthKeyLoader
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|keyStoreLocation
specifier|private
name|String
name|keyStoreLocation
decl_stmt|;
DECL|field|storePass
specifier|private
name|String
name|storePass
decl_stmt|;
DECL|field|keyPass
specifier|private
name|String
name|keyPass
decl_stmt|;
DECL|field|keyAlias
specifier|private
name|String
name|keyAlias
decl_stmt|;
DECL|method|GAuthJksLoader ()
specifier|public
name|GAuthJksLoader
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|GAuthJksLoader (String keyStoreLocation, String storePass, String keyPass, String keyAlias)
specifier|public
name|GAuthJksLoader
parameter_list|(
name|String
name|keyStoreLocation
parameter_list|,
name|String
name|storePass
parameter_list|,
name|String
name|keyPass
parameter_list|,
name|String
name|keyAlias
parameter_list|)
block|{
name|this
operator|.
name|keyStoreLocation
operator|=
name|keyStoreLocation
expr_stmt|;
name|this
operator|.
name|storePass
operator|=
name|storePass
expr_stmt|;
name|this
operator|.
name|keyPass
operator|=
name|keyPass
expr_stmt|;
name|this
operator|.
name|keyAlias
operator|=
name|keyAlias
expr_stmt|;
block|}
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
comment|/**      * Set the location of the Java keystore.      */
DECL|method|setKeyStoreLocation (String keyStoreLocation)
specifier|public
name|void
name|setKeyStoreLocation
parameter_list|(
name|String
name|keyStoreLocation
parameter_list|)
block|{
name|this
operator|.
name|keyStoreLocation
operator|=
name|keyStoreLocation
expr_stmt|;
block|}
comment|/**      * Sets the password used to open the key store.      */
DECL|method|setStorePass (String storePass)
specifier|public
name|void
name|setStorePass
parameter_list|(
name|String
name|storePass
parameter_list|)
block|{
name|this
operator|.
name|storePass
operator|=
name|storePass
expr_stmt|;
block|}
comment|/**      * Sets the password used to get access to a specific key.      */
DECL|method|setKeyPass (String keyPass)
specifier|public
name|void
name|setKeyPass
parameter_list|(
name|String
name|keyPass
parameter_list|)
block|{
name|this
operator|.
name|keyPass
operator|=
name|keyPass
expr_stmt|;
block|}
comment|/**      * Sets the alias of the key to be loaded.      */
DECL|method|setKeyAlias (String keyAlias)
specifier|public
name|void
name|setKeyAlias
parameter_list|(
name|String
name|keyAlias
parameter_list|)
block|{
name|this
operator|.
name|keyAlias
operator|=
name|keyAlias
expr_stmt|;
block|}
comment|/**      * Loads a private key from a Java keystore depending on this loader's properties.      */
DECL|method|loadPrivateKey ()
specifier|public
name|PrivateKey
name|loadPrivateKey
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|keyStoreLocation
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|loadPrivateKey
argument_list|(
name|input
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadPrivateKey (InputStream input)
specifier|private
name|PrivateKey
name|loadPrivateKey
parameter_list|(
name|InputStream
name|input
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Load keystore
name|KeyStore
name|keystore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
decl_stmt|;
name|keystore
operator|.
name|load
argument_list|(
name|input
argument_list|,
name|storePass
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrieve private key
name|PrivateKeyEntry
name|entry
init|=
operator|(
name|PrivateKeyEntry
operator|)
name|keystore
operator|.
name|getEntry
argument_list|(
name|keyAlias
argument_list|,
operator|new
name|PasswordProtection
argument_list|(
name|keyPass
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|entry
operator|.
name|getPrivateKey
argument_list|()
return|;
block|}
block|}
end_class

end_unit

