begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.bind
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|bind
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpMessage
import|;
end_import

begin_comment
comment|/**  * Post-processes {@link HttpBinding} invocations by delegating to an  * endpoint's {@link InboundBinding}.  */
end_comment

begin_class
DECL|class|HttpBindingInvocationHandler
specifier|public
class|class
name|HttpBindingInvocationHandler
parameter_list|<
name|E
extends|extends
name|Endpoint
parameter_list|,
name|S
parameter_list|,
name|T
parameter_list|>
implements|implements
name|InvocationHandler
block|{
DECL|field|endpoint
specifier|private
name|E
name|endpoint
decl_stmt|;
DECL|field|httpBinding
specifier|private
name|HttpBinding
name|httpBinding
decl_stmt|;
DECL|field|inboundBinding
specifier|private
name|InboundBinding
argument_list|<
name|E
argument_list|,
name|S
argument_list|,
name|T
argument_list|>
name|inboundBinding
decl_stmt|;
DECL|method|HttpBindingInvocationHandler (E endpoint, HttpBinding httpBinding, InboundBinding<E, S, T> inboundBinding)
specifier|public
name|HttpBindingInvocationHandler
parameter_list|(
name|E
name|endpoint
parameter_list|,
name|HttpBinding
name|httpBinding
parameter_list|,
name|InboundBinding
argument_list|<
name|E
argument_list|,
name|S
argument_list|,
name|T
argument_list|>
name|inboundBinding
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|httpBinding
operator|=
name|httpBinding
expr_stmt|;
name|this
operator|.
name|inboundBinding
operator|=
name|inboundBinding
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|invoke (Object proxy, Method method, Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
name|result
init|=
name|method
operator|.
name|invoke
argument_list|(
name|httpBinding
argument_list|,
name|args
argument_list|)
decl_stmt|;
comment|// updates args
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"readRequest"
argument_list|)
operator|&&
operator|(
name|args
operator|.
name|length
operator|==
literal|2
operator|)
condition|)
block|{
name|HttpMessage
name|message
init|=
operator|(
name|HttpMessage
operator|)
name|args
index|[
literal|1
index|]
decl_stmt|;
comment|// prepare exchange for further inbound binding operations
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|setIn
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// delegate further request binding operations to inbound binding
name|inboundBinding
operator|.
name|readRequest
argument_list|(
name|endpoint
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|,
operator|(
name|S
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"writeResponse"
argument_list|)
operator|&&
operator|(
name|args
operator|.
name|length
operator|==
literal|2
operator|)
condition|)
block|{
comment|// delegate further response binding operations to inbound binding
name|inboundBinding
operator|.
name|writeResponse
argument_list|(
name|endpoint
argument_list|,
operator|(
name|Exchange
operator|)
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|T
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

