begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|mail
operator|.
name|MailService
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|bind
operator|.
name|OutboundBinding
import|;
end_import

begin_comment
comment|/**  * Binds the {@link Message} of the mail service to a Camel {@link Exchange}.  */
end_comment

begin_class
DECL|class|GMailBinding
specifier|public
class|class
name|GMailBinding
implements|implements
name|OutboundBinding
argument_list|<
name|GMailEndpoint
argument_list|,
name|Message
argument_list|,
name|Void
argument_list|>
block|{
comment|/**      * Camel header for setting the mail message sender.      */
DECL|field|GMAIL_SENDER
specifier|public
specifier|static
specifier|final
name|String
name|GMAIL_SENDER
init|=
literal|"org.apache.camel.component.gae.mail.Sender"
decl_stmt|;
comment|/**      * Camel header for setting the mail message subject.      */
DECL|field|GMAIL_SUBJECT
specifier|public
specifier|static
specifier|final
name|String
name|GMAIL_SUBJECT
init|=
literal|"org.apache.camel.component.gae.mail.Subject"
decl_stmt|;
comment|/**      * Camel header for setting the mail message to-recipient (single recipient      * or comma-separated list).      */
DECL|field|GMAIL_TO
specifier|public
specifier|static
specifier|final
name|String
name|GMAIL_TO
init|=
literal|"org.apache.camel.component.gae.mail.To"
decl_stmt|;
comment|/**      * Camel header for setting the mail message cc-recipient (single recipient      * or comma-separated list).      */
DECL|field|GMAIL_CC
specifier|public
specifier|static
specifier|final
name|String
name|GMAIL_CC
init|=
literal|"org.apache.camel.component.gae.mail.Cc"
decl_stmt|;
comment|/**      * Camel header for setting the mail message bcc-recipient (single recipient      * or comma-separated list).      */
DECL|field|GMAIL_BCC
specifier|public
specifier|static
specifier|final
name|String
name|GMAIL_BCC
init|=
literal|"org.apache.camel.component.gae.mail.Bcc"
decl_stmt|;
comment|/**      * Reads data from<code>exchange</code> and writes it to a newly created      * {@link Message} instance. The<code>request</code> parameter is      * ignored.      *       * @param endpoint      * @param exchange      * @param request      *            ignored.      * @return a newly created {@link Message} instance containing data from      *<code>exchange</code>.      */
DECL|method|writeRequest (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|public
name|Message
name|writeRequest
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|()
decl_stmt|;
name|writeFrom
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeTo
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeCc
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeBcc
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeSubject
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeBody
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeAttachments
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
comment|/**      * @throws UnsupportedOperationException.      */
DECL|method|readResponse (GMailEndpoint endpoint, Exchange exchange, Void response)
specifier|public
name|Exchange
name|readResponse
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Void
name|response
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"gmail responses not supported"
argument_list|)
throw|;
block|}
DECL|method|writeFrom (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|protected
name|void
name|writeFrom
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
name|String
name|sender
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GMAIL_SENDER
argument_list|)
decl_stmt|;
if|if
condition|(
name|sender
operator|==
literal|null
condition|)
block|{
name|sender
operator|=
name|endpoint
operator|.
name|getSender
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|setSender
argument_list|(
name|sender
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|protected
name|void
name|writeTo
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
name|String
name|to
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GMAIL_TO
argument_list|)
decl_stmt|;
if|if
condition|(
name|to
operator|==
literal|null
condition|)
block|{
name|to
operator|=
name|endpoint
operator|.
name|getTo
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|setTo
argument_list|(
name|to
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCc (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|protected
name|void
name|writeCc
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
name|String
name|cc
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GMAIL_CC
argument_list|)
decl_stmt|;
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
block|{
name|cc
operator|=
name|endpoint
operator|.
name|getCc
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setCc
argument_list|(
name|cc
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeBcc (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|protected
name|void
name|writeBcc
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
name|String
name|bcc
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GMAIL_BCC
argument_list|)
decl_stmt|;
if|if
condition|(
name|bcc
operator|==
literal|null
condition|)
block|{
name|bcc
operator|=
name|endpoint
operator|.
name|getBcc
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bcc
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setBcc
argument_list|(
name|bcc
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeSubject (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|protected
name|void
name|writeSubject
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
name|String
name|subject
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GMAIL_SUBJECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
name|subject
operator|=
name|endpoint
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
name|request
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
DECL|method|writeBody (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|protected
name|void
name|writeBody
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
comment|// TODO: allow message header or endpoint uri to configure character encoding
name|request
operator|.
name|setTextBody
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeAttachments (GMailEndpoint endpoint, Exchange exchange, Message request)
specifier|protected
name|void
name|writeAttachments
parameter_list|(
name|GMailEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Message
name|request
parameter_list|)
block|{
comment|// TODO: support attachments
block|}
block|}
end_class

end_unit

