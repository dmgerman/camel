begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|PKCS8EncodedKeySpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|util
operator|.
name|common
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_comment
comment|/**  * A Java PKCS#8-specific key loader.  */
end_comment

begin_class
DECL|class|GAuthPk8Loader
specifier|public
class|class
name|GAuthPk8Loader
implements|implements
name|GAuthKeyLoader
block|{
DECL|field|BEGIN
specifier|private
specifier|static
specifier|final
name|String
name|BEGIN
init|=
literal|"-----BEGIN PRIVATE KEY-----"
decl_stmt|;
DECL|field|END
specifier|private
specifier|static
specifier|final
name|String
name|END
init|=
literal|"-----END PRIVATE KEY-----"
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|keyLocation
specifier|private
name|String
name|keyLocation
decl_stmt|;
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
comment|/**      * Sets the location of the PKCS#8 file that contains a private key.      */
DECL|method|setKeyLocation (String keyLocation)
specifier|public
name|void
name|setKeyLocation
parameter_list|(
name|String
name|keyLocation
parameter_list|)
block|{
name|this
operator|.
name|keyLocation
operator|=
name|keyLocation
expr_stmt|;
block|}
comment|/**      * Loads a private key from a PKCS#8 file.      */
DECL|method|loadPrivateKey ()
specifier|public
name|PrivateKey
name|loadPrivateKey
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|keyLocation
argument_list|)
decl_stmt|;
name|String
name|str
decl_stmt|;
try|try
block|{
name|str
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
comment|// replace line feeds from windows to unix style
if|if
condition|(
operator|!
name|System
operator|.
name|lineSeparator
argument_list|()
operator|.
name|equals
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|str
operator|.
name|contains
argument_list|(
name|BEGIN
argument_list|)
operator|&&
name|str
operator|.
name|contains
argument_list|(
name|END
argument_list|)
condition|)
block|{
name|str
operator|=
name|str
operator|.
name|substring
argument_list|(
name|BEGIN
operator|.
name|length
argument_list|()
argument_list|,
name|str
operator|.
name|lastIndexOf
argument_list|(
name|END
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|decoded
init|=
name|Base64
operator|.
name|decode
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|KeyFactory
name|factory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|generatePrivate
argument_list|(
operator|new
name|PKCS8EncodedKeySpec
argument_list|(
name|decoded
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

