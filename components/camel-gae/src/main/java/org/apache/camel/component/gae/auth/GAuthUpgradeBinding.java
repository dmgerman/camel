begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|client
operator|.
name|authn
operator|.
name|oauth
operator|.
name|GoogleOAuthParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|bind
operator|.
name|OutboundBinding
import|;
end_import

begin_comment
comment|/**  * Binds {@link GoogleOAuthParameters} to a Camel {@link Exchange}. This binding  * is used by<code>gauth:upgrade</code> endpoints by default.  */
end_comment

begin_class
DECL|class|GAuthUpgradeBinding
specifier|public
class|class
name|GAuthUpgradeBinding
implements|implements
name|OutboundBinding
argument_list|<
name|GAuthEndpoint
argument_list|,
name|GoogleOAuthParameters
argument_list|,
name|GoogleOAuthParameters
argument_list|>
block|{
comment|/**      * Name of the Camel header containing an access token.       */
DECL|field|GAUTH_ACCESS_TOKEN
specifier|public
specifier|static
specifier|final
name|String
name|GAUTH_ACCESS_TOKEN
init|=
literal|"CamelGauthAccessToken"
decl_stmt|;
comment|/**      * Name of the Camel header containing an access token secret.       */
DECL|field|GAUTH_ACCESS_TOKEN_SECRET
specifier|public
specifier|static
specifier|final
name|String
name|GAUTH_ACCESS_TOKEN_SECRET
init|=
literal|"CamelGauthAccessTokenSecret"
decl_stmt|;
comment|/**      * Creates a {@link GoogleOAuthParameters} object from endpoint and      *<code>exchange.getIn()</code> data. The created parameter object is used      * to upgrade an authorized request token to an access token. If the      * {@link GAuthComponent} is configured to use the HMAC_SHA1 signature      * method, a request token secret is obtained from a      * {@link GAuthTokenSecret#COOKIE_NAME} cookie.      *       * @param endpoint      * @param exchange      * @param request      *            ignored.      * @return      * @throws GAuthException      *             if the {@link GAuthComponent} is configured to use the      *             HMAC_SHA1 signature method but there's no cookie with the      *             request token secret.      */
DECL|method|writeRequest (GAuthEndpoint endpoint, Exchange exchange, GoogleOAuthParameters request)
specifier|public
name|GoogleOAuthParameters
name|writeRequest
parameter_list|(
name|GAuthEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GoogleOAuthParameters
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|request
operator|=
operator|new
name|GoogleOAuthParameters
argument_list|()
expr_stmt|;
name|request
operator|.
name|setOAuthConsumerKey
argument_list|(
name|endpoint
operator|.
name|getConsumerKey
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOAuthConsumerSecret
argument_list|(
name|endpoint
operator|.
name|getConsumerSecret
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOAuthToken
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"oauth_token"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOAuthVerifier
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"oauth_verifier"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getComponent
argument_list|()
operator|.
name|getKeyLoader
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// HMAC_SHA signature is used for getting an access token.
comment|// The required token secret has been previously stored as cookie.
name|String
name|cookie
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|GAuthTokenSecret
name|tokenSecret
init|=
name|GAuthTokenSecret
operator|.
name|fromCookie
argument_list|(
name|cookie
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenSecret
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|GAuthException
argument_list|(
name|GAuthTokenSecret
operator|.
name|COOKIE_NAME
operator|+
literal|" cookie doesn't exist"
argument_list|)
throw|;
block|}
name|request
operator|.
name|setOAuthTokenSecret
argument_list|(
name|tokenSecret
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|request
return|;
block|}
comment|/**      * Creates an<code>exchange.getOut()</code> message that containing the       * access token and the access token secret in the message header.      *       * @param endpoint      * @param exchange      * @param response      * @return      * @see #GAUTH_ACCESS_TOKEN      * @see #GAUTH_ACCESS_TOKEN_SECRET      */
DECL|method|readResponse (GAuthEndpoint endpoint, Exchange exchange, GoogleOAuthParameters response)
specifier|public
name|Exchange
name|readResponse
parameter_list|(
name|GAuthEndpoint
name|endpoint
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|GoogleOAuthParameters
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GAUTH_ACCESS_TOKEN
argument_list|,
name|response
operator|.
name|getOAuthToken
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GAUTH_ACCESS_TOKEN_SECRET
argument_list|,
name|response
operator|.
name|getOAuthTokenSecret
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
block|}
end_class

end_unit

