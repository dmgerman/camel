begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.login
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|login
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
operator|.
name|GAuthComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|bind
operator|.
name|OutboundBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_comment
comment|/**  * The<a href="http://camel.apache.org/glogin.html">GLogin Component</a>  * encapsulates the required steps needed to login to an Google App Engine (GAE)  * application. This component uses<a  * href="http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html"  *>ClientLogin</a> for authentication and a GAE-specific mechanism for  * authorization. Result of the login procedure is an authorization cookie that  * should be included in HTTP requests targeted at GAE applications. This  * component is intended for being used by Java client applications that want to  * do a programmatic login to GAE applications. Web applications should use the  * {@link GAuthComponent} for access authorization to other web applications.  */
end_comment

begin_class
DECL|class|GLoginComponent
specifier|public
class|class
name|GLoginComponent
extends|extends
name|DefaultComponent
block|{
DECL|method|GLoginComponent ()
specifier|public
name|GLoginComponent
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|GLoginComponent (CamelContext context)
specifier|public
name|GLoginComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|OutboundBinding
argument_list|<
name|GLoginEndpoint
argument_list|,
name|GLoginData
argument_list|,
name|GLoginData
argument_list|>
name|outboundBinding
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"outboundBindingRef"
argument_list|,
name|GLoginBinding
operator|.
name|class
argument_list|,
operator|new
name|GLoginBinding
argument_list|()
argument_list|)
decl_stmt|;
name|GLoginService
name|service
init|=
name|resolveAndRemoveReferenceParameter
argument_list|(
name|parameters
argument_list|,
literal|"serviceRef"
argument_list|,
name|GLoginService
operator|.
name|class
argument_list|,
operator|new
name|GLoginServiceImpl
argument_list|()
argument_list|)
decl_stmt|;
name|GLoginEndpoint
name|endpoint
init|=
operator|new
name|GLoginEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|getHostName
argument_list|(
name|remaining
argument_list|)
argument_list|,
name|getDevPort
argument_list|(
name|remaining
argument_list|)
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setOutboundBinding
argument_list|(
name|outboundBinding
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getHostName (String remaining)
specifier|private
specifier|static
name|String
name|getHostName
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
if|if
condition|(
name|remaining
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
name|remaining
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|remaining
return|;
block|}
block|}
DECL|method|getDevPort (String remaining)
specifier|private
specifier|static
name|int
name|getDevPort
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
if|if
condition|(
name|remaining
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|remaining
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|8080
return|;
block|}
block|}
block|}
end_class

end_unit

