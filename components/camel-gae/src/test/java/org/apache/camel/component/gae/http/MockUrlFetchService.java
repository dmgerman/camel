begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.http
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|urlfetch
operator|.
name|HTTPHeader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|urlfetch
operator|.
name|HTTPRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|urlfetch
operator|.
name|HTTPResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|urlfetch
operator|.
name|MockHttpResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|urlfetch
operator|.
name|URLFetchService
import|;
end_import

begin_class
DECL|class|MockUrlFetchService
specifier|public
class|class
name|MockUrlFetchService
implements|implements
name|URLFetchService
block|{
DECL|method|fetch (URL url)
specifier|public
name|HTTPResponse
name|fetch
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not impemented"
argument_list|)
throw|;
block|}
DECL|method|fetch (HTTPRequest request)
specifier|public
name|HTTPResponse
name|fetch
parameter_list|(
name|HTTPRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|MockHttpResponse
name|response
init|=
operator|new
name|MockHttpResponse
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|response
operator|.
name|setContent
argument_list|(
name|request
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"testUrl"
argument_list|,
name|request
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"testQuery"
argument_list|,
name|request
operator|.
name|getURL
argument_list|()
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|addHeader
argument_list|(
literal|"testMethod"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HTTPHeader
name|header
range|:
name|request
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

