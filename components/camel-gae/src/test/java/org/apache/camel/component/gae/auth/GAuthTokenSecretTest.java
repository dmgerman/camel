begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
operator|.
name|GAuthTokenSecret
operator|.
name|COOKIE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|GAuthTokenSecretTest
specifier|public
class|class
name|GAuthTokenSecretTest
block|{
DECL|field|tokenSecret
specifier|private
name|GAuthTokenSecret
name|tokenSecret
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|tokenSecret
operator|=
operator|new
name|GAuthTokenSecret
argument_list|(
literal|"abc123"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testToCookie ()
specifier|public
name|void
name|testToCookie
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|COOKIE_NAME
operator|+
literal|"=abc123"
argument_list|,
name|tokenSecret
operator|.
name|toCookie
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFromCookieExist ()
specifier|public
name|void
name|testFromCookieExist
parameter_list|()
block|{
name|String
name|cookie0
init|=
literal|" "
operator|+
name|COOKIE_NAME
operator|+
literal|"=abc122"
decl_stmt|;
name|String
name|cookie1
init|=
literal|" "
operator|+
name|COOKIE_NAME
operator|+
literal|"=abc123 "
decl_stmt|;
name|String
name|cookie2
init|=
literal|" "
operator|+
name|COOKIE_NAME
operator|+
literal|"=abc124; "
decl_stmt|;
name|String
name|cookie3
init|=
literal|" "
operator|+
name|COOKIE_NAME
operator|+
literal|"=abc125;"
decl_stmt|;
name|String
name|cookie4
init|=
literal|" "
operator|+
name|COOKIE_NAME
operator|+
literal|"=abc126; x=y;"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc122"
argument_list|,
name|GAuthTokenSecret
operator|.
name|fromCookie
argument_list|(
name|cookie0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc123"
argument_list|,
name|GAuthTokenSecret
operator|.
name|fromCookie
argument_list|(
name|cookie1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc124"
argument_list|,
name|GAuthTokenSecret
operator|.
name|fromCookie
argument_list|(
name|cookie2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc125"
argument_list|,
name|GAuthTokenSecret
operator|.
name|fromCookie
argument_list|(
name|cookie3
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc126"
argument_list|,
name|GAuthTokenSecret
operator|.
name|fromCookie
argument_list|(
name|cookie4
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFromCookieNotExist ()
specifier|public
name|void
name|testFromCookieNotExist
parameter_list|()
block|{
name|String
name|cookie
init|=
literal|"blah=abc123"
decl_stmt|;
name|assertNull
argument_list|(
name|GAuthTokenSecret
operator|.
name|fromCookie
argument_list|(
name|cookie
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

