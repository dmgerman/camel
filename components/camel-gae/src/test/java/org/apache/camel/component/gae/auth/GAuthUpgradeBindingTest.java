begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gdata
operator|.
name|client
operator|.
name|authn
operator|.
name|oauth
operator|.
name|GoogleOAuthParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
operator|.
name|GAuthTestUtils
operator|.
name|createComponent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
operator|.
name|GAuthTokenSecret
operator|.
name|COOKIE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
operator|.
name|GAuthUpgradeBinding
operator|.
name|GAUTH_ACCESS_TOKEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|auth
operator|.
name|GAuthUpgradeBinding
operator|.
name|GAUTH_ACCESS_TOKEN_SECRET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|GAuthUpgradeBindingTest
specifier|public
class|class
name|GAuthUpgradeBindingTest
block|{
DECL|field|binding
specifier|private
specifier|static
name|GAuthUpgradeBinding
name|binding
decl_stmt|;
DECL|field|component
specifier|private
specifier|static
name|GAuthComponent
name|component
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|static
name|GAuthEndpoint
name|endpoint
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|component
operator|=
name|createComponent
argument_list|()
expr_stmt|;
name|binding
operator|=
operator|new
name|GAuthUpgradeBinding
argument_list|()
expr_stmt|;
name|endpoint
operator|=
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"gauth:upgrade"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
name|component
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteRequest ()
specifier|public
name|void
name|testWriteRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"oauth_token"
argument_list|,
literal|"token1"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"oauth_verifier"
argument_list|,
literal|"verifier1"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"Cookie"
argument_list|,
name|COOKIE_NAME
operator|+
literal|"=secret1"
argument_list|)
expr_stmt|;
name|GoogleOAuthParameters
name|params
init|=
name|binding
operator|.
name|writeRequest
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"testConsumerKey"
argument_list|,
name|params
operator|.
name|getOAuthConsumerKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testConsumerSecret"
argument_list|,
name|params
operator|.
name|getOAuthConsumerSecret
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"token1"
argument_list|,
name|params
operator|.
name|getOAuthToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"secret1"
argument_list|,
name|params
operator|.
name|getOAuthTokenSecret
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"verifier1"
argument_list|,
name|params
operator|.
name|getOAuthVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|GAuthException
operator|.
name|class
argument_list|)
DECL|method|testWriteRequestNoCookie ()
specifier|public
name|void
name|testWriteRequestNoCookie
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"oauth_token"
argument_list|,
literal|"token1"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"oauth_verifier"
argument_list|,
literal|"verifier1"
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeRequest
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadResponse ()
specifier|public
name|void
name|testReadResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|GoogleOAuthParameters
name|params
init|=
operator|new
name|GoogleOAuthParameters
argument_list|()
decl_stmt|;
name|params
operator|.
name|setOAuthToken
argument_list|(
literal|"token2"
argument_list|)
expr_stmt|;
name|params
operator|.
name|setOAuthTokenSecret
argument_list|(
literal|"tokenSecret2"
argument_list|)
expr_stmt|;
name|binding
operator|.
name|readResponse
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"token2"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GAUTH_ACCESS_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tokenSecret2"
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GAUTH_ACCESS_TOKEN_SECRET
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadResponseNoToken ()
specifier|public
name|void
name|testReadResponseNoToken
parameter_list|()
throws|throws
name|Exception
block|{
name|GoogleOAuthParameters
name|params
init|=
operator|new
name|GoogleOAuthParameters
argument_list|()
decl_stmt|;
name|binding
operator|.
name|readResponse
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GAUTH_ACCESS_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|GAUTH_ACCESS_TOKEN_SECRET
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

