begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|mail
operator|.
name|MailService
import|;
end_import

begin_class
DECL|class|MockMailService
specifier|public
class|class
name|MockMailService
implements|implements
name|MailService
block|{
DECL|field|messages
specifier|private
name|LinkedList
argument_list|<
name|Message
argument_list|>
name|messages
decl_stmt|;
DECL|method|MockMailService ()
specifier|public
name|MockMailService
parameter_list|()
block|{
name|this
operator|.
name|messages
operator|=
operator|new
name|LinkedList
argument_list|<
name|Message
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|send (Message message)
specifier|public
name|void
name|send
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|sendToAdmins (Message message)
specifier|public
name|void
name|sendToAdmins
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
DECL|method|getFirstMessage ()
specifier|public
name|Message
name|getFirstMessage
parameter_list|()
block|{
return|return
name|getMessage
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getMessage (int idx)
specifier|public
name|Message
name|getMessage
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|messages
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|messages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

