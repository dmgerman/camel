begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.task
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|task
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|labs
operator|.
name|taskqueue
operator|.
name|TaskOptionsAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mock
operator|.
name|web
operator|.
name|MockHttpServletRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|http
operator|.
name|GHttpTestUtils
operator|.
name|getCamelContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|task
operator|.
name|GTaskTestUtils
operator|.
name|createEndpoint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|task
operator|.
name|GTaskTestUtils
operator|.
name|createTaskOptionsAccessor
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
DECL|class|GTaskBindingTest
specifier|public
class|class
name|GTaskBindingTest
block|{
DECL|field|binding
specifier|private
specifier|static
name|GTaskBinding
name|binding
decl_stmt|;
DECL|field|exchange
specifier|private
name|DefaultExchange
name|exchange
decl_stmt|;
DECL|field|endpoint
specifier|private
name|GTaskEndpoint
name|endpoint
decl_stmt|;
DECL|field|accessor
specifier|private
name|TaskOptionsAccessor
name|accessor
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
block|{
name|binding
operator|=
operator|new
name|GTaskBinding
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|accessor
operator|=
name|createTaskOptionsAccessor
argument_list|()
expr_stmt|;
name|endpoint
operator|=
name|createEndpoint
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteRequestHeaders ()
specifier|public
name|void
name|testWriteRequestHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"test"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
literal|"x=y"
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeRequestHeaders
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|accessor
operator|.
name|getTaskOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|accessor
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|accessor
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteRequestBody ()
specifier|public
name|void
name|testWriteRequestBody
parameter_list|()
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeRequestBody
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|accessor
operator|.
name|getTaskOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|accessor
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteRequest ()
specifier|public
name|void
name|testWriteRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|GTaskEndpoint
name|custom
init|=
name|createEndpoint
argument_list|(
literal|"test?workerRoot=lazy"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"anything"
argument_list|)
expr_stmt|;
name|accessor
operator|=
operator|new
name|TaskOptionsAccessor
argument_list|(
name|binding
operator|.
name|writeRequest
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/worker/test"
argument_list|,
name|accessor
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|accessor
operator|=
operator|new
name|TaskOptionsAccessor
argument_list|(
name|binding
operator|.
name|writeRequest
argument_list|(
name|custom
argument_list|,
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/lazy/test"
argument_list|,
name|accessor
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadRequest ()
specifier|public
name|void
name|testReadRequest
parameter_list|()
block|{
name|exchange
operator|.
name|setFromEndpoint
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|MockHttpServletRequest
name|request
init|=
operator|new
name|MockHttpServletRequest
argument_list|()
decl_stmt|;
name|HttpMessage
name|message
init|=
operator|new
name|HttpMessage
argument_list|(
name|exchange
argument_list|,
name|request
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|addHeader
argument_list|(
name|GTaskBinding
operator|.
name|GAE_QUEUE_NAME
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|request
operator|.
name|addHeader
argument_list|(
name|GTaskBinding
operator|.
name|GAE_TASK_NAME
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|request
operator|.
name|addHeader
argument_list|(
name|GTaskBinding
operator|.
name|GAE_RETRY_COUNT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
comment|// test invocation of inbound binding via dynamic proxy
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|readRequest
argument_list|(
name|request
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|GTaskBinding
operator|.
name|GTASK_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|GTaskBinding
operator|.
name|GTASK_TASK_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|GTaskBinding
operator|.
name|GTASK_RETRY_COUNT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GTaskBinding
operator|.
name|GAE_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GTaskBinding
operator|.
name|GAE_TASK_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|GTaskBinding
operator|.
name|GAE_RETRY_COUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

