begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|mail
operator|.
name|MailService
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
operator|.
name|GMailTestUtils
operator|.
name|createEndpoint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
operator|.
name|GMailTestUtils
operator|.
name|createMessage
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
operator|.
name|GMailTestUtils
operator|.
name|getCamelContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|GMailBindingTest
specifier|public
class|class
name|GMailBindingTest
block|{
DECL|field|binding
specifier|private
specifier|static
name|GMailBinding
name|binding
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|static
name|GMailEndpoint
name|endpoint
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|message
specifier|private
name|Message
name|message
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|binding
operator|=
operator|new
name|GMailBinding
argument_list|()
expr_stmt|;
name|endpoint
operator|=
name|createEndpoint
argument_list|(
literal|"gmail:user1@gmail.com?to=user2@gmail.com&subject=test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|createMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteFrom ()
specifier|public
name|void
name|testWriteFrom
parameter_list|()
block|{
name|binding
operator|.
name|writeFrom
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user1@gmail.com"
argument_list|,
name|message
operator|.
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteTo ()
specifier|public
name|void
name|testWriteTo
parameter_list|()
block|{
name|binding
operator|.
name|writeTo
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user2@gmail.com"
argument_list|,
name|message
operator|.
name|getTo
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GMailBinding
operator|.
name|GMAIL_TO
argument_list|,
literal|"user3@gmail.com"
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeTo
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user3@gmail.com"
argument_list|,
name|message
operator|.
name|getTo
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteSubject ()
specifier|public
name|void
name|testWriteSubject
parameter_list|()
block|{
name|binding
operator|.
name|writeSubject
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|message
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GMailBinding
operator|.
name|GMAIL_SUBJECT
argument_list|,
literal|"another"
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeSubject
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"another"
argument_list|,
name|message
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteBody ()
specifier|public
name|void
name|testWriteBody
parameter_list|()
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|binding
operator|.
name|writeBody
argument_list|(
name|endpoint
argument_list|,
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|message
operator|.
name|getTextBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

