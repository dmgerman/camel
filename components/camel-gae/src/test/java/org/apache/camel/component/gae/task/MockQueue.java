begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.task
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|task
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|datastore
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|labs
operator|.
name|taskqueue
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|labs
operator|.
name|taskqueue
operator|.
name|TaskHandle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|labs
operator|.
name|taskqueue
operator|.
name|TaskOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|labs
operator|.
name|taskqueue
operator|.
name|TaskOptionsAccessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|PostMethodWebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletUnitClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|MockQueue
specifier|public
class|class
name|MockQueue
implements|implements
name|Queue
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|servletUnitClient
specifier|private
name|ServletUnitClient
name|servletUnitClient
decl_stmt|;
DECL|method|MockQueue ()
specifier|public
name|MockQueue
parameter_list|()
block|{
name|this
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
block|}
DECL|method|MockQueue (String name)
specifier|public
name|MockQueue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|setServletUnitClient (ServletUnitClient servletUnitClient)
specifier|public
name|void
name|setServletUnitClient
parameter_list|(
name|ServletUnitClient
name|servletUnitClient
parameter_list|)
block|{
name|this
operator|.
name|servletUnitClient
operator|=
name|servletUnitClient
expr_stmt|;
block|}
DECL|method|add ()
specifier|public
name|TaskHandle
name|add
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
DECL|method|add (TaskOptions taskOptions)
specifier|public
name|TaskHandle
name|add
parameter_list|(
name|TaskOptions
name|taskOptions
parameter_list|)
block|{
return|return
name|add
argument_list|(
literal|null
argument_list|,
name|taskOptions
argument_list|)
return|;
block|}
DECL|method|add (Iterable<TaskOptions> taskOptionsIterable)
specifier|public
name|List
argument_list|<
name|TaskHandle
argument_list|>
name|add
parameter_list|(
name|Iterable
argument_list|<
name|TaskOptions
argument_list|>
name|taskOptionsIterable
parameter_list|)
block|{
return|return
name|add
argument_list|(
literal|null
argument_list|,
name|taskOptionsIterable
argument_list|)
return|;
block|}
DECL|method|add (Transaction transaction, TaskOptions taskOptions)
specifier|public
name|TaskHandle
name|add
parameter_list|(
name|Transaction
name|transaction
parameter_list|,
name|TaskOptions
name|taskOptions
parameter_list|)
block|{
name|TaskOptionsAccessor
name|accessor
init|=
operator|new
name|TaskOptionsAccessor
argument_list|(
name|taskOptions
argument_list|)
decl_stmt|;
try|try
block|{
name|PostMethodWebRequest
name|request
init|=
operator|new
name|PostMethodWebRequest
argument_list|(
name|accessor
operator|.
name|getUrl
argument_list|()
argument_list|,
name|accessor
operator|.
name|getPayload
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|setHeaderField
argument_list|(
name|GTaskBinding
operator|.
name|GAE_QUEUE_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|request
operator|.
name|setHeaderField
argument_list|(
name|GTaskBinding
operator|.
name|GAE_RETRY_COUNT
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|accessor
operator|.
name|getTaskName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setHeaderField
argument_list|(
name|GTaskBinding
operator|.
name|GAE_TASK_NAME
argument_list|,
name|accessor
operator|.
name|getTaskName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|accessor
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|request
operator|.
name|setHeaderField
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|servletUnitClient
operator|.
name|getResponse
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|add (Transaction transaction, Iterable<TaskOptions> taskOptionsIterable)
specifier|public
name|List
argument_list|<
name|TaskHandle
argument_list|>
name|add
parameter_list|(
name|Transaction
name|transaction
parameter_list|,
name|Iterable
argument_list|<
name|TaskOptions
argument_list|>
name|taskOptionsIterable
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TaskHandle
argument_list|>
name|handles
init|=
operator|new
name|ArrayList
argument_list|<
name|TaskHandle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TaskOptions
name|taskOptions
range|:
name|taskOptionsIterable
control|)
block|{
name|handles
operator|.
name|add
argument_list|(
name|add
argument_list|(
name|transaction
argument_list|,
name|taskOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|handles
return|;
block|}
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

