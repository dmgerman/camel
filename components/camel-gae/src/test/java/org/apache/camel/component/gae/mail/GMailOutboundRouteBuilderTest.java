begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.gae.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
operator|.
name|GMailBinding
operator|.
name|GMAIL_SUBJECT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|gae
operator|.
name|mail
operator|.
name|GMailBinding
operator|.
name|GMAIL_TO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"/org/apache/camel/component/gae/mail/context-outbound.xml"
block|}
argument_list|)
DECL|class|GMailOutboundRouteBuilderTest
specifier|public
class|class
name|GMailOutboundRouteBuilderTest
block|{
annotation|@
name|Autowired
DECL|field|producerTemplate
specifier|private
name|ProducerTemplate
name|producerTemplate
decl_stmt|;
annotation|@
name|Autowired
DECL|field|mailService
specifier|private
name|MockMailService
name|mailService
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|mailService
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendDefault ()
specifier|public
name|void
name|testSendDefault
parameter_list|()
block|{
name|producerTemplate
operator|.
name|sendBody
argument_list|(
literal|"direct:input1"
argument_list|,
literal|"testBody"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSubject"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testBody"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getTextBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test1@example.org"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test2@example.org"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getTo
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendCustomTo ()
specifier|public
name|void
name|testSendCustomTo
parameter_list|()
block|{
name|producerTemplate
operator|.
name|send
argument_list|(
literal|"direct:input1"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"testBody"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GMAIL_TO
argument_list|,
literal|"test3@example.org"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testSubject"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testBody"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getTextBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test1@example.org"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test3@example.org"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getTo
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendCustomSubject ()
specifier|public
name|void
name|testSendCustomSubject
parameter_list|()
block|{
name|producerTemplate
operator|.
name|send
argument_list|(
literal|"direct:input1"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"testBody"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|GMAIL_SUBJECT
argument_list|,
literal|"anotherSubject"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"anotherSubject"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testBody"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getTextBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test1@example.org"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getSender
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test2@example.org"
argument_list|,
name|mailService
operator|.
name|getFirstMessage
argument_list|()
operator|.
name|getTo
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

