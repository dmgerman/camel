begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|com.google.appengine.api.urlfetch
package|package
name|com
operator|.
name|google
operator|.
name|appengine
operator|.
name|api
operator|.
name|urlfetch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|MockHttpResponse
specifier|public
class|class
name|MockHttpResponse
extends|extends
name|HTTPResponse
block|{
DECL|method|MockHttpResponse (int responseCode)
specifier|public
name|MockHttpResponse
parameter_list|(
name|int
name|responseCode
parameter_list|)
block|{
name|super
argument_list|(
name|responseCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addHeader (String name, String value)
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContent ()
specifier|public
name|byte
index|[]
name|getContent
parameter_list|()
block|{
return|return
name|super
operator|.
name|getContent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHeaders ()
specifier|public
name|List
argument_list|<
name|HTTPHeader
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|super
operator|.
name|getHeaders
argument_list|()
return|;
block|}
DECL|method|getHeader (String name)
specifier|public
name|HTTPHeader
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|HTTPHeader
name|header
range|:
name|getHeaders
argument_list|()
control|)
block|{
if|if
condition|(
name|header
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|header
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setContent (byte[] content)
specifier|public
name|void
name|setContent
parameter_list|(
name|byte
index|[]
name|content
parameter_list|)
block|{
name|super
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

