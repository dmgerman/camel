begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|CamelServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Camel HTTP servlet which can be used in Camel routes to route servlet invocations in routes.  */
end_comment

begin_class
DECL|class|CamelHttpTransportServlet
specifier|public
class|class
name|CamelHttpTransportServlet
extends|extends
name|CamelServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|1797014782158930490L
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelHttpTransportServlet
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Resource
DECL|field|httpRegistry
specifier|private
name|HttpRegistry
name|httpRegistry
decl_stmt|;
annotation|@
name|Override
DECL|method|init (ServletConfig config)
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|this
operator|.
name|setServletName
argument_list|(
name|config
operator|.
name|getServletName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpRegistry
operator|==
literal|null
condition|)
block|{
name|httpRegistry
operator|=
name|HttpRegistryImpl
operator|.
name|getSingletonHttpRegistry
argument_list|()
expr_stmt|;
block|}
name|httpRegistry
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized CamelHttpTransportServlet["
operator|+
name|getServletName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|httpRegistry
operator|.
name|unregister
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Destroyed CamelHttpTransportServlet["
operator|+
name|getServletName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|method|getServletEndpoint (HttpConsumer consumer)
specifier|private
name|ServletEndpoint
name|getServletEndpoint
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|instanceof
name|ServletEndpoint
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid consumer type. Must be ServletEndpoint"
argument_list|)
throw|;
block|}
return|return
operator|(
name|ServletEndpoint
operator|)
name|consumer
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|connect (HttpConsumer consumer)
specifier|public
name|void
name|connect
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
block|{
name|ServletEndpoint
name|endpoint
init|=
name|getServletEndpoint
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getServletName
argument_list|()
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getServletName
argument_list|()
operator|.
name|equals
argument_list|(
name|getServletName
argument_list|()
argument_list|)
condition|)
block|{
name|super
operator|.
name|connect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

