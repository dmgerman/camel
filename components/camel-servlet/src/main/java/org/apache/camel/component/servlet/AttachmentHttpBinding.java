begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|DefaultHttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultAttachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * To handle attachments with Servlet.  *<p/>  * This implementation is needed to deal with attachments when using Servlet.  */
end_comment

begin_class
DECL|class|AttachmentHttpBinding
specifier|public
specifier|final
class|class
name|AttachmentHttpBinding
extends|extends
name|DefaultHttpBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AttachmentHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AttachmentHttpBinding ()
name|AttachmentHttpBinding
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|populateAttachments (HttpServletRequest request, HttpMessage message)
specifier|protected
name|void
name|populateAttachments
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpMessage
name|message
parameter_list|)
block|{
try|try
block|{
name|Collection
argument_list|<
name|Part
argument_list|>
name|parts
init|=
name|request
operator|.
name|getParts
argument_list|()
decl_stmt|;
for|for
control|(
name|Part
name|part
range|:
name|parts
control|)
block|{
name|String
name|fileName
init|=
name|part
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// is the file name accepted
name|boolean
name|accepted
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|getFileNameExtWhitelist
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|ext
init|=
name|FileUtil
operator|.
name|onlyExt
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
block|{
name|ext
operator|=
name|ext
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|String
name|whiteList
init|=
name|getFileNameExtWhitelist
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|whiteList
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|&&
operator|!
name|whiteList
operator|.
name|contains
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|accepted
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|accepted
condition|)
block|{
name|DataSource
name|ds
init|=
operator|new
name|PartDataSource
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|Attachment
name|attachment
init|=
operator|new
name|DefaultAttachment
argument_list|(
name|ds
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|headerName
range|:
name|part
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|headerValue
range|:
name|part
operator|.
name|getHeaders
argument_list|(
name|headerName
argument_list|)
control|)
block|{
name|attachment
operator|.
name|addHeader
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|addAttachmentObject
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|attachment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot add file as attachment: {} because the file is not accepted according to fileNameExtWhitelist: {}"
argument_list|,
name|fileName
argument_list|,
name|getFileNameExtWhitelist
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Cannot populate attachments"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|PartDataSource
specifier|public
specifier|final
class|class
name|PartDataSource
implements|implements
name|DataSource
block|{
DECL|field|part
specifier|private
specifier|final
name|Part
name|part
decl_stmt|;
DECL|method|PartDataSource (Part part)
name|PartDataSource
parameter_list|(
name|Part
name|part
parameter_list|)
block|{
name|this
operator|.
name|part
operator|=
name|part
expr_stmt|;
block|}
DECL|method|getSubmittedFileName ()
specifier|public
name|String
name|getSubmittedFileName
parameter_list|()
block|{
return|return
name|part
operator|.
name|getSubmittedFileName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream ()
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|part
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|part
operator|.
name|getInputStream
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|part
operator|.
name|getContentType
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

