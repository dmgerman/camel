begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servlet.osgi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servlet
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpService
import|;
end_import

begin_comment
comment|/**  * Register the given (CamelHttpTransport) Servlet with the OSGI   *<a href="http://www.osgi.org/javadoc/r4v42/org/osgi/service/http/HttpService.html">  * HttpService</a>  *   * See src/test/resources/osgiservletregisterer.xml  */
end_comment

begin_class
DECL|class|OsgiServletRegisterer
specifier|public
class|class
name|OsgiServletRegisterer
block|{
comment|/**      * The alias is the name in the URI namespace of the Http Service at which the registration will be mapped      * An alias must begin with slash ('/') and must not end with slash ('/'), with the exception that an alias       * of the form "/" is used to denote the root alias.      */
DECL|field|alias
specifier|private
name|String
name|alias
decl_stmt|;
comment|/**      * The servlet name.      */
DECL|field|servletName
specifier|private
name|String
name|servletName
init|=
literal|"CamelServlet"
decl_stmt|;
comment|/**      * Servlet to be registered      */
DECL|field|servlet
specifier|private
name|HttpServlet
name|servlet
decl_stmt|;
comment|/**      * HttpService to register with. Get this with osgi:reference in the blueprint file      */
DECL|field|httpService
specifier|private
name|HttpService
name|httpService
decl_stmt|;
DECL|field|httpContext
specifier|private
name|HttpContext
name|httpContext
decl_stmt|;
DECL|field|alreadyRegistered
specifier|private
name|boolean
name|alreadyRegistered
decl_stmt|;
comment|// The servlet will default have to match on uri prefix as some endpoints may do so
DECL|field|matchOnUriPrefix
specifier|private
specifier|volatile
name|boolean
name|matchOnUriPrefix
init|=
literal|true
decl_stmt|;
DECL|method|setHttpService (HttpService httpService)
specifier|public
name|void
name|setHttpService
parameter_list|(
name|HttpService
name|httpService
parameter_list|)
block|{
name|this
operator|.
name|httpService
operator|=
name|httpService
expr_stmt|;
block|}
DECL|method|setAlias (String alias)
specifier|public
name|void
name|setAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
DECL|method|setServletName (String servletName)
specifier|public
name|void
name|setServletName
parameter_list|(
name|String
name|servletName
parameter_list|)
block|{
name|this
operator|.
name|servletName
operator|=
name|servletName
expr_stmt|;
block|}
DECL|method|setServlet (HttpServlet servlet)
specifier|public
name|void
name|setServlet
parameter_list|(
name|HttpServlet
name|servlet
parameter_list|)
block|{
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
block|}
DECL|method|setHttpContext (HttpContext httpContext)
specifier|public
name|void
name|setHttpContext
parameter_list|(
name|HttpContext
name|httpContext
parameter_list|)
block|{
name|this
operator|.
name|httpContext
operator|=
name|httpContext
expr_stmt|;
block|}
DECL|method|setMatchOnUriPrefix (boolean matchOnUriPrefix)
specifier|public
name|void
name|setMatchOnUriPrefix
parameter_list|(
name|boolean
name|matchOnUriPrefix
parameter_list|)
block|{
name|this
operator|.
name|matchOnUriPrefix
operator|=
name|matchOnUriPrefix
expr_stmt|;
block|}
DECL|method|register ()
specifier|public
name|void
name|register
parameter_list|()
throws|throws
name|Exception
block|{
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|alias
argument_list|,
literal|"alias"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|servletName
argument_list|,
literal|"servletName"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|HttpContext
name|actualHttpContext
init|=
operator|(
name|httpContext
operator|==
literal|null
operator|)
condition|?
name|httpService
operator|.
name|createDefaultHttpContext
argument_list|()
else|:
name|httpContext
decl_stmt|;
specifier|final
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|initParams
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|initParams
operator|.
name|put
argument_list|(
literal|"matchOnUriPrefix"
argument_list|,
name|matchOnUriPrefix
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|initParams
operator|.
name|put
argument_list|(
literal|"servlet-name"
argument_list|,
name|servletName
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|registerServlet
argument_list|(
name|alias
argument_list|,
name|servlet
argument_list|,
name|initParams
argument_list|,
name|actualHttpContext
argument_list|)
expr_stmt|;
name|alreadyRegistered
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|unregister ()
specifier|public
name|void
name|unregister
parameter_list|()
block|{
if|if
condition|(
name|alreadyRegistered
condition|)
block|{
name|httpService
operator|.
name|unregister
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|alreadyRegistered
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

