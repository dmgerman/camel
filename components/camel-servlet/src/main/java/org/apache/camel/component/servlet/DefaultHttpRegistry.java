begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|CamelServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DefaultHttpRegistry
specifier|public
class|class
name|DefaultHttpRegistry
implements|implements
name|HttpRegistry
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultHttpRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|singleton
specifier|private
specifier|static
name|HttpRegistry
name|singleton
decl_stmt|;
DECL|field|consumers
specifier|private
specifier|final
name|Set
argument_list|<
name|HttpConsumer
argument_list|>
name|consumers
decl_stmt|;
DECL|field|providers
specifier|private
specifier|final
name|Set
argument_list|<
name|CamelServlet
argument_list|>
name|providers
decl_stmt|;
DECL|method|DefaultHttpRegistry ()
specifier|public
name|DefaultHttpRegistry
parameter_list|()
block|{
name|consumers
operator|=
operator|new
name|HashSet
argument_list|<
name|HttpConsumer
argument_list|>
argument_list|()
expr_stmt|;
name|providers
operator|=
operator|new
name|HashSet
argument_list|<
name|CamelServlet
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Lookup or create a HttpRegistry      */
DECL|method|getSingletonHttpRegistry ()
specifier|public
specifier|static
specifier|synchronized
name|HttpRegistry
name|getSingletonHttpRegistry
parameter_list|()
block|{
if|if
condition|(
name|singleton
operator|==
literal|null
condition|)
block|{
name|singleton
operator|=
operator|new
name|DefaultHttpRegistry
argument_list|()
expr_stmt|;
block|}
return|return
name|singleton
return|;
block|}
annotation|@
name|Override
DECL|method|register (HttpConsumer consumer)
specifier|public
name|void
name|register
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering consumer for path {} providers present: {}"
argument_list|,
name|consumer
operator|.
name|getPath
argument_list|()
argument_list|,
name|providers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
for|for
control|(
name|CamelServlet
name|provider
range|:
name|providers
control|)
block|{
name|provider
operator|.
name|connect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unregister (HttpConsumer consumer)
specifier|public
name|void
name|unregister
parameter_list|(
name|HttpConsumer
name|consumer
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unregistering consumer for path {} "
argument_list|,
name|consumer
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|remove
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
for|for
control|(
name|CamelServlet
name|provider
range|:
name|providers
control|)
block|{
name|provider
operator|.
name|disconnect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|register (CamelServlet provider, Map properties)
specifier|public
name|void
name|register
parameter_list|(
name|CamelServlet
name|provider
parameter_list|,
name|Map
name|properties
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering provider through OSGi service listener {}"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|CamelServlet
name|camelServlet
init|=
name|provider
decl_stmt|;
name|camelServlet
operator|.
name|setServletName
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"servlet-name"
argument_list|)
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|camelServlet
argument_list|)
expr_stmt|;
block|}
DECL|method|unregister (CamelServlet provider, Map<String, Object> properties)
specifier|public
name|void
name|unregister
parameter_list|(
name|CamelServlet
name|provider
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|unregister
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|register (CamelServlet provider)
specifier|public
name|void
name|register
parameter_list|(
name|CamelServlet
name|provider
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registering CamelServlet with name {} consumers present: {}"
argument_list|,
name|provider
operator|.
name|getServletName
argument_list|()
argument_list|,
name|consumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|providers
operator|.
name|add
argument_list|(
name|provider
argument_list|)
expr_stmt|;
for|for
control|(
name|HttpConsumer
name|consumer
range|:
name|consumers
control|)
block|{
name|provider
operator|.
name|connect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unregister (CamelServlet provider)
specifier|public
name|void
name|unregister
parameter_list|(
name|CamelServlet
name|provider
parameter_list|)
block|{
name|providers
operator|.
name|remove
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
DECL|method|setServlets (List<Servlet> servlets)
specifier|public
name|void
name|setServlets
parameter_list|(
name|List
argument_list|<
name|Servlet
argument_list|>
name|servlets
parameter_list|)
block|{
name|providers
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Servlet
name|servlet
range|:
name|servlets
control|)
block|{
if|if
condition|(
name|servlet
operator|instanceof
name|CamelServlet
condition|)
block|{
name|providers
operator|.
name|add
argument_list|(
operator|(
name|CamelServlet
operator|)
name|servlet
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

