begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|DefaultHttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|HttpCommonEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * To use a HTTP Servlet as entry for Camel routes when running in a servlet container.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.0.0"
argument_list|,
name|scheme
operator|=
literal|"servlet"
argument_list|,
name|extendsScheme
operator|=
literal|"http"
argument_list|,
name|title
operator|=
literal|"Servlet"
argument_list|,
name|syntax
operator|=
literal|"servlet:contextPath"
argument_list|,
name|consumerOnly
operator|=
literal|true
argument_list|,
name|consumerClass
operator|=
name|ServletConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"http"
argument_list|)
DECL|class|ServletEndpoint
specifier|public
class|class
name|ServletEndpoint
extends|extends
name|HttpCommonEndpoint
block|{
DECL|field|binding
specifier|private
name|HttpBinding
name|binding
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|contextPath
specifier|private
name|String
name|contextPath
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"CamelServlet"
argument_list|)
DECL|field|servletName
specifier|private
name|String
name|servletName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|attachmentMultipartBinding
specifier|private
name|boolean
name|attachmentMultipartBinding
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|fileNameExtWhitelist
specifier|private
name|String
name|fileNameExtWhitelist
decl_stmt|;
DECL|method|ServletEndpoint ()
specifier|public
name|ServletEndpoint
parameter_list|()
block|{     }
DECL|method|ServletEndpoint (String endPointURI, ServletComponent component, URI httpUri)
specifier|public
name|ServletEndpoint
parameter_list|(
name|String
name|endPointURI
parameter_list|,
name|ServletComponent
name|component
parameter_list|,
name|URI
name|httpUri
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|super
argument_list|(
name|endPointURI
argument_list|,
name|component
argument_list|,
name|httpUri
argument_list|)
expr_stmt|;
name|this
operator|.
name|contextPath
operator|=
name|httpUri
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|ServletComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|ServletComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpBinding ()
specifier|public
name|HttpBinding
name|getHttpBinding
parameter_list|()
block|{
comment|// make sure we include servlet variant of the http binding
if|if
condition|(
name|this
operator|.
name|binding
operator|==
literal|null
condition|)
block|{
comment|// is attachment binding enabled?
if|if
condition|(
name|isAttachmentMultipartBinding
argument_list|()
condition|)
block|{
name|this
operator|.
name|binding
operator|=
operator|new
name|AttachmentHttpBinding
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|binding
operator|=
operator|new
name|DefaultHttpBinding
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|binding
operator|.
name|setFileNameExtWhitelist
argument_list|(
name|getFileNameExtWhitelist
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|.
name|setTransferException
argument_list|(
name|isTransferException
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getComponent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|binding
operator|.
name|setAllowJavaSerializedObject
argument_list|(
name|getComponent
argument_list|()
operator|.
name|isAllowJavaSerializedObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|binding
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|.
name|setEagerCheckContentAvailable
argument_list|(
name|isEagerCheckContentAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|.
name|setMapHttpMessageBody
argument_list|(
name|isMapHttpMessageBody
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|.
name|setMapHttpMessageHeaders
argument_list|(
name|isMapHttpMessageHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|.
name|setMapHttpMessageFormUrlEncodedBody
argument_list|(
name|isMapHttpMessageFormUrlEncodedBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|binding
return|;
block|}
annotation|@
name|Override
DECL|method|setHttpBinding (HttpBinding binding)
specifier|public
name|void
name|setHttpBinding
parameter_list|(
name|HttpBinding
name|binding
parameter_list|)
block|{
name|super
operator|.
name|setHttpBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
block|}
DECL|method|getContextPath ()
specifier|public
name|String
name|getContextPath
parameter_list|()
block|{
return|return
name|contextPath
return|;
block|}
comment|/**      * The context-path to use      */
DECL|method|setContextPath (String contextPath)
specifier|public
name|void
name|setContextPath
parameter_list|(
name|String
name|contextPath
parameter_list|)
block|{
name|this
operator|.
name|contextPath
operator|=
name|contextPath
expr_stmt|;
block|}
comment|/**      * Name of the servlet to use      */
DECL|method|setServletName (String name)
specifier|public
name|void
name|setServletName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|servletName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getServletName ()
specifier|public
name|String
name|getServletName
parameter_list|()
block|{
return|return
name|servletName
return|;
block|}
DECL|method|isAttachmentMultipartBinding ()
specifier|public
name|boolean
name|isAttachmentMultipartBinding
parameter_list|()
block|{
return|return
name|attachmentMultipartBinding
return|;
block|}
comment|/**      * Whether to automatic bind multipart/form-data as attachments on the Camel {@link Exchange}.      *<p/>      * The options attachmentMultipartBinding=true and disableStreamCache=false cannot work together.      * Remove disableStreamCache to use AttachmentMultipartBinding.      *<p/>      * This is turn off by default as this may require servlet specific configuration to enable this when using Servlet's.      */
DECL|method|setAttachmentMultipartBinding (boolean attachmentMultipartBinding)
specifier|public
name|void
name|setAttachmentMultipartBinding
parameter_list|(
name|boolean
name|attachmentMultipartBinding
parameter_list|)
block|{
name|this
operator|.
name|attachmentMultipartBinding
operator|=
name|attachmentMultipartBinding
expr_stmt|;
block|}
DECL|method|getFileNameExtWhitelist ()
specifier|public
name|String
name|getFileNameExtWhitelist
parameter_list|()
block|{
return|return
name|fileNameExtWhitelist
return|;
block|}
comment|/**      * Whitelist of accepted filename extensions for accepting uploaded files.      *<p/>      * Multiple extensions can be separated by comma, such as txt,xml.      */
DECL|method|setFileNameExtWhitelist (String fileNameExtWhitelist)
specifier|public
name|void
name|setFileNameExtWhitelist
parameter_list|(
name|String
name|fileNameExtWhitelist
parameter_list|)
block|{
name|this
operator|.
name|fileNameExtWhitelist
operator|=
name|fileNameExtWhitelist
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot create producer with servlet endpoint, please consider to use http or http4 endpoint."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|ServletConsumer
name|answer
init|=
operator|new
name|ServletConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|isLenientProperties ()
specifier|public
name|boolean
name|isLenientProperties
parameter_list|()
block|{
comment|// in contrast to the HttpEndpoint, the ServletEndpoint knows about all it's options on the passed URI
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

