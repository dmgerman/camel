begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|GetMethodWebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|HttpNotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|httpunit
operator|.
name|WebResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|meterware
operator|.
name|servletunit
operator|.
name|ServletUnitClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MultiServletConsumerTest
specifier|public
class|class
name|MultiServletConsumerTest
extends|extends
name|ServletCamelRouterTestSupport
block|{
comment|/**      * @return The web.xml to use for testing.      */
DECL|method|getConfiguration ()
specifier|protected
name|String
name|getConfiguration
parameter_list|()
block|{
return|return
literal|"/org/apache/camel/component/servlet/multiServletWeb.xml"
return|;
block|}
DECL|method|loadServlets ()
specifier|protected
name|void
name|loadServlets
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|sr
operator|.
name|newClient
argument_list|()
operator|.
name|getResponse
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore, we just want to boot up the servlet
block|}
try|try
block|{
name|sr
operator|.
name|newClient
argument_list|()
operator|.
name|getResponse
argument_list|(
name|CONTEXT_URL
operator|+
literal|"/services2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore, we just want to boot up the servlet
block|}
block|}
annotation|@
name|Test
DECL|method|testMultiServletsConsumers ()
specifier|public
name|void
name|testMultiServletsConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|result
init|=
name|getService
argument_list|(
literal|"/services2/hello"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong response"
argument_list|,
literal|"/mycontext/services2/hello"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|getService
argument_list|(
literal|"/services1/echo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong response"
argument_list|,
literal|"/mycontext/services1/echo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|getService
argument_list|(
literal|"/services2/echo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong response"
argument_list|,
literal|"/mycontext/services2/echo"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getService (String path)
specifier|public
name|String
name|getService
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|WebRequest
name|req
init|=
operator|new
name|GetMethodWebRequest
argument_list|(
name|CONTEXT_URL
operator|+
name|path
argument_list|)
decl_stmt|;
name|ServletUnitClient
name|client
init|=
name|newClient
argument_list|()
decl_stmt|;
name|WebResponse
name|response
init|=
name|client
operator|.
name|getResponse
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getText
argument_list|()
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
name|Processor
name|echoRequestURIProcessor
init|=
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|errorHandler
argument_list|(
name|noErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"servlet:///hello"
argument_list|)
operator|.
name|process
argument_list|(
name|echoRequestURIProcessor
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"servlet:///echo?servletName=CamelServlet1"
argument_list|)
operator|.
name|process
argument_list|(
name|echoRequestURIProcessor
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"servlet:///echo?servletName=CamelServlet2"
argument_list|)
operator|.
name|process
argument_list|(
name|echoRequestURIProcessor
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

