begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ExposedServletEndpointURIToJMXTest
specifier|public
class|class
name|ExposedServletEndpointURIToJMXTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|useJmx ()
specifier|protected
name|boolean
name|useJmx
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Test
DECL|method|exposedEndpointURIShouldContainContextAndOptions ()
specifier|public
name|void
name|exposedEndpointURIShouldContainContextAndOptions
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Thread.sleep(1000000);
name|checkServletEndpointURI
argument_list|(
literal|"\"servlet:///test1\\?matchOnUriPrefix=true\""
argument_list|)
expr_stmt|;
name|checkServletEndpointURI
argument_list|(
literal|"\"servlet:///test2\\?servletName=test2\""
argument_list|)
expr_stmt|;
name|checkServletEndpointURI
argument_list|(
literal|"\"servlet:///test3\\?matchOnUriPrefix=true&servletName=test3\""
argument_list|)
expr_stmt|;
block|}
DECL|method|checkServletEndpointURI (String servletEndpointURI)
specifier|private
name|void
name|checkServletEndpointURI
parameter_list|(
name|String
name|servletEndpointURI
parameter_list|)
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbeanServer
init|=
name|context
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.camel:context=*/camel-1,type=endpoints,name="
operator|+
name|servletEndpointURI
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|objectNamesSet
init|=
name|mbeanServer
operator|.
name|queryNames
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expect one MBean for the servlet endpoint"
argument_list|,
literal|1
argument_list|,
name|objectNamesSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"servlet:///test1?matchOnUriPrefix=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:jmx"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"servlet:///test2?servletName=test2"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:jmx"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"servlet:///test3?matchOnUriPrefix=true&servletName=test3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:jmx"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

