begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.irc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|irc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|ssl
operator|.
name|SSLDefaultTrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|ssl
operator|.
name|SSLTrustManager
import|;
end_import

begin_class
DECL|class|IrcConfiguration
specifier|public
class|class
name|IrcConfiguration
implements|implements
name|Cloneable
block|{
DECL|field|target
specifier|private
name|String
name|target
decl_stmt|;
DECL|field|channels
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|channels
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|keys
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|keys
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|hostname
specifier|private
name|String
name|hostname
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|nickname
specifier|private
name|String
name|nickname
decl_stmt|;
DECL|field|realname
specifier|private
name|String
name|realname
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|trustManager
specifier|private
name|SSLTrustManager
name|trustManager
init|=
operator|new
name|SSLDefaultTrustManager
argument_list|()
decl_stmt|;
DECL|field|usingSSL
specifier|private
name|boolean
name|usingSSL
decl_stmt|;
DECL|field|persistent
specifier|private
name|boolean
name|persistent
init|=
literal|true
decl_stmt|;
DECL|field|colors
specifier|private
name|boolean
name|colors
init|=
literal|true
decl_stmt|;
DECL|field|onNick
specifier|private
name|boolean
name|onNick
init|=
literal|true
decl_stmt|;
DECL|field|onQuit
specifier|private
name|boolean
name|onQuit
init|=
literal|true
decl_stmt|;
DECL|field|onJoin
specifier|private
name|boolean
name|onJoin
init|=
literal|true
decl_stmt|;
DECL|field|onKick
specifier|private
name|boolean
name|onKick
init|=
literal|true
decl_stmt|;
DECL|field|onMode
specifier|private
name|boolean
name|onMode
init|=
literal|true
decl_stmt|;
DECL|field|onPart
specifier|private
name|boolean
name|onPart
init|=
literal|true
decl_stmt|;
DECL|field|onReply
specifier|private
name|boolean
name|onReply
decl_stmt|;
DECL|field|onTopic
specifier|private
name|boolean
name|onTopic
init|=
literal|true
decl_stmt|;
DECL|field|onPrivmsg
specifier|private
name|boolean
name|onPrivmsg
init|=
literal|true
decl_stmt|;
DECL|field|autoRejoin
specifier|private
name|boolean
name|autoRejoin
init|=
literal|true
decl_stmt|;
DECL|field|ports
specifier|private
name|int
index|[]
name|ports
init|=
block|{
literal|6667
block|,
literal|6668
block|,
literal|6669
block|}
decl_stmt|;
comment|/*      * Temporary storage for when keys are listed in the parameters before channels.      */
DECL|field|channelKeys
specifier|private
name|String
name|channelKeys
decl_stmt|;
DECL|method|IrcConfiguration ()
specifier|public
name|IrcConfiguration
parameter_list|()
block|{     }
DECL|method|IrcConfiguration (String hostname, String nickname, String displayname, List<String> channels)
specifier|public
name|IrcConfiguration
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|nickname
parameter_list|,
name|String
name|displayname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|channels
parameter_list|)
block|{
name|this
operator|.
name|channels
operator|=
name|channels
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|nickname
operator|=
name|nickname
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|nickname
expr_stmt|;
name|this
operator|.
name|realname
operator|=
name|displayname
expr_stmt|;
block|}
DECL|method|IrcConfiguration (String hostname, String username, String password, String nickname, String displayname, List<String> channels)
specifier|public
name|IrcConfiguration
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|nickname
parameter_list|,
name|String
name|displayname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|channels
parameter_list|)
block|{
name|this
operator|.
name|channels
operator|=
name|channels
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|nickname
operator|=
name|nickname
expr_stmt|;
name|this
operator|.
name|realname
operator|=
name|displayname
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|IrcConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|IrcConfiguration
operator|)
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getCacheKey ()
specifier|public
name|String
name|getCacheKey
parameter_list|()
block|{
return|return
name|hostname
operator|+
literal|":"
operator|+
name|nickname
return|;
block|}
DECL|method|getListOfChannels ()
specifier|public
name|String
name|getListOfChannels
parameter_list|()
block|{
name|String
name|retval
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|channel
range|:
name|channels
control|)
block|{
name|retval
operator|+=
name|channel
operator|+
literal|" "
expr_stmt|;
block|}
return|return
name|retval
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|configure (String uriStr)
specifier|public
name|void
name|configure
parameter_list|(
name|String
name|uriStr
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// fix provided URI and handle that we can use # to indicate the IRC room
if|if
condition|(
name|uriStr
operator|.
name|startsWith
argument_list|(
literal|"ircs"
argument_list|)
condition|)
block|{
name|setUsingSSL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uriStr
operator|.
name|startsWith
argument_list|(
literal|"ircs://"
argument_list|)
condition|)
block|{
name|uriStr
operator|=
name|uriStr
operator|.
name|replace
argument_list|(
literal|"ircs:"
argument_list|,
literal|"ircs://"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|uriStr
operator|.
name|startsWith
argument_list|(
literal|"irc://"
argument_list|)
condition|)
block|{
name|uriStr
operator|=
name|uriStr
operator|.
name|replace
argument_list|(
literal|"irc:"
argument_list|,
literal|"irc://"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uriStr
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|uriStr
operator|=
name|ObjectHelper
operator|.
name|before
argument_list|(
name|uriStr
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|uriStr
argument_list|)
decl_stmt|;
name|setNickname
argument_list|(
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|)
expr_stmt|;
name|setUsername
argument_list|(
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|)
expr_stmt|;
name|setRealname
argument_list|(
name|uri
operator|.
name|getUserInfo
argument_list|()
argument_list|)
expr_stmt|;
name|setHostname
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|getFragment
argument_list|()
operator|!=
literal|null
operator|&&
name|uri
operator|.
name|getFragment
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|channel
init|=
literal|"#"
operator|+
name|uri
operator|.
name|getFragment
argument_list|()
decl_stmt|;
name|addChannel
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addChannel (String channel)
specifier|public
name|void
name|addChannel
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
name|boolean
name|alreadyHave
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|aChannel
range|:
name|channels
control|)
block|{
if|if
condition|(
name|channel
operator|.
name|contentEquals
argument_list|(
name|aChannel
argument_list|)
condition|)
block|{
name|alreadyHave
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|alreadyHave
condition|)
block|{
name|channels
operator|.
name|add
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setChannels (String channels)
specifier|public
name|void
name|setChannels
parameter_list|(
name|String
name|channels
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
name|channels
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|channel
range|:
name|args
control|)
block|{
name|channel
operator|=
name|channel
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|channel
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|addChannel
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keys
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|channelKeys
operator|!=
literal|null
condition|)
block|{
name|setKeys
argument_list|(
name|channelKeys
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setKeys (String keys)
specifier|public
name|void
name|setKeys
parameter_list|(
name|String
name|keys
parameter_list|)
block|{
if|if
condition|(
name|channels
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// keys are listed in the parameters before channels
comment|// store the string and process after channels
name|channelKeys
operator|=
name|keys
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|s
init|=
name|keys
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|s
control|)
block|{
name|this
operator|.
name|keys
operator|.
name|put
argument_list|(
name|channels
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|getKey (String channel)
specifier|public
name|String
name|getKey
parameter_list|(
name|String
name|channel
parameter_list|)
block|{
return|return
name|keys
operator|.
name|get
argument_list|(
name|channel
argument_list|)
return|;
block|}
DECL|method|getKeys ()
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|keys
return|;
block|}
DECL|method|setTrustManager (SSLTrustManager trustManager)
specifier|public
name|void
name|setTrustManager
parameter_list|(
name|SSLTrustManager
name|trustManager
parameter_list|)
block|{
name|this
operator|.
name|trustManager
operator|=
name|trustManager
expr_stmt|;
block|}
DECL|method|getTrustManager ()
specifier|public
name|SSLTrustManager
name|getTrustManager
parameter_list|()
block|{
return|return
name|trustManager
return|;
block|}
DECL|method|getUsingSSL ()
specifier|public
name|boolean
name|getUsingSSL
parameter_list|()
block|{
return|return
name|usingSSL
return|;
block|}
DECL|method|setUsingSSL (boolean usingSSL)
specifier|private
name|void
name|setUsingSSL
parameter_list|(
name|boolean
name|usingSSL
parameter_list|)
block|{
name|this
operator|.
name|usingSSL
operator|=
name|usingSSL
expr_stmt|;
block|}
DECL|method|getHostname ()
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|hostname
return|;
block|}
DECL|method|setHostname (String hostname)
specifier|public
name|void
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getNickname ()
specifier|public
name|String
name|getNickname
parameter_list|()
block|{
return|return
name|nickname
return|;
block|}
DECL|method|setNickname (String nickname)
specifier|public
name|void
name|setNickname
parameter_list|(
name|String
name|nickname
parameter_list|)
block|{
name|this
operator|.
name|nickname
operator|=
name|nickname
expr_stmt|;
block|}
DECL|method|getRealname ()
specifier|public
name|String
name|getRealname
parameter_list|()
block|{
return|return
name|realname
return|;
block|}
DECL|method|setRealname (String realname)
specifier|public
name|void
name|setRealname
parameter_list|(
name|String
name|realname
parameter_list|)
block|{
name|this
operator|.
name|realname
operator|=
name|realname
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPorts ()
specifier|public
name|int
index|[]
name|getPorts
parameter_list|()
block|{
return|return
name|ports
return|;
block|}
DECL|method|setPorts (int[] ports)
specifier|public
name|void
name|setPorts
parameter_list|(
name|int
index|[]
name|ports
parameter_list|)
block|{
name|this
operator|.
name|ports
operator|=
name|ports
expr_stmt|;
block|}
DECL|method|getChannels ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getChannels
parameter_list|()
block|{
return|return
name|channels
return|;
block|}
DECL|method|isPersistent ()
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
DECL|method|setPersistent (boolean persistent)
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
DECL|method|isColors ()
specifier|public
name|boolean
name|isColors
parameter_list|()
block|{
return|return
name|colors
return|;
block|}
DECL|method|setColors (boolean colors)
specifier|public
name|void
name|setColors
parameter_list|(
name|boolean
name|colors
parameter_list|)
block|{
name|this
operator|.
name|colors
operator|=
name|colors
expr_stmt|;
block|}
DECL|method|isOnNick ()
specifier|public
name|boolean
name|isOnNick
parameter_list|()
block|{
return|return
name|onNick
return|;
block|}
DECL|method|setOnNick (boolean onNick)
specifier|public
name|void
name|setOnNick
parameter_list|(
name|boolean
name|onNick
parameter_list|)
block|{
name|this
operator|.
name|onNick
operator|=
name|onNick
expr_stmt|;
block|}
DECL|method|isOnQuit ()
specifier|public
name|boolean
name|isOnQuit
parameter_list|()
block|{
return|return
name|onQuit
return|;
block|}
DECL|method|setOnQuit (boolean onQuit)
specifier|public
name|void
name|setOnQuit
parameter_list|(
name|boolean
name|onQuit
parameter_list|)
block|{
name|this
operator|.
name|onQuit
operator|=
name|onQuit
expr_stmt|;
block|}
DECL|method|isOnJoin ()
specifier|public
name|boolean
name|isOnJoin
parameter_list|()
block|{
return|return
name|onJoin
return|;
block|}
DECL|method|setOnJoin (boolean onJoin)
specifier|public
name|void
name|setOnJoin
parameter_list|(
name|boolean
name|onJoin
parameter_list|)
block|{
name|this
operator|.
name|onJoin
operator|=
name|onJoin
expr_stmt|;
block|}
DECL|method|isOnKick ()
specifier|public
name|boolean
name|isOnKick
parameter_list|()
block|{
return|return
name|onKick
return|;
block|}
DECL|method|setOnKick (boolean onKick)
specifier|public
name|void
name|setOnKick
parameter_list|(
name|boolean
name|onKick
parameter_list|)
block|{
name|this
operator|.
name|onKick
operator|=
name|onKick
expr_stmt|;
block|}
DECL|method|isOnMode ()
specifier|public
name|boolean
name|isOnMode
parameter_list|()
block|{
return|return
name|onMode
return|;
block|}
DECL|method|setOnMode (boolean onMode)
specifier|public
name|void
name|setOnMode
parameter_list|(
name|boolean
name|onMode
parameter_list|)
block|{
name|this
operator|.
name|onMode
operator|=
name|onMode
expr_stmt|;
block|}
DECL|method|isOnPart ()
specifier|public
name|boolean
name|isOnPart
parameter_list|()
block|{
return|return
name|onPart
return|;
block|}
DECL|method|setOnPart (boolean onPart)
specifier|public
name|void
name|setOnPart
parameter_list|(
name|boolean
name|onPart
parameter_list|)
block|{
name|this
operator|.
name|onPart
operator|=
name|onPart
expr_stmt|;
block|}
DECL|method|isOnReply ()
specifier|public
name|boolean
name|isOnReply
parameter_list|()
block|{
return|return
name|onReply
return|;
block|}
DECL|method|setOnReply (boolean onReply)
specifier|public
name|void
name|setOnReply
parameter_list|(
name|boolean
name|onReply
parameter_list|)
block|{
name|this
operator|.
name|onReply
operator|=
name|onReply
expr_stmt|;
block|}
DECL|method|isOnTopic ()
specifier|public
name|boolean
name|isOnTopic
parameter_list|()
block|{
return|return
name|onTopic
return|;
block|}
DECL|method|setOnTopic (boolean onTopic)
specifier|public
name|void
name|setOnTopic
parameter_list|(
name|boolean
name|onTopic
parameter_list|)
block|{
name|this
operator|.
name|onTopic
operator|=
name|onTopic
expr_stmt|;
block|}
DECL|method|isOnPrivmsg ()
specifier|public
name|boolean
name|isOnPrivmsg
parameter_list|()
block|{
return|return
name|onPrivmsg
return|;
block|}
DECL|method|setOnPrivmsg (boolean onPrivmsg)
specifier|public
name|void
name|setOnPrivmsg
parameter_list|(
name|boolean
name|onPrivmsg
parameter_list|)
block|{
name|this
operator|.
name|onPrivmsg
operator|=
name|onPrivmsg
expr_stmt|;
block|}
DECL|method|isAutoRejoin ()
specifier|public
name|boolean
name|isAutoRejoin
parameter_list|()
block|{
return|return
name|autoRejoin
return|;
block|}
DECL|method|setAutoRejoin (boolean autoRejoin)
specifier|public
name|void
name|setAutoRejoin
parameter_list|(
name|boolean
name|autoRejoin
parameter_list|)
block|{
name|this
operator|.
name|autoRejoin
operator|=
name|autoRejoin
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IrcConfiguration[hostname: "
operator|+
name|hostname
operator|+
literal|", ports="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|ports
argument_list|)
operator|+
literal|", target: "
operator|+
name|target
operator|+
literal|", username="
operator|+
name|username
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

