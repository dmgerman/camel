begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.irc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|irc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCEventAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCModeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCUser
import|;
end_import

begin_comment
comment|/**  * A helper class which logs errors  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
DECL|class|IrcErrorLogger
specifier|public
class|class
name|IrcErrorLogger
extends|extends
name|IRCEventAdapter
block|{
DECL|field|log
specifier|private
name|Log
name|log
decl_stmt|;
DECL|method|IrcErrorLogger (Log log)
specifier|public
name|IrcErrorLogger
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRegistered ()
specifier|public
name|void
name|onRegistered
parameter_list|()
block|{
name|super
operator|.
name|onRegistered
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onRegistered"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onDisconnected ()
specifier|public
name|void
name|onDisconnected
parameter_list|()
block|{
name|super
operator|.
name|onDisconnected
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onDisconnected"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMode (String string, IRCUser ircUser, IRCModeParser ircModeParser)
specifier|public
name|void
name|onMode
parameter_list|(
name|String
name|string
parameter_list|,
name|IRCUser
name|ircUser
parameter_list|,
name|IRCModeParser
name|ircModeParser
parameter_list|)
block|{
name|super
operator|.
name|onMode
argument_list|(
name|string
argument_list|,
name|ircUser
argument_list|,
name|ircModeParser
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onMode.string = "
operator|+
name|string
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onMode.ircUser = "
operator|+
name|ircUser
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onMode.ircModeParser = "
operator|+
name|ircModeParser
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMode (IRCUser ircUser, String string, String string1)
specifier|public
name|void
name|onMode
parameter_list|(
name|IRCUser
name|ircUser
parameter_list|,
name|String
name|string
parameter_list|,
name|String
name|string1
parameter_list|)
block|{
name|super
operator|.
name|onMode
argument_list|(
name|ircUser
argument_list|,
name|string
argument_list|,
name|string1
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onMode.ircUser = "
operator|+
name|ircUser
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onMode.string = "
operator|+
name|string
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onMode.string1 = "
operator|+
name|string1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onPing (String string)
specifier|public
name|void
name|onPing
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|super
operator|.
name|onPing
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"onPing.string = "
operator|+
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onError (String string)
specifier|public
name|void
name|onError
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"onError.string = "
operator|+
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onError (int i, String string)
specifier|public
name|void
name|onError
parameter_list|(
name|int
name|i
parameter_list|,
name|String
name|string
parameter_list|)
block|{
name|super
operator|.
name|onError
argument_list|(
name|i
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"onError.i = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"onError.string = "
operator|+
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|unknown (String string, String string1, String string2, String string3)
specifier|public
name|void
name|unknown
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|string1
parameter_list|,
name|String
name|string2
parameter_list|,
name|String
name|string3
parameter_list|)
block|{
name|super
operator|.
name|unknown
argument_list|(
name|string
argument_list|,
name|string1
argument_list|,
name|string2
argument_list|,
name|string3
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"unknown.string = "
operator|+
name|string
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"unknown.string1 = "
operator|+
name|string1
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"unknown.string2 = "
operator|+
name|string2
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"unknown.string3 = "
operator|+
name|string3
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

