begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.irc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|irc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|IrcComponent
specifier|public
class|class
name|IrcComponent
extends|extends
name|DefaultComponent
argument_list|<
name|IrcExchange
argument_list|>
block|{
DECL|field|configuration
specifier|private
name|IrcConfiguration
name|configuration
decl_stmt|;
DECL|method|IrcComponent ()
specifier|public
name|IrcComponent
parameter_list|()
block|{
name|configuration
operator|=
operator|new
name|IrcConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|IrcComponent (IrcConfiguration configuration)
specifier|public
name|IrcComponent
parameter_list|(
name|IrcConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|IrcComponent (CamelContext context)
specifier|public
name|IrcComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|IrcConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|ircComponent ()
specifier|public
specifier|static
name|IrcComponent
name|ircComponent
parameter_list|()
block|{
return|return
operator|new
name|IrcComponent
argument_list|()
return|;
block|}
DECL|method|createEndpoint (String uri, String remaining, Map parameters)
specifier|protected
name|IrcEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|IrcConfiguration
name|config
init|=
name|getConfiguration
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
name|config
operator|.
name|configure
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets make sure we copy the configuration as each endpoint can customize its own version
specifier|final
name|IrcEndpoint
name|endpoint
init|=
operator|new
name|IrcEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|IrcConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (IrcConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|IrcConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|field|connectionCache
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|IRCConnection
argument_list|>
name|connectionCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|IRCConnection
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getIRCConnection (IrcConfiguration configuration)
specifier|public
specifier|synchronized
name|IRCConnection
name|getIRCConnection
parameter_list|(
name|IrcConfiguration
name|configuration
parameter_list|)
block|{
specifier|final
name|IRCConnection
name|connection
decl_stmt|;
if|if
condition|(
name|connectionCache
operator|.
name|containsKey
argument_list|(
name|configuration
operator|.
name|getCacheKey
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Returning Cached Connection to "
operator|+
name|configuration
operator|.
name|getHostname
argument_list|()
operator|+
literal|" "
operator|+
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|connectionCache
operator|.
name|get
argument_list|(
name|configuration
operator|.
name|getCacheKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|createConnection
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|connectionCache
operator|.
name|put
argument_list|(
name|configuration
operator|.
name|getCacheKey
argument_list|()
argument_list|,
name|connection
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
DECL|method|createConnection (IrcConfiguration configuration)
specifier|protected
name|IRCConnection
name|createConnection
parameter_list|(
name|IrcConfiguration
name|configuration
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating Connection to "
operator|+
name|configuration
operator|.
name|getHostname
argument_list|()
operator|+
literal|" "
operator|+
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|IRCConnection
name|conn
init|=
operator|new
name|IRCConnection
argument_list|(
name|configuration
operator|.
name|getHostname
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPorts
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|,
name|configuration
operator|.
name|getNickname
argument_list|()
argument_list|,
name|configuration
operator|.
name|getUsername
argument_list|()
argument_list|,
name|configuration
operator|.
name|getRealname
argument_list|()
argument_list|)
decl_stmt|;
name|conn
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|//        conn.setDaemon(true);
name|conn
operator|.
name|setColors
argument_list|(
name|configuration
operator|.
name|isColors
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|setPong
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
DECL|method|closeConnection (String key, IRCConnection connection)
specifier|public
name|void
name|closeConnection
parameter_list|(
name|String
name|key
parameter_list|,
name|IRCConnection
name|connection
parameter_list|)
block|{
try|try
block|{
name|connection
operator|.
name|doQuit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|connectionCache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
comment|// TODO this is probably bad in the for each
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|IRCConnection
argument_list|>
name|entry
range|:
name|connectionCache
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|closeConnection
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

