begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.irc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|irc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCEventAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCModeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|IRCUser
import|;
end_import

begin_class
DECL|class|IrcConsumer
specifier|public
class|class
name|IrcConsumer
extends|extends
name|DefaultConsumer
argument_list|<
name|IrcExchange
argument_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IrcConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|final
specifier|private
name|IrcEndpoint
name|endpoint
decl_stmt|;
DECL|field|connection
specifier|final
specifier|private
name|IRCConnection
name|connection
decl_stmt|;
DECL|field|configuration
specifier|final
name|IrcConfiguration
name|configuration
decl_stmt|;
DECL|field|listener
specifier|private
name|FilteredIRCEventAdapter
name|listener
init|=
literal|null
decl_stmt|;
DECL|method|IrcConsumer (IrcEndpoint endpoint, Processor processor, IRCConnection connection)
specifier|public
name|IrcConsumer
parameter_list|(
name|IrcEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|IRCConnection
name|connection
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|target
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|connection
operator|.
name|doPart
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|connection
operator|.
name|removeIRCEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|String
name|target
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|connection
operator|.
name|addIRCEventListener
argument_list|(
operator|new
name|FilteredIRCEventAdapter
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"joining: "
operator|+
name|target
argument_list|)
expr_stmt|;
name|connection
operator|.
name|doJoin
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnection ()
specifier|public
name|IRCConnection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
DECL|class|FilteredIRCEventAdapter
class|class
name|FilteredIRCEventAdapter
extends|extends
name|IRCEventAdapter
block|{
DECL|field|target
specifier|final
name|String
name|target
decl_stmt|;
DECL|method|FilteredIRCEventAdapter (String target)
specifier|public
name|FilteredIRCEventAdapter
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onNick (IRCUser user, String newNick)
specifier|public
name|void
name|onNick
parameter_list|(
name|IRCUser
name|user
parameter_list|,
name|String
name|newNick
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnNick
argument_list|()
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnNickExchange
argument_list|(
name|user
argument_list|,
name|newNick
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onQuit (IRCUser user, String msg)
specifier|public
name|void
name|onQuit
parameter_list|(
name|IRCUser
name|user
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnQuit
argument_list|()
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnQuitExchange
argument_list|(
name|user
argument_list|,
name|msg
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onJoin (String channel, IRCUser user)
specifier|public
name|void
name|onJoin
parameter_list|(
name|String
name|channel
parameter_list|,
name|IRCUser
name|user
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnJoin
argument_list|()
condition|)
block|{
if|if
condition|(
name|channel
operator|.
name|equals
argument_list|(
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnJoinExchange
argument_list|(
name|channel
argument_list|,
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onKick (String channel, IRCUser user, String passiveNick, String msg)
specifier|public
name|void
name|onKick
parameter_list|(
name|String
name|channel
parameter_list|,
name|IRCUser
name|user
parameter_list|,
name|String
name|passiveNick
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnKick
argument_list|()
condition|)
block|{
if|if
condition|(
name|channel
operator|.
name|equals
argument_list|(
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnKickExchange
argument_list|(
name|channel
argument_list|,
name|user
argument_list|,
name|passiveNick
argument_list|,
name|msg
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onMode (String channel, IRCUser user, IRCModeParser modeParser)
specifier|public
name|void
name|onMode
parameter_list|(
name|String
name|channel
parameter_list|,
name|IRCUser
name|user
parameter_list|,
name|IRCModeParser
name|modeParser
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnMode
argument_list|()
condition|)
block|{
if|if
condition|(
name|channel
operator|.
name|equals
argument_list|(
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnModeExchange
argument_list|(
name|channel
argument_list|,
name|user
argument_list|,
name|modeParser
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onPart (String channel, IRCUser user, String msg)
specifier|public
name|void
name|onPart
parameter_list|(
name|String
name|channel
parameter_list|,
name|IRCUser
name|user
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnPart
argument_list|()
condition|)
block|{
if|if
condition|(
name|channel
operator|.
name|equals
argument_list|(
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnPartExchange
argument_list|(
name|channel
argument_list|,
name|user
argument_list|,
name|msg
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onTopic (String channel, IRCUser user, String topic)
specifier|public
name|void
name|onTopic
parameter_list|(
name|String
name|channel
parameter_list|,
name|IRCUser
name|user
parameter_list|,
name|String
name|topic
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnTopic
argument_list|()
condition|)
block|{
if|if
condition|(
name|channel
operator|.
name|equals
argument_list|(
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnTopicExchange
argument_list|(
name|channel
argument_list|,
name|user
argument_list|,
name|topic
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onPrivmsg (String target, IRCUser user, String msg)
specifier|public
name|void
name|onPrivmsg
parameter_list|(
name|String
name|target
parameter_list|,
name|IRCUser
name|user
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isOnPrivmsg
argument_list|()
condition|)
block|{
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
name|configuration
operator|.
name|getTarget
argument_list|()
argument_list|)
condition|)
block|{
name|IrcExchange
name|exchange
init|=
name|endpoint
operator|.
name|createOnPrivmsgExchange
argument_list|(
name|target
argument_list|,
name|user
argument_list|,
name|msg
argument_list|)
decl_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what should we do when a processing failure occurs??
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

