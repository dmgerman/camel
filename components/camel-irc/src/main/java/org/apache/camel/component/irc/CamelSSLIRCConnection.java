begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.irc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|irc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|ssl
operator|.
name|SSLIRCConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|schwering
operator|.
name|irc
operator|.
name|lib
operator|.
name|ssl
operator|.
name|SSLNotSupportedException
import|;
end_import

begin_comment
comment|/**  * Customized version of {@link SSLIRCConnection} used to support the use of an {@link SSLContextParameters} instance  * for JSSE configuration.  */
end_comment

begin_class
DECL|class|CamelSSLIRCConnection
specifier|public
class|class
name|CamelSSLIRCConnection
extends|extends
name|SSLIRCConnection
block|{
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|CamelSSLIRCConnection (String host, int portMin, int portMax, String pass, String nick, String username, String realname, SSLContextParameters sslContextParameters)
specifier|public
name|CamelSSLIRCConnection
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|portMin
parameter_list|,
name|int
name|portMax
parameter_list|,
name|String
name|pass
parameter_list|,
name|String
name|nick
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|realname
parameter_list|,
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|super
argument_list|(
name|host
argument_list|,
name|portMin
argument_list|,
name|portMax
argument_list|,
name|pass
argument_list|,
name|nick
argument_list|,
name|username
argument_list|,
name|realname
argument_list|)
expr_stmt|;
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|CamelSSLIRCConnection (String host, int[] ports, String pass, String nick, String username, String realname, SSLContextParameters sslContextParameters, CamelContext camelContext)
specifier|public
name|CamelSSLIRCConnection
parameter_list|(
name|String
name|host
parameter_list|,
name|int
index|[]
name|ports
parameter_list|,
name|String
name|pass
parameter_list|,
name|String
name|nick
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|realname
parameter_list|,
name|SSLContextParameters
name|sslContextParameters
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|host
argument_list|,
name|ports
argument_list|,
name|pass
argument_list|,
name|nick
argument_list|,
name|username
argument_list|,
name|realname
argument_list|)
expr_stmt|;
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|sslContextParameters
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|level
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SocketException
argument_list|(
literal|"Socket closed or already open ("
operator|+
name|level
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
specifier|final
name|SSLContext
name|sslContext
decl_stmt|;
try|try
block|{
name|sslContext
operator|=
name|sslContextParameters
operator|.
name|createSSLContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Error in SSLContextParameters configuration or instantiation."
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SSLSocketFactory
name|sf
init|=
name|sslContext
operator|.
name|getSocketFactory
argument_list|()
decl_stmt|;
name|SSLSocket
name|s
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ports
operator|.
name|length
operator|&&
name|s
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|s
operator|=
operator|(
name|SSLSocket
operator|)
name|sf
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|ports
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|startHandshake
argument_list|()
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLNotSupportedException
name|exc
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|s
operator|=
literal|null
expr_stmt|;
throw|throw
name|exc
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|exc
parameter_list|)
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|s
operator|=
literal|null
expr_stmt|;
name|exception
operator|=
name|exc
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exception
throw|;
comment|// connection wasn't successful at any port
block|}
name|prepare
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
block|}
end_class

end_unit

