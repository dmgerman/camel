begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.stub.tcp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|stub
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_class
DECL|class|SocketOutputStreamStub
specifier|public
class|class
name|SocketOutputStreamStub
extends|extends
name|OutputStream
block|{
DECL|field|failOnWrite
specifier|public
name|boolean
name|failOnWrite
decl_stmt|;
DECL|field|failOnWriteArray
specifier|public
name|boolean
name|failOnWriteArray
decl_stmt|;
DECL|field|writeFailOn
specifier|public
name|Byte
name|writeFailOn
decl_stmt|;
DECL|field|writeArrayFailOn
specifier|public
name|byte
index|[]
name|writeArrayFailOn
decl_stmt|;
DECL|field|fakeOutputStream
name|ByteArrayOutputStream
name|fakeOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failOnWrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write failure"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|writeFailOn
operator|!=
literal|null
operator|&&
name|writeFailOn
operator|==
name|b
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write failure"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fakeOutputStream
operator|==
literal|null
condition|)
block|{
name|fakeOutputStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
name|fakeOutputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] array, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failOnWriteArray
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write array failure"
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeArrayFailOn
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|writeArrayFailOn
operator|==
name|array
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write array failure"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|writeArrayFailOn
operator|.
name|length
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|array
index|[
name|off
operator|+
name|i
index|]
operator|!=
name|writeArrayFailOn
index|[
name|i
index|]
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|array
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write array failure"
argument_list|)
throw|;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
name|array
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPayload ()
specifier|public
name|byte
index|[]
name|getPayload
parameter_list|()
block|{
if|if
condition|(
name|fakeOutputStream
operator|!=
literal|null
condition|)
block|{
return|return
name|fakeOutputStream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

