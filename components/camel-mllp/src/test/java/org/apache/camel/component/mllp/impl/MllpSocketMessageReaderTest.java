begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpReceiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|SEGMENT_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|sameInstance
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|MllpSocketMessageReaderTest
specifier|public
class|class
name|MllpSocketMessageReaderTest
extends|extends
name|MllpSocketReaderTestSupport
block|{
DECL|field|mllpSocketReader
name|MllpSocketReader
name|mllpSocketReader
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSocketOpen
argument_list|()
expr_stmt|;
name|mllpSocketReader
operator|=
operator|new
name|MllpSocketReader
argument_list|(
name|fakeSocket
argument_list|,
literal|5000
argument_list|,
literal|1000
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadMessage ()
specifier|public
name|void
name|testReadMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|expected
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadMessageWithSeparateEnvelopingAndMessagePackets ()
specifier|public
name|void
name|testReadMessageWithSeparateEnvelopingAndMessagePackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadMessageWithMultipleMessagePackets ()
specifier|public
name|void
name|testReadMessageWithMultipleMessagePackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|)
operator|.
name|addPackets
argument_list|(
name|TEST_MESSAGE
argument_list|,
name|SEGMENT_DELIMITER
argument_list|)
operator|.
name|addPacket
argument_list|(
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadEmptyMessage ()
specifier|public
name|void
name|testReadEmptyMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadEmptyMessageWithSeparateEnvelopingPackets ()
specifier|public
name|void
name|testReadEmptyMessageWithSeparateEnvelopingPackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|()
DECL|method|testGetInputStreamFailure ()
specifier|public
name|void
name|testGetInputStreamFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEndOfStreamOnInitialRead ()
specifier|public
name|void
name|testEndOfStreamOnInitialRead
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|EMPTY_PACKET
argument_list|,
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeoutOnInitialRead ()
specifier|public
name|void
name|testTimeoutOnInitialRead
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|null
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimeoutOnInitialReadWithStartOfBlock ()
specifier|public
name|void
name|testTimeoutOnInitialReadWithStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpTimeoutException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpTimeoutException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketTimeoutException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSocketExceptionOnInitialRead ()
specifier|public
name|void
name|testSocketExceptionOnInitialRead
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIOExceptionOnInitialRead ()
specifier|public
name|void
name|testIOExceptionOnInitialRead
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|useSocketExceptionOnNullPacket
operator|=
literal|false
expr_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEndOfStreamOnFirstAdditionalRead ()
specifier|public
name|void
name|testEndOfStreamOnFirstAdditionalRead
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|EMPTY_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEndOfStreamOnFirstAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testEndOfStreamOnFirstAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|addPacket
argument_list|(
name|EMPTY_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeoutOnFirstAdditionalRead ()
specifier|public
name|void
name|testTimeoutOnFirstAdditionalRead
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpTimeoutException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpTimeoutException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketTimeoutException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeoutOnFirstAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testTimeoutOnFirstAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpTimeoutException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpTimeoutException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketTimeoutException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSocketExceptionOnFirstAdditionalRead ()
specifier|public
name|void
name|testSocketExceptionOnFirstAdditionalRead
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSocketExceptionOnFirstAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testSocketExceptionOnFirstAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|addPacket
argument_list|(
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIOExceptionOnFirstAdditionalRead ()
specifier|public
name|void
name|testIOExceptionOnFirstAdditionalRead
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|useSocketExceptionOnNullPacket
operator|=
literal|false
expr_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertEmptyExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIOExceptionOnFirstAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testIOExceptionOnFirstAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|useSocketExceptionOnNullPacket
operator|=
literal|false
expr_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|addPacket
argument_list|(
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEndOfStreamOnSecondAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testEndOfStreamOnSecondAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EMPTY_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTimeoutOnSecondAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testTimeoutOnSecondAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpTimeoutException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpTimeoutException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketTimeoutException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSocketExceptionOnSecondAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testSocketExceptionOnSecondAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|SocketException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIOExceptionOnSecondAdditionalReadWithPartialPayload ()
specifier|public
name|void
name|testIOExceptionOnSecondAdditionalReadWithPartialPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|useSocketExceptionOnNullPacket
operator|=
literal|false
expr_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EXCEPTION_PACKET
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
expr_stmt|;
name|expectedExceptionFailure
argument_list|(
name|MllpReceiveException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpReceiveException
name|expectedEx
parameter_list|)
block|{
name|assertExpectedException
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|expectedEx
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSocketReset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLeadingOutOfBandBytes ()
specifier|public
name|void
name|testLeadingOutOfBandBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|START_PACKET
argument_list|,
name|expected
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLeadingOutOfBandBytesWithEmptyMessage ()
specifier|public
name|void
name|testLeadingOutOfBandBytesWithEmptyMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|START_PACKET
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLeadingOutOfBandBytesWithEmptyMessageWithSeparateEnvelopingPackets ()
specifier|public
name|void
name|testLeadingOutOfBandBytesWithEmptyMessageWithSeparateEnvelopingPackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|START_PACKET
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLeadingOutOfBandBytesSeparateEnvelopingAndMessagePackets ()
specifier|public
name|void
name|testLeadingOutOfBandBytesSeparateEnvelopingAndMessagePackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLeadingOutOfBandBytesWithMultipleMessagePackets ()
specifier|public
name|void
name|testLeadingOutOfBandBytesWithMultipleMessagePackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
literal|"Junk"
argument_list|)
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|)
operator|.
name|addPackets
argument_list|(
name|TEST_MESSAGE
argument_list|,
name|SEGMENT_DELIMITER
argument_list|)
operator|.
name|addPacket
argument_list|(
name|END_PACKET
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrailingOutOfBandBytes ()
specifier|public
name|void
name|testTrailingOutOfBandBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|expected
argument_list|,
name|END_PACKET
argument_list|,
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrailingOutOfBandBytesWithEmptyMessage ()
specifier|public
name|void
name|testTrailingOutOfBandBytesWithEmptyMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|,
name|END_PACKET
argument_list|,
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrailingOutOfBandBytesWithEmptyMessageWithSeparateEnvelopingPackets ()
specifier|public
name|void
name|testTrailingOutOfBandBytesWithEmptyMessageWithSeparateEnvelopingPackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|END_PACKET
argument_list|,
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrailingOutOfBandBytesSeparateEnvelopingAndMessagePackets ()
specifier|public
name|void
name|testTrailingOutOfBandBytesSeparateEnvelopingAndMessagePackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPackets
argument_list|(
name|START_PACKET
argument_list|,
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|END_PACKET
argument_list|,
literal|"Junk"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrailingOutOfBandBytesWithMultipleMessagePackets ()
specifier|public
name|void
name|testTrailingOutOfBandBytesWithMultipleMessagePackets
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|expected
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fakeSocket
operator|.
name|fakeSocketInputStream
operator|.
name|addPacket
argument_list|(
name|START_PACKET
argument_list|)
operator|.
name|addPackets
argument_list|(
name|TEST_MESSAGE
argument_list|,
name|SEGMENT_DELIMITER
argument_list|)
operator|.
name|addPacket
argument_list|(
name|END_PACKET
argument_list|)
operator|.
name|addPacket
argument_list|(
literal|"Junk"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|actual
init|=
name|mllpSocketReader
operator|.
name|readEnvelopedPayload
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertSocketOpen
argument_list|()
expr_stmt|;
block|}
DECL|method|assertEmptyExpectedException (MllpException expectedEx)
specifier|private
name|void
name|assertEmptyExpectedException
parameter_list|(
name|MllpException
name|expectedEx
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getHl7Message
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getHl7Acknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertExpectedException (MllpException expectedEx)
specifier|private
name|void
name|assertExpectedException
parameter_list|(
name|MllpException
name|expectedEx
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|expectedEx
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|expectedEx
operator|.
name|getHl7Message
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|expectedEx
operator|.
name|getHl7Acknowledgement
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|expectedEx
operator|.
name|getMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

