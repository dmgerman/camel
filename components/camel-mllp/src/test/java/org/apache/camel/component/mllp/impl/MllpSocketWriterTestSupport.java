begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_class
DECL|class|MllpSocketWriterTestSupport
specifier|public
specifier|abstract
class|class
name|MllpSocketWriterTestSupport
block|{
DECL|field|TEST_MESSAGE
specifier|static
specifier|final
name|String
name|TEST_MESSAGE
init|=
literal|"MSH|^~\\&|ADT|EPIC|JCAPS|CC|20161206193919|RISTECH|ADT^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC||"
operator|+
literal|'\r'
operator|+
literal|"PID|1|2100355^^^MRN^MRN|2100355^^^MRN^MRN||MDCLS9^MC9||19700109|F||U|111 HOVER STREET^^LOS ANGELES^CA^90032^USA^P^^LOS ANGELE|LOS ANGELE|"
operator|+
literal|"(310)725-6952^P^PH^^^310^7256952||ENGLISH|U||60000013647|565-33-2222|||U||||||||N||"
operator|+
literal|'\r'
operator|+
literal|"PD1|||UCLA HEALTH SYSTEM^^10|10002116^ADAMS^JOHN^D^^^^^EPIC^^^^PROVID||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"NK1|1|DOE^MC9^^|OTH|^^^^^USA|(310)888-9999^^^^^310^8889999|(310)999-2222^^^^^310^9992222|Emergency Contact 1|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV1|1|OUTPATIENT|RR CT^^^1000^^^^^^^DEPID|EL|||017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID|017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID||||||"
operator|+
literal|"CLR|||||60000013647|SELF|||||||||||||||||||||HOV_CONF|^^^1000^^^^^^^||20150107161438||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV2||||||||20150107161438||||CT BRAIN W WO CONTRAST||||||||||N|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"ZPV||||||||||||20150107161438|||||||||"
operator|+
literal|'\r'
operator|+
literal|"AL1|1||33361^NO KNOWN ALLERGIES^^NOTCOMPUTRITION^NO KNOWN ALLERGIES^EXTELG||||||"
operator|+
literal|'\r'
operator|+
literal|"DG1|1|DX|784.0^Headache^DX|Headache||VISIT"
operator|+
literal|'\r'
operator|+
literal|"GT1|1|1000235129|MDCLS9^MC9^^||111 HOVER STREET^^LOS ANGELES^CA^90032^USA^^^LOS ANGELE|(310)725-6952^^^^^310^7256952||19700109|F|P/F|SLF|"
operator|+
literal|"565-33-2222|||||^^^^^USA|||UNKNOWN|||||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"UB2||||||||"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
DECL|field|TEST_ACKNOWLEDGEMENT
specifier|static
specifier|final
name|String
name|TEST_ACKNOWLEDGEMENT
init|=
literal|"MSH|^~\\&|JCAPS|CC|ADT|EPIC|20161206193919|RISTECH|ACK^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"MSA|AA|00001|"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
DECL|field|fakeSocket
name|FakeSocket
name|fakeSocket
init|=
operator|new
name|FakeSocket
argument_list|()
decl_stmt|;
DECL|class|FakeSocket
class|class
name|FakeSocket
extends|extends
name|Socket
block|{
DECL|field|connected
name|boolean
name|connected
init|=
literal|true
decl_stmt|;
DECL|field|closed
name|boolean
name|closed
decl_stmt|;
DECL|field|fakeSocketOutputStream
name|FakeSocketOutputStream
name|fakeSocketOutputStream
init|=
operator|new
name|FakeSocketOutputStream
argument_list|()
decl_stmt|;
DECL|method|FakeSocket ()
name|FakeSocket
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
return|;
block|}
annotation|@
name|Override
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream ()
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fakeSocketOutputStream
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
return|return
name|fakeSocketOutputStream
return|;
block|}
DECL|method|payload ()
name|byte
index|[]
name|payload
parameter_list|()
block|{
if|if
condition|(
name|fakeSocketOutputStream
operator|!=
literal|null
condition|)
block|{
return|return
name|fakeSocketOutputStream
operator|.
name|fakeOutputStream
operator|.
name|toByteArray
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|FakeSocketOutputStream
class|class
name|FakeSocketOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|fakeOutputStream
name|ByteArrayOutputStream
name|fakeOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|failOnWrite
name|boolean
name|failOnWrite
decl_stmt|;
DECL|field|failOnWriteArray
name|boolean
name|failOnWriteArray
decl_stmt|;
DECL|field|writeFailOn
name|Byte
name|writeFailOn
decl_stmt|;
DECL|field|writeArrayFailOn
name|byte
index|[]
name|writeArrayFailOn
decl_stmt|;
DECL|method|FakeSocketOutputStream ()
name|FakeSocketOutputStream
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failOnWrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write failure"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|writeFailOn
operator|!=
literal|null
operator|&&
name|writeFailOn
operator|==
name|b
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write failure"
argument_list|)
throw|;
block|}
name|fakeOutputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] array, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failOnWriteArray
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write array failure"
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeArrayFailOn
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|writeArrayFailOn
operator|==
name|array
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write array failure"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|writeArrayFailOn
operator|.
name|length
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|array
index|[
name|off
operator|+
name|i
index|]
operator|!=
name|writeArrayFailOn
index|[
name|i
index|]
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|array
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking write array failure"
argument_list|)
throw|;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
name|array
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

