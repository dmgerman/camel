begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|MllpSocketUtilExceptionHandlingTest
specifier|public
class|class
name|MllpSocketUtilExceptionHandlingTest
block|{
DECL|field|logger
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|socket
name|Socket
name|socket
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|socket
operator|=
operator|new
name|FakeSocket
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClose ()
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWithLogger ()
specifier|public
name|void
name|testCloseWithLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWithLoggerAndReason ()
specifier|public
name|void
name|testCloseWithLoggerAndReason
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".close(...)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReset ()
specifier|public
name|void
name|testReset
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetWithLogger ()
specifier|public
name|void
name|testResetWithLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetWithLoggerAndReason ()
specifier|public
name|void
name|testResetWithLoggerAndReason
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".reset(...)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Utility Methods
DECL|class|FakeSocket
class|class
name|FakeSocket
extends|extends
name|Socket
block|{
DECL|field|connected
name|boolean
name|connected
init|=
literal|true
decl_stmt|;
DECL|field|closed
name|boolean
name|closed
decl_stmt|;
DECL|method|FakeSocket ()
name|FakeSocket
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|isInputShutdown ()
specifier|public
name|boolean
name|isInputShutdown
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|isOutputShutdown ()
specifier|public
name|boolean
name|isOutputShutdown
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|setSoLinger (boolean on, int linger)
specifier|public
name|void
name|setSoLinger
parameter_list|(
name|boolean
name|on
parameter_list|,
name|int
name|linger
parameter_list|)
throws|throws
name|SocketException
block|{
throw|throw
operator|new
name|SocketException
argument_list|(
literal|"Faking a setSoLinger failure"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|shutdownInput ()
specifier|public
name|void
name|shutdownInput
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking a shutdownInput failure"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|shutdownOutput ()
specifier|public
name|void
name|shutdownOutput
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking a shutdownOutput failure"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
return|;
block|}
annotation|@
name|Override
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking a close failure"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

