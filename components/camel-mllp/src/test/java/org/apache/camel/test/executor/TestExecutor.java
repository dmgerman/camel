begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.executor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|executor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestExecutor
specifier|public
class|class
name|TestExecutor
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|executor
name|ExecutorService
name|executor
decl_stmt|;
DECL|method|TestExecutor (int threadCount)
name|TestExecutor
parameter_list|(
name|int
name|threadCount
parameter_list|)
block|{
name|BlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|threadCount
argument_list|,
name|threadCount
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping Excecutor Service"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|runnables
init|=
name|executor
operator|.
name|shutdownNow
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} Runnables were active"
argument_list|,
name|runnables
operator|==
literal|null
condition|?
literal|0
else|:
name|runnables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Runnable
name|runnable
range|:
name|runnables
control|)
block|{
if|if
condition|(
name|runnable
operator|instanceof
name|TestRunnable
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
operator|(
operator|(
name|TestRunnable
operator|)
name|runnable
operator|)
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Runnable is not instance of TestRunnable: {}"
argument_list|,
name|runnable
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addRunnable (TestRunnable runnable)
specifier|public
name|void
name|addRunnable
parameter_list|(
name|TestRunnable
name|runnable
parameter_list|)
block|{
name|executor
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

