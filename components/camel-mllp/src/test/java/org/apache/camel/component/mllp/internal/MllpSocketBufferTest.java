begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for the MllpSocketBuffer class.  */
end_comment

begin_class
DECL|class|MllpSocketBufferTest
specifier|public
class|class
name|MllpSocketBufferTest
extends|extends
name|SocketBufferTestSupport
block|{
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testConstructorWithNullEndpoing ()
specifier|public
name|void
name|testConstructorWithNullEndpoing
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|MllpSocketBuffer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Constructor should have thrown an exception with a null Endpoint argument"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expectedEx
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"MllpEndpoint cannot be null"
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testToHl7StringWithRequiredEndOfData ()
specifier|public
name|void
name|testToHl7StringWithRequiredEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_HL7_MESSAGE
argument_list|,
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testToHl7StringWithOptionalEndOfData ()
specifier|public
name|void
name|testToHl7StringWithOptionalEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_HL7_MESSAGE
argument_list|,
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_HL7_MESSAGE
argument_list|,
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toHl7String
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testToHl7StringWithInvalidCharset ()
specifier|public
name|void
name|testToHl7StringWithInvalidCharset
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_HL7_MESSAGE
argument_list|,
name|instance
operator|.
name|toHl7String
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testToMllpPayloadWithRequiredEndOfData ()
specifier|public
name|void
name|testToMllpPayloadWithRequiredEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testToMllpPayloadWithOptionalEndOfData ()
specifier|public
name|void
name|testToMllpPayloadWithOptionalEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|,
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testGetStartOfBlockIndex ()
specifier|public
name|void
name|testGetStartOfBlockIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expected
init|=
operator|-
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|expected
argument_list|,
name|instance
operator|.
name|getStartOfBlockIndex
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|0
expr_stmt|;
name|instance
operator|.
name|startOfBlockIndex
operator|=
name|expected
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getStartOfBlockIndex
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|5
expr_stmt|;
name|instance
operator|.
name|startOfBlockIndex
operator|=
name|expected
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getStartOfBlockIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|tesGgetEndOfBlockIndex ()
specifier|public
name|void
name|tesGgetEndOfBlockIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expected
init|=
operator|-
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|expected
argument_list|,
name|instance
operator|.
name|getEndOfBlockIndex
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|0
expr_stmt|;
name|instance
operator|.
name|endOfBlockIndex
operator|=
name|expected
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getEndOfBlockIndex
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|5
expr_stmt|;
name|instance
operator|.
name|endOfBlockIndex
operator|=
name|expected
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getEndOfBlockIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasCompleteEnvelopeWithRequiredEndOfData ()
specifier|public
name|void
name|testHasCompleteEnvelopeWithRequiredEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasCompleteEnvelopeWithOptionalEndOfData ()
specifier|public
name|void
name|testHasCompleteEnvelopeWithOptionalEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasCompleteEnvelope
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasStartOfBlock ()
specifier|public
name|void
name|testHasStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasStartOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasStartOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasStartOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasStartOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasStartOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasStartOfBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasEndOfBlock ()
specifier|public
name|void
name|testHasEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"START_OF_BLOCK before an END_OF_BLOCK"
argument_list|,
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasEndOfBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasEndOfData ()
specifier|public
name|void
name|testHasEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test just the END_OF_DATA
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test just the terminators
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Need a START_OF_BLOCK before the END_OF_DATA"
argument_list|,
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|TEST_HL7_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasEndOfData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testhasOutOfBandData ()
specifier|public
name|void
name|testhasOutOfBandData
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasLeadingOutOfBandData ()
specifier|public
name|void
name|testHasLeadingOutOfBandData
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasTrailingOutOfBandDataWithRequiredEndOfData ()
specifier|public
name|void
name|testHasTrailingOutOfBandDataWithRequiredEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with leading out-of-band data
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testHasTrailingOutOfBandDataWithOptionalEndOfData ()
specifier|public
name|void
name|testHasTrailingOutOfBandDataWithOptionalEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with leading out-of-band data
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|instance
operator|.
name|hasTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testGetLeadingOutOfBandData ()
specifier|public
name|void
name|testGetLeadingOutOfBandData
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|getLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getLeadingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testGetTrailingOutOfBandDataWithRequiredEndOfData ()
specifier|public
name|void
name|testGetTrailingOutOfBandDataWithRequiredEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with END_OF_DATA
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without END_OF_DATA
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without END_OF_BLOCK
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without envelope termination
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Test with END_OF_DATA
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without END_OF_DATA
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testGetTrailingOutOfBandDataWithOptionalEndOfData ()
specifier|public
name|void
name|testGetTrailingOutOfBandDataWithOptionalEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|setRequireEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected initial value"
argument_list|,
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test with END_OF_DATA
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without END_OF_DATA
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without END_OF_BLOCK
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without envelope termination
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Test with END_OF_DATA
name|instance
operator|.
name|write
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test without END_OF_DATA
name|instance
operator|.
name|reset
argument_list|()
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|instance
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

