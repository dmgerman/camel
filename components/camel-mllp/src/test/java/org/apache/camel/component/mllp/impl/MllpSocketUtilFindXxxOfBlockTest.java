begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|util
operator|.
name|PayloadBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|MllpSocketUtilFindXxxOfBlockTest
specifier|public
class|class
name|MllpSocketUtilFindXxxOfBlockTest
block|{
DECL|field|HL7_PAYLOAD_STRING
specifier|static
specifier|final
name|String
name|HL7_PAYLOAD_STRING
init|=
literal|"MSH|^~\\&|JCAPS|CC|ADT|EPIC|20161206193919|RISTECH|ACK^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"MSA|AA|00001|"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithDummyPayload ()
specifier|public
name|void
name|testFindStartOfBlockWithDummyPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
literal|"Dummy non-hl7 payload"
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithHl7Payload ()
specifier|public
name|void
name|testFindStartOfBlockWithHl7Payload
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithNullPayload ()
specifier|public
name|void
name|testFindStartOfBlockWithNullPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
literal|null
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithOnlyStartOfBlock ()
specifier|public
name|void
name|testFindStartOfBlockWithOnlyStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithStartOfBlockAfterLength ()
specifier|public
name|void
name|testFindStartOfBlockWithStartOfBlockAfterLength
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|,
name|START_OF_BLOCK
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithMissingStartOfBlock ()
specifier|public
name|void
name|testFindStartOfBlockWithMissingStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithLengthLargerThanArraySize ()
specifier|public
name|void
name|testFindStartOfBlockWithLengthLargerThanArraySize
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindStartOfBlockWithLengthSmallerThanArraySize ()
specifier|public
name|void
name|testFindStartOfBlockWithLengthSmallerThanArraySize
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|-
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithDummyPayload ()
specifier|public
name|void
name|testFindEndOfMessageWithDummyPayload
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|dummyPayload
init|=
literal|"Dummy non-hl7 payload"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|dummyPayload
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
name|dummyPayload
operator|.
name|length
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithDummyPayloadAndStartOfBlock ()
specifier|public
name|void
name|testFindEndOfMessageWithDummyPayloadAndStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|dummyPayload
init|=
literal|"Dummy non-hl7 payload"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|dummyPayload
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
name|dummyPayload
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithHl7Payload ()
specifier|public
name|void
name|testFindEndOfMessageWithHl7Payload
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
name|HL7_PAYLOAD_STRING
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithHl7PayloadAndStartOfBlock ()
specifier|public
name|void
name|testFindEndOfMessageWithHl7PayloadAndStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
name|HL7_PAYLOAD_STRING
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithNullPayload ()
specifier|public
name|void
name|testFindEndOfMessageWithNullPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
literal|null
argument_list|,
literal|12345
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessagekWithOnlyEndOfBlock ()
specifier|public
name|void
name|testFindEndOfMessagekWithOnlyEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|END_OF_BLOCK
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessagekWithOnlyEndOfData ()
specifier|public
name|void
name|testFindEndOfMessagekWithOnlyEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessagekWithOnlyEndOfBlockAndEndOfData ()
specifier|public
name|void
name|testFindEndOfMessagekWithOnlyEndOfBlockAndEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithEndOfBlockAfterLength ()
specifier|public
name|void
name|testFindEndOfMessageWithEndOfBlockAfterLength
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|-
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithMissingEndOfBlock ()
specifier|public
name|void
name|testFindEndOfMessageWithMissingEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithEndOfBlockButMissingEndOfData ()
specifier|public
name|void
name|testFindEndOfMessageWithEndOfBlockButMissingEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithStartOfBlockButMissingEndOfBlock ()
specifier|public
name|void
name|testFindEndOfMessageWithStartOfBlockButMissingEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithStartOfBlockAndEndOfBlockButMissingEndOfData ()
specifier|public
name|void
name|testFindEndOfMessageWithStartOfBlockAndEndOfBlockButMissingEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithLengthLargerThanArraySize ()
specifier|public
name|void
name|testFindEndOfMessageWithLengthLargerThanArraySize
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|expected
init|=
name|HL7_PAYLOAD_STRING
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindEndOfMessageWithLengthSmallerThanArraySize ()
specifier|public
name|void
name|testFindEndOfMessageWithLengthSmallerThanArraySize
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|,
name|HL7_PAYLOAD_STRING
argument_list|,
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

