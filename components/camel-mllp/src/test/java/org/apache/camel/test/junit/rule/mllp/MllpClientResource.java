begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.junit.rule.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * MLLP Test Client packaged as a JUnit Rule  *  * The client can be configured to simulate a large number  * of error conditions.  */
end_comment

begin_class
DECL|class|MllpClientResource
specifier|public
class|class
name|MllpClientResource
extends|extends
name|ExternalResource
block|{
DECL|field|START_OF_BLOCK
specifier|static
specifier|final
name|char
name|START_OF_BLOCK
init|=
literal|0x0b
decl_stmt|;
DECL|field|END_OF_BLOCK
specifier|static
specifier|final
name|char
name|END_OF_BLOCK
init|=
literal|0x1c
decl_stmt|;
DECL|field|END_OF_DATA
specifier|static
specifier|final
name|char
name|END_OF_DATA
init|=
literal|0x0d
decl_stmt|;
DECL|field|END_OF_STREAM
specifier|static
specifier|final
name|int
name|END_OF_STREAM
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|clientSocket
name|Socket
name|clientSocket
decl_stmt|;
DECL|field|inputStream
name|InputStream
name|inputStream
decl_stmt|;
DECL|field|outputStream
name|OutputStream
name|outputStream
decl_stmt|;
DECL|field|mllpHost
name|String
name|mllpHost
init|=
literal|"0.0.0.0"
decl_stmt|;
DECL|field|mllpPort
name|int
name|mllpPort
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|sendStartOfBlock
name|boolean
name|sendStartOfBlock
init|=
literal|true
decl_stmt|;
DECL|field|sendEndOfBlock
name|boolean
name|sendEndOfBlock
init|=
literal|true
decl_stmt|;
DECL|field|sendEndOfData
name|boolean
name|sendEndOfData
init|=
literal|true
decl_stmt|;
DECL|field|connectTimeout
name|int
name|connectTimeout
init|=
literal|5000
decl_stmt|;
DECL|field|soTimeout
name|int
name|soTimeout
init|=
literal|5000
decl_stmt|;
DECL|field|reuseAddress
name|boolean
name|reuseAddress
decl_stmt|;
DECL|field|tcpNoDelay
name|boolean
name|tcpNoDelay
init|=
literal|true
decl_stmt|;
DECL|field|disconnectMethod
name|DisconnectMethod
name|disconnectMethod
init|=
name|DisconnectMethod
operator|.
name|CLOSE
decl_stmt|;
comment|/**      * Use this constructor to avoid having the connection started by JUnit (since the port is still -1)      */
DECL|method|MllpClientResource ()
specifier|public
name|MllpClientResource
parameter_list|()
block|{      }
DECL|method|MllpClientResource (int port)
specifier|public
name|MllpClientResource
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|mllpPort
operator|=
name|port
expr_stmt|;
block|}
DECL|method|MllpClientResource (String host, int port)
specifier|public
name|MllpClientResource
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|mllpHost
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|mllpPort
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|before ()
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
literal|0
operator|<
name|mllpPort
condition|)
block|{
name|this
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|after ()
specifier|protected
name|void
name|after
parameter_list|()
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
name|this
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|inputStream
condition|)
block|{
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception encountered closing connection to {}:{}"
argument_list|,
name|mllpHost
argument_list|,
name|mllpPort
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inputStream
operator|=
literal|null
expr_stmt|;
name|outputStream
operator|=
literal|null
expr_stmt|;
name|clientSocket
operator|=
literal|null
expr_stmt|;
block|}
return|return;
block|}
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
block|{
name|this
operator|.
name|connect
argument_list|(
name|this
operator|.
name|connectTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|connect (int connectTimeout)
specifier|public
name|void
name|connect
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
try|try
block|{
name|clientSocket
operator|=
operator|new
name|Socket
argument_list|()
expr_stmt|;
name|clientSocket
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|mllpHost
argument_list|,
name|mllpPort
argument_list|)
argument_list|,
name|connectTimeout
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
name|soTimeout
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setSoLinger
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setReuseAddress
argument_list|(
name|reuseAddress
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
name|tcpNoDelay
argument_list|)
expr_stmt|;
name|inputStream
operator|=
name|clientSocket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|outputStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|clientSocket
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Unable to establish connection to %s:%s"
argument_list|,
name|mllpHost
argument_list|,
name|mllpPort
argument_list|)
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
try|try
block|{
name|clientSocket
operator|.
name|setSoLinger
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered setting set SO_LINGER to force a TCP reset"
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|inputStream
condition|)
block|{
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exception encountered resetting connection to {}:{}"
argument_list|,
name|mllpHost
argument_list|,
name|mllpPort
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inputStream
operator|=
literal|null
expr_stmt|;
name|outputStream
operator|=
literal|null
expr_stmt|;
name|clientSocket
operator|=
literal|null
expr_stmt|;
block|}
return|return;
block|}
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
block|{
if|if
condition|(
name|DisconnectMethod
operator|.
name|RESET
operator|==
name|disconnectMethod
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDisconnectMethod ()
specifier|public
name|DisconnectMethod
name|getDisconnectMethod
parameter_list|()
block|{
return|return
name|disconnectMethod
return|;
block|}
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|clientSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
return|;
block|}
DECL|method|sendData (String data)
specifier|public
name|void
name|sendData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|boolean
name|disconnectAfterSend
init|=
literal|false
decl_stmt|;
name|this
operator|.
name|sendData
argument_list|(
name|data
argument_list|,
name|disconnectAfterSend
argument_list|)
expr_stmt|;
block|}
DECL|method|sendData (String data, boolean disconnectAfterSend)
specifier|public
name|void
name|sendData
parameter_list|(
name|String
name|data
parameter_list|,
name|boolean
name|disconnectAfterSend
parameter_list|)
block|{
name|byte
index|[]
name|payloadBytes
init|=
name|data
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|payloadBytes
argument_list|,
literal|0
argument_list|,
name|payloadBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to send raw string"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unable to send raw string"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|disconnectAfterSend
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Closing TCP connection"
argument_list|)
expr_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendFramedData (String hl7Message)
specifier|public
name|void
name|sendFramedData
parameter_list|(
name|String
name|hl7Message
parameter_list|)
block|{
name|boolean
name|disconnectAfterSend
init|=
literal|false
decl_stmt|;
name|this
operator|.
name|sendFramedData
argument_list|(
name|hl7Message
argument_list|,
name|disconnectAfterSend
argument_list|)
expr_stmt|;
block|}
DECL|method|sendFramedData (String hl7Message, boolean disconnectAfterSend)
specifier|public
name|void
name|sendFramedData
parameter_list|(
name|String
name|hl7Message
parameter_list|,
name|boolean
name|disconnectAfterSend
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|clientSocket
condition|)
block|{
name|this
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clientSocket
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Cannot send message - client is not connected"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|outputStream
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Cannot send message - output stream is null"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|payloadBytes
init|=
name|hl7Message
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sendStartOfBlock
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not sending START_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
name|outputStream
operator|.
name|write
argument_list|(
name|payloadBytes
argument_list|,
literal|0
argument_list|,
name|payloadBytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|sendEndOfBlock
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not sending END_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sendEndOfData
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|END_OF_DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not sending END_OF_DATA"
argument_list|)
expr_stmt|;
block|}
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to send HL7 message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unable to send HL7 message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|disconnectAfterSend
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Closing TCP connection"
argument_list|)
expr_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendFramedDataInMultiplePackets (String hl7Message, byte flushByte)
specifier|public
name|void
name|sendFramedDataInMultiplePackets
parameter_list|(
name|String
name|hl7Message
parameter_list|,
name|byte
name|flushByte
parameter_list|)
block|{
name|sendFramedDataInMultiplePackets
argument_list|(
name|hl7Message
argument_list|,
name|flushByte
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|sendFramedDataInMultiplePackets (String hl7Message, byte flushByte, boolean disconnectAfterSend)
specifier|public
name|void
name|sendFramedDataInMultiplePackets
parameter_list|(
name|String
name|hl7Message
parameter_list|,
name|byte
name|flushByte
parameter_list|,
name|boolean
name|disconnectAfterSend
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|clientSocket
condition|)
block|{
name|this
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clientSocket
operator|.
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Cannot send message - client is not connected"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|outputStream
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Cannot send message - output stream is null"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|payloadBytes
init|=
name|hl7Message
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sendStartOfBlock
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not sending START_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payloadBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|payloadBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|flushByte
operator|==
name|payloadBytes
index|[
name|i
index|]
condition|)
block|{
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sendEndOfBlock
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not sending END_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sendEndOfData
condition|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|END_OF_DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Not sending END_OF_DATA"
argument_list|)
expr_stmt|;
block|}
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to send HL7 message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unable to send HL7 message"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|disconnectAfterSend
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Closing TCP connection"
argument_list|)
expr_stmt|;
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|receiveFramedData ()
specifier|public
name|String
name|receiveFramedData
parameter_list|()
throws|throws
name|SocketException
throws|,
name|SocketTimeoutException
block|{
return|return
name|receiveFramedData
argument_list|(
name|soTimeout
argument_list|)
return|;
block|}
DECL|method|receiveFramedData (int timout)
specifier|public
name|String
name|receiveFramedData
parameter_list|(
name|int
name|timout
parameter_list|)
throws|throws
name|SocketException
throws|,
name|SocketTimeoutException
block|{
if|if
condition|(
operator|!
name|isConnected
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Cannot receive acknowledgement - client is not connected"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|outputStream
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Cannot receive acknowledgement - output stream is null"
argument_list|)
throw|;
block|}
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
name|timout
argument_list|)
expr_stmt|;
name|StringBuilder
name|acknowledgement
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|firstByte
init|=
name|inputStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|START_OF_BLOCK
operator|!=
name|firstByte
condition|)
block|{
if|if
condition|(
name|isConnected
argument_list|()
condition|)
block|{
if|if
condition|(
name|END_OF_STREAM
operator|==
name|firstByte
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"END_OF_STREAM reached while waiting for START_OF_BLOCK - closing socket"
argument_list|)
expr_stmt|;
try|try
block|{
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing socket after receiving END_OF_STREAM while waiting for START_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Acknowledgement did not start with START_OF_BLOCK: {}"
argument_list|,
name|firstByte
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceCorruptFrameException
argument_list|(
literal|"Message did not start with START_OF_BLOCK"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Connection terminated"
argument_list|)
throw|;
block|}
block|}
name|boolean
name|readingMessage
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|readingMessage
condition|)
block|{
name|int
name|nextByte
init|=
name|inputStream
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|nextByte
condition|)
block|{
case|case
operator|-
literal|1
case|:
throw|throw
operator|new
name|MllpJUnitResourceCorruptFrameException
argument_list|(
literal|"Reached end of stream before END_OF_BLOCK"
argument_list|)
throw|;
case|case
name|START_OF_BLOCK
case|:
throw|throw
operator|new
name|MllpJUnitResourceCorruptFrameException
argument_list|(
literal|"Received START_OF_BLOCK before END_OF_BLOCK"
argument_list|)
throw|;
case|case
name|END_OF_BLOCK
case|:
if|if
condition|(
name|END_OF_DATA
operator|!=
name|inputStream
operator|.
name|read
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceCorruptFrameException
argument_list|(
literal|"END_OF_BLOCK was not followed by END_OF_DATA"
argument_list|)
throw|;
block|}
name|readingMessage
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|acknowledgement
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|nextByte
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|<
name|acknowledgement
operator|.
name|length
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Timeout waiting for acknowledgement"
argument_list|,
name|timeoutEx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Timeout while reading acknowledgement\n"
operator|+
name|acknowledgement
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|,
name|timeoutEx
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|MllpJUnitResourceTimeoutException
argument_list|(
literal|"Timeout while reading acknowledgement"
argument_list|,
name|timeoutEx
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to read HL7 acknowledgement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unable to read HL7 acknowledgement"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|acknowledgement
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|receiveData ()
specifier|public
name|String
name|receiveData
parameter_list|()
throws|throws
name|SocketException
throws|,
name|SocketTimeoutException
block|{
return|return
name|receiveData
argument_list|(
name|soTimeout
argument_list|)
return|;
block|}
DECL|method|receiveData (int timeout)
specifier|public
name|String
name|receiveData
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SocketException
throws|,
name|SocketTimeoutException
block|{
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|StringBuilder
name|availableInput
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
do|do
block|{
name|availableInput
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|inputStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|0
operator|<
name|inputStream
operator|.
name|available
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Timeout while receiving available input"
argument_list|,
name|timeoutEx
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceTimeoutException
argument_list|(
literal|"Timeout while receiving available input"
argument_list|,
name|timeoutEx
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered eating available input"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Exception encountered eating available input"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|availableInput
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|eatData ()
specifier|public
name|String
name|eatData
parameter_list|()
throws|throws
name|SocketException
throws|,
name|SocketTimeoutException
block|{
return|return
name|eatData
argument_list|(
name|soTimeout
argument_list|)
return|;
block|}
DECL|method|eatData (int timeout)
specifier|public
name|String
name|eatData
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SocketException
block|{
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|StringBuilder
name|availableInput
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|0
operator|<
name|inputStream
operator|.
name|available
argument_list|()
condition|)
block|{
name|availableInput
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|inputStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered eating available input"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Exception encountered eating available input"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|availableInput
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sendMessageAndWaitForAcknowledgement (String hl7Data)
specifier|public
name|String
name|sendMessageAndWaitForAcknowledgement
parameter_list|(
name|String
name|hl7Data
parameter_list|)
throws|throws
name|SocketException
throws|,
name|SocketTimeoutException
block|{
name|sendFramedData
argument_list|(
name|hl7Data
argument_list|)
expr_stmt|;
return|return
name|receiveFramedData
argument_list|()
return|;
block|}
DECL|method|sendMessageAndWaitForAcknowledgement (String hl7Data, int acknwoledgementTimeout)
specifier|public
name|String
name|sendMessageAndWaitForAcknowledgement
parameter_list|(
name|String
name|hl7Data
parameter_list|,
name|int
name|acknwoledgementTimeout
parameter_list|)
throws|throws
name|SocketException
throws|,
name|SocketTimeoutException
block|{
name|sendFramedData
argument_list|(
name|hl7Data
argument_list|)
expr_stmt|;
return|return
name|receiveFramedData
argument_list|(
name|acknwoledgementTimeout
argument_list|)
return|;
block|}
DECL|method|getMllpHost ()
specifier|public
name|String
name|getMllpHost
parameter_list|()
block|{
return|return
name|mllpHost
return|;
block|}
DECL|method|setMllpHost (String mllpHost)
specifier|public
name|void
name|setMllpHost
parameter_list|(
name|String
name|mllpHost
parameter_list|)
block|{
name|this
operator|.
name|mllpHost
operator|=
name|mllpHost
expr_stmt|;
block|}
DECL|method|getMllpPort ()
specifier|public
name|int
name|getMllpPort
parameter_list|()
block|{
return|return
name|mllpPort
return|;
block|}
DECL|method|setMllpPort (int mllpPort)
specifier|public
name|void
name|setMllpPort
parameter_list|(
name|int
name|mllpPort
parameter_list|)
block|{
name|this
operator|.
name|mllpPort
operator|=
name|mllpPort
expr_stmt|;
block|}
DECL|method|isSendStartOfBlock ()
specifier|public
name|boolean
name|isSendStartOfBlock
parameter_list|()
block|{
return|return
name|sendStartOfBlock
return|;
block|}
DECL|method|setSendStartOfBlock (boolean sendStartOfBlock)
specifier|public
name|void
name|setSendStartOfBlock
parameter_list|(
name|boolean
name|sendStartOfBlock
parameter_list|)
block|{
name|this
operator|.
name|sendStartOfBlock
operator|=
name|sendStartOfBlock
expr_stmt|;
block|}
DECL|method|isSendEndOfBlock ()
specifier|public
name|boolean
name|isSendEndOfBlock
parameter_list|()
block|{
return|return
name|sendEndOfBlock
return|;
block|}
DECL|method|setSendEndOfBlock (boolean sendEndOfBlock)
specifier|public
name|void
name|setSendEndOfBlock
parameter_list|(
name|boolean
name|sendEndOfBlock
parameter_list|)
block|{
name|this
operator|.
name|sendEndOfBlock
operator|=
name|sendEndOfBlock
expr_stmt|;
block|}
DECL|method|isSendEndOfData ()
specifier|public
name|boolean
name|isSendEndOfData
parameter_list|()
block|{
return|return
name|sendEndOfData
return|;
block|}
DECL|method|setSendEndOfData (boolean sendEndOfData)
specifier|public
name|void
name|setSendEndOfData
parameter_list|(
name|boolean
name|sendEndOfData
parameter_list|)
block|{
name|this
operator|.
name|sendEndOfData
operator|=
name|sendEndOfData
expr_stmt|;
block|}
DECL|method|getConnectTimeout ()
specifier|public
name|int
name|getConnectTimeout
parameter_list|()
block|{
return|return
name|connectTimeout
return|;
block|}
DECL|method|setConnectTimeout (int connectTimeout)
specifier|public
name|void
name|setConnectTimeout
parameter_list|(
name|int
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
DECL|method|getSoTimeout ()
specifier|public
name|int
name|getSoTimeout
parameter_list|()
block|{
return|return
name|soTimeout
return|;
block|}
DECL|method|setSoTimeout (int soTimeout)
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|soTimeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|soTimeout
expr_stmt|;
block|}
DECL|method|isReuseAddress ()
specifier|public
name|boolean
name|isReuseAddress
parameter_list|()
block|{
return|return
name|reuseAddress
return|;
block|}
DECL|method|setReuseAddress (boolean reuseAddress)
specifier|public
name|void
name|setReuseAddress
parameter_list|(
name|boolean
name|reuseAddress
parameter_list|)
block|{
name|this
operator|.
name|reuseAddress
operator|=
name|reuseAddress
expr_stmt|;
block|}
DECL|method|isTcpNoDelay ()
specifier|public
name|boolean
name|isTcpNoDelay
parameter_list|()
block|{
return|return
name|tcpNoDelay
return|;
block|}
DECL|method|setTcpNoDelay (boolean tcpNoDelay)
specifier|public
name|void
name|setTcpNoDelay
parameter_list|(
name|boolean
name|tcpNoDelay
parameter_list|)
block|{
name|this
operator|.
name|tcpNoDelay
operator|=
name|tcpNoDelay
expr_stmt|;
block|}
DECL|method|setDisconnectMethod (DisconnectMethod disconnectMethod)
specifier|public
name|void
name|setDisconnectMethod
parameter_list|(
name|DisconnectMethod
name|disconnectMethod
parameter_list|)
block|{
name|this
operator|.
name|disconnectMethod
operator|=
name|disconnectMethod
expr_stmt|;
block|}
DECL|enum|DisconnectMethod
specifier|public
enum|enum
name|DisconnectMethod
block|{
DECL|enumConstant|CLOSE
name|CLOSE
block|,
DECL|enumConstant|RESET
name|RESET
block|}
block|}
end_class

end_unit

