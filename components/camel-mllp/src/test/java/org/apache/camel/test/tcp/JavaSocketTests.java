begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.tcp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Various tests used to validate the behaviour of Java Sockets.  *  * The tests were for experimentation and don't have any assertions in them - JUnit provided a convenient framework to explore this behaviour.  These tests shouldn't be run with a normal build since  * they don't have any assertions and don't validate any results.  *  * NOTE:  This class may be deleted in the future  */
end_comment

begin_class
annotation|@
name|Ignore
argument_list|(
name|value
operator|=
literal|"Tests validating Java Socket behaviours"
argument_list|)
DECL|class|JavaSocketTests
specifier|public
class|class
name|JavaSocketTests
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|clientSocket
name|Socket
name|clientSocket
decl_stmt|;
DECL|field|serverSocket
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|field|messageCount
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|serverSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|clientSocket
condition|)
block|{
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|serverSocket
condition|)
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSocketReadOnClosedConnection ()
specifier|public
name|void
name|testSocketReadOnClosedConnection
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Thread
name|acceptThread
init|=
operator|new
name|Thread
argument_list|()
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"acceptThread"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|running
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Socket
name|echoSocket
init|=
name|serverSocket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Accepted connection: {}"
argument_list|,
name|echoSocket
operator|.
name|getInetAddress
argument_list|()
argument_list|)
expr_stmt|;
name|echoSocket
operator|.
name|setSoTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
while|while
condition|(
name|echoSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|echoSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|StringBuilder
name|responseBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|InputStream
name|reader
init|=
name|echoSocket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|writer
init|=
name|echoSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
do|do
block|{
name|int
name|readByte
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|available
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|available
operator|=
name|reader
operator|.
name|available
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"InputStream.available returned {}"
argument_list|,
name|available
argument_list|)
expr_stmt|;
name|readByte
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Processing byte: {}"
argument_list|,
name|readByte
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|readByte
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|echoSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|echoSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Available returned {}"
argument_list|,
name|reader
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Socket claims to still be open, but END_OF_STREAM received - closing echoSocket"
argument_list|)
expr_stmt|;
try|try
block|{
name|echoSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing echoSocket after END_OF_STREAM received"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|running
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|log
operator|.
name|info
argument_list|(
literal|"Complete Message - Sending Response"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|response
init|=
name|responseBuilder
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|responseBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|responseBuilder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|readByte
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Timeout reading data - available returned {}"
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|echoSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|echoSocket
operator|.
name|isClosed
argument_list|()
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException in run method"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception encountered closing server socket"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Finished processing connection"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|acceptThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|clientSocket
operator|=
operator|new
name|Socket
argument_list|()
expr_stmt|;
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|connect
argument_list|(
name|serverSocket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Begining message send loop "
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
literal|"Hello World"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|clientSocket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|writer
init|=
name|clientSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending payload"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|message
argument_list|,
literal|0
argument_list|,
name|message
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending terminator"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received Response #{}: {}"
argument_list|,
name|i
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Message send loop complete - closing connection"
argument_list|)
expr_stmt|;
comment|// Javadoc for Socket says closing the InputStream will close the connection
name|clientSocket
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Closing input stream didn't close socket"
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Sleeping ..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAvailableOnClosedConnection ()
specifier|public
name|void
name|testAvailableOnClosedConnection
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Thread
name|acceptThread
init|=
operator|new
name|Thread
argument_list|()
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"acceptThread"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|running
init|=
literal|true
decl_stmt|;
try|try
block|{
name|Socket
name|echoSocket
init|=
name|serverSocket
operator|.
name|accept
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Accepted connection: {}"
argument_list|,
name|echoSocket
operator|.
name|getInetAddress
argument_list|()
argument_list|)
expr_stmt|;
name|echoSocket
operator|.
name|setSoTimeout
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
while|while
condition|(
name|echoSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|echoSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|StringBuilder
name|responseBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|InputStream
name|reader
init|=
name|echoSocket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|writer
init|=
name|echoSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
do|do
block|{
name|int
name|readByte
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|available
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|available
operator|=
name|reader
operator|.
name|available
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"InputStream.available returned {}"
argument_list|,
name|available
argument_list|)
expr_stmt|;
name|readByte
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Processing byte: {}"
argument_list|,
name|readByte
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|readByte
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|echoSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|echoSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Available returned {}"
argument_list|,
name|reader
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Socket claims to still be open, but END_OF_STREAM received - closing echoSocket"
argument_list|)
expr_stmt|;
try|try
block|{
name|echoSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing echoSocket after END_OF_STREAM received"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|running
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|27
case|:
comment|// Escape
name|log
operator|.
name|info
argument_list|(
literal|"Received Escape - closing connection"
argument_list|)
expr_stmt|;
name|echoSocket
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|log
operator|.
name|info
argument_list|(
literal|"Complete Message - Sending Response"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|response
init|=
name|responseBuilder
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|responseBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|response
argument_list|,
literal|0
argument_list|,
name|response
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
default|default:
name|responseBuilder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|readByte
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Timeout reading data - available returned {}"
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|echoSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|echoSocket
operator|.
name|isClosed
argument_list|()
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"IOException in run method"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception encountered closing server socket"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Finished processing connection"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|acceptThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|clientSocket
operator|=
operator|new
name|Socket
argument_list|()
expr_stmt|;
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|connect
argument_list|(
name|serverSocket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Begining message send loop "
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
literal|"Hello World"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|clientSocket
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|writer
init|=
name|clientSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending payload"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|message
argument_list|,
literal|0
argument_list|,
name|message
operator|.
name|length
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending terminator"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received Response #{}: {}"
argument_list|,
name|i
argument_list|,
name|reader
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Message send loop complete - closing connection"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Client Socket available() returned {} before close"
argument_list|,
name|clientSocket
operator|.
name|getInputStream
argument_list|()
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|clientSocket
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"read should have timed-out"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Client Socket read() timed-out before close"
argument_list|)
expr_stmt|;
block|}
name|clientSocket
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
literal|27
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Client Socket available() returned {} after close"
argument_list|,
name|clientSocket
operator|.
name|getInputStream
argument_list|()
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Client Socket read() returned {} after close"
argument_list|,
name|clientSocket
operator|.
name|getInputStream
argument_list|()
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
comment|// Javadoc for Socket says closing the InputStream will close the connection
name|clientSocket
operator|.
name|getInputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Closing input stream didn't close socket"
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Sleeping ..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

