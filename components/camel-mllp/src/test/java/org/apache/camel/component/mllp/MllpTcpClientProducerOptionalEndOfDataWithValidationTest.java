begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MllpTcpClientProducerOptionalEndOfDataWithValidationTest
specifier|public
class|class
name|MllpTcpClientProducerOptionalEndOfDataWithValidationTest
extends|extends
name|TcpClientProducerEndOfDataAndValidationTestSupport
block|{
annotation|@
name|Override
DECL|method|requireEndOfData ()
name|boolean
name|requireEndOfData
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|validatePayload ()
name|boolean
name|validatePayload
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSendSingleMessageWithoutEndOfData ()
specifier|public
name|void
name|testSendSingleMessageWithoutEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedAACount
operator|=
literal|1
expr_stmt|;
name|runSendSingleMessageWithoutEndOfData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSendMultipleMessagesWithoutEndOfDataByte ()
specifier|public
name|void
name|testSendMultipleMessagesWithoutEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|runSendMultipleMessagesWithoutEndOfDataByte
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testEmptyAcknowledgement ()
specifier|public
name|void
name|testEmptyAcknowledgement
parameter_list|()
throws|throws
name|Exception
block|{
name|runEmptyAcknowledgement
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testInvalidAcknowledgement ()
specifier|public
name|void
name|testInvalidAcknowledgement
parameter_list|()
throws|throws
name|Exception
block|{
name|runInvalidAcknowledgement
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testMissingEndOfDataByte ()
specifier|public
name|void
name|testMissingEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedAACount
operator|=
literal|3
expr_stmt|;
name|runMissingEndOfDataByte
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testSendMultipleMessagesWithoutSomeEndOfDataByte ()
specifier|public
name|void
name|testSendMultipleMessagesWithoutSomeEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedAACount
operator|=
literal|3
expr_stmt|;
name|runSendMultipleMessagesWithoutSomeEndOfDataByte
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testInvalidAcknowledgementContainingEmbeddedStartOfBlock ()
specifier|public
name|void
name|testInvalidAcknowledgementContainingEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedAACount
operator|=
literal|1
expr_stmt|;
name|runInvalidAcknowledgementContainingEmbeddedEndOfBlockByte
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
DECL|method|testInvalidAcknowledgementContainingEmbeddedEndOfBlockByte ()
specifier|public
name|void
name|testInvalidAcknowledgementContainingEmbeddedEndOfBlockByte
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedTimeoutCount
operator|=
literal|1
expr_stmt|;
name|runInvalidAcknowledgementContainingEmbeddedEndOfBlockByte
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

