begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpJUnitResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|mllp
operator|.
name|Hl7MessageGenerator
operator|.
name|generateMessage
import|;
end_import

begin_class
DECL|class|MllpTcpServerConsumerTest
specifier|public
class|class
name|MllpTcpServerConsumerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Rule
DECL|field|mllpClient
specifier|public
name|MllpClientResource
name|mllpClient
init|=
operator|new
name|MllpClientResource
argument_list|()
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://result"
argument_list|)
DECL|field|result
name|MockEndpoint
name|result
decl_stmt|;
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|(
name|DefaultCamelContext
operator|)
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setUseMDCLogging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
name|mllpClient
operator|.
name|setMllpHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setMllpPort
argument_list|(
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
name|int
name|connectTimeout
init|=
literal|500
decl_stmt|;
name|int
name|responseTimeout
init|=
literal|5000
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|routeId
init|=
literal|"mllp-test-receiver-route"
decl_stmt|;
name|onCompletion
argument_list|()
operator|.
name|toF
argument_list|(
literal|"log:%s?level=INFO&showAll=true"
argument_list|,
name|routeId
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Test route complete"
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d"
argument_list|,
name|mllpClient
operator|.
name|getMllpHost
argument_list|()
argument_list|,
name|mllpClient
operator|.
name|getMllpPort
argument_list|()
argument_list|,
name|connectTimeout
argument_list|,
name|responseTimeout
argument_list|)
operator|.
name|routeId
argument_list|(
name|routeId
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Test route received message"
argument_list|)
operator|.
name|to
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testReceiveSingleMessage ()
specifier|public
name|void
name|testReceiveSingleMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReceiveSingleMessageWithDelayAfterConnection ()
specifier|public
name|void
name|testReceiveSingleMessageWithDelayAfterConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReceiveMultipleMessages ()
specifier|public
name|void
name|testReceiveMultipleMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|5
decl_stmt|;
name|result
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOpenMllpEnvelopeWithReset ()
specifier|public
name|void
name|testOpenMllpEnvelopeWithReset
parameter_list|()
throws|throws
name|Exception
block|{
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|NotifyBuilder
name|notify1
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|NotifyBuilder
name|notify2
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|5
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|setSoTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_1"
argument_list|)
expr_stmt|;
name|String
name|acknowledgement1
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_2"
argument_list|)
expr_stmt|;
name|String
name|acknowledgement2
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"First two normal exchanges did not complete"
argument_list|,
name|notify1
operator|.
name|matches
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_3"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Acknowledgement won't come here
try|try
block|{
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpJUnitResourceException
name|resourceEx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Expected exception reading response"
argument_list|)
expr_stmt|;
block|}
name|mllpClient
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_4"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|acknowledgement4
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_5"
argument_list|)
expr_stmt|;
name|String
name|acknowledgement5
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|generateMessage
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Remaining exchanges did not complete"
argument_list|,
name|notify2
operator|.
name|matches
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 1"
argument_list|,
name|acknowledgement1
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00001"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 2"
argument_list|,
name|acknowledgement2
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00002"
argument_list|)
argument_list|)
expr_stmt|;
comment|// assertTrue("Should be acknowledgment for message 3", acknowledgement3.contains("MSA|AA|00003"));
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 4"
argument_list|,
name|acknowledgement4
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00004"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 5"
argument_list|,
name|acknowledgement5
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00005"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

