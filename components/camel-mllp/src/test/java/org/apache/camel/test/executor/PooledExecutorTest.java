begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.executor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|executor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|PooledExecutorTest
specifier|public
class|class
name|PooledExecutorTest
block|{
DECL|field|THREAD_COUNT
specifier|static
specifier|final
name|int
name|THREAD_COUNT
init|=
literal|2
decl_stmt|;
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|instance
name|TestExecutor
name|instance
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|=
operator|new
name|TestExecutor
argument_list|(
name|THREAD_COUNT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testAddRunnable ()
specifier|public
name|void
name|testAddRunnable
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|runnableCount
init|=
literal|3
decl_stmt|;
name|int
name|runCount
init|=
literal|5
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting first set of runnables"
argument_list|)
expr_stmt|;
name|startRunnables
argument_list|(
name|runnableCount
argument_list|,
name|runCount
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|THREAD_COUNT
operator|*
name|TestRunnable
operator|.
name|SLEEP_MILLIS
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting second set of runnables"
argument_list|)
expr_stmt|;
name|startRunnables
argument_list|(
name|runnableCount
argument_list|,
name|runCount
argument_list|)
expr_stmt|;
block|}
DECL|method|startRunnables (int runnableCount, int runCount)
name|void
name|startRunnables
parameter_list|(
name|int
name|runnableCount
parameter_list|,
name|int
name|runCount
parameter_list|)
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
name|runnableCount
condition|;
operator|++
name|id
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|TestRunnable
operator|.
name|SLEEP_MILLIS
operator|/
literal|2
argument_list|)
expr_stmt|;
try|try
block|{
name|instance
operator|.
name|addRunnable
argument_list|(
operator|new
name|TestRunnable
argument_list|(
name|id
argument_list|,
name|runCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|rejectedEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to add Runnable {}"
argument_list|,
name|id
argument_list|,
name|rejectedEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

