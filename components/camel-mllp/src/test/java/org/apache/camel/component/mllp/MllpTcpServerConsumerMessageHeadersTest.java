begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MllpTcpServerConsumerMessageHeadersTest
specifier|public
class|class
name|MllpTcpServerConsumerMessageHeadersTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Rule
DECL|field|mllpClient
specifier|public
name|MllpClientResource
name|mllpClient
init|=
operator|new
name|MllpClientResource
argument_list|()
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://result"
argument_list|)
DECL|field|result
name|MockEndpoint
name|result
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://on-completion-result"
argument_list|)
DECL|field|onCompletionResult
name|MockEndpoint
name|onCompletionResult
decl_stmt|;
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doPreSetup ()
specifier|protected
name|void
name|doPreSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|mllpClient
operator|.
name|setMllpHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setMllpPort
argument_list|(
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|doPreSetup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|(
name|DefaultCamelContext
operator|)
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setUseMDCLogging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Test
DECL|method|testHl7HeadersEnabled ()
specifier|public
name|void
name|testHl7HeadersEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testMessage
init|=
literal|"MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
name|addTestRoute
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_SENDING_APPLICATION
argument_list|,
literal|"ADT"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_SENDING_FACILITY
argument_list|,
literal|"EPIC"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_RECEIVING_APPLICATION
argument_list|,
literal|"JCAPS"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_TIMESTAMP
argument_list|,
literal|"20160902123950"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_SECURITY
argument_list|,
literal|"RISTECH"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_MESSAGE_TYPE
argument_list|,
literal|"ADT^A08"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_EVENT_TYPE
argument_list|,
literal|"ADT"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_TRIGGER_EVENT
argument_list|,
literal|"A08"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_MESSAGE_CONTROL
argument_list|,
literal|"00001"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_PROCESSING_ID
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_VERSION_ID
argument_list|,
literal|"2.3"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|testMessage
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|result
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHl7HeadersDisabled ()
specifier|public
name|void
name|testHl7HeadersDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testMessage
init|=
literal|"MSH|^~\\&|ADT|EPIC|JCAPS|CC|20160902123950|RISTECH|ADT^A08|00001|D|2.3|||||||"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
name|addTestRoute
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|testMessage
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|result
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_SENDING_APPLICATION
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_SENDING_APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_SENDING_FACILITY
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_SENDING_FACILITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_RECEIVING_APPLICATION
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_RECEIVING_APPLICATION
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_TIMESTAMP
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_TIMESTAMP
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_SECURITY
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_SECURITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_MESSAGE_TYPE
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_MESSAGE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_EVENT_TYPE
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_EVENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_MESSAGE_CONTROL
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_MESSAGE_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_PROCESSING_ID
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_PROCESSING_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should NOT have header"
operator|+
name|MllpConstants
operator|.
name|MLLP_VERSION_ID
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_VERSION_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addTestRoute (final boolean hl7Headers)
name|void
name|addTestRoute
parameter_list|(
specifier|final
name|boolean
name|hl7Headers
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteBuilder
name|builder
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
name|int
name|connectTimeout
init|=
literal|500
decl_stmt|;
name|int
name|responseTimeout
init|=
literal|5000
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|routeId
init|=
literal|"mllp-test-receiver-route"
decl_stmt|;
name|onCompletion
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock://on-completion-result"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"log:%s?level=INFO&showAll=true"
argument_list|,
name|routeId
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Test route complete"
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d&hl7Headers=%b"
argument_list|,
name|mllpClient
operator|.
name|getMllpHost
argument_list|()
argument_list|,
name|mllpClient
operator|.
name|getMllpPort
argument_list|()
argument_list|,
name|connectTimeout
argument_list|,
name|responseTimeout
argument_list|,
name|hl7Headers
argument_list|)
operator|.
name|routeId
argument_list|(
name|routeId
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Test route received message"
argument_list|)
operator|.
name|to
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

