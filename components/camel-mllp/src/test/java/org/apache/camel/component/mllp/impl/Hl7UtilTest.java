begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|Hl7UtilTest
specifier|public
class|class
name|Hl7UtilTest
block|{
DECL|field|TEST_MESSAGE
specifier|static
specifier|final
name|String
name|TEST_MESSAGE
init|=
literal|"MSH|^~\\&|ADT|EPIC|JCAPS|CC|20161206193919|RISTECH|ADT^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC||"
operator|+
literal|'\r'
operator|+
literal|"PID|1|2100355^^^MRN^MRN|2100355^^^MRN^MRN||MDCLS9^MC9||19700109|F||U|111 HOVER STREET^^LOS ANGELES^CA^90032^USA^P^^LOS ANGELE|"
operator|+
literal|"LOS ANGELE|(310)725-6952^P^PH^^^310^7256952||ENGLISH|U||60000013647|565-33-2222|||U||||||||N||"
operator|+
literal|'\r'
operator|+
literal|"PD1|||UCLA HEALTH SYSTEM^^10|10002116^ADAMS^JOHN^D^^^^^EPIC^^^^PROVID||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"NK1|1|DOE^MC9^^|OTH|^^^^^USA|(310)888-9999^^^^^310^8889999|(310)999-2222^^^^^310^9992222|Emergency Contact 1|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV1|1|OUTPATIENT|RR CT^^^1000^^^^^^^DEPID|EL|||017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID|017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID||||||"
operator|+
literal|"CLR|||||60000013647|SELF|||||||||||||||||||||HOV_CONF|^^^1000^^^^^^^||20150107161438||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV2||||||||20150107161438||||CT BRAIN W WO CONTRAST||||||||||N|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"ZPV||||||||||||20150107161438|||||||||"
operator|+
literal|'\r'
operator|+
literal|"AL1|1||33361^NO KNOWN ALLERGIES^^NOTCOMPUTRITION^NO KNOWN ALLERGIES^EXTELG||||||"
operator|+
literal|'\r'
operator|+
literal|"DG1|1|DX|784.0^Headache^DX|Headache||VISIT"
operator|+
literal|'\r'
operator|+
literal|"GT1|1|1000235129|MDCLS9^MC9^^||111 HOVER STREET^^LOS ANGELES^CA^90032^USA^^^LOS ANGELE|(310)725-6952^^^^^310^7256952||19700109|F|P/F|SLF|"
operator|+
literal|"565-33-2222|||||^^^^^USA|||UNKNOWN|||||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"UB2||||||||"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessage ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|message
init|=
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Valid payload should result in a null message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessageWithLengthLargerThanArraySize ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessageWithLengthLargerThanArraySize
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|*
literal|2
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Valid payload should result in a null message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessageWithLengthSmallerThanArraySize ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessageWithLengthSmallerThanArraySize
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|payload
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The HL7 payload terminating bytes [0x7c, 0x41] are incorrect - expected [0xd, 0xa]  {ASCII [<CR>,<LF>]}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessageWithNullPayload ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessageWithNullPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"HL7 payload is null"
argument_list|,
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessageWithInvalidStartingSegment ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessageWithInvalidStartingSegment
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|invalidStartingSegment
init|=
literal|"MSA|AA|00001|\r"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|basePayload
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|payloadStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|invalidStartingSegment
operator|.
name|length
operator|+
name|basePayload
operator|.
name|length
argument_list|)
decl_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|invalidStartingSegment
argument_list|)
expr_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|basePayload
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The first segment of the HL7 payload {MSA} is not an MSH segment"
argument_list|,
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|payloadStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessageWithEmptyPayload ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessageWithEmptyPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HL7 payload is empty"
argument_list|,
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HL7 payload is empty"
argument_list|,
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessageWithEmbeddedStartOfBlock ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessageWithEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|basePayload
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|payloadStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|basePayload
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|embeddedStartOfBlockIndex
init|=
name|basePayload
operator|.
name|length
operator|/
literal|2
decl_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|basePayload
argument_list|,
literal|0
argument_list|,
name|embeddedStartOfBlockIndex
argument_list|)
expr_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|basePayload
argument_list|,
name|embeddedStartOfBlockIndex
argument_list|,
name|basePayload
operator|.
name|length
operator|-
name|embeddedStartOfBlockIndex
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"HL7 payload contains an embedded START_OF_BLOCK {0xb, ASCII<VT>} at index "
operator|+
name|embeddedStartOfBlockIndex
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|payloadStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGenerateInvalidPayloadExceptionMessageWithEmbeddedEndOfBlock ()
specifier|public
name|void
name|testGenerateInvalidPayloadExceptionMessageWithEmbeddedEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|basePayload
init|=
name|TEST_MESSAGE
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|payloadStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|basePayload
operator|.
name|length
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|embeddedEndOfBlockIndex
init|=
name|basePayload
operator|.
name|length
operator|/
literal|2
decl_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|basePayload
argument_list|,
literal|0
argument_list|,
name|embeddedEndOfBlockIndex
argument_list|)
expr_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|payloadStream
operator|.
name|write
argument_list|(
name|basePayload
argument_list|,
name|embeddedEndOfBlockIndex
argument_list|,
name|basePayload
operator|.
name|length
operator|-
name|embeddedEndOfBlockIndex
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"HL7 payload contains an embedded END_OF_BLOCK {0x1c, ASCII<FS>} at index "
operator|+
name|embeddedEndOfBlockIndex
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|payloadStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

