begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|SocketBufferTestSupport
specifier|public
class|class
name|SocketBufferTestSupport
block|{
DECL|field|TEST_HL7_MESSAGE
specifier|static
specifier|final
name|String
name|TEST_HL7_MESSAGE
init|=
literal|"MSH|^~\\&|JCAPS|CC|ADT|EPIC|20161206193919|RISTECH|ACK^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"MSA|AA|00001|"
operator|+
literal|'\r'
decl_stmt|;
DECL|field|endpoint
name|MllpEndpoint
name|endpoint
decl_stmt|;
DECL|field|instance
name|MllpSocketBuffer
name|instance
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|=
operator|new
name|MllpEndpoint
argument_list|(
literal|"mllp://dummy"
argument_list|,
operator|new
name|MllpComponent
argument_list|()
argument_list|,
operator|new
name|MllpConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|=
operator|new
name|MllpSocketBuffer
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
DECL|method|buildTestBytes (boolean includeStartOfBlock, boolean includeEndOfBlock, boolean includeEndOfData)
name|byte
index|[]
name|buildTestBytes
parameter_list|(
name|boolean
name|includeStartOfBlock
parameter_list|,
name|boolean
name|includeEndOfBlock
parameter_list|,
name|boolean
name|includeEndOfData
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|buildTestBytes
argument_list|(
name|TEST_HL7_MESSAGE
argument_list|,
name|includeStartOfBlock
argument_list|,
name|includeEndOfBlock
argument_list|,
name|includeEndOfData
argument_list|)
return|;
block|}
DECL|method|buildTestBytes (String message, boolean includeStartOfBlock, boolean includeEndOfBlock, boolean includeEndOfData)
name|byte
index|[]
name|buildTestBytes
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|includeStartOfBlock
parameter_list|,
name|boolean
name|includeEndOfBlock
parameter_list|,
name|boolean
name|includeEndOfData
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|payloadBuilder
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeStartOfBlock
condition|)
block|{
name|payloadBuilder
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|payloadBuilder
operator|.
name|write
argument_list|(
name|message
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeEndOfBlock
condition|)
block|{
name|payloadBuilder
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeEndOfData
condition|)
block|{
name|payloadBuilder
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
block|}
return|return
name|payloadBuilder
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

