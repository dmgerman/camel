begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|util
operator|.
name|PayloadBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|MllpSocketReaderTestSupport
specifier|public
specifier|abstract
class|class
name|MllpSocketReaderTestSupport
block|{
DECL|field|TEST_MESSAGE
specifier|static
specifier|final
name|String
name|TEST_MESSAGE
init|=
literal|"MSH|^~\\&|ADT|EPIC|JCAPS|CC|20161206193919|RISTECH|ADT^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC||"
operator|+
literal|'\r'
operator|+
literal|"PID|1|2100355^^^MRN^MRN|2100355^^^MRN^MRN||MDCLS9^MC9||19700109|F||U|111 HOVER STREET^^LOS ANGELES^CA^90032^USA^P^^LOS ANGELE|LOS ANGELE|"
operator|+
literal|"(310)725-6952^P^PH^^^310^7256952||ENGLISH|U||60000013647|565-33-2222|||U||||||||N||"
operator|+
literal|'\r'
operator|+
literal|"PD1|||UCLA HEALTH SYSTEM^^10|10002116^ADAMS^JOHN^D^^^^^EPIC^^^^PROVID||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"NK1|1|DOE^MC9^^|OTH|^^^^^USA|(310)888-9999^^^^^310^8889999|(310)999-2222^^^^^310^9992222|Emergency Contact 1|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV1|1|OUTPATIENT|RR CT^^^1000^^^^^^^DEPID|EL|||017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID|017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID||||||"
operator|+
literal|"CLR|||||60000013647|SELF|||||||||||||||||||||HOV_CONF|^^^1000^^^^^^^||20150107161438||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV2||||||||20150107161438||||CT BRAIN W WO CONTRAST||||||||||N|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"ZPV||||||||||||20150107161438|||||||||"
operator|+
literal|'\r'
operator|+
literal|"AL1|1||33361^NO KNOWN ALLERGIES^^NOTCOMPUTRITION^NO KNOWN ALLERGIES^EXTELG||||||"
operator|+
literal|'\r'
operator|+
literal|"DG1|1|DX|784.0^Headache^DX|Headache||VISIT"
operator|+
literal|'\r'
operator|+
literal|"GT1|1|1000235129|MDCLS9^MC9^^||111 HOVER STREET^^LOS ANGELES^CA^90032^USA^^^LOS ANGELE|(310)725-6952^^^^^310^7256952||19700109|F|P/F|SLF|"
operator|+
literal|"565-33-2222|||||^^^^^USA|||UNKNOWN|||||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"UB2||||||||"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
DECL|field|TEST_ACKNOWLEDGEMENT
specifier|static
specifier|final
name|String
name|TEST_ACKNOWLEDGEMENT
init|=
literal|"MSH|^~\\&|JCAPS|CC|ADT|EPIC|20161206193919|RISTECH|ACK^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"MSA|AA|00001|"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
DECL|field|EXCEPTION_PACKET
specifier|static
specifier|final
name|byte
index|[]
name|EXCEPTION_PACKET
init|=
literal|null
decl_stmt|;
DECL|field|EMPTY_PACKET
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_PACKET
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
DECL|field|START_PACKET
specifier|static
specifier|final
name|byte
index|[]
name|START_PACKET
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|START_OF_BLOCK
argument_list|)
decl_stmt|;
DECL|field|END_PACKET
specifier|static
specifier|final
name|byte
index|[]
name|END_PACKET
init|=
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|END_OF_BLOCK
argument_list|,
name|END_OF_DATA
argument_list|)
decl_stmt|;
DECL|field|fakeSocket
name|FakeSocket
name|fakeSocket
init|=
operator|new
name|FakeSocket
argument_list|()
decl_stmt|;
DECL|method|assertSocketOpen ()
name|void
name|assertSocketOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"socket should have been connected"
argument_list|,
name|fakeSocket
operator|.
name|connected
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"shutdownInput() should not have been called"
argument_list|,
name|fakeSocket
operator|.
name|inputShutdown
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"shutdownOutput() should not have been called"
argument_list|,
name|fakeSocket
operator|.
name|outputShutdown
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"close() should not have been called"
argument_list|,
name|fakeSocket
operator|.
name|closed
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"socket should have an input stream"
argument_list|,
name|fakeSocket
operator|.
name|fakeSocketInputStream
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSocketClosed ()
name|void
name|assertSocketClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"socket should have been connected"
argument_list|,
name|fakeSocket
operator|.
name|connected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"shutdownInput() should have been called"
argument_list|,
name|fakeSocket
operator|.
name|inputShutdown
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"shutdownOutput() should have been called"
argument_list|,
name|fakeSocket
operator|.
name|outputShutdown
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close() should have been called"
argument_list|,
name|fakeSocket
operator|.
name|closed
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"SO_LINGER should not be enabled"
argument_list|,
name|fakeSocket
operator|.
name|linger
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSocketReset ()
name|void
name|assertSocketReset
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"socket should have been connected"
argument_list|,
name|fakeSocket
operator|.
name|connected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"close() should have been called"
argument_list|,
name|fakeSocket
operator|.
name|closed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SO_LINGER should be enabled"
argument_list|,
name|fakeSocket
operator|.
name|linger
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SO_LINGER timeout should be 0"
argument_list|,
literal|0
argument_list|,
name|fakeSocket
operator|.
name|lingerTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|expectedExceptionFailure (Class<E> expected)
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
name|void
name|expectedExceptionFailure
parameter_list|(
name|Class
argument_list|<
name|E
argument_list|>
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|fail
argument_list|(
literal|"Expected exception "
operator|+
name|expected
operator|.
name|getName
argument_list|()
operator|+
literal|" was not thrown"
argument_list|)
expr_stmt|;
block|}
DECL|class|FakeSocket
class|class
name|FakeSocket
extends|extends
name|Socket
block|{
DECL|field|connected
name|boolean
name|connected
init|=
literal|true
decl_stmt|;
DECL|field|inputShutdown
name|boolean
name|inputShutdown
decl_stmt|;
DECL|field|outputShutdown
name|boolean
name|outputShutdown
decl_stmt|;
DECL|field|closed
name|boolean
name|closed
decl_stmt|;
DECL|field|receiveBufferSize
name|int
name|receiveBufferSize
init|=
literal|1024
decl_stmt|;
DECL|field|sendBufferSize
name|int
name|sendBufferSize
init|=
literal|1024
decl_stmt|;
DECL|field|timeout
name|int
name|timeout
init|=
literal|1000
decl_stmt|;
DECL|field|linger
name|boolean
name|linger
decl_stmt|;
DECL|field|lingerTimeout
name|int
name|lingerTimeout
init|=
literal|1024
decl_stmt|;
DECL|field|fakeSocketInputStream
name|FakeSocketInputStream
name|fakeSocketInputStream
init|=
operator|new
name|FakeSocketInputStream
argument_list|()
decl_stmt|;
DECL|method|FakeSocket ()
name|FakeSocket
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
return|;
block|}
annotation|@
name|Override
DECL|method|isInputShutdown ()
specifier|public
name|boolean
name|isInputShutdown
parameter_list|()
block|{
return|return
name|inputShutdown
return|;
block|}
annotation|@
name|Override
DECL|method|isOutputShutdown ()
specifier|public
name|boolean
name|isOutputShutdown
parameter_list|()
block|{
return|return
name|outputShutdown
return|;
block|}
annotation|@
name|Override
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
DECL|method|shutdownInput ()
specifier|public
name|void
name|shutdownInput
parameter_list|()
throws|throws
name|IOException
block|{
name|inputShutdown
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdownOutput ()
specifier|public
name|void
name|shutdownOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|outputShutdown
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSoLinger ()
specifier|public
name|int
name|getSoLinger
parameter_list|()
throws|throws
name|SocketException
block|{
if|if
condition|(
name|linger
condition|)
block|{
return|return
name|lingerTimeout
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|setSoLinger (boolean on, int linger)
specifier|public
name|void
name|setSoLinger
parameter_list|(
name|boolean
name|on
parameter_list|,
name|int
name|linger
parameter_list|)
throws|throws
name|SocketException
block|{
name|this
operator|.
name|linger
operator|=
name|on
expr_stmt|;
name|this
operator|.
name|lingerTimeout
operator|=
name|linger
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReceiveBufferSize ()
specifier|public
specifier|synchronized
name|int
name|getReceiveBufferSize
parameter_list|()
throws|throws
name|SocketException
block|{
return|return
name|receiveBufferSize
return|;
block|}
annotation|@
name|Override
DECL|method|setReceiveBufferSize (int size)
specifier|public
specifier|synchronized
name|void
name|setReceiveBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|SocketException
block|{
name|this
operator|.
name|receiveBufferSize
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSendBufferSize ()
specifier|public
specifier|synchronized
name|int
name|getSendBufferSize
parameter_list|()
throws|throws
name|SocketException
block|{
return|return
name|sendBufferSize
return|;
block|}
annotation|@
name|Override
DECL|method|setSendBufferSize (int size)
specifier|public
specifier|synchronized
name|void
name|setSendBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|SocketException
block|{
name|this
operator|.
name|sendBufferSize
operator|=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSoTimeout ()
specifier|public
specifier|synchronized
name|int
name|getSoTimeout
parameter_list|()
throws|throws
name|SocketException
block|{
return|return
name|timeout
return|;
block|}
annotation|@
name|Override
DECL|method|setSoTimeout (int timeout)
specifier|public
specifier|synchronized
name|void
name|setSoTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SocketException
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInputStream ()
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fakeSocketInputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking getInputStream failure"
argument_list|)
throw|;
block|}
return|return
name|fakeSocketInputStream
return|;
block|}
block|}
DECL|class|FakeSocketInputStream
class|class
name|FakeSocketInputStream
extends|extends
name|InputStream
block|{
DECL|field|useSocketExceptionOnNullPacket
name|boolean
name|useSocketExceptionOnNullPacket
init|=
literal|true
decl_stmt|;
DECL|field|packetQueue
specifier|private
name|Queue
argument_list|<
name|ByteArrayInputStream
argument_list|>
name|packetQueue
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FakeSocketInputStream ()
name|FakeSocketInputStream
parameter_list|()
block|{         }
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|packetQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|packetQueue
operator|.
name|peek
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|useSocketExceptionOnNullPacket
condition|)
block|{
throw|throw
operator|new
name|SocketException
argument_list|(
literal|"Faking Socket read() failure - simulating reset"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking Socket read() failure"
argument_list|)
throw|;
block|}
block|}
name|int
name|answer
init|=
name|packetQueue
operator|.
name|element
argument_list|()
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
operator|-
literal|1
operator|||
name|packetQueue
operator|.
name|element
argument_list|()
operator|.
name|available
argument_list|()
operator|==
literal|0
condition|)
block|{
name|packetQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Faking Socket read() Timeout"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|packetQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|packetQueue
operator|.
name|peek
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|useSocketExceptionOnNullPacket
condition|)
block|{
throw|throw
operator|new
name|SocketException
argument_list|(
literal|"Faking Socket read(byte[]) failure - simulating reset"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking Socket read(byte[]) failure"
argument_list|)
throw|;
block|}
block|}
name|int
name|answer
init|=
name|packetQueue
operator|.
name|element
argument_list|()
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
operator|-
literal|1
operator|||
name|packetQueue
operator|.
name|element
argument_list|()
operator|.
name|available
argument_list|()
operator|==
literal|0
condition|)
block|{
name|packetQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Faking Socket read(byte[]) Timeout"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] buffer, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|packetQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|packetQueue
operator|.
name|peek
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|useSocketExceptionOnNullPacket
condition|)
block|{
throw|throw
operator|new
name|SocketException
argument_list|(
literal|"Faking Socket read(byte[], int, int) failure - simulating reset"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Faking Socket read(byte[], int, int) failure"
argument_list|)
throw|;
block|}
block|}
name|int
name|answer
init|=
name|packetQueue
operator|.
name|element
argument_list|()
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
operator|-
literal|1
operator|||
name|packetQueue
operator|.
name|element
argument_list|()
operator|.
name|available
argument_list|()
operator|==
literal|0
condition|)
block|{
name|packetQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
throw|throw
operator|new
name|SocketTimeoutException
argument_list|(
literal|"Faking Socket read(byte[], int, int) Timeout"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|packetQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|packetQueue
operator|.
name|element
argument_list|()
operator|.
name|available
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|addPacket (char... packet)
specifier|public
name|FakeSocketInputStream
name|addPacket
parameter_list|(
name|char
modifier|...
name|packet
parameter_list|)
block|{
name|this
operator|.
name|packetQueue
operator|.
name|add
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|packet
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addPacket (byte[] bytes)
specifier|public
name|FakeSocketInputStream
name|addPacket
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bytes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|packetQueue
operator|.
name|add
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|packetQueue
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addPacket (byte[] bytes, byte[]... byteArrays)
specifier|public
name|FakeSocketInputStream
name|addPacket
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|byte
index|[]
modifier|...
name|byteArrays
parameter_list|)
throws|throws
name|IOException
block|{
name|PayloadBuilder
name|builder
init|=
operator|new
name|PayloadBuilder
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|additionalBytes
range|:
name|byteArrays
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|additionalBytes
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|packetQueue
operator|.
name|add
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addPacket (String... strings)
specifier|public
name|FakeSocketInputStream
name|addPacket
parameter_list|(
name|String
modifier|...
name|strings
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|packetQueue
operator|.
name|add
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|PayloadBuilder
operator|.
name|build
argument_list|(
name|strings
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addPackets (String message, char delimiter)
specifier|public
name|FakeSocketInputStream
name|addPackets
parameter_list|(
name|String
name|message
parameter_list|,
name|char
name|delimiter
parameter_list|)
throws|throws
name|IOException
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|message
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|delimiter
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|addPacket
argument_list|(
name|tokenizer
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addPackets (char... packets)
specifier|public
name|FakeSocketInputStream
name|addPackets
parameter_list|(
name|char
modifier|...
name|packets
parameter_list|)
block|{
for|for
control|(
name|char
name|c
range|:
name|packets
control|)
block|{
name|addPacket
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addPackets (byte[]... packets)
specifier|public
name|FakeSocketInputStream
name|addPackets
parameter_list|(
name|byte
index|[]
modifier|...
name|packets
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|byte
index|[]
name|packet
range|:
name|packets
control|)
block|{
name|addPacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|addPackets (byte[] bytes, String s)
specifier|public
name|FakeSocketInputStream
name|addPackets
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|addPacket
argument_list|(
name|bytes
argument_list|)
operator|.
name|addPacket
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

