begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|MllpSocketUtilSocketTest
specifier|public
class|class
name|MllpSocketUtilSocketTest
block|{
DECL|field|logger
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|serverSocket
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|field|socket
name|Socket
name|socket
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|serverSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|=
operator|new
name|Socket
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSoTimeout ()
specifier|public
name|void
name|testSetSoTimeout
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|expected
init|=
literal|1000
decl_stmt|;
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|expected
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|socket
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSoTimeoutWithLogger ()
specifier|public
name|void
name|testSetSoTimeoutWithLogger
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|expected
init|=
literal|1000
decl_stmt|;
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|expected
argument_list|,
name|logger
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|socket
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSoTimeoutWithLoggerAndReason ()
specifier|public
name|void
name|testSetSoTimeoutWithLoggerAndReason
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|expected
init|=
literal|1000
decl_stmt|;
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|expected
argument_list|,
name|logger
argument_list|,
literal|"Testing setSoTimeout"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|socket
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSoTimeoutWithUnconnectedSocket ()
specifier|public
name|void
name|testSetSoTimeoutWithUnconnectedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expected
init|=
literal|1000
decl_stmt|;
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|expected
argument_list|,
name|logger
argument_list|,
literal|"Testing setSoTimeout with unconnected Socket"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|socket
operator|.
name|getSoTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetSoTimeoutWithClosedSocket ()
specifier|public
name|void
name|testSetSoTimeoutWithClosedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expected
init|=
literal|1000
decl_stmt|;
name|connect
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|expected
argument_list|,
name|logger
argument_list|,
literal|"Testing setSoTimeout with closed Socket"
argument_list|)
expr_stmt|;
comment|// We can't get the SO_TIMEOUT from a closed socket (Socket.getSoTimeout() will throw a SocketException
comment|// assertEquals(expected, socket.getSoTimeout());
block|}
annotation|@
name|Test
DECL|method|testSetSoTimeoutWithResetSocket ()
specifier|public
name|void
name|testSetSoTimeoutWithResetSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|expected
init|=
literal|1000
decl_stmt|;
name|connect
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|expected
argument_list|,
name|logger
argument_list|,
literal|"Testing setSoTimeout with reset Socket"
argument_list|)
expr_stmt|;
comment|// We can't get the SO_TIMEOUT from a closed socket (Socket.getSoTimeout() will throw a SocketException
comment|// assertEquals(expected, socket.getSoTimeout());
block|}
annotation|@
name|Test
DECL|method|testClose ()
specifier|public
name|void
name|testClose
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWithLogger ()
specifier|public
name|void
name|testCloseWithLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWithLoggerAndReason ()
specifier|public
name|void
name|testCloseWithLoggerAndReason
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing close"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWithUnconnectedSocket ()
specifier|public
name|void
name|testCloseWithUnconnectedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing close with unconnected Socket"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Socket should NOT closed because it was never connected"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWithClosedSocket ()
specifier|public
name|void
name|testCloseWithClosedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing close with closed Socket"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloseWithResetSocket ()
specifier|public
name|void
name|testCloseWithResetSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing close with reset Socket"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReset ()
specifier|public
name|void
name|testReset
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetWithLogger ()
specifier|public
name|void
name|testResetWithLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetWithLoggerAndReason ()
specifier|public
name|void
name|testResetWithLoggerAndReason
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing reset"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetWithUnconnectedSocket ()
specifier|public
name|void
name|testResetWithUnconnectedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing reset with unconnected Socket"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Socket should NOT closed because it was never connected"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetWithClosedSocket ()
specifier|public
name|void
name|testResetWithClosedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing reset with closed Socket"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResetWithResetSocket ()
specifier|public
name|void
name|testResetWithResetSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|logger
argument_list|,
literal|"Testing reset with reset Socket"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Socket should be closed"
argument_list|,
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAddressString ()
specifier|public
name|void
name|testGetAddressString
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|MllpSocketUtil
operator|.
name|getAddressString
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have an address string"
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAddressStringWithUnconnectedSocket ()
specifier|public
name|void
name|testGetAddressStringWithUnconnectedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|address
init|=
name|MllpSocketUtil
operator|.
name|getAddressString
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have an address string"
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAddressStringWithClosedSocket ()
specifier|public
name|void
name|testGetAddressStringWithClosedSocket
parameter_list|()
throws|throws
name|Exception
block|{
name|connect
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
name|String
name|address
init|=
name|MllpSocketUtil
operator|.
name|getAddressString
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have an address string"
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
comment|// Utility Methods
DECL|method|connect ()
specifier|private
name|void
name|connect
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|socket
operator|=
operator|new
name|Socket
argument_list|(
name|serverSocket
operator|.
name|getInetAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socket
operator|.
name|connect
argument_list|(
name|serverSocket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Socket should be open"
argument_list|,
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|private
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Socket should have been connected and closed"
argument_list|,
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reset ()
specifier|private
name|void
name|reset
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|socket
operator|.
name|setSoLinger
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Socket should have been connected and closed"
argument_list|,
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
name|socket
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

