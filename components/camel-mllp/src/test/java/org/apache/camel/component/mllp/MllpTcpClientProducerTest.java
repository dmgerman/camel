begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpServerResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|mllp
operator|.
name|Hl7MessageGenerator
operator|.
name|generateMessage
import|;
end_import

begin_class
DECL|class|MllpTcpClientProducerTest
specifier|public
class|class
name|MllpTcpClientProducerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Rule
DECL|field|mllpServer
specifier|public
name|MllpServerResource
name|mllpServer
init|=
operator|new
name|MllpServerResource
argument_list|(
literal|"localhost"
argument_list|,
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"direct://source"
argument_list|)
DECL|field|source
name|ProducerTemplate
name|source
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://acknowledged"
argument_list|)
DECL|field|acknowledged
name|MockEndpoint
name|acknowledged
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://timeout-ex"
argument_list|)
DECL|field|timeout
name|MockEndpoint
name|timeout
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://frame-ex"
argument_list|)
DECL|field|frame
name|MockEndpoint
name|frame
decl_stmt|;
annotation|@
name|Override
DECL|method|isMockEndpoints ()
specifier|public
name|String
name|isMockEndpoints
parameter_list|()
block|{
return|return
literal|"log://netty-mllp-sender-throughput*"
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|(
name|DefaultCamelContext
operator|)
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setUseMDCLogging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
name|int
name|connectTimeout
init|=
literal|1000
decl_stmt|;
name|int
name|responseTimeout
init|=
literal|1000
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|errorHandler
argument_list|(
name|defaultErrorHandler
argument_list|()
operator|.
name|allowRedeliveryWhileStopping
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|MllpFrameException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|logHandled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|MllpTimeoutException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|logHandled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|onCompletion
argument_list|()
operator|.
name|onFailureOnly
argument_list|()
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
literal|"Processing Failed"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|source
operator|.
name|getDefaultEndpoint
argument_list|()
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"mllp-sender-test-route"
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
literal|"Sending Message: $simple{header[CamelHL7MessageControl]}"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"mllp://%s:%d?connectTimeout=%d&receiveTimeout=%d"
argument_list|,
name|mllpServer
operator|.
name|getListenHost
argument_list|()
argument_list|,
name|mllpServer
operator|.
name|getListenPort
argument_list|()
argument_list|,
name|connectTimeout
argument_list|,
name|responseTimeout
argument_list|)
operator|.
name|to
argument_list|(
name|acknowledged
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct://handle-timeout"
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
literal|"Response Timeout"
argument_list|)
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testSendSingleMessage ()
specifier|public
name|void
name|testSendSingleMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|acknowledged
operator|.
name|setExpectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|setExpectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setExpectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendMultipleMessages ()
specifier|public
name|void
name|testSendMultipleMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|5
decl_stmt|;
name|acknowledged
operator|.
name|setExpectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|setExpectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setExpectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoResponseOnFirstMessage ()
specifier|public
name|void
name|testNoResponseOnFirstMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|5
decl_stmt|;
name|acknowledged
operator|.
name|setExpectedMessageCount
argument_list|(
name|sendMessageCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setExpectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|disableResponse
argument_list|()
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege 1 not completed"
argument_list|,
name|complete
index|[
literal|0
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|enableResponse
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoResponseOnNthMessage ()
specifier|public
name|void
name|testNoResponseOnNthMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|3
decl_stmt|;
name|acknowledged
operator|.
name|setExpectedMessageCount
argument_list|(
name|sendMessageCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setExpectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|disableResponse
argument_list|(
name|sendMessageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingEndOfDataByte ()
specifier|public
name|void
name|testMissingEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|3
decl_stmt|;
name|acknowledged
operator|.
name|setExpectedMessageCount
argument_list|(
name|sendMessageCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
name|sendMessageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingEndOfBlockByte ()
specifier|public
name|void
name|testMissingEndOfBlockByte
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|3
decl_stmt|;
name|acknowledged
operator|.
name|setExpectedMessageCount
argument_list|(
name|sendMessageCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|setExcludeEndOfBlockModulus
argument_list|(
name|sendMessageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationAcceptAcknowledgement ()
specifier|public
name|void
name|testApplicationAcceptAcknowledgement
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|5
decl_stmt|;
name|acknowledged
operator|.
name|setExpectedMessageCount
argument_list|(
name|sendMessageCount
argument_list|)
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

