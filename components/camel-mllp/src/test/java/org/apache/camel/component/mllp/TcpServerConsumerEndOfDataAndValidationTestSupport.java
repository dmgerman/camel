begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|Hl7Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpClientResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpJUnitResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|mllp
operator|.
name|Hl7TestMessageGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_class
DECL|class|TcpServerConsumerEndOfDataAndValidationTestSupport
specifier|public
specifier|abstract
class|class
name|TcpServerConsumerEndOfDataAndValidationTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|CONNECT_TIMEOUT
specifier|static
specifier|final
name|int
name|CONNECT_TIMEOUT
init|=
literal|500
decl_stmt|;
DECL|field|RECEIVE_TIMEOUT
specifier|static
specifier|final
name|int
name|RECEIVE_TIMEOUT
init|=
literal|1000
decl_stmt|;
DECL|field|READ_TIMEOUT
specifier|static
specifier|final
name|int
name|READ_TIMEOUT
init|=
literal|500
decl_stmt|;
annotation|@
name|Rule
DECL|field|mllpClient
specifier|public
name|MllpClientResource
name|mllpClient
init|=
operator|new
name|MllpClientResource
argument_list|()
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock://complete"
argument_list|)
DECL|field|complete
name|MockEndpoint
name|complete
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock://failed"
argument_list|)
DECL|field|failed
name|MockEndpoint
name|failed
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock://invalid-ex"
argument_list|)
DECL|field|invalid
name|MockEndpoint
name|invalid
decl_stmt|;
DECL|field|expectedCompleteCount
name|int
name|expectedCompleteCount
decl_stmt|;
DECL|field|expectedFailedCount
name|int
name|expectedFailedCount
decl_stmt|;
DECL|field|expectedInvalidCount
name|int
name|expectedInvalidCount
decl_stmt|;
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|(
name|DefaultCamelContext
operator|)
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setUseMDCLogging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
name|mllpClient
operator|.
name|setMllpHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setMllpPort
argument_list|(
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|routeId
init|=
literal|"mllp-test-receiver-route"
decl_stmt|;
name|onException
argument_list|(
name|MllpInvalidMessageException
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|onCompletion
argument_list|()
operator|.
name|onFailureOnly
argument_list|()
operator|.
name|to
argument_list|(
name|failed
argument_list|)
expr_stmt|;
name|fromF
argument_list|(
literal|"mllp://%s:%d?autoAck=true&connectTimeout=%d&receiveTimeout=%d&readTimeout=%d&validatePayload=%b&requireEndOfData=%b"
argument_list|,
name|mllpClient
operator|.
name|getMllpHost
argument_list|()
argument_list|,
name|mllpClient
operator|.
name|getMllpPort
argument_list|()
argument_list|,
name|CONNECT_TIMEOUT
argument_list|,
name|RECEIVE_TIMEOUT
argument_list|,
name|READ_TIMEOUT
argument_list|,
name|validatePayload
argument_list|()
argument_list|,
name|requireEndOfData
argument_list|()
argument_list|)
operator|.
name|routeId
argument_list|(
name|routeId
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Test route received message"
argument_list|)
operator|.
name|to
argument_list|(
name|complete
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|validatePayload ()
specifier|abstract
name|boolean
name|validatePayload
parameter_list|()
function_decl|;
DECL|method|requireEndOfData ()
specifier|abstract
name|boolean
name|requireEndOfData
parameter_list|()
function_decl|;
DECL|method|setExpectedCounts ()
specifier|protected
name|void
name|setExpectedCounts
parameter_list|()
block|{
name|complete
operator|.
name|expectedMessageCount
argument_list|(
name|expectedCompleteCount
argument_list|)
expr_stmt|;
name|failed
operator|.
name|expectedMessageCount
argument_list|(
name|expectedFailedCount
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|expectedMessageCount
argument_list|(
name|expectedInvalidCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReceiveSingleMessage ()
specifier|public
name|void
name|testReceiveSingleMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedCompleteCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReceiveSingleMessageWithDelayAfterConnection ()
specifier|public
name|void
name|testReceiveSingleMessageWithDelayAfterConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedCompleteCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReceiveMultipleMessages ()
specifier|public
name|void
name|testReceiveMultipleMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedCompleteCount
operator|=
literal|5
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|expectedCompleteCount
condition|;
operator|++
name|i
control|)
block|{
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOpenMllpEnvelopeWithReset ()
specifier|public
name|void
name|testOpenMllpEnvelopeWithReset
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedCompleteCount
operator|=
literal|4
expr_stmt|;
name|expectedInvalidCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|notify1
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|NotifyBuilder
name|notify2
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|5
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|setSoTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_1"
argument_list|)
expr_stmt|;
name|String
name|acknowledgement1
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_2"
argument_list|)
expr_stmt|;
name|String
name|acknowledgement2
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"First two normal exchanges did not complete"
argument_list|,
name|notify1
operator|.
name|matches
argument_list|(
name|RECEIVE_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_3"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Acknowledgement won't come here
try|try
block|{
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpJUnitResourceException
name|resourceEx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Expected exception reading response"
argument_list|)
expr_stmt|;
block|}
name|mllpClient
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_4"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|acknowledgement4
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending TEST_MESSAGE_5"
argument_list|)
expr_stmt|;
name|String
name|acknowledgement5
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Remaining exchanges did not complete"
argument_list|,
name|notify2
operator|.
name|matches
argument_list|(
name|RECEIVE_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 1"
argument_list|,
name|acknowledgement1
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00001"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 2"
argument_list|,
name|acknowledgement2
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00002"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 4"
argument_list|,
name|acknowledgement4
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00004"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be acknowledgment for message 5"
argument_list|,
name|acknowledgement5
operator|.
name|contains
argument_list|(
literal|"MSA|AA|00005"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMessageReadTimeout ()
specifier|public
name|void
name|testMessageReadTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedCompleteCount
operator|=
literal|1
expr_stmt|;
name|expectedInvalidCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|oneDone
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|NotifyBuilder
name|twoDone
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Send one message to establish the connection and start the ConsumerClientSocketThread
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"One exchange should have completed"
argument_list|,
name|oneDone
operator|.
name|matches
argument_list|(
name|RECEIVE_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Two exchanges should have completed"
argument_list|,
name|twoDone
operator|.
name|matches
argument_list|(
name|RECEIVE_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitialMessageReadTimeout ()
specifier|public
name|void
name|testInitialMessageReadTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedCompleteCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending first message"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|10001
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|RECEIVE_TIMEOUT
operator|*
literal|5
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Attempting to send second message"
argument_list|)
expr_stmt|;
name|String
name|acknowledgement
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|10002
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"If the send doesn't throw an exception, the acknowledgement should be empty"
argument_list|,
literal|""
argument_list|,
name|acknowledgement
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpJUnitResourceException
name|expected
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"If the send throws an exception, the cause should be a SocketException"
argument_list|,
name|expected
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|SocketException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mllpClient
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Sending third message"
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|10003
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidMessage ()
specifier|public
specifier|abstract
name|void
name|testInvalidMessage
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runInvalidMessage ()
specifier|protected
name|void
name|runInvalidMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
literal|"INVALID PAYLOAD"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNthInvalidMessage ()
specifier|public
specifier|abstract
name|void
name|testNthInvalidMessage
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runNthInvalidMessage ()
specifier|protected
name|void
name|runNthInvalidMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
name|expectedCompleteCount
operator|=
name|messageCount
operator|-
name|expectedInvalidCount
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|int
name|invalidMessageNumber
init|=
name|messageCount
operator|/
literal|2
decl_stmt|;
name|NotifyBuilder
name|invalidMessageDone
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|whenDone
argument_list|(
name|invalidMessageNumber
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|invalidMessageNumber
condition|)
block|{
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
literal|"INVALID PAYLOAD"
argument_list|)
expr_stmt|;
comment|// The component will reset the connection in this case, so we need to reconnect
name|assertTrue
argument_list|(
literal|"Exchange with invalid payload should have completed"
argument_list|,
name|invalidMessageDone
operator|.
name|matches
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|acknowledgement
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The acknowledgement returned should not be null"
argument_list|,
name|acknowledgement
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"An acknowledgement should be received for a valid HL7 message"
argument_list|,
literal|0
argument_list|,
name|acknowledgement
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testMessageContainingEmbeddedStartOfBlock ()
specifier|public
specifier|abstract
name|void
name|testMessageContainingEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runMessageContainingEmbeddedStartOfBlock ()
specifier|protected
name|void
name|runMessageContainingEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|done
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"EVN"
argument_list|,
literal|"EVN"
operator|+
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exchange should have completed"
argument_list|,
name|done
operator|.
name|matches
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNthMessageContainingEmbeddedStartOfBlock ()
specifier|public
specifier|abstract
name|void
name|testNthMessageContainingEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runNthMessageContainingEmbeddedStartOfBlock ()
specifier|protected
name|void
name|runNthMessageContainingEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
name|expectedCompleteCount
operator|=
name|messageCount
operator|-
name|expectedInvalidCount
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|String
name|message
init|=
operator|(
name|i
operator|==
operator|(
name|messageCount
operator|/
literal|2
operator|)
operator|)
condition|?
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"EVN"
argument_list|,
literal|"EVN"
operator|+
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
else|:
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sending message {}"
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMessageContainingEmbeddedEndOfBlock ()
specifier|public
specifier|abstract
name|void
name|testMessageContainingEmbeddedEndOfBlock
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|Test
DECL|method|testInvalidMessageContainingEmbeddedEndOfBlock ()
specifier|public
specifier|abstract
name|void
name|testInvalidMessageContainingEmbeddedEndOfBlock
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runInvalidMessageContainingEmbeddedEndOfBlock ()
specifier|protected
name|void
name|runInvalidMessageContainingEmbeddedEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
name|expectedCompleteCount
operator|=
name|messageCount
operator|-
name|expectedInvalidCount
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|int
name|invalidMessageNumber
init|=
name|messageCount
operator|/
literal|2
decl_stmt|;
name|NotifyBuilder
name|invalidMessageDone
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|whenDone
argument_list|(
name|invalidMessageNumber
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|String
name|message
init|=
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|invalidMessageNumber
condition|)
block|{
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
name|message
operator|.
name|replaceFirst
argument_list|(
literal|"EVN"
argument_list|,
literal|"EVN"
operator|+
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Exchange containing invalid message should have completed"
argument_list|,
name|invalidMessageDone
operator|.
name|matches
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// The component may reset the connection in this case, so reconnect if needed
comment|/*                 // TODO: Figure out why this isn't working                 try {                     mllpClient.checkConnection();                 } catch (MllpJUnitResourceException checkConnectionEx) {                     mllpClient.disconnect();                     mllpClient.connect();                 }                 */
name|mllpClient
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testNthMessageContainingEmbeddedEndOfBlock ()
specifier|public
specifier|abstract
name|void
name|testNthMessageContainingEmbeddedEndOfBlock
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runNthMessageContainingEmbeddedEndOfBlock ()
specifier|protected
name|void
name|runNthMessageContainingEmbeddedEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
name|expectedCompleteCount
operator|=
name|messageCount
operator|-
name|expectedInvalidCount
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
name|done
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|()
argument_list|)
operator|.
name|whenDone
argument_list|(
name|messageCount
operator|/
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|String
name|message
init|=
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|messageCount
operator|/
literal|2
condition|)
block|{
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
name|message
operator|.
name|replaceFirst
argument_list|(
literal|"EVN"
argument_list|,
literal|"EVN"
operator|+
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid message should have completed"
argument_list|,
name|done
operator|.
name|matches
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|acknowledgement
init|=
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The acknowledgement returned should not be null"
argument_list|,
name|acknowledgement
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"An acknowledgement should be received for a valid HL7 message"
argument_list|,
literal|0
argument_list|,
name|acknowledgement
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Exchanges should have completed"
argument_list|,
name|done
operator|.
name|matches
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitialMessageWithoutEndOfDataByte ()
specifier|public
name|void
name|testInitialMessageWithoutEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMessageWithoutEndOfDataByte ()
specifier|public
specifier|abstract
name|void
name|testMessageWithoutEndOfDataByte
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runMessageWithoutEndOfDataByte ()
specifier|protected
name|void
name|runMessageWithoutEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpClient
operator|.
name|sendMessageAndWaitForAcknowledgement
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|setSendEndOfData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mllpClient
operator|.
name|sendFramedData
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

