begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.junit.rule.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_STREAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|MESSAGE_TERMINATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|SEGMENT_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_comment
comment|/**  * MLLP Test Server packaged as a JUnit Rule  *  * The server can be configured to simulate a large number  * of error conditions.  *  * TODO:  This needs to be looked at - it may be orphaning threads  */
end_comment

begin_class
DECL|class|MllpServerResource
specifier|public
class|class
name|MllpServerResource
extends|extends
name|ExternalResource
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|listenHost
name|String
name|listenHost
decl_stmt|;
DECL|field|listenPort
name|int
name|listenPort
decl_stmt|;
DECL|field|backlog
name|int
name|backlog
init|=
literal|5
decl_stmt|;
DECL|field|counter
name|int
name|counter
init|=
literal|1
decl_stmt|;
DECL|field|active
name|boolean
name|active
init|=
literal|true
decl_stmt|;
DECL|field|excludeStartOfBlockModulus
name|int
name|excludeStartOfBlockModulus
decl_stmt|;
DECL|field|excludeEndOfBlockModulus
name|int
name|excludeEndOfBlockModulus
decl_stmt|;
DECL|field|excludeEndOfDataModulus
name|int
name|excludeEndOfDataModulus
decl_stmt|;
DECL|field|excludeAcknowledgementModulus
name|int
name|excludeAcknowledgementModulus
decl_stmt|;
DECL|field|sendOutOfBandDataModulus
name|int
name|sendOutOfBandDataModulus
decl_stmt|;
DECL|field|disconnectBeforeAcknowledgementModulus
name|int
name|disconnectBeforeAcknowledgementModulus
decl_stmt|;
DECL|field|disconnectAfterAcknowledgementModulus
name|int
name|disconnectAfterAcknowledgementModulus
decl_stmt|;
DECL|field|sendApplicationRejectAcknowledgementModulus
name|int
name|sendApplicationRejectAcknowledgementModulus
decl_stmt|;
DECL|field|sendApplicationErrorAcknowledgementModulus
name|int
name|sendApplicationErrorAcknowledgementModulus
decl_stmt|;
DECL|field|sendApplicationRejectAcknowledgementPattern
name|Pattern
name|sendApplicationRejectAcknowledgementPattern
decl_stmt|;
DECL|field|sendApplicationErrorAcknowledgementPattern
name|Pattern
name|sendApplicationErrorAcknowledgementPattern
decl_stmt|;
DECL|field|serverSocketThread
name|ServerSocketThread
name|serverSocketThread
decl_stmt|;
DECL|method|MllpServerResource ()
specifier|public
name|MllpServerResource
parameter_list|()
block|{     }
DECL|method|MllpServerResource (int listenPort)
specifier|public
name|MllpServerResource
parameter_list|(
name|int
name|listenPort
parameter_list|)
block|{
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
block|}
DECL|method|MllpServerResource (int listenPort, int backlog)
specifier|public
name|MllpServerResource
parameter_list|(
name|int
name|listenPort
parameter_list|,
name|int
name|backlog
parameter_list|)
block|{
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
name|this
operator|.
name|backlog
operator|=
name|backlog
expr_stmt|;
block|}
DECL|method|MllpServerResource (String listenHost, int listenPort)
specifier|public
name|MllpServerResource
parameter_list|(
name|String
name|listenHost
parameter_list|,
name|int
name|listenPort
parameter_list|)
block|{
name|this
operator|.
name|listenHost
operator|=
name|listenHost
expr_stmt|;
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
block|}
DECL|method|MllpServerResource (String listenHost, int listenPort, int backlog)
specifier|public
name|MllpServerResource
parameter_list|(
name|String
name|listenHost
parameter_list|,
name|int
name|listenPort
parameter_list|,
name|int
name|backlog
parameter_list|)
block|{
name|this
operator|.
name|listenHost
operator|=
name|listenHost
expr_stmt|;
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
name|this
operator|.
name|backlog
operator|=
name|backlog
expr_stmt|;
block|}
DECL|method|getListenHost ()
specifier|public
name|String
name|getListenHost
parameter_list|()
block|{
return|return
name|listenHost
return|;
block|}
DECL|method|setListenHost (String listenHost)
specifier|public
name|void
name|setListenHost
parameter_list|(
name|String
name|listenHost
parameter_list|)
block|{
name|this
operator|.
name|listenHost
operator|=
name|listenHost
expr_stmt|;
block|}
DECL|method|getListenPort ()
specifier|public
name|int
name|getListenPort
parameter_list|()
block|{
return|return
name|listenPort
return|;
block|}
DECL|method|setListenPort (int listenPort)
specifier|public
name|void
name|setListenPort
parameter_list|(
name|int
name|listenPort
parameter_list|)
block|{
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
block|}
DECL|method|getBacklog ()
specifier|public
name|int
name|getBacklog
parameter_list|()
block|{
return|return
name|backlog
return|;
block|}
DECL|method|setBacklog (int backlog)
specifier|public
name|void
name|setBacklog
parameter_list|(
name|int
name|backlog
parameter_list|)
block|{
name|this
operator|.
name|backlog
operator|=
name|backlog
expr_stmt|;
block|}
DECL|method|startup ()
specifier|public
name|void
name|startup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|active
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|listenHost
condition|)
block|{
name|serverSocketThread
operator|=
operator|new
name|ServerSocketThread
argument_list|(
name|listenHost
argument_list|,
name|listenPort
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverSocketThread
operator|=
operator|new
name|ServerSocketThread
argument_list|(
name|listenPort
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
name|listenHost
operator|=
name|serverSocketThread
operator|.
name|getListenHost
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|>=
name|listenPort
condition|)
block|{
name|listenPort
operator|=
name|serverSocketThread
operator|.
name|listenPort
expr_stmt|;
block|}
name|serverSocketThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serverSocketThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|active
operator|=
literal|false
expr_stmt|;
name|serverSocketThread
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|serverSocketThread
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|before ()
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
name|startup
argument_list|()
expr_stmt|;
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|after ()
specifier|protected
name|void
name|after
parameter_list|()
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|interrupt ()
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
name|serverSocketThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
DECL|method|sendApplicationRejectAcknowledgement (String hl7Message)
specifier|public
name|boolean
name|sendApplicationRejectAcknowledgement
parameter_list|(
name|String
name|hl7Message
parameter_list|)
block|{
return|return
name|evaluatePattern
argument_list|(
name|hl7Message
argument_list|,
name|this
operator|.
name|sendApplicationErrorAcknowledgementPattern
argument_list|)
return|;
block|}
DECL|method|sendApplicationErrorAcknowledgement (String hl7Message)
specifier|public
name|boolean
name|sendApplicationErrorAcknowledgement
parameter_list|(
name|String
name|hl7Message
parameter_list|)
block|{
return|return
name|evaluatePattern
argument_list|(
name|hl7Message
argument_list|,
name|this
operator|.
name|sendApplicationRejectAcknowledgementPattern
argument_list|)
return|;
block|}
DECL|method|sendApplicationRejectAcknowledgement (int messageCount)
specifier|public
name|boolean
name|sendApplicationRejectAcknowledgement
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|this
operator|.
name|sendApplicationRejectAcknowledgementModulus
argument_list|)
return|;
block|}
DECL|method|sendApplicationErrorAcknowledgement (int messageCount)
specifier|public
name|boolean
name|sendApplicationErrorAcknowledgement
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|this
operator|.
name|sendApplicationErrorAcknowledgementModulus
argument_list|)
return|;
block|}
DECL|method|excludeStartOfBlock (int messageCount)
specifier|public
name|boolean
name|excludeStartOfBlock
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|excludeStartOfBlockModulus
argument_list|)
return|;
block|}
DECL|method|excludeAcknowledgement (int messageCount)
specifier|public
name|boolean
name|excludeAcknowledgement
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|excludeAcknowledgementModulus
argument_list|)
return|;
block|}
DECL|method|excludeEndOfBlock (int messageCount)
specifier|public
name|boolean
name|excludeEndOfBlock
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|excludeEndOfBlockModulus
argument_list|)
return|;
block|}
DECL|method|excludeEndOfData (int messageCount)
specifier|public
name|boolean
name|excludeEndOfData
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|excludeEndOfDataModulus
argument_list|)
return|;
block|}
DECL|method|disconnectBeforeAcknowledgement (int messageCount)
specifier|public
name|boolean
name|disconnectBeforeAcknowledgement
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|disconnectBeforeAcknowledgementModulus
argument_list|)
return|;
block|}
DECL|method|disconnectAfterAcknowledgement (int messageCount)
specifier|public
name|boolean
name|disconnectAfterAcknowledgement
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|disconnectAfterAcknowledgementModulus
argument_list|)
return|;
block|}
DECL|method|sendOutOfBandData (int messageCount)
specifier|public
name|boolean
name|sendOutOfBandData
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
return|return
name|evaluateModulus
argument_list|(
name|messageCount
argument_list|,
name|sendOutOfBandDataModulus
argument_list|)
return|;
block|}
DECL|method|evaluateModulus (int messageCount, int modulus)
specifier|private
name|boolean
name|evaluateModulus
parameter_list|(
name|int
name|messageCount
parameter_list|,
name|int
name|modulus
parameter_list|)
block|{
switch|switch
condition|(
name|modulus
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|false
return|;
case|case
literal|1
case|:
return|return
literal|true
return|;
default|default:
return|return
operator|(
name|messageCount
operator|%
name|modulus
operator|==
literal|0
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
block|}
DECL|method|evaluatePattern (String hl7Message, Pattern pattern)
specifier|private
name|boolean
name|evaluatePattern
parameter_list|(
name|String
name|hl7Message
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|boolean
name|retValue
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|pattern
operator|&&
name|pattern
operator|.
name|matcher
argument_list|(
name|hl7Message
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|retValue
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|retValue
return|;
block|}
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
DECL|method|setActive (boolean active)
specifier|public
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
block|}
DECL|method|getExcludeStartOfBlockModulus ()
specifier|public
name|int
name|getExcludeStartOfBlockModulus
parameter_list|()
block|{
return|return
name|excludeStartOfBlockModulus
return|;
block|}
comment|/**      * Set the modulus used to determine when to include the bMLLP_ENVELOPE_START_OF_BLOCK      * portion of the MLLP Envelope.      *<p/>      * If this value is less than or equal to 0, the bMLLP_ENVELOPE_START_OF_BLOCK portion      * of the MLLP Envelope will always be included.      * If the value is 1, the bMLLP_ENVELOPE_START_OF_BLOCK portion of the MLLP Envelope will      * never be included.      * Otherwise, if the result of evaluating message count % value is greater      * than 0, the bMLLP_ENVELOPE_START_OF_BLOCK portion of the MLLP Envelope will not be      * included.  Effectively leaving the bMLLP_ENVELOPE_START_OF_BLOCK portion of the MLLP Envelope      * out of every n-th message.      *      * @param excludeStartOfBlockModulus exclude on every n-th message      *                                   0 => Never excluded      *                                   1 => Always excluded      */
DECL|method|setExcludeStartOfBlockModulus (int excludeStartOfBlockModulus)
specifier|public
name|void
name|setExcludeStartOfBlockModulus
parameter_list|(
name|int
name|excludeStartOfBlockModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|excludeStartOfBlockModulus
condition|)
block|{
name|this
operator|.
name|excludeStartOfBlockModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|excludeStartOfBlockModulus
operator|=
name|excludeStartOfBlockModulus
expr_stmt|;
block|}
block|}
DECL|method|enableMllpEnvelope ()
specifier|public
name|void
name|enableMllpEnvelope
parameter_list|()
block|{
name|this
operator|.
name|setExcludeStartOfBlockModulus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfBlockModulus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|disableMllpEnvelopeStart ()
specifier|public
name|void
name|disableMllpEnvelopeStart
parameter_list|()
block|{
name|this
operator|.
name|disableMllpEnvelopeStart
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|disableMllpEnvelopeStart (int mllpEnvelopeModulus)
specifier|public
name|void
name|disableMllpEnvelopeStart
parameter_list|(
name|int
name|mllpEnvelopeModulus
parameter_list|)
block|{
name|this
operator|.
name|setExcludeStartOfBlockModulus
argument_list|(
name|mllpEnvelopeModulus
argument_list|)
expr_stmt|;
block|}
DECL|method|disableMllpEnvelopeEnd ()
specifier|public
name|void
name|disableMllpEnvelopeEnd
parameter_list|()
block|{
name|this
operator|.
name|disableMllpEnvelope
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|disableMllpEnvelopeEnd (int mllpEnvelopeModulus)
specifier|public
name|void
name|disableMllpEnvelopeEnd
parameter_list|(
name|int
name|mllpEnvelopeModulus
parameter_list|)
block|{
name|this
operator|.
name|setExcludeEndOfBlockModulus
argument_list|(
name|mllpEnvelopeModulus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
name|mllpEnvelopeModulus
argument_list|)
expr_stmt|;
block|}
DECL|method|disableMllpEnvelope ()
specifier|public
name|void
name|disableMllpEnvelope
parameter_list|()
block|{
name|this
operator|.
name|disableMllpEnvelope
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|disableMllpEnvelope (int mllpEnvelopeModulus)
specifier|public
name|void
name|disableMllpEnvelope
parameter_list|(
name|int
name|mllpEnvelopeModulus
parameter_list|)
block|{
name|this
operator|.
name|setExcludeStartOfBlockModulus
argument_list|(
name|mllpEnvelopeModulus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfBlockModulus
argument_list|(
name|mllpEnvelopeModulus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
name|mllpEnvelopeModulus
argument_list|)
expr_stmt|;
block|}
DECL|method|enableResponse ()
specifier|public
name|void
name|enableResponse
parameter_list|()
block|{
name|this
operator|.
name|setExcludeStartOfBlockModulus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeAcknowledgementModulus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfBlockModulus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|disableResponse ()
specifier|public
name|void
name|disableResponse
parameter_list|()
block|{
name|this
operator|.
name|disableResponse
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|disableResponse (int mllpResponseModulus)
specifier|public
name|void
name|disableResponse
parameter_list|(
name|int
name|mllpResponseModulus
parameter_list|)
block|{
name|this
operator|.
name|setExcludeStartOfBlockModulus
argument_list|(
name|mllpResponseModulus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeAcknowledgementModulus
argument_list|(
name|mllpResponseModulus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfBlockModulus
argument_list|(
name|mllpResponseModulus
argument_list|)
expr_stmt|;
name|this
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
name|mllpResponseModulus
argument_list|)
expr_stmt|;
block|}
DECL|method|getExcludeEndOfBlockModulus ()
specifier|public
name|int
name|getExcludeEndOfBlockModulus
parameter_list|()
block|{
return|return
name|excludeEndOfBlockModulus
return|;
block|}
DECL|method|setExcludeEndOfBlockModulus (int excludeEndOfBlockModulus)
specifier|public
name|void
name|setExcludeEndOfBlockModulus
parameter_list|(
name|int
name|excludeEndOfBlockModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|excludeEndOfBlockModulus
condition|)
block|{
name|this
operator|.
name|excludeEndOfBlockModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|excludeEndOfBlockModulus
operator|=
name|excludeEndOfBlockModulus
expr_stmt|;
block|}
block|}
DECL|method|getExcludeEndOfDataModulus ()
specifier|public
name|int
name|getExcludeEndOfDataModulus
parameter_list|()
block|{
return|return
name|excludeEndOfDataModulus
return|;
block|}
DECL|method|setExcludeEndOfDataModulus (int excludeEndOfDataModulus)
specifier|public
name|void
name|setExcludeEndOfDataModulus
parameter_list|(
name|int
name|excludeEndOfDataModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|excludeEndOfDataModulus
condition|)
block|{
name|this
operator|.
name|excludeEndOfDataModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|excludeEndOfDataModulus
operator|=
name|excludeEndOfDataModulus
expr_stmt|;
block|}
block|}
DECL|method|getExcludeAcknowledgementModulus ()
specifier|public
name|int
name|getExcludeAcknowledgementModulus
parameter_list|()
block|{
return|return
name|excludeAcknowledgementModulus
return|;
block|}
DECL|method|setExcludeAcknowledgementModulus (int excludeAcknowledgementModulus)
specifier|public
name|void
name|setExcludeAcknowledgementModulus
parameter_list|(
name|int
name|excludeAcknowledgementModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|excludeAcknowledgementModulus
condition|)
block|{
name|this
operator|.
name|excludeAcknowledgementModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|excludeAcknowledgementModulus
operator|=
name|excludeAcknowledgementModulus
expr_stmt|;
block|}
block|}
DECL|method|getSendOutOfBandDataModulus ()
specifier|public
name|int
name|getSendOutOfBandDataModulus
parameter_list|()
block|{
return|return
name|sendOutOfBandDataModulus
return|;
block|}
DECL|method|setSendOutOfBandDataModulus (int sendOutOfBandDataModulus)
specifier|public
name|void
name|setSendOutOfBandDataModulus
parameter_list|(
name|int
name|sendOutOfBandDataModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|sendOutOfBandDataModulus
condition|)
block|{
name|this
operator|.
name|sendOutOfBandDataModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|sendOutOfBandDataModulus
operator|=
name|sendOutOfBandDataModulus
expr_stmt|;
block|}
block|}
DECL|method|getDisconnectBeforeAcknowledgementModulus ()
specifier|public
name|int
name|getDisconnectBeforeAcknowledgementModulus
parameter_list|()
block|{
return|return
name|disconnectBeforeAcknowledgementModulus
return|;
block|}
DECL|method|setDisconnectBeforeAcknowledgementModulus (int disconnectBeforeAcknowledgementModulus)
specifier|public
name|void
name|setDisconnectBeforeAcknowledgementModulus
parameter_list|(
name|int
name|disconnectBeforeAcknowledgementModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|disconnectBeforeAcknowledgementModulus
condition|)
block|{
name|this
operator|.
name|disconnectBeforeAcknowledgementModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|disconnectBeforeAcknowledgementModulus
operator|=
name|disconnectBeforeAcknowledgementModulus
expr_stmt|;
block|}
block|}
DECL|method|getDisconnectAfterAcknowledgementModulus ()
specifier|public
name|int
name|getDisconnectAfterAcknowledgementModulus
parameter_list|()
block|{
return|return
name|disconnectAfterAcknowledgementModulus
return|;
block|}
DECL|method|setDisconnectAfterAcknowledgementModulus (int disconnectAfterAcknowledgementModulus)
specifier|public
name|void
name|setDisconnectAfterAcknowledgementModulus
parameter_list|(
name|int
name|disconnectAfterAcknowledgementModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|disconnectAfterAcknowledgementModulus
condition|)
block|{
name|this
operator|.
name|disconnectAfterAcknowledgementModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|disconnectAfterAcknowledgementModulus
operator|=
name|disconnectAfterAcknowledgementModulus
expr_stmt|;
block|}
block|}
DECL|method|getSendApplicationRejectAcknowledgementModulus ()
specifier|public
name|int
name|getSendApplicationRejectAcknowledgementModulus
parameter_list|()
block|{
return|return
name|sendApplicationRejectAcknowledgementModulus
return|;
block|}
DECL|method|setSendApplicationRejectAcknowledgementModulus (int sendApplicationRejectAcknowledgementModulus)
specifier|public
name|void
name|setSendApplicationRejectAcknowledgementModulus
parameter_list|(
name|int
name|sendApplicationRejectAcknowledgementModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|sendApplicationRejectAcknowledgementModulus
condition|)
block|{
name|this
operator|.
name|sendApplicationRejectAcknowledgementModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|sendApplicationRejectAcknowledgementModulus
operator|=
name|sendApplicationRejectAcknowledgementModulus
expr_stmt|;
block|}
block|}
DECL|method|getSendApplicationErrorAcknowledgementModulus ()
specifier|public
name|int
name|getSendApplicationErrorAcknowledgementModulus
parameter_list|()
block|{
return|return
name|sendApplicationErrorAcknowledgementModulus
return|;
block|}
DECL|method|setSendApplicationErrorAcknowledgementModulus (int sendApplicationErrorAcknowledgementModulus)
specifier|public
name|void
name|setSendApplicationErrorAcknowledgementModulus
parameter_list|(
name|int
name|sendApplicationErrorAcknowledgementModulus
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|>
name|sendApplicationErrorAcknowledgementModulus
condition|)
block|{
name|this
operator|.
name|sendApplicationErrorAcknowledgementModulus
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|sendApplicationErrorAcknowledgementModulus
operator|=
name|sendApplicationErrorAcknowledgementModulus
expr_stmt|;
block|}
block|}
DECL|method|getSendApplicationRejectAcknowledgementPattern ()
specifier|public
name|Pattern
name|getSendApplicationRejectAcknowledgementPattern
parameter_list|()
block|{
return|return
name|sendApplicationRejectAcknowledgementPattern
return|;
block|}
DECL|method|setSendApplicationRejectAcknowledgementPattern (Pattern sendApplicationRejectAcknowledgementPattern)
specifier|public
name|void
name|setSendApplicationRejectAcknowledgementPattern
parameter_list|(
name|Pattern
name|sendApplicationRejectAcknowledgementPattern
parameter_list|)
block|{
name|this
operator|.
name|sendApplicationRejectAcknowledgementPattern
operator|=
name|sendApplicationRejectAcknowledgementPattern
expr_stmt|;
block|}
DECL|method|getSendApplicationErrorAcknowledgementPattern ()
specifier|public
name|Pattern
name|getSendApplicationErrorAcknowledgementPattern
parameter_list|()
block|{
return|return
name|sendApplicationErrorAcknowledgementPattern
return|;
block|}
DECL|method|setSendApplicationErrorAcknowledgementPattern (Pattern sendApplicationErrorAcknowledgementPattern)
specifier|public
name|void
name|setSendApplicationErrorAcknowledgementPattern
parameter_list|(
name|Pattern
name|sendApplicationErrorAcknowledgementPattern
parameter_list|)
block|{
name|this
operator|.
name|sendApplicationErrorAcknowledgementPattern
operator|=
name|sendApplicationErrorAcknowledgementPattern
expr_stmt|;
block|}
DECL|method|getServerSocketThread ()
specifier|public
name|ServerSocketThread
name|getServerSocketThread
parameter_list|()
block|{
return|return
name|serverSocketThread
return|;
block|}
DECL|method|setServerSocketThread (ServerSocketThread serverSocketThread)
specifier|public
name|void
name|setServerSocketThread
parameter_list|(
name|ServerSocketThread
name|serverSocketThread
parameter_list|)
block|{
name|this
operator|.
name|serverSocketThread
operator|=
name|serverSocketThread
expr_stmt|;
block|}
DECL|method|closeConnection (Socket socket)
name|void
name|closeConnection
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|socket
condition|)
block|{
if|if
condition|(
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|shutdownInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered shutting down the input stream on the client socket"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|socket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered shutting down the output stream on the client socket"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing the client socket"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|resetConnection (Socket socket)
name|void
name|resetConnection
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|socket
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|setSoLinger
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SocketException encountered setting SO_LINGER to 0 on the socket to force a reset - ignoring"
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Nested class to accept TCP connections      */
DECL|class|ServerSocketThread
class|class
name|ServerSocketThread
extends|extends
name|Thread
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|bindTimeout
specifier|final
name|long
name|bindTimeout
init|=
literal|30000
decl_stmt|;
DECL|field|bindRetryDelay
specifier|final
name|long
name|bindRetryDelay
init|=
literal|1000
decl_stmt|;
DECL|field|serverSocket
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|field|clientSocketThreads
name|List
argument_list|<
name|ClientSocketThread
argument_list|>
name|clientSocketThreads
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|listenHost
name|String
name|listenHost
decl_stmt|;
DECL|field|listenPort
name|int
name|listenPort
decl_stmt|;
DECL|field|backlog
name|int
name|backlog
init|=
literal|5
decl_stmt|;
DECL|field|acceptTimeout
name|int
name|acceptTimeout
init|=
literal|5000
decl_stmt|;
DECL|field|raiseExceptionOnAcceptTimeout
name|boolean
name|raiseExceptionOnAcceptTimeout
decl_stmt|;
DECL|method|ServerSocketThread ()
name|ServerSocketThread
parameter_list|()
throws|throws
name|IOException
block|{
name|bind
argument_list|()
expr_stmt|;
block|}
DECL|method|ServerSocketThread (int listenPort)
name|ServerSocketThread
parameter_list|(
name|int
name|listenPort
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
name|bind
argument_list|()
expr_stmt|;
block|}
DECL|method|ServerSocketThread (int listenPort, int backlog)
name|ServerSocketThread
parameter_list|(
name|int
name|listenPort
parameter_list|,
name|int
name|backlog
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
name|this
operator|.
name|backlog
operator|=
name|backlog
expr_stmt|;
name|bind
argument_list|()
expr_stmt|;
block|}
DECL|method|ServerSocketThread (String listenHost, int listenPort, int backlog)
name|ServerSocketThread
parameter_list|(
name|String
name|listenHost
parameter_list|,
name|int
name|listenPort
parameter_list|,
name|int
name|backlog
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|listenHost
operator|=
name|listenHost
expr_stmt|;
name|this
operator|.
name|listenPort
operator|=
name|listenPort
expr_stmt|;
name|this
operator|.
name|backlog
operator|=
name|backlog
expr_stmt|;
name|bind
argument_list|()
expr_stmt|;
block|}
comment|/**          * Open the TCP Listener          *          * @throws IOException          */
DECL|method|bind ()
specifier|private
name|void
name|bind
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|serverSocket
operator|=
operator|new
name|ServerSocket
argument_list|()
expr_stmt|;
comment|// Set TCP Parameters
name|serverSocket
operator|.
name|setSoTimeout
argument_list|(
name|acceptTimeout
argument_list|)
expr_stmt|;
name|serverSocket
operator|.
name|setReuseAddress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|listenAddress
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|this
operator|.
name|listenHost
condition|)
block|{
name|listenAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|this
operator|.
name|listenHost
argument_list|,
name|this
operator|.
name|listenPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listenAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|this
operator|.
name|listenPort
argument_list|)
expr_stmt|;
block|}
name|long
name|startTicks
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|serverSocket
operator|.
name|isBound
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|bind
argument_list|(
name|listenAddress
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindException
name|bindEx
parameter_list|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|startTicks
operator|+
name|bindTimeout
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to bind to {} - retrying in {} milliseconds"
argument_list|,
name|listenAddress
operator|.
name|toString
argument_list|()
argument_list|,
name|bindRetryDelay
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|bindRetryDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|interruptedEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Wait for bind retry was interrupted - rethrowing BindException"
argument_list|)
expr_stmt|;
throw|throw
name|bindEx
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|0
operator|>=
name|this
operator|.
name|listenPort
condition|)
block|{
name|this
operator|.
name|listenPort
operator|=
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Opened TCP Listener on port {}"
argument_list|,
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**          * Accept TCP connections and create ClientSocketThreads for them          */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Accepting connections on port {}"
argument_list|,
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
literal|"MllpServerResource$ServerSocketThread - "
operator|+
name|serverSocket
operator|.
name|getLocalSocketAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|isInterrupted
argument_list|()
operator|&&
name|serverSocket
operator|.
name|isBound
argument_list|()
operator|&&
operator|!
name|serverSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|Socket
name|clientSocket
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clientSocket
operator|=
name|serverSocket
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
if|if
condition|(
name|raiseExceptionOnAcceptTimeout
condition|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceTimeoutException
argument_list|(
literal|"Timeout Accepting client connection"
argument_list|,
name|timeoutEx
argument_list|)
throw|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Timeout waiting for client connection"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"SocketException encountered accepting client connection - ignoring"
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|clientSocket
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|resetConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unexpected SocketException encountered accepting client connection"
argument_list|,
name|socketEx
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unexpected exception encountered accepting client connection"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|!=
name|clientSocket
condition|)
block|{
try|try
block|{
name|clientSocket
operator|.
name|setKeepAlive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setSoLinger
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|ClientSocketThread
name|clientSocketThread
init|=
operator|new
name|ClientSocketThread
argument_list|(
name|clientSocket
argument_list|)
decl_stmt|;
name|clientSocketThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clientSocketThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|clientSocketThreads
operator|.
name|add
argument_list|(
name|clientSocketThread
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpectedEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected exception encountered configuring client socket"
argument_list|)
expr_stmt|;
try|try
block|{
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ingoreEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exceptiong encountered closing client socket after attempting to accept connection"
argument_list|,
name|ingoreEx
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unexpected exception encountered configuring client socket"
argument_list|,
name|unexpectedEx
argument_list|)
throw|;
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"No longer accepting connections - closing TCP Listener on port {}"
argument_list|,
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Closed TCP Listener on port {}"
argument_list|,
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
DECL|method|getListenHost ()
specifier|public
name|String
name|getListenHost
parameter_list|()
block|{
return|return
name|listenHost
return|;
block|}
DECL|method|getListenPort ()
specifier|public
name|int
name|getListenPort
parameter_list|()
block|{
return|return
name|listenPort
return|;
block|}
DECL|method|getBacklog ()
specifier|public
name|int
name|getBacklog
parameter_list|()
block|{
return|return
name|backlog
return|;
block|}
DECL|method|getAcceptTimeout ()
specifier|public
name|int
name|getAcceptTimeout
parameter_list|()
block|{
return|return
name|acceptTimeout
return|;
block|}
comment|/**          * Enable/disable a timeout while waiting for a TCP connection, in milliseconds. With this option set to a          * non-zero timeout, the ServerSocketThread will block for only this amount of time while waiting for a tcp          * connection. If the timeout expires and raiseExceptionOnAcceptTimeout is set to true, a MllpJUnitResourceTimeoutException          * is raised. Otherwise, the ServerSocketThread will continue to poll for new TCP connections.          *          * @param acceptTimeout the timeout in milliseconds - zero is interpreted as an infinite timeout          */
DECL|method|setAcceptTimeout (int acceptTimeout)
specifier|public
name|void
name|setAcceptTimeout
parameter_list|(
name|int
name|acceptTimeout
parameter_list|)
block|{
name|this
operator|.
name|acceptTimeout
operator|=
name|acceptTimeout
expr_stmt|;
block|}
DECL|method|isRaiseExceptionOnAcceptTimeout ()
specifier|public
name|boolean
name|isRaiseExceptionOnAcceptTimeout
parameter_list|()
block|{
return|return
name|raiseExceptionOnAcceptTimeout
return|;
block|}
comment|/**          * Enable/Disable the generation of MllpJUnitResourceTimeoutException if the ServerSocket.accept()          * call raises a SocketTimeoutException.          *          * @param raiseExceptionOnAcceptTimeout true enables exceptions on an accept timeout          */
DECL|method|setRaiseExceptionOnAcceptTimeout (boolean raiseExceptionOnAcceptTimeout)
specifier|public
name|void
name|setRaiseExceptionOnAcceptTimeout
parameter_list|(
name|boolean
name|raiseExceptionOnAcceptTimeout
parameter_list|)
block|{
name|this
operator|.
name|raiseExceptionOnAcceptTimeout
operator|=
name|raiseExceptionOnAcceptTimeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|interrupt ()
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
for|for
control|(
name|ClientSocketThread
name|clientSocketThread
range|:
name|clientSocketThreads
control|)
block|{
name|clientSocketThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serverSocket
operator|!=
literal|null
operator|&&
name|serverSocket
operator|.
name|isBound
argument_list|()
operator|&&
operator|!
name|serverSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing server socket on interrupt"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Nested class that handles the established TCP connections      */
DECL|class|ClientSocketThread
class|class
name|ClientSocketThread
extends|extends
name|Thread
block|{
comment|/*         final char cCARRIAGE_RETURN = 13;         final char cLINE_FEED = 10;         final char cSEGMENT_DELIMITER = cCARRIAGE_RETURN;         final String sMESSAGE_TERMINATOR = "" + cCARRIAGE_RETURN + cLINE_FEED;         final byte bMLLP_ENVELOPE_START_OF_BLOCK = 0x0b;         final byte bMLLP_ENVELOPE_END_OF_BLOCK = 0x1c;         final byte bMLLP_ENVELOPE_END_OF_DATA = 0x0d;         final int iEND_OF_TRANSMISSION = -1;         */
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|clientSocket
name|Socket
name|clientSocket
decl_stmt|;
DECL|field|messageCounter
name|int
name|messageCounter
decl_stmt|;
DECL|method|ClientSocketThread (Socket clientSocket)
name|ClientSocketThread
parameter_list|(
name|Socket
name|clientSocket
parameter_list|)
block|{
name|this
operator|.
name|clientSocket
operator|=
name|clientSocket
expr_stmt|;
block|}
comment|/**          * Receives HL7 messages and replies with HL7 Acknowledgements.          *          * The exact behaviour of this method is very configurable, allowing simulation of varies          * error conditions.          */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|localAddress
init|=
name|clientSocket
operator|.
name|getLocalAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|remoteAddress
init|=
name|clientSocket
operator|.
name|getRemoteSocketAddress
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Handling Connection: {} -> {}"
argument_list|,
name|localAddress
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|isInterrupted
argument_list|()
operator|&&
literal|null
operator|!=
name|clientSocket
operator|&&
name|clientSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|InputStream
name|instream
decl_stmt|;
try|try
block|{
name|instream
operator|=
name|clientSocket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
if|if
condition|(
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Client socket was closed - ignoring exception"
argument_list|,
name|clientSocket
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unexpected IOException encounted getting input stream"
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpectedEx
parameter_list|)
block|{
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
literal|"Unexpected exception encounted getting input stream"
argument_list|,
name|unexpectedEx
argument_list|)
throw|;
block|}
name|String
name|parsedHL7Message
init|=
name|getMessage
argument_list|(
name|instream
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|parsedHL7Message
operator|&&
name|parsedHL7Message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
operator|++
name|messageCounter
expr_stmt|;
if|if
condition|(
name|disconnectBeforeAcknowledgement
argument_list|(
name|messageCounter
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Disconnecting before sending acknowledgement"
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|shutdownInput
argument_list|()
expr_stmt|;
name|clientSocket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
name|String
name|acknowledgmentMessage
decl_stmt|;
if|if
condition|(
name|sendApplicationErrorAcknowledgement
argument_list|(
name|messageCounter
argument_list|)
operator|||
name|sendApplicationErrorAcknowledgement
argument_list|(
name|parsedHL7Message
argument_list|)
condition|)
block|{
name|acknowledgmentMessage
operator|=
name|generateAcknowledgementMessage
argument_list|(
name|parsedHL7Message
argument_list|,
literal|"AE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sendApplicationRejectAcknowledgement
argument_list|(
name|messageCounter
argument_list|)
operator|||
name|sendApplicationRejectAcknowledgement
argument_list|(
name|parsedHL7Message
argument_list|)
condition|)
block|{
name|acknowledgmentMessage
operator|=
name|generateAcknowledgementMessage
argument_list|(
name|parsedHL7Message
argument_list|,
literal|"AR"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acknowledgmentMessage
operator|=
name|generateAcknowledgementMessage
argument_list|(
name|parsedHL7Message
argument_list|)
expr_stmt|;
block|}
name|BufferedOutputStream
name|outstream
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|clientSocket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sendOutOfBandData
argument_list|(
name|messageCounter
argument_list|)
condition|)
block|{
name|byte
index|[]
name|outOfBandDataBytes
init|=
literal|"Out Of Band Hl7MessageGenerator"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|outstream
operator|.
name|write
argument_list|(
name|outOfBandDataBytes
argument_list|,
literal|0
argument_list|,
name|outOfBandDataBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeStartOfBlock
argument_list|(
name|messageCounter
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NOT sending bMLLP_ENVELOPE_START_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outstream
operator|.
name|write
argument_list|(
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeAcknowledgement
argument_list|(
name|messageCounter
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"NOT sending Acknowledgement body"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Buffering Acknowledgement\n\t{}"
argument_list|,
name|acknowledgmentMessage
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|ackBytes
init|=
name|acknowledgmentMessage
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|outstream
operator|.
name|write
argument_list|(
name|ackBytes
argument_list|,
literal|0
argument_list|,
name|ackBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeEndOfBlock
argument_list|(
name|messageCounter
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NOT sending bMLLP_ENVELOPE_END_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outstream
operator|.
name|write
argument_list|(
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|excludeEndOfData
argument_list|(
name|messageCounter
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"NOT sending bMLLP_ENVELOPE_END_OF_DATA"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outstream
operator|.
name|write
argument_list|(
name|END_OF_DATA
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Writing Acknowledgement\n\t{}"
argument_list|,
name|acknowledgmentMessage
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|outstream
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|disconnectAfterAcknowledgement
argument_list|(
name|messageCounter
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Closing Client"
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|shutdownInput
argument_list|()
expr_stmt|;
name|clientSocket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Error whiling reading and writing to clientSocket"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Error whiling attempting to close to client Socket"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpJUnitResourceException
argument_list|(
name|errorMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Client Connection Finished: {} -> {}"
argument_list|,
name|localAddress
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
comment|/**          * Read a MLLP-Framed message          *          * @param anInputStream source input stream          * @return the MLLP payload          * @throws IOException when the underlying Java Socket calls raise these exceptions          */
comment|// TODO:  Enhance this to detect non-HL7 data (i.e. look for MSH after START_OF_BLOCK)
DECL|method|getMessage (InputStream anInputStream)
specifier|public
name|String
name|getMessage
parameter_list|(
name|InputStream
name|anInputStream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// TODO:  Enhance this to read a bunch of characters and log, rather than log them one at a time
name|boolean
name|waitingForStartOfBlock
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|waitingForStartOfBlock
condition|)
block|{
name|int
name|potentialStartCharacter
init|=
name|anInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|potentialStartCharacter
condition|)
block|{
case|case
name|END_OF_STREAM
case|:
return|return
literal|null
return|;
case|case
name|START_OF_BLOCK
case|:
name|waitingForStartOfBlock
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"START_OF_BLOCK character has not been received.  Out-of-band character received: {}"
argument_list|,
name|potentialStartCharacter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
if|if
condition|(
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Client socket closed while waiting for MLLP_ENVELOPE_START_OF_BLOCK"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clientSocket
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"SocketException encountered while waiting for MLLP_ENVELOPE_START_OF_BLOCK"
argument_list|)
expr_stmt|;
name|resetConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to read from socket stream when expected bMLLP_ENVELOPE_START_OF_BLOCK - resetting connection "
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
name|resetConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|boolean
name|endOfMessage
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|parsedMessage
init|=
operator|new
name|StringBuilder
argument_list|(
name|anInputStream
operator|.
name|available
argument_list|()
operator|+
literal|10
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|endOfMessage
condition|)
block|{
name|int
name|characterReceived
init|=
name|anInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|characterReceived
condition|)
block|{
case|case
name|START_OF_BLOCK
case|:
name|log
operator|.
name|error
argument_list|(
literal|"Received START_OF_BLOCK before END_OF_DATA.  Discarding data: {}"
argument_list|,
name|parsedMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|END_OF_STREAM
case|:
name|log
operator|.
name|error
argument_list|(
literal|"Received END_OF_STREAM without END_OF_DATA.  Discarding data: {}"
argument_list|,
name|parsedMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
case|case
name|END_OF_BLOCK
case|:
name|characterReceived
operator|=
name|anInputStream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|characterReceived
operator|!=
name|END_OF_DATA
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Received {} when expecting END_OF_DATA after END_OF_BLOCK.  Discarding Hl7MessageGenerator: {}"
argument_list|,
name|characterReceived
argument_list|,
name|parsedMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|endOfMessage
operator|=
literal|true
expr_stmt|;
break|break;
default|default:
name|parsedMessage
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|characterReceived
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|parsedMessage
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**          * Generates a HL7 Application Accept Acknowledgement          *          * @param hl7Message HL7 message that is being acknowledged          * @return a HL7 Application Accept Acknowlegdement          */
DECL|method|generateAcknowledgementMessage (String hl7Message)
specifier|private
name|String
name|generateAcknowledgementMessage
parameter_list|(
name|String
name|hl7Message
parameter_list|)
block|{
return|return
name|generateAcknowledgementMessage
argument_list|(
name|hl7Message
argument_list|,
literal|"AA"
argument_list|)
return|;
block|}
comment|/**          * Generates a HL7 Application Acknowledgement          *          * @param hl7Message          HL7 message that is being acknowledged          * @param acknowledgementCode AA, AE or AR          * @return a HL7 Application Acknowledgement          */
DECL|method|generateAcknowledgementMessage (String hl7Message, String acknowledgementCode)
specifier|private
name|String
name|generateAcknowledgementMessage
parameter_list|(
name|String
name|hl7Message
parameter_list|,
name|String
name|acknowledgementCode
parameter_list|)
block|{
specifier|final
name|String
name|defaulNackMessage
init|=
literal|"MSH|^~\\&|||||||NACK||P|2.2"
operator|+
name|SEGMENT_DELIMITER
operator|+
literal|"MSA|AR|"
operator|+
name|SEGMENT_DELIMITER
operator|+
name|MESSAGE_TERMINATOR
decl_stmt|;
if|if
condition|(
name|hl7Message
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid HL7 message for parsing operation. Please check your inputs"
argument_list|)
expr_stmt|;
return|return
name|defaulNackMessage
return|;
block|}
if|if
condition|(
operator|!
operator|(
literal|"AA"
operator|.
name|equals
argument_list|(
name|acknowledgementCode
argument_list|)
operator|||
literal|"AE"
operator|.
name|equals
argument_list|(
name|acknowledgementCode
argument_list|)
operator|||
literal|"AR"
operator|.
name|equals
argument_list|(
name|acknowledgementCode
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Acknowledgemnt Code must be AA, AE or AR: "
operator|+
name|acknowledgementCode
argument_list|)
throw|;
block|}
name|String
name|messageControlId
decl_stmt|;
name|int
name|endOfMshSegment
init|=
name|hl7Message
operator|.
name|indexOf
argument_list|(
name|SEGMENT_DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|!=
name|endOfMshSegment
condition|)
block|{
name|String
name|mshSegment
init|=
name|hl7Message
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|endOfMshSegment
argument_list|)
decl_stmt|;
name|char
name|fieldSeparator
init|=
name|mshSegment
operator|.
name|charAt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|fieldSeparatorPattern
init|=
name|Pattern
operator|.
name|quote
argument_list|(
literal|""
operator|+
name|fieldSeparator
argument_list|)
decl_stmt|;
name|String
index|[]
name|mshFields
init|=
name|mshSegment
operator|.
name|split
argument_list|(
name|fieldSeparatorPattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|mshFields
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to split MSH Segment into fields"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|ackBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|mshSegment
operator|.
name|length
argument_list|()
operator|+
literal|25
argument_list|)
decl_stmt|;
comment|// Build the MSH Segment
name|ackBuilder
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|0
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|1
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|4
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|5
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|2
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|3
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|6
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|7
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
literal|"ACK"
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|8
index|]
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|<
name|mshFields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ackBuilder
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Empty fields at the end are not preserved by String.split, so preserve them
name|int
name|emptyFieldIndex
init|=
name|mshSegment
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|fieldSeparator
operator|==
name|mshSegment
operator|.
name|charAt
argument_list|(
name|mshSegment
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ackBuilder
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
expr_stmt|;
while|while
condition|(
name|emptyFieldIndex
operator|>=
literal|1
operator|&&
name|mshSegment
operator|.
name|charAt
argument_list|(
name|emptyFieldIndex
argument_list|)
operator|==
name|mshSegment
operator|.
name|charAt
argument_list|(
name|emptyFieldIndex
operator|-
literal|1
argument_list|)
condition|)
block|{
name|ackBuilder
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
expr_stmt|;
operator|--
name|emptyFieldIndex
expr_stmt|;
block|}
block|}
name|ackBuilder
operator|.
name|append
argument_list|(
name|SEGMENT_DELIMITER
argument_list|)
expr_stmt|;
comment|// Build the MSA Segment
name|ackBuilder
operator|.
name|append
argument_list|(
literal|"MSA"
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|acknowledgementCode
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|mshFields
index|[
literal|9
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|fieldSeparator
argument_list|)
operator|.
name|append
argument_list|(
name|SEGMENT_DELIMITER
argument_list|)
expr_stmt|;
comment|// Terminate the message
name|ackBuilder
operator|.
name|append
argument_list|(
name|MESSAGE_TERMINATOR
argument_list|)
expr_stmt|;
return|return
name|ackBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to find the end of the  MSH Segment"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|interrupt ()
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
if|if
condition|(
name|clientSocket
operator|!=
literal|null
operator|&&
name|clientSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|clientSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing client socket on interrput"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

