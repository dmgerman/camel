begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|stub
operator|.
name|tcp
operator|.
name|SocketStub
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for the overridden methods in the MllpSocketBuffer class.  */
end_comment

begin_class
DECL|class|MllpSocketBufferWriteTest
specifier|public
class|class
name|MllpSocketBufferWriteTest
extends|extends
name|SocketBufferTestSupport
block|{
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteIntWithStartOfBlock ()
specifier|public
name|void
name|testWriteIntWithStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteIntWithEndOfBlock ()
specifier|public
name|void
name|testWriteIntWithEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteIntWithEndOfData ()
specifier|public
name|void
name|testWriteIntWithEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithNullArray ()
specifier|public
name|void
name|testWriteBytesWithNullArray
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithEmptyArray ()
specifier|public
name|void
name|testWriteBytesWithEmptyArray
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithFullEnvelope ()
specifier|public
name|void
name|testWriteBytesWithFullEnvelope
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|"BLAH"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithoutEnvelope ()
specifier|public
name|void
name|testWriteBytesWithoutEnvelope
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithWithoutStartOfBlock ()
specifier|public
name|void
name|testWriteBytesWithWithoutStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|"BLAH"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithWithoutEndOfBlock ()
specifier|public
name|void
name|testWriteBytesWithWithoutEndOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|"BLAH"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithWithoutEndOfData ()
specifier|public
name|void
name|testWriteBytesWithWithoutEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|"BLAH"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteBytesWithWithoutEndOfBlockOrEndOfData ()
specifier|public
name|void
name|testWriteBytesWithWithoutEndOfBlockOrEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
name|buildTestBytes
argument_list|(
literal|"BLAH"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteByteArraySliceWithNullArray ()
specifier|public
name|void
name|testWriteByteArraySliceWithNullArray
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteByteArraySliceWithEmptyArray ()
specifier|public
name|void
name|testWriteByteArraySliceWithEmptyArray
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|instance
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|instance
operator|.
name|endOfBlockIndex
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteByteArraySliceWithNegativeOffset ()
specifier|public
name|void
name|testWriteByteArraySliceWithNegativeOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
block|{
name|instance
operator|.
name|write
argument_list|(
name|payload
argument_list|,
operator|-
literal|5
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expectedEx
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"write(byte[4], offset[-5], writeCount[4]) - offset is less than zero"
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteByteArraySliceWithOffsetGreaterThanLength ()
specifier|public
name|void
name|testWriteByteArraySliceWithOffsetGreaterThanLength
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
block|{
name|instance
operator|.
name|write
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
operator|+
literal|1
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expectedEx
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"write(byte[4], offset[5], writeCount[4]) - offset is greater than write count"
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteByteArraySliceWithNegativeLength ()
specifier|public
name|void
name|testWriteByteArraySliceWithNegativeLength
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expectedEx
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"write(byte[4], offset[0], writeCount[-5]) - write count is less than zero"
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testWriteByteArraySliceWithLengthGreaterThanAvailable ()
specifier|public
name|void
name|testWriteByteArraySliceWithLengthGreaterThanAvailable
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
block|{
name|instance
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expectedEx
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"write(byte[4], offset[0], writeCount[5]) - write count is greater than length of the source byte[]"
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expectedEx
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"write(byte[4], offset[1], writeCount[4]) - offset plus write count<5> is greater than length of the source byte[]"
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|2
argument_list|,
name|payload
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should have been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|expectedEx
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"write(byte[4], offset[2], writeCount[3]) - offset plus write count<5> is greater than length of the source byte[]"
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testEnsureCapacityWithNegativeRequiredAvailability ()
specifier|public
name|void
name|testEnsureCapacityWithNegativeRequiredAvailability
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|instance
operator|.
name|MIN_BUFFER_SIZE
argument_list|,
name|instance
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|ensureCapacity
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|instance
operator|.
name|MIN_BUFFER_SIZE
argument_list|,
name|instance
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testEnsureCapacityWithOutOfRangeRequiredAvailability ()
specifier|public
name|void
name|testEnsureCapacityWithOutOfRangeRequiredAvailability
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|instance
operator|.
name|MIN_BUFFER_SIZE
argument_list|,
name|instance
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|instance
operator|.
name|ensureCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expectedEx
parameter_list|)
block|{
name|String
name|expectedMessage
init|=
literal|"Cannot increase the buffer size<2048> in order to increase the available capacity from<2048> to<2147483647>"
operator|+
literal|" because the required buffer size<2147483647> exceeds the maximum buffer size<1073741824>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|instance
operator|.
name|ensureCapacity
argument_list|(
name|instance
operator|.
name|MAX_BUFFER_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expectedEx
parameter_list|)
block|{
name|String
name|expectedMessage
init|=
literal|"Cannot increase the buffer size<2048> in order to increase the available capacity from<2048> to<1073741825>"
operator|+
literal|" because the required buffer size<1073741825> exceeds the maximum buffer size<1073741824>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|instance
operator|.
name|write
argument_list|(
literal|"BLAH"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|ensureCapacity
argument_list|(
name|instance
operator|.
name|MAX_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expectedEx
parameter_list|)
block|{
name|String
name|expectedMessage
init|=
literal|"Cannot increase the buffer size<2048> in order to increase the available capacity from<2044> to<1073741824>"
operator|+
literal|" because the required buffer size<1073741828> exceeds the maximum buffer size<1073741824>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
DECL|method|testEnsureCapacityWithAlreadyAllocateMaxBufferSize ()
specifier|public
name|void
name|testEnsureCapacityWithAlreadyAllocateMaxBufferSize
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|instance
operator|.
name|MIN_BUFFER_SIZE
argument_list|,
name|instance
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|instance
operator|.
name|ensureCapacity
argument_list|(
name|instance
operator|.
name|MAX_BUFFER_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
name|instance
operator|.
name|ensureCapacity
argument_list|(
name|instance
operator|.
name|MAX_BUFFER_SIZE
operator|+
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|expectedEx
parameter_list|)
block|{
name|String
name|expectedMessage
init|=
literal|"Cannot increase the buffer size from<1073741824> to<1073741825> in order to increase the available capacity"
operator|+
literal|" from<1073741824> to<1073741825> because the buffer is already the maximum size<1073741824>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMessage
argument_list|,
name|expectedEx
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Description of test.      *      * @throws Exception in the event of a test error.      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SocketTimeoutException
operator|.
name|class
argument_list|)
DECL|method|testReadFrom ()
specifier|public
name|void
name|testReadFrom
parameter_list|()
throws|throws
name|Exception
block|{
name|SocketStub
name|socketStub
init|=
operator|new
name|SocketStub
argument_list|()
decl_stmt|;
name|socketStub
operator|.
name|inputStreamStub
operator|.
name|addPacket
argument_list|(
literal|"FOO"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|addPacket
argument_list|(
literal|"BAR"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setReceiveTimeout
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setReadTimeout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|instance
operator|.
name|readFrom
argument_list|(
name|socketStub
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"FOOBAR"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|instance
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

