begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpJUnitResourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpServerResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|mllp
operator|.
name|Hl7TestMessageGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MllpTcpClientProducerIdleConnectionTimeoutTest
specifier|public
class|class
name|MllpTcpClientProducerIdleConnectionTimeoutTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|CONNECT_TIMEOUT
specifier|static
specifier|final
name|int
name|CONNECT_TIMEOUT
init|=
literal|500
decl_stmt|;
DECL|field|RECEIVE_TIMEOUT
specifier|static
specifier|final
name|int
name|RECEIVE_TIMEOUT
init|=
literal|1000
decl_stmt|;
DECL|field|READ_TIMEOUT
specifier|static
specifier|final
name|int
name|READ_TIMEOUT
init|=
literal|500
decl_stmt|;
DECL|field|IDLE_TIMEOUT
specifier|static
specifier|final
name|int
name|IDLE_TIMEOUT
init|=
name|RECEIVE_TIMEOUT
operator|*
literal|3
decl_stmt|;
annotation|@
name|Rule
DECL|field|mllpServer
specifier|public
name|MllpServerResource
name|mllpServer
init|=
operator|new
name|MllpServerResource
argument_list|(
literal|"localhost"
argument_list|,
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"direct://source"
argument_list|)
DECL|field|source
name|ProducerTemplate
name|source
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://complete"
argument_list|)
DECL|field|complete
name|MockEndpoint
name|complete
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://write-ex"
argument_list|)
DECL|field|writeEx
name|MockEndpoint
name|writeEx
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://receive-ex"
argument_list|)
DECL|field|receiveEx
name|MockEndpoint
name|receiveEx
decl_stmt|;
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|(
name|DefaultCamelContext
operator|)
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setUseMDCLogging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
name|String
name|routeId
init|=
literal|"mllp-sender"
decl_stmt|;
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|onException
argument_list|(
name|MllpWriteException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
name|writeEx
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
name|routeId
argument_list|,
literal|"Write Error"
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|onException
argument_list|(
name|MllpAcknowledgementReceiveException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
name|receiveEx
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
name|routeId
argument_list|,
literal|"Receive Error"
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|from
argument_list|(
name|source
operator|.
name|getDefaultEndpoint
argument_list|()
argument_list|)
operator|.
name|routeId
argument_list|(
name|routeId
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Sending Message"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"mllp://%s:%d?connectTimeout=%d&receiveTimeout=%d&readTimeout=%d&idleTimeout=%s"
argument_list|,
name|mllpServer
operator|.
name|getListenHost
argument_list|()
argument_list|,
name|mllpServer
operator|.
name|getListenPort
argument_list|()
argument_list|,
name|CONNECT_TIMEOUT
argument_list|,
name|RECEIVE_TIMEOUT
argument_list|,
name|READ_TIMEOUT
argument_list|,
name|IDLE_TIMEOUT
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Received Acknowledgement"
argument_list|)
operator|.
name|to
argument_list|(
name|complete
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|MllpJUnitResourceException
operator|.
name|class
argument_list|)
DECL|method|testIdleConnectionTimeout ()
specifier|public
name|void
name|testIdleConnectionTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|complete
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|writeEx
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|receiveEx
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NotifyBuilder
name|done
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenCompleted
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Need to send one message to get the connection established
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|IDLE_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have completed two exchanges"
argument_list|,
name|done
operator|.
name|matches
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
call|(
name|long
call|)
argument_list|(
name|IDLE_TIMEOUT
operator|*
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|checkClientConnections
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReconnectAfterIdleConnectionTimeout ()
specifier|public
name|void
name|testReconnectAfterIdleConnectionTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|complete
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|writeEx
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|receiveEx
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|NotifyBuilder
name|done
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenCompleted
argument_list|(
literal|2
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Need to send one message to get the connection established
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|IDLE_TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have completed two exchanges"
argument_list|,
name|done
operator|.
name|matches
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
call|(
name|long
call|)
argument_list|(
name|IDLE_TIMEOUT
operator|*
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpServer
operator|.
name|checkClientConnections
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should receive and exception for the closed connection"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpJUnitResourceException
name|expectedEx
parameter_list|)
block|{
comment|// Eat this
block|}
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Breakpoint"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

