begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit
operator|.
name|rule
operator|.
name|mllp
operator|.
name|MllpServerResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|mllp
operator|.
name|Hl7TestMessageGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TcpClientProducerEndOfDataAndValidationTestSupport
specifier|public
specifier|abstract
class|class
name|TcpClientProducerEndOfDataAndValidationTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|RECEIVE_TIMEOUT
specifier|static
specifier|final
name|int
name|RECEIVE_TIMEOUT
init|=
literal|1000
decl_stmt|;
DECL|field|READ_TIMEOUT
specifier|static
specifier|final
name|int
name|READ_TIMEOUT
init|=
literal|500
decl_stmt|;
DECL|field|TEST_MESSAGE
specifier|static
specifier|final
name|String
name|TEST_MESSAGE
init|=
literal|"MSH|^~\\&|ADT|EPIC|JCAPS|CC|20161206193919|RISTECH|ADT^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"EVN|A08|20150107161440||REG_UPDATE_SEND_VISIT_MESSAGES_ON_PATIENT_CHANGES|RISTECH^RADIOLOGY^TECHNOLOGIST^^^^^^UCLA^^^^^RRMC||"
operator|+
literal|'\r'
operator|+
literal|"PID|1|2100355^^^MRN^MRN|2100355^^^MRN^MRN||MDCLS9^MC9||19700109|F||U|111 HOVER STREET^^LOS ANGELES^CA^90032^USA^P^^LOS ANGELE|LOS ANGELE|"
operator|+
literal|"(310)725-6952^P^PH^^^310^7256952||ENGLISH|U||60000013647|565-33-2222|||U||||||||N||"
operator|+
literal|'\r'
operator|+
literal|"PD1|||UCLA HEALTH SYSTEM^^10|10002116^ADAMS^JOHN^D^^^^^EPIC^^^^PROVID||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"NK1|1|DOE^MC9^^|OTH|^^^^^USA|(310)888-9999^^^^^310^8889999|(310)999-2222^^^^^310^9992222|Emergency Contact 1|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV1|1|OUTPATIENT|RR CT^^^1000^^^^^^^DEPID|EL|||017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID|017511^TOBIAS^JONATHAN^^^^^^EPIC^^^^PROVID||||||"
operator|+
literal|"CLR|||||60000013647|SELF|||||||||||||||||||||HOV_CONF|^^^1000^^^^^^^||20150107161438||||||||||"
operator|+
literal|'\r'
operator|+
literal|"PV2||||||||20150107161438||||CT BRAIN W WO CONTRAST||||||||||N|||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"ZPV||||||||||||20150107161438|||||||||"
operator|+
literal|'\r'
operator|+
literal|"AL1|1||33361^NO KNOWN ALLERGIES^^NOTCOMPUTRITION^NO KNOWN ALLERGIES^EXTELG||||||"
operator|+
literal|'\r'
operator|+
literal|"DG1|1|DX|784.0^Headache^DX|Headache||VISIT"
operator|+
literal|'\r'
operator|+
literal|"GT1|1|1000235129|MDCLS9^MC9^^||111 HOVER STREET^^LOS ANGELES^CA^90032^USA^^^LOS ANGELE|(310)725-6952^^^^^310^7256952||19700109|F|P/F|SLF|"
operator|+
literal|"565-33-2222|||||^^^^^USA|||UNKNOWN|||||||||||||||||||||||||||||"
operator|+
literal|'\r'
operator|+
literal|"UB2||||||||"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
DECL|field|EXPECTED_AA
specifier|static
specifier|final
name|String
name|EXPECTED_AA
init|=
literal|"MSH|^~\\&|JCAPS|CC|ADT|EPIC|20161206193919|RISTECH|ACK^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"MSA|AA|00001|"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
DECL|field|EXPECTED_AR
specifier|static
specifier|final
name|String
name|EXPECTED_AR
init|=
literal|"MSH|^~\\&|JCAPS|CC|ADT|EPIC|20161206193919|RISTECH|ACK^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"MSA|AR|00001|"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
DECL|field|EXPECTED_AE
specifier|static
specifier|final
name|String
name|EXPECTED_AE
init|=
literal|"MSH|^~\\&|JCAPS|CC|ADT|EPIC|20161206193919|RISTECH|ACK^A08|00001|D|2.3^^|||||||"
operator|+
literal|'\r'
operator|+
literal|"MSA|AE|00001|"
operator|+
literal|'\r'
operator|+
literal|'\n'
decl_stmt|;
annotation|@
name|Rule
DECL|field|mllpServer
specifier|public
name|MllpServerResource
name|mllpServer
init|=
operator|new
name|MllpServerResource
argument_list|(
literal|"localhost"
argument_list|,
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"direct://source"
argument_list|)
DECL|field|source
specifier|protected
name|ProducerTemplate
name|source
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://aa-ack"
argument_list|)
DECL|field|aa
specifier|protected
name|MockEndpoint
name|aa
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://ae-nack"
argument_list|)
DECL|field|ae
specifier|protected
name|MockEndpoint
name|ae
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://ar-nack"
argument_list|)
DECL|field|ar
specifier|protected
name|MockEndpoint
name|ar
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://invalid-ack"
argument_list|)
DECL|field|invalid
specifier|protected
name|MockEndpoint
name|invalid
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://ack-receive-error"
argument_list|)
DECL|field|ackReceiveError
specifier|protected
name|MockEndpoint
name|ackReceiveError
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://ack-timeout-error"
argument_list|)
DECL|field|ackTimeoutError
specifier|protected
name|MockEndpoint
name|ackTimeoutError
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock://failed"
argument_list|)
DECL|field|failed
specifier|protected
name|MockEndpoint
name|failed
decl_stmt|;
DECL|field|expectedAACount
specifier|protected
name|int
name|expectedAACount
decl_stmt|;
DECL|field|expectedAECount
specifier|protected
name|int
name|expectedAECount
decl_stmt|;
DECL|field|expectedARCount
specifier|protected
name|int
name|expectedARCount
decl_stmt|;
DECL|field|expectedInvalidCount
specifier|protected
name|int
name|expectedInvalidCount
decl_stmt|;
DECL|field|expectedReceiveErrorCount
specifier|protected
name|int
name|expectedReceiveErrorCount
decl_stmt|;
DECL|field|expectedTimeoutCount
specifier|protected
name|int
name|expectedTimeoutCount
decl_stmt|;
DECL|field|expectedFailedCount
specifier|protected
name|int
name|expectedFailedCount
decl_stmt|;
DECL|method|requireEndOfData ()
specifier|abstract
name|boolean
name|requireEndOfData
parameter_list|()
function_decl|;
DECL|method|validatePayload ()
specifier|abstract
name|boolean
name|validatePayload
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|(
name|DefaultCamelContext
operator|)
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setUseMDCLogging
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
name|String
name|routeId
init|=
literal|"mllp-sender"
decl_stmt|;
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|onException
argument_list|(
name|MllpApplicationRejectAcknowledgementException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
name|ar
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
name|routeId
argument_list|,
literal|"AR Acknowledgement"
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|MllpApplicationErrorAcknowledgementException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
name|ae
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
name|routeId
argument_list|,
literal|"AE Acknowledgement"
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|MllpAcknowledgementReceiveException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
name|ackReceiveError
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
name|routeId
argument_list|,
literal|"Acknowledgement Receive failed"
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|MllpAcknowledgementTimeoutException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
name|ackTimeoutError
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
name|routeId
argument_list|,
literal|"Acknowledgement Receive timeout"
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|MllpInvalidAcknowledgementException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
name|invalid
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|ERROR
argument_list|,
name|routeId
argument_list|,
literal|"Invalid Acknowledgement"
argument_list|)
expr_stmt|;
name|onCompletion
argument_list|()
operator|.
name|onFailureOnly
argument_list|()
operator|.
name|to
argument_list|(
name|failed
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|DEBUG
argument_list|,
name|routeId
argument_list|,
literal|"Exchange failed"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|source
operator|.
name|getDefaultEndpoint
argument_list|()
argument_list|)
operator|.
name|routeId
argument_list|(
name|routeId
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Sending Message"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"mllp://%s:%d?receiveTimeout=%d&readTimeout=%d&validatePayload=%b&requireEndOfData=%b"
argument_list|,
name|mllpServer
operator|.
name|getListenHost
argument_list|()
argument_list|,
name|mllpServer
operator|.
name|getListenPort
argument_list|()
argument_list|,
name|RECEIVE_TIMEOUT
argument_list|,
name|READ_TIMEOUT
argument_list|,
name|validatePayload
argument_list|()
argument_list|,
name|requireEndOfData
argument_list|()
argument_list|)
operator|.
name|log
argument_list|(
name|LoggingLevel
operator|.
name|INFO
argument_list|,
name|routeId
argument_list|,
literal|"Received Acknowledgement"
argument_list|)
operator|.
name|to
argument_list|(
name|aa
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|setExpectedCounts ()
specifier|protected
name|void
name|setExpectedCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|aa
operator|.
name|expectedMessageCount
argument_list|(
name|expectedAACount
argument_list|)
expr_stmt|;
name|ae
operator|.
name|expectedMessageCount
argument_list|(
name|expectedAECount
argument_list|)
expr_stmt|;
name|ar
operator|.
name|expectedMessageCount
argument_list|(
name|expectedARCount
argument_list|)
expr_stmt|;
name|ackReceiveError
operator|.
name|expectedMessageCount
argument_list|(
name|expectedReceiveErrorCount
argument_list|)
expr_stmt|;
name|ackTimeoutError
operator|.
name|expectedMessageCount
argument_list|(
name|expectedTimeoutCount
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|expectedMessageCount
argument_list|(
name|expectedInvalidCount
argument_list|)
expr_stmt|;
name|failed
operator|.
name|expectedMessageCount
argument_list|(
name|expectedFailedCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendSingleMessageWithEndOfDataByte ()
specifier|public
name|void
name|testSendSingleMessageWithEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|aa
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendMultipleMessagesWithEndOfDataByte ()
specifier|public
name|void
name|testSendMultipleMessagesWithEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedAACount
operator|=
literal|5
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|expectedAACount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedAACount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedAACount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSendSingleMessageWithoutEndOfData ()
specifier|public
specifier|abstract
name|void
name|testSendSingleMessageWithoutEndOfData
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runSendSingleMessageWithoutEndOfData ()
specifier|protected
name|void
name|runSendSingleMessageWithoutEndOfData
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpServer
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendMultipleMessagesWithoutEndOfDataByte ()
specifier|public
specifier|abstract
name|void
name|testSendMultipleMessagesWithoutEndOfDataByte
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runSendMultipleMessagesWithoutEndOfDataByte ()
specifier|protected
name|void
name|runSendMultipleMessagesWithoutEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|expectedAACount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedAACount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedAACount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|runSendMultipleMessagesWithoutEndOfDataByte (MockEndpoint expectedEndpoint)
specifier|protected
name|void
name|runSendMultipleMessagesWithoutEndOfDataByte
parameter_list|(
name|MockEndpoint
name|expectedEndpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|3
decl_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|expectedEndpoint
operator|.
name|expectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoResponseOnFirstMessage ()
specifier|public
name|void
name|testNoResponseOnFirstMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|5
decl_stmt|;
name|expectedAACount
operator|=
name|sendMessageCount
operator|-
literal|1
expr_stmt|;
name|expectedTimeoutCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|disableResponse
argument_list|()
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege 1 not completed"
argument_list|,
name|complete
index|[
literal|0
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|enableResponse
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNoResponseOnNthMessage ()
specifier|public
name|void
name|testNoResponseOnNthMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|3
decl_stmt|;
name|expectedAACount
operator|=
name|sendMessageCount
operator|-
literal|1
expr_stmt|;
name|expectedTimeoutCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|disableResponse
argument_list|(
name|sendMessageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testApplicationAcceptAcknowledgement ()
specifier|public
name|void
name|testApplicationAcceptAcknowledgement
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|aa
operator|.
name|expectedBodiesReceived
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
name|aa
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"AA"
argument_list|)
expr_stmt|;
name|aa
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|EXPECTED_AA
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|aa
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|EXPECTED_AA
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationRejectAcknowledgement ()
specifier|public
name|void
name|testApplicationRejectAcknowledgement
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|ar
operator|.
name|expectedBodiesReceived
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
name|ar
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"AR"
argument_list|)
expr_stmt|;
name|ar
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|EXPECTED_AR
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ar
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|EXPECTED_AR
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|setSendApplicationRejectAcknowledgementModulus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationErrorAcknowledgement ()
specifier|public
name|void
name|testApplicationErrorAcknowledgement
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|ae
operator|.
name|expectedBodiesReceived
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
name|ae
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"AE"
argument_list|)
expr_stmt|;
name|ae
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|EXPECTED_AE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ae
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|EXPECTED_AE
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|setSendApplicationErrorAcknowledgementModulus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyAcknowledgement ()
specifier|public
specifier|abstract
name|void
name|testEmptyAcknowledgement
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runEmptyAcknowledgement (MockEndpoint expectedEndpoint)
specifier|protected
name|void
name|runEmptyAcknowledgement
parameter_list|(
name|MockEndpoint
name|expectedEndpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|expectedEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|setExcludeAcknowledgementModulus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidAcknowledgement ()
specifier|public
specifier|abstract
name|void
name|testInvalidAcknowledgement
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runInvalidAcknowledgement (MockEndpoint expectedEndpoint)
specifier|protected
name|void
name|runInvalidAcknowledgement
parameter_list|(
name|MockEndpoint
name|expectedEndpoint
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|badAcknowledgement
init|=
literal|"A VERY BAD ACKNOWLEDGEMENT"
decl_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|expectedEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expectedEndpoint
operator|.
name|expectedBodiesReceived
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
name|expectedEndpoint
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|badAcknowledgement
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|expectedEndpoint
operator|.
name|expectedHeaderReceived
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|badAcknowledgement
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|setAcknowledgementString
argument_list|(
name|badAcknowledgement
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingEndOfDataByte ()
specifier|public
specifier|abstract
name|void
name|testMissingEndOfDataByte
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * NOTE:  Set expectation variables BEFORE calling this method.      * @throws Exception      */
DECL|method|runMissingEndOfDataByte ()
specifier|protected
name|void
name|runMissingEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|3
decl_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
name|sendMessageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAcknowledgementReceiveTimeout ()
specifier|public
name|void
name|testAcknowledgementReceiveTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|ackTimeoutError
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|disableResponse
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAcknowledgementReadTimeout ()
specifier|public
name|void
name|testAcknowledgementReadTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|ackTimeoutError
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mllpServer
operator|.
name|setDelayDuringAcknowledgement
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingEndOfBlockByte ()
specifier|public
name|void
name|testMissingEndOfBlockByte
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendMessageCount
init|=
literal|3
decl_stmt|;
name|expectedAACount
operator|=
name|sendMessageCount
operator|-
literal|1
expr_stmt|;
name|expectedTimeoutCount
operator|=
literal|1
expr_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|sendMessageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|setExcludeEndOfBlockModulus
argument_list|(
name|sendMessageCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendMessageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSendMultipleMessagesWithoutSomeEndOfDataByte ()
specifier|public
specifier|abstract
name|void
name|testSendMultipleMessagesWithoutSomeEndOfDataByte
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runSendMultipleMessagesWithoutSomeEndOfDataByte ()
specifier|protected
name|void
name|runSendMultipleMessagesWithoutSomeEndOfDataByte
parameter_list|()
throws|throws
name|Exception
block|{
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|int
name|messageCount
init|=
name|expectedAACount
operator|+
name|expectedTimeoutCount
decl_stmt|;
name|NotifyBuilder
index|[]
name|complete
init|=
operator|new
name|NotifyBuilder
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|complete
index|[
name|i
index|]
operator|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
name|mllpServer
operator|.
name|setExcludeEndOfDataModulus
argument_list|(
name|messageCount
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|source
operator|.
name|sendBody
argument_list|(
name|Hl7TestMessageGenerator
operator|.
name|generateMessage
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Messege "
operator|+
name|i
operator|+
literal|" not completed"
argument_list|,
name|complete
index|[
name|i
index|]
operator|.
name|matches
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidAcknowledgementContainingEmbeddedStartOfBlock ()
specifier|public
specifier|abstract
name|void
name|testInvalidAcknowledgementContainingEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * NOTE:  Set expectation variables BEFORE calling this method.      * @throws Exception      */
DECL|method|runInvalidAcknowledgementContainingEmbeddedStartOfBlock ()
specifier|public
name|void
name|runInvalidAcknowledgementContainingEmbeddedStartOfBlock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|badAcknowledgement
init|=
name|EXPECTED_AA
operator|.
name|replaceFirst
argument_list|(
literal|"RISTECH"
argument_list|,
literal|"RISTECH"
operator|+
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
decl_stmt|;
name|setExpectedCounts
argument_list|()
expr_stmt|;
name|mllpServer
operator|.
name|setAcknowledgementString
argument_list|(
name|badAcknowledgement
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidAcknowledgementContainingEmbeddedEndOfBlockByte ()
specifier|public
specifier|abstract
name|void
name|testInvalidAcknowledgementContainingEmbeddedEndOfBlockByte
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * NOTE:  Set expectation variables BEFORE calling this method.      * @throws Exception      */
DECL|method|runInvalidAcknowledgementContainingEmbeddedEndOfBlockByte ()
specifier|protected
name|void
name|runInvalidAcknowledgementContainingEmbeddedEndOfBlockByte
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|badAcknowledgement
init|=
name|EXPECTED_AA
operator|.
name|replaceFirst
argument_list|(
literal|"RISTECH"
argument_list|,
literal|"RISTECH"
operator|+
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
argument_list|)
decl_stmt|;
name|mllpServer
operator|.
name|setAcknowledgementString
argument_list|(
name|badAcknowledgement
argument_list|)
expr_stmt|;
name|source
operator|.
name|sendBody
argument_list|(
name|TEST_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

