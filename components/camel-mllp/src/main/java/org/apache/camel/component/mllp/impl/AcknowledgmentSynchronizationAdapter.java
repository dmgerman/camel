begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpAcknowledgementDeliveryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpInvalidAcknowledgementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|mllp
operator|.
name|Hl7AcknowledgementGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|mllp
operator|.
name|Hl7AcknowledgementGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|SynchronizationAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_AUTO_ACKNOWLEDGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_CLOSE_CONNECTION_AFTER_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_CLOSE_CONNECTION_BEFORE_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RESET_CONNECTION_AFTER_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RESET_CONNECTION_BEFORE_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|SEGMENT_DELIMITER
import|;
end_import

begin_class
DECL|class|AcknowledgmentSynchronizationAdapter
specifier|public
class|class
name|AcknowledgmentSynchronizationAdapter
extends|extends
name|SynchronizationAdapter
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|originalHl7MessageBytes
specifier|final
name|byte
index|[]
name|originalHl7MessageBytes
decl_stmt|;
DECL|field|acknowledgementGenerator
name|Hl7AcknowledgementGenerator
name|acknowledgementGenerator
init|=
operator|new
name|Hl7AcknowledgementGenerator
argument_list|()
decl_stmt|;
DECL|field|clientSocket
specifier|private
name|Socket
name|clientSocket
decl_stmt|;
DECL|method|AcknowledgmentSynchronizationAdapter (Socket clientSocket, byte[] hl7MessageBytes)
specifier|public
name|AcknowledgmentSynchronizationAdapter
parameter_list|(
name|Socket
name|clientSocket
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
block|{
name|this
operator|.
name|clientSocket
operator|=
name|clientSocket
expr_stmt|;
name|this
operator|.
name|originalHl7MessageBytes
operator|=
name|hl7MessageBytes
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOrder ()
specifier|public
name|int
name|getOrder
parameter_list|()
block|{
return|return
name|HIGHEST
return|;
block|}
annotation|@
name|Override
DECL|method|onAfterRoute (Route route, Exchange exchange)
specifier|public
name|void
name|onAfterRoute
parameter_list|(
name|Route
name|route
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"onAfterRoute"
argument_list|)
expr_stmt|;
comment|// Check BEFORE_SEND Properties
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_RESET_CONNECTION_BEFORE_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_CLOSE_CONNECTION_BEFORE_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|closeConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Find the acknowledgement body
comment|// TODO:  Enhance this to say whether or not the acknowlment is missing or just of an uncovertable type
name|byte
index|[]
name|acknowledgementMessageBytes
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|String
name|acknowledgementMessageType
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|acknowledgementMessageBytes
condition|)
block|{
name|boolean
name|autoAck
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_AUTO_ACKNOWLEDGE
argument_list|,
literal|true
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|autoAck
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
literal|"Automatic Acknowledgement is disabled and the "
operator|+
name|MLLP_ACKNOWLEDGEMENT
operator|+
literal|" exchange property is null or cannot be converted to byte[]"
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|acknowledgmentTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|acknowledgmentTypeProperty
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|exchange
operator|.
name|getException
argument_list|()
condition|)
block|{
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationAcceptAcknowledgementMessage
argument_list|(
name|originalHl7MessageBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationErrorAcknowledgementMessage
argument_list|(
name|originalHl7MessageBytes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|acknowledgmentTypeProperty
condition|)
block|{
case|case
literal|"AA"
case|:
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationAcceptAcknowledgementMessage
argument_list|(
name|originalHl7MessageBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"AE"
case|:
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationErrorAcknowledgementMessage
argument_list|(
name|originalHl7MessageBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"AR"
case|:
name|acknowledgementMessageType
operator|=
literal|"AR"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationRejectAcknowledgementMessage
argument_list|(
name|originalHl7MessageBytes
argument_list|)
expr_stmt|;
break|break;
default|default:
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|Hl7AcknowledgementGenerationException
argument_list|(
literal|"Unsupported acknowledgment type: "
operator|+
name|acknowledgmentTypeProperty
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Hl7AcknowledgementGenerationException
name|ackGenerationException
parameter_list|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|ackGenerationException
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|ackGenerationException
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|byte
name|bM
init|=
literal|77
decl_stmt|;
specifier|final
name|byte
name|bS
init|=
literal|83
decl_stmt|;
specifier|final
name|byte
name|bA
init|=
literal|65
decl_stmt|;
specifier|final
name|byte
name|bE
init|=
literal|69
decl_stmt|;
specifier|final
name|byte
name|bR
init|=
literal|82
decl_stmt|;
specifier|final
name|byte
name|fieldSeparator
init|=
name|originalHl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
comment|// Acknowledgment is specified in exchange property - determine the acknowledgement type
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalHl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|SEGMENT_DELIMITER
operator|==
name|i
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|7
operator|<
name|originalHl7MessageBytes
operator|.
name|length
comment|// Make sure we don't run off the end of the message
operator|&&
name|bM
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|1
index|]
operator|&&
name|bS
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|2
index|]
operator|&&
name|bA
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|3
index|]
operator|&&
name|fieldSeparator
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|4
index|]
condition|)
block|{
if|if
condition|(
name|fieldSeparator
operator|!=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|7
index|]
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"MSA-1 is longer than 2-bytes - ignoring trailing bytes"
argument_list|)
expr_stmt|;
block|}
comment|// Found MSA - pull acknowledgement bytes
name|byte
index|[]
name|acknowledgmentTypeBytes
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
operator|=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|5
index|]
expr_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|1
index|]
operator|=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|6
index|]
expr_stmt|;
try|try
block|{
name|acknowledgementMessageType
operator|=
name|IOConverter
operator|.
name|toString
argument_list|(
name|acknowledgmentTypeBytes
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to convert acknowledgement message to string"
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
comment|// Verify it's a valid acknowledgement code
if|if
condition|(
name|bA
operator|!=
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
condition|)
block|{
switch|switch
condition|(
name|acknowledgementMessageBytes
index|[
literal|1
index|]
condition|)
block|{
case|case
name|bA
case|:
case|case
name|bR
case|:
case|case
name|bE
case|:
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid acknowledgement type ["
operator|+
name|acknowledgementMessageType
operator|+
literal|"] found in message - should be AA, AE or AR"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the MLLP_ACKNOWLEDGEMENT_TYPE property is set on the exchange, make sure it matches
name|String
name|acknowledgementTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|acknowledgementTypeProperty
operator|&&
operator|!
name|acknowledgementTypeProperty
operator|.
name|equals
argument_list|(
name|acknowledgementMessageType
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Acknowledgement type found in message ["
operator|+
name|acknowledgementMessageType
operator|+
literal|"] does not match "
operator|+
name|MLLP_ACKNOWLEDGEMENT_TYPE
operator|+
literal|" exchange property value ["
operator|+
name|acknowledgementTypeProperty
operator|+
literal|"] - using value found in message"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|Message
name|message
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
name|message
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|acknowledgementMessageType
argument_list|)
expr_stmt|;
comment|// Send the acknowledgement
name|log
operator|.
name|debug
argument_list|(
literal|"Sending Acknowledgement"
argument_list|)
expr_stmt|;
try|try
block|{
name|MllpUtil
operator|.
name|writeFramedPayload
argument_list|(
name|clientSocket
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpException
name|mllpEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"MLLP Acknowledgement failure: {}"
argument_list|,
name|mllpEx
argument_list|)
expr_stmt|;
name|MllpAcknowledgementDeliveryException
name|deliveryException
init|=
operator|new
name|MllpAcknowledgementDeliveryException
argument_list|(
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|,
name|mllpEx
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|deliveryException
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|deliveryException
argument_list|)
expr_stmt|;
block|}
comment|// Check AFTER_SEND Properties
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_RESET_CONNECTION_AFTER_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_CLOSE_CONNECTION_AFTER_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|closeConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|onAfterRoute
argument_list|(
name|route
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onComplete (Exchange exchange)
specifier|public
name|void
name|onComplete
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"onComplete"
argument_list|)
expr_stmt|;
name|super
operator|.
name|onComplete
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (Exchange exchange)
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"onFailure"
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

