begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_class
DECL|class|MllpSocketUtil
specifier|public
specifier|final
class|class
name|MllpSocketUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MllpSocketUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MllpSocketUtil ()
specifier|private
name|MllpSocketUtil
parameter_list|()
block|{     }
DECL|method|setSoTimeout (Socket socket, int timeout, Logger logger, String reasonMessage)
specifier|public
specifier|static
name|void
name|setSoTimeout
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|int
name|timeout
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|reasonMessage
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|!=
literal|null
operator|&&
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
specifier|final
name|String
name|format
init|=
literal|"Setting SO_TIMEOUT to {} for connection {}"
decl_stmt|;
if|if
condition|(
name|reasonMessage
operator|!=
literal|null
operator|&&
operator|!
name|reasonMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|format
operator|+
literal|"  Reason: {}"
argument_list|,
name|timeout
argument_list|,
name|getAddressString
argument_list|(
name|socket
argument_list|)
argument_list|,
name|reasonMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
name|format
argument_list|,
name|timeout
argument_list|,
name|getAddressString
argument_list|(
name|socket
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|format
init|=
literal|"Ignoring SocketException encountered setting SO_TIMEOUT to %d for connection %s."
decl_stmt|;
if|if
condition|(
name|reasonMessage
operator|!=
literal|null
operator|&&
operator|!
name|reasonMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|format
operator|+
literal|"  Reason: %s"
argument_list|,
name|timeout
argument_list|,
name|getAddressString
argument_list|(
name|socket
argument_list|)
argument_list|,
name|reasonMessage
argument_list|)
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|timeout
argument_list|,
name|getAddressString
argument_list|(
name|socket
argument_list|)
argument_list|)
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|close (Socket socket, Logger logger, String reasonMessage)
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|reasonMessage
parameter_list|)
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
specifier|final
name|String
name|format
init|=
literal|"Closing connection {}"
decl_stmt|;
name|String
name|address
init|=
name|getAddressString
argument_list|(
name|socket
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reasonMessage
operator|!=
literal|null
operator|&&
operator|!
name|reasonMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|format
operator|+
literal|".  Reason: {}"
argument_list|,
name|address
argument_list|,
name|reasonMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|socket
operator|.
name|isInputShutdown
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|shutdownInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|logMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring Exception encountered shutting down the input stream on the client socket %s"
argument_list|,
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|socket
operator|.
name|isOutputShutdown
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|logMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring Exception encountered shutting down the output stream on the client socket %s"
argument_list|,
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|String
name|logMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring IOException encountered while closing connection %s"
argument_list|,
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|reset (Socket socket, Logger logger, String reasonMessage)
specifier|public
specifier|static
name|void
name|reset
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|Logger
name|logger
parameter_list|,
name|String
name|reasonMessage
parameter_list|)
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
specifier|final
name|String
name|format
init|=
literal|"Resetting connection {}"
decl_stmt|;
name|String
name|address
init|=
name|getAddressString
argument_list|(
name|socket
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reasonMessage
operator|!=
literal|null
operator|&&
operator|!
name|reasonMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|format
operator|+
literal|".  Reason: {}"
argument_list|,
name|address
argument_list|,
name|reasonMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|socket
operator|.
name|setSoLinger
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
name|String
name|logMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring SocketException encountered setting SO_LINGER in preparation for resetting connection %s"
argument_list|,
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|String
name|logMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring IOException encountered while resetting connection %s"
argument_list|,
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|logMessage
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getAddressString (Socket socket)
specifier|public
specifier|static
name|String
name|getAddressString
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
name|String
name|localAddressString
init|=
literal|"null"
decl_stmt|;
name|String
name|remoteAddressString
init|=
literal|"null"
decl_stmt|;
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|SocketAddress
name|localSocketAddress
init|=
name|socket
operator|.
name|getLocalSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|localSocketAddress
operator|!=
literal|null
condition|)
block|{
name|localAddressString
operator|=
name|localSocketAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|SocketAddress
name|remoteSocketAddress
init|=
name|socket
operator|.
name|getRemoteSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteSocketAddress
operator|!=
literal|null
condition|)
block|{
name|remoteAddressString
operator|=
name|remoteSocketAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s -> %s"
argument_list|,
name|localAddressString
argument_list|,
name|remoteAddressString
argument_list|)
return|;
block|}
DECL|method|findStartOfBlock (byte[] payload)
specifier|public
specifier|static
name|int
name|findStartOfBlock
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|)
block|{
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
return|return
name|findStartOfBlock
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Find the beginning of the HL7 Payload      *<p>      * Searches the payload from the beginning, looking for the START_OF_BLOCK character.      *      * @param payload the payload to check      * @param length  the current valid length of the receive buffer      * @return the index of the START_OF_BLOCK, or -1 if not found      */
DECL|method|findStartOfBlock (byte[] payload, int length)
specifier|public
specifier|static
name|int
name|findStartOfBlock
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|payload
operator|!=
literal|null
operator|&&
name|length
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|payload
operator|.
name|length
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|payload
index|[
name|i
index|]
operator|==
name|START_OF_BLOCK
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|findEndOfMessage (byte[] payload)
specifier|public
specifier|static
name|int
name|findEndOfMessage
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|)
block|{
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
return|return
name|findEndOfMessage
argument_list|(
name|payload
argument_list|,
name|payload
operator|.
name|length
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Find the end of the HL7 Payload      *<p>      * Searches the payload from the end, looking for the [END_OF_BLOCK, END_OF_DATA] characters.      *      * @param payload the payload to check      * @param length  the current valid length of the receive buffer      * @return the index of the END_OF_BLOCK character that terminates the message, or -1 if not found      */
DECL|method|findEndOfMessage (byte[] payload, int length)
specifier|public
specifier|static
name|int
name|findEndOfMessage
parameter_list|(
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|payload
operator|!=
literal|null
operator|&&
name|length
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|payload
operator|.
name|length
argument_list|)
operator|-
literal|1
init|;
name|i
operator|>
literal|0
condition|;
operator|--
name|i
control|)
block|{
if|if
condition|(
name|payload
index|[
name|i
index|]
operator|==
name|END_OF_DATA
condition|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|payload
index|[
name|i
operator|-
literal|1
index|]
operator|==
name|END_OF_BLOCK
condition|)
block|{
return|return
name|i
operator|-
literal|1
return|;
block|}
block|}
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

