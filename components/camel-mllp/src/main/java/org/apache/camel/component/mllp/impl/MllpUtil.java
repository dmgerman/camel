begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpFrameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpWriteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_STREAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_comment
comment|/**  * Supplies methods to read and write messages in a MLLP Frame.  *<p/>  * Although the methods in the class are intended to handle HL7 v2 formatted messages, the methods do not  * depend on that format - any byte[]can be written to the Socket.  Also, any byte[] can be read from the socket  * provided it has the proper MLLP Enveloping -<START_OF_BLOCK>payload<END_OF_BLOCK><END_OF_DATA>>.  *<p/>  * NOTE: MLLP payloads are not logged unless the logging level is set to DEBUG or TRACE to avoid introducing PHI  * into the log files.  Logging of PHI can be globally disabled by setting the org.apache.camel.mllp.logPHI system  * property.  The property is evaluated using Boolean.parseBoolean.  *<p/>  */
end_comment

begin_class
DECL|class|MllpUtil
specifier|public
specifier|final
class|class
name|MllpUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MllpUtil
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MllpUtil ()
specifier|private
name|MllpUtil
parameter_list|()
block|{     }
comment|/**      * Open the MLLP frame by reading from the Socket until the begging of the frame is found.      *<p/>      * If any errors occur (including MLLP frame errors) while opening the frame, the socket will be closed and an      * Exception will be thrown.      *      * @param socket the Socket to read      * @throws SocketTimeoutException    thrown if a timeout occurs while looking for the beginning of the MLLP frame, but      *                                   nothing is yet available - this is NOT an error condition      * @throws MllpFrameException if the MLLP Frame is corrupted in some way      * @throws MllpException             for other unexpected error conditions      */
DECL|method|openFrame (Socket socket, int receiveTimeout, int readTimeout)
specifier|public
specifier|static
name|boolean
name|openFrame
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|int
name|receiveTimeout
parameter_list|,
name|int
name|readTimeout
parameter_list|)
throws|throws
name|SocketTimeoutException
throws|,
name|MllpFrameException
throws|,
name|MllpException
block|{
if|if
condition|(
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|InputStream
name|socketInputStream
init|=
name|MllpUtil
operator|.
name|getInputStream
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|int
name|readByte
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
name|readByte
operator|=
name|socketInputStream
operator|.
name|read
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|readByte
condition|)
block|{
case|case
name|START_OF_BLOCK
case|:
return|return
literal|true
return|;
case|case
name|END_OF_STREAM
case|:
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
default|default:
comment|// Continue on and process the out-of-frame data
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|normaTimeoutEx
parameter_list|)
block|{
comment|// Just pass this on - the caller will wrap it in a MllpTimeoutException
throw|throw
name|normaTimeoutEx
throw|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
if|if
condition|(
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Socket closed while opening MLLP frame - ignoring exception"
argument_list|,
name|socketEx
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Exception occurred opening MLLP frame - resetting the connection"
argument_list|)
expr_stmt|;
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpException
argument_list|(
literal|"Unexpected Exception occurred opening MLLP frame"
argument_list|,
name|socketEx
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|unexpectedException
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Exception occurred opening MLLP frame - resetting the connection"
argument_list|)
expr_stmt|;
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpException
argument_list|(
literal|"Unexpected Exception occurred opening MLLP frame"
argument_list|,
name|unexpectedException
argument_list|)
throw|;
block|}
comment|/*              From here on, we're in a bad frame state.  Read what's left in the socket, close the connection and              return the out-of-frame data.               */
name|ByteArrayOutputStream
name|outOfFrameData
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|outOfFrameData
operator|.
name|write
argument_list|(
name|readByte
argument_list|)
expr_stmt|;
try|try
block|{
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|readTimeout
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|readByte
operator|=
name|socketInputStream
operator|.
name|read
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|readByte
condition|)
block|{
case|case
name|END_OF_STREAM
case|:
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"END_OF_STREAM read while looking for the beginning of the MLLP frame, and "
operator|+
literal|"out-of-frame data had been read - resetting connection and eating out-of-frame data: {}"
argument_list|,
name|outOfFrameData
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"END_OF_STREAM read while looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"END_OF_STREAM read while looking for the beginning of the MLLP frame"
argument_list|,
name|outOfFrameData
operator|.
name|toByteArray
argument_list|()
argument_list|)
throw|;
case|case
name|START_OF_BLOCK
case|:
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The beginning of the MLLP frame was preceded by out-of-frame data - eating data: {}"
argument_list|,
name|outOfFrameData
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The beginning of the MLLP frame was preceded by out-of-frame data - eating data"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"The beginning of the MLLP frame was preceded by out-of-frame data"
argument_list|,
name|outOfFrameData
operator|.
name|toByteArray
argument_list|()
argument_list|)
throw|;
default|default:
comment|// still reading out-of-frame data
name|outOfFrameData
operator|.
name|write
argument_list|(
name|readByte
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data: {}"
argument_list|,
name|outOfFrameData
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"Timeout looking for the beginning of the MLLP frame, and out-of-frame data had been read"
argument_list|,
name|outOfFrameData
operator|.
name|toByteArray
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data: {}"
argument_list|,
name|outOfFrameData
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered looking for the beginning of the MLLP frame, and out-of-frame data had been read - resetting connection and eating out-of-frame data"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"Exception encountered looking for the beginning of the MLLP frame, and out-of-frame data had been read"
argument_list|,
name|outOfFrameData
operator|.
name|toByteArray
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Close a MLLP frame by reading from the socket until the end of the frame is found.      *<p/>      * The method assumes the MLLP frame has already been opened and the first byte available      * will be the first byte of the framed message.      *<p/>      * The method consumes the END_OF_BLOCK and END_OF_DATA bytes from the stream before returning the payload      *<p/>      * If any errors occur (including MLLP frame errors) while opening the frame, the socket will be closed and an      * Exception will be thrown.      *      * @param socket the Socket to be read      * @return the payload of the MLLP-Enveloped message as a byte[]      * @throws MllpTimeoutException      thrown if a timeout occurs while closing the MLLP frame      * @throws MllpFrameException if the MLLP Frame is corrupted in some way      * @throws MllpException             for other unexpected error conditions      */
DECL|method|closeFrame (Socket socket, int receiveTimeout, int readTimeout)
specifier|public
specifier|static
name|byte
index|[]
name|closeFrame
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|int
name|receiveTimeout
parameter_list|,
name|int
name|readTimeout
parameter_list|)
throws|throws
name|MllpTimeoutException
throws|,
name|MllpFrameException
throws|,
name|MllpException
block|{
if|if
condition|(
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|InputStream
name|socketInputStream
init|=
name|MllpUtil
operator|.
name|getInputStream
argument_list|(
name|socket
argument_list|)
decl_stmt|;
comment|// TODO:  Come up with an intelligent way to size this stream
name|ByteArrayOutputStream
name|payload
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
try|try
block|{
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|readTimeout
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|readByte
init|=
name|socketInputStream
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|readByte
condition|)
block|{
case|case
name|END_OF_STREAM
case|:
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"END_OF_STREAM read while looking for the end of the MLLP frame - resetting connection and eating data: {}"
argument_list|,
name|payload
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"END_OF_STREAM read while looking for the end of the MLLP frame - resetting connection and eating data"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"END_OF_STREAM read while looking for the end of the MLLP frame"
argument_list|,
name|payload
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|payload
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
throw|;
case|case
name|START_OF_BLOCK
case|:
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A new MLLP frame was opened before the previous frame was closed - resetting connection and eating data: {}"
argument_list|,
name|payload
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"A new MLLP frame was opened before the previous frame was closed - resetting connection and eating data"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"A new MLLP frame was opened before the previous frame was closed"
argument_list|,
name|payload
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|payload
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
throw|;
case|case
name|END_OF_BLOCK
case|:
if|if
condition|(
name|END_OF_DATA
operator|!=
name|socketInputStream
operator|.
name|read
argument_list|()
condition|)
block|{
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The MLLP frame was partially closed - END_OF_BLOCK was not followed by END_OF_DATA - resetting connection and eating data: {}"
argument_list|,
name|payload
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The MLLP frame was partially closed - END_OF_BLOCK was not followed by END_OF_DATA - resetting connection and eating data"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"The MLLP frame was partially closed - END_OF_BLOCK was not followed by END_OF_DATA"
argument_list|,
name|payload
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|payload
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|)
throw|;
block|}
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
return|return
name|payload
operator|.
name|toByteArray
argument_list|()
return|;
default|default:
comment|// log.trace( "Read Character: {}", (char)readByte );
name|payload
operator|.
name|write
argument_list|(
name|readByte
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|<
name|payload
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout looking for the end of the MLLP frame - resetting connection and eating data: {}"
argument_list|,
name|payload
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout looking for the end of the MLLP frame - resetting connection and eating data"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Timeout looking for the end of the MLLP frame - resetting connection"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"Timeout looking for the end of the MLLP frame"
argument_list|,
name|payload
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|payload
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|timeoutEx
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|<
name|payload
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|isLogPHIEnabled
argument_list|(
name|LOG
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered looking for the end of the MLLP frame - resetting connection and eating data: {}"
argument_list|,
name|payload
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered looking for the end of the MLLP frame - resetting connection and eating data"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception encountered looking for the end of the MLLP frame - resetting connection"
argument_list|)
expr_stmt|;
block|}
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpFrameException
argument_list|(
literal|"Exception encountered looking for the end of the MLLP frame"
argument_list|,
name|payload
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|payload
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
comment|// Eat this exception
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Write a MLLP-Framed payload to the Socket      *      * @param socket  the Socket to write the payload      * @param payload the MLLP payload      * @return true if write was successful; false otherwise      * @throws MllpWriteException if the write fails      * @throws MllpException      for other unexpected error conditions      */
DECL|method|writeFramedPayload (Socket socket, byte[] payload)
specifier|public
specifier|static
name|void
name|writeFramedPayload
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|)
throws|throws
name|MllpException
block|{
if|if
condition|(
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|OutputStream
name|outputStream
decl_stmt|;
try|try
block|{
name|outputStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|payload
operator|.
name|length
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error Retrieving OutputStream from Socket - resetting connection"
argument_list|)
expr_stmt|;
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpException
argument_list|(
literal|"Error Retrieving OutputStream from Socket"
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|!=
name|outputStream
condition|)
block|{
try|try
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|payload
argument_list|,
literal|0
argument_list|,
name|payload
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|END_OF_BLOCK
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|END_OF_DATA
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error writing MLLP payload - resetting connection"
argument_list|)
expr_stmt|;
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpWriteException
argument_list|(
literal|"Error writing MLLP payload"
argument_list|,
name|payload
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|closeConnection (Socket socket)
specifier|public
specifier|static
name|void
name|closeConnection
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|socket
condition|)
block|{
if|if
condition|(
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|shutdownInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered shutting down the input stream on the client socket"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|socket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered shutting down the output stream on the client socket"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing the client socket"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|resetConnection (Socket socket)
specifier|public
specifier|static
name|void
name|resetConnection
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|socket
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|setSoLinger
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered setting SO_LINGER to 0 on the socket to force a reset"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing the client socket"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Retrieve the InputStream from the Socket      *<p/>      * Private utility method that catches IOExceptions when retrieving the InputStream      *      * @param socket Socket to get the InputStream from      * @return the InputStream for the Socket      * @throws MllpException when unexpected conditions occur      */
DECL|method|getInputStream (Socket socket)
specifier|private
specifier|static
name|InputStream
name|getInputStream
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|MllpException
block|{
name|InputStream
name|socketInputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socketInputStream
operator|=
name|socket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
throw|throw
operator|new
name|MllpException
argument_list|(
literal|"Error Retrieving InputStream from Socket"
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
return|return
name|socketInputStream
return|;
block|}
DECL|method|isLogPHIEnabled (Logger targetLogger)
specifier|private
specifier|static
name|boolean
name|isLogPHIEnabled
parameter_list|(
name|Logger
name|targetLogger
parameter_list|)
block|{
if|if
condition|(
name|targetLogger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|MllpComponent
operator|.
name|MLLP_LOG_PHI_PROPERTY
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

