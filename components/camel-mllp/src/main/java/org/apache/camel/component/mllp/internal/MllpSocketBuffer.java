begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpSocketException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An OutputStream modeled after the ByteArrayOutputStream specifically for MLLP operations.  */
end_comment

begin_class
DECL|class|MllpSocketBuffer
specifier|public
class|class
name|MllpSocketBuffer
block|{
DECL|field|MIN_BUFFER_SIZE
specifier|static
specifier|final
name|int
name|MIN_BUFFER_SIZE
init|=
literal|2048
decl_stmt|;
DECL|field|MAX_BUFFER_SIZE
specifier|static
specifier|final
name|int
name|MAX_BUFFER_SIZE
init|=
literal|0x40000000
decl_stmt|;
comment|// Approximately 1-GB
DECL|field|log
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|final
name|MllpEndpoint
name|endpoint
decl_stmt|;
DECL|field|buffer
name|byte
name|buffer
index|[]
decl_stmt|;
DECL|field|availableByteCount
name|int
name|availableByteCount
decl_stmt|;
DECL|field|startOfBlockIndex
name|int
name|startOfBlockIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|endOfBlockIndex
name|int
name|endOfBlockIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|MllpSocketBuffer (MllpEndpoint endpoint)
specifier|public
name|MllpSocketBuffer
parameter_list|(
name|MllpEndpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"MllpEndpoint cannot be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
name|MIN_BUFFER_SIZE
index|]
expr_stmt|;
block|}
DECL|method|isEndOfDataRequired ()
specifier|public
name|boolean
name|isEndOfDataRequired
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isRequireEndOfData
argument_list|()
return|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|(
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
literal|false
else|:
literal|true
return|;
block|}
DECL|method|write (int b)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
name|ensureCapacity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|buffer
index|[
name|availableByteCount
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|updateIndexes
argument_list|(
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|availableByteCount
operator|+=
literal|1
expr_stmt|;
block|}
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|!=
literal|null
operator|&&
name|b
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (byte[] sourceBytes, int offset, int writeCount)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|byte
index|[]
name|sourceBytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|writeCount
parameter_list|)
block|{
if|if
condition|(
name|sourceBytes
operator|!=
literal|null
operator|&&
name|sourceBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|offset
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"offset<%d> is less than zero"
argument_list|,
name|offset
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|offset
operator|>
name|sourceBytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"offset<%d> is greater than write count<%d>"
argument_list|,
name|offset
argument_list|,
name|writeCount
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeCount
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"write count<%d> is less than zero"
argument_list|,
name|writeCount
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|writeCount
operator|>
name|sourceBytes
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"write count<%d> is greater than length of the source byte[]<%d>"
argument_list|,
name|writeCount
argument_list|,
name|sourceBytes
operator|.
name|length
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|offset
operator|+
name|writeCount
operator|)
operator|-
name|sourceBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"offset<%d> plus write count<%d> is<%d> is greater than length<%d> of the source byte[]"
argument_list|,
name|offset
argument_list|,
name|writeCount
argument_list|,
name|offset
operator|+
name|writeCount
argument_list|,
name|sourceBytes
operator|.
name|length
argument_list|)
argument_list|)
throw|;
block|}
name|ensureCapacity
argument_list|(
name|writeCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|sourceBytes
argument_list|,
name|offset
argument_list|,
name|buffer
argument_list|,
name|availableByteCount
argument_list|,
name|writeCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|writeCount
operator|&&
operator|(
name|startOfBlockIndex
operator|<
literal|0
operator|||
name|endOfBlockIndex
operator|<
literal|0
operator|)
condition|;
operator|++
name|i
control|)
block|{
name|updateIndexes
argument_list|(
name|sourceBytes
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|availableByteCount
operator|+=
name|writeCount
expr_stmt|;
block|}
block|}
DECL|method|openMllpEnvelope ()
specifier|public
specifier|synchronized
name|void
name|openMllpEnvelope
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
DECL|method|closeMllpEnvelope ()
specifier|public
specifier|synchronized
name|void
name|closeMllpEnvelope
parameter_list|()
block|{
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|PAYLOAD_TERMINATOR
argument_list|)
expr_stmt|;
block|}
DECL|method|setEnvelopedMessage (byte[] hl7Payload)
specifier|public
specifier|synchronized
name|void
name|setEnvelopedMessage
parameter_list|(
name|byte
index|[]
name|hl7Payload
parameter_list|)
block|{
name|setEnvelopedMessage
argument_list|(
name|hl7Payload
argument_list|,
literal|0
argument_list|,
name|hl7Payload
operator|!=
literal|null
condition|?
name|hl7Payload
operator|.
name|length
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|setEnvelopedMessage (byte[] hl7Payload, int offset, int length)
specifier|public
specifier|synchronized
name|void
name|setEnvelopedMessage
parameter_list|(
name|byte
index|[]
name|hl7Payload
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|hl7Payload
operator|!=
literal|null
operator|&&
name|hl7Payload
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hl7Payload
index|[
literal|0
index|]
operator|!=
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
condition|)
block|{
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
block|}
name|write
argument_list|(
name|hl7Payload
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|PAYLOAD_TERMINATOR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|PAYLOAD_TERMINATOR
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|availableByteCount
operator|>
literal|0
condition|)
block|{
comment|// TODO: May be able to get rid of this
name|Arrays
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
name|availableByteCount
operator|=
literal|0
expr_stmt|;
name|startOfBlockIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|endOfBlockIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|readFrom (Socket socket)
specifier|public
specifier|synchronized
name|void
name|readFrom
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|MllpSocketException
throws|,
name|SocketTimeoutException
block|{
name|readFrom
argument_list|(
name|socket
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getReadTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|readFrom (Socket socket, int receiveTimeout, int readTimeout)
specifier|public
specifier|synchronized
name|void
name|readFrom
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|int
name|receiveTimeout
parameter_list|,
name|int
name|readTimeout
parameter_list|)
throws|throws
name|MllpSocketException
throws|,
name|SocketTimeoutException
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Entering readFrom for {} ..."
argument_list|,
name|socket
argument_list|)
expr_stmt|;
name|ensureCapacity
argument_list|(
name|MIN_BUFFER_SIZE
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|socketInputStream
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
name|readSocketInputStream
argument_list|(
name|socketInputStream
argument_list|,
name|socket
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|readTimeout
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|ensureCapacity
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|MIN_BUFFER_SIZE
argument_list|,
name|socketInputStream
operator|.
name|available
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|readSocketInputStream
argument_list|(
name|socketInputStream
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
throw|throw
name|timeoutEx
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
specifier|final
name|String
name|exceptionMessage
init|=
literal|"Exception encountered reading Socket"
decl_stmt|;
name|resetSocket
argument_list|(
name|socket
argument_list|,
name|exceptionMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpSocketException
argument_list|(
name|exceptionMessage
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|hasEndOfData
argument_list|()
operator|&&
name|hasEndOfBlock
argument_list|()
operator|&&
name|endOfBlockIndex
operator|<
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"readFrom {} exiting with partial payload {}"
argument_list|,
name|socket
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Socket is invalid - no data read"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Exiting readFrom ..."
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTo (Socket socket)
specifier|public
specifier|synchronized
name|void
name|writeTo
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|MllpSocketException
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Entering writeTo for {} ..."
argument_list|,
name|socket
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|OutputStream
name|socketOutputStream
init|=
name|socket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasStartOfBlock
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasEndOfData
argument_list|()
condition|)
block|{
name|socketOutputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|startOfBlockIndex
argument_list|,
name|endOfBlockIndex
operator|-
name|startOfBlockIndex
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasEndOfBlock
argument_list|()
condition|)
block|{
name|socketOutputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|startOfBlockIndex
argument_list|,
name|endOfBlockIndex
operator|-
name|startOfBlockIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|socketOutputStream
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socketOutputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
name|startOfBlockIndex
argument_list|,
name|availableByteCount
operator|-
name|startOfBlockIndex
argument_list|)
expr_stmt|;
name|socketOutputStream
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|PAYLOAD_TERMINATOR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|socketOutputStream
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
argument_list|)
expr_stmt|;
name|socketOutputStream
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|availableByteCount
argument_list|)
expr_stmt|;
name|socketOutputStream
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|PAYLOAD_TERMINATOR
argument_list|)
expr_stmt|;
block|}
name|socketOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
specifier|final
name|String
name|exceptionMessage
init|=
literal|"Exception encountered writing Socket"
decl_stmt|;
name|resetSocket
argument_list|(
name|socket
argument_list|,
name|exceptionMessage
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpSocketException
argument_list|(
name|exceptionMessage
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring call to writeTo(byte[] payload) for {} - MLLP payload is null or empty"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Socket is invalid - no data written"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Exiting writeTo ..."
argument_list|)
expr_stmt|;
block|}
DECL|method|toByteArray ()
specifier|public
specifier|synchronized
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
if|if
condition|(
name|availableByteCount
operator|>
literal|0
condition|)
block|{
return|return
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buffer
argument_list|,
name|availableByteCount
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|toByteArrayAndReset ()
specifier|public
specifier|synchronized
name|byte
index|[]
name|toByteArrayAndReset
parameter_list|()
block|{
name|byte
index|[]
name|answer
init|=
name|toByteArray
argument_list|()
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toString (Charset charset)
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|(
name|Charset
name|charset
parameter_list|)
block|{
if|if
condition|(
name|availableByteCount
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|availableByteCount
argument_list|,
name|charset
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|toString (String charsetName)
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
if|if
condition|(
name|availableByteCount
operator|>
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
name|Charset
operator|.
name|isSupported
argument_list|(
name|charsetName
argument_list|)
condition|)
block|{
return|return
name|toString
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
argument_list|)
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported character set name {} - using the MLLP default character set {}"
argument_list|,
name|charsetName
argument_list|,
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|charsetEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring exception encountered determining character set for name {} - using the MLLP default character set {}"
argument_list|,
name|charsetName
argument_list|,
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|charsetEx
argument_list|)
expr_stmt|;
block|}
return|return
name|toString
argument_list|(
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|toStringAndReset ()
specifier|public
specifier|synchronized
name|String
name|toStringAndReset
parameter_list|()
block|{
name|String
name|answer
init|=
name|toString
argument_list|()
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|toStringAndReset (String charsetName)
specifier|public
specifier|synchronized
name|String
name|toStringAndReset
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|String
name|answer
init|=
name|toString
argument_list|(
name|charsetName
argument_list|)
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Convert the entire contents of the buffer (including enveloping characters) to a print-friendly      * String representation.      *      * @return print-friendly String      */
DECL|method|toPrintFriendlyString ()
specifier|public
specifier|synchronized
name|String
name|toPrintFriendlyString
parameter_list|()
block|{
if|if
condition|(
name|availableByteCount
operator|>
literal|0
condition|)
block|{
return|return
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|availableByteCount
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|toPrintFriendlyStringAndReset ()
specifier|public
name|String
name|toPrintFriendlyStringAndReset
parameter_list|()
block|{
name|String
name|answer
init|=
name|toPrintFriendlyString
argument_list|()
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|toHl7String ()
specifier|public
specifier|synchronized
name|String
name|toHl7String
parameter_list|()
block|{
return|return
name|this
operator|.
name|toHl7String
argument_list|(
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toHl7StringAndReset ()
specifier|public
name|String
name|toHl7StringAndReset
parameter_list|()
block|{
name|String
name|answer
init|=
name|toHl7String
argument_list|()
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|toHl7String (String charsetName)
specifier|public
specifier|synchronized
name|String
name|toHl7String
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
if|if
condition|(
name|charsetName
operator|!=
literal|null
operator|&&
operator|!
name|charsetName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|Charset
operator|.
name|isSupported
argument_list|(
name|charsetName
argument_list|)
condition|)
block|{
return|return
name|toHl7String
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
argument_list|)
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Unsupported character set name {} - using the MLLP default character set {}"
argument_list|,
name|charsetName
argument_list|,
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|charsetEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring exception encountered determining character set for name {} - using the MLLP default character set {}"
argument_list|,
name|charsetName
argument_list|,
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|,
name|charsetEx
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toHl7String
argument_list|(
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toHl7String (Charset charset)
specifier|public
specifier|synchronized
name|String
name|toHl7String
parameter_list|(
name|Charset
name|charset
parameter_list|)
block|{
if|if
condition|(
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|hasStartOfBlock
argument_list|()
condition|?
name|startOfBlockIndex
operator|+
literal|1
else|:
literal|1
decl_stmt|;
name|int
name|length
init|=
name|hasEndOfBlock
argument_list|()
condition|?
name|endOfBlockIndex
operator|-
name|offset
else|:
name|availableByteCount
operator|-
name|startOfBlockIndex
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|charset
operator|!=
literal|null
condition|?
name|charset
else|:
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|toHl7StringAndReset (String charsetName)
specifier|public
name|String
name|toHl7StringAndReset
parameter_list|(
name|String
name|charsetName
parameter_list|)
block|{
name|String
name|answer
init|=
name|toHl7String
argument_list|(
name|charsetName
argument_list|)
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Convert the enveloped contents of the buffer (excluding enveloping characters) to a print-friendly      * String representation.      *      * @return print-friendly String      */
DECL|method|toPrintFriendlyHl7String ()
specifier|public
specifier|synchronized
name|String
name|toPrintFriendlyHl7String
parameter_list|()
block|{
if|if
condition|(
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|int
name|startPosition
init|=
name|hasStartOfBlock
argument_list|()
condition|?
name|startOfBlockIndex
operator|+
literal|1
else|:
literal|1
decl_stmt|;
name|int
name|endPosition
init|=
name|hasEndOfBlock
argument_list|()
condition|?
name|endOfBlockIndex
else|:
name|availableByteCount
operator|-
literal|1
decl_stmt|;
return|return
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|buffer
argument_list|,
name|startPosition
argument_list|,
name|endPosition
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
DECL|method|toPrintFriendlyHl7StringAndReset ()
specifier|public
name|String
name|toPrintFriendlyHl7StringAndReset
parameter_list|()
block|{
name|String
name|answer
init|=
name|toPrintFriendlyHl7String
argument_list|()
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|toMllpPayload ()
specifier|public
specifier|synchronized
name|byte
index|[]
name|toMllpPayload
parameter_list|()
block|{
name|byte
index|[]
name|mllpPayload
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|hasStartOfBlock
argument_list|()
condition|?
name|startOfBlockIndex
operator|+
literal|1
else|:
literal|1
decl_stmt|;
name|int
name|length
init|=
name|hasEndOfBlock
argument_list|()
condition|?
name|endOfBlockIndex
operator|-
name|offset
else|:
name|availableByteCount
operator|-
name|startOfBlockIndex
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|mllpPayload
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|mllpPayload
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mllpPayload
operator|=
operator|new
name|byte
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|mllpPayload
return|;
block|}
DECL|method|toMllpPayloadAndReset ()
specifier|public
name|byte
index|[]
name|toMllpPayloadAndReset
parameter_list|()
block|{
name|byte
index|[]
name|answer
init|=
name|toMllpPayload
argument_list|()
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|getMllpPayloadLength ()
specifier|public
specifier|synchronized
name|int
name|getMllpPayloadLength
parameter_list|()
block|{
name|int
name|answer
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
if|if
condition|(
name|isEndOfDataRequired
argument_list|()
condition|)
block|{
name|answer
operator|=
name|endOfBlockIndex
operator|-
name|startOfBlockIndex
operator|+
literal|2
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
name|endOfBlockIndex
operator|-
name|startOfBlockIndex
operator|+
literal|2
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getStartOfBlockIndex ()
specifier|public
specifier|synchronized
name|int
name|getStartOfBlockIndex
parameter_list|()
block|{
return|return
name|startOfBlockIndex
return|;
block|}
DECL|method|getEndOfBlockIndex ()
specifier|public
specifier|synchronized
name|int
name|getEndOfBlockIndex
parameter_list|()
block|{
return|return
name|endOfBlockIndex
return|;
block|}
DECL|method|hasCompleteEnvelope ()
specifier|public
specifier|synchronized
name|boolean
name|hasCompleteEnvelope
parameter_list|()
block|{
if|if
condition|(
name|hasStartOfBlock
argument_list|()
condition|)
block|{
if|if
condition|(
name|isEndOfDataRequired
argument_list|()
condition|)
block|{
return|return
name|hasEndOfData
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|hasEndOfBlock
argument_list|()
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasStartOfBlock ()
specifier|public
specifier|synchronized
name|boolean
name|hasStartOfBlock
parameter_list|()
block|{
return|return
operator|(
name|startOfBlockIndex
operator|>=
literal|0
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
DECL|method|hasEndOfBlock ()
specifier|public
specifier|synchronized
name|boolean
name|hasEndOfBlock
parameter_list|()
block|{
return|return
operator|(
name|endOfBlockIndex
operator|>=
literal|0
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
DECL|method|hasEndOfData ()
specifier|public
specifier|synchronized
name|boolean
name|hasEndOfData
parameter_list|()
block|{
if|if
condition|(
name|hasEndOfBlock
argument_list|()
condition|)
block|{
name|int
name|potentialEndOfDataIndex
init|=
name|endOfBlockIndex
operator|+
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|potentialEndOfDataIndex
operator|<
name|availableByteCount
operator|)
operator|&&
operator|(
name|buffer
index|[
name|potentialEndOfDataIndex
index|]
operator|==
name|MllpProtocolConstants
operator|.
name|END_OF_DATA
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasOutOfBandData ()
specifier|public
specifier|synchronized
name|boolean
name|hasOutOfBandData
parameter_list|()
block|{
return|return
name|hasLeadingOutOfBandData
argument_list|()
operator|||
name|hasTrailingOutOfBandData
argument_list|()
return|;
block|}
DECL|method|hasLeadingOutOfBandData ()
specifier|public
specifier|synchronized
name|boolean
name|hasLeadingOutOfBandData
parameter_list|()
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|hasStartOfBlock
argument_list|()
operator|||
name|startOfBlockIndex
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|hasTrailingOutOfBandData ()
specifier|public
specifier|synchronized
name|boolean
name|hasTrailingOutOfBandData
parameter_list|()
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hasEndOfData
argument_list|()
condition|)
block|{
if|if
condition|(
name|endOfBlockIndex
operator|+
literal|1
operator|<
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isEndOfDataRequired
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasEndOfBlock
argument_list|()
operator|&&
name|endOfBlockIndex
operator|<
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getLeadingOutOfBandData ()
specifier|public
specifier|synchronized
name|byte
index|[]
name|getLeadingOutOfBandData
parameter_list|()
block|{
name|byte
index|[]
name|outOfBandData
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasLeadingOutOfBandData
argument_list|()
condition|)
block|{
name|outOfBandData
operator|=
operator|new
name|byte
index|[
name|startOfBlockIndex
operator|==
operator|-
literal|1
condition|?
name|availableByteCount
else|:
name|startOfBlockIndex
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|outOfBandData
argument_list|,
literal|0
argument_list|,
name|outOfBandData
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|outOfBandData
return|;
block|}
DECL|method|getTrailingOutOfBandData ()
specifier|public
specifier|synchronized
name|byte
index|[]
name|getTrailingOutOfBandData
parameter_list|()
block|{
name|byte
index|[]
name|outOfBandData
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasTrailingOutOfBandData
argument_list|()
condition|)
block|{
name|int
name|offset
init|=
name|hasEndOfData
argument_list|()
condition|?
name|endOfBlockIndex
operator|+
literal|2
else|:
name|endOfBlockIndex
operator|+
literal|1
decl_stmt|;
name|int
name|length
init|=
name|size
argument_list|()
operator|-
name|offset
decl_stmt|;
name|outOfBandData
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|outOfBandData
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|outOfBandData
return|;
block|}
DECL|method|size ()
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|availableByteCount
return|;
block|}
DECL|method|capacity ()
specifier|public
specifier|synchronized
name|int
name|capacity
parameter_list|()
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
name|buffer
operator|.
name|length
operator|-
name|availableByteCount
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|bufferSize ()
specifier|public
specifier|synchronized
name|int
name|bufferSize
parameter_list|()
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
name|buffer
operator|.
name|length
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Get the internal buffer.      *      * USE WITH CAUTION!!      *      * @return      */
DECL|method|getBuffer ()
specifier|public
name|byte
index|[]
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
DECL|method|ensureCapacity (int requiredAvailableCapacity)
name|void
name|ensureCapacity
parameter_list|(
name|int
name|requiredAvailableCapacity
parameter_list|)
block|{
name|int
name|currentAvailableCapacity
init|=
name|capacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|requiredAvailableCapacity
operator|>
name|currentAvailableCapacity
condition|)
block|{
name|int
name|requiredBufferSize
init|=
name|buffer
operator|.
name|length
operator|+
operator|(
name|requiredAvailableCapacity
operator|-
name|currentAvailableCapacity
operator|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
operator|>=
name|MAX_BUFFER_SIZE
condition|)
block|{
specifier|final
name|String
name|exceptionMessageFormat
init|=
literal|"Cannot increase the buffer size from<%d> to<%d>"
operator|+
literal|" in order to increase the available capacity from<%d> to<%d> because the buffer is already the maximum size<%d>"
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|exceptionMessageFormat
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
name|requiredBufferSize
argument_list|,
name|currentAvailableCapacity
argument_list|,
name|requiredAvailableCapacity
argument_list|,
name|MAX_BUFFER_SIZE
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|requiredBufferSize
operator|>
name|MAX_BUFFER_SIZE
condition|)
block|{
specifier|final
name|String
name|exceptionMessageFormat
init|=
literal|"Cannot increase the buffer size<%d>"
operator|+
literal|" in order to increase the available capacity from<%d> to<%d> because the required buffer size<%d> exceeds the maximum buffer size<%d>"
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|exceptionMessageFormat
argument_list|,
name|buffer
operator|.
name|length
argument_list|,
name|currentAvailableCapacity
argument_list|,
name|requiredAvailableCapacity
argument_list|,
name|requiredBufferSize
argument_list|,
name|MAX_BUFFER_SIZE
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|newBufferSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|buffer
operator|.
name|length
operator|+
name|Math
operator|.
name|max
argument_list|(
name|MIN_BUFFER_SIZE
argument_list|,
name|requiredAvailableCapacity
argument_list|)
argument_list|,
name|MAX_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|buffer
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|buffer
argument_list|,
name|newBufferSize
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateIndexes (int b, int indexOffset)
name|void
name|updateIndexes
parameter_list|(
name|int
name|b
parameter_list|,
name|int
name|indexOffset
parameter_list|)
block|{
if|if
condition|(
name|startOfBlockIndex
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|b
operator|==
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
condition|)
block|{
name|startOfBlockIndex
operator|=
name|availableByteCount
operator|+
name|indexOffset
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|endOfBlockIndex
operator|<
literal|0
operator|&&
name|b
operator|==
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
condition|)
block|{
name|endOfBlockIndex
operator|=
name|availableByteCount
operator|+
name|indexOffset
expr_stmt|;
block|}
block|}
DECL|method|readSocketInputStream (InputStream socketInputStream, Socket socket)
name|void
name|readSocketInputStream
parameter_list|(
name|InputStream
name|socketInputStream
parameter_list|,
name|Socket
name|socket
parameter_list|)
throws|throws
name|MllpSocketException
throws|,
name|SocketTimeoutException
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Entering readSocketInputStream - size = {}"
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|readCount
init|=
name|socketInputStream
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|availableByteCount
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|availableByteCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|readCount
operator|==
name|MllpProtocolConstants
operator|.
name|END_OF_STREAM
condition|)
block|{
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpSocketException
argument_list|(
literal|"END_OF_STREAM returned from SocketInputStream.read(byte[], off, len)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|readCount
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|startOfBlockIndex
operator|==
operator|-
literal|1
operator|||
name|endOfBlockIndex
operator|==
operator|-
literal|1
operator|)
operator|&&
name|i
operator|<
name|readCount
condition|;
operator|++
name|i
control|)
block|{
name|updateIndexes
argument_list|(
name|buffer
index|[
name|availableByteCount
operator|+
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|availableByteCount
operator|+=
name|readCount
expr_stmt|;
if|if
condition|(
name|hasStartOfBlock
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Read {} bytes for a total of {} bytes"
argument_list|,
name|readCount
argument_list|,
name|availableByteCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring {} bytes received before START_OF_BLOCK"
argument_list|,
name|size
argument_list|()
argument_list|,
name|toPrintFriendlyStringAndReset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
throw|throw
name|timeoutEx
throw|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpSocketException
argument_list|(
literal|"SocketException encountered in readSocketInputStream"
argument_list|,
name|socketEx
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
specifier|final
name|String
name|exceptionMessage
init|=
literal|"IOException thrown from SocketInputStream.read(byte[], off, len)"
decl_stmt|;
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MllpSocketException
argument_list|(
literal|"IOException thrown from SocketInputStream.read(byte[], off, len)"
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
finally|finally
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Exiting readSocketInputStream - size = {}"
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeSocket (Socket socket)
specifier|public
name|void
name|closeSocket
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
name|doSocketClose
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|closeSocket (Socket socket, String logMessage)
specifier|public
name|void
name|closeSocket
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|String
name|logMessage
parameter_list|)
block|{
name|doSocketClose
argument_list|(
name|socket
argument_list|,
name|logMessage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSocket (Socket socket)
specifier|public
name|void
name|resetSocket
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
name|doSocketClose
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSocket (Socket socket, String logMessage)
specifier|public
name|void
name|resetSocket
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|String
name|logMessage
parameter_list|)
block|{
name|doSocketClose
argument_list|(
name|socket
argument_list|,
name|logMessage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|doSocketClose (Socket socket, String logMessage, boolean reset)
name|void
name|doSocketClose
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|String
name|logMessage
parameter_list|,
name|boolean
name|reset
parameter_list|)
block|{
if|if
condition|(
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|logMessage
operator|!=
literal|null
operator|&&
operator|!
name|logMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"{} - {} socket {}"
argument_list|,
name|reset
condition|?
literal|"Resetting"
else|:
literal|"Closing"
argument_list|,
name|logMessage
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"{} socket {}"
argument_list|,
name|reset
condition|?
literal|"Resetting"
else|:
literal|"Closing"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|updateLastConnectionTerminatedTicks
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|isInputShutdown
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|shutdownInput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignoredEx
parameter_list|)
block|{
comment|// TODO: Maybe log this
block|}
block|}
if|if
condition|(
operator|!
name|socket
operator|.
name|isOutputShutdown
argument_list|()
condition|)
block|{
try|try
block|{
name|socket
operator|.
name|shutdownOutput
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignoredEx
parameter_list|)
block|{
comment|// TODO: Maybe log this
block|}
block|}
if|if
condition|(
name|reset
condition|)
block|{
try|try
block|{
specifier|final
name|boolean
name|on
init|=
literal|true
decl_stmt|;
specifier|final
name|int
name|linger
init|=
literal|0
decl_stmt|;
name|socket
operator|.
name|setSoLinger
argument_list|(
name|on
argument_list|,
name|linger
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignoredEx
parameter_list|)
block|{
comment|// TODO: Maybe log this
block|}
block|}
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignoredEx
parameter_list|)
block|{
comment|// TODO: Maybe log this
block|}
block|}
block|}
DECL|method|isConnectionValid (Socket socket)
specifier|public
specifier|static
name|boolean
name|isConnectionValid
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
return|return
name|socket
operator|!=
literal|null
operator|&&
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
return|;
block|}
DECL|method|formatAddressString (SocketAddress sourceAddress, SocketAddress targetAddress)
specifier|public
specifier|static
name|String
name|formatAddressString
parameter_list|(
name|SocketAddress
name|sourceAddress
parameter_list|,
name|SocketAddress
name|targetAddress
parameter_list|)
block|{
name|String
name|sourceAddressString
init|=
literal|null
decl_stmt|;
name|String
name|targetAddressString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sourceAddress
operator|!=
literal|null
condition|)
block|{
name|sourceAddressString
operator|=
name|sourceAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|targetAddress
operator|!=
literal|null
condition|)
block|{
name|targetAddressString
operator|=
name|targetAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s => %s"
argument_list|,
name|sourceAddressString
argument_list|,
name|targetAddressString
argument_list|)
return|;
block|}
block|}
end_class

end_unit

