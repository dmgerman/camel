begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpAcknowledgementDeliveryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpInvalidAcknowledgementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpInvalidMessageException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpReceiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpSocketException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpTcpServerConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|MDCUnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|mllp
operator|.
name|Hl7AcknowledgementGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_comment
comment|/**  * Runnable to read the Socket  */
end_comment

begin_class
DECL|class|TcpSocketConsumerRunnable
specifier|public
class|class
name|TcpSocketConsumerRunnable
implements|implements
name|Runnable
block|{
DECL|field|clientSocket
specifier|final
name|Socket
name|clientSocket
decl_stmt|;
DECL|field|mllpBuffer
specifier|final
name|MllpSocketBuffer
name|mllpBuffer
decl_stmt|;
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|consumer
name|MllpTcpServerConsumer
name|consumer
decl_stmt|;
DECL|field|running
name|boolean
name|running
decl_stmt|;
DECL|field|localAddress
specifier|private
specifier|final
name|String
name|localAddress
decl_stmt|;
DECL|field|remoteAddress
specifier|private
specifier|final
name|String
name|remoteAddress
decl_stmt|;
DECL|field|combinedAddress
specifier|private
specifier|final
name|String
name|combinedAddress
decl_stmt|;
DECL|method|TcpSocketConsumerRunnable (MllpTcpServerConsumer consumer, Socket clientSocket, MllpSocketBuffer mllpBuffer)
specifier|public
name|TcpSocketConsumerRunnable
parameter_list|(
name|MllpTcpServerConsumer
name|consumer
parameter_list|,
name|Socket
name|clientSocket
parameter_list|,
name|MllpSocketBuffer
name|mllpBuffer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
comment|// this.setName(createThreadName(clientSocket));
name|this
operator|.
name|clientSocket
operator|=
name|clientSocket
expr_stmt|;
name|SocketAddress
name|localSocketAddress
init|=
name|clientSocket
operator|.
name|getLocalSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|localSocketAddress
operator|!=
literal|null
condition|)
block|{
name|localAddress
operator|=
name|localSocketAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|localAddress
operator|=
literal|null
expr_stmt|;
block|}
name|SocketAddress
name|remoteSocketAddress
init|=
name|clientSocket
operator|.
name|getRemoteSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteSocketAddress
operator|!=
literal|null
condition|)
block|{
name|remoteAddress
operator|=
name|remoteSocketAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|remoteAddress
operator|=
literal|null
expr_stmt|;
block|}
name|combinedAddress
operator|=
name|MllpSocketBuffer
operator|.
name|formatAddressString
argument_list|(
name|remoteSocketAddress
argument_list|,
name|localSocketAddress
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasKeepAlive
argument_list|()
condition|)
block|{
name|this
operator|.
name|clientSocket
operator|.
name|setKeepAlive
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasTcpNoDelay
argument_list|()
condition|)
block|{
name|this
operator|.
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasReceiveBufferSize
argument_list|()
condition|)
block|{
name|this
operator|.
name|clientSocket
operator|.
name|setReceiveBufferSize
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getReceiveBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasSendBufferSize
argument_list|()
condition|)
block|{
name|this
operator|.
name|clientSocket
operator|.
name|setSendBufferSize
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|clientSocket
operator|.
name|setSoLinger
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Initial Read Timeout
name|this
operator|.
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|initializationException
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to initialize "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|initializationException
argument_list|)
throw|;
block|}
if|if
condition|(
name|mllpBuffer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|mllpBuffer
operator|=
operator|new
name|MllpSocketBuffer
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|mllpBuffer
operator|=
name|mllpBuffer
expr_stmt|;
block|}
block|}
comment|/**      * derive a thread name from the class name, the component URI and the connection information      *<p/>      * The String will in the format<class name>[endpoint key] - [local socket address] -> [remote socket address]      *      * @return the thread name      */
DECL|method|createThreadName (Socket socket)
name|String
name|createThreadName
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
comment|// Get the URI without options
name|String
name|fullEndpointKey
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointKey
argument_list|()
decl_stmt|;
name|String
name|endpointKey
decl_stmt|;
if|if
condition|(
name|fullEndpointKey
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|endpointKey
operator|=
name|fullEndpointKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullEndpointKey
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointKey
operator|=
name|fullEndpointKey
expr_stmt|;
block|}
comment|// Now put it all together
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s[%s] - %s"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|endpointKey
argument_list|,
name|combinedAddress
argument_list|)
return|;
block|}
DECL|method|sendAcknowledgement (byte[] originalHl7MessageBytes, Exchange exchange)
specifier|private
name|void
name|sendAcknowledgement
parameter_list|(
name|byte
index|[]
name|originalHl7MessageBytes
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"entering sendAcknowledgement(byte[], Exchange)"
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|checkBeforeSendProperties
argument_list|(
name|exchange
argument_list|,
name|clientSocket
argument_list|,
name|log
argument_list|)
expr_stmt|;
comment|// Find the acknowledgement body
name|byte
index|[]
name|acknowledgementMessageBytes
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|acknowledgementMessageBytes
operator|==
literal|null
condition|)
block|{
name|acknowledgementMessageBytes
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
name|String
name|acknowledgementMessageType
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|acknowledgementMessageBytes
condition|)
block|{
name|boolean
name|autoAck
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_AUTO_ACKNOWLEDGE
argument_list|,
literal|true
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|autoAck
condition|)
block|{
name|Object
name|acknowledgementBytesProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|)
decl_stmt|;
name|Object
name|acknowledgementStringProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|acknowledgementBytesProperty
operator|==
literal|null
operator|&&
name|acknowledgementStringProperty
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|exceptionMessage
init|=
literal|"Automatic Acknowledgement is disabled and the "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
operator|+
literal|" and "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
operator|+
literal|" exchange properties are null"
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
name|exceptionMessage
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|exceptionMessage
init|=
literal|"Automatic Acknowledgement is disabled and neither the "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
operator|+
literal|"(type = "
operator|+
name|acknowledgementBytesProperty
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|") nor  the"
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
operator|+
literal|"(type = "
operator|+
name|acknowledgementBytesProperty
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|") exchange properties can be converted to byte[]"
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
name|exceptionMessage
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|acknowledgmentTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|acknowledgmentTypeProperty
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|exchange
operator|.
name|getException
argument_list|()
condition|)
block|{
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
block|}
else|else
block|{
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|acknowledgmentTypeProperty
condition|)
block|{
case|case
literal|"AA"
case|:
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
break|break;
case|case
literal|"AE"
case|:
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
break|break;
case|case
literal|"AR"
case|:
name|acknowledgementMessageType
operator|=
literal|"AR"
expr_stmt|;
break|break;
default|default:
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|Hl7AcknowledgementGenerationException
argument_list|(
literal|"Unsupported acknowledgment type: "
operator|+
name|acknowledgmentTypeProperty
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Hl7Util
operator|.
name|generateAcknowledgementPayload
argument_list|(
name|mllpBuffer
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Hl7AcknowledgementGenerationException
name|ackGenerationException
parameter_list|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|ackGenerationException
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|ackGenerationException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|mllpBuffer
operator|.
name|setEnvelopedMessage
argument_list|(
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|bM
init|=
literal|77
decl_stmt|;
specifier|final
name|byte
name|bS
init|=
literal|83
decl_stmt|;
specifier|final
name|byte
name|bA
init|=
literal|65
decl_stmt|;
specifier|final
name|byte
name|bE
init|=
literal|69
decl_stmt|;
specifier|final
name|byte
name|bR
init|=
literal|82
decl_stmt|;
specifier|final
name|byte
name|fieldSeparator
init|=
name|originalHl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
comment|// Acknowledgment is specified in exchange property - determine the acknowledgement type
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalHl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
operator|==
name|i
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|7
operator|<
name|originalHl7MessageBytes
operator|.
name|length
comment|// Make sure we don't run off the end of the message
operator|&&
name|bM
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|1
index|]
operator|&&
name|bS
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|2
index|]
operator|&&
name|bA
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|3
index|]
operator|&&
name|fieldSeparator
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|4
index|]
condition|)
block|{
if|if
condition|(
name|fieldSeparator
operator|!=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|7
index|]
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"MSA-1 is longer than 2-bytes - ignoring trailing bytes"
argument_list|)
expr_stmt|;
block|}
comment|// Found MSA - pull acknowledgement bytes
name|byte
index|[]
name|acknowledgmentTypeBytes
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
operator|=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|5
index|]
expr_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|1
index|]
operator|=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|6
index|]
expr_stmt|;
try|try
block|{
name|acknowledgementMessageType
operator|=
name|IOConverter
operator|.
name|toString
argument_list|(
name|acknowledgmentTypeBytes
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to convert acknowledgement message to string"
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
comment|// Verify it's a valid acknowledgement code
if|if
condition|(
name|bA
operator|!=
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
condition|)
block|{
switch|switch
condition|(
name|acknowledgementMessageBytes
index|[
literal|1
index|]
condition|)
block|{
case|case
name|bA
case|:
case|case
name|bR
case|:
case|case
name|bE
case|:
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid acknowledgement type ["
operator|+
name|acknowledgementMessageType
operator|+
literal|"] found in message - should be AA, AE or AR"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the MLLP_ACKNOWLEDGEMENT_TYPE property is set on the exchange, make sure it matches
name|String
name|acknowledgementTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|acknowledgementTypeProperty
operator|&&
operator|!
name|acknowledgementTypeProperty
operator|.
name|equals
argument_list|(
name|acknowledgementMessageType
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Acknowledgement type found in message ["
operator|+
name|acknowledgementMessageType
operator|+
literal|"] does not match "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
operator|+
literal|" exchange property value ["
operator|+
name|acknowledgementTypeProperty
operator|+
literal|"] - using value found in message"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|Message
name|message
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|acknowledgementMessageType
operator|!=
literal|null
operator|&&
operator|!
name|acknowledgementMessageType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|acknowledgementMessageType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mllpBuffer
operator|.
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
comment|// The mllpBuffer will be used if bufferWrites is set or if auto acknowledgement is used
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|mllpBuffer
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|mllpBuffer
operator|.
name|toHl7String
argument_list|(
name|IOHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send the acknowledgement
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending Acknowledgement: {}"
argument_list|,
name|mllpBuffer
operator|.
name|toPrintFriendlyHl7String
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mllpBuffer
operator|.
name|writeTo
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|acknowledgementDeliveryEx
parameter_list|)
block|{
name|Exception
name|exchangeEx
init|=
operator|new
name|MllpAcknowledgementDeliveryException
argument_list|(
literal|"Failure delivering acknowledgment"
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|exchangeEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mllpBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|acknowledgementMessageBytes
operator|!=
literal|null
operator|&&
name|acknowledgementMessageBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
name|String
name|acknowledgementMessageString
init|=
literal|""
decl_stmt|;
name|String
name|exchangeCharset
init|=
name|IOHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchangeCharset
operator|!=
literal|null
operator|&&
operator|!
name|exchangeCharset
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|acknowledgementMessageString
operator|=
operator|new
name|String
argument_list|(
name|acknowledgementMessageBytes
argument_list|,
name|exchangeCharset
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to covert acknowledgment to string using {} charset - falling back to default charset {}"
argument_list|,
name|exchange
argument_list|,
name|MllpProtocolConstants
operator|.
name|DEFAULT_CHARSET
argument_list|)
expr_stmt|;
name|acknowledgementMessageString
operator|=
operator|new
name|String
argument_list|(
name|acknowledgementMessageBytes
argument_list|,
name|MllpProtocolConstants
operator|.
name|DEFAULT_CHARSET
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|acknowledgementMessageString
operator|=
operator|new
name|String
argument_list|(
name|acknowledgementMessageBytes
argument_list|,
name|MllpProtocolConstants
operator|.
name|DEFAULT_CHARSET
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|acknowledgementMessageString
argument_list|)
expr_stmt|;
comment|// Send the acknowledgement
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending Acknowledgement: {}"
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|acknowledgementMessageBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mllpBuffer
operator|.
name|setEnvelopedMessage
argument_list|(
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|writeTo
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|acknowledgementDeliveryEx
parameter_list|)
block|{
name|Exception
name|exchangeEx
init|=
operator|new
name|MllpAcknowledgementDeliveryException
argument_list|(
literal|"Failure delivering acknowledgment"
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|exchangeEx
argument_list|)
expr_stmt|;
block|}
block|}
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|checkAfterSendProperties
argument_list|(
name|exchange
argument_list|,
name|clientSocket
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
DECL|method|populateHl7DataHeaders (Exchange exchange, Message message, byte[] hl7MessageBytes)
specifier|private
name|void
name|populateHl7DataHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hl7MessageBytes
operator|==
literal|null
operator|||
name|hl7MessageBytes
operator|.
name|length
operator|<
literal|8
condition|)
block|{
comment|// Not enough data to populate anything - just return
return|return;
block|}
comment|// Find the end of the MSH and indexes of the fields in the MSH to populate message headers
specifier|final
name|byte
name|fieldSeparator
init|=
name|hl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
name|int
name|endOfMSH
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldSeparatorIndexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// We should have at least 10 fields
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fieldSeparator
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
name|fieldSeparatorIndexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
comment|// If the MSH Segment doesn't have a trailing field separator, add one so the field can be extracted into a header
if|if
condition|(
name|fieldSeparator
operator|!=
name|hl7MessageBytes
index|[
name|i
operator|-
literal|1
index|]
condition|)
block|{
name|fieldSeparatorIndexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|endOfMSH
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|-
literal|1
operator|==
name|endOfMSH
condition|)
block|{
comment|// TODO:  May want to throw some sort of an Exception here
name|log
operator|.
name|error
argument_list|(
literal|"Population of message headers failed - unable to find the end of the MSH segment"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isHl7Headers
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Populating the HL7 message headers"
argument_list|)
expr_stmt|;
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|IOHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|fieldSeparatorIndexes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|startingFieldSeparatorIndex
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|endingFieldSeparatorIndex
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Only populate the header if there's data in the HL7 field
if|if
condition|(
name|endingFieldSeparatorIndex
operator|-
name|startingFieldSeparatorIndex
operator|>
literal|1
condition|)
block|{
name|String
name|headerName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|2
case|:
comment|// MSH-3
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_SENDING_APPLICATION
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// MSH-4
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_SENDING_FACILITY
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// MSH-5
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_RECEIVING_APPLICATION
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// MSH-6
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_RECEIVING_FACILITY
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// MSH-7
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_TIMESTAMP
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// MSH-8
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_SECURITY
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// MSH-9
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_MESSAGE_TYPE
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// MSH-10
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_MESSAGE_CONTROL
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// MSH-11
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_PROCESSING_ID
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// MSH-12
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_VERSION_ID
expr_stmt|;
break|break;
case|case
literal|17
case|:
comment|// MSH-18
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_CHARSET
expr_stmt|;
break|break;
default|default:
comment|// Not processing this field
continue|continue;
block|}
name|String
name|headerValue
init|=
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|startingFieldSeparatorIndex
operator|+
literal|1
argument_list|,
name|endingFieldSeparatorIndex
operator|-
name|startingFieldSeparatorIndex
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
comment|// For MSH-9, set a couple more headers
if|if
condition|(
name|i
operator|==
literal|8
condition|)
block|{
comment|// final byte componentSeparator = hl7MessageBytes[4];
name|String
name|componentSeparator
init|=
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|String
index|[]
name|components
init|=
name|headerValue
operator|.
name|split
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\Q%s\\E"
argument_list|,
name|componentSeparator
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_EVENT_TYPE
argument_list|,
name|components
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
literal|2
operator|<=
name|components
operator|.
name|length
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_TRIGGER_EVENT
argument_list|,
name|components
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"HL7 Message headers disabled"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processMessage (byte[] hl7MessageBytes)
name|void
name|processMessage
parameter_list|(
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
block|{
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|updateLastConnectionActivityTicks
argument_list|()
expr_stmt|;
comment|// Send the message on to Camel for processing and wait for the response
name|log
operator|.
name|debug
argument_list|(
literal|"Populating the exchange with received message"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
comment|// TODO: Evaluate the CHARSET handling - may not be correct
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|determineCharset
argument_list|(
name|hl7MessageBytes
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|createUoW
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|localAddress
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
argument_list|,
name|localAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteAddress
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
argument_list|,
name|remoteAddress
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_AUTO_ACKNOWLEDGE
argument_list|,
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isAutoAck
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isValidatePayload
argument_list|()
condition|)
block|{
name|String
name|exceptionMessage
init|=
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionMessage
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidMessageException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|populateHl7DataHeaders
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|,
name|hl7MessageBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isStringPayload
argument_list|()
condition|)
block|{
if|if
condition|(
name|hl7MessageBytes
operator|!=
literal|null
operator|&&
name|hl7MessageBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setBody
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|createNewString
argument_list|(
name|hl7MessageBytes
argument_list|,
name|message
operator|.
name|getHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_CHARSET
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setBody
argument_list|(
literal|""
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|.
name|setBody
argument_list|(
name|hl7MessageBytes
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Calling processor"
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|sendAcknowledgement
argument_list|(
name|hl7MessageBytes
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|runtimeEx
parameter_list|)
block|{
throw|throw
name|runtimeEx
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception processing exchange"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|uowEx
parameter_list|)
block|{
comment|// TODO:  Handle this correctly
name|exchange
operator|.
name|setException
argument_list|(
name|uowEx
argument_list|)
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered creating Unit of Work - sending exception to route"
argument_list|,
name|uowEx
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception encountered processing exchange with exception encountered createing Unit of Work"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
finally|finally
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|doneUoW
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|String
name|originalThreadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|createThreadName
argument_list|(
name|clientSocket
argument_list|)
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_CAMEL_CONTEXT_ID
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Route
name|route
init|=
name|consumer
operator|.
name|getRoute
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|String
name|routeId
init|=
name|route
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_ROUTE_ID
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Starting {} for {}"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|combinedAddress
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|hl7MessageBytes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mllpBuffer
operator|.
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
comment|// If we got a complete message on the validation read, process it
name|hl7MessageBytes
operator|=
name|mllpBuffer
operator|.
name|toMllpPayload
argument_list|()
expr_stmt|;
name|mllpBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|processMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|running
operator|&&
literal|null
operator|!=
name|clientSocket
operator|&&
name|clientSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Checking for data ...."
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpBuffer
operator|.
name|readFrom
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|mllpBuffer
operator|.
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|hl7MessageBytes
operator|=
name|mllpBuffer
operator|.
name|toMllpPayload
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Received {} byte message {}"
argument_list|,
name|hl7MessageBytes
operator|.
name|length
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|hl7MessageBytes
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mllpBuffer
operator|.
name|hasLeadingOutOfBandData
argument_list|()
condition|)
block|{
comment|// TODO:  Move the convertion utilities to the MllpSocketBuffer to avoid a byte[] copy
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring leading out-of-band data: {}"
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|mllpBuffer
operator|.
name|getLeadingOutOfBandData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mllpBuffer
operator|.
name|hasTrailingOutOfBandData
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring trailing out-of-band data: {}"
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|mllpBuffer
operator|.
name|getTrailingOutOfBandData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mllpBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|processMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|mllpBuffer
operator|.
name|hasStartOfBlock
argument_list|()
condition|)
block|{
name|byte
index|[]
name|payload
init|=
name|mllpBuffer
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring {} byte un-enveloped payload {}"
argument_list|,
name|payload
operator|.
name|length
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|mllpBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|byte
index|[]
name|payload
init|=
name|mllpBuffer
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Partial {} byte payload received {}"
argument_list|,
name|payload
operator|.
name|length
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
if|if
condition|(
name|mllpBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasIdleTimeout
argument_list|()
condition|)
block|{
name|long
name|currentTicks
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|lastReceivedMessageTicks
init|=
name|consumer
operator|.
name|getConsumerRunnables
argument_list|()
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|long
name|idleTime
init|=
name|currentTicks
operator|-
name|lastReceivedMessageTicks
decl_stmt|;
if|if
condition|(
name|idleTime
operator|>=
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
condition|)
block|{
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|doConnectionClose
argument_list|(
name|clientSocket
argument_list|,
literal|true
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"No data received - ignoring timeout"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
operator|new
name|MllpInvalidMessageException
argument_list|(
literal|"Timeout receiving complete message payload"
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|timeoutEx
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|handleException
argument_list|(
operator|new
name|MllpInvalidMessageException
argument_list|(
literal|"Timeout receiving complete message payload"
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|timeoutEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|mllpSocketEx
parameter_list|)
block|{
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mllpBuffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|consumer
operator|.
name|handleException
argument_list|(
operator|new
name|MllpReceiveException
argument_list|(
literal|"Exception encountered reading payload"
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|mllpSocketEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring exception encountered checking for data"
argument_list|,
name|mllpSocketEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpectedEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception encountered receiving messages"
argument_list|,
name|unexpectedEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|consumer
operator|.
name|getConsumerRunnables
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"{} for {} completed"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|combinedAddress
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|originalThreadName
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_ROUTE_ID
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_CAMEL_CONTEXT_ID
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeSocket ()
specifier|public
name|void
name|closeSocket
parameter_list|()
block|{
name|mllpBuffer
operator|.
name|closeSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
DECL|method|closeSocket (String logMessage)
specifier|public
name|void
name|closeSocket
parameter_list|(
name|String
name|logMessage
parameter_list|)
block|{
name|mllpBuffer
operator|.
name|closeSocket
argument_list|(
name|clientSocket
argument_list|,
name|logMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSocket ()
specifier|public
name|void
name|resetSocket
parameter_list|()
block|{
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
DECL|method|resetSocket (String logMessage)
specifier|public
name|void
name|resetSocket
parameter_list|(
name|String
name|logMessage
parameter_list|)
block|{
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|clientSocket
argument_list|,
name|logMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getLocalAddress ()
specifier|public
name|String
name|getLocalAddress
parameter_list|()
block|{
return|return
name|localAddress
return|;
block|}
DECL|method|getRemoteAddress ()
specifier|public
name|String
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|remoteAddress
return|;
block|}
DECL|method|getCombinedAddress ()
specifier|public
name|String
name|getCombinedAddress
parameter_list|()
block|{
return|return
name|combinedAddress
return|;
block|}
block|}
end_class

end_unit

