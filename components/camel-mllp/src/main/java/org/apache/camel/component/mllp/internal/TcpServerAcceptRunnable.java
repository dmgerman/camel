begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpTcpServerConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|MDCUnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_comment
comment|/**  * Runnable to handle the ServerSocket.accept requests  */
end_comment

begin_class
DECL|class|TcpServerAcceptRunnable
specifier|public
class|class
name|TcpServerAcceptRunnable
implements|implements
name|Runnable
block|{
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|consumer
name|MllpTcpServerConsumer
name|consumer
decl_stmt|;
DECL|field|serverSocket
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|field|running
name|boolean
name|running
decl_stmt|;
DECL|method|TcpServerAcceptRunnable (MllpTcpServerConsumer consumer, ServerSocket serverSocket)
specifier|public
name|TcpServerAcceptRunnable
parameter_list|(
name|MllpTcpServerConsumer
name|consumer
parameter_list|,
name|ServerSocket
name|serverSocket
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|serverSocket
operator|=
name|serverSocket
expr_stmt|;
block|}
comment|/**      * Derive a thread name from the class name, the component URI and the connection information.      *<p/>      * The String will in the format<class name>[endpoint key] - [local socket address]      *      * @return String for thread name      */
DECL|method|createThreadName (ServerSocket serverSocket)
name|String
name|createThreadName
parameter_list|(
name|ServerSocket
name|serverSocket
parameter_list|)
block|{
comment|// Get the classname without the package.  This is a nested class, so we want the parent class name included
name|String
name|fullClassName
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|fullClassName
operator|.
name|substring
argument_list|(
name|fullClassName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Get the URI without options
name|String
name|fullEndpointKey
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointKey
argument_list|()
decl_stmt|;
name|String
name|endpointKey
decl_stmt|;
if|if
condition|(
name|fullEndpointKey
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|endpointKey
operator|=
name|fullEndpointKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullEndpointKey
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointKey
operator|=
name|fullEndpointKey
expr_stmt|;
block|}
comment|// Now put it all together
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s[%s] - %s"
argument_list|,
name|className
argument_list|,
name|endpointKey
argument_list|,
name|serverSocket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * The main ServerSocket.accept() loop      *<p/>      * NOTE:  When a connection is received, the Socket is checked after a brief delay in an attempt to determine if this is a load-balancer probe.  The test is done before the      * ConsumerClientSocketThread is created to avoid creating a large number of short lived threads, which is what can occur if the load balancer polling interval is very short.      */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|String
name|originalThreadName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|createThreadName
argument_list|(
name|serverSocket
argument_list|)
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|put
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_CAMEL_CONTEXT_ID
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Route
name|route
init|=
name|consumer
operator|.
name|getRoute
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|String
name|routeId
init|=
name|route
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_ROUTE_ID
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Starting ServerSocket accept thread for {}"
argument_list|,
name|serverSocket
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|running
operator|&&
literal|null
operator|!=
name|serverSocket
operator|&&
name|serverSocket
operator|.
name|isBound
argument_list|()
operator|&&
operator|!
name|serverSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socket
operator|=
name|serverSocket
operator|.
name|accept
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|updateLastConnectionEstablishedTicks
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
comment|// Didn't get a new connection - keep waiting for one
name|log
operator|.
name|debug
argument_list|(
literal|"Timeout waiting for client connection - keep listening"
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
comment|// This should happen if the component is closed while the accept call is blocking
if|if
condition|(
name|serverSocket
operator|.
name|isBound
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception encountered closing ServerSocket after SocketException on accept() - ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception encountered accepting connection - closing ServerSocket"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverSocket
operator|.
name|isBound
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception encountered closing ServerSocket after exception on accept() - ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
if|if
condition|(
name|MllpSocketBuffer
operator|.
name|isConnectionValid
argument_list|(
name|socket
argument_list|)
condition|)
block|{
comment|// Try and avoid starting client threads for things like security scans and load balancer probes
name|consumer
operator|.
name|startConsumer
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ServerSocket.accept loop finished - closing listener"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|serverSocket
operator|&&
name|serverSocket
operator|.
name|isBound
argument_list|()
operator|&&
operator|!
name|serverSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception encountered closing ServerSocket after accept loop had exited - ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|originalThreadName
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_ROUTE_ID
argument_list|)
expr_stmt|;
name|MDC
operator|.
name|remove
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_CAMEL_CONTEXT_ID
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_class

end_unit

