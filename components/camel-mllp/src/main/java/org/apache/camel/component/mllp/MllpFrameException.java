begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_comment
comment|/**  * Raised when a MLLP Producer or consumer encounters a corrupt MLLP Frame while attempting  * to read or write a MLLP payload.  */
end_comment

begin_class
DECL|class|MllpFrameException
specifier|public
class|class
name|MllpFrameException
extends|extends
name|MllpException
block|{
DECL|field|mllpPayload
specifier|private
specifier|final
name|byte
index|[]
name|mllpPayload
decl_stmt|;
DECL|method|MllpFrameException (String message, byte[] mllpPayload)
specifier|public
name|MllpFrameException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|mllpPayload
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|mllpPayload
operator|=
name|mllpPayload
expr_stmt|;
block|}
DECL|method|MllpFrameException (String message, byte[] mllpPayload, Throwable cause)
specifier|public
name|MllpFrameException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|mllpPayload
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|mllpPayload
operator|=
name|mllpPayload
expr_stmt|;
block|}
DECL|method|getMllpPayload ()
specifier|public
name|byte
index|[]
name|getMllpPayload
parameter_list|()
block|{
return|return
name|mllpPayload
return|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
if|if
condition|(
name|isLogPhi
argument_list|()
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s:\n\tMLLP Payload: %s"
argument_list|,
name|super
operator|.
name|getMessage
argument_list|()
argument_list|,
name|covertBytesToPrintFriendlyString
argument_list|(
name|mllpPayload
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
literal|": {mllpPayload="
argument_list|)
operator|.
name|append
argument_list|(
name|covertBytesToPrintFriendlyString
argument_list|(
name|mllpPayload
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|stringBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

