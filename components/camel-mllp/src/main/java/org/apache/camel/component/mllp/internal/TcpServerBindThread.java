begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpTcpServerConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|MDCUnitOfWork
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_comment
comment|/**  * Runnable to handle the ServerSocket.accept requests  */
end_comment

begin_class
DECL|class|TcpServerBindThread
specifier|public
class|class
name|TcpServerBindThread
extends|extends
name|Thread
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|consumer
specifier|private
specifier|final
name|MllpTcpServerConsumer
name|consumer
decl_stmt|;
DECL|method|TcpServerBindThread (MllpTcpServerConsumer consumer)
specifier|public
name|TcpServerBindThread
parameter_list|(
name|MllpTcpServerConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
comment|// Get the URI without options
name|String
name|fullEndpointKey
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointKey
argument_list|()
decl_stmt|;
name|String
name|endpointKey
decl_stmt|;
if|if
condition|(
name|fullEndpointKey
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|endpointKey
operator|=
name|fullEndpointKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullEndpointKey
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointKey
operator|=
name|fullEndpointKey
expr_stmt|;
block|}
name|this
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s - %s"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|endpointKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Do the initial read on the Socket and try to determine if it has HL7 data, junk, or nothing.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MDC
operator|.
name|put
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_CAMEL_CONTEXT_ID
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Route
name|route
init|=
name|consumer
operator|.
name|getRoute
argument_list|()
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
name|String
name|routeId
init|=
name|route
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|routeId
operator|!=
literal|null
condition|)
block|{
name|MDC
operator|.
name|put
argument_list|(
name|MDCUnitOfWork
operator|.
name|MDC_ROUTE_ID
argument_list|,
name|route
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|ServerSocket
name|serverSocket
init|=
operator|new
name|ServerSocket
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasReceiveBufferSize
argument_list|()
condition|)
block|{
name|serverSocket
operator|.
name|setReceiveBufferSize
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getReceiveBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasReuseAddress
argument_list|()
condition|)
block|{
name|serverSocket
operator|.
name|setReuseAddress
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Accept Timeout
name|serverSocket
operator|.
name|setSoTimeout
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAcceptTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|socketAddress
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHostname
argument_list|()
condition|)
block|{
name|socketAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socketAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getHostname
argument_list|()
argument_list|,
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Attempting to bind to {}"
argument_list|,
name|socketAddress
argument_list|)
expr_stmt|;
name|long
name|startTicks
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|hasBacklog
argument_list|()
condition|)
block|{
name|serverSocket
operator|.
name|bind
argument_list|(
name|socketAddress
argument_list|,
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBacklog
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverSocket
operator|.
name|bind
argument_list|(
name|socketAddress
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|startAcceptThread
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BindException
name|bindException
parameter_list|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|startTicks
operator|+
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBindTimeout
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to bind to address {} within timeout {}"
argument_list|,
name|socketAddress
argument_list|,
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBindTimeout
argument_list|()
argument_list|,
name|bindException
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to bind to address {} - retrying in {} milliseconds"
argument_list|,
name|socketAddress
argument_list|,
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBindRetryInterval
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBindRetryInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|interruptedEx
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Bind to address {} interrupted"
argument_list|,
name|socketAddress
argument_list|,
name|interruptedEx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|super
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|unexpectedEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception encountered binding to address {}"
argument_list|,
name|socketAddress
argument_list|,
name|unexpectedEx
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
operator|!
name|this
operator|.
name|isInterrupted
argument_list|()
operator|&&
operator|!
name|serverSocket
operator|.
name|isBound
argument_list|()
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected exception encountered initializing ServerSocket before attempting to bind"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

