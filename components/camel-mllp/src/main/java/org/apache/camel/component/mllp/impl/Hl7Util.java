begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|END_OF_BLOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|MESSAGE_TERMINATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|SEGMENT_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_class
DECL|class|Hl7Util
specifier|public
specifier|final
class|class
name|Hl7Util
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Hl7Util
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|Hl7Util ()
specifier|private
name|Hl7Util
parameter_list|()
block|{     }
DECL|method|generateInvalidPayloadExceptionMessage (final byte[] hl7Bytes)
specifier|public
specifier|static
name|String
name|generateInvalidPayloadExceptionMessage
parameter_list|(
specifier|final
name|byte
index|[]
name|hl7Bytes
parameter_list|)
block|{
if|if
condition|(
name|hl7Bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|"HL7 payload is null"
return|;
block|}
return|return
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|hl7Bytes
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Verifies that the HL7 payload array      *<p>      * The MLLP protocol does not allow embedded START_OF_BLOCK or END_OF_BLOCK characters.  The END_OF_DATA character      * is allowed (and expected) because it is also the segment delimiter for an HL7 message      *      * @param hl7Bytes the HL7 payload to validate      * @return If the payload is invalid, an error message suitable for inclusion in an exception is returned.  If      * the payload is valid, null is returned;      */
DECL|method|generateInvalidPayloadExceptionMessage (final byte[] hl7Bytes, final int length)
specifier|public
specifier|static
name|String
name|generateInvalidPayloadExceptionMessage
parameter_list|(
specifier|final
name|byte
index|[]
name|hl7Bytes
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|hl7Bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|"HL7 payload is null"
return|;
block|}
if|if
condition|(
name|hl7Bytes
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return
literal|"HL7 payload is empty"
return|;
block|}
if|if
condition|(
name|length
operator|>
name|hl7Bytes
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The length specified for the HL7 payload array<{}> is greater than the actual length of the array<{}> - only validating {} bytes"
argument_list|,
name|length
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hl7Bytes
operator|.
name|length
operator|<
literal|3
operator|||
name|hl7Bytes
index|[
literal|0
index|]
operator|!=
literal|'M'
operator|||
name|hl7Bytes
index|[
literal|1
index|]
operator|!=
literal|'S'
operator|||
name|hl7Bytes
index|[
literal|2
index|]
operator|!=
literal|'H'
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"The first segment of the HL7 payload {%s} is not an MSH segment"
argument_list|,
operator|new
name|String
argument_list|(
name|hl7Bytes
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|int
name|validationLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|hl7Bytes
index|[
name|validationLength
operator|-
literal|2
index|]
operator|!=
name|SEGMENT_DELIMITER
operator|||
name|hl7Bytes
index|[
name|validationLength
operator|-
literal|1
index|]
operator|!=
name|MESSAGE_TERMINATOR
condition|)
block|{
name|String
name|format
init|=
literal|"The HL7 payload terminating bytes [%#x, %#x] are incorrect - expected [%#x, %#x]  {ASCII [<CR>,<LF>]}"
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|hl7Bytes
index|[
name|validationLength
operator|-
literal|2
index|]
argument_list|,
name|hl7Bytes
index|[
name|validationLength
operator|-
literal|1
index|]
argument_list|,
operator|(
name|byte
operator|)
name|SEGMENT_DELIMITER
argument_list|,
operator|(
name|byte
operator|)
name|MESSAGE_TERMINATOR
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|validationLength
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|hl7Bytes
index|[
name|i
index|]
condition|)
block|{
case|case
name|START_OF_BLOCK
case|:
return|return
name|String
operator|.
name|format
argument_list|(
literal|"HL7 payload contains an embedded START_OF_BLOCK {%#x, ASCII<VT>} at index %d"
argument_list|,
name|hl7Bytes
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
return|;
case|case
name|END_OF_BLOCK
case|:
return|return
name|String
operator|.
name|format
argument_list|(
literal|"HL7 payload contains an embedded END_OF_BLOCK {%#x, ASCII<FS>} at index %d"
argument_list|,
name|hl7Bytes
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
return|;
default|default:
comment|// continue on
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

