begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.internal
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpAcknowledgementGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpProtocolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|Hl7Util
specifier|public
specifier|final
class|class
name|Hl7Util
block|{
DECL|field|NULL_REPLACEMENT_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|NULL_REPLACEMENT_VALUE
init|=
literal|"<null>"
decl_stmt|;
DECL|field|EMPTY_REPLACEMENT_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|EMPTY_REPLACEMENT_VALUE
init|=
literal|"<>"
decl_stmt|;
DECL|field|CHARACTER_REPLACEMENTS
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|CHARACTER_REPLACEMENTS
decl_stmt|;
DECL|field|TIMESTAMP_FORMAT
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|TIMESTAMP_FORMAT
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmssSSSZZZZ"
argument_list|)
decl_stmt|;
DECL|field|STRING_BUFFER_PAD_SIZE
specifier|static
specifier|final
name|int
name|STRING_BUFFER_PAD_SIZE
init|=
literal|100
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Hl7Util
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|CHARACTER_REPLACEMENTS
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x00
argument_list|,
literal|"<0x00 NUL>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x01
argument_list|,
literal|"<0x01 SOH>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x02
argument_list|,
literal|"<0x02 STX>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x03
argument_list|,
literal|"<0x03 ETX>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x04
argument_list|,
literal|"<0x04 EOT>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x05
argument_list|,
literal|"<0x05 ENQ>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x06
argument_list|,
literal|"<0x06 ACK>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x07
argument_list|,
literal|"<0x07 BEL>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x08
argument_list|,
literal|"<0x08 BS>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x09
argument_list|,
literal|"<0x09 TAB>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x0A
argument_list|,
literal|"<0x0A LF>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x0B
argument_list|,
literal|"<0x0B VT>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x0C
argument_list|,
literal|"<0x0C FF>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x0D
argument_list|,
literal|"<0x0D CR>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x0E
argument_list|,
literal|"<0x0E SO>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x0F
argument_list|,
literal|"<0x0F SI>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x10
argument_list|,
literal|"<0x10 DLE>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x11
argument_list|,
literal|"<0x11 DC1>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x12
argument_list|,
literal|"<0x12 DC2>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x13
argument_list|,
literal|"<0x13 DC3>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x14
argument_list|,
literal|"<0x14 DC4>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x15
argument_list|,
literal|"<0x15 NAK>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x16
argument_list|,
literal|"<0x16 SYN>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x17
argument_list|,
literal|"<0x17 ETB>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x18
argument_list|,
literal|"<0x18 CAN>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x19
argument_list|,
literal|"<0x19 EM>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x1A
argument_list|,
literal|"<0x1A SUB>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x1B
argument_list|,
literal|"<0x1B ESC>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x1C
argument_list|,
literal|"<0x1C FS>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x1D
argument_list|,
literal|"<0x1D GS>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x1E
argument_list|,
literal|"<0x1E RS>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x1F
argument_list|,
literal|"<0x1F US>"
argument_list|)
expr_stmt|;
name|CHARACTER_REPLACEMENTS
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
literal|0x7F
argument_list|,
literal|"<0x7F DEL>"
argument_list|)
expr_stmt|;
block|}
DECL|method|Hl7Util ()
specifier|private
name|Hl7Util
parameter_list|()
block|{
comment|//utility class, never constructed
block|}
DECL|method|generateInvalidPayloadExceptionMessage (final byte[] hl7Bytes)
specifier|public
specifier|static
name|String
name|generateInvalidPayloadExceptionMessage
parameter_list|(
specifier|final
name|byte
index|[]
name|hl7Bytes
parameter_list|)
block|{
if|if
condition|(
name|hl7Bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|"HL7 payload is null"
return|;
block|}
return|return
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|hl7Bytes
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Verifies that the HL7 payload array<p> The MLLP protocol does not allow embedded START_OF_BLOCK or END_OF_BLOCK characters.  The END_OF_DATA character is allowed (and expected) because it is      * also the segment delimiter for an HL7 message      *      * @param hl7Bytes the HL7 payload to validate      *      * @return If the payload is invalid, an error message suitable for inclusion in an exception is returned.  If the payload is valid, null is returned;      */
DECL|method|generateInvalidPayloadExceptionMessage (final byte[] hl7Bytes, final int length)
specifier|public
specifier|static
name|String
name|generateInvalidPayloadExceptionMessage
parameter_list|(
specifier|final
name|byte
index|[]
name|hl7Bytes
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|hl7Bytes
operator|==
literal|null
condition|)
block|{
return|return
literal|"HL7 payload is null"
return|;
block|}
if|if
condition|(
name|hl7Bytes
operator|.
name|length
operator|<=
literal|0
condition|)
block|{
return|return
literal|"HL7 payload is empty"
return|;
block|}
if|if
condition|(
name|length
operator|>
name|hl7Bytes
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The length specified for the HL7 payload array<{}> is greater than the actual length of the array<{}> - only validating {} bytes"
argument_list|,
name|length
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hl7Bytes
operator|.
name|length
operator|<
literal|3
operator|||
name|hl7Bytes
index|[
literal|0
index|]
operator|!=
literal|'M'
operator|||
name|hl7Bytes
index|[
literal|1
index|]
operator|!=
literal|'S'
operator|||
name|hl7Bytes
index|[
literal|2
index|]
operator|!=
literal|'H'
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"The first segment of the HL7 payload {%s} is not an MSH segment"
argument_list|,
operator|new
name|String
argument_list|(
name|hl7Bytes
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|3
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|int
name|validationLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|hl7Bytes
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|hl7Bytes
index|[
name|validationLength
operator|-
literal|1
index|]
operator|!=
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
operator|&&
name|hl7Bytes
index|[
name|validationLength
operator|-
literal|1
index|]
operator|!=
name|MllpProtocolConstants
operator|.
name|MESSAGE_TERMINATOR
condition|)
block|{
name|String
name|format
init|=
literal|"The HL7 payload terminating byte [%#x] is incorrect - expected [%#x]  {ASCII [<CR>]}"
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|hl7Bytes
index|[
name|validationLength
operator|-
literal|2
index|]
argument_list|,
operator|(
name|byte
operator|)
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|validationLength
condition|;
operator|++
name|i
control|)
block|{
switch|switch
condition|(
name|hl7Bytes
index|[
name|i
index|]
condition|)
block|{
case|case
name|MllpProtocolConstants
operator|.
name|START_OF_BLOCK
case|:
return|return
name|String
operator|.
name|format
argument_list|(
literal|"HL7 payload contains an embedded START_OF_BLOCK {%#x, ASCII<VT>} at index %d"
argument_list|,
name|hl7Bytes
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
return|;
case|case
name|MllpProtocolConstants
operator|.
name|END_OF_BLOCK
case|:
return|return
name|String
operator|.
name|format
argument_list|(
literal|"HL7 payload contains an embedded END_OF_BLOCK {%#x, ASCII<FS>} at index %d"
argument_list|,
name|hl7Bytes
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
return|;
default|default:
comment|// continue on
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Find the field separator indices in the Segment.      *      * NOTE:  The last element of the list will be the index of the end of the segment.      *      * @param hl7MessageBytes the HL7 binary message      * @param startingIndex index of the beginning of the HL7 Segment      *      * @return List of the field separator indices, which may be empty.      */
DECL|method|findFieldSeparatorIndicesInSegment (byte[] hl7MessageBytes, int startingIndex)
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|findFieldSeparatorIndicesInSegment
parameter_list|(
name|byte
index|[]
name|hl7MessageBytes
parameter_list|,
name|int
name|startingIndex
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldSeparatorIndices
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hl7MessageBytes
operator|!=
literal|null
operator|&&
name|hl7MessageBytes
operator|.
name|length
operator|>
name|startingIndex
operator|&&
name|hl7MessageBytes
operator|.
name|length
operator|>
literal|3
condition|)
block|{
specifier|final
name|byte
name|fieldSeparator
init|=
name|hl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startingIndex
init|;
name|i
operator|<
name|hl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fieldSeparator
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
name|fieldSeparatorIndices
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
name|fieldSeparatorIndices
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|fieldSeparatorIndices
return|;
block|}
comment|/**      * Find the String value of MSH-18 (Character set).      *      * @param hl7Message the HL7 binary data to search      *      * @return the String value of MSH-18, or an empty String if not found.      */
DECL|method|findMsh18 (byte[] hl7Message)
specifier|public
specifier|static
name|String
name|findMsh18
parameter_list|(
name|byte
index|[]
name|hl7Message
parameter_list|)
block|{
name|String
name|answer
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|hl7Message
operator|!=
literal|null
operator|&&
name|hl7Message
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldSeparatorIndexes
init|=
name|findFieldSeparatorIndicesInSegment
argument_list|(
name|hl7Message
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldSeparatorIndexes
operator|.
name|size
argument_list|()
operator|>
literal|17
condition|)
block|{
name|int
name|startOfMsh19
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|16
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|length
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|17
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|16
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|answer
operator|=
operator|new
name|String
argument_list|(
name|hl7Message
argument_list|,
name|startOfMsh19
argument_list|,
name|length
argument_list|,
name|MllpComponent
operator|.
name|getDefaultCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|generateAcknowledgementPayload (MllpSocketBuffer mllpSocketBuffer, byte[] hl7MessageBytes, String acknowledgementCode)
specifier|public
specifier|static
name|void
name|generateAcknowledgementPayload
parameter_list|(
name|MllpSocketBuffer
name|mllpSocketBuffer
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|,
name|String
name|acknowledgementCode
parameter_list|)
throws|throws
name|MllpAcknowledgementGenerationException
block|{
name|generateAcknowledgementPayload
argument_list|(
name|mllpSocketBuffer
argument_list|,
name|hl7MessageBytes
argument_list|,
name|acknowledgementCode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|generateAcknowledgementPayload (MllpSocketBuffer mllpSocketBuffer, byte[] hl7MessageBytes, String acknowledgementCode, String msa3)
specifier|public
specifier|static
name|void
name|generateAcknowledgementPayload
parameter_list|(
name|MllpSocketBuffer
name|mllpSocketBuffer
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|,
name|String
name|acknowledgementCode
parameter_list|,
name|String
name|msa3
parameter_list|)
throws|throws
name|MllpAcknowledgementGenerationException
block|{
if|if
condition|(
name|hl7MessageBytes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MllpAcknowledgementGenerationException
argument_list|(
literal|"Null HL7 message received for parsing operation"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldSeparatorIndexes
init|=
name|findFieldSeparatorIndicesInSegment
argument_list|(
name|hl7MessageBytes
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldSeparatorIndexes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MllpAcknowledgementGenerationException
argument_list|(
literal|"Failed to find the end of the MSH Segment while attempting to generate response"
argument_list|,
name|hl7MessageBytes
argument_list|)
throw|;
block|}
if|if
condition|(
name|fieldSeparatorIndexes
operator|.
name|size
argument_list|()
operator|<
literal|8
condition|)
block|{
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Insufficient number of fields found in MSH to generate a response - 10 are required but %d were found"
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|MllpAcknowledgementGenerationException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|)
throw|;
block|}
specifier|final
name|byte
name|fieldSeparator
init|=
name|hl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
comment|// Start building the MLLP Envelope
name|mllpSocketBuffer
operator|.
name|openMllpEnvelope
argument_list|()
expr_stmt|;
comment|// Build the MSH Segment
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|hl7MessageBytes
argument_list|,
literal|0
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// through MSH-2 (without trailing field separator)
name|writeFieldToBuffer
argument_list|(
literal|3
argument_list|,
name|mllpSocketBuffer
argument_list|,
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
argument_list|)
expr_stmt|;
comment|// MSH-5
name|writeFieldToBuffer
argument_list|(
literal|4
argument_list|,
name|mllpSocketBuffer
argument_list|,
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
argument_list|)
expr_stmt|;
comment|// MSH-6
name|writeFieldToBuffer
argument_list|(
literal|1
argument_list|,
name|mllpSocketBuffer
argument_list|,
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
argument_list|)
expr_stmt|;
comment|// MSH-3
name|writeFieldToBuffer
argument_list|(
literal|2
argument_list|,
name|mllpSocketBuffer
argument_list|,
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
argument_list|)
expr_stmt|;
comment|// MSH-4
comment|// MSH-7
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|fieldSeparator
argument_list|)
expr_stmt|;
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|TIMESTAMP_FORMAT
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't copy MSH-8
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|fieldSeparator
argument_list|)
expr_stmt|;
comment|// Need to generate the correct MSH-9
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|fieldSeparator
argument_list|)
expr_stmt|;
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
literal|"ACK"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// MSH-9.1
name|int
name|msh92start
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|+
literal|1
init|;
name|j
operator|<
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|byte
name|componentSeparator
init|=
name|hl7MessageBytes
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|componentSeparator
operator|==
name|hl7MessageBytes
index|[
name|j
index|]
condition|)
block|{
name|msh92start
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
comment|// MSH-9.2
if|if
condition|(
operator|-
literal|1
operator|==
name|msh92start
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Didn't find component separator for MSH-9.2 - sending ACK in MSH-9"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|hl7MessageBytes
argument_list|,
name|msh92start
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|-
name|msh92start
argument_list|)
expr_stmt|;
block|}
comment|// MSH-10 - use the original control ID, but add an "A" as a suffix
name|writeFieldToBuffer
argument_list|(
literal|8
argument_list|,
name|mllpSocketBuffer
argument_list|,
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
argument_list|)
expr_stmt|;
if|if
condition|(
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|>
literal|1
condition|)
block|{
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
block|}
comment|// MSH-10 through the end of the MSH
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|fieldSeparatorIndexes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
argument_list|)
expr_stmt|;
comment|// Build the MSA Segment
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
literal|"MSA"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|fieldSeparator
argument_list|)
expr_stmt|;
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|acknowledgementCode
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|writeFieldToBuffer
argument_list|(
literal|8
argument_list|,
name|mllpSocketBuffer
argument_list|,
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
argument_list|)
expr_stmt|;
comment|// MSH-10 => MSA-2
if|if
condition|(
name|msa3
operator|!=
literal|null
operator|&&
operator|!
name|msa3
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|fieldSeparator
argument_list|)
expr_stmt|;
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|msa3
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
argument_list|)
expr_stmt|;
comment|// Close the MLLP Envelope
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|MllpProtocolConstants
operator|.
name|PAYLOAD_TERMINATOR
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|method|convertToPrintFriendlyString (String phiString)
specifier|public
specifier|static
name|String
name|convertToPrintFriendlyString
parameter_list|(
name|String
name|phiString
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|phiString
condition|)
block|{
return|return
name|NULL_REPLACEMENT_VALUE
return|;
block|}
elseif|else
if|if
condition|(
name|phiString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|EMPTY_REPLACEMENT_VALUE
return|;
block|}
name|int
name|logPhiMaxBytes
init|=
name|MllpComponent
operator|.
name|getLogPhiMaxBytes
argument_list|()
decl_stmt|;
name|int
name|conversionLength
init|=
operator|(
name|logPhiMaxBytes
operator|>
literal|0
operator|)
condition|?
name|Integer
operator|.
name|min
argument_list|(
name|phiString
operator|.
name|length
argument_list|()
argument_list|,
name|logPhiMaxBytes
argument_list|)
else|:
name|phiString
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|conversionLength
operator|+
name|STRING_BUFFER_PAD_SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conversionLength
condition|;
operator|++
name|i
control|)
block|{
name|appendCharacterAsPrintFriendlyString
argument_list|(
name|builder
argument_list|,
name|phiString
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|convertToPrintFriendlyString (byte[] phiBytes)
specifier|public
specifier|static
name|String
name|convertToPrintFriendlyString
parameter_list|(
name|byte
index|[]
name|phiBytes
parameter_list|)
block|{
return|return
name|bytesToPrintFriendlyStringBuilder
argument_list|(
name|phiBytes
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Convert a PHI byte[] to a String, replacing specific non-printable characters with readable strings.      *      * NOTE: this conversion uses the default character set, so not all characters my convert correctly.      *      * @param phiBytes      the PHI byte[] to log      * @param startPosition the starting position/index of the data      * @param endPosition   the ending position/index of the data - will not be included in String      *      * @return a String representation of the byte[]      */
DECL|method|convertToPrintFriendlyString (byte[] phiBytes, int startPosition, int endPosition)
specifier|public
specifier|static
name|String
name|convertToPrintFriendlyString
parameter_list|(
name|byte
index|[]
name|phiBytes
parameter_list|,
name|int
name|startPosition
parameter_list|,
name|int
name|endPosition
parameter_list|)
block|{
return|return
name|bytesToPrintFriendlyStringBuilder
argument_list|(
name|phiBytes
argument_list|,
name|startPosition
argument_list|,
name|endPosition
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Convert a PHI byte[] to a StringBuilder, replacing specific non-printable characters with readable strings.      *      * NOTE: this conversion uses the default character set, so not all characters my convert correctly.      *      * @param phiBytes the PHI byte[] to log      *      * @return      */
DECL|method|bytesToPrintFriendlyStringBuilder (byte[] phiBytes)
specifier|public
specifier|static
name|StringBuilder
name|bytesToPrintFriendlyStringBuilder
parameter_list|(
name|byte
index|[]
name|phiBytes
parameter_list|)
block|{
return|return
name|bytesToPrintFriendlyStringBuilder
argument_list|(
name|phiBytes
argument_list|,
literal|0
argument_list|,
name|phiBytes
operator|!=
literal|null
condition|?
name|phiBytes
operator|.
name|length
else|:
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Convert a PHI byte[] to a StringBuilder, replacing specific non-printable characters with readable strings.      *      * NOTE: this conversion uses the default character set, so not all characters my convert correctly.      *      * @param phiBytes      the PHI byte[] to log      * @param startPosition the starting position/index of the data      * @param endPosition   the ending position/index of the data - will not be included in StringBuilder      *      * @return a String representation of the byte[]      */
DECL|method|bytesToPrintFriendlyStringBuilder (byte[] phiBytes, int startPosition, int endPosition)
specifier|public
specifier|static
name|StringBuilder
name|bytesToPrintFriendlyStringBuilder
parameter_list|(
name|byte
index|[]
name|phiBytes
parameter_list|,
name|int
name|startPosition
parameter_list|,
name|int
name|endPosition
parameter_list|)
block|{
name|StringBuilder
name|answer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|appendBytesAsPrintFriendlyString
argument_list|(
name|answer
argument_list|,
name|phiBytes
argument_list|,
name|startPosition
argument_list|,
name|endPosition
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|appendBytesAsPrintFriendlyString (StringBuilder builder, byte[] phiBytes)
specifier|public
specifier|static
name|void
name|appendBytesAsPrintFriendlyString
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|byte
index|[]
name|phiBytes
parameter_list|)
block|{
name|appendBytesAsPrintFriendlyString
argument_list|(
name|builder
argument_list|,
name|phiBytes
argument_list|,
literal|0
argument_list|,
name|phiBytes
operator|!=
literal|null
condition|?
name|phiBytes
operator|.
name|length
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Append a PHI byte[] to a StringBuilder, replacing specific non-printable characters with readable strings.      *      * NOTE: this conversion uses the default character set, so not all characters my convert correctly.      *      * @param phiBytes      the PHI byte[] to log      * @param startPosition the starting position/index of the data      * @param endPosition   the ending position/index of the data - will not be included in String      */
DECL|method|appendBytesAsPrintFriendlyString (StringBuilder builder, byte[] phiBytes, int startPosition, int endPosition)
specifier|public
specifier|static
name|void
name|appendBytesAsPrintFriendlyString
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|byte
index|[]
name|phiBytes
parameter_list|,
name|int
name|startPosition
parameter_list|,
name|int
name|endPosition
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"StringBuilder cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|phiBytes
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|NULL_REPLACEMENT_VALUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|phiBytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|EMPTY_REPLACEMENT_VALUE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|startPosition
operator|<=
name|endPosition
condition|)
block|{
if|if
condition|(
name|startPosition
operator|<
literal|0
condition|)
block|{
name|startPosition
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|startPosition
operator|<
name|phiBytes
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|endPosition
operator|>=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|endPosition
operator|==
operator|-
literal|1
operator|||
name|endPosition
operator|>=
name|phiBytes
operator|.
name|length
condition|)
block|{
name|endPosition
operator|=
name|phiBytes
operator|.
name|length
expr_stmt|;
block|}
name|int
name|length
init|=
name|endPosition
operator|-
name|startPosition
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|logPhiMaxBytes
init|=
name|MllpComponent
operator|.
name|getLogPhiMaxBytes
argument_list|()
decl_stmt|;
name|int
name|conversionLength
init|=
operator|(
name|logPhiMaxBytes
operator|>
literal|0
operator|)
condition|?
name|Integer
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|logPhiMaxBytes
argument_list|)
else|:
name|length
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|capacity
argument_list|()
operator|-
name|builder
operator|.
name|length
argument_list|()
operator|<
name|conversionLength
operator|+
name|STRING_BUFFER_PAD_SIZE
condition|)
block|{
name|builder
operator|.
name|ensureCapacity
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|+
name|conversionLength
operator|+
name|STRING_BUFFER_PAD_SIZE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|conversionLength
condition|;
operator|++
name|i
control|)
block|{
name|appendCharacterAsPrintFriendlyString
argument_list|(
name|builder
argument_list|,
operator|(
name|char
operator|)
name|phiBytes
index|[
name|startPosition
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|appendCharacterAsPrintFriendlyString (StringBuilder builder, char c)
specifier|static
name|void
name|appendCharacterAsPrintFriendlyString
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|CHARACTER_REPLACEMENTS
operator|.
name|containsKey
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|CHARACTER_REPLACEMENTS
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getCharacterAsPrintFriendlyString (char c)
specifier|public
specifier|static
name|String
name|getCharacterAsPrintFriendlyString
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|CHARACTER_REPLACEMENTS
operator|.
name|containsKey
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|CHARACTER_REPLACEMENTS
operator|.
name|get
argument_list|(
name|c
argument_list|)
return|;
block|}
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/**      * Copy a field from the HL7 Message Bytes to the supplied MllpSocketBuffer.      *      * NOTE:  Internal function - no error checking      *      * @param mllpSocketBuffer the destination for the field      * @param hl7MessageBytes the HL7 message bytes      * @param fieldSeparatorIndexes the list of the indices of the field separators      */
DECL|method|writeFieldToBuffer (int fieldNumber, MllpSocketBuffer mllpSocketBuffer, byte[] hl7MessageBytes, List<Integer> fieldSeparatorIndexes)
specifier|private
specifier|static
name|void
name|writeFieldToBuffer
parameter_list|(
name|int
name|fieldNumber
parameter_list|,
name|MllpSocketBuffer
name|mllpSocketBuffer
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldSeparatorIndexes
parameter_list|)
block|{
name|mllpSocketBuffer
operator|.
name|write
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|fieldNumber
argument_list|)
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|fieldNumber
operator|+
literal|1
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|fieldNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

