begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
operator|.
name|MllpUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_CLOSE_CONNECTION_AFTER_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_CLOSE_CONNECTION_BEFORE_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RESET_CONNECTION_AFTER_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RESET_CONNECTION_BEFORE_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|SEGMENT_DELIMITER
import|;
end_import

begin_comment
comment|/**  * The MLLP producer.  */
end_comment

begin_class
DECL|class|MllpTcpClientProducer
specifier|public
class|class
name|MllpTcpClientProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|endpoint
name|MllpEndpoint
name|endpoint
decl_stmt|;
DECL|field|socket
name|Socket
name|socket
decl_stmt|;
DECL|method|MllpTcpClientProducer (MllpEndpoint endpoint)
specifier|public
name|MllpTcpClientProducer
parameter_list|(
name|MllpEndpoint
name|endpoint
parameter_list|)
throws|throws
name|SocketException
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"MllpTcpClientProducer(endpoint)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"doStart()"
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"doStop()"
argument_list|)
expr_stmt|;
name|MllpUtil
operator|.
name|closeConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"process(exchange)"
argument_list|)
expr_stmt|;
comment|// Check BEFORE_SEND Properties
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_RESET_CONNECTION_BEFORE_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_CLOSE_CONNECTION_BEFORE_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|closeConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
name|Exception
name|connectionException
init|=
name|checkConnection
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|connectionException
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|connectionException
argument_list|)
expr_stmt|;
return|return;
block|}
name|Message
name|message
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
name|message
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|hl7MessageBytes
init|=
name|message
operator|.
name|getMandatoryBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sending message to external system"
argument_list|)
expr_stmt|;
try|try
block|{
name|MllpUtil
operator|.
name|writeFramedPayload
argument_list|(
name|socket
argument_list|,
name|hl7MessageBytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpException
name|mllpEx
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|mllpEx
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Reading acknowledgement from external system"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|acknowledgementBytes
decl_stmt|;
try|try
block|{
name|MllpUtil
operator|.
name|openFrame
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|acknowledgementBytes
operator|=
name|MllpUtil
operator|.
name|closeFrame
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpAcknowledgementTimoutException
argument_list|(
literal|"Acknowledgement timout"
argument_list|,
name|timeoutEx
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|MllpException
name|mllpEx
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|mllpEx
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Populating the exchange with the acknowledgement from the external system"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|acknowledgementBytes
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_LOCAL_ADDRESS
argument_list|,
name|socket
operator|.
name|getLocalAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_REMOTE_ADDRESS
argument_list|,
name|socket
operator|.
name|getRemoteSocketAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now, extract the acknowledgement type and check for a NACK
name|byte
name|fieldDelim
init|=
name|acknowledgementBytes
index|[
literal|3
index|]
decl_stmt|;
comment|// First, find the beginning of the MSA segment - should be the second segment
name|int
name|msaStartIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|acknowledgementBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|SEGMENT_DELIMITER
operator|==
name|acknowledgementBytes
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|byte
name|bM
init|=
literal|77
decl_stmt|;
specifier|final
name|byte
name|bS
init|=
literal|83
decl_stmt|;
specifier|final
name|byte
name|bC
init|=
literal|67
decl_stmt|;
specifier|final
name|byte
name|bA
init|=
literal|65
decl_stmt|;
specifier|final
name|byte
name|bE
init|=
literal|69
decl_stmt|;
specifier|final
name|byte
name|bR
init|=
literal|82
decl_stmt|;
comment|/* We've found the start of a new segment - make sure peeking ahead                            won't run off the end of the array - we need at least 7 more bytes                          */
if|if
condition|(
name|acknowledgementBytes
operator|.
name|length
operator|>
name|i
operator|+
literal|7
condition|)
block|{
comment|// We can safely peek ahead
if|if
condition|(
name|bM
operator|==
name|acknowledgementBytes
index|[
name|i
operator|+
literal|1
index|]
operator|&&
name|bS
operator|==
name|acknowledgementBytes
index|[
name|i
operator|+
literal|2
index|]
operator|&&
name|bA
operator|==
name|acknowledgementBytes
index|[
name|i
operator|+
literal|3
index|]
operator|&&
name|fieldDelim
operator|==
name|acknowledgementBytes
index|[
name|i
operator|+
literal|4
index|]
condition|)
block|{
comment|// Found the beginning of the MSA - the next two bytes should be our acknowledgement code
name|msaStartIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|bA
operator|!=
name|acknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
operator|&&
name|bC
operator|!=
name|acknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
operator|new
name|String
argument_list|(
name|acknowledgementBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|acknowledgemenTypeString
decl_stmt|;
switch|switch
condition|(
name|acknowledgementBytes
index|[
name|i
operator|+
literal|6
index|]
condition|)
block|{
case|case
name|bA
case|:
comment|// We have an AA - make sure that's the end of the field
if|if
condition|(
name|fieldDelim
operator|!=
name|acknowledgementBytes
index|[
name|i
operator|+
literal|7
index|]
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
operator|new
name|String
argument_list|(
name|acknowledgementBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bA
operator|==
name|acknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"AA"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"CA"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|bE
case|:
comment|// We have an AE
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpApplicationErrorAcknowledgementException
argument_list|(
operator|new
name|String
argument_list|(
name|acknowledgementBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bA
operator|==
name|acknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"AE"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"CE"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|bR
case|:
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpApplicationRejectAcknowledgementException
argument_list|(
operator|new
name|String
argument_list|(
name|acknowledgementBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bA
operator|==
name|acknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"AR"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
literal|"CR"
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
operator|new
name|String
argument_list|(
name|acknowledgementBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|-
literal|1
operator|==
name|msaStartIndex
condition|)
block|{
comment|// Didn't find an MSA
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
operator|new
name|String
argument_list|(
name|acknowledgementBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check AFTER_SEND Properties
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_RESET_CONNECTION_AFTER_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_CLOSE_CONNECTION_AFTER_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|closeConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Validate the TCP Connection      *      * @return null if the connection is valid, otherwise the Exception encounted checking the connection      */
DECL|method|checkConnection ()
name|Exception
name|checkConnection
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|socket
operator|||
name|socket
operator|.
name|isClosed
argument_list|()
operator|||
operator|!
name|socket
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|socket
operator|=
operator|new
name|Socket
argument_list|()
expr_stmt|;
try|try
block|{
name|socket
operator|.
name|setKeepAlive
argument_list|(
name|endpoint
operator|.
name|keepAlive
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setTcpNoDelay
argument_list|(
name|endpoint
operator|.
name|tcpNoDelay
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|endpoint
operator|.
name|receiveBufferSize
condition|)
block|{
name|socket
operator|.
name|setReceiveBufferSize
argument_list|(
name|endpoint
operator|.
name|receiveBufferSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|endpoint
operator|.
name|sendBufferSize
condition|)
block|{
name|socket
operator|.
name|setSendBufferSize
argument_list|(
name|endpoint
operator|.
name|sendBufferSize
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|setReuseAddress
argument_list|(
name|endpoint
operator|.
name|reuseAddress
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setSoLinger
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Read Timeout
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|endpoint
operator|.
name|receiveTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
name|SocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|endpoint
operator|.
name|getHostname
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Connecting to socket on {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
try|try
block|{
name|socket
operator|.
name|connect
argument_list|(
name|address
argument_list|,
name|endpoint
operator|.
name|connectTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

