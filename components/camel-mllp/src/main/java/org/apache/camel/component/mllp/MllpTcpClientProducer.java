begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|Hl7Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|MllpSocketBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The MLLP producer.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"MLLP Producer"
argument_list|)
DECL|class|MllpTcpClientProducer
specifier|public
class|class
name|MllpTcpClientProducer
extends|extends
name|DefaultProducer
implements|implements
name|Runnable
block|{
DECL|field|log
specifier|final
name|Logger
name|log
decl_stmt|;
DECL|field|mllpBuffer
specifier|final
name|MllpSocketBuffer
name|mllpBuffer
decl_stmt|;
DECL|field|socket
name|Socket
name|socket
decl_stmt|;
DECL|field|idleTimeoutExecutor
name|ScheduledExecutorService
name|idleTimeoutExecutor
decl_stmt|;
DECL|field|cachedLocalAddress
specifier|private
name|String
name|cachedLocalAddress
decl_stmt|;
DECL|field|cachedRemoteAddress
specifier|private
name|String
name|cachedRemoteAddress
decl_stmt|;
DECL|field|cachedCombinedAddress
specifier|private
name|String
name|cachedCombinedAddress
decl_stmt|;
DECL|method|MllpTcpClientProducer (MllpEndpoint endpoint)
specifier|public
name|MllpTcpClientProducer
parameter_list|(
name|MllpEndpoint
name|endpoint
parameter_list|)
throws|throws
name|SocketException
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s.%s.%d"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getHostname
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Constructing MllpTcpClientProducer for endpoint URI {}"
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|=
operator|new
name|MllpSocketBuffer
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Last activity time"
argument_list|)
DECL|method|getLastActivityTime ()
specifier|public
name|Date
name|getLastActivityTime
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getLastConnectionActivityTime
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Connection"
argument_list|)
DECL|method|getConnectionAddress ()
specifier|public
name|String
name|getConnectionAddress
parameter_list|()
block|{
if|if
condition|(
name|cachedCombinedAddress
operator|!=
literal|null
condition|)
block|{
return|return
name|cachedCombinedAddress
return|;
block|}
return|return
name|MllpSocketBuffer
operator|.
name|formatAddressString
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Close Connection"
argument_list|)
DECL|method|closeConnection ()
specifier|public
name|void
name|closeConnection
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Close Connection for address {} called via JMX"
argument_list|,
name|getConnectionAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|closeSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Reset Connection"
argument_list|)
DECL|method|resetConnection ()
specifier|public
name|void
name|resetConnection
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reset Connection for address {} requested via JMX"
argument_list|,
name|getConnectionAddress
argument_list|()
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasIdleTimeout
argument_list|()
condition|)
block|{
comment|// Get the URI without options
name|String
name|fullEndpointKey
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointKey
argument_list|()
decl_stmt|;
name|String
name|endpointKey
decl_stmt|;
if|if
condition|(
name|fullEndpointKey
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|endpointKey
operator|=
name|fullEndpointKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullEndpointKey
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointKey
operator|=
name|fullEndpointKey
expr_stmt|;
block|}
name|idleTimeoutExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|IdleTimeoutThreadFactory
argument_list|(
name|endpointKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|idleTimeoutExecutor
operator|!=
literal|null
condition|)
block|{
name|idleTimeoutExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|idleTimeoutExecutor
operator|=
literal|null
expr_stmt|;
block|}
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|MllpException
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"process({}) [{}] - entering"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|updateLastConnectionActivityTicks
argument_list|()
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|checkBeforeSendProperties
argument_list|(
name|exchange
argument_list|,
name|socket
argument_list|,
name|log
argument_list|)
expr_stmt|;
comment|// Establish a connection if needed
try|try
block|{
name|checkConnection
argument_list|()
expr_stmt|;
if|if
condition|(
name|cachedLocalAddress
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
argument_list|,
name|cachedLocalAddress
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cachedRemoteAddress
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
argument_list|,
name|cachedRemoteAddress
argument_list|)
expr_stmt|;
block|}
comment|// Send the message to the external system
name|byte
index|[]
name|hl7MessageBytes
init|=
literal|null
decl_stmt|;
name|Object
name|messageBody
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageBody
operator|==
literal|null
condition|)
block|{
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"process(%s) [%s] - message body is null"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidMessageException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|messageBody
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|hl7MessageBytes
operator|=
operator|(
name|byte
index|[]
operator|)
name|messageBody
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messageBody
operator|instanceof
name|String
condition|)
block|{
name|String
name|stringBody
init|=
operator|(
name|String
operator|)
name|messageBody
decl_stmt|;
name|hl7MessageBytes
operator|=
name|stringBody
operator|.
name|getBytes
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getCharset
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasCharsetName
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getCharsetName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"process({}) [{}] - sending message to external system"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpBuffer
operator|.
name|setEnvelopedMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|writeTo
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|writeEx
parameter_list|)
block|{
comment|// Connection may have been reset - try one more time
name|log
operator|.
name|debug
argument_list|(
literal|"process({}) [{}] - exception encountered writing payload - attempting reconnect"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|,
name|writeEx
argument_list|)
expr_stmt|;
try|try
block|{
name|checkConnection
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"process({}) [{}] - reconnected succeeded - resending payload"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpBuffer
operator|.
name|writeTo
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|retryWriteEx
parameter_list|)
block|{
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"process(%s) [%s] - exception encountered attempting to write payload after reconnect"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|exceptionMessage
argument_list|,
name|retryWriteEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpWriteException
argument_list|(
name|exceptionMessage
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|retryWriteEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|reconnectEx
parameter_list|)
block|{
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"process(%s) [%s] - exception encountered attempting to reconnect"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|exceptionMessage
argument_list|,
name|reconnectEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpWriteException
argument_list|(
name|exceptionMessage
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|writeEx
argument_list|)
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"process({}) [{}] - reading acknowledgement from external system"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mllpBuffer
operator|.
name|readFrom
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|receiveAckEx
parameter_list|)
block|{
comment|// Connection may have been reset - try one more time
name|log
operator|.
name|debug
argument_list|(
literal|"process({}) [{}] - exception encountered reading acknowledgement - attempting reconnect"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|,
name|receiveAckEx
argument_list|)
expr_stmt|;
try|try
block|{
name|checkConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|reconnectEx
parameter_list|)
block|{
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"process(%s) [%s] - exception encountered attempting to reconnect after acknowledgement read failure"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|exceptionMessage
argument_list|,
name|reconnectEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpAcknowledgementReceiveException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|receiveAckEx
argument_list|)
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"process({}) [{}] - resending payload after successful reconnect"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpBuffer
operator|.
name|setEnvelopedMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|writeTo
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|writeRetryEx
parameter_list|)
block|{
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"process(%s) [%s] - exception encountered attempting to write payload after read failure and successful reconnect"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|exceptionMessage
argument_list|,
name|writeRetryEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpWriteException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|receiveAckEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"process({}) [{}] - resend succeeded - reading acknowledgement from {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
try|try
block|{
name|mllpBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mllpBuffer
operator|.
name|readFrom
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|secondReceiveEx
parameter_list|)
block|{
name|String
name|exceptionMessageFormat
init|=
name|mllpBuffer
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"process(%s) [%s] - exception encountered reading MLLP Acknowledgement after successful reconnect and resend"
else|:
literal|"process(%s) [%s] - exception encountered reading complete MLLP Acknowledgement after successful reconnect and resend"
decl_stmt|;
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
name|exceptionMessageFormat
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|exceptionMessage
argument_list|,
name|secondReceiveEx
argument_list|)
expr_stmt|;
comment|// Send the original exception to the exchange
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpAcknowledgementReceiveException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|receiveAckEx
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|secondReadTimeoutEx
parameter_list|)
block|{
name|String
name|exceptionMessageFormat
init|=
name|mllpBuffer
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"process(%s) [%s] - timeout receiving MLLP Acknowledgment after successful reconnect and resend"
else|:
literal|"process(%s) [%s] - timeout receiving complete MLLP Acknowledgment after successful reconnect and resend"
decl_stmt|;
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
name|exceptionMessageFormat
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|exceptionMessage
argument_list|,
name|secondReadTimeoutEx
argument_list|)
expr_stmt|;
comment|// Send the original exception to the exchange
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpAcknowledgementTimeoutException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|receiveAckEx
argument_list|)
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
name|String
name|exceptionMessageFormat
init|=
name|mllpBuffer
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"process(%s) [%s] - timeout receiving MLLP Acknowledgment"
else|:
literal|"process(%s) [%s] - timeout receiving complete MLLP Acknowledgment"
decl_stmt|;
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
name|exceptionMessageFormat
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|exceptionMessage
argument_list|,
name|timeoutEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpAcknowledgementTimeoutException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|,
name|timeoutEx
argument_list|)
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|mllpBuffer
operator|.
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
name|byte
index|[]
name|acknowledgementBytes
init|=
name|mllpBuffer
operator|.
name|toMllpPayload
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"process({}) [{}] - populating message headers with the acknowledgement from the external system"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|acknowledgementBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|acknowledgementBytes
operator|!=
literal|null
operator|&&
name|acknowledgementBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
operator|new
name|String
argument_list|(
name|acknowledgementBytes
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getCharset
argument_list|(
name|exchange
argument_list|,
name|acknowledgementBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isValidatePayload
argument_list|()
condition|)
block|{
name|String
name|exceptionMessage
init|=
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|acknowledgementBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionMessage
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|acknowledgementBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"process({}) [{}] - processing the acknowledgement from the external system"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|processAcknowledgment
argument_list|(
name|hl7MessageBytes
argument_list|,
name|acknowledgementBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpNegativeAcknowledgementException
name|nackEx
parameter_list|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|nackEx
operator|.
name|getAcknowledgmentType
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|nackEx
argument_list|)
expr_stmt|;
block|}
name|getEndpoint
argument_list|()
operator|.
name|checkAfterSendProperties
argument_list|(
name|exchange
argument_list|,
name|socket
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|exceptionMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"process(%s) [%s] - invalid acknowledgement received"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|mllpBuffer
operator|.
name|toByteArrayAndReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"process({}) [{}] - IOException encountered checking connection"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|ioEx
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mllpBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"process({}) [{}] - exiting"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
DECL|method|processAcknowledgment (byte[] hl7MessageBytes, byte[] hl7AcknowledgementBytes)
specifier|private
name|String
name|processAcknowledgment
parameter_list|(
name|byte
index|[]
name|hl7MessageBytes
parameter_list|,
name|byte
index|[]
name|hl7AcknowledgementBytes
parameter_list|)
throws|throws
name|MllpException
block|{
name|String
name|acknowledgementType
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|hl7AcknowledgementBytes
operator|!=
literal|null
operator|&&
name|hl7AcknowledgementBytes
operator|.
name|length
operator|>
literal|3
condition|)
block|{
comment|// Extract the acknowledgement type and check for a NACK
name|byte
name|fieldDelim
init|=
name|hl7AcknowledgementBytes
index|[
literal|3
index|]
decl_stmt|;
comment|// First, find the beginning of the MSA segment - should be the second segment
name|int
name|msaStartIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hl7AcknowledgementBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
index|]
condition|)
block|{
specifier|final
name|byte
name|bM
init|=
literal|77
decl_stmt|;
specifier|final
name|byte
name|bS
init|=
literal|83
decl_stmt|;
specifier|final
name|byte
name|bC
init|=
literal|67
decl_stmt|;
specifier|final
name|byte
name|bA
init|=
literal|65
decl_stmt|;
specifier|final
name|byte
name|bE
init|=
literal|69
decl_stmt|;
specifier|final
name|byte
name|bR
init|=
literal|82
decl_stmt|;
comment|/* We've found the start of a new segment - make sure peeking ahead                        won't run off the end of the array - we need at least 7 more bytes                      */
if|if
condition|(
name|hl7AcknowledgementBytes
operator|.
name|length
operator|>
name|i
operator|+
literal|7
condition|)
block|{
comment|// We can safely peek ahead
if|if
condition|(
name|bM
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|1
index|]
operator|&&
name|bS
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|2
index|]
operator|&&
name|bA
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|3
index|]
operator|&&
name|fieldDelim
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|4
index|]
condition|)
block|{
comment|// Found the beginning of the MSA - the next two bytes should be our acknowledgement code
name|msaStartIndex
operator|=
name|i
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|bA
operator|!=
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
operator|&&
name|bC
operator|!=
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
name|String
name|errorMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"processAcknowledgment(hl7MessageBytes[%d], hl7AcknowledgementBytes[%d]) - unsupported acknowledgement type: '%s'"
argument_list|,
name|hl7MessageBytes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|hl7MessageBytes
operator|.
name|length
argument_list|,
name|hl7AcknowledgementBytes
operator|.
name|length
argument_list|,
operator|new
name|String
argument_list|(
name|hl7AcknowledgementBytes
argument_list|,
name|i
operator|+
literal|5
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|hl7AcknowledgementBytes
argument_list|)
throw|;
block|}
else|else
block|{
switch|switch
condition|(
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|6
index|]
condition|)
block|{
case|case
name|bA
case|:
comment|// We have an AA or CA
if|if
condition|(
name|bA
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
name|acknowledgementType
operator|=
literal|"AA"
expr_stmt|;
block|}
else|else
block|{
name|acknowledgementType
operator|=
literal|"CA"
expr_stmt|;
block|}
break|break;
case|case
name|bE
case|:
comment|// We have an AE or CE
if|if
condition|(
name|bA
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
throw|throw
operator|new
name|MllpApplicationErrorAcknowledgementException
argument_list|(
name|hl7MessageBytes
argument_list|,
name|hl7AcknowledgementBytes
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|MllpCommitErrorAcknowledgementException
argument_list|(
name|hl7MessageBytes
argument_list|,
name|hl7AcknowledgementBytes
argument_list|)
throw|;
block|}
case|case
name|bR
case|:
comment|// We have an AR or CR
if|if
condition|(
name|bA
operator|==
name|hl7AcknowledgementBytes
index|[
name|i
operator|+
literal|5
index|]
condition|)
block|{
throw|throw
operator|new
name|MllpApplicationRejectAcknowledgementException
argument_list|(
name|hl7MessageBytes
argument_list|,
name|hl7AcknowledgementBytes
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|MllpCommitRejectAcknowledgementException
argument_list|(
name|hl7MessageBytes
argument_list|,
name|hl7AcknowledgementBytes
argument_list|)
throw|;
block|}
default|default:
name|String
name|errorMessage
init|=
literal|"Unsupported acknowledgement type: "
operator|+
operator|new
name|String
argument_list|(
name|hl7AcknowledgementBytes
argument_list|,
name|i
operator|+
literal|5
argument_list|,
literal|2
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|hl7AcknowledgementBytes
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|-
literal|1
operator|==
name|msaStartIndex
operator|&&
name|getConfiguration
argument_list|()
operator|.
name|isValidatePayload
argument_list|()
condition|)
block|{
comment|// Didn't find an MSA
throw|throw
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
literal|"MSA Not found in acknowledgement"
argument_list|,
name|hl7MessageBytes
argument_list|,
name|hl7AcknowledgementBytes
argument_list|)
throw|;
block|}
block|}
return|return
name|acknowledgementType
return|;
block|}
comment|/**      * Validate the TCP Connection      *      * @return null if the connection is valid, otherwise the Exception encounted checking the connection      */
DECL|method|checkConnection ()
name|void
name|checkConnection
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|socket
operator|||
name|socket
operator|.
name|isClosed
argument_list|()
operator|||
operator|!
name|socket
operator|.
name|isConnected
argument_list|()
condition|)
block|{
if|if
condition|(
name|socket
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"checkConnection() - Socket is null - attempting to establish connection"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"checkConnection() - Socket {} is closed - attempting to establish new connection"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|socket
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"checkConnection() - Socket {} is not connected - attempting to establish new connection"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
name|Socket
name|newSocket
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasKeepAlive
argument_list|()
condition|)
block|{
name|newSocket
operator|.
name|setKeepAlive
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getKeepAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasTcpNoDelay
argument_list|()
condition|)
block|{
name|newSocket
operator|.
name|setTcpNoDelay
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getTcpNoDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasReceiveBufferSize
argument_list|()
condition|)
block|{
name|newSocket
operator|.
name|setReceiveBufferSize
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getReceiveBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasSendBufferSize
argument_list|()
condition|)
block|{
name|newSocket
operator|.
name|setSendBufferSize
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getSendBufferSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasReuseAddress
argument_list|()
condition|)
block|{
name|newSocket
operator|.
name|setReuseAddress
argument_list|(
name|getConfiguration
argument_list|()
operator|.
name|getReuseAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newSocket
operator|.
name|setSoLinger
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|socketAddress
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|getEndpoint
argument_list|()
operator|.
name|getHostname
argument_list|()
condition|)
block|{
name|socketAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socketAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getHostname
argument_list|()
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newSocket
operator|.
name|connect
argument_list|(
name|socketAddress
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getConnectTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"checkConnection() - established new connection {}"
argument_list|,
name|newSocket
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|updateLastConnectionEstablishedTicks
argument_list|()
expr_stmt|;
name|socket
operator|=
name|newSocket
expr_stmt|;
name|SocketAddress
name|localSocketAddress
init|=
name|socket
operator|.
name|getLocalSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|localSocketAddress
operator|!=
literal|null
condition|)
block|{
name|cachedLocalAddress
operator|=
name|localSocketAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|SocketAddress
name|remoteSocketAddress
init|=
name|socket
operator|.
name|getRemoteSocketAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteSocketAddress
operator|!=
literal|null
condition|)
block|{
name|cachedRemoteAddress
operator|=
name|remoteSocketAddress
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|cachedCombinedAddress
operator|=
name|MllpSocketBuffer
operator|.
name|formatAddressString
argument_list|(
name|localSocketAddress
argument_list|,
name|remoteSocketAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasIdleTimeout
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Scheduling initial idle producer connection check of {} in {} milliseconds"
argument_list|,
name|getConnectionAddress
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|idleTimeoutExecutor
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"checkConnection() - Connection {} is still valid - no new connection required"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Check for idle connection      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasIdleTimeout
argument_list|()
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|socket
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
operator|&&
name|socket
operator|.
name|isConnected
argument_list|()
condition|)
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|hasLastConnectionActivityTicks
argument_list|()
condition|)
block|{
name|long
name|idleTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getEndpoint
argument_list|()
operator|.
name|getLastConnectionActivityTicks
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Checking {} for idle connection: {} - {}"
argument_list|,
name|getConnectionAddress
argument_list|()
argument_list|,
name|idleTime
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idleTime
operator|>=
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"MLLP Connection idle time of '{}' milliseconds met or exceeded the idle producer timeout of '{}' milliseconds - resetting connection"
argument_list|,
name|idleTime
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|minDelay
init|=
literal|100
decl_stmt|;
name|long
name|delay
init|=
name|Long
operator|.
name|min
argument_list|(
name|Long
operator|.
name|max
argument_list|(
name|minDelay
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
operator|-
name|idleTime
argument_list|)
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Scheduling idle producer connection check of {} in {} milliseconds"
argument_list|,
name|getConnectionAddress
argument_list|()
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
name|idleTimeoutExecutor
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No activity detected since initial connection - scheduling idle producer connection check in {} milliseconds"
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|idleTimeoutExecutor
operator|.
name|schedule
argument_list|(
name|this
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getIdleTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|IdleTimeoutThreadFactory
specifier|static
class|class
name|IdleTimeoutThreadFactory
implements|implements
name|ThreadFactory
block|{
DECL|field|endpointKey
specifier|final
name|String
name|endpointKey
decl_stmt|;
DECL|method|IdleTimeoutThreadFactory (String endpointKey)
name|IdleTimeoutThreadFactory
parameter_list|(
name|String
name|endpointKey
parameter_list|)
block|{
name|this
operator|.
name|endpointKey
operator|=
name|endpointKey
expr_stmt|;
block|}
DECL|method|newThread (Runnable r)
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|timeoutThread
init|=
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|timeoutThread
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s[%s]-idle-timeout-thread"
argument_list|,
name|MllpTcpClientProducer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|endpointKey
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|timeoutThread
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|MllpEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|MllpEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|MllpConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
block|}
end_class

end_unit

