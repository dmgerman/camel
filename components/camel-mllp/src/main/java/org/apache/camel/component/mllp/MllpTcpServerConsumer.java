begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|Hl7Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|MllpSocketBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|TcpServerAcceptThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|TcpServerBindThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|TcpServerConsumerValidationRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|TcpSocketConsumerRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|mllp
operator|.
name|Hl7AcknowledgementGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The MLLP consumer.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"MLLP Producer"
argument_list|)
DECL|class|MllpTcpServerConsumer
specifier|public
class|class
name|MllpTcpServerConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|log
specifier|final
name|Logger
name|log
decl_stmt|;
DECL|field|validationExecutor
specifier|final
name|ExecutorService
name|validationExecutor
decl_stmt|;
DECL|field|consumerExecutor
specifier|final
name|ExecutorService
name|consumerExecutor
decl_stmt|;
DECL|field|bindThread
name|TcpServerBindThread
name|bindThread
decl_stmt|;
DECL|field|acceptThread
name|TcpServerAcceptThread
name|acceptThread
decl_stmt|;
DECL|field|consumerRunnables
name|Map
argument_list|<
name|TcpSocketConsumerRunnable
argument_list|,
name|Long
argument_list|>
name|consumerRunnables
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MllpTcpServerConsumer (MllpEndpoint endpoint, Processor processor)
specifier|public
name|MllpTcpServerConsumer
parameter_list|(
name|MllpEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s.%d"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|validationExecutor
operator|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
expr_stmt|;
name|consumerExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getMaxConcurrentConsumers
argument_list|()
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getAcceptTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Last activity time"
argument_list|)
DECL|method|getLastActivityTimes ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
name|getLastActivityTimes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
name|answer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TcpSocketConsumerRunnable
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|consumerRunnables
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TcpSocketConsumerRunnable
name|consumerRunnable
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumerRunnable
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|put
argument_list|(
name|consumerRunnable
operator|.
name|getCombinedAddress
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Close Connections"
argument_list|)
DECL|method|closeConnections ()
specifier|public
name|void
name|closeConnections
parameter_list|()
block|{
for|for
control|(
name|TcpSocketConsumerRunnable
name|consumerRunnable
range|:
name|consumerRunnables
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|consumerRunnable
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Close Connection called via JMX for address {}"
argument_list|,
name|consumerRunnable
operator|.
name|getCombinedAddress
argument_list|()
argument_list|)
expr_stmt|;
name|consumerRunnable
operator|.
name|closeSocket
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Reset Connections"
argument_list|)
DECL|method|resetConnections ()
specifier|public
name|void
name|resetConnections
parameter_list|()
block|{
for|for
control|(
name|TcpSocketConsumerRunnable
name|consumerRunnable
range|:
name|consumerRunnables
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|consumerRunnable
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reset Connection called via JMX for address {}"
argument_list|,
name|consumerRunnable
operator|.
name|getCombinedAddress
argument_list|()
argument_list|)
expr_stmt|;
name|consumerRunnable
operator|.
name|resetSocket
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|MllpEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|MllpEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"doStop()"
argument_list|)
expr_stmt|;
comment|// Close any client sockets that are currently open
for|for
control|(
name|TcpSocketConsumerRunnable
name|consumerClientSocketThread
range|:
name|consumerRunnables
operator|.
name|keySet
argument_list|()
control|)
block|{
name|consumerClientSocketThread
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|acceptThread
operator|!=
literal|null
condition|)
block|{
name|acceptThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|acceptThread
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|bindThread
operator|!=
literal|null
condition|)
block|{
name|bindThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|bindThread
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|bindThread
operator|==
literal|null
operator|||
operator|!
name|bindThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|bindThread
operator|=
operator|new
name|TcpServerBindThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isLenientBind
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"doStart() - starting bind thread"
argument_list|)
expr_stmt|;
name|bindThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"doStart() - attempting to bind to port {}"
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|bindThread
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|acceptThread
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BindException
argument_list|(
literal|"Failed to bind to port "
operator|+
name|getEndpoint
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
name|consumerExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
if|if
condition|(
name|acceptThread
operator|!=
literal|null
condition|)
block|{
name|acceptThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|validationExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
DECL|method|handleMessageTimeout (String message, byte[] payload, Throwable cause)
specifier|public
name|void
name|handleMessageTimeout
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
operator|new
name|MllpInvalidMessageException
argument_list|(
name|message
argument_list|,
name|payload
argument_list|,
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMessageException (String message, byte[] payload, Throwable cause)
specifier|public
name|void
name|handleMessageException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
operator|new
name|MllpReceiveException
argument_list|(
name|message
argument_list|,
name|payload
argument_list|,
name|cause
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|MllpConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getConsumerRunnables ()
specifier|public
name|Map
argument_list|<
name|TcpSocketConsumerRunnable
argument_list|,
name|Long
argument_list|>
name|getConsumerRunnables
parameter_list|()
block|{
return|return
name|consumerRunnables
return|;
block|}
DECL|method|validateConsumer (Socket clientSocket)
specifier|public
name|void
name|validateConsumer
parameter_list|(
name|Socket
name|clientSocket
parameter_list|)
block|{
name|MllpSocketBuffer
name|mllpBuffer
init|=
operator|new
name|MllpSocketBuffer
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|TcpServerConsumerValidationRunnable
name|client
init|=
operator|new
name|TcpServerConsumerValidationRunnable
argument_list|(
name|this
argument_list|,
name|clientSocket
argument_list|,
name|mllpBuffer
argument_list|)
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"validateConsumer({}) - submitting client for validation"
argument_list|,
name|clientSocket
argument_list|)
expr_stmt|;
name|validationExecutor
operator|.
name|submit
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|rejectedExecutionEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"validateConsumer({}) - cannot validate client - max validations already active"
argument_list|,
name|clientSocket
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startAcceptThread (ServerSocket serverSocket)
specifier|public
name|void
name|startAcceptThread
parameter_list|(
name|ServerSocket
name|serverSocket
parameter_list|)
block|{
name|acceptThread
operator|=
operator|new
name|TcpServerAcceptThread
argument_list|(
name|this
argument_list|,
name|serverSocket
argument_list|)
expr_stmt|;
name|acceptThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|startConsumer (Socket clientSocket, MllpSocketBuffer mllpBuffer)
specifier|public
name|void
name|startConsumer
parameter_list|(
name|Socket
name|clientSocket
parameter_list|,
name|MllpSocketBuffer
name|mllpBuffer
parameter_list|)
block|{
name|TcpSocketConsumerRunnable
name|client
init|=
operator|new
name|TcpSocketConsumerRunnable
argument_list|(
name|this
argument_list|,
name|clientSocket
argument_list|,
name|mllpBuffer
argument_list|)
decl_stmt|;
name|consumerRunnables
operator|.
name|put
argument_list|(
name|client
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"startConsumer({}) - starting consumer"
argument_list|,
name|clientSocket
argument_list|)
expr_stmt|;
name|consumerExecutor
operator|.
name|submit
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|updateLastConnectionEstablishedTicks
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|rejectedExecutionEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"startConsumer({}) - cannot start consumer - max consumers already active"
argument_list|,
name|clientSocket
argument_list|)
expr_stmt|;
name|mllpBuffer
operator|.
name|resetSocket
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processMessage (byte[] hl7MessageBytes, TcpSocketConsumerRunnable consumerRunnable)
specifier|public
name|void
name|processMessage
parameter_list|(
name|byte
index|[]
name|hl7MessageBytes
parameter_list|,
name|TcpSocketConsumerRunnable
name|consumerRunnable
parameter_list|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|updateLastConnectionActivityTicks
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|consumerRunnables
operator|.
name|put
argument_list|(
name|consumerRunnable
argument_list|,
name|now
argument_list|)
expr_stmt|;
comment|// Send the message on to Camel for processing and wait for the response
name|log
operator|.
name|debug
argument_list|(
literal|"processMessage(hl7MessageBytes[{}], {}) - populating the exchange with received payload"
argument_list|,
name|hl7MessageBytes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|hl7MessageBytes
operator|.
name|length
argument_list|,
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|hasCharsetName
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getCharsetName
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|createUoW
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|hasProperties
argument_list|()
operator|||
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_AUTO_ACKNOWLEDGE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_AUTO_ACKNOWLEDGE
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|isAutoAck
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumerRunnable
operator|.
name|hasLocalAddress
argument_list|()
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
argument_list|,
name|consumerRunnable
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumerRunnable
operator|.
name|hasRemoteAddress
argument_list|()
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
argument_list|,
name|consumerRunnable
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isValidatePayload
argument_list|()
condition|)
block|{
name|String
name|exceptionMessage
init|=
name|Hl7Util
operator|.
name|generateInvalidPayloadExceptionMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|exceptionMessage
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidMessageException
argument_list|(
name|exceptionMessage
argument_list|,
name|hl7MessageBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|populateHl7DataHeaders
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|,
name|hl7MessageBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isStringPayload
argument_list|()
condition|)
block|{
if|if
condition|(
name|hl7MessageBytes
operator|!=
literal|null
operator|&&
name|hl7MessageBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|getConfiguration
argument_list|()
operator|.
name|getCharset
argument_list|(
name|exchange
argument_list|,
name|hl7MessageBytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setBody
argument_list|(
literal|""
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|.
name|setBody
argument_list|(
name|hl7MessageBytes
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"processMessage(hl7MessageBytes[{}], {}) - calling processor"
argument_list|,
name|hl7MessageBytes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|hl7MessageBytes
operator|.
name|length
argument_list|,
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|sendAcknowledgement
argument_list|(
name|hl7MessageBytes
argument_list|,
name|exchange
argument_list|,
name|consumerRunnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|unexpectedEx
parameter_list|)
block|{
name|String
name|resetMessage
init|=
literal|"processMessage(byte[], TcpSocketConsumerRunnable) - Unexpected exception processing exchange"
decl_stmt|;
name|consumerRunnable
operator|.
name|resetSocket
argument_list|(
name|resetMessage
argument_list|)
expr_stmt|;
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
name|resetMessage
argument_list|,
name|exchange
argument_list|,
name|unexpectedEx
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|uowEx
parameter_list|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"processMessage(byte[], TcpSocketConsumerRunnable) - Unexpected exception creating Unit of Work"
argument_list|,
name|exchange
argument_list|,
name|uowEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|doneUoW
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|populateHl7DataHeaders (Exchange exchange, Message message, byte[] hl7MessageBytes)
name|void
name|populateHl7DataHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|.
name|isHl7Headers
argument_list|()
operator|&&
name|exchange
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getException
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hl7MessageBytes
operator|==
literal|null
operator|||
name|hl7MessageBytes
operator|.
name|length
operator|<
literal|8
condition|)
block|{
comment|// Not enough data to populate anything - just return
return|return;
block|}
comment|// Find the end of the MSH and indexes of the fields in the MSH to populate message headers
specifier|final
name|byte
name|fieldSeparator
init|=
name|hl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
name|int
name|endOfMSH
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldSeparatorIndexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// We should have at least 10 fields
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fieldSeparator
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
name|fieldSeparatorIndexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
comment|// If the MSH Segment doesn't have a trailing field separator, add one so the field can be extracted into a header
if|if
condition|(
name|fieldSeparator
operator|!=
name|hl7MessageBytes
index|[
name|i
operator|-
literal|1
index|]
condition|)
block|{
name|fieldSeparatorIndexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|endOfMSH
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|-
literal|1
operator|==
name|endOfMSH
condition|)
block|{
comment|// TODO:  May want to throw some sort of an Exception here
name|log
operator|.
name|warn
argument_list|(
literal|"Population of message headers failed - unable to find the end of the MSH segment"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Populating the HL7 message headers"
argument_list|)
expr_stmt|;
name|Charset
name|charset
init|=
name|getConfiguration
argument_list|()
operator|.
name|getCharset
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|fieldSeparatorIndexes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|startingFieldSeparatorIndex
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|endingFieldSeparatorIndex
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Only populate the header if there's data in the HL7 field
if|if
condition|(
name|endingFieldSeparatorIndex
operator|-
name|startingFieldSeparatorIndex
operator|>
literal|1
condition|)
block|{
name|String
name|headerName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|2
case|:
comment|// MSH-3
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_SENDING_APPLICATION
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// MSH-4
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_SENDING_FACILITY
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|// MSH-5
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_RECEIVING_APPLICATION
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|// MSH-6
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_RECEIVING_FACILITY
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|// MSH-7
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_TIMESTAMP
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|// MSH-8
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_SECURITY
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|// MSH-9
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_MESSAGE_TYPE
expr_stmt|;
break|break;
case|case
literal|9
case|:
comment|// MSH-10
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_MESSAGE_CONTROL
expr_stmt|;
break|break;
case|case
literal|10
case|:
comment|// MSH-11
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_PROCESSING_ID
expr_stmt|;
break|break;
case|case
literal|11
case|:
comment|// MSH-12
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_VERSION_ID
expr_stmt|;
break|break;
case|case
literal|17
case|:
comment|// MSH-18
name|headerName
operator|=
name|MllpConstants
operator|.
name|MLLP_CHARSET
expr_stmt|;
break|break;
default|default:
comment|// Not processing this field
continue|continue;
block|}
name|String
name|headerValue
init|=
operator|(
name|i
operator|==
literal|17
operator|&&
name|getConfiguration
argument_list|()
operator|.
name|hasCharsetName
argument_list|()
operator|)
condition|?
name|getConfiguration
argument_list|()
operator|.
name|getCharsetName
argument_list|()
else|:
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|startingFieldSeparatorIndex
operator|+
literal|1
argument_list|,
name|endingFieldSeparatorIndex
operator|-
name|startingFieldSeparatorIndex
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|headerName
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
comment|// For MSH-9, set a couple more headers
if|if
condition|(
name|i
operator|==
literal|8
condition|)
block|{
comment|// final byte componentSeparator = hl7MessageBytes[4];
name|String
name|componentSeparator
init|=
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|String
index|[]
name|components
init|=
name|headerValue
operator|.
name|split
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\\Q%s\\E"
argument_list|,
name|componentSeparator
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_EVENT_TYPE
argument_list|,
name|components
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
literal|2
operator|<=
name|components
operator|.
name|length
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_TRIGGER_EVENT
argument_list|,
name|components
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"HL7 Message headers disabled"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sendAcknowledgement (byte[] originalHl7MessageBytes, Exchange exchange, TcpSocketConsumerRunnable consumerRunnable)
name|void
name|sendAcknowledgement
parameter_list|(
name|byte
index|[]
name|originalHl7MessageBytes
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|TcpSocketConsumerRunnable
name|consumerRunnable
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"sendAcknowledgement(originalHl7MessageBytes[{}], Exchange[{}], {}) - entering"
argument_list|,
name|originalHl7MessageBytes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|originalHl7MessageBytes
operator|.
name|length
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|checkBeforeSendProperties
argument_list|(
name|exchange
argument_list|,
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|,
name|log
argument_list|)
expr_stmt|;
comment|// Find the acknowledgement body
name|byte
index|[]
name|acknowledgementMessageBytes
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|acknowledgementMessageBytes
operator|==
literal|null
condition|)
block|{
name|acknowledgementMessageBytes
operator|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
block|}
name|String
name|acknowledgementMessageType
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|acknowledgementMessageBytes
condition|)
block|{
name|boolean
name|autoAck
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_AUTO_ACKNOWLEDGE
argument_list|,
literal|true
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|autoAck
condition|)
block|{
name|Object
name|acknowledgementBytesProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|)
decl_stmt|;
name|Object
name|acknowledgementStringProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|)
decl_stmt|;
specifier|final
name|String
name|exceptionMessage
init|=
operator|(
name|acknowledgementBytesProperty
operator|==
literal|null
operator|&&
name|acknowledgementStringProperty
operator|==
literal|null
operator|)
condition|?
literal|"Automatic Acknowledgement is disabled and the "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
operator|+
literal|" and "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
operator|+
literal|" exchange properties are null"
else|:
literal|"Automatic Acknowledgement is disabled and neither the "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
operator|+
literal|"(type = "
operator|+
name|acknowledgementBytesProperty
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|") nor the"
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
operator|+
literal|"(type = "
operator|+
name|acknowledgementBytesProperty
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|") exchange properties can be converted to byte[]"
decl_stmt|;
name|MllpInvalidAcknowledgementException
name|invalidAckEx
init|=
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
name|exceptionMessage
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|invalidAckEx
argument_list|)
expr_stmt|;
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
name|invalidAckEx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|acknowledgmentTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|msa3
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_MSA_TEXT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Exception
name|exchangeEx
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|acknowledgmentTypeProperty
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|exchangeEx
condition|)
block|{
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
block|}
else|else
block|{
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
if|if
condition|(
name|msa3
operator|==
literal|null
operator|||
name|msa3
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|msa3
operator|=
name|exchangeEx
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|acknowledgmentTypeProperty
condition|)
block|{
case|case
literal|"AA"
case|:
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
break|break;
case|case
literal|"AE"
case|:
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
if|if
condition|(
name|exchangeEx
operator|!=
literal|null
operator|&&
name|msa3
operator|!=
literal|null
operator|&&
name|msa3
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|msa3
operator|=
name|exchangeEx
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|"AR"
case|:
name|acknowledgementMessageType
operator|=
literal|"AR"
expr_stmt|;
if|if
condition|(
name|exchangeEx
operator|!=
literal|null
operator|&&
name|msa3
operator|!=
literal|null
operator|&&
name|msa3
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|msa3
operator|=
name|exchangeEx
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|Hl7AcknowledgementGenerationException
argument_list|(
literal|"Unsupported acknowledgment type: "
operator|+
name|acknowledgmentTypeProperty
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Hl7Util
operator|.
name|generateAcknowledgementPayload
argument_list|(
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageType
argument_list|,
name|msa3
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpAcknowledgementGenerationException
name|ackGenerationException
parameter_list|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|ackGenerationException
argument_list|)
expr_stmt|;
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
name|ackGenerationException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|setEnvelopedMessage
argument_list|(
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
specifier|final
name|byte
name|bM
init|=
literal|77
decl_stmt|;
specifier|final
name|byte
name|bS
init|=
literal|83
decl_stmt|;
specifier|final
name|byte
name|bA
init|=
literal|65
decl_stmt|;
specifier|final
name|byte
name|bE
init|=
literal|69
decl_stmt|;
specifier|final
name|byte
name|bR
init|=
literal|82
decl_stmt|;
specifier|final
name|byte
name|fieldSeparator
init|=
name|originalHl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
comment|// Acknowledgment is specified in exchange property - determine the acknowledgement type
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|originalHl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|MllpProtocolConstants
operator|.
name|SEGMENT_DELIMITER
operator|==
name|i
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|7
operator|<
name|originalHl7MessageBytes
operator|.
name|length
comment|// Make sure we don't run off the end of the message
operator|&&
name|bM
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|1
index|]
operator|&&
name|bS
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|2
index|]
operator|&&
name|bA
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|3
index|]
operator|&&
name|fieldSeparator
operator|==
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|4
index|]
condition|)
block|{
if|if
condition|(
name|fieldSeparator
operator|!=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|7
index|]
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"MSA-1 is longer than 2-bytes - ignoring trailing bytes"
argument_list|)
expr_stmt|;
block|}
comment|// Found MSA - pull acknowledgement bytes
name|byte
index|[]
name|acknowledgmentTypeBytes
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
operator|=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|5
index|]
expr_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|1
index|]
operator|=
name|originalHl7MessageBytes
index|[
name|i
operator|+
literal|6
index|]
expr_stmt|;
try|try
block|{
name|acknowledgementMessageType
operator|=
operator|new
name|String
argument_list|(
name|acknowledgmentTypeBytes
argument_list|,
name|ExchangeHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to convert acknowledgement message to string"
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
comment|// Verify it's a valid acknowledgement code
if|if
condition|(
name|bA
operator|!=
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
condition|)
block|{
switch|switch
condition|(
name|acknowledgementMessageBytes
index|[
literal|1
index|]
condition|)
block|{
case|case
name|bA
case|:
case|case
name|bR
case|:
case|case
name|bE
case|:
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid acknowledgement type [{}] found in message - should be AA, AE or AR"
argument_list|,
name|acknowledgementMessageType
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the MLLP_ACKNOWLEDGEMENT_TYPE property is set on the exchange, make sure it matches
name|String
name|acknowledgementTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|acknowledgementTypeProperty
operator|&&
operator|!
name|acknowledgementTypeProperty
operator|.
name|equals
argument_list|(
name|acknowledgementMessageType
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Acknowledgement type found in message ["
operator|+
name|acknowledgementMessageType
operator|+
literal|"] does not match "
operator|+
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
operator|+
literal|" exchange property value ["
operator|+
name|acknowledgementTypeProperty
operator|+
literal|"] - using value found in message"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|Message
name|message
init|=
name|exchange
operator|.
name|hasOut
argument_list|()
condition|?
name|exchange
operator|.
name|getOut
argument_list|()
else|:
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|acknowledgementMessageType
operator|!=
literal|null
operator|&&
operator|!
name|acknowledgementMessageType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|acknowledgementMessageType
argument_list|)
expr_stmt|;
block|}
name|Charset
name|charset
init|=
name|getConfiguration
argument_list|()
operator|.
name|getCharset
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// TODO:  re-evaluate this - it seems that the MLLP buffer should be populated by now
if|if
condition|(
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|hasCompleteEnvelope
argument_list|()
condition|)
block|{
comment|// The mllpBuffer will be used if bufferWrites is set or if auto acknowledgement is used
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|toMllpPayload
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|toHl7String
argument_list|(
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send the acknowledgement
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"sendAcknowledgement(originalHl7MessageBytes[{}], Exchange[{}], {}) - Sending Acknowledgement: {}"
argument_list|,
name|originalHl7MessageBytes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|originalHl7MessageBytes
operator|.
name|length
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|,
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|toPrintFriendlyHl7String
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|writeTo
argument_list|(
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|acknowledgementDeliveryEx
parameter_list|)
block|{
name|Exception
name|exchangeEx
init|=
operator|new
name|MllpAcknowledgementDeliveryException
argument_list|(
literal|"Failure delivering acknowledgment"
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|exchangeEx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|acknowledgementMessageBytes
operator|!=
literal|null
operator|&&
name|acknowledgementMessageBytes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
name|String
name|acknowledgementMessageString
init|=
operator|new
name|String
argument_list|(
name|acknowledgementMessageBytes
argument_list|,
name|charset
argument_list|)
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_STRING
argument_list|,
name|acknowledgementMessageString
argument_list|)
expr_stmt|;
comment|// Send the acknowledgement
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"sendAcknowledgement(originalHl7MessageBytes[{}], Exchange[{}], {}) - Sending Acknowledgement: {}"
argument_list|,
name|originalHl7MessageBytes
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|originalHl7MessageBytes
operator|.
name|length
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|,
name|Hl7Util
operator|.
name|convertToPrintFriendlyString
argument_list|(
name|acknowledgementMessageBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|setEnvelopedMessage
argument_list|(
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
name|consumerRunnable
operator|.
name|getMllpBuffer
argument_list|()
operator|.
name|writeTo
argument_list|(
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MllpSocketException
name|acknowledgementDeliveryEx
parameter_list|)
block|{
name|Exception
name|exchangeEx
init|=
operator|new
name|MllpAcknowledgementDeliveryException
argument_list|(
literal|"Failure delivering acknowledgment"
argument_list|,
name|originalHl7MessageBytes
argument_list|,
name|acknowledgementMessageBytes
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_EXCEPTION
argument_list|,
name|acknowledgementDeliveryEx
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|exchangeEx
argument_list|)
expr_stmt|;
block|}
block|}
name|getEndpoint
argument_list|()
operator|.
name|checkAfterSendProperties
argument_list|(
name|exchange
argument_list|,
name|consumerRunnable
operator|.
name|getSocket
argument_list|()
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

