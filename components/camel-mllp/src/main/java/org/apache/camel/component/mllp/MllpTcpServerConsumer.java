begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
operator|.
name|MllpUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|mllp
operator|.
name|Hl7AcknowledgementGenerationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|mllp
operator|.
name|Hl7AcknowledgementGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_ACKNOWLEDGEMENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_CHARSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_CLOSE_CONNECTION_AFTER_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_CLOSE_CONNECTION_BEFORE_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_EVENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_LOCAL_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_MESSAGE_CONTROL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_MESSAGE_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_PROCESSING_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RECEIVING_APPLICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RECEIVING_FACILITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_REMOTE_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RESET_CONNECTION_AFTER_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_RESET_CONNECTION_BEFORE_SEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_SECURITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_SENDING_APPLICATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_SENDING_FACILITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_TIMESTAMP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_TRIGGER_EVENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpConstants
operator|.
name|MLLP_VERSION_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|SEGMENT_DELIMITER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_comment
comment|/**  * The MLLP consumer.  */
end_comment

begin_class
DECL|class|MllpTcpServerConsumer
specifier|public
class|class
name|MllpTcpServerConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|serverSocketThread
name|ServerSocketThread
name|serverSocketThread
decl_stmt|;
DECL|field|clientThreads
name|List
argument_list|<
name|ClientSocketThread
argument_list|>
name|clientThreads
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|MllpEndpoint
name|endpoint
decl_stmt|;
DECL|method|MllpTcpServerConsumer (MllpEndpoint endpoint, Processor processor)
specifier|public
name|MllpTcpServerConsumer
parameter_list|(
name|MllpEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"MllpTcpServerConsumer(endpoint, processor)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"doStart() - creating acceptor thread"
argument_list|)
expr_stmt|;
name|ServerSocket
name|serverSocket
init|=
operator|new
name|ServerSocket
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|endpoint
operator|.
name|receiveBufferSize
condition|)
block|{
name|serverSocket
operator|.
name|setReceiveBufferSize
argument_list|(
name|endpoint
operator|.
name|receiveBufferSize
argument_list|)
expr_stmt|;
block|}
name|serverSocket
operator|.
name|setReuseAddress
argument_list|(
name|endpoint
operator|.
name|reuseAddress
argument_list|)
expr_stmt|;
comment|// Accept Timeout
name|serverSocket
operator|.
name|setSoTimeout
argument_list|(
name|endpoint
operator|.
name|acceptTimeout
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|socketAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|endpoint
operator|.
name|getHostname
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|serverSocket
operator|.
name|bind
argument_list|(
name|socketAddress
argument_list|,
name|endpoint
operator|.
name|backlog
argument_list|)
expr_stmt|;
name|serverSocketThread
operator|=
operator|new
name|ServerSocketThread
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
name|serverSocketThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"doStop()"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|serverSocketThread
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|TERMINATED
case|:
comment|// This is what we hope for
break|break;
case|case
name|NEW
case|:
case|case
name|RUNNABLE
case|:
case|case
name|BLOCKED
case|:
case|case
name|WAITING
case|:
case|case
name|TIMED_WAITING
case|:
default|default:
name|serverSocketThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
name|serverSocketThread
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"doSuspend()"
argument_list|)
expr_stmt|;
name|super
operator|.
name|doSuspend
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"doResume()"
argument_list|)
expr_stmt|;
name|super
operator|.
name|doSuspend
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doShutdown ()
specifier|protected
name|void
name|doShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"doShutdown()"
argument_list|)
expr_stmt|;
name|super
operator|.
name|doShutdown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Nested Class to handle the ServerSocket.accept requests      */
DECL|class|ServerSocketThread
class|class
name|ServerSocketThread
extends|extends
name|Thread
block|{
DECL|field|serverSocket
name|ServerSocket
name|serverSocket
decl_stmt|;
DECL|method|ServerSocketThread (ServerSocket serverSocket)
name|ServerSocketThread
parameter_list|(
name|ServerSocket
name|serverSocket
parameter_list|)
block|{
name|this
operator|.
name|setName
argument_list|(
name|createThreadName
argument_list|(
name|serverSocket
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|serverSocket
operator|=
name|serverSocket
expr_stmt|;
block|}
comment|/**          * Derive a thread name from the class name, the component URI and the connection information.          *<p/>          * The String will in the format<class name>[endpoint key] - [local socket address]          *          * @return String for thread name          */
DECL|method|createThreadName (ServerSocket serverSocket)
name|String
name|createThreadName
parameter_list|(
name|ServerSocket
name|serverSocket
parameter_list|)
block|{
comment|// Get the classname without the package.  This is a nested class, so we want the parent class name included
name|String
name|fullClassName
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|fullClassName
operator|.
name|substring
argument_list|(
name|fullClassName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Get the URI without options
name|String
name|fullEndpointKey
init|=
name|endpoint
operator|.
name|getEndpointKey
argument_list|()
decl_stmt|;
name|String
name|endpointKey
decl_stmt|;
if|if
condition|(
name|fullEndpointKey
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|endpointKey
operator|=
name|fullEndpointKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullEndpointKey
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointKey
operator|=
name|fullEndpointKey
expr_stmt|;
block|}
comment|// Now put it all together
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s[%s] - %s"
argument_list|,
name|className
argument_list|,
name|endpointKey
argument_list|,
name|serverSocket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * The main ServerSocket.accept() loop          *<p/>          * NOTE:  When a connection is received, the Socket is checked after a brief delay in an attempt to determine          * if this is a load-balancer probe.  The test is done before the ClientSocketThread is created to avoid creating          * a large number of short lived threads, which is what can occur if the load balancer polling interval is very          * short.          */
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Starting acceptor thread"
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|isInterrupted
argument_list|()
operator|&&
literal|null
operator|!=
name|serverSocket
operator|&&
name|serverSocket
operator|.
name|isBound
argument_list|()
operator|&&
operator|!
name|serverSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// TODO: Need to check maxConnections and figure out what to do when exceeded
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socket
operator|=
name|serverSocket
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
comment|// This should happen if the component is closed while the accept call is blocking
if|if
condition|(
name|serverSocket
operator|.
name|isBound
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception encountered closing ServerSocket after SocketException on accept() - ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception encountered accepting connection - closing ServerSocket"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverSocket
operator|.
name|isBound
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception encountered closing ServerSocket after exception on accept() - ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
continue|continue;
block|}
try|try
block|{
comment|/* Wait a bit and then check and see if the socket is really there - it could be a load balancer                      pinging the port                       */
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|socket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Socket appears to be there - check for available data"
argument_list|)
expr_stmt|;
name|InputStream
name|inputStream
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
name|socket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
comment|// Bad Socket -
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to retrieve the InputStream for socket after the initial connection was accepted"
argument_list|)
expr_stmt|;
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|0
operator|<
name|inputStream
operator|.
name|available
argument_list|()
condition|)
block|{
comment|// Something is there - start the client thread
name|ClientSocketThread
name|clientThread
init|=
operator|new
name|ClientSocketThread
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|clientThreads
operator|.
name|add
argument_list|(
name|clientThread
argument_list|)
expr_stmt|;
name|clientThread
operator|.
name|start
argument_list|()
expr_stmt|;
continue|continue;
block|}
comment|// The easy check failed - so trigger a blocking read
name|socket
operator|.
name|setSoTimeout
argument_list|(
literal|100
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|tmpByte
init|=
name|inputStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
name|endpoint
operator|.
name|receiveTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|==
name|tmpByte
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Socket.read() returned END_OF_STREAM - resetting connection"
argument_list|)
expr_stmt|;
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClientSocketThread
name|clientThread
init|=
operator|new
name|ClientSocketThread
argument_list|(
name|socket
argument_list|,
name|tmpByte
argument_list|)
decl_stmt|;
name|clientThreads
operator|.
name|add
argument_list|(
name|clientThread
argument_list|)
expr_stmt|;
name|clientThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
comment|// No data, but the socket is there
name|log
operator|.
name|debug
argument_list|(
literal|"No Data - but the socket is there.  Starting ClientSocketThread"
argument_list|)
expr_stmt|;
name|ClientSocketThread
name|clientThread
init|=
operator|new
name|ClientSocketThread
argument_list|(
name|socket
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|clientThreads
operator|.
name|add
argument_list|(
name|clientThread
argument_list|)
expr_stmt|;
name|clientThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
comment|// No new clients
name|log
operator|.
name|trace
argument_list|(
literal|"SocketTimeoutException waiting for new connections - no new connections"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|clientThreads
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|ClientSocketThread
name|thread
init|=
name|clientThreads
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|thread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|clientThreads
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|interruptEx
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"accept loop interrupted - closing ServerSocket"
argument_list|)
expr_stmt|;
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception encountered closing ServerSocket after InterruptedException - ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception accepting new connection - retrying"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"ServerSocket.accept loop finished - closing listener"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|serverSocket
operator|&&
name|serverSocket
operator|.
name|isBound
argument_list|()
operator|&&
operator|!
name|serverSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Exception encountered closing ServerSocket after accept loop had exited - ignoring"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|interrupt ()
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
name|super
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|serverSocket
condition|)
block|{
if|if
condition|(
name|serverSocket
operator|.
name|isBound
argument_list|()
condition|)
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered closing ServerSocket in interrupt() method - ignoring"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|ClientSocketThread
class|class
name|ClientSocketThread
extends|extends
name|Thread
block|{
DECL|field|clientSocket
name|Socket
name|clientSocket
decl_stmt|;
DECL|field|acknowledgementGenerator
name|Hl7AcknowledgementGenerator
name|acknowledgementGenerator
init|=
operator|new
name|Hl7AcknowledgementGenerator
argument_list|()
decl_stmt|;
DECL|field|initialByte
name|Integer
name|initialByte
decl_stmt|;
DECL|method|ClientSocketThread (Socket clientSocket, Integer initialByte)
name|ClientSocketThread
parameter_list|(
name|Socket
name|clientSocket
parameter_list|,
name|Integer
name|initialByte
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|initialByte
operator|=
name|initialByte
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
name|createThreadName
argument_list|(
name|clientSocket
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientSocket
operator|=
name|clientSocket
expr_stmt|;
name|this
operator|.
name|clientSocket
operator|.
name|setKeepAlive
argument_list|(
name|endpoint
operator|.
name|keepAlive
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
name|endpoint
operator|.
name|tcpNoDelay
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|endpoint
operator|.
name|receiveBufferSize
condition|)
block|{
name|this
operator|.
name|clientSocket
operator|.
name|setReceiveBufferSize
argument_list|(
name|endpoint
operator|.
name|receiveBufferSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|endpoint
operator|.
name|sendBufferSize
condition|)
block|{
name|this
operator|.
name|clientSocket
operator|.
name|setSendBufferSize
argument_list|(
name|endpoint
operator|.
name|sendBufferSize
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|clientSocket
operator|.
name|setReuseAddress
argument_list|(
name|endpoint
operator|.
name|reuseAddress
argument_list|)
expr_stmt|;
name|this
operator|.
name|clientSocket
operator|.
name|setSoLinger
argument_list|(
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Read Timeout
name|this
operator|.
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
name|endpoint
operator|.
name|receiveTimeout
argument_list|)
expr_stmt|;
block|}
comment|/**          * derive a thread name from the class name, the component URI and the connection information          *<p/>          * The String will in the format<class name>[endpoint key] - [local socket address] -> [remote socket address]          *          * @return the thread name          */
DECL|method|createThreadName (Socket socket)
name|String
name|createThreadName
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
comment|// Get the classname without the package.  This is a nested class, so we want the parent class name included
name|String
name|fullClassName
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|fullClassName
operator|.
name|substring
argument_list|(
name|fullClassName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// Get the URI without options
name|String
name|fullEndpointKey
init|=
name|endpoint
operator|.
name|getEndpointKey
argument_list|()
decl_stmt|;
name|String
name|endpointKey
decl_stmt|;
if|if
condition|(
name|fullEndpointKey
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|endpointKey
operator|=
name|fullEndpointKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fullEndpointKey
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpointKey
operator|=
name|fullEndpointKey
expr_stmt|;
block|}
comment|// Now put it all together
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s[%s] - %s -> %s"
argument_list|,
name|className
argument_list|,
name|endpointKey
argument_list|,
name|socket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|,
name|socket
operator|.
name|getRemoteSocketAddress
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|null
operator|!=
name|clientSocket
operator|&&
name|clientSocket
operator|.
name|isConnected
argument_list|()
operator|&&
operator|!
name|clientSocket
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|byte
index|[]
name|hl7MessageBytes
init|=
literal|null
decl_stmt|;
comment|// Send the message on for processing and wait for the response
name|log
operator|.
name|debug
argument_list|(
literal|"Reading data ...."
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|initialByte
operator|&&
name|START_OF_BLOCK
operator|==
name|initialByte
condition|)
block|{
name|hl7MessageBytes
operator|=
name|MllpUtil
operator|.
name|closeFrame
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|MllpUtil
operator|.
name|openFrame
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
comment|// When thrown by openFrame, it indicates that no data was available - but no error
continue|continue;
block|}
name|hl7MessageBytes
operator|=
name|MllpUtil
operator|.
name|closeFrame
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MllpException
name|mllpEx
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setException
argument_list|(
name|mllpEx
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|initialByte
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|hl7MessageBytes
condition|)
block|{
continue|continue;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Populating the exchange with received message"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|hl7MessageBytes
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_LOCAL_ADDRESS
argument_list|,
name|clientSocket
operator|.
name|getLocalAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_REMOTE_ADDRESS
argument_list|,
name|clientSocket
operator|.
name|getRemoteSocketAddress
argument_list|()
argument_list|)
expr_stmt|;
name|populateHl7DataHeaders
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|,
name|hl7MessageBytes
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Calling processor"
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
comment|// processed the message - send the acknowledgement
comment|// Check BEFORE_SEND Properties
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_RESET_CONNECTION_BEFORE_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_CLOSE_CONNECTION_BEFORE_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|closeConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
comment|// Find the acknowledgement body
name|byte
index|[]
name|acknowledgementMessageBytes
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|String
name|acknowledgementMessageType
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|acknowledgementMessageBytes
condition|)
block|{
if|if
condition|(
operator|!
name|endpoint
operator|.
name|autoAck
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|MllpInvalidAcknowledgementException
argument_list|(
literal|"Automatic Acknowledgement is disabled and the "
operator|+
name|MLLP_ACKNOWLEDGEMENT
operator|+
literal|" exchange property is null or cannot be converted to byte[]"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|acknowledgmentTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|==
name|acknowledgmentTypeProperty
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|exchange
operator|.
name|getException
argument_list|()
condition|)
block|{
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationAcceptAcknowledgementMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationErrorAcknowledgementMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|acknowledgmentTypeProperty
condition|)
block|{
case|case
literal|"AA"
case|:
name|acknowledgementMessageType
operator|=
literal|"AA"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationAcceptAcknowledgementMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"AE"
case|:
name|acknowledgementMessageType
operator|=
literal|"AE"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationErrorAcknowledgementMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"AR"
case|:
name|acknowledgementMessageType
operator|=
literal|"AR"
expr_stmt|;
name|acknowledgementMessageBytes
operator|=
name|acknowledgementGenerator
operator|.
name|generateApplicationRejectAcknowledgementMessage
argument_list|(
name|hl7MessageBytes
argument_list|)
expr_stmt|;
break|break;
default|default:
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|Hl7AcknowledgementGenerationException
argument_list|(
literal|"Unsupported acknowledgment type: "
operator|+
name|acknowledgmentTypeProperty
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Hl7AcknowledgementGenerationException
name|ackGenerationException
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|ackGenerationException
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|byte
name|bM
init|=
literal|77
decl_stmt|;
specifier|final
name|byte
name|bS
init|=
literal|83
decl_stmt|;
specifier|final
name|byte
name|bA
init|=
literal|65
decl_stmt|;
specifier|final
name|byte
name|bE
init|=
literal|69
decl_stmt|;
specifier|final
name|byte
name|bR
init|=
literal|82
decl_stmt|;
specifier|final
name|byte
name|fieldSeparator
init|=
name|hl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
comment|// Acknowledgment is specified in exchange property - determine the acknowledgement type
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|SEGMENT_DELIMITER
operator|==
name|i
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|7
operator|<
name|hl7MessageBytes
operator|.
name|length
comment|// Make sure we don't run off the end of the message
operator|&&
name|bM
operator|==
name|hl7MessageBytes
index|[
name|i
operator|+
literal|1
index|]
operator|&&
name|bS
operator|==
name|hl7MessageBytes
index|[
name|i
operator|+
literal|2
index|]
operator|&&
name|bA
operator|==
name|hl7MessageBytes
index|[
name|i
operator|+
literal|3
index|]
operator|&&
name|fieldSeparator
operator|==
name|hl7MessageBytes
index|[
name|i
operator|+
literal|4
index|]
condition|)
block|{
if|if
condition|(
name|fieldSeparator
operator|!=
name|hl7MessageBytes
index|[
name|i
operator|+
literal|7
index|]
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"MSA-1 is longer than 2-bytes - ignoring trailing bytes"
argument_list|)
expr_stmt|;
block|}
comment|// Found MSA - pull acknowledgement bytes
name|byte
index|[]
name|acknowledgmentTypeBytes
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
operator|=
name|hl7MessageBytes
index|[
name|i
operator|+
literal|5
index|]
expr_stmt|;
name|acknowledgmentTypeBytes
index|[
literal|1
index|]
operator|=
name|hl7MessageBytes
index|[
name|i
operator|+
literal|6
index|]
expr_stmt|;
name|acknowledgementMessageType
operator|=
name|IOConverter
operator|.
name|toString
argument_list|(
name|acknowledgmentTypeBytes
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|// Verify it's a valid acknowledgement code
if|if
condition|(
name|bA
operator|!=
name|acknowledgmentTypeBytes
index|[
literal|0
index|]
condition|)
block|{
switch|switch
condition|(
name|acknowledgementMessageBytes
index|[
literal|1
index|]
condition|)
block|{
case|case
name|bA
case|:
case|case
name|bR
case|:
case|case
name|bE
case|:
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid acknowledgement type ["
operator|+
name|acknowledgementMessageType
operator|+
literal|"] found in message - should be AA, AE or AR"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the MLLP_ACKNOWLEDGEMENT_TYPE property is set on the exchange, make sure it matches
name|String
name|acknowledgementTypeProperty
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|acknowledgementTypeProperty
operator|&&
operator|!
name|acknowledgementTypeProperty
operator|.
name|equals
argument_list|(
name|acknowledgementMessageType
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Acknowledgement type found in message ["
operator|+
name|acknowledgementMessageType
operator|+
literal|"] does not match "
operator|+
name|MLLP_ACKNOWLEDGEMENT_TYPE
operator|+
literal|" exchange property value ["
operator|+
name|acknowledgementTypeProperty
operator|+
literal|"] - using value found in message"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Send the acknowledgement
name|log
operator|.
name|debug
argument_list|(
literal|"Writing Acknowledgement"
argument_list|)
expr_stmt|;
name|MllpUtil
operator|.
name|writeFramedPayload
argument_list|(
name|clientSocket
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT
argument_list|,
name|acknowledgementMessageBytes
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MLLP_ACKNOWLEDGEMENT_TYPE
argument_list|,
name|acknowledgementMessageType
argument_list|)
expr_stmt|;
comment|// Check AFTER_SEND Properties
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_RESET_CONNECTION_AFTER_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|resetConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|MLLP_CLOSE_CONNECTION_AFTER_SEND
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|MllpUtil
operator|.
name|closeConnection
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"ClientSocketThread exiting"
argument_list|)
expr_stmt|;
block|}
DECL|method|populateHl7DataHeaders (Exchange exchange, Message message, byte[] hl7MessageBytes)
specifier|private
name|void
name|populateHl7DataHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
block|{
comment|// Find the end of the MSH and indexes of the fields in the MSH to populate message headers
specifier|final
name|byte
name|fieldSeparator
init|=
name|hl7MessageBytes
index|[
literal|3
index|]
decl_stmt|;
specifier|final
name|byte
name|componentSeparator
init|=
name|hl7MessageBytes
index|[
literal|4
index|]
decl_stmt|;
name|int
name|endOfMSH
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|fieldSeparatorIndexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
decl_stmt|;
comment|// We need at least 10 fields to create the acknowledgment
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hl7MessageBytes
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fieldSeparator
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
name|fieldSeparatorIndexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SEGMENT_DELIMITER
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
name|endOfMSH
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|-
literal|1
operator|==
name|endOfMSH
condition|)
block|{
comment|// TODO:  May want to throw some sort of an Exception here
name|log
operator|.
name|error
argument_list|(
literal|"Population of message headers failed - unable to find the end of the MSH segment"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Populating the message headers"
argument_list|)
expr_stmt|;
name|Charset
name|charset
init|=
name|Charset
operator|.
name|forName
argument_list|(
name|IOHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
comment|// MSH-3
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_SENDING_APPLICATION
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-4
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_SENDING_FACILITY
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-5
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_RECEIVING_APPLICATION
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-6
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_RECEIVING_FACILITY
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-7
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_TIMESTAMP
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-8
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_SECURITY
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-9
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_MESSAGE_TYPE
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-10
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_MESSAGE_CONTROL
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-11
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_PROCESSING_ID
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|10
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-12
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_VERSION_ID
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|11
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|10
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-18
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_CHARSET
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|16
argument_list|)
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|17
argument_list|)
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|16
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|+
literal|1
init|;
name|i
operator|<
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|componentSeparator
operator|==
name|hl7MessageBytes
index|[
name|i
index|]
condition|)
block|{
comment|// MSH-9.1
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_EVENT_TYPE
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|+
literal|1
argument_list|,
name|i
operator|-
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
comment|// MSH-9.2
name|message
operator|.
name|setHeader
argument_list|(
name|MLLP_TRIGGER_EVENT
argument_list|,
operator|new
name|String
argument_list|(
name|hl7MessageBytes
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|fieldSeparatorIndexes
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|-
name|i
operator|-
literal|1
argument_list|,
name|charset
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

