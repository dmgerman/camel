begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp.impl
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpAcknowledgementTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpReceiveAcknowledgementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpReceiveException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|MllpEndpoint
operator|.
name|START_OF_BLOCK
import|;
end_import

begin_class
DECL|class|MllpSocketReader
specifier|public
class|class
name|MllpSocketReader
block|{
DECL|field|socket
specifier|final
name|Socket
name|socket
decl_stmt|;
DECL|field|receiveTimeout
specifier|final
name|int
name|receiveTimeout
decl_stmt|;
DECL|field|readTimeout
specifier|final
name|int
name|readTimeout
decl_stmt|;
DECL|field|acknowledgementReader
specifier|final
name|boolean
name|acknowledgementReader
decl_stmt|;
DECL|field|log
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|receiveBuffer
name|byte
index|[]
name|receiveBuffer
decl_stmt|;
DECL|field|readAdditionalStream
name|ByteArrayOutputStream
name|readAdditionalStream
decl_stmt|;
DECL|method|MllpSocketReader (Socket socket, int receiveTimeout, int readTimeout, boolean acknowledgementReader)
specifier|public
name|MllpSocketReader
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|int
name|receiveTimeout
parameter_list|,
name|int
name|readTimeout
parameter_list|,
name|boolean
name|acknowledgementReader
parameter_list|)
block|{
name|this
operator|.
name|socket
operator|=
name|socket
expr_stmt|;
name|this
operator|.
name|receiveTimeout
operator|=
name|receiveTimeout
expr_stmt|;
name|this
operator|.
name|readTimeout
operator|=
name|readTimeout
expr_stmt|;
name|this
operator|.
name|acknowledgementReader
operator|=
name|acknowledgementReader
expr_stmt|;
try|try
block|{
name|receiveBuffer
operator|=
operator|new
name|byte
index|[
name|socket
operator|.
name|getReceiveBufferSize
argument_list|()
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|socketEx
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot retrieve the value of SO_RCVBUF from the Socket"
argument_list|,
name|socketEx
argument_list|)
throw|;
block|}
block|}
DECL|method|readEnvelopedPayload ()
specifier|public
name|byte
index|[]
name|readEnvelopedPayload
parameter_list|()
throws|throws
name|MllpException
block|{
return|return
name|readEnvelopedPayload
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|readEnvelopedPayload (byte[] hl7MessageBytes)
specifier|public
name|byte
index|[]
name|readEnvelopedPayload
parameter_list|(
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
throws|throws
name|MllpException
block|{
return|return
name|readEnvelopedPayload
argument_list|(
literal|null
argument_list|,
name|hl7MessageBytes
argument_list|)
return|;
block|}
DECL|method|readEnvelopedPayload (Integer initialByte)
specifier|public
name|byte
index|[]
name|readEnvelopedPayload
parameter_list|(
name|Integer
name|initialByte
parameter_list|)
throws|throws
name|MllpException
block|{
return|return
name|readEnvelopedPayload
argument_list|(
name|initialByte
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|readEnvelopedPayload (Integer initialByte, byte[] hl7MessageBytes)
specifier|protected
name|byte
index|[]
name|readEnvelopedPayload
parameter_list|(
name|Integer
name|initialByte
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
throws|throws
name|MllpException
block|{
name|byte
index|[]
name|answer
init|=
literal|null
decl_stmt|;
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|receiveTimeout
argument_list|,
name|log
argument_list|,
literal|"Preparing to receive payload"
argument_list|)
expr_stmt|;
name|InputStream
name|socketInputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socketInputStream
operator|=
name|socket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
specifier|final
name|String
name|errorMessage
init|=
literal|"Failed to retrieve the InputStream from the Socket"
decl_stmt|;
name|resetConnection
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
name|isAcknowledgementReader
argument_list|()
condition|?
operator|new
name|MllpReceiveAcknowledgementException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|ioEx
argument_list|)
else|:
operator|new
name|MllpReceiveException
argument_list|(
name|errorMessage
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
comment|// Read the acknowledgment - hopefully in one shot
name|int
name|readCount
decl_stmt|;
name|int
name|startPosition
init|=
operator|(
name|initialByte
operator|!=
literal|null
operator|&&
name|initialByte
operator|==
name|START_OF_BLOCK
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
decl_stmt|;
do|do
block|{
comment|// Read from the socket until the beginning of a MLLP payload is found or a timeout occurs
try|try
block|{
name|readCount
operator|=
name|socketInputStream
operator|.
name|read
argument_list|(
name|receiveBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|readCount
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"END_OF_STREAM encountered while attempting to receive payload - was Socket closed?"
decl_stmt|;
name|resetConnection
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
name|isAcknowledgementReader
argument_list|()
condition|?
operator|new
name|MllpReceiveAcknowledgementException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|)
else|:
operator|new
name|MllpReceiveException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Received bytes: {}"
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|receiveBuffer
argument_list|,
literal|0
argument_list|,
name|readCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
if|if
condition|(
name|isAcknowledgementReader
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MllpAcknowledgementTimeoutException
argument_list|(
name|hl7MessageBytes
argument_list|,
name|timeoutEx
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|initialByte
operator|!=
literal|null
operator|&&
name|initialByte
operator|==
name|START_OF_BLOCK
condition|)
block|{
name|answer
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
name|answer
index|[
literal|0
index|]
operator|=
name|initialByte
operator|.
name|byteValue
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MllpTimeoutException
argument_list|(
name|answer
argument_list|,
name|timeoutEx
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Error receiving payload"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
name|resetConnection
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
throw|throw
name|isAcknowledgementReader
argument_list|()
condition|?
operator|new
name|MllpReceiveAcknowledgementException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|ioEx
argument_list|)
else|:
operator|new
name|MllpReceiveException
argument_list|(
name|errorMessage
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
if|if
condition|(
name|readCount
operator|>
literal|0
condition|)
block|{
comment|// If some data was read, make sure we found the beginning of the message
if|if
condition|(
name|initialByte
operator|!=
literal|null
operator|&&
name|initialByte
operator|==
name|START_OF_BLOCK
condition|)
block|{
name|startPosition
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|int
name|startOfBlock
init|=
name|MllpSocketUtil
operator|.
name|findStartOfBlock
argument_list|(
name|receiveBuffer
argument_list|,
name|readCount
argument_list|)
decl_stmt|;
name|startPosition
operator|=
operator|(
name|startOfBlock
operator|==
operator|-
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
name|startOfBlock
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|startPosition
operator|>
literal|1
condition|)
block|{
comment|// Some out-of-band data was received - log it
specifier|final
name|String
name|format
init|=
literal|"Ignoring {} out-of-band bytes received before the beginning of the payload"
decl_stmt|;
name|int
name|length
init|=
name|readCount
operator|-
name|startPosition
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|MllpComponent
operator|.
name|isLogPhi
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
operator|+
literal|": {}"
argument_list|,
name|length
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|receiveBuffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|startPosition
operator|==
operator|-
literal|1
condition|)
do|;
comment|// Check to see if the payload is complete
name|int
name|endPosition
init|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|receiveBuffer
argument_list|,
name|readCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|endPosition
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// We have a complete payload - build the result without delimiters
if|if
condition|(
name|endPosition
operator|<
name|readCount
operator|-
literal|3
condition|)
block|{
comment|// Some out-of-band data was received - log it
specifier|final
name|String
name|format
init|=
literal|"Ignoring {} out-of-band bytes received after the end of the payload"
decl_stmt|;
name|int
name|length
init|=
name|readCount
operator|-
name|endPosition
operator|-
literal|2
decl_stmt|;
if|if
condition|(
name|MllpComponent
operator|.
name|isLogPhi
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
operator|+
literal|": {}"
argument_list|,
name|length
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|receiveBuffer
argument_list|,
name|endPosition
operator|+
literal|1
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Build the answer
name|int
name|length
init|=
name|endPosition
operator|-
name|startPosition
decl_stmt|;
name|answer
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|receiveBuffer
argument_list|,
name|startPosition
argument_list|,
name|answer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The payload is incomplete - read it all before returning
comment|// Write the data already received to the overflow stream, without the beginning delimiters
name|getReadAdditionalStream
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
name|readAdditionalStream
operator|.
name|write
argument_list|(
name|receiveBuffer
argument_list|,
name|startPosition
argument_list|,
name|readCount
operator|-
name|startPosition
argument_list|)
expr_stmt|;
comment|// We've already received some data, so switch to the read timeout
name|MllpSocketUtil
operator|.
name|setSoTimeout
argument_list|(
name|socket
argument_list|,
name|readTimeout
argument_list|,
name|log
argument_list|,
literal|"Preparing to continue reading payload"
argument_list|)
expr_stmt|;
comment|// Now the current data is in the overflow stream, continue reading until the end of the payload is found or a timeout occurs
name|endPosition
operator|=
operator|-
literal|1
expr_stmt|;
do|do
block|{
comment|// Read from the socket until the end of the MLLP payload is found or a timeout occurs
try|try
block|{
name|readCount
operator|=
name|socketInputStream
operator|.
name|read
argument_list|(
name|receiveBuffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|readCount
operator|==
operator|-
literal|1
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"END_OF_STREAM encountered while attempting to read the end of the payload - Socket was closed or reset"
decl_stmt|;
name|resetConnection
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|byte
index|[]
name|partialPayload
init|=
operator|(
name|readAdditionalStream
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|readAdditionalStream
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
name|isAcknowledgementReader
argument_list|()
condition|?
operator|new
name|MllpReceiveAcknowledgementException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|partialPayload
argument_list|)
else|:
operator|new
name|MllpReceiveException
argument_list|(
name|errorMessage
argument_list|,
name|partialPayload
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Read additional bytes: {}"
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|receiveBuffer
argument_list|,
literal|0
argument_list|,
name|readCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|timeoutEx
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Timeout reading the end of the payload"
decl_stmt|;
name|resetConnection
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|byte
index|[]
name|partialPayload
init|=
operator|(
name|readAdditionalStream
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|readAdditionalStream
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
name|isAcknowledgementReader
argument_list|()
condition|?
operator|new
name|MllpAcknowledgementTimeoutException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|partialPayload
argument_list|,
name|timeoutEx
argument_list|)
else|:
operator|new
name|MllpTimeoutException
argument_list|(
name|errorMessage
argument_list|,
name|partialPayload
argument_list|,
name|timeoutEx
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Error reading  the end of the payload"
decl_stmt|;
name|resetConnection
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
name|byte
index|[]
name|partialPayload
init|=
operator|(
name|readAdditionalStream
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|readAdditionalStream
operator|.
name|toByteArray
argument_list|()
else|:
literal|null
decl_stmt|;
throw|throw
name|isAcknowledgementReader
argument_list|()
condition|?
operator|new
name|MllpReceiveAcknowledgementException
argument_list|(
name|errorMessage
argument_list|,
name|hl7MessageBytes
argument_list|,
name|partialPayload
argument_list|,
name|ioEx
argument_list|)
else|:
operator|new
name|MllpReceiveException
argument_list|(
name|errorMessage
argument_list|,
name|partialPayload
argument_list|,
name|ioEx
argument_list|)
throw|;
block|}
if|if
condition|(
name|readCount
operator|>
literal|0
condition|)
block|{
comment|// If some data was read, make sure we found the end of the message
name|endPosition
operator|=
name|MllpSocketUtil
operator|.
name|findEndOfMessage
argument_list|(
name|receiveBuffer
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|endPosition
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|endPosition
operator|<
name|readCount
operator|-
literal|2
condition|)
block|{
specifier|final
name|String
name|format
init|=
literal|"Ignoring {} out-of-band bytes after the end of the payload"
decl_stmt|;
name|int
name|length
init|=
name|readCount
operator|-
name|endPosition
operator|-
literal|2
decl_stmt|;
if|if
condition|(
name|MllpComponent
operator|.
name|isLogPhi
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
operator|+
literal|": {}"
argument_list|,
name|length
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|receiveBuffer
argument_list|,
name|endPosition
operator|+
literal|2
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|readAdditionalStream
operator|.
name|write
argument_list|(
name|receiveBuffer
argument_list|,
literal|0
argument_list|,
name|endPosition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|readAdditionalStream
operator|.
name|write
argument_list|(
name|receiveBuffer
argument_list|,
literal|0
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|endPosition
operator|==
operator|-
literal|1
condition|)
do|;
comment|// All available data has been read - return the data
name|answer
operator|=
name|readAdditionalStream
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
comment|// Check to see if there is any more data available
name|int
name|availableCount
decl_stmt|;
do|do
block|{
try|try
block|{
name|availableCount
operator|=
name|socketInputStream
operator|.
name|available
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring IOException encountered while checking for additional available trailing bytes"
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|availableCount
operator|>
literal|0
condition|)
block|{
comment|// if data is available, eat it
try|try
block|{
name|readCount
operator|=
name|socketInputStream
operator|.
name|read
argument_list|(
name|receiveBuffer
argument_list|)
expr_stmt|;
specifier|final
name|String
name|format
init|=
literal|"Ignoring {} out-of-band bytes trailing after the end of the payload"
decl_stmt|;
if|if
condition|(
name|MllpComponent
operator|.
name|isLogPhi
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
operator|+
literal|": {}"
argument_list|,
name|readCount
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|receiveBuffer
argument_list|,
literal|0
argument_list|,
name|readCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|format
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Ignoring IOException encountered while attempting to read %d bytes of trailing data"
argument_list|,
name|availableCount
argument_list|)
argument_list|,
name|ioEx
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
do|while
condition|(
name|availableCount
operator|!=
literal|0
condition|)
do|;
return|return
name|answer
return|;
block|}
DECL|method|closeConnection (String reasonMessage)
specifier|public
name|void
name|closeConnection
parameter_list|(
name|String
name|reasonMessage
parameter_list|)
block|{
name|MllpSocketUtil
operator|.
name|close
argument_list|(
name|socket
argument_list|,
name|log
argument_list|,
name|reasonMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|resetConnection (String reasonMessage)
specifier|public
name|void
name|resetConnection
parameter_list|(
name|String
name|reasonMessage
parameter_list|)
block|{
name|MllpSocketUtil
operator|.
name|reset
argument_list|(
name|socket
argument_list|,
name|log
argument_list|,
name|reasonMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|getSocket ()
specifier|public
name|Socket
name|getSocket
parameter_list|()
block|{
return|return
name|socket
return|;
block|}
DECL|method|getReceiveTimeout ()
specifier|public
name|int
name|getReceiveTimeout
parameter_list|()
block|{
return|return
name|receiveTimeout
return|;
block|}
DECL|method|getReadTimeout ()
specifier|public
name|int
name|getReadTimeout
parameter_list|()
block|{
return|return
name|readTimeout
return|;
block|}
DECL|method|getReceiveBuffer ()
specifier|public
name|byte
index|[]
name|getReceiveBuffer
parameter_list|()
block|{
return|return
name|receiveBuffer
return|;
block|}
DECL|method|isAcknowledgementReader ()
specifier|public
name|boolean
name|isAcknowledgementReader
parameter_list|()
block|{
return|return
name|acknowledgementReader
return|;
block|}
DECL|method|getReadAdditionalStream ()
specifier|public
name|ByteArrayOutputStream
name|getReadAdditionalStream
parameter_list|()
block|{
if|if
condition|(
name|readAdditionalStream
operator|==
literal|null
condition|)
block|{
name|readAdditionalStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|receiveBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|readAdditionalStream
return|;
block|}
block|}
end_class

end_unit

