begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|mllp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
operator|.
name|internal
operator|.
name|Hl7Util
import|;
end_import

begin_comment
comment|/*  * Exception thrown by the HL7AcknowledgmentGenerator in the event of a failure.  */
end_comment

begin_class
DECL|class|Hl7AcknowledgementGenerationException
specifier|public
class|class
name|Hl7AcknowledgementGenerationException
extends|extends
name|Exception
block|{
DECL|field|hl7MessageBytes
specifier|private
specifier|final
name|byte
index|[]
name|hl7MessageBytes
decl_stmt|;
DECL|method|Hl7AcknowledgementGenerationException (String message)
specifier|public
name|Hl7AcknowledgementGenerationException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7MessageBytes
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|Hl7AcknowledgementGenerationException (String message, byte[] hl7MessageBytes)
specifier|public
name|Hl7AcknowledgementGenerationException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7MessageBytes
operator|=
name|hl7MessageBytes
expr_stmt|;
block|}
DECL|method|Hl7AcknowledgementGenerationException (String message, byte[] hl7MessageBytes, Throwable cause)
specifier|public
name|Hl7AcknowledgementGenerationException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|hl7MessageBytes
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7MessageBytes
operator|=
name|hl7MessageBytes
expr_stmt|;
block|}
DECL|method|hasHl7MessageBytes ()
specifier|public
name|boolean
name|hasHl7MessageBytes
parameter_list|()
block|{
return|return
name|hl7MessageBytes
operator|!=
literal|null
operator|&&
name|hl7MessageBytes
operator|.
name|length
operator|>
literal|0
return|;
block|}
DECL|method|getHl7MessageBytes ()
specifier|public
name|byte
index|[]
name|getHl7MessageBytes
parameter_list|()
block|{
return|return
name|hl7MessageBytes
return|;
block|}
comment|/**      * Override the base version of this method, and include the HL7 Message and Acknowledgement, if any      *      * @return the detail message of this MLLP Exception      */
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
if|if
condition|(
name|hasHl7MessageBytes
argument_list|()
condition|)
block|{
name|String
name|parentMessage
init|=
name|super
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|StringBuilder
name|messageBuilder
init|=
operator|new
name|StringBuilder
argument_list|(
name|parentMessage
operator|.
name|length
argument_list|()
operator|+
name|hl7MessageBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
name|parentMessage
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\t{hl7MessageBytes ["
argument_list|)
operator|.
name|append
argument_list|(
name|hl7MessageBytes
operator|.
name|length
argument_list|)
operator|.
name|append
argument_list|(
literal|"] = "
argument_list|)
expr_stmt|;
name|Hl7Util
operator|.
name|appendBytesAsPrintFriendlyString
argument_list|(
name|messageBuilder
argument_list|,
name|hl7MessageBytes
argument_list|,
literal|0
argument_list|,
name|hl7MessageBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
return|return
name|messageBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
end_class

end_unit

