begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_comment
comment|/**  * Base class for all MLLP Exceptions, and also used as a generic MLLP exception  */
end_comment

begin_class
DECL|class|MllpException
specifier|public
class|class
name|MllpException
extends|extends
name|Exception
block|{
DECL|method|MllpException (String message)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|MllpException (String message, Throwable cause)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
DECL|method|isLogPhi ()
specifier|public
name|boolean
name|isLogPhi
parameter_list|()
block|{
name|String
name|logPhiProperty
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|MllpComponent
operator|.
name|MLLP_LOG_PHI_PROPERTY
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|logPhiProperty
argument_list|)
return|;
block|}
DECL|method|covertBytesToPrintFriendlyString (byte[] hl7Bytes)
specifier|protected
name|String
name|covertBytesToPrintFriendlyString
parameter_list|(
name|byte
index|[]
name|hl7Bytes
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|hl7Bytes
condition|)
block|{
return|return
literal|"null"
return|;
block|}
elseif|else
if|if
condition|(
name|hl7Bytes
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|hl7Bytes
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\r"
argument_list|,
literal|"<CR>"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"<LF>"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

