begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mllp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mllp
package|;
end_package

begin_comment
comment|/**  * Base class for all MLLP Exceptions, and also used as a generic MLLP exception  */
end_comment

begin_class
DECL|class|MllpException
specifier|public
class|class
name|MllpException
extends|extends
name|Exception
block|{
DECL|field|hl7Message
specifier|private
specifier|final
name|byte
index|[]
name|hl7Message
decl_stmt|;
DECL|field|hl7Acknowledgement
specifier|private
specifier|final
name|byte
index|[]
name|hl7Acknowledgement
decl_stmt|;
DECL|method|MllpException (String message)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7Message
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|hl7Acknowledgement
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|MllpException (String message, byte[] hl7Message)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|hl7Message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7Message
operator|=
operator|(
name|hl7Message
operator|!=
literal|null
operator|&&
name|hl7Message
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|hl7Message
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|hl7Acknowledgement
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|MllpException (String message, byte[] hl7Message, byte[] hl7Acknowledgement)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|hl7Message
parameter_list|,
name|byte
index|[]
name|hl7Acknowledgement
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7Message
operator|=
operator|(
name|hl7Message
operator|!=
literal|null
operator|&&
name|hl7Message
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|hl7Message
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|hl7Acknowledgement
operator|=
operator|(
name|hl7Acknowledgement
operator|!=
literal|null
operator|&&
name|hl7Acknowledgement
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|hl7Acknowledgement
else|:
literal|null
expr_stmt|;
block|}
DECL|method|MllpException (String message, Throwable cause)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7Message
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|hl7Acknowledgement
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|MllpException (String message, byte[] hl7Message, Throwable cause)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|hl7Message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7Message
operator|=
operator|(
name|hl7Message
operator|!=
literal|null
operator|&&
name|hl7Message
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|hl7Message
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|hl7Acknowledgement
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|MllpException (String message, byte[] hl7Message, byte[] hl7Acknowledgement, Throwable cause)
specifier|public
name|MllpException
parameter_list|(
name|String
name|message
parameter_list|,
name|byte
index|[]
name|hl7Message
parameter_list|,
name|byte
index|[]
name|hl7Acknowledgement
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|hl7Message
operator|=
operator|(
name|hl7Message
operator|!=
literal|null
operator|&&
name|hl7Message
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|hl7Message
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|hl7Acknowledgement
operator|=
operator|(
name|hl7Acknowledgement
operator|!=
literal|null
operator|&&
name|hl7Acknowledgement
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|hl7Acknowledgement
else|:
literal|null
expr_stmt|;
block|}
comment|/**      * Get the HL7 message payload associated with this exception, if any.      *      * @return HL7 message payload      */
DECL|method|getHl7Message ()
specifier|public
name|byte
index|[]
name|getHl7Message
parameter_list|()
block|{
return|return
name|hl7Message
return|;
block|}
comment|/**      * Get the HL7 acknowledgement payload associated with this exception, if any.      *      * @return HL7 acknowledgement payload      */
DECL|method|getHl7Acknowledgement ()
specifier|public
name|byte
index|[]
name|getHl7Acknowledgement
parameter_list|()
block|{
return|return
name|hl7Acknowledgement
return|;
block|}
comment|/**      * Override the base version of this method, and include the HL7 Message and Acknowledgement, if any      *      * @return the detail message of this MLLP Exception      */
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
if|if
condition|(
name|MllpComponent
operator|.
name|isLogPhi
argument_list|()
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s \n\t{hl7Message= %s} \n\t{hl7Acknowledgement= %s}"
argument_list|,
name|super
operator|.
name|getMessage
argument_list|()
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|hl7Message
argument_list|)
argument_list|,
name|MllpComponent
operator|.
name|covertBytesToPrintFriendlyString
argument_list|(
name|hl7Acknowledgement
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
comment|/**      * Return the MLLP Payload that is most likely the cause of the Exception      *      * If the HL7 Acknowledgement is present, return it.  Otherwise, return the HL7 Message.      *      * @return the MLLP Payload with the framing error      */
DECL|method|getMllpPayload ()
specifier|public
name|byte
index|[]
name|getMllpPayload
parameter_list|()
block|{
return|return
operator|(
name|hl7Acknowledgement
operator|!=
literal|null
operator|&&
name|hl7Acknowledgement
operator|.
name|length
operator|>
literal|0
operator|)
condition|?
name|hl7Acknowledgement
else|:
name|hl7Message
return|;
block|}
block|}
end_class

end_unit

