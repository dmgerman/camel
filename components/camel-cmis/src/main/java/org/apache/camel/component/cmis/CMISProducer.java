begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cmis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cmis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cmis
operator|.
name|exception
operator|.
name|CamelCmisException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cmis
operator|.
name|exception
operator|.
name|CamelCmisObjectNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cmis
operator|.
name|exception
operator|.
name|CamelCmisUnauthorizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|CmisObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|ItemIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|PropertyIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|data
operator|.
name|ContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|UnfileObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|enums
operator|.
name|VersioningState
import|;
end_import

begin_comment
comment|/**  * The CMIS producer.  */
end_comment

begin_class
DECL|class|CMISProducer
specifier|public
class|class
name|CMISProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|sessionFacadeFactory
specifier|private
specifier|final
name|CMISSessionFacadeFactory
name|sessionFacadeFactory
decl_stmt|;
DECL|field|sessionFacade
specifier|private
name|CMISSessionFacade
name|sessionFacade
decl_stmt|;
DECL|method|CMISProducer (CMISEndpoint endpoint, CMISSessionFacadeFactory sessionFacadeFactory)
specifier|public
name|CMISProducer
parameter_list|(
name|CMISEndpoint
name|endpoint
parameter_list|,
name|CMISSessionFacadeFactory
name|sessionFacadeFactory
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionFacadeFactory
operator|=
name|sessionFacadeFactory
expr_stmt|;
name|this
operator|.
name|sessionFacade
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|CMISEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|CMISEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelCMISActions
name|action
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_ACTION
argument_list|,
name|CamelCMISActions
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
index|[]
name|paramMethod
init|=
block|{
name|Exchange
operator|.
name|class
block|}
decl_stmt|;
name|Method
name|method
init|=
name|ReflectionHelper
operator|.
name|findMethod
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|action
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|paramMethod
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|ObjectHelper
operator|.
name|invokeMethod
argument_list|(
name|method
argument_list|,
name|this
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|copyFrom
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
DECL|method|filterTypeProperties (Map<String, Object> properties)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|filterTypeProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|properties
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|objectTypeName
init|=
name|CamelCMISConstants
operator|.
name|CMIS_DOCUMENT
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|)
condition|)
block|{
name|objectTypeName
operator|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|types
operator|.
name|addAll
argument_list|(
name|getSessionFacade
argument_list|()
operator|.
name|getPropertiesFor
argument_list|(
name|objectTypeName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSessionFacade
argument_list|()
operator|.
name|supportsSecondaries
argument_list|()
operator|&&
name|properties
operator|.
name|containsKey
argument_list|(
name|PropertyIds
operator|.
name|SECONDARY_OBJECT_TYPE_IDS
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Collection
argument_list|<
name|String
argument_list|>
name|secondaryTypes
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|properties
operator|.
name|get
argument_list|(
name|PropertyIds
operator|.
name|SECONDARY_OBJECT_TYPE_IDS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|secondaryType
range|:
name|secondaryTypes
control|)
block|{
name|types
operator|.
name|addAll
argument_list|(
name|getSessionFacade
argument_list|()
operator|.
name|getPropertiesFor
argument_list|(
name|secondaryType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|types
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|createNode (Exchange exchange)
specifier|public
name|CmisObject
name|createNode
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|PropertyIds
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|parentFolderId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Folder
name|parentFolder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|parentFolderId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cmisProperties
init|=
name|filterTypeProperties
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDocument
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|String
name|fileName
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|getMimeType
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
name|getBodyData
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ContentStream
name|contentStream
init|=
name|getSessionFacade
argument_list|()
operator|.
name|createContentStream
argument_list|(
name|fileName
argument_list|,
name|buf
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
return|return
name|storeDocument
argument_list|(
name|parentFolder
argument_list|,
name|cmisProperties
argument_list|,
name|contentStream
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|isFolder
argument_list|(
name|message
argument_list|)
condition|)
block|{
return|return
name|storeFolder
argument_list|(
name|parentFolder
argument_list|,
name|cmisProperties
argument_list|)
return|;
block|}
else|else
block|{
comment|// other types
return|return
name|storeDocument
argument_list|(
name|parentFolder
argument_list|,
name|cmisProperties
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|deleteFolder (Exchange exchange)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|deleteFolder
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Folder
name|folder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
return|return
name|folder
operator|.
name|deleteTree
argument_list|(
literal|true
argument_list|,
name|UnfileObject
operator|.
name|DELETE
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|deleteDocument (Exchange exchange)
specifier|public
name|void
name|deleteDocument
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
name|document
operator|.
name|deleteAllVersions
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|moveDocument (Exchange exchange)
specifier|public
name|void
name|moveDocument
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|)
expr_stmt|;
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_SOURCE_FOLDER_ID
argument_list|)
expr_stmt|;
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|destinationFolderId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|sourceFolderId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_SOURCE_FOLDER_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Folder
name|sourceFolder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|sourceFolderId
argument_list|)
decl_stmt|;
name|Folder
name|targetFolder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|destinationFolderId
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|document
operator|.
name|getAllowableActions
argument_list|()
operator|.
name|getAllowableActions
argument_list|()
operator|.
name|contains
argument_list|(
name|Action
operator|.
name|CAN_MOVE_OBJECT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|CamelCmisUnauthorizedException
argument_list|(
literal|"Current user does not have permission to move "
operator|+
name|objectId
operator|+
name|document
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|document
operator|.
name|move
argument_list|(
name|sourceFolder
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Moved document from "
operator|+
name|sourceFolder
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|targetFolder
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelCmisException
argument_list|(
literal|"Cannot move document to folder "
operator|+
name|targetFolder
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Document is null, cannot move!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|moveFolder (Exchange exchange)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|moveFolder
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|)
expr_stmt|;
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|destinationFolderId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Folder
name|toBeMoved
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
name|Folder
name|targetFolder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|destinationFolderId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|folders
init|=
name|copyFolderRecursive
argument_list|(
name|targetFolder
argument_list|,
name|toBeMoved
argument_list|)
decl_stmt|;
name|toBeMoved
operator|.
name|deleteTree
argument_list|(
literal|true
argument_list|,
name|UnfileObject
operator|.
name|DELETE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|folders
return|;
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|copyDocument (Exchange exchange)
specifier|public
name|Document
name|copyDocument
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|destinationFolderId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Folder
name|destinationFolder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|destinationFolderId
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
return|return
name|document
operator|.
name|copy
argument_list|(
name|destinationFolder
argument_list|)
return|;
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|copyFolder (Exchange exchange)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|copyFolder
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|)
expr_stmt|;
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|destinationFolderId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_DESTIONATION_FOLDER_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|toCopyFolderId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Folder
name|destinationFolder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|destinationFolderId
argument_list|)
decl_stmt|;
name|Folder
name|toCopyFolder
init|=
operator|(
name|Folder
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|toCopyFolderId
argument_list|)
decl_stmt|;
return|return
name|copyFolderRecursive
argument_list|(
name|destinationFolder
argument_list|,
name|toCopyFolder
argument_list|)
return|;
block|}
DECL|method|copyFolderRecursive (Folder destinationFolder, Folder toCopyFolder)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|copyFolderRecursive
parameter_list|(
name|Folder
name|destinationFolder
parameter_list|,
name|Folder
name|toCopyFolder
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|folderProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|folderProperties
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
name|toCopyFolder
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|folderProperties
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
name|toCopyFolder
operator|.
name|getBaseTypeId
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|folders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Folder
name|newFolder
init|=
name|destinationFolder
operator|.
name|createFolder
argument_list|(
name|folderProperties
argument_list|)
decl_stmt|;
name|folders
operator|.
name|put
argument_list|(
name|toCopyFolder
operator|.
name|getId
argument_list|()
argument_list|,
name|newFolder
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|copyChildren
argument_list|(
name|newFolder
argument_list|,
name|toCopyFolder
argument_list|)
expr_stmt|;
return|return
name|folders
return|;
block|}
DECL|method|copyChildren (Folder destinationFolder, Folder toCopyFolder)
specifier|private
name|void
name|copyChildren
parameter_list|(
name|Folder
name|destinationFolder
parameter_list|,
name|Folder
name|toCopyFolder
parameter_list|)
block|{
name|ItemIterable
argument_list|<
name|CmisObject
argument_list|>
name|immediateChildren
init|=
name|toCopyFolder
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|CmisObject
name|child
range|:
name|immediateChildren
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|Document
condition|)
block|{
operator|(
operator|(
name|Document
operator|)
name|child
operator|)
operator|.
name|copy
argument_list|(
name|destinationFolder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|Folder
condition|)
block|{
name|copyFolderRecursive
argument_list|(
name|destinationFolder
argument_list|,
operator|(
name|Folder
operator|)
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|rename (Exchange exchange)
specifier|public
name|CmisObject
name|rename
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|PropertyIds
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|newName
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|CmisObject
name|object
init|=
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
name|CmisObject
name|object1
init|=
name|object
operator|.
name|rename
argument_list|(
name|newName
argument_list|)
decl_stmt|;
return|return
name|object
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelCmisObjectNotFoundException
argument_list|(
literal|"Object with id: "
operator|+
name|objectId
operator|+
literal|" can not be found!"
argument_list|)
throw|;
block|}
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|checkIn (Exchange exchange)
specifier|public
name|void
name|checkIn
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|checkInComment
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|PropertyIds
operator|.
name|CHECKIN_COMMENT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|getMimeType
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
operator|(
name|InputStream
operator|)
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|message
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
name|filterTypeProperties
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|ContentStream
name|contentStream
init|=
name|getSessionFacade
argument_list|()
operator|.
name|createContentStream
argument_list|(
name|fileName
argument_list|,
name|bytes
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
name|document
operator|.
name|checkIn
argument_list|(
literal|true
argument_list|,
name|properties
argument_list|,
name|contentStream
argument_list|,
name|checkInComment
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|checkOut (Exchange exchange)
specifier|public
name|void
name|checkOut
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
name|document
operator|.
name|checkOut
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method is called via reflection.      * It is not safe to delete it or rename it!      * Method's name are defined and retrieved from {@link CamelCMISActions}.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|cancelCheckOut (Exchange exchange)
specifier|public
name|void
name|cancelCheckOut
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRequiredHeader
argument_list|(
name|exchange
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|String
name|objectId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_OBJECT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|getSessionFacade
argument_list|()
operator|.
name|getObjectById
argument_list|(
name|objectId
argument_list|)
decl_stmt|;
name|document
operator|.
name|cancelCheckOut
argument_list|()
expr_stmt|;
block|}
DECL|method|isFolder (Message message)
specifier|private
name|boolean
name|isFolder
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|baseTypeId
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseTypeId
operator|!=
literal|null
condition|)
block|{
return|return
name|CamelCMISConstants
operator|.
name|CMIS_FOLDER
operator|.
name|equals
argument_list|(
name|getSessionFacade
argument_list|()
operator|.
name|getCMISTypeFor
argument_list|(
name|baseTypeId
argument_list|)
argument_list|)
return|;
block|}
return|return
name|message
operator|.
name|getBody
argument_list|()
operator|==
literal|null
return|;
block|}
DECL|method|storeFolder (Folder parentFolder, Map<String, Object> cmisProperties)
specifier|private
name|Folder
name|storeFolder
parameter_list|(
name|Folder
name|parentFolder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cmisProperties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|cmisProperties
operator|.
name|containsKey
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|)
condition|)
block|{
name|cmisProperties
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_FOLDER
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Creating folder with properties: {}"
argument_list|,
name|cmisProperties
argument_list|)
expr_stmt|;
return|return
name|parentFolder
operator|.
name|createFolder
argument_list|(
name|cmisProperties
argument_list|)
return|;
block|}
DECL|method|storeDocument (Folder parentFolder, Map<String, Object> cmisProperties, ContentStream contentStream)
specifier|private
name|Document
name|storeDocument
parameter_list|(
name|Folder
name|parentFolder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cmisProperties
parameter_list|,
name|ContentStream
name|contentStream
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|cmisProperties
operator|.
name|containsKey
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|)
condition|)
block|{
name|cmisProperties
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
name|CamelCMISConstants
operator|.
name|CMIS_DOCUMENT
argument_list|)
expr_stmt|;
block|}
name|VersioningState
name|versioningState
init|=
name|VersioningState
operator|.
name|NONE
decl_stmt|;
if|if
condition|(
name|getSessionFacade
argument_list|()
operator|.
name|isObjectTypeVersionable
argument_list|(
operator|(
name|String
operator|)
name|cmisProperties
operator|.
name|get
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|)
argument_list|)
condition|)
block|{
name|versioningState
operator|=
name|VersioningState
operator|.
name|MAJOR
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Creating document with properties: {}"
argument_list|,
name|cmisProperties
argument_list|)
expr_stmt|;
return|return
name|parentFolder
operator|.
name|createDocument
argument_list|(
name|cmisProperties
argument_list|,
name|contentStream
argument_list|,
name|versioningState
argument_list|)
return|;
block|}
DECL|method|validateRequiredHeader (Exchange exchange, String name)
specifier|private
name|void
name|validateRequiredHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchHeaderException
block|{
name|ExchangeHelper
operator|.
name|getMandatoryHeader
argument_list|(
name|exchange
argument_list|,
name|name
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|isDocument (Exchange exchange)
specifier|private
name|boolean
name|isDocument
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|baseTypeId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseTypeId
operator|!=
literal|null
condition|)
block|{
return|return
name|CamelCMISConstants
operator|.
name|CMIS_DOCUMENT
operator|.
name|equals
argument_list|(
name|getSessionFacade
argument_list|()
operator|.
name|getCMISTypeFor
argument_list|(
name|baseTypeId
argument_list|)
argument_list|)
return|;
block|}
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|getBodyData (Message message)
specifier|private
name|byte
index|[]
name|getBodyData
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
return|;
block|}
DECL|method|getMimeType (Message message)
specifier|private
name|String
name|getMimeType
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|NoSuchHeaderException
block|{
name|String
name|mimeType
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|mimeType
return|;
block|}
DECL|method|getSessionFacade ()
specifier|private
name|CMISSessionFacade
name|getSessionFacade
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|sessionFacade
operator|==
literal|null
condition|)
block|{
name|CMISSessionFacade
name|sessionFacade
init|=
name|sessionFacadeFactory
operator|.
name|create
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|sessionFacade
operator|.
name|initSession
argument_list|()
expr_stmt|;
comment|// make sure to set sessionFacade to the field after successful initialisation
comment|// so that it has a valid session
name|this
operator|.
name|sessionFacade
operator|=
name|sessionFacade
expr_stmt|;
block|}
return|return
name|sessionFacade
return|;
block|}
block|}
end_class

end_unit

