begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cmis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cmis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|ItemIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|QueryResult
import|;
end_import

begin_comment
comment|/**  * The CMIS Query producer.  */
end_comment

begin_class
DECL|class|CMISQueryProducer
specifier|public
class|class
name|CMISQueryProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|sessionFacadeFactory
specifier|private
specifier|final
name|CMISSessionFacadeFactory
name|sessionFacadeFactory
decl_stmt|;
DECL|field|sessionFacade
specifier|private
name|CMISSessionFacade
name|sessionFacade
decl_stmt|;
DECL|method|CMISQueryProducer (CMISEndpoint endpoint, CMISSessionFacadeFactory sessionFacadeFactory)
specifier|public
name|CMISQueryProducer
parameter_list|(
name|CMISEndpoint
name|endpoint
parameter_list|,
name|CMISSessionFacadeFactory
name|sessionFacadeFactory
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionFacadeFactory
operator|=
name|sessionFacadeFactory
expr_stmt|;
name|this
operator|.
name|sessionFacade
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|CMISEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|CMISEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|nodes
init|=
name|executeQuery
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CAMEL_CMIS_RESULT_COUNT
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|executeQuery (Exchange exchange)
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|executeQuery
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|query
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|retrieveContent
init|=
name|getRetrieveContent
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Integer
name|readSize
init|=
name|getReadSize
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|ItemIterable
argument_list|<
name|QueryResult
argument_list|>
name|itemIterable
init|=
name|getSessionFacade
argument_list|()
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|getSessionFacade
argument_list|()
operator|.
name|retrieveResult
argument_list|(
name|retrieveContent
argument_list|,
name|readSize
argument_list|,
name|itemIterable
argument_list|)
return|;
block|}
DECL|method|getReadSize (Exchange exchange)
specifier|private
name|Integer
name|getReadSize
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CAMEL_CMIS_READ_SIZE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getRetrieveContent (Exchange exchange)
specifier|private
name|Boolean
name|getRetrieveContent
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CamelCMISConstants
operator|.
name|CAMEL_CMIS_RETRIEVE_CONTENT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getSessionFacade ()
specifier|private
name|CMISSessionFacade
name|getSessionFacade
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|sessionFacade
operator|==
literal|null
condition|)
block|{
name|sessionFacade
operator|=
name|sessionFacadeFactory
operator|.
name|create
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|sessionFacade
operator|.
name|initSession
argument_list|()
expr_stmt|;
block|}
return|return
name|sessionFacade
return|;
block|}
block|}
end_class

end_unit

