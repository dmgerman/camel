begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cmis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cmis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CMISConsumerTest
specifier|public
class|class
name|CMISConsumerTest
extends|extends
name|CMISTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:result"
argument_list|)
DECL|field|resultEndpoint
specifier|protected
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
annotation|@
name|Test
DECL|method|getAllContentFromServerOrderedFromRootToLeaves ()
specifier|public
name|void
name|getAllContentFromServerOrderedFromRootToLeaves
parameter_list|()
throws|throws
name|Exception
block|{
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|Consumer
name|treeBasedConsumer
init|=
name|createConsumerFor
argument_list|(
name|getUrl
argument_list|()
operator|+
literal|"?pageSize=50"
argument_list|)
decl_stmt|;
name|treeBasedConsumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|treeBasedConsumer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|resultEndpoint
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|getNodeNameForIndex
argument_list|(
name|exchanges
argument_list|,
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"RootFolder"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNodeNameForIndex
argument_list|(
name|exchanges
argument_list|,
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Folder1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNodeNameForIndex
argument_list|(
name|exchanges
argument_list|,
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"Folder2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNodeNameForIndex
argument_list|(
name|exchanges
argument_list|,
literal|3
argument_list|)
operator|.
name|contains
argument_list|(
literal|".txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNodeNameForIndex
argument_list|(
name|exchanges
argument_list|,
literal|4
argument_list|)
operator|.
name|contains
argument_list|(
literal|".txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|consumeDocumentsWithQuery ()
specifier|public
name|void
name|consumeDocumentsWithQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Consumer
name|queryBasedConsumer
init|=
name|createConsumerFor
argument_list|(
name|getUrl
argument_list|()
operator|+
literal|"?query=SELECT * FROM cmis:document"
argument_list|)
decl_stmt|;
name|queryBasedConsumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|queryBasedConsumer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|createConsumerFor (String path)
specifier|private
name|Consumer
name|createConsumerFor
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cmis://"
operator|+
name|path
argument_list|)
decl_stmt|;
return|return
name|endpoint
operator|.
name|createConsumer
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|template
operator|.
name|send
argument_list|(
literal|"mock:result"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getNodeNameForIndex (List<Exchange> exchanges, int index)
specifier|private
name|String
name|getNodeNameForIndex
parameter_list|(
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|exchanges
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"cmis:name"
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|populateRepositoryRootFolderWithTwoFoldersAndTwoDocuments ()
specifier|private
name|void
name|populateRepositoryRootFolderWithTwoFoldersAndTwoDocuments
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|Folder
name|folder1
init|=
name|createFolderWithName
argument_list|(
literal|"Folder1"
argument_list|)
decl_stmt|;
name|Folder
name|folder2
init|=
name|createChildFolderWithName
argument_list|(
name|folder1
argument_list|,
literal|"Folder2"
argument_list|)
decl_stmt|;
name|createTextDocument
argument_list|(
name|folder2
argument_list|,
literal|"Document2.1"
argument_list|,
literal|"2.1.txt"
argument_list|)
expr_stmt|;
name|createTextDocument
argument_list|(
name|folder2
argument_list|,
literal|"Document2.2"
argument_list|,
literal|"2.2.txt"
argument_list|)
expr_stmt|;
comment|//L0              ROOT
comment|//                |
comment|//L1            Folder1
comment|//L2              |_____Folder2
comment|//                        ||
comment|//L3            Doc2.1___||___Doc2.2
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|populateRepositoryRootFolderWithTwoFoldersAndTwoDocuments
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

