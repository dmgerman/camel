begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cmis
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cmis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoSuchHeaderException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|CmisObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|client
operator|.
name|api
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|PropertyIds
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|chemistry
operator|.
name|opencmis
operator|.
name|commons
operator|.
name|exceptions
operator|.
name|CmisInvalidArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CMISProducerTest
specifier|public
class|class
name|CMISProducerTest
extends|extends
name|CMISTestSupport
block|{
annotation|@
name|Produce
argument_list|(
literal|"direct:start"
argument_list|)
DECL|field|template
specifier|protected
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|Test
DECL|method|storeMessageBodyAsTextDocument ()
specifier|public
name|void
name|storeMessageBodyAsTextDocument
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|content
init|=
literal|"Some content to be store"
decl_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"test.file"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|newNodeId
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newNodeId
argument_list|)
expr_stmt|;
name|String
name|newNodeContent
init|=
name|getDocumentContentAsString
argument_list|(
name|newNodeId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|content
argument_list|,
name|newNodeContent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|getDocumentMimeTypeFromMessageContentType ()
specifier|public
name|void
name|getDocumentMimeTypeFromMessageContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|"Some content to be store"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"test.file"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|newNodeId
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|CmisObject
name|cmisObject
init|=
name|retrieveCMISObjectByIdFromServer
argument_list|(
name|newNodeId
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|(
name|Document
operator|)
name|cmisObject
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain"
argument_list|,
name|doc
operator|.
name|getPropertyValue
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|namePropertyIsAlwaysRequired ()
specifier|public
name|void
name|namePropertyIsAlwaysRequired
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|"Some content that will fail to be stored"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|Exception
name|exception
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
name|Object
name|body
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|NoSuchHeaderException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDocumentWithoutContentByExplicitlySpecifyingObjectTypeHeader ()
specifier|public
name|void
name|createDocumentWithoutContentByExplicitlySpecifyingObjectTypeHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
literal|"cmis:document"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"test.file"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|newNodeId
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newNodeId
argument_list|)
expr_stmt|;
name|CmisObject
name|cmisObject
init|=
name|retrieveCMISObjectByIdFromServer
argument_list|(
name|newNodeId
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|(
name|Document
operator|)
name|cmisObject
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cmis:document"
argument_list|,
name|doc
operator|.
name|getPropertyValue
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|emptyBodyAndMissingObjectTypeHeaderCreatesFolderNode ()
specifier|public
name|void
name|emptyBodyAndMissingObjectTypeHeaderCreatesFolderNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"testFolder"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|newNodeId
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|newNodeId
argument_list|)
expr_stmt|;
name|CmisObject
name|newNode
init|=
name|retrieveCMISObjectByIdFromServer
argument_list|(
name|newNodeId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cmis:folder"
argument_list|,
name|newNode
operator|.
name|getType
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newNode
operator|instanceof
name|Folder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cmisPropertiesAreStored ()
specifier|public
name|void
name|cmisPropertiesAreStored
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|"Some content to be store"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"test.txt"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|newNodeId
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|CmisObject
name|newNode
init|=
name|retrieveCMISObjectByIdFromServer
argument_list|(
name|newNodeId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test.txt"
argument_list|,
name|newNode
operator|.
name|getPropertyValue
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text/plain; charset=UTF-8"
argument_list|,
name|newNode
operator|.
name|getPropertyValue
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|cmisSecondaryTypePropertiesAreStored ()
specifier|public
name|void
name|cmisSecondaryTypePropertiesAreStored
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|secondaryTypes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"MySecondaryType"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|"Some content to be store"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"test.txt"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|SECONDARY_OBJECT_TYPE_IDS
argument_list|,
name|secondaryTypes
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
literal|"SecondaryStringProp"
argument_list|,
literal|"secondaryTypePropValue"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|newNodeId
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|CmisObject
name|newNode
init|=
name|retrieveCMISObjectByIdFromServer
argument_list|(
name|newNodeId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newNode
operator|.
name|getSecondaryTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"secondaryTypePropValue"
argument_list|,
name|newNode
operator|.
name|getPropertyValue
argument_list|(
literal|"SecondaryStringProp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CmisInvalidArgumentException
operator|.
name|class
argument_list|)
DECL|method|failConnectingToNonExistingRepository ()
specifier|public
name|void
name|failConnectingToNonExistingRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cmis://"
operator|+
name|getUrl
argument_list|()
operator|+
literal|"?username=admin&password=admin&repositoryId=NON_EXISTING_ID"
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|"Some content to be store"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"test.txt"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|createDocumentAtSpecificPath ()
specifier|public
name|void
name|createDocumentAtSpecificPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Folder
name|folder1
init|=
name|createFolderWithName
argument_list|(
literal|"Folder1"
argument_list|)
decl_stmt|;
name|createChildFolderWithName
argument_list|(
name|folder1
argument_list|,
literal|"Folder2"
argument_list|)
expr_stmt|;
name|String
name|existingFolderStructure
init|=
literal|"/Folder1/Folder2"
decl_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|"Some content to be stored"
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|CONTENT_STREAM_MIME_TYPE
argument_list|,
literal|"text/plain; charset=UTF-8"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"test.file"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_FOLDER_PATH
argument_list|,
name|existingFolderStructure
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|String
name|newNodeId
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
operator|(
name|Document
operator|)
name|retrieveCMISObjectByIdFromServer
argument_list|(
name|newNodeId
argument_list|)
decl_stmt|;
name|String
name|documentFullPath
init|=
name|document
operator|.
name|getPaths
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|existingFolderStructure
operator|+
literal|"/test.file"
argument_list|,
name|documentFullPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|failCreatingFolderAtNonExistingPath ()
specifier|public
name|void
name|failCreatingFolderAtNonExistingPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|existingFolderStructure
init|=
literal|"/No/Path/Here"
decl_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithInBody
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|NAME
argument_list|,
literal|"folder1"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|PropertyIds
operator|.
name|OBJECT_TYPE_ID
argument_list|,
literal|"cmis:folder"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|CamelCMISConstants
operator|.
name|CMIS_FOLDER_PATH
argument_list|,
name|existingFolderStructure
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
operator|instanceof
name|RuntimeExchangeException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"cmis://"
operator|+
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

