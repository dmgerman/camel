begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.language.juel.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|juel
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|XsltBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|StringSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|language
operator|.
name|juel
operator|.
name|JuelExpression
operator|.
name|el
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|XsltLosesHeaderTest
specifier|public
class|class
name|XsltLosesHeaderTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|xslt
specifier|protected
name|String
name|xslt
init|=
literal|"<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>"
operator|+
literal|"<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">"
operator|+
literal|"<xsl:template match=\"/cats\">"
operator|+
literal|"<b>dummy</b>"
operator|+
literal|"</xsl:template>"
operator|+
literal|"</xsl:stylesheet>"
decl_stmt|;
DECL|method|testXsltLosesHeader ()
specifier|public
name|void
name|testXsltLosesHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|endpointAfter
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:After"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|endpointBefore
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:Before"
argument_list|)
decl_stmt|;
name|endpointBefore
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"header:hello"
argument_list|)
expr_stmt|;
name|endpointAfter
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"header:hello"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"seda:xslttest"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|endpointBefore
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|endpointAfter
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|TransformerConfigurationException
block|{
name|from
argument_list|(
literal|"seda:xslttest"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"testheader"
argument_list|,
name|el
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
operator|.
name|setBody
argument_list|(
name|el
argument_list|(
literal|"header:${in.headers.testheader}"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:Before"
argument_list|)
operator|.
name|setBody
argument_list|(
name|el
argument_list|(
literal|"<cats><cat id=\"1\"/><cat id=\"2\"/></cats>"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|XsltBuilder
operator|.
name|xslt
argument_list|(
operator|new
name|StringSource
argument_list|(
name|xslt
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setBody
argument_list|(
name|el
argument_list|(
literal|"header:${in.headers.testheader}"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:After"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

