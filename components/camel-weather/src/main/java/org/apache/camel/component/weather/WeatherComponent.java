begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.weather
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|http
operator|.
name|AuthenticationHttpClientConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|http
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|http
operator|.
name|CompositeHttpConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|http
operator|.
name|HttpClientConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|MultiThreadedHttpConnectionManager
import|;
end_import

begin_comment
comment|/**  * A<a href="http://camel.apache.org/weather.html">Weather Component</a>.  *<p/>  * Camel uses<a href="http://openweathermap.org/api#weather">Open Weather</a> to get the information.  */
end_comment

begin_class
DECL|class|WeatherComponent
specifier|public
class|class
name|WeatherComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|httpClient
specifier|private
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|geolocationAccessKey
specifier|private
name|String
name|geolocationAccessKey
decl_stmt|;
DECL|field|geolocationRequestHostIP
specifier|private
name|String
name|geolocationRequestHostIP
decl_stmt|;
DECL|method|WeatherComponent ()
specifier|public
name|WeatherComponent
parameter_list|()
block|{
name|super
argument_list|(
name|WeatherEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|WeatherComponent (CamelContext context)
specifier|public
name|WeatherComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|WeatherEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|WeatherConfiguration
name|configuration
init|=
operator|new
name|WeatherConfiguration
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// and then override from parameters
name|setProperties
argument_list|(
name|configuration
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|httpClient
operator|=
name|createHttpClient
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|geolocationAccessKey
operator|=
name|configuration
operator|.
name|getGeolocationAccessKey
argument_list|()
expr_stmt|;
name|geolocationRequestHostIP
operator|=
name|configuration
operator|.
name|getGeolocationRequestHostIP
argument_list|()
expr_stmt|;
name|WeatherEndpoint
name|endpoint
init|=
operator|new
name|WeatherEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|createHttpClient (WeatherConfiguration configuration)
specifier|private
name|HttpClient
name|createHttpClient
parameter_list|(
name|WeatherConfiguration
name|configuration
parameter_list|)
block|{
name|HttpConnectionManager
name|connectionManager
init|=
name|configuration
operator|.
name|getHttpConnectionManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionManager
operator|==
literal|null
condition|)
block|{
name|connectionManager
operator|=
operator|new
name|MultiThreadedHttpConnectionManager
argument_list|()
expr_stmt|;
block|}
name|HttpClient
name|httpClient
init|=
operator|new
name|HttpClient
argument_list|(
name|connectionManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getProxyHost
argument_list|()
operator|!=
literal|null
operator|&&
name|configuration
operator|.
name|getProxyPort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|httpClient
operator|.
name|getHostConfiguration
argument_list|()
operator|.
name|setProxy
argument_list|(
name|configuration
operator|.
name|getProxyHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getProxyPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getProxyAuthUsername
argument_list|()
operator|!=
literal|null
operator|&&
name|configuration
operator|.
name|getProxyAuthMethod
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option proxyAuthMethod must be provided to use proxy authentication"
argument_list|)
throw|;
block|}
name|CompositeHttpConfigurer
name|configurer
init|=
operator|new
name|CompositeHttpConfigurer
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getProxyAuthMethod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|configureProxyAuth
argument_list|(
name|configurer
argument_list|,
name|configuration
operator|.
name|getProxyAuthMethod
argument_list|()
argument_list|,
name|configuration
operator|.
name|getProxyAuthUsername
argument_list|()
argument_list|,
name|configuration
operator|.
name|getProxyAuthPassword
argument_list|()
argument_list|,
name|configuration
operator|.
name|getProxyAuthDomain
argument_list|()
argument_list|,
name|configuration
operator|.
name|getProxyAuthHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|configurer
operator|.
name|configureHttpClient
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
return|return
name|httpClient
return|;
block|}
DECL|method|configureProxyAuth (CompositeHttpConfigurer configurer, String authMethod, String username, String password, String domain, String host)
specifier|private
name|HttpClientConfigurer
name|configureProxyAuth
parameter_list|(
name|CompositeHttpConfigurer
name|configurer
parameter_list|,
name|String
name|authMethod
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|domain
parameter_list|,
name|String
name|host
parameter_list|)
block|{
comment|// no proxy auth is in use
if|if
condition|(
name|username
operator|==
literal|null
operator|&&
name|authMethod
operator|==
literal|null
condition|)
block|{
return|return
name|configurer
return|;
block|}
comment|// validate mandatory options given
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
name|authMethod
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Option proxyAuthMethod must be provided to use proxy authentication"
argument_list|)
throw|;
block|}
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|authMethod
argument_list|,
literal|"proxyAuthMethod"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|username
argument_list|,
literal|"proxyAuthUsername"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|password
argument_list|,
literal|"proxyAuthPassword"
argument_list|)
expr_stmt|;
name|AuthenticationMethod
name|auth
init|=
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|AuthenticationMethod
operator|.
name|class
argument_list|,
name|authMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|auth
operator|==
name|AuthenticationMethod
operator|.
name|Basic
operator|||
name|auth
operator|==
name|AuthenticationMethod
operator|.
name|Digest
condition|)
block|{
name|configurer
operator|.
name|addConfigurer
argument_list|(
name|AuthenticationHttpClientConfigurer
operator|.
name|basicAutenticationConfigurer
argument_list|(
literal|true
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|configurer
return|;
block|}
elseif|else
if|if
condition|(
name|auth
operator|==
name|AuthenticationMethod
operator|.
name|NTLM
condition|)
block|{
comment|// domain is mandatory for NTML
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|domain
argument_list|,
literal|"proxyAuthDomain"
argument_list|)
expr_stmt|;
name|configurer
operator|.
name|addConfigurer
argument_list|(
name|AuthenticationHttpClientConfigurer
operator|.
name|ntlmAutenticationConfigurer
argument_list|(
literal|true
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|domain
argument_list|,
name|host
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|configurer
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown proxyAuthMethod "
operator|+
name|authMethod
argument_list|)
throw|;
block|}
DECL|method|getHttpClient ()
specifier|public
name|HttpClient
name|getHttpClient
parameter_list|()
block|{
return|return
name|httpClient
return|;
block|}
DECL|method|getGeolocationAccessKey ()
specifier|public
name|String
name|getGeolocationAccessKey
parameter_list|()
block|{
return|return
name|geolocationAccessKey
return|;
block|}
comment|/**      * The geolocation service now needs an accessKey to be used      */
DECL|method|setGeolocationAccessKey (String geolocationAccessKey)
specifier|public
name|void
name|setGeolocationAccessKey
parameter_list|(
name|String
name|geolocationAccessKey
parameter_list|)
block|{
name|this
operator|.
name|geolocationAccessKey
operator|=
name|geolocationAccessKey
expr_stmt|;
block|}
DECL|method|getGeolocationRequestHostIP ()
specifier|public
name|String
name|getGeolocationRequestHostIP
parameter_list|()
block|{
return|return
name|geolocationRequestHostIP
return|;
block|}
comment|/**      * The geolocation service now needs to specify the IP associated to the accessKey you're using      */
DECL|method|setGeolocationRequestHostIP (String geolocationRequestHostIP)
specifier|public
name|void
name|setGeolocationRequestHostIP
parameter_list|(
name|String
name|geolocationRequestHostIP
parameter_list|)
block|{
name|this
operator|.
name|geolocationRequestHostIP
operator|=
name|geolocationRequestHostIP
expr_stmt|;
block|}
block|}
end_class

end_unit

