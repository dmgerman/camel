begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.weather
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|geolocation
operator|.
name|GeoLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|geolocation
operator|.
name|GeoLocationProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|WeatherMode
operator|.
name|JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
import|;
end_import

begin_comment
comment|/**  * Logic for determining the query based on the provided  * configuration.  */
end_comment

begin_class
DECL|class|WeatherQuery
specifier|public
class|class
name|WeatherQuery
block|{
DECL|field|weatherConfiguration
specifier|private
specifier|final
name|WeatherConfiguration
name|weatherConfiguration
decl_stmt|;
DECL|field|geoLocationProvider
specifier|private
name|GeoLocationProvider
name|geoLocationProvider
decl_stmt|;
DECL|method|WeatherQuery (WeatherConfiguration weatherConfiguration)
specifier|public
name|WeatherQuery
parameter_list|(
name|WeatherConfiguration
name|weatherConfiguration
parameter_list|)
block|{
name|this
operator|.
name|weatherConfiguration
operator|=
name|weatherConfiguration
expr_stmt|;
block|}
DECL|method|getQuery ()
specifier|public
name|String
name|getQuery
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getQuery
argument_list|(
name|weatherConfiguration
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getQuery (String location)
specifier|public
name|String
name|getQuery
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|answer
init|=
literal|"http://api.openweathermap.org/data/2.5/"
decl_stmt|;
if|if
condition|(
name|weatherConfiguration
operator|.
name|getLat
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getLon
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getRightLon
argument_list|()
operator|==
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getTopLat
argument_list|()
operator|==
literal|null
condition|)
block|{
name|location
operator|=
name|createLatLonQueryString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|weatherConfiguration
operator|.
name|getLat
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getLon
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getRightLon
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getTopLat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|location
operator|=
literal|"bbox="
operator|+
name|weatherConfiguration
operator|.
name|getLon
argument_list|()
operator|+
literal|","
operator|+
name|weatherConfiguration
operator|.
name|getLat
argument_list|()
operator|+
literal|","
operator|+
name|weatherConfiguration
operator|.
name|getRightLon
argument_list|()
operator|+
literal|","
operator|+
name|weatherConfiguration
operator|.
name|getTopLat
argument_list|()
operator|+
literal|","
operator|+
name|weatherConfiguration
operator|.
name|getZoom
argument_list|()
operator|+
literal|"&cluster=yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|weatherConfiguration
operator|.
name|getZip
argument_list|()
argument_list|)
condition|)
block|{
name|location
operator|=
literal|"zip="
operator|+
name|weatherConfiguration
operator|.
name|getZip
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|weatherConfiguration
operator|.
name|getIds
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getIds
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|location
operator|=
literal|"id="
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|weatherConfiguration
operator|.
name|getIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isEmpty
argument_list|(
name|location
argument_list|)
operator|||
literal|"current"
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|GeoLocation
name|geoLocation
init|=
name|getCurrentGeoLocation
argument_list|()
decl_stmt|;
name|weatherConfiguration
operator|.
name|setLat
argument_list|(
name|geoLocation
operator|.
name|getLatitude
argument_list|()
argument_list|)
expr_stmt|;
name|weatherConfiguration
operator|.
name|setLon
argument_list|(
name|geoLocation
operator|.
name|getLongitude
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|=
name|createLatLonQueryString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// assuming the location is a town or country
name|location
operator|=
literal|"q="
operator|+
name|location
expr_stmt|;
block|}
name|location
operator|=
name|location
operator|+
literal|"&lang="
operator|+
name|weatherConfiguration
operator|.
name|getLanguage
argument_list|()
expr_stmt|;
name|String
name|context
init|=
name|createContext
argument_list|()
decl_stmt|;
name|answer
operator|+=
name|context
operator|+
name|location
expr_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|weatherConfiguration
operator|.
name|getPeriod
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|+=
literal|"&cnt="
operator|+
name|weatherConfiguration
operator|.
name|getPeriod
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|weatherConfiguration
operator|.
name|getCnt
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|+=
literal|"&cnt="
operator|+
name|weatherConfiguration
operator|.
name|getCnt
argument_list|()
expr_stmt|;
block|}
comment|// append the desired measurement unit if not the default (which is metric)
if|if
condition|(
name|weatherConfiguration
operator|.
name|getUnits
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|+=
literal|"&units="
operator|+
name|weatherConfiguration
operator|.
name|getUnits
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
comment|// append the desired output mode if not the default (which is json)
if|if
condition|(
name|weatherConfiguration
operator|.
name|getMode
argument_list|()
operator|!=
name|JSON
condition|)
block|{
name|answer
operator|+=
literal|"&mode="
operator|+
name|weatherConfiguration
operator|.
name|getMode
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|weatherConfiguration
operator|.
name|getAppid
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|+=
literal|"&APPID="
operator|+
name|weatherConfiguration
operator|.
name|getAppid
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createContext ()
specifier|private
name|String
name|createContext
parameter_list|()
block|{
name|String
name|answer
decl_stmt|;
if|if
condition|(
name|isBoxedQuery
argument_list|()
condition|)
block|{
if|if
condition|(
name|weatherConfiguration
operator|.
name|getWeatherApi
argument_list|()
operator|==
name|WeatherApi
operator|.
name|Station
condition|)
block|{
name|answer
operator|=
literal|"box/station?"
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
literal|"box/city?"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isGeoLocation
argument_list|()
operator|&&
name|weatherConfiguration
operator|.
name|getCnt
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|weatherConfiguration
operator|.
name|getWeatherApi
argument_list|()
operator|==
name|WeatherApi
operator|.
name|Station
condition|)
block|{
name|answer
operator|=
literal|"station/find?"
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
literal|"find?"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|weatherConfiguration
operator|.
name|getIds
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getIds
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|weatherConfiguration
operator|.
name|getIds
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|weatherConfiguration
operator|.
name|getPeriod
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|weatherConfiguration
operator|.
name|getWeatherApi
argument_list|()
operator|==
name|WeatherApi
operator|.
name|Hourly
condition|)
block|{
name|answer
operator|=
literal|"forecast?"
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
literal|"forecast/daily?"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|weatherConfiguration
operator|.
name|getWeatherApi
argument_list|()
operator|==
name|WeatherApi
operator|.
name|Station
condition|)
block|{
name|answer
operator|=
literal|"station?"
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
literal|"weather?"
expr_stmt|;
block|}
block|}
else|else
block|{
name|answer
operator|=
literal|"group?"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isEmpty
argument_list|(
name|weatherConfiguration
operator|.
name|getPeriod
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|=
literal|"weather?"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|weatherConfiguration
operator|.
name|getWeatherApi
argument_list|()
operator|==
name|WeatherApi
operator|.
name|Hourly
condition|)
block|{
name|answer
operator|=
literal|"forecast?"
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
literal|"forecast/daily?"
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|isGeoLocation ()
specifier|private
name|boolean
name|isGeoLocation
parameter_list|()
block|{
return|return
name|weatherConfiguration
operator|.
name|getLat
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getLon
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|createLatLonQueryString ()
specifier|private
name|String
name|createLatLonQueryString
parameter_list|()
block|{
return|return
literal|"lat="
operator|+
name|weatherConfiguration
operator|.
name|getLat
argument_list|()
operator|+
literal|"&lon="
operator|+
name|weatherConfiguration
operator|.
name|getLon
argument_list|()
return|;
block|}
DECL|method|isBoxedQuery ()
specifier|private
name|boolean
name|isBoxedQuery
parameter_list|()
block|{
return|return
name|weatherConfiguration
operator|.
name|getTopLat
argument_list|()
operator|!=
literal|null
operator|&&
name|weatherConfiguration
operator|.
name|getRightLon
argument_list|()
operator|!=
literal|null
return|;
block|}
DECL|method|getCurrentGeoLocation ()
name|GeoLocation
name|getCurrentGeoLocation
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|geoLocationProvider
operator|.
name|getCurrentGeoLocation
argument_list|()
return|;
block|}
DECL|method|setGeoLocationProvider (GeoLocationProvider geoLocationProvider)
name|void
name|setGeoLocationProvider
parameter_list|(
name|GeoLocationProvider
name|geoLocationProvider
parameter_list|)
block|{
name|this
operator|.
name|geoLocationProvider
operator|=
name|geoLocationProvider
expr_stmt|;
block|}
block|}
end_class

end_unit

