begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.weather
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|WeatherMode
operator|.
name|JSON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|weather
operator|.
name|WeatherUnits
operator|.
name|METRIC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|isEmpty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|notNull
import|;
end_import

begin_class
DECL|class|WeatherConfiguration
specifier|public
class|class
name|WeatherConfiguration
block|{
annotation|@
name|UriParam
DECL|field|location
specifier|private
name|String
name|location
init|=
literal|""
decl_stmt|;
annotation|@
name|UriParam
DECL|field|period
specifier|private
name|String
name|period
init|=
literal|""
decl_stmt|;
annotation|@
name|UriParam
DECL|field|mode
specifier|private
name|WeatherMode
name|mode
init|=
name|JSON
decl_stmt|;
annotation|@
name|UriParam
DECL|field|units
specifier|private
name|WeatherUnits
name|units
init|=
name|METRIC
decl_stmt|;
DECL|field|component
specifier|private
specifier|final
name|WeatherComponent
name|component
decl_stmt|;
DECL|method|WeatherConfiguration (WeatherComponent component)
specifier|public
name|WeatherConfiguration
parameter_list|(
name|WeatherComponent
name|component
parameter_list|)
block|{
name|this
operator|.
name|component
operator|=
name|notNull
argument_list|(
name|component
argument_list|,
literal|"component"
argument_list|)
expr_stmt|;
block|}
DECL|method|getPeriod ()
specifier|public
name|String
name|getPeriod
parameter_list|()
block|{
return|return
name|period
return|;
block|}
DECL|method|setPeriod (String period)
specifier|public
name|void
name|setPeriod
parameter_list|(
name|String
name|period
parameter_list|)
block|{
name|notNull
argument_list|(
name|period
argument_list|,
literal|"period"
argument_list|)
expr_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
try|try
block|{
name|result
operator|=
operator|new
name|Scanner
argument_list|(
name|period
argument_list|)
operator|.
name|useDelimiter
argument_list|(
literal|"\\D+"
argument_list|)
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and fallback the period to be an empty string
block|}
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
name|this
operator|.
name|period
operator|=
literal|""
operator|+
name|result
expr_stmt|;
block|}
block|}
DECL|method|getMode ()
specifier|public
name|WeatherMode
name|getMode
parameter_list|()
block|{
return|return
name|mode
return|;
block|}
DECL|method|setMode (WeatherMode mode)
specifier|public
name|void
name|setMode
parameter_list|(
name|WeatherMode
name|mode
parameter_list|)
block|{
name|this
operator|.
name|mode
operator|=
name|notNull
argument_list|(
name|mode
argument_list|,
literal|"mode"
argument_list|)
expr_stmt|;
block|}
DECL|method|getUnits ()
specifier|public
name|WeatherUnits
name|getUnits
parameter_list|()
block|{
return|return
name|units
return|;
block|}
DECL|method|setUnits (WeatherUnits units)
specifier|public
name|void
name|setUnits
parameter_list|(
name|WeatherUnits
name|units
parameter_list|)
block|{
name|this
operator|.
name|units
operator|=
name|notNull
argument_list|(
name|units
argument_list|,
literal|"units"
argument_list|)
expr_stmt|;
block|}
DECL|method|getLocation ()
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
DECL|method|setLocation (String location)
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
DECL|method|getQuery ()
specifier|public
name|String
name|getQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|answer
init|=
literal|"http://api.openweathermap.org/data/2.5/"
decl_stmt|;
name|String
name|location
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|(
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
name|location
operator|=
name|getGeoLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// assuming the location is a town or country
name|location
operator|=
literal|"q="
operator|+
name|getLocation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isEmpty
argument_list|(
name|getPeriod
argument_list|()
argument_list|)
condition|)
block|{
name|answer
operator|+=
literal|"weather?"
operator|+
name|location
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|+=
literal|"forecast/daily?"
operator|+
name|location
operator|+
literal|"&cnt="
operator|+
name|getPeriod
argument_list|()
expr_stmt|;
block|}
comment|// append the desired measurement unit if not the default (which is metric)
if|if
condition|(
name|getUnits
argument_list|()
operator|!=
name|METRIC
condition|)
block|{
name|answer
operator|+=
literal|"&units="
operator|+
name|getUnits
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
comment|// append the desired output mode if not the default (which is json)
if|if
condition|(
name|getMode
argument_list|()
operator|!=
name|JSON
condition|)
block|{
name|answer
operator|+=
literal|"&mode="
operator|+
name|getMode
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getGeoLocation ()
specifier|private
name|String
name|getGeoLocation
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|geoLocation
init|=
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
operator|new
name|URL
argument_list|(
literal|"http://freegeoip.net/json/"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|(
name|geoLocation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Got the unexpected value '"
operator|+
name|geoLocation
operator|+
literal|"' for the geolocation"
argument_list|)
throw|;
block|}
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|JsonNode
name|node
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|geoLocation
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|JsonNode
name|latitudeNode
init|=
name|notNull
argument_list|(
name|node
operator|.
name|get
argument_list|(
literal|"latitude"
argument_list|)
argument_list|,
literal|"latitude"
argument_list|)
decl_stmt|;
name|JsonNode
name|longitudeNode
init|=
name|notNull
argument_list|(
name|node
operator|.
name|get
argument_list|(
literal|"longitude"
argument_list|)
argument_list|,
literal|"longitude"
argument_list|)
decl_stmt|;
return|return
literal|"lat="
operator|+
name|latitudeNode
operator|+
literal|"&lon="
operator|+
name|longitudeNode
return|;
block|}
block|}
end_class

end_unit

