begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ode
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test which let Camel invoke a bpel process  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|OdeCamelHelloWorldTest
specifier|public
class|class
name|OdeCamelHelloWorldTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testOde ()
specifier|public
name|void
name|testOde
parameter_list|()
throws|throws
name|Exception
block|{
name|OdeService
name|service
init|=
operator|new
name|OdeService
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
literal|""
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/target/test-classes"
decl_stmt|;
name|String
name|work
init|=
name|dir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/target"
decl_stmt|;
name|service
operator|.
name|setInstallRoot
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|service
operator|.
name|setWorkRoot
argument_list|(
name|work
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================="
argument_list|)
expr_stmt|;
name|String
name|deploy
init|=
literal|"bpel/HelloWorld2"
decl_stmt|;
name|service
operator|.
name|deployBpel
argument_list|(
name|deploy
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================="
argument_list|)
expr_stmt|;
name|String
name|reply
init|=
name|service
operator|.
name|invokeSomething
argument_list|(
literal|"Bye"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================="
argument_list|)
expr_stmt|;
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<message><TestPart>Bye World</TestPart></message>"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

