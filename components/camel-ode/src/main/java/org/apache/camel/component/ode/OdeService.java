begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.ode
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|dao
operator|.
name|BpelDAOConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|engine
operator|.
name|BpelServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|extvar
operator|.
name|jdbc
operator|.
name|JdbcExternalVariableModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|iapi
operator|.
name|BindingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|iapi
operator|.
name|EndpointReferenceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|iapi
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|iapi
operator|.
name|MessageExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|iapi
operator|.
name|MessageExchangeContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|iapi
operator|.
name|MyRoleMessageExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|iapi
operator|.
name|ProcessStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|bpel
operator|.
name|memdao
operator|.
name|BpelDAOConnectionFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|il
operator|.
name|MockScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|il
operator|.
name|config
operator|.
name|OdeConfigProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|il
operator|.
name|dbutil
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|store
operator|.
name|ProcessConfImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ode
operator|.
name|store
operator|.
name|ProcessStoreImpl
import|;
end_import

begin_comment
comment|/**  * Encapsulates all the stuff needed to setup and use Apache ODE.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|OdeService
specifier|public
class|class
name|OdeService
extends|extends
name|ServiceSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OdeService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CONFIG_FILE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_FILE_NAME
init|=
literal|"camel-ode.properties"
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|installRoot
specifier|private
name|String
name|installRoot
init|=
literal|"./target"
decl_stmt|;
DECL|field|workRoot
specifier|private
name|String
name|workRoot
init|=
literal|"./target"
decl_stmt|;
DECL|field|config
specifier|private
name|OdeConfigProperties
name|config
decl_stmt|;
DECL|field|server
specifier|private
name|BpelServerImpl
name|server
decl_stmt|;
DECL|field|store
specifier|private
name|ProcessStore
name|store
decl_stmt|;
DECL|field|scheduler
specifier|private
name|MockScheduler
name|scheduler
decl_stmt|;
DECL|field|database
specifier|private
name|Database
name|database
decl_stmt|;
DECL|field|dataSource
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
DECL|field|transactionManager
specifier|private
name|TransactionManager
name|transactionManager
decl_stmt|;
DECL|field|daoConnectionFactory
specifier|private
name|BpelDAOConnectionFactory
name|daoConnectionFactory
decl_stmt|;
DECL|field|messageExchangeContext
specifier|private
name|MessageExchangeContext
name|messageExchangeContext
decl_stmt|;
DECL|field|endpointReferenceContext
specifier|private
name|EndpointReferenceContext
name|endpointReferenceContext
decl_stmt|;
DECL|field|bindingContext
specifier|private
name|BindingContext
name|bindingContext
decl_stmt|;
DECL|method|OdeService (CamelContext camelContext)
specifier|public
name|OdeService
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|initBpelServer ()
specifier|private
name|void
name|initBpelServer
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|OdeConfigProperties
argument_list|(
operator|new
name|File
argument_list|(
name|getInstallRoot
argument_list|()
operator|+
literal|"/"
operator|+
name|CONFIG_FILE_NAME
argument_list|)
argument_list|,
name|CONFIG_FILE_NAME
argument_list|)
expr_stmt|;
name|config
operator|.
name|load
argument_list|()
expr_stmt|;
name|server
operator|=
operator|new
name|BpelServerImpl
argument_list|()
expr_stmt|;
comment|// We don't want the server to automatically load deployed processes, we'll do that explicitly
name|endpointReferenceContext
operator|=
operator|new
name|OdeEndpointReferenceContext
argument_list|()
expr_stmt|;
name|messageExchangeContext
operator|=
operator|new
name|OdeMessageExchangeContext
argument_list|()
expr_stmt|;
name|bindingContext
operator|=
operator|new
name|OdeBindingContext
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|new
name|MockScheduler
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setJobProcessor
argument_list|(
name|server
argument_list|)
expr_stmt|;
comment|// support setting using core/max pool size
comment|//        ExecutorService executorService = Executors.newCachedThreadPool();
comment|//        SimpleScheduler scheduler = new SimpleScheduler(new GUID().toString(), new JdbcDelegate(dataSource), config.getProperties());
comment|//        scheduler.setJobProcessor(server);
comment|//        scheduler.setExecutorService(executorService);
comment|//        scheduler.setTransactionManager(transactionManager);
comment|//        ProcessStoreImpl store = new ProcessStoreImpl(endpointReferenceContext, dataSource, config.getDAOConnectionFactory(), config, false);
name|store
operator|=
operator|new
name|ProcessStoreImpl
argument_list|(
name|endpointReferenceContext
argument_list|,
literal|null
argument_list|,
literal|"jpa"
argument_list|,
name|config
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//        registerExternalVariableModules();
comment|//        store.loadAll();
name|daoConnectionFactory
operator|=
operator|new
name|BpelDAOConnectionFactoryImpl
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|server
operator|.
name|setInMemDaoConnectionFactory
argument_list|(
operator|new
name|BpelDAOConnectionFactoryImpl
argument_list|(
name|scheduler
argument_list|,
name|config
operator|.
name|getInMemMexTtl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|setDaoConnectionFactory
argument_list|(
name|daoConnectionFactory
argument_list|)
expr_stmt|;
name|server
operator|.
name|setEndpointReferenceContext
argument_list|(
name|endpointReferenceContext
argument_list|)
expr_stmt|;
name|server
operator|.
name|setMessageExchangeContext
argument_list|(
name|messageExchangeContext
argument_list|)
expr_stmt|;
name|server
operator|.
name|setBindingContext
argument_list|(
name|bindingContext
argument_list|)
expr_stmt|;
name|server
operator|.
name|setScheduler
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|server
operator|.
name|setConfigProperties
argument_list|(
name|config
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|//        server.registerBpelEventListener(new DebugBpelEventListener());
name|server
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
DECL|method|registerExternalVariableModules ()
specifier|private
name|void
name|registerExternalVariableModules
parameter_list|()
block|{
name|JdbcExternalVariableModule
name|jdbcext
init|=
operator|new
name|JdbcExternalVariableModule
argument_list|()
decl_stmt|;
name|jdbcext
operator|.
name|registerDataSource
argument_list|(
literal|"camel-ode"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
name|server
operator|.
name|registerExternalVariableEngine
argument_list|(
name|jdbcext
argument_list|)
expr_stmt|;
block|}
DECL|method|deployBpel (String dir)
specifier|public
name|void
name|deployBpel
parameter_list|(
name|String
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|deployxml
init|=
name|dir
operator|+
literal|"/deploy.xml"
decl_stmt|;
name|URL
name|url
init|=
name|camelContext
operator|.
name|getClassResolver
argument_list|()
operator|.
name|loadResourceAsURL
argument_list|(
name|deployxml
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|deployxml
argument_list|)
throw|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|QName
argument_list|>
name|procs
init|=
name|store
operator|.
name|deploy
argument_list|(
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|QName
name|procName
range|:
name|procs
control|)
block|{
name|ProcessConfImpl
name|conf
init|=
operator|(
name|ProcessConfImpl
operator|)
name|store
operator|.
name|getProcessConfiguration
argument_list|(
name|procName
argument_list|)
decl_stmt|;
comment|// Test processes always run with in-mem DAOs
name|conf
operator|.
name|setTransient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|server
operator|.
name|register
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|invokeSomething (String name)
specifier|public
name|String
name|invokeSomething
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|answer
init|=
literal|null
decl_stmt|;
name|String
name|guid
init|=
literal|"12345678"
decl_stmt|;
name|QName
name|serviceName
init|=
operator|new
name|QName
argument_list|(
literal|"http://ode/bpel/unit-test.wsdl"
argument_list|,
literal|"HelloService"
argument_list|)
decl_stmt|;
name|String
name|operation
init|=
literal|"hello"
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|MessageExchange
operator|.
name|Status
argument_list|>
name|running
decl_stmt|;
name|MyRoleMessageExchange
name|role
decl_stmt|;
name|scheduler
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|role
operator|=
name|server
operator|.
name|getEngine
argument_list|()
operator|.
name|createMessageExchange
argument_list|(
name|guid
argument_list|,
name|serviceName
argument_list|,
name|operation
argument_list|)
expr_stmt|;
comment|//role.setProperty("isTwoWay", "true");
name|Message
name|msg
init|=
name|role
operator|.
name|createMessage
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
literal|"<message><TestPart>"
operator|+
name|name
operator|+
literal|"</TestPart></message>"
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setMessage
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending msg "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|running
operator|=
name|role
operator|.
name|invoke
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scheduler
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
name|running
operator|.
name|get
argument_list|(
literal|10000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|MessageExchange
operator|.
name|Status
name|status
init|=
name|role
operator|.
name|getStatus
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Status: "
operator|+
name|status
argument_list|)
expr_stmt|;
name|Message
name|response
init|=
name|role
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Response: "
operator|+
name|response
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|response
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Response XML: "
operator|+
name|xml
argument_list|)
expr_stmt|;
name|answer
operator|=
name|xml
expr_stmt|;
block|}
finally|finally
block|{
name|scheduler
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|getInstallRoot ()
specifier|public
name|String
name|getInstallRoot
parameter_list|()
block|{
return|return
name|installRoot
return|;
block|}
DECL|method|setInstallRoot (String installRoot)
specifier|public
name|void
name|setInstallRoot
parameter_list|(
name|String
name|installRoot
parameter_list|)
block|{
name|this
operator|.
name|installRoot
operator|=
name|installRoot
expr_stmt|;
block|}
DECL|method|getWorkRoot ()
specifier|public
name|String
name|getWorkRoot
parameter_list|()
block|{
return|return
name|workRoot
return|;
block|}
DECL|method|setWorkRoot (String workRoot)
specifier|public
name|void
name|setWorkRoot
parameter_list|(
name|String
name|workRoot
parameter_list|)
block|{
name|this
operator|.
name|workRoot
operator|=
name|workRoot
expr_stmt|;
block|}
DECL|method|getTransactionManager ()
specifier|public
name|TransactionManager
name|getTransactionManager
parameter_list|()
block|{
return|return
name|transactionManager
return|;
block|}
DECL|method|setTransactionManager (TransactionManager transactionManager)
specifier|public
name|void
name|setTransactionManager
parameter_list|(
name|TransactionManager
name|transactionManager
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|initBpelServer
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

