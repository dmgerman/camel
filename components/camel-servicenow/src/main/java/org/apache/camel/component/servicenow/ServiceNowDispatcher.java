begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servicenow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|ServiceNowDispatcher
specifier|public
class|class
name|ServiceNowDispatcher
block|{
DECL|field|predicate
specifier|private
specifier|final
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|predicate
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|Processor
name|delegate
decl_stmt|;
DECL|method|ServiceNowDispatcher (Predicate<Exchange> predicate, Processor delegate)
specifier|public
name|ServiceNowDispatcher
parameter_list|(
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|predicate
parameter_list|,
name|Processor
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|predicate
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|predicate
argument_list|,
literal|"predicate"
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|delegate
argument_list|,
literal|"delegate"
argument_list|)
expr_stmt|;
block|}
DECL|method|match (Exchange exchange)
specifier|public
name|boolean
name|match
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|predicate
operator|.
name|test
argument_list|(
name|exchange
argument_list|)
return|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|delegate
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|// ********************
comment|// Helpers
comment|// ********************
DECL|method|on (final String action, final String subject, final Processor delegate)
specifier|public
specifier|static
name|ServiceNowDispatcher
name|on
parameter_list|(
specifier|final
name|String
name|action
parameter_list|,
specifier|final
name|String
name|subject
parameter_list|,
specifier|final
name|Processor
name|delegate
parameter_list|)
block|{
return|return
operator|new
name|ServiceNowDispatcher
argument_list|(
name|e
lambda|->
name|matches
argument_list|(
name|e
operator|.
name|getIn
argument_list|()
argument_list|,
name|action
argument_list|,
name|subject
argument_list|)
argument_list|,
name|delegate
argument_list|)
return|;
block|}
DECL|method|matches (Message in, String action, final String subject)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|Message
name|in
parameter_list|,
name|String
name|action
parameter_list|,
specifier|final
name|String
name|subject
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|action
argument_list|,
name|in
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|ACTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|true
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|subject
argument_list|,
name|in
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|ACTION_SUBJECT
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

