begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servicenow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|model
operator|.
name|ServiceNowAggregateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|model
operator|.
name|ServiceNowImportSetProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|model
operator|.
name|ServiceNowTableProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * The ServiceNow producer.  */
end_comment

begin_class
DECL|class|ServiceNowProducer
specifier|public
class|class
name|ServiceNowProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|ServiceNowEndpoint
name|endpoint
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|ServiceNowConfiguration
name|configuration
decl_stmt|;
DECL|field|tableCache
specifier|private
specifier|final
name|WeakThreadLocal
name|tableCache
decl_stmt|;
DECL|field|aggregateCache
specifier|private
specifier|final
name|WeakThreadLocal
name|aggregateCache
decl_stmt|;
DECL|field|importSetCache
specifier|private
specifier|final
name|WeakThreadLocal
name|importSetCache
decl_stmt|;
DECL|method|ServiceNowProducer (ServiceNowEndpoint endpoint)
specifier|public
name|ServiceNowProducer
parameter_list|(
name|ServiceNowEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableCache
operator|=
operator|new
name|WeakThreadLocal
argument_list|(
name|ServiceNowTableProcessor
operator|.
name|SUPPLIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|aggregateCache
operator|=
operator|new
name|WeakThreadLocal
argument_list|(
name|ServiceNowAggregateProcessor
operator|.
name|SUPPLIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|importSetCache
operator|=
operator|new
name|WeakThreadLocal
argument_list|(
name|ServiceNowImportSetProcessor
operator|.
name|SUPPLIER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|resource
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|RESOURCE
argument_list|,
name|configuration
operator|.
name|getResource
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|ServiceNowConstants
operator|.
name|RESOURCE_TABLE
argument_list|,
name|resource
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|tableCache
operator|.
name|get
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|ServiceNowConstants
operator|.
name|RESOURCE_AGGREGATE
argument_list|,
name|resource
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|aggregateCache
operator|.
name|get
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|ServiceNowConstants
operator|.
name|RESOURCE_IMPORT
argument_list|,
name|resource
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|importSetCache
operator|.
name|get
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown resource type: "
operator|+
name|resource
argument_list|)
throw|;
block|}
block|}
comment|// *************************************************************************
comment|// Thread-Local processor instances as CXF client proxies are not thread
comment|// safe. To be refactored once moved to Java 8 as ServiceNowProcessorSupplier
comment|// can be replaced by:
comment|//
comment|//     java.util.function.Function<ServiceNowEndpoint, Processor>
comment|//
comment|// so an instance of a specific processor can be obtained by a constructor
comment|// ref, i.e:
comment|//
comment|//     ServiceNowImportSetProcessor::new
comment|//
comment|// *************************************************************************
DECL|class|WeakThreadLocal
specifier|private
specifier|final
class|class
name|WeakThreadLocal
block|{
DECL|field|cache
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|WeakReference
argument_list|<
name|Processor
argument_list|>
argument_list|>
name|cache
decl_stmt|;
DECL|field|supplier
specifier|private
specifier|final
name|ServiceNowProducerProcessor
operator|.
name|Supplier
name|supplier
decl_stmt|;
DECL|method|WeakThreadLocal (ServiceNowProducerProcessor.Supplier supplier)
specifier|public
name|WeakThreadLocal
parameter_list|(
name|ServiceNowProducerProcessor
operator|.
name|Supplier
name|supplier
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|supplier
operator|=
name|supplier
expr_stmt|;
block|}
DECL|method|get ()
specifier|public
name|Processor
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
literal|null
decl_stmt|;
name|WeakReference
argument_list|<
name|Processor
argument_list|>
name|ref
init|=
name|cache
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|processor
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|==
literal|null
condition|)
block|{
name|processor
operator|=
name|supplier
operator|.
name|get
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|cache
operator|.
name|set
argument_list|(
operator|new
name|WeakReference
argument_list|<>
argument_list|(
name|processor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|processor
return|;
block|}
block|}
block|}
end_class

end_unit

