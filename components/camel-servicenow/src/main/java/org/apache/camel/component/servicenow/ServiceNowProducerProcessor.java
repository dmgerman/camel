begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servicenow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|ServiceNowProducerProcessor
specifier|public
specifier|abstract
class|class
name|ServiceNowProducerProcessor
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Processor
block|{
DECL|field|endpoint
specifier|protected
specifier|final
name|ServiceNowEndpoint
name|endpoint
decl_stmt|;
DECL|field|config
specifier|protected
specifier|final
name|ServiceNowConfiguration
name|config
decl_stmt|;
DECL|field|client
specifier|protected
specifier|final
name|T
name|client
decl_stmt|;
DECL|field|mapper
specifier|protected
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
comment|// Cache for JavaTypes
DECL|field|javaTypeCache
specifier|private
specifier|final
name|JavaTypeCache
name|javaTypeCache
decl_stmt|;
DECL|method|ServiceNowProducerProcessor (ServiceNowEndpoint endpoint, Class<T> type)
specifier|protected
name|ServiceNowProducerProcessor
parameter_list|(
name|ServiceNowEndpoint
name|endpoint
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|javaTypeCache
operator|=
operator|new
name|JavaTypeCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|endpoint
operator|.
name|createClient
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|config
operator|.
name|getMapper
argument_list|()
argument_list|,
literal|"mapper"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|tableName
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|TABLE
argument_list|,
name|config
operator|.
name|getTable
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|model
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|MODEL
argument_list|,
name|config
operator|.
name|getModel
argument_list|(
name|tableName
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|action
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|ACTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|sysId
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|SYSPARM_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|doProcess
argument_list|(
name|exchange
argument_list|,
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|model
argument_list|,
literal|"model"
argument_list|)
argument_list|,
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|action
argument_list|,
literal|"action"
argument_list|)
argument_list|,
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|tableName
argument_list|,
literal|"tableName"
argument_list|)
argument_list|,
name|sysId
argument_list|)
expr_stmt|;
block|}
DECL|method|doProcess ( Exchange exchange, Class<?> model, String action, String tableName, String sysId)
specifier|protected
specifier|abstract
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|model
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|sysId
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|validateBody (Message message, Class<?> model)
specifier|protected
name|ServiceNowProducerProcessor
argument_list|<
name|T
argument_list|>
name|validateBody
parameter_list|(
name|Message
name|message
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|model
parameter_list|)
block|{
return|return
name|validateBody
argument_list|(
name|message
operator|.
name|getBody
argument_list|()
argument_list|,
name|model
argument_list|)
return|;
block|}
DECL|method|validateBody (Object body, Class<?> model)
specifier|protected
name|ServiceNowProducerProcessor
argument_list|<
name|T
argument_list|>
name|validateBody
parameter_list|(
name|Object
name|body
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|model
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|body
argument_list|,
literal|"body"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|body
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|model
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Body is not compatible with model (body="
operator|+
name|body
operator|.
name|getClass
argument_list|()
operator|+
literal|", model="
operator|+
name|model
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
DECL|method|setBody (Message message, Class<?> model, JsonNode answer)
specifier|protected
name|ServiceNowProducerProcessor
argument_list|<
name|T
argument_list|>
name|setBody
parameter_list|(
name|Message
name|message
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|model
parameter_list|,
name|JsonNode
name|answer
parameter_list|)
throws|throws
name|Exception
block|{
name|message
operator|.
name|setBody
argument_list|(
name|unwrap
argument_list|(
name|answer
argument_list|,
name|model
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|unwrap (JsonNode answer, Class<?> model)
specifier|protected
name|Object
name|unwrap
parameter_list|(
name|JsonNode
name|answer
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|model
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|JsonNode
name|node
init|=
name|answer
operator|.
name|get
argument_list|(
literal|"result"
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|isArray
argument_list|()
condition|)
block|{
if|if
condition|(
name|model
operator|.
name|isInstance
argument_list|(
name|Map
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// If the model is a Map, there's no need to use any
comment|// specific JavaType to instruct Jackson about the
comment|// expected element type
name|result
operator|=
name|mapper
operator|.
name|treeToValue
argument_list|(
name|node
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|node
operator|.
name|traverse
argument_list|()
argument_list|,
name|javaTypeCache
operator|.
name|get
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|mapper
operator|.
name|treeToValue
argument_list|(
name|node
argument_list|,
name|model
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|// *************************************************************************
comment|// Use ClassValue to lazy create and cache JavaType
comment|// *************************************************************************
DECL|class|JavaTypeCache
specifier|private
class|class
name|JavaTypeCache
extends|extends
name|ClassValue
argument_list|<
name|JavaType
argument_list|>
block|{
annotation|@
name|Override
DECL|method|computeValue (Class<?> type)
specifier|protected
name|JavaType
name|computeValue
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|mapper
operator|.
name|getTypeFactory
argument_list|()
operator|.
name|constructCollectionType
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
comment|// *************************************************************************
comment|// To be replaced with:
comment|//
comment|//     java.util.function.Function<ServiceNowEndpoint, Processor>
comment|//
comment|// Once Camel will be Java 8 ready
comment|// *************************************************************************
DECL|interface|Supplier
specifier|public
interface|interface
name|Supplier
block|{
DECL|method|get (ServiceNowEndpoint endpoint)
name|Processor
name|get
parameter_list|(
name|ServiceNowEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

