begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servicenow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * To set-up ServiceNow for this tests:  *  * 1. Create a new table with  *   - id has to be set to u_imp_incidents (name does not matter)  *   - inherit from sys_import_set_row  *  * 2. Add a new field to u_imp_incidents  *   - name short_description  *   - id should be automatically set to u_short_description  *  * 3. Create a new Transform Map  *   - source table u_imp_incidents  *   - target table incidents  *   - Perform auto mapping, if it does not work map each field one by one  */
end_comment

begin_class
annotation|@
name|Ignore
DECL|class|ServiceNowImportSetTest
specifier|public
class|class
name|ServiceNowImportSetTest
extends|extends
name|ServiceNowTestSupport
block|{
annotation|@
name|Test
DECL|method|testIncidentImport ()
specifier|public
name|void
name|testIncidentImport
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:servicenow"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|reset
argument_list|()
expr_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|ServiceNowConstants
operator|.
name|RESPONSE_TYPE
argument_list|,
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
name|IncidentImportRequest
name|incident
init|=
operator|new
name|IncidentImportRequest
argument_list|()
decl_stmt|;
name|incident
operator|.
name|shortDescription
operator|=
literal|"test"
expr_stmt|;
name|template
argument_list|()
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:servicenow"
argument_list|,
name|incident
argument_list|,
name|kvBuilder
argument_list|()
operator|.
name|put
argument_list|(
name|ServiceNowConstants
operator|.
name|RESOURCE
argument_list|,
name|ServiceNowConstants
operator|.
name|RESOURCE_IMPORT
argument_list|)
operator|.
name|put
argument_list|(
name|ServiceNowConstants
operator|.
name|ACTION
argument_list|,
name|ServiceNowConstants
operator|.
name|ACTION_CREATE
argument_list|)
operator|.
name|put
argument_list|(
name|ServiceNowConstants
operator|.
name|REQUEST_MODEL
argument_list|,
name|IncidentImportRequest
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|ServiceNowConstants
operator|.
name|RESPONSE_MODEL
argument_list|,
name|IncidentImportResponse
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|ServiceNowParams
operator|.
name|PARAM_TABLE_NAME
argument_list|,
literal|"u_imp_incident"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Message
name|in
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
decl_stmt|;
comment|// Meta data
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|ServiceNowConstants
operator|.
name|RESPONSE_META
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"u_imp_incident"
argument_list|,
name|meta
operator|.
name|get
argument_list|(
literal|"staging_table"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Incidents
name|List
argument_list|<
name|IncidentImportResponse
argument_list|>
name|responses
init|=
name|in
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|responses
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|responses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inserted"
argument_list|,
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|status
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"imp_incidents"
argument_list|,
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|transformMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incident"
argument_list|,
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|table
argument_list|)
expr_stmt|;
block|}
comment|// *************************************************************************
comment|//
comment|// *************************************************************************
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:servicenow"
argument_list|)
operator|.
name|to
argument_list|(
literal|"servicenow:{{env:SERVICENOW_INSTANCE}}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel.component.servicenow?level=INFO&showAll=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:servicenow"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|// *************************************************************************
comment|//
comment|// *************************************************************************
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
DECL|class|IncidentImportRequest
specifier|private
specifier|static
specifier|final
class|class
name|IncidentImportRequest
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"u_short_description"
argument_list|)
DECL|field|shortDescription
specifier|public
name|String
name|shortDescription
decl_stmt|;
block|}
annotation|@
name|JsonIgnoreProperties
argument_list|(
name|ignoreUnknown
operator|=
literal|true
argument_list|)
annotation|@
name|JsonInclude
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
DECL|class|IncidentImportResponse
specifier|private
specifier|static
specifier|final
class|class
name|IncidentImportResponse
block|{
annotation|@
name|JsonProperty
argument_list|(
literal|"transform_map"
argument_list|)
DECL|field|transformMap
specifier|public
name|String
name|transformMap
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"table"
argument_list|)
DECL|field|table
specifier|public
name|String
name|table
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"display_name"
argument_list|)
DECL|field|displayName
specifier|public
name|String
name|displayName
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"display_value"
argument_list|)
DECL|field|displayValue
specifier|public
name|String
name|displayValue
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"record_link"
argument_list|)
DECL|field|recordLink
specifier|public
name|String
name|recordLink
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"status"
argument_list|)
DECL|field|status
specifier|public
name|String
name|status
decl_stmt|;
annotation|@
name|JsonProperty
argument_list|(
literal|"sys_id"
argument_list|)
DECL|field|sysId
specifier|public
name|String
name|sysId
decl_stmt|;
block|}
block|}
end_class

end_unit

