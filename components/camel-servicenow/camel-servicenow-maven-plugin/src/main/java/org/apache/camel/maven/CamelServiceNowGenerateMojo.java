begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|lang
operator|.
name|model
operator|.
name|element
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonIgnoreProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonProperty
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ArrayNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|AnnotationSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|FieldSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|JavaFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|MethodSpec
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|javapoet
operator|.
name|TypeSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|MetaDataExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|ServiceNowComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|annotations
operator|.
name|ServiceNowSysParm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_comment
comment|/**  * Goal to generate DTOs for ServiceNow objects  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"generate"
argument_list|,
name|requiresProject
operator|=
literal|false
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|GENERATE_SOURCES
argument_list|)
DECL|class|CamelServiceNowGenerateMojo
specifier|public
class|class
name|CamelServiceNowGenerateMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Location of generated DTO files, defaults to target/generated-sources/camel-salesforce.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.output.directory"
argument_list|,
name|defaultValue
operator|=
literal|"${project.build.directory}/generated-sources/camel-servicenow"
argument_list|)
DECL|field|outputDirectory
specifier|protected
name|File
name|outputDirectory
decl_stmt|;
comment|/**      * Java package name for generated DTOs.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.output.package"
argument_list|,
name|defaultValue
operator|=
literal|"org.apache.camel.servicenow.dto"
argument_list|)
DECL|field|packageName
specifier|protected
name|String
name|packageName
decl_stmt|;
comment|/**      * ServiceNow instance name.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.instance.name"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|instanceName
specifier|protected
name|String
name|instanceName
decl_stmt|;
comment|/**      * ServiceName user name.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.user.name"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|userName
specifier|protected
name|String
name|userName
decl_stmt|;
comment|/**      * ServiceNow user password.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.user.password"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
DECL|field|userPassword
specifier|protected
name|String
name|userPassword
decl_stmt|;
comment|/**      * ServiceNow OAuth2 client id.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.oauth2.client.id"
argument_list|)
DECL|field|oauthClientId
specifier|protected
name|String
name|oauthClientId
decl_stmt|;
comment|/**      * ServiceNow OAuth2 client secret.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.oauth2.client.secret"
argument_list|)
DECL|field|oauthClientSecret
specifier|protected
name|String
name|oauthClientSecret
decl_stmt|;
comment|/**      * SSL Context parameters.      */
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"camel.servicenow.ssl.parameters"
argument_list|)
DECL|field|sslParameters
specifier|protected
name|SSLContextParameters
name|sslParameters
decl_stmt|;
comment|/**      * ServiceNow objects for which DTOs must be generated.      */
annotation|@
name|Parameter
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|objects
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|objects
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
comment|/**      * ServiceNow fields to include in generated DTOs.      */
annotation|@
name|Parameter
DECL|field|fields
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
comment|/**      * ServiceNow fields to exclude from generated DTOs, fields explicit included      * have the precedence.      */
annotation|@
name|Parameter
DECL|field|fieldsExcludePattern
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fieldsExcludePattern
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
comment|// ************************************
comment|//
comment|// ************************************
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
specifier|final
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|ServiceNowComponent
name|component
init|=
operator|new
name|ServiceNowComponent
argument_list|(
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|objectName
range|:
name|objects
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"instanceName"
argument_list|,
name|instanceName
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"userName"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|userPassword
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"oauthClientId"
argument_list|,
name|oauthClientId
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"oauthClientSecret"
argument_list|,
name|oauthClientSecret
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"objectType"
argument_list|,
literal|"table"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"objectName"
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
literal|"object."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|".fields"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|fieldsExcludePattern
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|parameters
operator|.
name|put
argument_list|(
literal|"object."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|".fields.exclude.pattern"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JsonNode
name|schema
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|MetaDataExtension
operator|.
name|class
argument_list|)
operator|.
name|flatMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|meta
argument_list|(
name|parameters
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|m
lambda|->
name|Optional
operator|.
name|ofNullable
argument_list|(
name|m
operator|.
name|getPayload
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to get grab MetaData for object: "
operator|+
name|objectName
argument_list|)
argument_list|)
decl_stmt|;
name|validateSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|generateBean
argument_list|(
name|objectName
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ************************************
comment|// Beans
comment|// ************************************
DECL|method|generateBean (String name, JsonNode schema)
specifier|private
name|void
name|generateBean
parameter_list|(
name|String
name|name
parameter_list|,
name|JsonNode
name|schema
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|TypeSpec
operator|.
name|Builder
name|typeBuilder
init|=
name|TypeSpec
operator|.
name|classBuilder
argument_list|(
name|toCamelCase
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|addModifiers
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|,
name|Modifier
operator|.
name|FINAL
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|Generated
operator|.
name|class
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|AnnotationSpec
operator|.
name|builder
argument_list|(
name|ServiceNowSysParm
operator|.
name|class
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"name"
argument_list|,
literal|"$S"
argument_list|,
literal|"sysparm_exclude_reference_link"
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"value"
argument_list|,
literal|"$S"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|AnnotationSpec
operator|.
name|builder
argument_list|(
name|JsonIgnoreProperties
operator|.
name|class
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"ignoreUnknown"
argument_list|,
literal|"$L"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|AnnotationSpec
operator|.
name|builder
argument_list|(
name|JsonInclude
operator|.
name|class
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"value"
argument_list|,
literal|"$L"
argument_list|,
literal|"JsonInclude.Include.NON_NULL"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
operator|.
name|fields
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|entry
lambda|->
name|generateBeanProperty
argument_list|(
name|typeBuilder
argument_list|,
name|schema
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JavaFile
operator|.
name|builder
argument_list|(
name|packageName
argument_list|,
name|typeBuilder
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|indent
argument_list|(
literal|"    "
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|writeTo
argument_list|(
name|outputDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to generate Class"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|generateBeanProperty (TypeSpec.Builder typeBuilder, JsonNode schema, String name, JsonNode definition)
specifier|private
name|void
name|generateBeanProperty
parameter_list|(
name|TypeSpec
operator|.
name|Builder
name|typeBuilder
parameter_list|,
name|JsonNode
name|schema
parameter_list|,
name|String
name|name
parameter_list|,
name|JsonNode
name|definition
parameter_list|)
block|{
specifier|final
name|ArrayNode
name|required
init|=
operator|(
name|ArrayNode
operator|)
name|schema
operator|.
name|get
argument_list|(
literal|"required"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|toCamelCase
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|methodName
init|=
name|toCamelCase
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|JsonNode
name|type
init|=
name|definition
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
specifier|final
name|JsonNode
name|format
init|=
name|definition
operator|.
name|get
argument_list|(
literal|"format"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|javaType
init|=
name|String
operator|.
name|class
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"boolean"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|javaType
operator|=
name|boolean
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
literal|"integer"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|javaType
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
literal|"number"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|javaType
operator|=
name|Double
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
literal|"string"
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|javaType
operator|=
name|String
operator|.
name|class
expr_stmt|;
block|}
block|}
if|if
condition|(
name|javaType
operator|==
name|String
operator|.
name|class
operator|&&
name|format
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"date"
operator|.
name|equalsIgnoreCase
argument_list|(
name|format
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|javaType
operator|=
name|LocalDate
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
literal|"time"
operator|.
name|equalsIgnoreCase
argument_list|(
name|format
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|javaType
operator|=
name|LocalTime
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
literal|"date-time"
operator|.
name|equalsIgnoreCase
argument_list|(
name|format
operator|.
name|textValue
argument_list|()
argument_list|)
condition|)
block|{
name|javaType
operator|=
name|LocalDateTime
operator|.
name|class
expr_stmt|;
block|}
block|}
name|FieldSpec
name|field
init|=
name|FieldSpec
operator|.
name|builder
argument_list|(
name|javaType
argument_list|,
name|toCamelCase
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|addModifiers
argument_list|(
name|Modifier
operator|.
name|PRIVATE
argument_list|)
operator|.
name|addAnnotation
argument_list|(
name|AnnotationSpec
operator|.
name|builder
argument_list|(
name|JsonProperty
operator|.
name|class
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"value"
argument_list|,
literal|"$S"
argument_list|,
name|name
argument_list|)
operator|.
name|addMember
argument_list|(
literal|"required"
argument_list|,
literal|"$L"
argument_list|,
name|required
operator|.
name|has
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MethodSpec
name|getter
init|=
name|MethodSpec
operator|.
name|methodBuilder
argument_list|(
literal|"get"
operator|+
name|methodName
argument_list|)
operator|.
name|addModifiers
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|)
operator|.
name|returns
argument_list|(
name|javaType
argument_list|)
operator|.
name|addStatement
argument_list|(
literal|"return this.$L"
argument_list|,
name|fieldName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MethodSpec
name|setter
init|=
name|MethodSpec
operator|.
name|methodBuilder
argument_list|(
literal|"set"
operator|+
name|methodName
argument_list|)
operator|.
name|addModifiers
argument_list|(
name|Modifier
operator|.
name|PUBLIC
argument_list|)
operator|.
name|returns
argument_list|(
name|void
operator|.
name|class
argument_list|)
operator|.
name|addParameter
argument_list|(
name|javaType
argument_list|,
name|fieldName
argument_list|)
operator|.
name|addStatement
argument_list|(
literal|"this.$L = $L"
argument_list|,
name|fieldName
argument_list|,
name|fieldName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|typeBuilder
operator|.
name|addField
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|typeBuilder
operator|.
name|addMethod
argument_list|(
name|getter
argument_list|)
expr_stmt|;
name|typeBuilder
operator|.
name|addMethod
argument_list|(
name|setter
argument_list|)
expr_stmt|;
block|}
comment|// ************************************
comment|// Helpers
comment|// ************************************
DECL|method|toCamelCase (String text, boolean lowerCaseFirst)
specifier|private
name|String
name|toCamelCase
parameter_list|(
name|String
name|text
parameter_list|,
name|boolean
name|lowerCaseFirst
parameter_list|)
block|{
name|String
name|result
init|=
name|Stream
operator|.
name|of
argument_list|(
name|text
operator|.
name|split
argument_list|(
literal|"[^a-zA-Z0-9]"
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
name|v
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|v
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lowerCaseFirst
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|result
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getNodeTextValue (JsonNode root, String... path)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getNodeTextValue
parameter_list|(
name|JsonNode
name|root
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
block|{
return|return
name|getNode
argument_list|(
name|root
argument_list|,
name|path
argument_list|)
operator|.
name|map
argument_list|(
name|JsonNode
operator|::
name|asText
argument_list|)
return|;
block|}
DECL|method|getNode (JsonNode root, String... path)
specifier|private
name|Optional
argument_list|<
name|JsonNode
argument_list|>
name|getNode
parameter_list|(
name|JsonNode
name|root
parameter_list|,
name|String
modifier|...
name|path
parameter_list|)
block|{
name|JsonNode
name|node
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|path
control|)
block|{
name|node
operator|=
name|node
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|node
argument_list|)
return|;
block|}
DECL|method|validateSchema (JsonNode schema)
specifier|private
name|void
name|validateSchema
parameter_list|(
name|JsonNode
name|schema
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|getNode
argument_list|(
name|schema
argument_list|,
literal|"required"
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|MojoExecutionException
argument_list|(
literal|"Invalid JsonSchema: 'required' element not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

