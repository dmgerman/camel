begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.maven
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CamelServiceNowGenerateMojoTest
specifier|public
class|class
name|CamelServiceNowGenerateMojoTest
extends|extends
name|CamelServiceNowMojoTestSupport
block|{
annotation|@
name|Test
DECL|method|testExecute ()
specifier|public
name|void
name|testExecute
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CamelServiceNowGenerateMojo
name|mojo
init|=
name|createMojo
argument_list|()
decl_stmt|;
name|mojo
operator|.
name|objects
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"incident"
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|fields
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"incident"
argument_list|,
literal|"sys_id"
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|fieldsExcludePattern
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"incident"
argument_list|,
literal|"^sys_.*$"
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|execute
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Output directory was not created"
argument_list|,
name|mojo
operator|.
name|outputDirectory
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Output directory is empty"
argument_list|,
name|mojo
operator|.
name|outputDirectory
operator|.
name|list
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

