begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servicenow.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|ServiceNowConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|WebClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|client
operator|.
name|OAuthClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|common
operator|.
name|ClientAccessToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|rs
operator|.
name|security
operator|.
name|oauth2
operator|.
name|grants
operator|.
name|owner
operator|.
name|ResourceOwnerGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|OAuthToken
specifier|public
class|class
name|OAuthToken
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OAuthToken
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|ServiceNowConfiguration
name|configuration
decl_stmt|;
DECL|field|token
specifier|private
name|ClientAccessToken
name|token
decl_stmt|;
DECL|field|authString
specifier|private
name|String
name|authString
decl_stmt|;
DECL|field|expireAt
specifier|private
name|long
name|expireAt
decl_stmt|;
DECL|method|OAuthToken (ServiceNowConfiguration configuration)
specifier|public
name|OAuthToken
parameter_list|(
name|ServiceNowConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|token
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|authString
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|expireAt
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|getOrRefreshAccessToken ()
specifier|private
specifier|synchronized
name|void
name|getOrRefreshAccessToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Generate OAuth token"
argument_list|)
expr_stmt|;
name|token
operator|=
name|OAuthClientUtils
operator|.
name|getAccessToken
argument_list|(
name|WebClient
operator|.
name|create
argument_list|(
name|configuration
operator|.
name|getOauthTokenUrl
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Consumer
argument_list|(
name|configuration
operator|.
name|getOauthClientId
argument_list|()
argument_list|,
name|configuration
operator|.
name|getOauthClientSecret
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ResourceOwnerGrant
argument_list|(
name|configuration
operator|.
name|getUserName
argument_list|()
argument_list|,
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"OAuth token expires in {}s"
argument_list|,
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set expiration time related info in milliseconds
name|token
operator|.
name|setIssuedAt
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setExpiresIn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|authString
operator|=
name|token
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getExpiresIn
argument_list|()
operator|>
literal|0
condition|)
block|{
name|expireAt
operator|=
name|token
operator|.
name|getIssuedAt
argument_list|()
operator|+
name|token
operator|.
name|getExpiresIn
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expireAt
operator|>
literal|0
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|expireAt
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"OAuth token is expired, refresh it"
argument_list|)
expr_stmt|;
name|token
operator|=
name|OAuthClientUtils
operator|.
name|refreshAccessToken
argument_list|(
name|WebClient
operator|.
name|create
argument_list|(
name|configuration
operator|.
name|getOauthTokenUrl
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Consumer
argument_list|(
name|configuration
operator|.
name|getOauthClientId
argument_list|()
argument_list|,
name|configuration
operator|.
name|getOauthClientSecret
argument_list|()
argument_list|)
argument_list|,
name|token
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Refreshed OAuth token expires in {}s"
argument_list|,
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set expiration time related info in milliseconds
name|token
operator|.
name|setIssuedAt
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|.
name|setExpiresIn
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|token
operator|.
name|getExpiresIn
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|authString
operator|=
name|token
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getExpiresIn
argument_list|()
operator|>
literal|0
condition|)
block|{
name|expireAt
operator|=
name|token
operator|.
name|getIssuedAt
argument_list|()
operator|+
name|token
operator|.
name|getExpiresIn
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getClientAccess ()
specifier|public
name|ClientAccessToken
name|getClientAccess
parameter_list|()
block|{
name|getOrRefreshAccessToken
argument_list|()
expr_stmt|;
return|return
name|token
return|;
block|}
DECL|method|getAuthString ()
specifier|public
name|String
name|getAuthString
parameter_list|()
block|{
name|getOrRefreshAccessToken
argument_list|()
expr_stmt|;
return|return
name|authString
return|;
block|}
block|}
end_class

end_unit

