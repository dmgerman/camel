begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servicenow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_class
DECL|class|ServiceNowHelper
specifier|public
specifier|final
class|class
name|ServiceNowHelper
block|{
DECL|method|ServiceNowHelper ()
specifier|private
name|ServiceNowHelper
parameter_list|()
block|{     }
DECL|method|findOffsets (Response response, BiConsumer<String, Object> consumer)
specifier|public
specifier|static
name|void
name|findOffsets
parameter_list|(
name|Response
name|response
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|links
init|=
name|response
operator|.
name|getStringHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|HttpHeaders
operator|.
name|LINK
argument_list|)
decl_stmt|;
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|link
range|:
name|links
control|)
block|{
name|String
index|[]
name|parts
init|=
name|link
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
continue|continue;
block|}
comment|// Sanitize parts
name|String
name|uri
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
literal|"<"
argument_list|,
literal|">"
argument_list|)
decl_stmt|;
name|String
name|rel
init|=
name|StringHelper
operator|.
name|removeQuotes
argument_list|(
name|StringHelper
operator|.
name|after
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|query
init|=
name|URISupport
operator|.
name|parseQuery
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Object
name|offset
init|=
name|query
operator|.
name|get
argument_list|(
name|ServiceNowParams
operator|.
name|SYSPARM_OFFSET
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|rel
condition|)
block|{
case|case
name|ServiceNowConstants
operator|.
name|LINK_FIRST
case|:
name|consumer
operator|.
name|accept
argument_list|(
name|ServiceNowConstants
operator|.
name|OFFSET_FIRST
argument_list|,
name|offset
argument_list|)
expr_stmt|;
break|break;
case|case
name|ServiceNowConstants
operator|.
name|LINK_LAST
case|:
name|consumer
operator|.
name|accept
argument_list|(
name|ServiceNowConstants
operator|.
name|OFFSET_LAST
argument_list|,
name|offset
argument_list|)
expr_stmt|;
break|break;
case|case
name|ServiceNowConstants
operator|.
name|LINK_NEXT
case|:
name|consumer
operator|.
name|accept
argument_list|(
name|ServiceNowConstants
operator|.
name|OFFSET_NEXT
argument_list|,
name|offset
argument_list|)
expr_stmt|;
break|break;
case|case
name|ServiceNowConstants
operator|.
name|LINK_PREV
case|:
name|consumer
operator|.
name|accept
argument_list|(
name|ServiceNowConstants
operator|.
name|OFFSET_PREV
argument_list|,
name|offset
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
block|}
block|}
DECL|method|findOffset (Response response, String type)
specifier|public
specifier|static
name|Optional
argument_list|<
name|String
argument_list|>
name|findOffset
parameter_list|(
name|Response
name|response
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|links
init|=
name|response
operator|.
name|getStringHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|HttpHeaders
operator|.
name|LINK
argument_list|)
decl_stmt|;
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|link
range|:
name|links
control|)
block|{
name|String
index|[]
name|parts
init|=
name|link
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
continue|continue;
block|}
comment|// Sanitize parts
name|String
name|uri
init|=
name|StringHelper
operator|.
name|between
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
literal|"<"
argument_list|,
literal|">"
argument_list|)
decl_stmt|;
name|String
name|rel
init|=
name|StringHelper
operator|.
name|removeQuotes
argument_list|(
name|StringHelper
operator|.
name|after
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|query
init|=
name|URISupport
operator|.
name|parseQuery
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Object
name|offset
init|=
name|query
operator|.
name|get
argument_list|(
name|ServiceNowParams
operator|.
name|SYSPARM_OFFSET
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|rel
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|offset
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

