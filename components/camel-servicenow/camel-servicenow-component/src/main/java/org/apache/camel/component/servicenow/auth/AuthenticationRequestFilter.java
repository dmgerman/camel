begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.servicenow.auth
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|auth
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Priorities
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientRequestFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|servicenow
operator|.
name|ServiceNowConfiguration
import|;
end_import

begin_class
annotation|@
name|Provider
annotation|@
name|Priority
argument_list|(
name|Priorities
operator|.
name|AUTHENTICATION
argument_list|)
DECL|class|AuthenticationRequestFilter
specifier|public
specifier|final
class|class
name|AuthenticationRequestFilter
implements|implements
name|ClientRequestFilter
block|{
DECL|field|authToken
specifier|private
specifier|final
name|OAuthToken
name|authToken
decl_stmt|;
DECL|field|authString
specifier|private
specifier|final
name|String
name|authString
decl_stmt|;
DECL|method|AuthenticationRequestFilter (ServiceNowConfiguration conf)
specifier|public
name|AuthenticationRequestFilter
parameter_list|(
name|ServiceNowConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|authToken
operator|=
name|conf
operator|.
name|hasOAuthAuthentication
argument_list|()
condition|?
operator|new
name|OAuthToken
argument_list|(
name|conf
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|authString
operator|=
name|conf
operator|.
name|hasBasicAuthentication
argument_list|()
condition|?
name|getBasicAuthenticationString
argument_list|(
name|conf
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|filter (ClientRequestContext requestContext)
specifier|public
name|void
name|filter
parameter_list|(
name|ClientRequestContext
name|requestContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|authToken
operator|!=
literal|null
condition|)
block|{
name|requestContext
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
name|authToken
operator|.
name|getAuthString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|authString
operator|!=
literal|null
condition|)
block|{
name|requestContext
operator|.
name|getHeaders
argument_list|()
operator|.
name|add
argument_list|(
name|HttpHeaders
operator|.
name|AUTHORIZATION
argument_list|,
name|authString
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBasicAuthenticationString (ServiceNowConfiguration conf)
specifier|private
specifier|static
name|String
name|getBasicAuthenticationString
parameter_list|(
name|ServiceNowConfiguration
name|conf
parameter_list|)
block|{
name|String
name|userAndPassword
init|=
name|conf
operator|.
name|getUserName
argument_list|()
operator|+
literal|":"
operator|+
name|conf
operator|.
name|getPassword
argument_list|()
decl_stmt|;
return|return
literal|"Basic "
operator|+
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|userAndPassword
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

