begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.xray.decorators
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|decorators
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|xray
operator|.
name|entities
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|SegmentDecorator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * An abstract base implementation of the {@link SegmentDecorator} interface.  */
end_comment

begin_class
DECL|class|AbstractSegmentDecorator
specifier|public
specifier|abstract
class|class
name|AbstractSegmentDecorator
implements|implements
name|SegmentDecorator
block|{
annotation|@
name|Override
DECL|method|newSegment ()
specifier|public
name|boolean
name|newSegment
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getOperationName (Exchange exchange, Endpoint endpoint)
specifier|public
name|String
name|getOperationName
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|URI
name|uri
init|=
name|URI
operator|.
name|create
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|":"
operator|+
name|uri
operator|.
name|getRawAuthority
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|pre (Entity segment, Exchange exchange, Endpoint endpoint)
specifier|public
name|void
name|pre
parameter_list|(
name|Entity
name|segment
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|segment
operator|.
name|putMetadata
argument_list|(
literal|"component"
argument_list|,
name|CAMEL_COMPONENT
operator|+
name|URI
operator|.
name|create
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|segment
operator|.
name|putMetadata
argument_list|(
literal|"camel.uri"
argument_list|,
name|URISupport
operator|.
name|sanitizeUri
argument_list|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|post (Entity segment, Exchange exchange, Endpoint endpoint)
specifier|public
name|void
name|post
parameter_list|(
name|Entity
name|segment
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|isFailed
argument_list|()
condition|)
block|{
name|segment
operator|.
name|setFault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|segment
operator|.
name|addException
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method removes the scheme, any leading slash characters and options from the supplied URI. This is intended      * to extract a meaningful name from the URI that can be used in situations, such as the operation name.      *      * @param endpoint The endpoint      * @return The stripped value from the URI      */
DECL|method|stripSchemeAndOptions (Endpoint endpoint)
specifier|public
specifier|static
name|String
name|stripSchemeAndOptions
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|int
name|start
init|=
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|start
operator|++
expr_stmt|;
comment|// Remove any leading '/'
while|while
condition|(
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|start
operator|++
expr_stmt|;
block|}
name|int
name|end
init|=
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
return|return
name|end
operator|==
operator|-
literal|1
condition|?
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|.
name|substring
argument_list|(
name|start
argument_list|)
else|:
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
comment|/**      * Extracts any parameters passed in the given URI as a key-value representation.      *      * @param uri The URI to extract passed parameters from      * @return A {@link Map} representation of the contained parameters of the provided URI      */
DECL|method|toQueryParameters (String uri)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toQueryParameters
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|index
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|queryString
init|=
name|uri
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|queryString
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
index|[]
name|parts
init|=
name|param
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
end_class

end_unit

