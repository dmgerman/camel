begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.xray
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|bean
operator|.
name|ProcessingCamelBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|component
operator|.
name|CommonEndpoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|TestDataBuilder
operator|.
name|createSegment
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|TestDataBuilder
operator|.
name|createSubsegment
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|TestDataBuilder
operator|.
name|createTrace
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_comment
comment|/**  * This test uses a custom component that will trigger a long-running backing task for certain  * specific states. The task is forwarded via an asynchronous send to a Camel route which then  * performs the task, such as an upload or a computation.  *<p>  * AWS XRay does monitor the subsegment count per segment and only emits the segment to the local  * XRay daemon once the segment is closed and its internal count reaches 0. If the segment is closed  * before the counter reached 0 the segment is not emitted till the last subsegments belonging to  * that segment got closed.  *<p>  * Due to the asynchronous nature of the backing {@link ProcessingCamelBean processing camel bean},  * the first request is still in progress when the second request is triggered. As those tasks  * aren't executed in parallel, AWS XRay does not take notice of the seconds processing Camel bean  * invocation yet which leads to a premature emit of that segment and thus missing subsegments  * for the route and bean invocation. This is possible as the count of the segment reached 0 when  * the segment got closed as Camel has not had a chance yet to create the subsegments for the  * asynchronously executed route and its bean invocation.  */
end_comment

begin_class
DECL|class|CustomComponentTest
specifier|public
class|class
name|CustomComponentTest
extends|extends
name|CamelAwsXRayTestSupport
block|{
DECL|field|START
specifier|private
specifier|static
specifier|final
name|String
name|START
init|=
literal|"seda:start"
decl_stmt|;
DECL|field|DELIVERY
specifier|private
specifier|static
specifier|final
name|String
name|DELIVERY
init|=
literal|"seda:delivery"
decl_stmt|;
DECL|field|IN_QUEUE
specifier|private
specifier|static
specifier|final
name|String
name|IN_QUEUE
init|=
literal|"seda:inqueue"
decl_stmt|;
DECL|field|PERSISTENCE_QUEUE
specifier|private
specifier|static
specifier|final
name|String
name|PERSISTENCE_QUEUE
init|=
literal|"seda:persistence-queue"
decl_stmt|;
DECL|field|PERSISTING
specifier|private
specifier|static
specifier|final
name|String
name|PERSISTING
init|=
literal|"seda:persisting"
decl_stmt|;
DECL|method|CustomComponentTest ()
specifier|public
name|CustomComponentTest
parameter_list|()
block|{
name|super
argument_list|(
name|createTrace
argument_list|()
operator|.
name|inRandomOrder
argument_list|()
operator|.
name|withSegment
argument_list|(
name|createSegment
argument_list|(
literal|"start"
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|DELIVERY
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withSegment
argument_list|(
name|createSegment
argument_list|(
literal|"delivery"
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|CommonEndpoints
operator|.
name|RECEIVED
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
literal|"seda:backingTask"
argument_list|)
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
literal|"seda:backingTask"
argument_list|)
argument_list|)
operator|.
name|withMetadata
argument_list|(
literal|"state"
argument_list|,
literal|"received"
argument_list|)
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|IN_QUEUE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withSegment
argument_list|(
name|createSegment
argument_list|(
literal|"processing"
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|CommonEndpoints
operator|.
name|PROCESSING
argument_list|)
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|PERSISTENCE_QUEUE
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withSegment
argument_list|(
name|createSegment
argument_list|(
literal|"wait-for-persisting"
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|CommonEndpoints
operator|.
name|PERSISTENCE_QUEUE
argument_list|)
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|PERSISTING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|withSegment
argument_list|(
name|createSegment
argument_list|(
literal|"persisting"
argument_list|)
operator|.
name|withSubsegment
argument_list|(
name|createSubsegment
argument_list|(
name|CommonEndpoints
operator|.
name|READY
argument_list|)
comment|// not available due to the asynchronous, long-running nature of the processing
comment|// bean. If the sleep is commented out in the bean, this subsegments should be
comment|// available
comment|//                                        .withSubsegment(createSubsegment("backingTask")
comment|//                                                .withSubsegment(createSubsegment("bean:ProcessingCamelBean"))
comment|//                                        )
comment|//                                        .withMetadata("state", "ready")
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTracingStrategy ()
specifier|protected
name|InterceptStrategy
name|getTracingStrategy
parameter_list|()
block|{
return|return
operator|new
name|TraceAnnotatedTracingStrategy
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testRoute ()
specifier|public
name|void
name|testRoute
parameter_list|()
block|{
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|7
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|template
operator|.
name|requestBody
argument_list|(
name|START
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Not all exchanges were fully processed"
argument_list|,
name|notify
operator|.
name|matches
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|ProcessingCamelBean
operator|.
name|gotInvoked
argument_list|()
argument_list|,
name|is
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|START
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"start"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Starting test"
argument_list|)
operator|.
name|inOnly
argument_list|(
name|DELIVERY
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|DELIVERY
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"delivery"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Doing some stuff"
argument_list|)
operator|.
name|to
argument_list|(
name|CommonEndpoints
operator|.
name|RECEIVED
argument_list|)
operator|.
name|delay
argument_list|(
literal|100
argument_list|)
operator|.
name|inOnly
argument_list|(
name|IN_QUEUE
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|IN_QUEUE
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"processing"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Do some more stuff"
argument_list|)
operator|.
name|to
argument_list|(
name|CommonEndpoints
operator|.
name|PROCESSING
argument_list|)
operator|.
name|delay
argument_list|(
literal|100
argument_list|)
operator|.
name|inOnly
argument_list|(
name|PERSISTENCE_QUEUE
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|PERSISTENCE_QUEUE
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"wait-for-persisting"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Waiting on available persisting instance"
argument_list|)
operator|.
name|to
argument_list|(
name|CommonEndpoints
operator|.
name|PERSISTENCE_QUEUE
argument_list|)
operator|.
name|delay
argument_list|(
literal|100
argument_list|)
operator|.
name|inOnly
argument_list|(
name|PERSISTING
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|PERSISTING
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"persisting"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Payload ready for usage"
argument_list|)
operator|.
name|to
argument_list|(
name|CommonEndpoints
operator|.
name|READY
argument_list|)
operator|.
name|delay
argument_list|(
literal|100
argument_list|)
operator|.
name|log
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"seda:backingTask"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"backingTask"
argument_list|)
operator|.
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|redeliveryDelay
argument_list|(
literal|100L
argument_list|)
operator|.
name|onRedelivery
argument_list|(
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
lambda|->
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|">> Retrying due to "
operator|+
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|,
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
argument_list|)
operator|.
name|logExhausted
argument_list|(
literal|true
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|logStackTrace
argument_list|(
literal|true
argument_list|)
operator|.
name|end
argument_list|()
operator|.
name|log
argument_list|(
literal|"routing at ${routeId}"
argument_list|)
operator|.
name|bean
argument_list|(
name|ProcessingCamelBean
operator|.
name|class
argument_list|)
operator|.
name|log
argument_list|(
literal|"processing camel bean invoked"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

