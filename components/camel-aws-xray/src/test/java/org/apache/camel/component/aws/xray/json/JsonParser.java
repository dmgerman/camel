begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.xray.json
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_class
DECL|class|JsonParser
specifier|public
specifier|final
class|class
name|JsonParser
block|{
DECL|method|JsonParser ()
specifier|private
name|JsonParser
parameter_list|()
block|{      }
DECL|method|parse (final String jsonString)
specifier|public
specifier|static
name|JsonStructure
name|parse
parameter_list|(
specifier|final
name|String
name|jsonString
parameter_list|)
block|{
name|String
name|json
init|=
name|jsonString
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|Stack
argument_list|<
name|JsonStructure
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
name|JsonStructure
name|ret
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|doNotIncludeSymbols
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|","
argument_list|,
literal|":"
argument_list|,
literal|"\""
argument_list|)
decl_stmt|;
name|StringBuilder
name|curToken
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|keyName
init|=
literal|null
decl_stmt|;
name|boolean
name|inWord
init|=
literal|false
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|json
operator|.
name|toCharArray
argument_list|()
control|)
block|{
comment|// CHECKSTYLE:OFF
comment|// fallthrough is intended here and as this is only a helper class for tests (as the previously used
comment|// org.json classes are incompatible with Apache 2.0 license) formatting rules shouldn't be that strict IMO
comment|// Note that the fall-through was the only rant checkstyle generated, so everything else should follow these
comment|// guidelines
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'{'
case|:
if|if
condition|(
operator|!
name|inWord
condition|)
block|{
comment|// JsonObject begin
name|JsonObject
name|newNode
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
name|addJson
argument_list|(
name|newNode
argument_list|,
name|keyName
argument_list|,
name|stack
argument_list|)
expr_stmt|;
name|keyName
operator|=
literal|null
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'}'
case|:
if|if
condition|(
operator|!
name|inWord
condition|)
block|{
comment|// JsonObject end
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|=
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|keyName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ret
operator|instanceof
name|JsonObject
condition|)
block|{
operator|(
operator|(
name|JsonObject
operator|)
name|ret
operator|)
operator|.
name|addElement
argument_list|(
name|sanitizeKey
argument_list|(
name|keyName
argument_list|)
argument_list|,
name|sanitizeData
argument_list|(
name|curToken
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keyName
operator|=
literal|null
expr_stmt|;
name|curToken
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|curToken
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
literal|'['
case|:
if|if
condition|(
operator|!
name|inWord
condition|)
block|{
comment|// JsonArray start
name|JsonArray
name|newArray
init|=
operator|new
name|JsonArray
argument_list|()
decl_stmt|;
name|addJson
argument_list|(
name|newArray
argument_list|,
name|keyName
argument_list|,
name|stack
argument_list|)
expr_stmt|;
name|keyName
operator|=
literal|null
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|newArray
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|']'
case|:
if|if
condition|(
operator|!
name|inWord
condition|)
block|{
comment|// JsonArray end
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|=
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|':'
case|:
if|if
condition|(
operator|!
name|inWord
condition|)
block|{
comment|// Element start
name|keyName
operator|=
name|curToken
operator|.
name|toString
argument_list|()
expr_stmt|;
name|curToken
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|curToken
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|','
case|:
if|if
condition|(
operator|!
name|inWord
condition|)
block|{
comment|// Element separator
if|if
condition|(
name|keyName
operator|!=
literal|null
condition|)
block|{
name|JsonObject
name|jsonObj
init|=
operator|(
name|JsonObject
operator|)
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|jsonObj
operator|.
name|addElement
argument_list|(
name|sanitizeKey
argument_list|(
name|keyName
argument_list|)
argument_list|,
name|sanitizeData
argument_list|(
name|curToken
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|curToken
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|curToken
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|keyName
operator|=
literal|null
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
literal|'"'
operator|==
name|c
operator|&&
name|curToken
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|||
operator|(
literal|'"'
operator|==
name|c
operator|&&
name|curToken
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|curToken
operator|.
name|charAt
argument_list|(
name|curToken
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'\\'
operator|)
condition|)
block|{
name|inWord
operator|=
operator|!
name|inWord
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inWord
operator|&&
operator|!
name|doNotIncludeSymbols
operator|.
name|contains
argument_list|(
literal|""
operator|+
name|c
argument_list|)
condition|)
block|{
name|curToken
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|'"'
operator|!=
name|c
operator|||
operator|(
name|curToken
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|curToken
operator|.
name|charAt
argument_list|(
name|curToken
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|curToken
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|// CHECKSTYLE:ON
block|}
return|return
name|ret
return|;
block|}
DECL|method|addJson (JsonStructure element, String key, Stack<JsonStructure> stack)
specifier|private
specifier|static
name|void
name|addJson
parameter_list|(
name|JsonStructure
name|element
parameter_list|,
name|String
name|key
parameter_list|,
name|Stack
argument_list|<
name|JsonStructure
argument_list|>
name|stack
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|JsonStructure
name|json
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
operator|instanceof
name|JsonObject
operator|&&
name|key
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|JsonObject
operator|)
name|json
operator|)
operator|.
name|addElement
argument_list|(
name|sanitizeKey
argument_list|(
name|key
argument_list|)
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|json
operator|instanceof
name|JsonArray
condition|)
block|{
operator|(
operator|(
name|JsonArray
operator|)
name|json
operator|)
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sanitizeKey (String key)
specifier|private
specifier|static
name|String
name|sanitizeKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|sanitizeData (String data)
specifier|private
specifier|static
name|Object
name|sanitizeData
parameter_list|(
name|String
name|data
parameter_list|)
block|{
name|data
operator|=
name|data
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
operator|||
name|data
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
if|if
condition|(
name|data
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
operator|&&
name|StringUtils
operator|.
name|countMatches
argument_list|(
name|data
argument_list|,
literal|"."
argument_list|)
operator|==
literal|1
operator|&&
name|data
operator|.
name|matches
argument_list|(
literal|"[0-9\\.]+"
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|matches
argument_list|(
literal|"[0-9]+"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfEx
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

