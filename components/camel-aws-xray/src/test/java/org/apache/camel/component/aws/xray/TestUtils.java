begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.xray
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|TestDataBuilder
operator|.
name|TestSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|TestDataBuilder
operator|.
name|TestSubsegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
operator|.
name|TestDataBuilder
operator|.
name|TestTrace
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsEqual
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestUtils
specifier|public
specifier|final
class|class
name|TestUtils
block|{
DECL|method|TestUtils ()
specifier|private
name|TestUtils
parameter_list|()
block|{      }
DECL|method|checkData (Map<String, TestTrace> receivedData, List<TestTrace> testData)
specifier|public
specifier|static
name|void
name|checkData
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|TestTrace
argument_list|>
name|receivedData
parameter_list|,
name|List
argument_list|<
name|TestTrace
argument_list|>
name|testData
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Incorrect number of traces"
argument_list|,
name|receivedData
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|testData
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|receivedData
operator|.
name|keySet
argument_list|()
control|)
block|{
name|TestTrace
name|trace
init|=
name|receivedData
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|verifyTraces
argument_list|(
name|testData
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|trace
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyTraces (TestTrace expected, TestTrace actual)
specifier|private
specifier|static
name|void
name|verifyTraces
parameter_list|(
name|TestTrace
name|expected
parameter_list|,
name|TestTrace
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Incorrect number of segment for trace"
argument_list|,
name|actual
operator|.
name|getSegments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|expected
operator|.
name|getSegments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TestSegment
argument_list|>
name|expectedSegments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expected
operator|.
name|getSegments
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TestSegment
argument_list|>
name|actualSegments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|actual
operator|.
name|getSegments
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|randomOrder
init|=
name|expected
operator|.
name|isRandomOrder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getSegments
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|randomOrder
condition|)
block|{
for|for
control|(
name|TestSegment
name|expectedSeg
range|:
name|expectedSegments
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TestSegment
name|actualSeg
range|:
name|actualSegments
control|)
block|{
if|if
condition|(
name|expectedSeg
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|actualSeg
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|verifySegments
argument_list|(
name|expectedSeg
argument_list|,
name|actualSeg
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|fail
argument_list|(
literal|"Could not find expected segment "
operator|+
name|expectedSeg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|verifySegments
argument_list|(
name|expectedSegments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actualSegments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifySegments (TestSegment expected, TestSegment actual)
specifier|private
specifier|static
name|void
name|verifySegments
parameter_list|(
name|TestSegment
name|expected
parameter_list|,
name|TestSegment
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Incorrect name of segment"
argument_list|,
name|actual
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|expected
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|randomOrder
init|=
name|expected
operator|.
name|isRandomOrder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|getSubsegments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomOrder
condition|)
block|{
name|checkSubsegmentInRandomOrder
argument_list|(
name|expected
operator|.
name|getSubsegments
argument_list|()
argument_list|,
name|actual
operator|.
name|getSubsegments
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getSubsegments
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|actual
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
literal|"An expected subsegment is missing in the actual payload of segment "
operator|+
name|actual
operator|.
name|getName
argument_list|()
argument_list|,
name|actual
operator|.
name|getSubsegments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
name|expected
operator|.
name|getSubsegments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifySubsegments
argument_list|(
name|expected
operator|.
name|getSubsegments
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|getSubsegments
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|expected
operator|.
name|getAnnotations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verifyAnnotations
argument_list|(
name|expected
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|actual
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expected
operator|.
name|getMetadata
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verifyMetadata
argument_list|(
name|expected
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|actual
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifySubsegments (TestSubsegment expected, TestSubsegment actual)
specifier|private
specifier|static
name|void
name|verifySubsegments
parameter_list|(
name|TestSubsegment
name|expected
parameter_list|,
name|TestSubsegment
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Incorrect name of subsegment"
argument_list|,
name|actual
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|expected
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|randomOrder
init|=
name|expected
operator|.
name|isRandomOrder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|getSubsegments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomOrder
condition|)
block|{
name|checkSubsegmentInRandomOrder
argument_list|(
name|expected
operator|.
name|getSubsegments
argument_list|()
argument_list|,
name|actual
operator|.
name|getSubsegments
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|getSubsegments
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|verifySubsegments
argument_list|(
name|expected
operator|.
name|getSubsegments
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|getSubsegments
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|expected
operator|.
name|getAnnotations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verifyAnnotations
argument_list|(
name|expected
operator|.
name|getAnnotations
argument_list|()
argument_list|,
name|actual
operator|.
name|getAnnotations
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|expected
operator|.
name|getMetadata
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|verifyMetadata
argument_list|(
name|expected
operator|.
name|getMetadata
argument_list|()
argument_list|,
name|actual
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkSubsegmentInRandomOrder (List<TestSubsegment> expectedSubs, List<TestSubsegment> actualSubs)
specifier|private
specifier|static
name|void
name|checkSubsegmentInRandomOrder
parameter_list|(
name|List
argument_list|<
name|TestSubsegment
argument_list|>
name|expectedSubs
parameter_list|,
name|List
argument_list|<
name|TestSubsegment
argument_list|>
name|actualSubs
parameter_list|)
block|{
for|for
control|(
name|TestSubsegment
name|expectedSub
range|:
name|expectedSubs
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TestSubsegment
name|actualSub
range|:
name|actualSubs
control|)
block|{
if|if
condition|(
name|expectedSub
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|actualSub
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|verifySubsegments
argument_list|(
name|expectedSub
argument_list|,
name|actualSub
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|fail
argument_list|(
literal|"Could not find expected sub-segment "
operator|+
name|expectedSub
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyAnnotations (Map<String, Object> expected, Map<String, Object> actual)
specifier|private
specifier|static
name|void
name|verifyAnnotations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
name|actual
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Annotation "
operator|+
name|key
operator|+
literal|" is missing"
argument_list|,
name|actual
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Annotation value of "
operator|+
name|key
operator|+
literal|" is different"
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyMetadata (Map<String, Map<String, Object>> expected, Map<String, Map<String, Object>> actual)
specifier|private
specifier|static
name|void
name|verifyMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|expected
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|actual
parameter_list|)
block|{
name|assertThat
argument_list|(
literal|"Insufficient number of metadata found"
argument_list|,
name|actual
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
name|greaterThanOrEqualTo
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|expected
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Namespace "
operator|+
name|namespace
operator|+
literal|" not found in metadata"
argument_list|,
name|actual
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expected
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Key "
operator|+
name|key
operator|+
literal|" of namespace + "
operator|+
name|namespace
operator|+
literal|" not found"
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Incorrect value of key "
operator|+
name|key
operator|+
literal|" in namespace "
operator|+
name|namespace
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|is
argument_list|(
name|equalTo
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

