begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.aws.xray
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|aws
operator|.
name|xray
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"WeakerAccess"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|TestDataBuilder
specifier|final
class|class
name|TestDataBuilder
block|{
DECL|method|TestDataBuilder ()
specifier|private
name|TestDataBuilder
parameter_list|()
block|{      }
DECL|class|TestTrace
specifier|static
class|class
name|TestTrace
block|{
DECL|field|randomOrder
specifier|private
name|boolean
name|randomOrder
decl_stmt|;
DECL|field|segments
specifier|private
name|Set
argument_list|<
name|TestSegment
argument_list|>
name|segments
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
parameter_list|(
name|TestSegment
name|seg1
parameter_list|,
name|TestSegment
name|seg2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|seg1
operator|.
name|equals
argument_list|(
name|seg2
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|seg1
operator|.
name|startTime
operator|!=
literal|0
operator|&&
name|seg2
operator|.
name|startTime
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|seg1
operator|.
name|startTime
operator|==
name|seg2
operator|.
name|startTime
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|seg1
operator|.
name|startTime
operator|<
name|seg2
operator|.
name|startTime
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|method|withSegment (TestSegment segment)
specifier|public
name|TestTrace
name|withSegment
parameter_list|(
name|TestSegment
name|segment
parameter_list|)
block|{
name|this
operator|.
name|segments
operator|.
name|add
argument_list|(
name|segment
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|getSegments ()
specifier|public
name|Set
argument_list|<
name|TestSegment
argument_list|>
name|getSegments
parameter_list|()
block|{
return|return
name|segments
return|;
block|}
DECL|method|inRandomOrder ()
specifier|public
name|TestTrace
name|inRandomOrder
parameter_list|()
block|{
name|randomOrder
operator|=
literal|true
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|isRandomOrder ()
specifier|public
name|boolean
name|isRandomOrder
parameter_list|()
block|{
return|return
name|randomOrder
return|;
block|}
block|}
DECL|class|TestEntity
specifier|public
specifier|abstract
specifier|static
class|class
name|TestEntity
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|name
specifier|protected
name|String
name|name
decl_stmt|;
DECL|field|annotations
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|annotations
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|metadata
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|metadata
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|subsegments
specifier|protected
name|List
argument_list|<
name|TestSubsegment
argument_list|>
name|subsegments
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|randomOrder
specifier|protected
name|boolean
name|randomOrder
decl_stmt|;
DECL|method|TestEntity (String name)
specifier|protected
name|TestEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getAnnotations ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAnnotations
parameter_list|()
block|{
return|return
name|this
operator|.
name|annotations
return|;
block|}
DECL|method|getMetadata ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
DECL|method|getSubsegments ()
specifier|public
name|List
argument_list|<
name|TestSubsegment
argument_list|>
name|getSubsegments
parameter_list|()
block|{
return|return
name|subsegments
return|;
block|}
DECL|method|withAnnotation (String name, Object value)
specifier|public
name|T
name|withAnnotation
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|annotations
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
DECL|method|withMetadata (String name, Object value)
specifier|public
name|T
name|withMetadata
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|this
operator|.
name|withMetadata
argument_list|(
literal|"default"
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
DECL|method|withMetadata (String namespace, String name, Object value)
specifier|public
name|T
name|withMetadata
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|metadata
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|this
operator|.
name|metadata
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|namespaceMap
init|=
name|this
operator|.
name|metadata
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|namespaceMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
DECL|method|withSubsegment (TestSubsegment subsegment)
specifier|public
name|T
name|withSubsegment
parameter_list|(
name|TestSubsegment
name|subsegment
parameter_list|)
block|{
name|this
operator|.
name|subsegments
operator|.
name|add
argument_list|(
name|subsegment
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
DECL|method|inRandomOrder ()
specifier|public
name|T
name|inRandomOrder
parameter_list|()
block|{
name|this
operator|.
name|randomOrder
operator|=
literal|true
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
DECL|method|isRandomOrder ()
specifier|public
name|boolean
name|isRandomOrder
parameter_list|()
block|{
return|return
name|randomOrder
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(name: "
operator|+
name|name
decl_stmt|;
if|if
condition|(
operator|!
name|subsegments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|+=
literal|", subsegments: ["
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TestSubsegment
name|sub
range|:
name|subsegments
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
name|ret
operator|+=
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|annotations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|+=
literal|", annotations: {"
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|annotations
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
operator|.
name|append
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ret
operator|+=
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|metadata
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|+=
literal|", metadata: {"
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|namespace
range|:
name|metadata
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|namespace
argument_list|)
operator|.
name|append
argument_list|(
literal|": ["
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|metadata
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"->"
argument_list|)
operator|.
name|append
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|ret
operator|+=
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"}"
expr_stmt|;
block|}
name|ret
operator|+=
literal|")"
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
DECL|class|TestSegment
specifier|static
class|class
name|TestSegment
extends|extends
name|TestEntity
argument_list|<
name|TestSegment
argument_list|>
block|{
DECL|field|startTime
specifier|private
name|double
name|startTime
decl_stmt|;
DECL|method|TestSegment (String name)
specifier|public
name|TestSegment
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|TestSegment (String name, double startTime)
specifier|public
name|TestSegment
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|startTime
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
DECL|method|getStartTime ()
specifier|public
name|double
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
block|}
DECL|class|TestSubsegment
specifier|static
class|class
name|TestSubsegment
extends|extends
name|TestEntity
argument_list|<
name|TestSubsegment
argument_list|>
block|{
DECL|method|TestSubsegment (String name)
specifier|public
name|TestSubsegment
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createTrace ()
specifier|public
specifier|static
name|TestTrace
name|createTrace
parameter_list|()
block|{
return|return
operator|new
name|TestTrace
argument_list|()
return|;
block|}
DECL|method|createSegment (String name)
specifier|public
specifier|static
name|TestSegment
name|createSegment
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TestSegment
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|createSubsegment (String name)
specifier|public
specifier|static
name|TestSubsegment
name|createSubsegment
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|TestSubsegment
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

