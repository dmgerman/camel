begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|JmsBindingTest
specifier|public
class|class
name|JmsBindingTest
block|{
DECL|field|instant
specifier|private
specifier|final
name|Instant
name|instant
init|=
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
literal|1519672338000L
argument_list|)
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockJmsConfiguration
specifier|private
name|JmsConfiguration
name|mockJmsConfiguration
decl_stmt|;
annotation|@
name|Mock
DECL|field|mockJmsEndpoint
specifier|private
name|JmsEndpoint
name|mockJmsEndpoint
decl_stmt|;
DECL|field|jmsBindingUnderTest
specifier|private
name|JmsBinding
name|jmsBindingUnderTest
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|when
argument_list|(
name|mockJmsConfiguration
operator|.
name|isFormatDateHeadersToIso8601
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJmsConfiguration
operator|.
name|isMapJmsMessage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockJmsEndpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockJmsConfiguration
argument_list|)
expr_stmt|;
name|jmsBindingUnderTest
operator|=
operator|new
name|JmsBinding
argument_list|(
name|mockJmsEndpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExtractNullBodyFromJmsShouldReturnNull ()
specifier|public
name|void
name|testExtractNullBodyFromJmsShouldReturnNull
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|jmsBindingUnderTest
operator|.
name|extractBodyFromJms
argument_list|(
literal|null
argument_list|,
operator|new
name|ActiveMQBlobMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetValidJmsHeaderValueWithBigIntegerShouldSucceed ()
specifier|public
name|void
name|testGetValidJmsHeaderValueWithBigIntegerShouldSucceed
parameter_list|()
block|{
name|Object
name|value
init|=
name|jmsBindingUnderTest
operator|.
name|getValidJMSHeaderValue
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BigInteger
argument_list|(
literal|"12345"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetValidJmsHeaderValueWithBigDecimalShouldSucceed ()
specifier|public
name|void
name|testGetValidJmsHeaderValueWithBigDecimalShouldSucceed
parameter_list|()
block|{
name|Object
name|value
init|=
name|jmsBindingUnderTest
operator|.
name|getValidJMSHeaderValue
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"123.45"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"123.45"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetValidJmsHeaderValueWithDateShouldSucceed ()
specifier|public
name|void
name|testGetValidJmsHeaderValueWithDateShouldSucceed
parameter_list|()
block|{
name|Object
name|value
init|=
name|jmsBindingUnderTest
operator|.
name|getValidJMSHeaderValue
argument_list|(
literal|"foo"
argument_list|,
name|Date
operator|.
name|from
argument_list|(
name|instant
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
comment|// We can't assert further as the returned value is bound to the machine time zone and locale
block|}
annotation|@
name|Test
DECL|method|testGetValidJmsHeaderValueWithIso8601DateShouldSucceed ()
specifier|public
name|void
name|testGetValidJmsHeaderValueWithIso8601DateShouldSucceed
parameter_list|()
block|{
name|when
argument_list|(
name|mockJmsConfiguration
operator|.
name|isFormatDateHeadersToIso8601
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|jmsBindingUnderTest
operator|.
name|getValidJMSHeaderValue
argument_list|(
literal|"foo"
argument_list|,
name|Date
operator|.
name|from
argument_list|(
name|instant
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2018-02-26T19:12:18Z"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

