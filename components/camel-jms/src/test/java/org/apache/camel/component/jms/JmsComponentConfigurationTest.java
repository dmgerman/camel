begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ParameterConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
operator|.
name|jmsComponentAutoAcknowledge
import|;
end_import

begin_comment
comment|/**  * Lets test the use of the ComponentConfiguration on the JMS endpoint  */
end_comment

begin_class
DECL|class|JmsComponentConfigurationTest
specifier|public
class|class
name|JmsComponentConfigurationTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|componentName
specifier|protected
name|String
name|componentName
init|=
literal|"activemq456"
decl_stmt|;
DECL|field|verbose
specifier|protected
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
annotation|@
name|Test
DECL|method|testConfiguration ()
specifier|public
name|void
name|testConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
name|component
init|=
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
name|ComponentConfiguration
name|configuration
init|=
name|component
operator|.
name|createComponentConfiguration
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|parameterConfigurationMap
init|=
name|configuration
operator|.
name|getParameterConfigurationMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
argument_list|>
name|entries
init|=
name|parameterConfigurationMap
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ParameterConfiguration
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ParameterConfiguration
name|config
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Has name: "
operator|+
name|name
operator|+
literal|" with type "
operator|+
name|config
operator|.
name|getParameterType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"concurrentConsumers"
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"clientId"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"disableReplyTo"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertParameterConfig
argument_list|(
name|configuration
argument_list|,
literal|"timeToLive"
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"concurrentConsumers"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"clientId"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"disableReplyTo"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setParameter
argument_list|(
literal|"timeToLive"
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|JmsEndpoint
name|endpoint
init|=
name|assertIsInstanceOf
argument_list|(
name|JmsEndpoint
operator|.
name|class
argument_list|,
name|configuration
operator|.
name|createEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.concurrentConsumers"
argument_list|,
literal|10
argument_list|,
name|endpoint
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.clientId"
argument_list|,
literal|"foo"
argument_list|,
name|endpoint
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.disableReplyTo"
argument_list|,
literal|true
argument_list|,
name|endpoint
operator|.
name|isDisableReplyTo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"endpoint.timeToLive"
argument_list|,
literal|1000L
argument_list|,
name|endpoint
operator|.
name|getTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParameterConfig (ComponentConfiguration configuration, String name, Class<?> parameterType)
specifier|public
specifier|static
name|void
name|assertParameterConfig
parameter_list|(
name|ComponentConfiguration
name|configuration
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|parameterType
parameter_list|)
block|{
name|ParameterConfiguration
name|config
init|=
name|configuration
operator|.
name|getParameterConfiguration
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"ParameterConfiguration should exist for parameter name "
operator|+
name|name
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ParameterConfiguration."
operator|+
name|name
operator|+
literal|".getName()"
argument_list|,
name|name
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ParameterConfiguration."
operator|+
name|name
operator|+
literal|".getParameterType()"
argument_list|,
name|parameterType
argument_list|,
name|config
operator|.
name|getParameterType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
name|CamelJmsTestHelper
operator|.
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|JmsComponent
name|comp
init|=
name|jmsComponentAutoAcknowledge
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
name|componentName
argument_list|,
name|comp
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{             }
block|}
return|;
block|}
block|}
end_class

end_unit

