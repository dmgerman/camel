begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|MyBeanConsumer
specifier|public
class|class
name|MyBeanConsumer
block|{
annotation|@
name|EndpointInject
argument_list|()
DECL|field|consumer
specifier|private
name|ConsumerTemplate
name|consumer
decl_stmt|;
DECL|method|collectMessages ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|collectMessages
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|received
decl_stmt|;
do|do
block|{
name|received
operator|=
name|consumer
operator|.
name|receiveBody
argument_list|(
literal|"activemq:queue:foo"
argument_list|,
literal|5000
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|received
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|received
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|received
operator|!=
literal|null
condition|)
do|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

