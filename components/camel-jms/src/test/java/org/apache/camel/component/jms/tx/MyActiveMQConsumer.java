begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms.tx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|MyActiveMQConsumer
specifier|public
class|class
name|MyActiveMQConsumer
implements|implements
name|Runnable
block|{
DECL|field|ACTIVEMQ_BROKER_URI
specifier|public
specifier|static
specifier|final
name|String
name|ACTIVEMQ_BROKER_URI
init|=
literal|"failover:vm://localhost"
decl_stmt|;
DECL|field|REQUEST_QUEUE
specifier|public
specifier|static
specifier|final
name|String
name|REQUEST_QUEUE
init|=
literal|"request"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MyActiveMQConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connection
specifier|private
name|Connection
name|connection
decl_stmt|;
DECL|method|MyActiveMQConsumer ()
specifier|public
name|MyActiveMQConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|ACTIVEMQ_BROKER_URI
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get the exception "
operator|+
name|e
operator|+
literal|", when close the JMS connection."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Destination
name|requestDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|REQUEST_QUEUE
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|requestDestination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|TextMessage
name|msg
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
operator|*
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Response timed out."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Destination
name|replyDestination
init|=
name|msg
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
name|String
name|correlationId
init|=
name|msg
operator|.
name|getJMSCorrelationID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"replyDestination: "
operator|+
name|replyDestination
argument_list|)
expr_stmt|;
name|MessageProducer
name|sender
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|replyDestination
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request No. "
operator|+
operator|(
operator|++
name|i
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"msg: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|TextMessage
name|response
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|response
operator|.
name|setText
argument_list|(
literal|"I was here: "
operator|+
name|msg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"reponse: "
operator|+
name|response
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get the exception ["
operator|+
name|exception
operator|+
literal|"], stop receive message"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

