begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|CamelJmsTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
operator|.
name|Started
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
operator|.
name|Stopped
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
operator|.
name|jmsComponentAutoAcknowledge
import|;
end_import

begin_class
DECL|class|JmsLifecycleIssueTest
specifier|public
class|class
name|JmsLifecycleIssueTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|ROUTE_ID
specifier|public
specifier|static
specifier|final
name|String
name|ROUTE_ID
init|=
literal|"simpleRoute"
decl_stmt|;
DECL|field|ENDPOINT_URI
specifier|public
specifier|static
specifier|final
name|String
name|ENDPOINT_URI
init|=
literal|"activemq:processOrder"
decl_stmt|;
annotation|@
name|Test
DECL|method|routeThatIsStoppedAndThenResumedAcceptsMessage ()
specifier|public
name|void
name|routeThatIsStoppedAndThenResumedAcceptsMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThatRouteIs
argument_list|(
name|Stopped
argument_list|)
expr_stmt|;
name|context
operator|.
name|resumeRoute
argument_list|(
name|ROUTE_ID
argument_list|)
expr_stmt|;
name|assertRouteWorks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|routeThatIsStoppedSuspendedAndThenResumedAcceptsMessage ()
specifier|public
name|void
name|routeThatIsStoppedSuspendedAndThenResumedAcceptsMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThatRouteIs
argument_list|(
name|Stopped
argument_list|)
expr_stmt|;
name|context
operator|.
name|suspendRoute
argument_list|(
name|ROUTE_ID
argument_list|)
expr_stmt|;
name|context
operator|.
name|resumeRoute
argument_list|(
name|ROUTE_ID
argument_list|)
expr_stmt|;
name|assertRouteWorks
argument_list|()
expr_stmt|;
block|}
DECL|method|assertThatRouteIs (ServiceStatus expectedStatus)
specifier|private
name|void
name|assertThatRouteIs
parameter_list|(
name|ServiceStatus
name|expectedStatus
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedStatus
argument_list|,
name|context
operator|.
name|getRouteStatus
argument_list|(
name|ROUTE_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRouteWorks ()
specifier|private
name|void
name|assertRouteWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThatRouteIs
argument_list|(
name|Started
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"anything"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
name|ENDPOINT_URI
argument_list|,
literal|"anything"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
name|CamelJmsTestHelper
operator|.
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"activemq"
argument_list|,
name|jmsComponentAutoAcknowledge
argument_list|(
name|connectionFactory
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|ENDPOINT_URI
argument_list|)
operator|.
name|routeId
argument_list|(
name|ROUTE_ID
argument_list|)
operator|.
name|autoStartup
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:input"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

