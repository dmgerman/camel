begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
operator|.
name|jmsComponentAutoAcknowledge
import|;
end_import

begin_class
DECL|class|JmsRequestReplyReplyToOverrideTest
specifier|public
class|class
name|JmsRequestReplyReplyToOverrideTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JmsRequestReplyReplyToOverrideTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REQUEST_BODY
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_BODY
init|=
literal|"Something"
decl_stmt|;
DECL|field|EXPECTED_REPLY_BODY
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_REPLY_BODY
init|=
literal|"Re: "
operator|+
name|REQUEST_BODY
decl_stmt|;
DECL|field|EXPECTED_REPLY_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_REPLY_HEADER
init|=
literal|"queue://bar"
decl_stmt|;
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testJmsRequestReplyReplyToAndReplyToHeader ()
specifier|public
name|void
name|testJmsRequestReplyReplyToAndReplyToHeader
parameter_list|()
throws|throws
name|Exception
block|{
comment|// must start CamelContext because use route builder is false
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// send request to foo, set replyTo to bar, but actually expect reply at baz
name|Thread
name|sender
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Responder
argument_list|()
argument_list|)
decl_stmt|;
name|sender
operator|.
name|start
argument_list|()
expr_stmt|;
name|Exchange
name|reply
init|=
name|template
operator|.
name|request
argument_list|(
literal|"jms:queue:foo"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|REQUEST_BODY
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|EXPECTED_REPLY_BODY
argument_list|,
name|reply
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
name|CamelJmsTestHelper
operator|.
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|JmsComponent
name|jmsComponent
init|=
name|jmsComponentAutoAcknowledge
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|jmsComponent
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setReplyTo
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|jmsComponent
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setReplyToOverride
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"jms"
argument_list|,
name|jmsComponent
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
DECL|class|Responder
specifier|private
class|class
name|Responder
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for request"
argument_list|)
expr_stmt|;
name|Exchange
name|request
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|"jms:queue:foo"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got request, sending reply"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|body
init|=
name|request
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|cid
init|=
name|request
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|replyTo
init|=
name|request
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"JMSReplyTo"
argument_list|,
name|Destination
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|EXPECTED_REPLY_HEADER
argument_list|,
name|replyTo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// send reply
name|template
operator|.
name|send
argument_list|(
literal|"jms:dummy"
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Re: "
operator|+
name|body
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|JmsConstants
operator|.
name|JMS_DESTINATION_NAME
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
name|cid
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
end_class

end_unit

