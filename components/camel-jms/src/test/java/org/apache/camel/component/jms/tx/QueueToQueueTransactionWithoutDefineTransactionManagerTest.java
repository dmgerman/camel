begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms.tx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|tx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringRouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xbean
operator|.
name|spring
operator|.
name|context
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_class
DECL|class|QueueToQueueTransactionWithoutDefineTransactionManagerTest
specifier|public
class|class
name|QueueToQueueTransactionWithoutDefineTransactionManagerTest
extends|extends
name|AbstractTransactionTest
block|{
DECL|field|log
specifier|private
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|getExpectedRouteCount ()
specifier|protected
name|int
name|getExpectedRouteCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/jms/tx/ActiveMQWithoutTransactionManager.xml"
argument_list|)
return|;
block|}
annotation|@
name|Ignore
DECL|method|xtestRollbackUsingXmlQueueToQueue ()
specifier|public
name|void
name|xtestRollbackUsingXmlQueueToQueue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// configure routes and add to camel context
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|SpringRouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|errorHandler
argument_list|(
name|noErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:foo?transacted=true"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|ConditionalExceptionProcessor
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:bar?transacted=true"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:bar?transacted=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MockEndpoint
name|endpoint
init|=
operator|(
name|MockEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:endpoint"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"blah"
argument_list|)
expr_stmt|;
name|assertResult
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoTransactionRollbackUsingXmlQueueToQueue ()
specifier|public
name|void
name|testNoTransactionRollbackUsingXmlQueueToQueue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// configure routes and add to camel context
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|SpringRouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|errorHandler
argument_list|(
name|noErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:foo?transacted=false"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|ConditionalExceptionProcessor
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:bar?transacted=false"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"activemq:queue:foo"
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected only 1 calls to process() (1 failure) but encountered "
operator|+
name|getConditionalExceptionProcessor
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|"."
argument_list|,
name|getConditionalExceptionProcessor
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

