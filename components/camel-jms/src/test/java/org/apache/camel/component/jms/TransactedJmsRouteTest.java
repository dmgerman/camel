begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|DelegateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringRouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
operator|.
name|SpringTransactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertIsSatisfied
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
operator|.
name|assertWait
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|TransactedJmsRouteTest
specifier|public
class|class
name|TransactedJmsRouteTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransactedJmsRouteTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|assertTimeoutSeconds
specifier|protected
name|int
name|assertTimeoutSeconds
init|=
literal|10
decl_stmt|;
DECL|field|mockEndpointA
specifier|private
name|MockEndpoint
name|mockEndpointA
decl_stmt|;
DECL|field|mockEndpointB
specifier|private
name|MockEndpoint
name|mockEndpointB
decl_stmt|;
DECL|field|spring
specifier|private
name|ClassPathXmlApplicationContext
name|spring
decl_stmt|;
DECL|field|mockEndpointC
specifier|private
name|MockEndpoint
name|mockEndpointC
decl_stmt|;
DECL|field|mockEndpointD
specifier|private
name|MockEndpoint
name|mockEndpointD
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|SpringRouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|SpringTransactionPolicy
name|requried
init|=
operator|new
name|SpringTransactionPolicy
argument_list|(
name|lookup
argument_list|(
literal|"PROPAGATION_REQUIRED"
argument_list|,
name|TransactionTemplate
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|SpringTransactionPolicy
name|notsupported
init|=
operator|new
name|SpringTransactionPolicy
argument_list|(
name|lookup
argument_list|(
literal|"PROPAGATION_NOT_SUPPORTED"
argument_list|,
name|TransactionTemplate
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|SpringTransactionPolicy
name|requirenew
init|=
operator|new
name|SpringTransactionPolicy
argument_list|(
name|lookup
argument_list|(
literal|"PROPAGATION_REQUIRES_NEW"
argument_list|,
name|TransactionTemplate
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Policy
name|rollback
init|=
operator|new
name|Policy
argument_list|()
block|{
specifier|public
name|Processor
name|wrap
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
return|return
operator|new
name|DelegateProcessor
argument_list|(
name|processor
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|processNext
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"rollback"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"rollback("
operator|+
name|getProcessor
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|Policy
name|catchRollback
init|=
operator|new
name|Policy
argument_list|()
block|{
specifier|public
name|Processor
name|wrap
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
return|return
operator|new
name|DelegateProcessor
argument_list|(
name|processor
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
name|processNext
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{                                 }
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"catchRollback("
operator|+
name|getProcessor
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// setup transacted error handler
name|errorHandler
argument_list|(
name|transactionErrorHandler
argument_list|(
name|requried
argument_list|)
argument_list|)
expr_stmt|;
comment|// Used to validate messages are sent to the target.
name|from
argument_list|(
literal|"activemq:queue:mock.a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:a"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:mock.b"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:b"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:mock.c"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:c"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:mock.d"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:d"
argument_list|)
expr_stmt|;
comment|// Receive from a and send to target in 1 tx.
name|from
argument_list|(
literal|"activemq:queue:a"
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:mock.a"
argument_list|)
expr_stmt|;
comment|// Cause an error after processing the send. The send to
comment|// activemq:queue:mock.a should rollback
comment|// since it is participating in the inbound transaction, but
comment|// mock:b does not participate so we should see the message get
comment|// there. Also, expect multiple inbound retries as the message
comment|// is rolled back.
comment|// transactionPolicy(requried);
name|from
argument_list|(
literal|"activemq:queue:b"
argument_list|)
operator|.
name|policy
argument_list|(
name|rollback
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:mock.a"
argument_list|,
literal|"mock:b"
argument_list|)
expr_stmt|;
comment|// Cause an error after processing the send in a new
comment|// transaction. The send to activemq:queue:mock.a should
comment|// rollback
comment|// since the rollback is within it's transaction, but mock:b
comment|// does not participate so we should see the message get
comment|// there. Also, expect the message to be successfully consumed
comment|// since the rollback error is not propagated.
comment|// transactionPolicy(requried);
name|from
argument_list|(
literal|"activemq:queue:c"
argument_list|)
operator|.
name|policy
argument_list|(
name|catchRollback
argument_list|)
operator|.
name|policy
argument_list|(
name|requirenew
argument_list|)
operator|.
name|policy
argument_list|(
name|rollback
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:mock.a"
argument_list|,
literal|"mock:b"
argument_list|)
expr_stmt|;
comment|// Cause an error after processing the send in without a
comment|// transaction. The send to activemq:queue:mock.a should
comment|// succeed.
comment|// Also, expect the message to be successfully consumed since
comment|// the rollback error is not propagated.
name|from
argument_list|(
literal|"activemq:queue:d"
argument_list|)
operator|.
name|policy
argument_list|(
name|catchRollback
argument_list|)
operator|.
name|policy
argument_list|(
name|notsupported
argument_list|)
operator|.
name|policy
argument_list|(
name|rollback
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:mock.a"
argument_list|)
expr_stmt|;
comment|// Receive message on a non transacted JMS endpoint, start a
comment|// transaction, send and then rollback.
comment|// mock:a should never get the message (due to rollback) but
comment|// mock:b should get only 1 since the
comment|// inbound was not transacted.
name|JmsEndpoint
name|endpoint
init|=
operator|(
name|JmsEndpoint
operator|)
name|endpoint
argument_list|(
literal|"activemq:queue:e"
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setAcknowledgementMode
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|// since the endpoint of activemq:queue:e is not managed by the TransactionManager, let's create a new transaction
name|from
argument_list|(
name|endpoint
argument_list|)
operator|.
name|policy
argument_list|(
name|requirenew
argument_list|)
operator|.
name|policy
argument_list|(
name|rollback
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:mock.a"
argument_list|,
literal|"mock:b"
argument_list|)
expr_stmt|;
comment|//
comment|// Sets up 2 consumers on single topic, one being transacted the
comment|// other not. Used to verify
comment|// That each consumer can have independently configured
comment|// transaction settings.
comment|// Do a rollback, should cause the transacted consumer to
comment|// re-deliver (since we are using a durable subscription) but
comment|// not the un-transacted one.
comment|// TODO: find out why re-delivery is not working with a non
comment|// durable transacted topic.
name|JmsEndpoint
name|endpoint1
init|=
operator|(
name|JmsEndpoint
operator|)
name|endpoint
argument_list|(
literal|"activemq:topic:f"
argument_list|)
decl_stmt|;
name|endpoint1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setTransacted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endpoint1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setSubscriptionDurable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endpoint1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClientId
argument_list|(
literal|"client2"
argument_list|)
expr_stmt|;
name|endpoint1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setDurableSubscriptionName
argument_list|(
literal|"sub"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|endpoint1
argument_list|)
operator|.
name|policy
argument_list|(
name|requried
argument_list|)
operator|.
name|policy
argument_list|(
name|rollback
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:mock.a"
argument_list|,
literal|"mock:b"
argument_list|)
expr_stmt|;
name|JmsEndpoint
name|endpoint2
init|=
operator|(
name|JmsEndpoint
operator|)
name|endpoint
argument_list|(
literal|"activemq:topic:f"
argument_list|)
decl_stmt|;
name|endpoint2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|endpoint2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setAcknowledgementMode
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|endpoint2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setSubscriptionDurable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endpoint2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClientId
argument_list|(
literal|"client1"
argument_list|)
expr_stmt|;
name|endpoint2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setDurableSubscriptionName
argument_list|(
literal|"sub"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|endpoint2
argument_list|)
operator|.
name|policy
argument_list|(
name|requried
argument_list|)
operator|.
name|policy
argument_list|(
name|rollback
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq:queue:mock.c"
argument_list|,
literal|"mock:d"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|spring
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/jms/spring.xml"
argument_list|)
expr_stmt|;
name|SpringCamelContext
name|ctx
init|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|spring
argument_list|)
decl_stmt|;
name|PlatformTransactionManager
name|transactionManager
init|=
operator|(
name|PlatformTransactionManager
operator|)
name|spring
operator|.
name|getBean
argument_list|(
literal|"jmsTransactionManager"
argument_list|)
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
operator|(
name|ConnectionFactory
operator|)
name|spring
operator|.
name|getBean
argument_list|(
literal|"jmsConnectionFactory"
argument_list|)
decl_stmt|;
name|JmsComponent
name|component
init|=
name|JmsComponent
operator|.
name|jmsComponentTransacted
argument_list|(
name|connectionFactory
argument_list|,
name|transactionManager
argument_list|)
decl_stmt|;
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setConcurrentConsumers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addComponent
argument_list|(
literal|"activemq"
argument_list|,
name|component
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
for|for
control|(
name|Route
name|route
range|:
name|this
operator|.
name|context
operator|.
name|getRoutes
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
name|mockEndpointA
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
expr_stmt|;
name|mockEndpointB
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
expr_stmt|;
name|mockEndpointC
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:c"
argument_list|)
expr_stmt|;
name|mockEndpointD
operator|=
name|getMockEndpoint
argument_list|(
literal|"mock:d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|spring
operator|.
name|destroy
argument_list|()
expr_stmt|;
comment|// Waiting for the broker shutdown
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test seems to be fail every other run.      */
DECL|method|disabledtestSenarioF ()
specifier|public
name|void
name|disabledtestSenarioF
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mockEndpointA
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mockEndpointB
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|mockEndpointC
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mockEndpointD
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"activemq:topic:f"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Wait till the endpoints get their messages.
name|assertWait
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|,
name|mockEndpointC
argument_list|,
name|mockEndpointD
argument_list|)
expr_stmt|;
comment|// Wait a little more to make sure extra messages are not received.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|,
name|mockEndpointC
argument_list|,
name|mockEndpointD
argument_list|)
expr_stmt|;
block|}
DECL|method|testSenarioA ()
specifier|public
name|void
name|testSenarioA
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mockEndpointA
operator|.
name|expectedBodiesReceived
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"activemq:queue:a"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
name|mockEndpointA
argument_list|)
expr_stmt|;
block|}
DECL|method|testSenarioB ()
specifier|public
name|void
name|testSenarioB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mockEndpointA
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// May be more since spring seems to go into tight loop re-delivering.
name|mockEndpointB
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"activemq:queue:b"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
name|assertTimeoutSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|)
expr_stmt|;
block|}
DECL|method|disabledtestSenarioC ()
specifier|public
name|void
name|disabledtestSenarioC
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mockEndpointA
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Should only get 1 message the incoming transaction does not rollback.
name|mockEndpointB
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"activemq:queue:c"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Wait till the endpoints get their messages.
name|assertWait
argument_list|(
name|assertTimeoutSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|)
expr_stmt|;
comment|// Wait a little more to make sure extra messages are not received.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|)
expr_stmt|;
block|}
DECL|method|disabledtestSenarioD ()
specifier|public
name|void
name|disabledtestSenarioD
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mockEndpointA
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"activemq:queue:d"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Wait till the endpoints get their messages.
name|assertWait
argument_list|(
name|assertTimeoutSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|)
expr_stmt|;
comment|// Wait a little more to make sure extra messages are not received.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
name|mockEndpointA
argument_list|)
expr_stmt|;
block|}
DECL|method|testSenarioE ()
specifier|public
name|void
name|testSenarioE
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expected
init|=
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mockEndpointA
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mockEndpointB
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"activemq:queue:e"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Wait till the endpoints get their messages.
name|assertWait
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|)
expr_stmt|;
comment|// Wait a little more to make sure extra messages are not received.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertIsSatisfied
argument_list|(
name|mockEndpointA
argument_list|,
name|mockEndpointB
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

