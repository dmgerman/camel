begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
operator|.
name|jmsComponentAutoAcknowledge
import|;
end_import

begin_class
DECL|class|JmsSelectorOptionTest
specifier|public
class|class
name|JmsSelectorOptionTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|componentName
specifier|protected
name|String
name|componentName
init|=
literal|"activemq"
decl_stmt|;
annotation|@
name|Test
DECL|method|testJmsMessageWithSelector ()
specifier|public
name|void
name|testJmsMessageWithSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|endpointA
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:a"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|endpointB
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:b"
argument_list|)
decl_stmt|;
name|MockEndpoint
name|endpointC
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:c"
argument_list|)
decl_stmt|;
name|endpointA
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"A blue car!"
argument_list|,
literal|"A blue car, again!"
argument_list|)
expr_stmt|;
name|endpointA
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
expr_stmt|;
name|endpointB
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"color"
argument_list|,
literal|"red"
argument_list|)
expr_stmt|;
name|endpointB
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"A red car!"
argument_list|)
expr_stmt|;
name|endpointC
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Message1"
argument_list|,
literal|"Message2"
argument_list|)
expr_stmt|;
name|endpointC
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:hello"
argument_list|,
literal|"A blue car!"
argument_list|,
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:hello"
argument_list|,
literal|"A red car!"
argument_list|,
literal|"color"
argument_list|,
literal|"red"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:hello"
argument_list|,
literal|"A blue car, again!"
argument_list|,
literal|"color"
argument_list|,
literal|"blue"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:hello"
argument_list|,
literal|"Message1"
argument_list|,
literal|"SIZE_NUMBER"
argument_list|,
literal|1505
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:hello"
argument_list|,
literal|"Message3"
argument_list|,
literal|"SIZE_NUMBER"
argument_list|,
literal|1300
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:hello"
argument_list|,
literal|"Message2"
argument_list|,
literal|"SIZE_NUMBER"
argument_list|,
literal|1600
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConsumerTemplate ()
specifier|public
name|void
name|testConsumerTemplate
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:consumer"
argument_list|,
literal|"Message1"
argument_list|,
literal|"SIZE_NUMBER"
argument_list|,
literal|1505
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:consumer"
argument_list|,
literal|"Message3"
argument_list|,
literal|"SIZE_NUMBER"
argument_list|,
literal|1300
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"activemq:queue:consumer"
argument_list|,
literal|"Message2"
argument_list|,
literal|"SIZE_NUMBER"
argument_list|,
literal|1600
argument_list|)
expr_stmt|;
comment|// process every exchange which is ready. If no exchange is left break
comment|// the loop
while|while
condition|(
literal|true
condition|)
block|{
name|Exchange
name|ex
init|=
name|consumer
operator|.
name|receiveNoWait
argument_list|(
literal|"activemq:queue:consumer?selector=SIZE_NUMBER<1500"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|Message
name|message
init|=
name|ex
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|message
operator|.
name|getHeader
argument_list|(
literal|"SIZE_NUMBER"
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The message header SIZE_NUMBER should be less than 1500"
argument_list|,
name|size
operator|<
literal|1500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The message body is wrong"
argument_list|,
literal|"Message3"
argument_list|,
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
name|CamelJmsTestHelper
operator|.
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
name|componentName
argument_list|,
name|jmsComponentAutoAcknowledge
argument_list|(
name|connectionFactory
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"activemq:queue:hello?selector=color='blue'"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:a"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:hello?selector=color='red'"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:b"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq:queue:hello?selector=SIZE_NUMBER>1500"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:c"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

