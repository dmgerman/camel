begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.activemq.camel.component
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EnhancedConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|DestinationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|SingleConnectionFactory
import|;
end_import

begin_class
DECL|class|ActiveMQComponent
specifier|public
class|class
name|ActiveMQComponent
extends|extends
name|JmsComponent
block|{
DECL|field|singleConnectionFactoryList
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|SingleConnectionFactory
argument_list|>
name|singleConnectionFactoryList
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pooledConnectionFactoryServiceList
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Service
argument_list|>
name|pooledConnectionFactoryServiceList
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMQComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|exposeAllQueues
specifier|private
name|boolean
name|exposeAllQueues
decl_stmt|;
DECL|field|endpointLoader
specifier|private
name|CamelEndpointLoader
name|endpointLoader
decl_stmt|;
DECL|field|connection
specifier|private
name|EnhancedConnection
name|connection
decl_stmt|;
DECL|field|source
name|DestinationSource
name|source
decl_stmt|;
DECL|method|activeMQComponent ()
specifier|public
specifier|static
name|ActiveMQComponent
name|activeMQComponent
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQComponent
argument_list|()
return|;
block|}
DECL|method|activeMQComponent (String brokerURL)
specifier|public
specifier|static
name|ActiveMQComponent
name|activeMQComponent
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
name|ActiveMQComponent
name|answer
init|=
operator|new
name|ActiveMQComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|answer
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setBrokerURL
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|ActiveMQComponent ()
specifier|public
name|ActiveMQComponent
parameter_list|()
block|{     }
DECL|method|ActiveMQComponent (CamelContext context)
specifier|public
name|ActiveMQComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|ActiveMQComponent (ActiveMQConfiguration configuration)
specifier|public
name|ActiveMQComponent
parameter_list|(
name|ActiveMQConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|setBrokerURL (String brokerURL)
specifier|public
name|void
name|setBrokerURL
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|this
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setBrokerURL
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @deprecated */
DECL|method|setUserName (String userName)
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|setUsername
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
DECL|method|setTrustAllPackages (boolean trustAllPackages)
specifier|public
name|void
name|setTrustAllPackages
parameter_list|(
name|boolean
name|trustAllPackages
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|this
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setTrustAllPackages
argument_list|(
name|trustAllPackages
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isExposeAllQueues ()
specifier|public
name|boolean
name|isExposeAllQueues
parameter_list|()
block|{
return|return
name|this
operator|.
name|exposeAllQueues
return|;
block|}
DECL|method|setExposeAllQueues (boolean exposeAllQueues)
specifier|public
name|void
name|setExposeAllQueues
parameter_list|(
name|boolean
name|exposeAllQueues
parameter_list|)
block|{
name|this
operator|.
name|exposeAllQueues
operator|=
name|exposeAllQueues
expr_stmt|;
block|}
DECL|method|setUsePooledConnection (boolean usePooledConnection)
specifier|public
name|void
name|setUsePooledConnection
parameter_list|(
name|boolean
name|usePooledConnection
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|this
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setUsePooledConnection
argument_list|(
name|usePooledConnection
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setUseSingleConnection (boolean useSingleConnection)
specifier|public
name|void
name|setUseSingleConnection
parameter_list|(
name|boolean
name|useSingleConnection
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|this
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setUseSingleConnection
argument_list|(
name|useSingleConnection
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addPooledConnectionFactoryService (Service pooledConnectionFactoryService)
specifier|protected
name|void
name|addPooledConnectionFactoryService
parameter_list|(
name|Service
name|pooledConnectionFactoryService
parameter_list|)
block|{
name|this
operator|.
name|pooledConnectionFactoryServiceList
operator|.
name|add
argument_list|(
name|pooledConnectionFactoryService
argument_list|)
expr_stmt|;
block|}
DECL|method|addSingleConnectionFactory (SingleConnectionFactory singleConnectionFactory)
specifier|protected
name|void
name|addSingleConnectionFactory
parameter_list|(
name|SingleConnectionFactory
name|singleConnectionFactory
parameter_list|)
block|{
name|this
operator|.
name|singleConnectionFactoryList
operator|.
name|add
argument_list|(
name|singleConnectionFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|convertPathToActualDestination (String path, Map<String, Object> parameters)
specifier|protected
name|String
name|convertPathToActualDestination
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|Map
name|options
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"destination."
argument_list|)
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|query
operator|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|var6
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|var6
argument_list|)
throw|;
block|}
return|return
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|query
argument_list|)
condition|?
name|path
operator|+
literal|"?"
operator|+
name|query
else|:
name|path
return|;
block|}
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isExposeAllQueues
argument_list|()
condition|)
block|{
name|this
operator|.
name|createDestinationSource
argument_list|()
expr_stmt|;
name|this
operator|.
name|endpointLoader
operator|=
operator|new
name|CamelEndpointLoader
argument_list|(
name|this
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|this
operator|.
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpointLoader
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getMessageCreatedStrategy
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setMessageCreatedStrategy
argument_list|(
operator|new
name|OriginalDestinationPropagateStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDestinationSource ()
specifier|protected
name|void
name|createDestinationSource
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|source
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|connection
operator|==
literal|null
condition|)
block|{
name|Connection
name|value
init|=
name|this
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|EnhancedConnection
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Created JMS Connection is not an EnhancedConnection: "
operator|+
name|value
argument_list|)
throw|;
block|}
name|this
operator|.
name|connection
operator|=
operator|(
name|EnhancedConnection
operator|)
name|value
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|source
operator|=
name|this
operator|.
name|connection
operator|.
name|getDestinationSource
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|var2
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get destination source, endpoint completer will not work"
argument_list|,
name|var2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|source
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|source
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|connection
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|=
literal|null
expr_stmt|;
block|}
name|Iterator
name|var1
init|=
name|this
operator|.
name|pooledConnectionFactoryServiceList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|var1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Service
name|s
init|=
operator|(
name|Service
operator|)
name|var1
operator|.
name|next
argument_list|()
decl_stmt|;
name|s
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|pooledConnectionFactoryServiceList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|var1
operator|=
name|this
operator|.
name|singleConnectionFactoryList
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|var1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SingleConnectionFactory
name|s
init|=
operator|(
name|SingleConnectionFactory
operator|)
name|var1
operator|.
name|next
argument_list|()
decl_stmt|;
name|s
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|singleConnectionFactoryList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|setConfiguration (JmsConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|JmsConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|configuration
operator|)
operator|.
name|setActiveMQComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|createConfiguration ()
specifier|protected
name|JmsConfiguration
name|createConfiguration
parameter_list|()
block|{
name|ActiveMQConfiguration
name|answer
init|=
operator|new
name|ActiveMQConfiguration
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setActiveMQComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

