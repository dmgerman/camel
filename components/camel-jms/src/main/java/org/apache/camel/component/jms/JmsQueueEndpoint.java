begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BrowsableEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsOperations
import|;
end_import

begin_comment
comment|/**  * An endpoint for a JMS Queue which is also browsable  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|JmsQueueEndpoint
specifier|public
class|class
name|JmsQueueEndpoint
extends|extends
name|JmsEndpoint
implements|implements
name|BrowsableEndpoint
argument_list|<
name|JmsExchange
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JmsQueueEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|maximumBrowseSize
specifier|private
name|int
name|maximumBrowseSize
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|queueBrowseStrategy
specifier|private
specifier|final
name|QueueBrowseStrategy
name|queueBrowseStrategy
decl_stmt|;
DECL|method|JmsQueueEndpoint (String uri, JmsComponent component, String destination, JmsConfiguration configuration)
specifier|public
name|JmsQueueEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|JmsComponent
name|component
parameter_list|,
name|String
name|destination
parameter_list|,
name|JmsConfiguration
name|configuration
parameter_list|)
block|{
name|this
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|destination
argument_list|,
name|configuration
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|JmsQueueEndpoint (String uri, JmsComponent component, String destination, JmsConfiguration configuration, QueueBrowseStrategy queueBrowseStrategy)
specifier|public
name|JmsQueueEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|JmsComponent
name|component
parameter_list|,
name|String
name|destination
parameter_list|,
name|JmsConfiguration
name|configuration
parameter_list|,
name|QueueBrowseStrategy
name|queueBrowseStrategy
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|destination
argument_list|,
literal|false
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|queueBrowseStrategy
operator|=
name|queueBrowseStrategy
expr_stmt|;
if|if
condition|(
name|queueBrowseStrategy
operator|==
literal|null
condition|)
block|{
name|queueBrowseStrategy
operator|=
name|createQueueBrowseStrategy
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getMaximumBrowseSize ()
specifier|public
name|int
name|getMaximumBrowseSize
parameter_list|()
block|{
return|return
name|maximumBrowseSize
return|;
block|}
comment|/**      * If a number is set> 0 then this limits the number of messages that are      * returned when browsing the queue      */
DECL|method|setMaximumBrowseSize (int maximumBrowseSize)
specifier|public
name|void
name|setMaximumBrowseSize
parameter_list|(
name|int
name|maximumBrowseSize
parameter_list|)
block|{
name|this
operator|.
name|maximumBrowseSize
operator|=
name|maximumBrowseSize
expr_stmt|;
block|}
DECL|method|getExchanges ()
specifier|public
name|List
argument_list|<
name|Exchange
argument_list|>
name|getExchanges
parameter_list|()
block|{
if|if
condition|(
name|queueBrowseStrategy
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
return|;
block|}
name|String
name|queue
init|=
name|getDestination
argument_list|()
decl_stmt|;
name|JmsOperations
name|template
init|=
name|getConfiguration
argument_list|()
operator|.
name|createInOnlyTemplate
argument_list|(
name|this
argument_list|,
literal|false
argument_list|,
name|queue
argument_list|)
decl_stmt|;
return|return
name|queueBrowseStrategy
operator|.
name|browse
argument_list|(
name|template
argument_list|,
name|queue
argument_list|,
name|this
argument_list|)
return|;
block|}
DECL|method|createQueueBrowseStrategy ()
specifier|protected
specifier|static
name|QueueBrowseStrategy
name|createQueueBrowseStrategy
parameter_list|()
block|{
name|QueueBrowseStrategy
name|answer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|answer
operator|=
name|JmsComponent
operator|.
name|tryCreateDefaultQueueBrowseStrategy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception trying to create default QueueBrowseStrategy. "
operator|+
literal|"This could be due to spring 2.0.x on classpath? Cause: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot browse queues as no QueueBrowseStrategy specified. Are you using Spring 2.0.x by any chance? If you upgrade to 2.5.x or later then queue browsing is supported"
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

