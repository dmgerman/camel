begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|task
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|JmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|JmsTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|SessionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|SimpleMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|JmsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|converter
operator|.
name|MessageConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|destination
operator|.
name|DestinationResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsMessageHelper
operator|.
name|normalizeDestinationName
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|JmsConfiguration
specifier|public
class|class
name|JmsConfiguration
implements|implements
name|Cloneable
block|{
DECL|field|QUEUE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_PREFIX
init|=
literal|"queue:"
decl_stmt|;
DECL|field|TOPIC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_PREFIX
init|=
literal|"topic:"
decl_stmt|;
DECL|field|TEMP_QUEUE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_QUEUE_PREFIX
init|=
literal|"temp-queue:"
decl_stmt|;
DECL|field|TEMP_TOPIC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_TOPIC_PREFIX
init|=
literal|"temp-topic:"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JmsConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// these are too advanced and seldom used, we should consider removing those as there is plenty of options already
DECL|field|jmsOperations
specifier|private
name|JmsOperations
name|jmsOperations
decl_stmt|;
DECL|field|templateConnectionFactory
specifier|private
name|ConnectionFactory
name|templateConnectionFactory
decl_stmt|;
DECL|field|listenerConnectionFactory
specifier|private
name|ConnectionFactory
name|listenerConnectionFactory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"The connection factory to be use. A connection factory must be configured either on the component or endpoint."
argument_list|)
DECL|field|connectionFactory
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."
argument_list|)
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory."
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|acknowledgementMode
specifier|private
name|int
name|acknowledgementMode
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"AUTO_ACKNOWLEDGE"
argument_list|,
name|enums
operator|=
literal|"SESSION_TRANSACTED,CLIENT_ACKNOWLEDGE,AUTO_ACKNOWLEDGE,DUPS_OK_ACKNOWLEDGE"
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"The JMS acknowledgement name, which is one of: SESSION_TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE"
argument_list|)
DECL|field|acknowledgementModeName
specifier|private
name|String
name|acknowledgementModeName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver"
operator|+
literal|" (for example, to lookup the real destination in a JNDI registry)."
argument_list|)
DECL|field|destinationResolver
specifier|private
name|DestinationResolver
name|destinationResolver
decl_stmt|;
comment|// Used to configure the spring Container
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions."
argument_list|)
DECL|field|exceptionListener
specifier|private
name|ExceptionListener
name|exceptionListener
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"Default"
argument_list|,
name|description
operator|=
literal|"The consumer type to use, which can be one of: Simple, Default, or Custom."
operator|+
literal|" The consumer type determines which Spring JMS listener to use. Default will use org.springframework.jms.listener.DefaultMessageListenerContainer,"
operator|+
literal|" Simple will use org.springframework.jms.listener.SimpleMessageListenerContainer."
operator|+
literal|" When Custom is specified, the MessageListenerContainerFactory defined by the messageListenerContainerFactory option"
operator|+
literal|" will determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use."
argument_list|)
DECL|field|consumerType
specifier|private
name|ConsumerType
name|consumerType
init|=
name|ConsumerType
operator|.
name|Default
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message."
operator|+
literal|" By default these exceptions will be logged at the WARN level, if no errorHandler has been configured."
operator|+
literal|" You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options."
operator|+
literal|" This makes it much easier to configure, than having to code a custom errorHandler."
argument_list|)
DECL|field|errorHandler
specifier|private
name|ErrorHandler
name|errorHandler
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"WARN"
argument_list|,
name|label
operator|=
literal|"consumer,logging"
argument_list|,
name|description
operator|=
literal|"Allows to configure the default errorHandler logging level for logging uncaught exceptions."
argument_list|)
DECL|field|errorHandlerLoggingLevel
specifier|private
name|LoggingLevel
name|errorHandlerLoggingLevel
init|=
name|LoggingLevel
operator|.
name|WARN
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"consumer,logging"
argument_list|,
name|description
operator|=
literal|"Allows to control whether stacktraces should be logged or not, by the default errorHandler."
argument_list|)
DECL|field|errorHandlerLogStackTrace
specifier|private
name|boolean
name|errorHandlerLogStackTrace
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Specifies whether the consumer container should auto-startup."
argument_list|)
DECL|field|autoStartup
specifier|private
name|boolean
name|autoStartup
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Whether the DefaultMessageListenerContainer used in the reply managers for request-reply messaging allow "
operator|+
literal|" the DefaultMessageListenerContainer.runningAllowed flag to quick stop in case JmsConfiguration#isAcceptMessagesWhileStopping"
operator|+
literal|" is enabled, and org.apache.camel.CamelContext is currently being stopped. This quick stop ability is enabled by"
operator|+
literal|" default in the regular JMS consumers but to enable for reply managers you must enable this flag."
argument_list|)
DECL|field|allowReplyManagerQuickStop
specifier|private
name|boolean
name|allowReplyManagerQuickStop
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether the consumer accept messages while it is stopping."
operator|+
literal|" You may consider enabling this option, if you start and stop JMS routes at runtime, while there are still messages"
operator|+
literal|" enqueued on the queue. If this option is false, and you stop the JMS route, then messages may be rejected,"
operator|+
literal|" and the JMS broker would have to attempt redeliveries, which yet again may be rejected, and eventually the message"
operator|+
literal|" may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option."
argument_list|)
DECL|field|acceptMessagesWhileStopping
specifier|private
name|boolean
name|acceptMessagesWhileStopping
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Sets the JMS client ID to use. Note that this value, if specified, must be unique and can only be used by a single JMS connection instance."
operator|+
literal|" It is typically only required for durable topic subscriptions."
operator|+
literal|" If using Apache ActiveMQ you may prefer to use Virtual Topics instead."
argument_list|)
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well."
argument_list|)
DECL|field|durableSubscriptionName
specifier|private
name|String
name|durableSubscriptionName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether the listener session should be exposed when consuming messages."
argument_list|)
DECL|field|exposeListenerSession
specifier|private
name|boolean
name|exposeListenerSession
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Allows you to specify a custom task executor for consuming messages."
argument_list|)
DECL|field|taskExecutor
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether to inhibit the delivery of messages published by its own connection."
argument_list|)
DECL|field|pubSubNoLocal
specifier|private
name|boolean
name|pubSubNoLocal
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS)."
operator|+
literal|" See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."
operator|+
literal|" When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number"
operator|+
literal|" of concurrent consumers on the reply message listener."
argument_list|)
DECL|field|concurrentConsumers
specifier|private
name|int
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Specifies the default number of concurrent consumers when doing request/reply over JMS."
operator|+
literal|" See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."
argument_list|)
DECL|field|replyToConcurrentConsumers
specifier|private
name|int
name|replyToConcurrentConsumers
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"The number of messages per task. -1 is unlimited."
operator|+
literal|" If you use a range for concurrent consumers (eg min< max), then this option can be used to set"
operator|+
literal|" a value to eg 100 to control how fast the consumers will shrink when less work is required."
argument_list|)
DECL|field|maxMessagesPerTask
specifier|private
name|int
name|maxMessagesPerTask
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Sets the cache level by ID for the underlying JMS resources. See cacheLevelName option for more details."
argument_list|)
DECL|field|cacheLevel
specifier|private
name|int
name|cacheLevel
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"CACHE_AUTO"
argument_list|,
name|enums
operator|=
literal|"CACHE_AUTO,CACHE_CONNECTION,CACHE_CONSUMER,CACHE_NONE,CACHE_SESSION"
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Sets the cache level by name for the underlying JMS resources."
operator|+
literal|" Possible values are: CACHE_AUTO, CACHE_CONNECTION, CACHE_CONSUMER, CACHE_NONE, and CACHE_SESSION."
operator|+
literal|" The default setting is CACHE_AUTO. See the Spring documentation and Transactions Cache Levels for more information."
argument_list|)
DECL|field|cacheLevelName
specifier|private
name|String
name|cacheLevelName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"5000"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds."
operator|+
literal|" The default is 5000 ms, that is, 5 seconds."
argument_list|)
DECL|field|recoveryInterval
specifier|private
name|long
name|recoveryInterval
init|=
literal|5000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1000"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"The timeout for receiving messages (in milliseconds)."
argument_list|)
DECL|field|receiveTimeout
specifier|private
name|long
name|receiveTimeout
init|=
literal|1000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"20000"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds)."
operator|+
literal|" The default is 20 seconds. You can include the header \"CamelJmsRequestTimeout\" to override this endpoint configured"
operator|+
literal|" timeout value, and thus have per message individual timeout values."
operator|+
literal|" See also the requestTimeoutCheckerInterval option."
argument_list|)
DECL|field|requestTimeout
specifier|private
name|long
name|requestTimeout
init|=
literal|20000L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1000"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS."
operator|+
literal|" By default Camel checks once per second. But if you must react faster when a timeout occurs,"
operator|+
literal|" then you can lower this interval, to check more frequently. The timeout is determined by the option requestTimeout."
argument_list|)
DECL|field|requestTimeoutCheckerInterval
specifier|private
name|long
name|requestTimeoutCheckerInterval
init|=
literal|1000L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies the limit for idle executions of a receive task, not having received any message within its execution."
operator|+
literal|" If this limit is reached, the task will shut down and leave receiving to other executing tasks"
operator|+
literal|" (in the case of dynamic scheduling; see the maxConcurrentConsumers setting)."
operator|+
literal|" There is additional doc available from Spring."
argument_list|)
DECL|field|idleTaskExecutionLimit
specifier|private
name|int
name|idleTaskExecutionLimit
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specify the limit for the number of consumers that are allowed to be idle at any given time."
argument_list|)
DECL|field|idleConsumerLimit
specifier|private
name|int
name|idleConsumerLimit
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"100"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Interval in millis to sleep each time while waiting for provisional correlation id to be updated."
argument_list|)
DECL|field|waitForProvisionCorrelationToBeUpdatedThreadSleepingTime
specifier|private
name|long
name|waitForProvisionCorrelationToBeUpdatedThreadSleepingTime
init|=
literal|100L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"50"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS"
operator|+
literal|" and when the option useMessageIDAsCorrelationID is enabled."
argument_list|)
DECL|field|waitForProvisionCorrelationToBeUpdatedCounter
specifier|private
name|int
name|waitForProvisionCorrelationToBeUpdatedCounter
init|=
literal|50
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS)."
operator|+
literal|" See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."
operator|+
literal|" When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number"
operator|+
literal|" of concurrent consumers on the reply message listener."
argument_list|)
DECL|field|maxConcurrentConsumers
specifier|private
name|int
name|maxConcurrentConsumers
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Specifies the maximum number of concurrent consumers when using request/reply over JMS."
operator|+
literal|" See also the maxMessagesPerTask option to control dynamic scaling up/down of threads."
argument_list|)
DECL|field|replyToMaxConcurrentConsumers
specifier|private
name|int
name|replyToMaxConcurrentConsumers
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|description
operator|=
literal|"Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS."
argument_list|)
DECL|field|replyToOnTimeoutMaxConcurrentConsumers
specifier|private
name|int
name|replyToOnTimeoutMaxConcurrentConsumers
init|=
literal|1
decl_stmt|;
comment|// JmsTemplate only
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|,
name|description
operator|=
literal|"Set if the deliveryMode, priority or timeToLive qualities of service should be used when sending messages."
operator|+
literal|" This option is based on Spring's JmsTemplate. The deliveryMode, priority and timeToLive options are applied to the current endpoint."
operator|+
literal|" This contrasts with the preserveMessageQos option, which operates at message granularity,"
operator|+
literal|" reading QoS properties exclusively from the Camel In message headers."
argument_list|)
DECL|field|explicitQosEnabled
specifier|private
name|Boolean
name|explicitQosEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Specifies whether persistent delivery is used by default."
argument_list|)
DECL|field|deliveryPersistent
specifier|private
name|boolean
name|deliveryPersistent
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"1,2"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Specifies the delivery mode to be used."
operator|+
literal|" Possibles values are those defined by javax.jms.DeliveryMode."
operator|+
literal|" NON_PERSISTENT = 1 and PERSISTENT = 2."
argument_list|)
DECL|field|deliveryMode
specifier|private
name|Integer
name|deliveryMode
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Specifies whether to use persistent delivery by default for replies."
argument_list|)
DECL|field|replyToDeliveryPersistent
specifier|private
name|boolean
name|replyToDeliveryPersistent
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Sets the JMS selector to use"
argument_list|)
DECL|field|selector
specifier|private
name|String
name|selector
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"When sending messages, specifies the time-to-live of the message (in milliseconds)."
argument_list|)
DECL|field|timeToLive
specifier|private
name|long
name|timeToLive
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message."
argument_list|)
DECL|field|messageConverter
specifier|private
name|MessageConverter
name|messageConverter
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether Camel should auto map the received JMS message to a suited payload type, such as javax.jms.TextMessage to a String etc."
argument_list|)
DECL|field|mapJmsMessage
specifier|private
name|boolean
name|mapJmsMessage
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"When sending, specifies whether message IDs should be added. This is just an hint to the JMS broker."
operator|+
literal|" If the JMS provider accepts this hint, these messages must have the message ID set to null; if the provider ignores the hint, "
operator|+
literal|"the message ID must be set to its normal unique value."
argument_list|)
DECL|field|messageIdEnabled
specifier|private
name|boolean
name|messageIdEnabled
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether timestamps should be enabled by default on sending messages. This is just an hint to the JMS broker."
operator|+
literal|" If the JMS provider accepts this hint, these messages must have the timestamp set to zero; if the provider ignores the hint "
operator|+
literal|"the timestamp must be set to its normal value."
argument_list|)
DECL|field|messageTimestampEnabled
specifier|private
name|boolean
name|messageTimestampEnabled
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
name|enums
operator|=
literal|"1,2,3,4,5,6,7,8,9"
argument_list|,
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest)."
operator|+
literal|" The explicitQosEnabled option must also be enabled in order for this option to have any effect."
argument_list|)
DECL|field|priority
specifier|private
name|int
name|priority
init|=
name|Message
operator|.
name|DEFAULT_PRIORITY
decl_stmt|;
comment|// Transaction related configuration
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"transaction"
argument_list|,
name|description
operator|=
literal|"Specifies whether to use transacted mode"
argument_list|)
DECL|field|transacted
specifier|private
name|boolean
name|transacted
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"transaction,advanced"
argument_list|,
name|description
operator|=
literal|"If true, Camel will create a JmsTransactionManager, if there is no transactionManager injected when option transacted=true."
argument_list|)
DECL|field|lazyCreateTransactionManager
specifier|private
name|boolean
name|lazyCreateTransactionManager
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"transaction,advanced"
argument_list|,
name|description
operator|=
literal|"The Spring transaction manager to use."
argument_list|)
DECL|field|transactionManager
specifier|private
name|PlatformTransactionManager
name|transactionManager
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"transaction,advanced"
argument_list|,
name|description
operator|=
literal|"The name of the transaction to use."
argument_list|)
DECL|field|transactionName
specifier|private
name|String
name|transactionName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"-1"
argument_list|,
name|label
operator|=
literal|"transaction,advanced"
argument_list|,
name|description
operator|=
literal|"The timeout value of the transaction (in seconds), if using transacted mode."
argument_list|)
DECL|field|transactionTimeout
specifier|private
name|int
name|transactionTimeout
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Set to true, if you want to send message using the QoS settings specified on the message,"
operator|+
literal|" instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority, JMSDeliveryMode,"
operator|+
literal|" and JMSExpiration. You can provide all or only some of them. If not provided, Camel will fall back to use the"
operator|+
literal|" values from the endpoint instead. So, when using this option, the headers override the values from the endpoint."
operator|+
literal|" The explicitQosEnabled option, by contrast, will only use options set on the endpoint, and not values from the message header."
argument_list|)
DECL|field|preserveMessageQos
specifier|private
name|boolean
name|preserveMessageQos
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Specifies whether Camel ignores the JMSReplyTo header in messages. If true, Camel does not send a reply back to"
operator|+
literal|" the destination specified in the JMSReplyTo header. You can use this option if you want Camel to consume from a"
operator|+
literal|" route and you do not want Camel to automatically send back a reply message because another component in your code"
operator|+
literal|" handles the reply message. You can also use this option if you want to use Camel as a proxy between different"
operator|+
literal|" message brokers and you want to route message from one system to another."
argument_list|)
DECL|field|disableReplyTo
specifier|private
name|boolean
name|disableReplyTo
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Enables eager loading of JMS properties and payload as soon as a message is loaded"
operator|+
literal|" which generally is inefficient as the JMS properties may not be required"
operator|+
literal|" but sometimes can catch early any issues with the underlying JMS provider"
operator|+
literal|" and the use of JMS properties"
argument_list|)
DECL|field|eagerLoadingOfProperties
specifier|private
name|boolean
name|eagerLoadingOfProperties
decl_stmt|;
comment|// Always make a JMS message copy when it's passed to Producer
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"If true, Camel will always make a JMS message copy of the message when it is passed to the producer for sending."
operator|+
literal|" Copying the message is needed in some situations, such as when a replyToDestinationSelectorName is set"
operator|+
literal|" (incidentally, Camel will set the alwaysCopyMessage option to true, if a replyToDestinationSelectorName is set)"
argument_list|)
DECL|field|alwaysCopyMessage
specifier|private
name|boolean
name|alwaysCopyMessage
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages."
argument_list|)
DECL|field|useMessageIDAsCorrelationID
specifier|private
name|boolean
name|useMessageIDAsCorrelationID
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Provides an explicit ReplyTo destination, which overrides any incoming value of Message.getJMSReplyTo()."
argument_list|)
DECL|field|replyTo
specifier|private
name|String
name|replyTo
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"Sets the JMS Selector using the fixed name to be used so you can filter out your own replies"
operator|+
literal|" from the others when using a shared queue (that is, if you are not using a temporary reply queue)."
argument_list|)
DECL|field|replyToDestinationSelectorName
specifier|private
name|String
name|replyToDestinationSelectorName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Provides an explicit ReplyTo destination in the JMS message, which overrides the setting of replyTo."
operator|+
literal|" It is useful if you want to forward the message to a remote Queue and receive the reply message from the ReplyTo destination."
argument_list|)
DECL|field|replyToOverride
specifier|private
name|String
name|replyToOverride
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Whether a JMS consumer is allowed to send a reply message to the same destination that the consumer is using to"
operator|+
literal|" consume from. This prevents an endless loop by consuming and sending back the same message to itself."
argument_list|)
DECL|field|replyToSameDestinationAllowed
specifier|private
name|boolean
name|replyToSameDestinationAllowed
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"Bytes,Map,Object,Stream,Text"
argument_list|,
name|description
operator|=
literal|"Allows you to force the use of a specific javax.jms.Message implementation for sending JMS messages."
operator|+
literal|" Possible values are: Bytes, Map, Object, Stream, Text."
operator|+
literal|" By default, Camel would determine which JMS message type to use from the In body type. This option allows you to specify it."
argument_list|)
DECL|field|jmsMessageType
specifier|private
name|JmsMessageType
name|jmsMessageType
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|enums
operator|=
literal|"default,passthrough"
argument_list|,
name|javaType
operator|=
literal|"java.lang.String"
argument_list|,
name|description
operator|=
literal|"Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification."
operator|+
literal|" Camel provides two implementations out of the box: default and passthrough."
operator|+
literal|" The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is."
operator|+
literal|" Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters."
operator|+
literal|" You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy"
operator|+
literal|" and refer to it using the # notation."
argument_list|)
DECL|field|jmsKeyFormatStrategy
specifier|private
name|JmsKeyFormatStrategy
name|jmsKeyFormatStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"You can transfer the exchange over the wire instead of just the body and headers."
operator|+
literal|" The following fields are transferred: In body, Out body, Fault body, In headers, Out headers, Fault headers,"
operator|+
literal|" exchange properties, exchange exception."
operator|+
literal|" This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level."
operator|+
literal|" You must enable this option on both the producer and consumer side, so Camel knows the payloads is an Exchange and not a regular payload."
operator|+
literal|" Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level, "
operator|+
literal|" which forces a strong coupling between the producers and consumer having to use compatible Camel versions!"
argument_list|)
DECL|field|transferExchange
specifier|private
name|boolean
name|transferExchange
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Controls whether or not to include serialized headers."
operator|+
literal|" Applies only when {@code transferExchange} is {@code true}."
operator|+
literal|" This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level."
argument_list|)
DECL|field|allowSerializedHeaders
specifier|private
name|boolean
name|allowSerializedHeaders
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side,"
operator|+
literal|" then the caused Exception will be send back in response as a javax.jms.ObjectMessage."
operator|+
literal|" If the client is Camel, the returned Exception is rethrown. This allows you to use Camel JMS as a bridge"
operator|+
literal|" in your routing - for example, using persistent queues to enable robust routing."
operator|+
literal|" Notice that if you also have transferExchange enabled, this option takes precedence."
operator|+
literal|" The caught exception is required to be serializable."
operator|+
literal|" The original Exception on the consumer side can be wrapped in an outer exception"
operator|+
literal|" such as org.apache.camel.RuntimeCamelException when returned to the producer."
operator|+
literal|" Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level, "
operator|+
literal|" which forces a strong coupling between the producers and consumer!"
argument_list|)
DECL|field|transferException
specifier|private
name|boolean
name|transferException
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Specifies whether to test the connection on startup."
operator|+
literal|" This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker."
operator|+
literal|" If a connection cannot be granted then Camel throws an exception on startup."
operator|+
literal|" This ensures that Camel is not started with failed connections."
operator|+
literal|" The JMS producers is tested as well."
argument_list|)
DECL|field|testConnectionOnStartup
specifier|private
name|boolean
name|testConnectionOnStartup
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Whether to startup the JmsConsumer message listener asynchronously, when starting a route."
operator|+
literal|" For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying"
operator|+
literal|" and/or failover. This will cause Camel to block while starting routes. By setting this option to true,"
operator|+
literal|" you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread"
operator|+
literal|" in asynchronous mode. If this option is used, then beware that if the connection could not be established,"
operator|+
literal|" then an exception is logged at WARN level, and the consumer will not be able to receive messages;"
operator|+
literal|" You can then restart the route to retry."
argument_list|)
DECL|field|asyncStartListener
specifier|private
name|boolean
name|asyncStartListener
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Whether to stop the JmsConsumer message listener asynchronously, when stopping a route."
argument_list|)
DECL|field|asyncStopListener
specifier|private
name|boolean
name|asyncStopListener
decl_stmt|;
comment|// if the message is a JmsMessage and mapJmsMessage=false, force the
comment|// producer to send the javax.jms.Message body to the next JMS destination
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination"
operator|+
literal|" if you touch the headers (get or set) during the route. Set this option to true to force Camel to send"
operator|+
literal|" the original JMS message that was received."
argument_list|)
DECL|field|forceSendOriginalMessage
specifier|private
name|boolean
name|forceSendOriginalMessage
decl_stmt|;
comment|// to force disabling time to live (works in both in-only or in-out mode)
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"Use this option to force disabling time to live."
operator|+
literal|" For example when you do request/reply over JMS, then Camel will by default use the requestTimeout value"
operator|+
literal|" as time to live on the message being sent. The problem is that the sender and receiver systems have"
operator|+
literal|" to have their clocks synchronized, so they are in sync. This is not always so easy to archive."
operator|+
literal|" So you can use disableTimeToLive=true to not set a time to live value on the sent message."
operator|+
literal|" Then the message will not expire on the receiver system. See below in section About time to live for more details."
argument_list|)
DECL|field|disableTimeToLive
specifier|private
name|boolean
name|disableTimeToLive
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS."
operator|+
literal|" Possible values are: Temporary, Shared, or Exclusive."
operator|+
literal|" By default Camel will use temporary queues. However if replyTo has been configured, then Shared is used by default."
operator|+
literal|" This option allows you to use exclusive queues instead of shared ones."
operator|+
literal|" See Camel JMS documentation for more details, and especially the notes about the implications if running in a clustered environment,"
operator|+
literal|" and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive."
argument_list|)
DECL|field|replyToType
specifier|private
name|ReplyToType
name|replyToType
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Whether the JmsConsumer processes the Exchange asynchronously."
operator|+
literal|" If enabled then the JmsConsumer may pickup the next message from the JMS queue,"
operator|+
literal|" while the previous message is being processed asynchronously (by the Asynchronous Routing Engine)."
operator|+
literal|" This means that messages may be processed not 100% strictly in order. If disabled (as default)"
operator|+
literal|" then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue."
operator|+
literal|" Note if transacted has been enabled, then asyncConsumer=true does not run asynchronously, as transaction"
operator|+
literal|"  must be executed synchronously (Camel 3.0 may support async transactions)."
argument_list|)
DECL|field|asyncConsumer
specifier|private
name|boolean
name|asyncConsumer
decl_stmt|;
comment|// the cacheLevelName of reply manager
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|enums
operator|=
literal|"CACHE_AUTO,CACHE_CONNECTION,CACHE_CONSUMER,CACHE_NONE,CACHE_SESSION"
argument_list|,
name|description
operator|=
literal|"Sets the cache level by name for the reply consumer when doing request/reply over JMS."
operator|+
literal|" This option only applies when using fixed reply queues (not temporary)."
operator|+
literal|" Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName."
operator|+
literal|" And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere"
operator|+
literal|" may require to set the replyToCacheLevelName=CACHE_NONE to work."
operator|+
literal|" Note: If using temporary queues then CACHE_NONE is not allowed,"
operator|+
literal|" and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION."
argument_list|)
DECL|field|replyToCacheLevelName
specifier|private
name|String
name|replyToCacheLevelName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"Whether to allow sending messages with no body. If this option is false and the message body is null, then an JMSException is thrown."
argument_list|)
DECL|field|allowNullBody
specifier|private
name|boolean
name|allowNullBody
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Registry ID of the MessageListenerContainerFactory used to determine what"
operator|+
literal|" org.springframework.jms.listener.AbstractMessageListenerContainer to use to consume messages."
operator|+
literal|" Setting this will automatically set consumerType to Custom."
argument_list|)
DECL|field|messageListenerContainerFactory
specifier|private
name|MessageListenerContainerFactory
name|messageListenerContainerFactory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"Only applicable when sending to JMS destination using InOnly (eg fire and forget)."
operator|+
literal|" Enabling this option will enrich the Camel Exchange with the actual JMSMessageID"
operator|+
literal|" that was used by the JMS client when the message was sent to the JMS destination."
argument_list|)
DECL|field|includeSentJMSMessageID
specifier|private
name|boolean
name|includeSentJMSMessageID
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|,
name|description
operator|=
literal|"Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer,"
operator|+
literal|" for both consumer endpoints and the ReplyTo consumer of producer endpoints."
operator|+
literal|" Possible values: SimpleAsync (uses Spring's SimpleAsyncTaskExecutor) or ThreadPool"
operator|+
literal|" (uses Spring's ThreadPoolTaskExecutor with optimal values - cached threadpool-like)."
operator|+
literal|" If not set, it defaults to the previous behaviour, which uses a cached thread pool"
operator|+
literal|" for consumer endpoints and SimpleAsync for reply consumers."
operator|+
literal|" The use of ThreadPool is recommended to reduce thread trash in elastic configurations"
operator|+
literal|" with dynamically increasing and decreasing concurrent consumers."
argument_list|)
DECL|field|defaultTaskExecutorType
specifier|private
name|DefaultTaskExecutorType
name|defaultTaskExecutorType
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"Whether to include all JMSXxxx properties when mapping from JMS to Camel Message."
operator|+
literal|" Setting this to true will include properties such as JMSXAppID, and JMSXUserID etc."
operator|+
literal|" Note: If you are using a custom headerFilterStrategy then this option does not apply."
argument_list|)
DECL|field|includeAllJMSXProperties
specifier|private
name|boolean
name|includeAllJMSXProperties
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|description
operator|=
literal|"To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message."
argument_list|)
DECL|field|messageCreatedStrategy
specifier|private
name|MessageCreatedStrategy
name|messageCreatedStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"When using InOut exchange pattern use this JMS property instead of JMSCorrelationID"
operator|+
literal|" JMS property to correlate messages. If set messages will be correlated solely on the"
operator|+
literal|" value of this property JMSCorrelationID property will be ignored and not set by Camel."
argument_list|)
DECL|field|correlationProperty
specifier|private
name|String
name|correlationProperty
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"This option is used to allow additional headers which may have values that are invalid according to JMS specification."
operator|+
literal|" For example some message systems such as WMQ do this with header names using prefix JMS_IBM_MQMD_ containing values with byte array or other invalid types."
operator|+
literal|" You can specify multiple header names separated by comma, and use * as suffix for wildcard matching."
argument_list|)
DECL|field|allowAdditionalHeaders
specifier|private
name|String
name|allowAdditionalHeaders
decl_stmt|;
comment|// JMS 2.0 API
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Set the name of a subscription to create. To be applied in case"
operator|+
literal|" of a topic (pub-sub domain) with a shared or durable subscription."
operator|+
literal|" The subscription name needs to be unique within this client's"
operator|+
literal|" JMS client id. Default is the class name of the specified message listener."
operator|+
literal|" Note: Only 1 concurrent consumer (which is the default of this"
operator|+
literal|" message listener container) is allowed for each subscription,"
operator|+
literal|" except for a shared subscription (which requires JMS 2.0)."
argument_list|)
DECL|field|subscriptionName
specifier|private
name|String
name|subscriptionName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Set whether to make the subscription durable. The durable subscription name"
operator|+
literal|" to be used can be specified through the subscriptionName property."
operator|+
literal|" Default is false. Set this to true to register a durable subscription,"
operator|+
literal|" typically in combination with a subscriptionName value (unless"
operator|+
literal|" your message listener class name is good enough as subscription name)."
operator|+
literal|" Only makes sense when listening to a topic (pub-sub domain),"
operator|+
literal|" therefore this method switches the pubSubDomain flag as well."
argument_list|)
DECL|field|subscriptionDurable
specifier|private
name|boolean
name|subscriptionDurable
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|description
operator|=
literal|"Set whether to make the subscription shared. The shared subscription name"
operator|+
literal|" to be used can be specified through the subscriptionName property."
operator|+
literal|" Default is false. Set this to true to register a shared subscription,"
operator|+
literal|" typically in combination with a subscriptionName value (unless"
operator|+
literal|" your message listener class name is good enough as subscription name)."
operator|+
literal|" Note that shared subscriptions may also be durable, so this flag can"
operator|+
literal|" (and often will) be combined with subscriptionDurable as well."
operator|+
literal|" Only makes sense when listening to a topic (pub-sub domain),"
operator|+
literal|" therefore this method switches the pubSubDomain flag as well."
operator|+
literal|" Requires a JMS 2.0 compatible message broker."
argument_list|)
DECL|field|subscriptionShared
specifier|private
name|boolean
name|subscriptionShared
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|description
operator|=
literal|"Sets whether StreamMessage type is enabled or not."
operator|+
literal|" Message payloads of streaming kind such as files, InputStream, etc will either by sent as BytesMessage or StreamMessage."
operator|+
literal|" This option controls which kind will be used. By default BytesMessage is used which enforces the entire message payload to be read into memory."
operator|+
literal|" By enabling this option the message payload is read into memory in chunks and each chunk is then written to the StreamMessage until no more data."
argument_list|)
DECL|field|streamMessageTypeEnabled
specifier|private
name|boolean
name|streamMessageTypeEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|description
operator|=
literal|"Sets whether JMS date properties should be formatted according to the ISO 8601 standard."
argument_list|)
DECL|field|formatDateHeadersToIso8601
specifier|private
name|boolean
name|formatDateHeadersToIso8601
decl_stmt|;
DECL|method|JmsConfiguration ()
specifier|public
name|JmsConfiguration
parameter_list|()
block|{     }
DECL|method|JmsConfiguration (ConnectionFactory connectionFactory)
specifier|public
name|JmsConfiguration
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
comment|/**      * Returns a copy of this configuration      */
DECL|method|copy ()
specifier|public
name|JmsConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|JmsConfiguration
operator|)
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|CamelJmsTemplate
specifier|public
specifier|static
class|class
name|CamelJmsTemplate
extends|extends
name|JmsTemplate
block|{
DECL|field|config
specifier|private
name|JmsConfiguration
name|config
decl_stmt|;
DECL|method|CamelJmsTemplate (JmsConfiguration config, ConnectionFactory connectionFactory)
specifier|public
name|CamelJmsTemplate
parameter_list|(
name|JmsConfiguration
name|config
parameter_list|,
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|super
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|send (final String destinationName, final MessageCreator messageCreator, final MessageSentCallback callback)
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|String
name|destinationName
parameter_list|,
specifier|final
name|MessageCreator
name|messageCreator
parameter_list|,
specifier|final
name|MessageSentCallback
name|callback
parameter_list|)
throws|throws
name|JmsException
block|{
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|Destination
name|destination
init|=
name|resolveDestinationName
argument_list|(
name|session
argument_list|,
name|destinationName
argument_list|)
decl_stmt|;
return|return
name|doSendToDestination
argument_list|(
name|destination
argument_list|,
name|messageCreator
argument_list|,
name|callback
argument_list|,
name|session
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|send (final Destination destination, final MessageCreator messageCreator, final MessageSentCallback callback)
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|Destination
name|destination
parameter_list|,
specifier|final
name|MessageCreator
name|messageCreator
parameter_list|,
specifier|final
name|MessageSentCallback
name|callback
parameter_list|)
throws|throws
name|JmsException
block|{
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|doSendToDestination
argument_list|(
name|destination
argument_list|,
name|messageCreator
argument_list|,
name|callback
argument_list|,
name|session
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|send (final String destinationName, final MessageCreator messageCreator)
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|String
name|destinationName
parameter_list|,
specifier|final
name|MessageCreator
name|messageCreator
parameter_list|)
throws|throws
name|JmsException
block|{
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|Destination
name|destination
init|=
name|resolveDestinationName
argument_list|(
name|session
argument_list|,
name|destinationName
argument_list|)
decl_stmt|;
return|return
name|doSendToDestination
argument_list|(
name|destination
argument_list|,
name|messageCreator
argument_list|,
literal|null
argument_list|,
name|session
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|send (final Destination destination, final MessageCreator messageCreator)
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|Destination
name|destination
parameter_list|,
specifier|final
name|MessageCreator
name|messageCreator
parameter_list|)
throws|throws
name|JmsException
block|{
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|doSendToDestination
argument_list|(
name|destination
argument_list|,
name|messageCreator
argument_list|,
literal|null
argument_list|,
name|session
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|doSendToDestination (final Destination destination, final MessageCreator messageCreator, final MessageSentCallback callback, final Session session)
specifier|private
name|Object
name|doSendToDestination
parameter_list|(
specifier|final
name|Destination
name|destination
parameter_list|,
specifier|final
name|MessageCreator
name|messageCreator
parameter_list|,
specifier|final
name|MessageSentCallback
name|callback
parameter_list|,
specifier|final
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|messageCreator
argument_list|,
literal|"MessageCreator must not be null"
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|createProducer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|Message
name|message
decl_stmt|;
try|try
block|{
name|message
operator|=
name|messageCreator
operator|.
name|createMessage
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|doSend
argument_list|(
name|producer
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|sent
argument_list|(
name|session
argument_list|,
name|message
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
comment|// Check commit - avoid commit call within a JTA transaction.
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
operator|&&
name|isSessionLocallyTransacted
argument_list|(
name|session
argument_list|)
condition|)
block|{
comment|// Transacted session created by this template -> commit.
name|JmsUtils
operator|.
name|commitIfNecessary
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|JmsUtils
operator|.
name|closeMessageProducer
argument_list|(
name|producer
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**          * Override so we can support preserving the Qos settings that have          * been set on the message.          */
annotation|@
name|Override
DECL|method|doSend (MessageProducer producer, Message message)
specifier|protected
name|void
name|doSend
parameter_list|(
name|MessageProducer
name|producer
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|config
operator|.
name|isPreserveMessageQos
argument_list|()
condition|)
block|{
name|long
name|ttl
init|=
name|message
operator|.
name|getJMSExpiration
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttl
operator|!=
literal|0
condition|)
block|{
name|ttl
operator|=
name|ttl
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Message had expired.. so set the ttl as small as possible
if|if
condition|(
name|ttl
operator|<=
literal|0
condition|)
block|{
name|ttl
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|int
name|priority
init|=
name|message
operator|.
name|getJMSPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|priority
argument_list|<
literal|0
operator|||
name|priority
argument_list|>
literal|9
condition|)
block|{
comment|// use priority from endpoint if not provided on message with a valid range
name|priority
operator|=
name|this
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
comment|// if a delivery mode was set as a JMS header then we have used a temporary
comment|// property to store it - CamelJMSDeliveryMode. Otherwise we could not keep
comment|// track whether it was set or not as getJMSDeliveryMode() will default return 1 regardless
comment|// if it was set or not, so we can never tell if end user provided it in a header
name|int
name|deliveryMode
decl_stmt|;
if|if
condition|(
name|JmsMessageHelper
operator|.
name|hasProperty
argument_list|(
name|message
argument_list|,
name|JmsConstants
operator|.
name|JMS_DELIVERY_MODE
argument_list|)
condition|)
block|{
name|deliveryMode
operator|=
name|message
operator|.
name|getIntProperty
argument_list|(
name|JmsConstants
operator|.
name|JMS_DELIVERY_MODE
argument_list|)
expr_stmt|;
comment|// remove the temporary property
name|JmsMessageHelper
operator|.
name|removeJmsProperty
argument_list|(
name|message
argument_list|,
name|JmsConstants
operator|.
name|JMS_DELIVERY_MODE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use the existing delivery mode from the message
name|deliveryMode
operator|=
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
expr_stmt|;
block|}
comment|// need to log just before so the message is 100% correct when logged
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending JMS message to: {} with message: {}"
argument_list|,
name|producer
operator|.
name|getDestination
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|deliveryMode
argument_list|,
name|priority
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// need to log just before so the message is 100% correct when logged
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending JMS message to: {} with message: {}"
argument_list|,
name|producer
operator|.
name|getDestination
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doSend
argument_list|(
name|producer
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sent JMS message to: {} with message: {}"
argument_list|,
name|producer
operator|.
name|getDestination
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Creates a {@link JmsOperations} object used for request/response using a request timeout value      */
DECL|method|createInOutTemplate (JmsEndpoint endpoint, boolean pubSubDomain, String destination, long requestTimeout)
specifier|public
name|JmsOperations
name|createInOutTemplate
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|,
name|String
name|destination
parameter_list|,
name|long
name|requestTimeout
parameter_list|)
block|{
name|JmsOperations
name|answer
init|=
name|createInOnlyTemplate
argument_list|(
name|endpoint
argument_list|,
name|pubSubDomain
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|instanceof
name|JmsTemplate
operator|&&
name|requestTimeout
operator|>
literal|0
condition|)
block|{
name|JmsTemplate
name|jmsTemplate
init|=
operator|(
name|JmsTemplate
operator|)
name|answer
decl_stmt|;
name|jmsTemplate
operator|.
name|setExplicitQosEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// prefer to use timeToLive over requestTimeout if both specified
name|long
name|ttl
init|=
name|timeToLive
operator|>
literal|0
condition|?
name|timeToLive
else|:
name|requestTimeout
decl_stmt|;
if|if
condition|(
name|ttl
operator|>
literal|0
operator|&&
operator|!
name|isDisableTimeToLive
argument_list|()
condition|)
block|{
comment|// only use TTL if not disabled
name|jmsTemplate
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acknowledgementMode
operator|>=
literal|0
condition|)
block|{
name|jmsTemplate
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|acknowledgementMode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|acknowledgementModeName
operator|!=
literal|null
condition|)
block|{
name|jmsTemplate
operator|.
name|setSessionAcknowledgeModeName
argument_list|(
name|acknowledgementModeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// default to AUTO
name|jmsTemplate
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Creates a {@link JmsOperations} object used for one way messaging      */
DECL|method|createInOnlyTemplate (JmsEndpoint endpoint, boolean pubSubDomain, String destination)
specifier|public
name|JmsOperations
name|createInOnlyTemplate
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
if|if
condition|(
name|jmsOperations
operator|!=
literal|null
condition|)
block|{
return|return
name|jmsOperations
return|;
block|}
name|ConnectionFactory
name|factory
init|=
name|getTemplateConnectionFactory
argument_list|()
decl_stmt|;
name|JmsTemplate
name|template
init|=
operator|new
name|CamelJmsTemplate
argument_list|(
name|this
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|template
operator|.
name|setPubSubDomain
argument_list|(
name|pubSubDomain
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinationResolver
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setDestinationResolver
argument_list|(
name|destinationResolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|DestinationEndpoint
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"You are overloading the destinationResolver property on a DestinationEndpoint; are you sure you want to do that?"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|instanceof
name|DestinationEndpoint
condition|)
block|{
name|DestinationEndpoint
name|destinationEndpoint
init|=
operator|(
name|DestinationEndpoint
operator|)
name|endpoint
decl_stmt|;
name|template
operator|.
name|setDestinationResolver
argument_list|(
name|createDestinationResolver
argument_list|(
name|destinationEndpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setDefaultDestinationName
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|template
operator|.
name|setExplicitQosEnabled
argument_list|(
name|isExplicitQosEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// have to use one or the other.. doesn't make sense to use both
if|if
condition|(
name|deliveryMode
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|setDeliveryPersistent
argument_list|(
name|deliveryPersistent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageConverter
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setMessageConverter
argument_list|(
name|messageConverter
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setMessageIdEnabled
argument_list|(
name|messageIdEnabled
argument_list|)
expr_stmt|;
name|template
operator|.
name|setMessageTimestampEnabled
argument_list|(
name|messageTimestampEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|priority
operator|>=
literal|0
condition|)
block|{
name|template
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setPubSubNoLocal
argument_list|(
name|pubSubNoLocal
argument_list|)
expr_stmt|;
comment|// only set TTL if we have a positive value and it has not been disabled
if|if
condition|(
name|timeToLive
operator|>=
literal|0
operator|&&
operator|!
name|isDisableTimeToLive
argument_list|()
condition|)
block|{
name|template
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setSessionTransacted
argument_list|(
name|transacted
argument_list|)
expr_stmt|;
if|if
condition|(
name|transacted
condition|)
block|{
name|template
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is here for completeness, but the template should not get
comment|// used for receiving messages.
if|if
condition|(
name|acknowledgementMode
operator|>=
literal|0
condition|)
block|{
name|template
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|acknowledgementMode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|acknowledgementModeName
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setSessionAcknowledgeModeName
argument_list|(
name|acknowledgementModeName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|template
return|;
block|}
DECL|method|createMessageListenerContainer (JmsEndpoint endpoint)
specifier|public
name|AbstractMessageListenerContainer
name|createMessageListenerContainer
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|AbstractMessageListenerContainer
name|container
init|=
name|chooseMessageListenerContainerImplementation
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|configureMessageListenerContainer
argument_list|(
name|container
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|chooseMessageListenerContainerImplementation (JmsEndpoint endpoint)
specifier|public
name|AbstractMessageListenerContainer
name|chooseMessageListenerContainerImplementation
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
switch|switch
condition|(
name|consumerType
condition|)
block|{
case|case
name|Simple
case|:
return|return
operator|new
name|SimpleJmsMessageListenerContainer
argument_list|(
name|endpoint
argument_list|)
return|;
case|case
name|Default
case|:
return|return
operator|new
name|DefaultJmsMessageListenerContainer
argument_list|(
name|endpoint
argument_list|)
return|;
case|case
name|Custom
case|:
return|return
name|getCustomMessageListenerContainer
argument_list|(
name|endpoint
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown consumer type: "
operator|+
name|consumerType
argument_list|)
throw|;
block|}
block|}
DECL|method|getCustomMessageListenerContainer (JmsEndpoint endpoint)
specifier|private
name|AbstractMessageListenerContainer
name|getCustomMessageListenerContainer
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|messageListenerContainerFactory
operator|!=
literal|null
condition|)
block|{
return|return
name|messageListenerContainerFactory
operator|.
name|createMessageListenerContainer
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getConsumerType ()
specifier|public
name|ConsumerType
name|getConsumerType
parameter_list|()
block|{
return|return
name|consumerType
return|;
block|}
comment|/**      * The consumer type to use, which can be one of: Simple, Default, or Custom.      * The consumer type determines which Spring JMS listener to use. Default will use org.springframework.jms.listener.DefaultMessageListenerContainer,      * Simple will use org.springframework.jms.listener.SimpleMessageListenerContainer.      * When Custom is specified, the MessageListenerContainerFactory defined by the messageListenerContainerFactory option      * will determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use.      */
DECL|method|setConsumerType (ConsumerType consumerType)
specifier|public
name|void
name|setConsumerType
parameter_list|(
name|ConsumerType
name|consumerType
parameter_list|)
block|{
name|this
operator|.
name|consumerType
operator|=
name|consumerType
expr_stmt|;
block|}
DECL|method|getConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
return|;
block|}
DECL|method|getOrCreateConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getOrCreateConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|connectionFactory
operator|==
literal|null
condition|)
block|{
name|connectionFactory
operator|=
name|createConnectionFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|connectionFactory
return|;
block|}
comment|/**      * Sets the default connection factory to be used if a connection factory is      * not specified for either      * {@link #setTemplateConnectionFactory(ConnectionFactory)} or      * {@link #setListenerConnectionFactory(ConnectionFactory)}      */
DECL|method|setConnectionFactory (ConnectionFactory connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/**      * Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.      */
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getListenerConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getListenerConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|listenerConnectionFactory
operator|==
literal|null
condition|)
block|{
name|listenerConnectionFactory
operator|=
name|createListenerConnectionFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|listenerConnectionFactory
return|;
block|}
comment|/**      * Sets the connection factory to be used for consuming messages      */
DECL|method|setListenerConnectionFactory (ConnectionFactory listenerConnectionFactory)
specifier|public
name|void
name|setListenerConnectionFactory
parameter_list|(
name|ConnectionFactory
name|listenerConnectionFactory
parameter_list|)
block|{
name|this
operator|.
name|listenerConnectionFactory
operator|=
name|listenerConnectionFactory
expr_stmt|;
block|}
DECL|method|getTemplateConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getTemplateConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|templateConnectionFactory
operator|==
literal|null
condition|)
block|{
name|templateConnectionFactory
operator|=
name|createTemplateConnectionFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|templateConnectionFactory
return|;
block|}
comment|/**      * Sets the connection factory to be used for sending messages via the      * {@link JmsTemplate} via {@link #createInOnlyTemplate(JmsEndpoint, boolean, String)}      */
DECL|method|setTemplateConnectionFactory (ConnectionFactory templateConnectionFactory)
specifier|public
name|void
name|setTemplateConnectionFactory
parameter_list|(
name|ConnectionFactory
name|templateConnectionFactory
parameter_list|)
block|{
name|this
operator|.
name|templateConnectionFactory
operator|=
name|templateConnectionFactory
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
comment|/**      * Specifies whether the consumer container should auto-startup.      */
DECL|method|setAutoStartup (boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|isAcceptMessagesWhileStopping ()
specifier|public
name|boolean
name|isAcceptMessagesWhileStopping
parameter_list|()
block|{
return|return
name|acceptMessagesWhileStopping
return|;
block|}
comment|/**      * Specifies whether the consumer accept messages while it is stopping.      * You may consider enabling this option, if you start and stop JMS routes at runtime, while there are still messages      * enqueued on the queue. If this option is false, and you stop the JMS route, then messages may be rejected,      * and the JMS broker would have to attempt redeliveries, which yet again may be rejected, and eventually the message      * may be moved at a dead letter queue on the JMS broker. To avoid this its recommended to enable this option.      */
DECL|method|setAcceptMessagesWhileStopping (boolean acceptMessagesWhileStopping)
specifier|public
name|void
name|setAcceptMessagesWhileStopping
parameter_list|(
name|boolean
name|acceptMessagesWhileStopping
parameter_list|)
block|{
name|this
operator|.
name|acceptMessagesWhileStopping
operator|=
name|acceptMessagesWhileStopping
expr_stmt|;
block|}
comment|/**      * Whether the {@link DefaultMessageListenerContainer} used in the reply managers for request-reply messaging allow       * the {@link DefaultMessageListenerContainer#runningAllowed()} flag to quick stop in case {@link JmsConfiguration#isAcceptMessagesWhileStopping()}      * is enabled, and {@link org.apache.camel.CamelContext} is currently being stopped. This quick stop ability is enabled by      * default in the regular JMS consumers but to enable for reply managers you must enable this flag.      */
DECL|method|isAllowReplyManagerQuickStop ()
specifier|public
name|boolean
name|isAllowReplyManagerQuickStop
parameter_list|()
block|{
return|return
name|allowReplyManagerQuickStop
return|;
block|}
DECL|method|setAllowReplyManagerQuickStop (boolean allowReplyManagerQuickStop)
specifier|public
name|void
name|setAllowReplyManagerQuickStop
parameter_list|(
name|boolean
name|allowReplyManagerQuickStop
parameter_list|)
block|{
name|this
operator|.
name|allowReplyManagerQuickStop
operator|=
name|allowReplyManagerQuickStop
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
comment|/**      * Sets the JMS client ID to use. Note that this value, if specified, must be unique and can only be used by a single JMS connection instance.      * It is typically only required for durable topic subscriptions.      *<p>      * If using Apache ActiveMQ you may prefer to use Virtual Topics instead.      */
DECL|method|setClientId (String consumerClientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|consumerClientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|consumerClientId
expr_stmt|;
block|}
DECL|method|getDurableSubscriptionName ()
specifier|public
name|String
name|getDurableSubscriptionName
parameter_list|()
block|{
return|return
name|durableSubscriptionName
return|;
block|}
comment|/**      * The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well.      */
DECL|method|setDurableSubscriptionName (String durableSubscriptionName)
specifier|public
name|void
name|setDurableSubscriptionName
parameter_list|(
name|String
name|durableSubscriptionName
parameter_list|)
block|{
name|this
operator|.
name|durableSubscriptionName
operator|=
name|durableSubscriptionName
expr_stmt|;
block|}
DECL|method|getExceptionListener ()
specifier|public
name|ExceptionListener
name|getExceptionListener
parameter_list|()
block|{
return|return
name|exceptionListener
return|;
block|}
comment|/**      * Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions.      */
DECL|method|setExceptionListener (ExceptionListener exceptionListener)
specifier|public
name|void
name|setExceptionListener
parameter_list|(
name|ExceptionListener
name|exceptionListener
parameter_list|)
block|{
name|this
operator|.
name|exceptionListener
operator|=
name|exceptionListener
expr_stmt|;
block|}
comment|/**      * Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message.      * By default these exceptions will be logged at the WARN level, if no errorHandler has been configured.      * You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options.      * This makes it much easier to configure, than having to code a custom errorHandler.      */
DECL|method|setErrorHandler (ErrorHandler errorHandler)
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
DECL|method|getErrorHandler ()
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
DECL|method|getErrorHandlerLoggingLevel ()
specifier|public
name|LoggingLevel
name|getErrorHandlerLoggingLevel
parameter_list|()
block|{
return|return
name|errorHandlerLoggingLevel
return|;
block|}
comment|/**      * Allows to configure the default errorHandler logging level for logging uncaught exceptions.      */
DECL|method|setErrorHandlerLoggingLevel (LoggingLevel errorHandlerLoggingLevel)
specifier|public
name|void
name|setErrorHandlerLoggingLevel
parameter_list|(
name|LoggingLevel
name|errorHandlerLoggingLevel
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerLoggingLevel
operator|=
name|errorHandlerLoggingLevel
expr_stmt|;
block|}
DECL|method|isErrorHandlerLogStackTrace ()
specifier|public
name|boolean
name|isErrorHandlerLogStackTrace
parameter_list|()
block|{
return|return
name|errorHandlerLogStackTrace
return|;
block|}
comment|/**      * Allows to control whether stacktraces should be logged or not, by the default errorHandler.      */
DECL|method|setErrorHandlerLogStackTrace (boolean errorHandlerLogStackTrace)
specifier|public
name|void
name|setErrorHandlerLogStackTrace
parameter_list|(
name|boolean
name|errorHandlerLogStackTrace
parameter_list|)
block|{
name|this
operator|.
name|errorHandlerLogStackTrace
operator|=
name|errorHandlerLogStackTrace
expr_stmt|;
block|}
DECL|method|getAcknowledgementModeName ()
specifier|public
name|String
name|getAcknowledgementModeName
parameter_list|()
block|{
return|return
name|acknowledgementModeName
return|;
block|}
comment|/**      * The JMS acknowledgement name, which is one of: SESSION_TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE      */
DECL|method|setAcknowledgementModeName (String consumerAcknowledgementMode)
specifier|public
name|void
name|setAcknowledgementModeName
parameter_list|(
name|String
name|consumerAcknowledgementMode
parameter_list|)
block|{
name|this
operator|.
name|acknowledgementModeName
operator|=
name|consumerAcknowledgementMode
expr_stmt|;
name|this
operator|.
name|acknowledgementMode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|isExposeListenerSession ()
specifier|public
name|boolean
name|isExposeListenerSession
parameter_list|()
block|{
return|return
name|exposeListenerSession
return|;
block|}
comment|/**      * Specifies whether the listener session should be exposed when consuming messages.      */
DECL|method|setExposeListenerSession (boolean exposeListenerSession)
specifier|public
name|void
name|setExposeListenerSession
parameter_list|(
name|boolean
name|exposeListenerSession
parameter_list|)
block|{
name|this
operator|.
name|exposeListenerSession
operator|=
name|exposeListenerSession
expr_stmt|;
block|}
DECL|method|getTaskExecutor ()
specifier|public
name|TaskExecutor
name|getTaskExecutor
parameter_list|()
block|{
return|return
name|taskExecutor
return|;
block|}
comment|/**      * Allows you to specify a custom task executor for consuming messages.      */
DECL|method|setTaskExecutor (TaskExecutor taskExecutor)
specifier|public
name|void
name|setTaskExecutor
parameter_list|(
name|TaskExecutor
name|taskExecutor
parameter_list|)
block|{
name|this
operator|.
name|taskExecutor
operator|=
name|taskExecutor
expr_stmt|;
block|}
DECL|method|isPubSubNoLocal ()
specifier|public
name|boolean
name|isPubSubNoLocal
parameter_list|()
block|{
return|return
name|pubSubNoLocal
return|;
block|}
comment|/**      * Specifies whether to inhibit the delivery of messages published by its own connection.      */
DECL|method|setPubSubNoLocal (boolean pubSubNoLocal)
specifier|public
name|void
name|setPubSubNoLocal
parameter_list|(
name|boolean
name|pubSubNoLocal
parameter_list|)
block|{
name|this
operator|.
name|pubSubNoLocal
operator|=
name|pubSubNoLocal
expr_stmt|;
block|}
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
comment|/**      * Specifies the default number of concurrent consumers when consuming from JMS (not for request/reply over JMS).      * See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.      *<p>      * When doing request/reply over JMS then the option replyToConcurrentConsumers is used to control number      * of concurrent consumers on the reply message listener.      */
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|getReplyToConcurrentConsumers ()
specifier|public
name|int
name|getReplyToConcurrentConsumers
parameter_list|()
block|{
return|return
name|replyToConcurrentConsumers
return|;
block|}
comment|/**      * Specifies the default number of concurrent consumers when doing request/reply over JMS.      * See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.      */
DECL|method|setReplyToConcurrentConsumers (int replyToConcurrentConsumers)
specifier|public
name|void
name|setReplyToConcurrentConsumers
parameter_list|(
name|int
name|replyToConcurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|replyToConcurrentConsumers
operator|=
name|replyToConcurrentConsumers
expr_stmt|;
block|}
DECL|method|getMaxMessagesPerTask ()
specifier|public
name|int
name|getMaxMessagesPerTask
parameter_list|()
block|{
return|return
name|maxMessagesPerTask
return|;
block|}
comment|/**      * The number of messages per task. -1 is unlimited.      * If you use a range for concurrent consumers (eg min< max), then this option can be used to set      * a value to eg 100 to control how fast the consumers will shrink when less work is required.      */
DECL|method|setMaxMessagesPerTask (int maxMessagesPerTask)
specifier|public
name|void
name|setMaxMessagesPerTask
parameter_list|(
name|int
name|maxMessagesPerTask
parameter_list|)
block|{
name|this
operator|.
name|maxMessagesPerTask
operator|=
name|maxMessagesPerTask
expr_stmt|;
block|}
DECL|method|getCacheLevel ()
specifier|public
name|int
name|getCacheLevel
parameter_list|()
block|{
return|return
name|cacheLevel
return|;
block|}
comment|/**      * Sets the cache level by ID for the underlying JMS resources. See cacheLevelName option for more details.      */
DECL|method|setCacheLevel (int cacheLevel)
specifier|public
name|void
name|setCacheLevel
parameter_list|(
name|int
name|cacheLevel
parameter_list|)
block|{
name|this
operator|.
name|cacheLevel
operator|=
name|cacheLevel
expr_stmt|;
block|}
DECL|method|getCacheLevelName ()
specifier|public
name|String
name|getCacheLevelName
parameter_list|()
block|{
return|return
name|cacheLevelName
return|;
block|}
comment|/**      * Sets the cache level by name for the underlying JMS resources.      * Possible values are: CACHE_AUTO, CACHE_CONNECTION, CACHE_CONSUMER, CACHE_NONE, and CACHE_SESSION.      * The default setting is CACHE_AUTO. See the Spring documentation and Transactions Cache Levels for more information.      */
DECL|method|setCacheLevelName (String cacheName)
specifier|public
name|void
name|setCacheLevelName
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
name|this
operator|.
name|cacheLevelName
operator|=
name|cacheName
expr_stmt|;
block|}
DECL|method|getRecoveryInterval ()
specifier|public
name|long
name|getRecoveryInterval
parameter_list|()
block|{
return|return
name|recoveryInterval
return|;
block|}
comment|/**      * Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds.      * The default is 5000 ms, that is, 5 seconds.      */
DECL|method|setRecoveryInterval (long recoveryInterval)
specifier|public
name|void
name|setRecoveryInterval
parameter_list|(
name|long
name|recoveryInterval
parameter_list|)
block|{
name|this
operator|.
name|recoveryInterval
operator|=
name|recoveryInterval
expr_stmt|;
block|}
DECL|method|getReceiveTimeout ()
specifier|public
name|long
name|getReceiveTimeout
parameter_list|()
block|{
return|return
name|receiveTimeout
return|;
block|}
comment|/**      * The timeout for receiving messages (in milliseconds).      */
DECL|method|setReceiveTimeout (long receiveTimeout)
specifier|public
name|void
name|setReceiveTimeout
parameter_list|(
name|long
name|receiveTimeout
parameter_list|)
block|{
name|this
operator|.
name|receiveTimeout
operator|=
name|receiveTimeout
expr_stmt|;
block|}
DECL|method|getTransactionManager ()
specifier|public
name|PlatformTransactionManager
name|getTransactionManager
parameter_list|()
block|{
if|if
condition|(
name|transactionManager
operator|==
literal|null
operator|&&
name|isTransacted
argument_list|()
operator|&&
name|isLazyCreateTransactionManager
argument_list|()
condition|)
block|{
name|transactionManager
operator|=
name|createTransactionManager
argument_list|()
expr_stmt|;
block|}
return|return
name|transactionManager
return|;
block|}
comment|/**      * The Spring transaction manager to use.      */
DECL|method|setTransactionManager (PlatformTransactionManager transactionManager)
specifier|public
name|void
name|setTransactionManager
parameter_list|(
name|PlatformTransactionManager
name|transactionManager
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
block|}
DECL|method|getTransactionName ()
specifier|public
name|String
name|getTransactionName
parameter_list|()
block|{
return|return
name|transactionName
return|;
block|}
comment|/**      * The name of the transaction to use.      */
DECL|method|setTransactionName (String transactionName)
specifier|public
name|void
name|setTransactionName
parameter_list|(
name|String
name|transactionName
parameter_list|)
block|{
name|this
operator|.
name|transactionName
operator|=
name|transactionName
expr_stmt|;
block|}
DECL|method|getTransactionTimeout ()
specifier|public
name|int
name|getTransactionTimeout
parameter_list|()
block|{
return|return
name|transactionTimeout
return|;
block|}
comment|/**      * The timeout value of the transaction (in seconds), if using transacted mode.      */
DECL|method|setTransactionTimeout (int transactionTimeout)
specifier|public
name|void
name|setTransactionTimeout
parameter_list|(
name|int
name|transactionTimeout
parameter_list|)
block|{
name|this
operator|.
name|transactionTimeout
operator|=
name|transactionTimeout
expr_stmt|;
block|}
DECL|method|getIdleTaskExecutionLimit ()
specifier|public
name|int
name|getIdleTaskExecutionLimit
parameter_list|()
block|{
return|return
name|idleTaskExecutionLimit
return|;
block|}
comment|/**      * Specifies the limit for idle executions of a receive task, not having received any message within its execution.      * If this limit is reached, the task will shut down and leave receiving to other executing tasks      * (in the case of dynamic scheduling; see the maxConcurrentConsumers setting).      * There is additional doc available from Spring.      */
DECL|method|setIdleTaskExecutionLimit (int idleTaskExecutionLimit)
specifier|public
name|void
name|setIdleTaskExecutionLimit
parameter_list|(
name|int
name|idleTaskExecutionLimit
parameter_list|)
block|{
name|this
operator|.
name|idleTaskExecutionLimit
operator|=
name|idleTaskExecutionLimit
expr_stmt|;
block|}
DECL|method|getIdleConsumerLimit ()
specifier|public
name|int
name|getIdleConsumerLimit
parameter_list|()
block|{
return|return
name|idleConsumerLimit
return|;
block|}
comment|/**      * Specify the limit for the number of consumers that are allowed to be idle at any given time.      */
DECL|method|setIdleConsumerLimit (int idleConsumerLimit)
specifier|public
name|void
name|setIdleConsumerLimit
parameter_list|(
name|int
name|idleConsumerLimit
parameter_list|)
block|{
name|this
operator|.
name|idleConsumerLimit
operator|=
name|idleConsumerLimit
expr_stmt|;
block|}
DECL|method|getWaitForProvisionCorrelationToBeUpdatedCounter ()
specifier|public
name|int
name|getWaitForProvisionCorrelationToBeUpdatedCounter
parameter_list|()
block|{
return|return
name|waitForProvisionCorrelationToBeUpdatedCounter
return|;
block|}
comment|/**      * Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS      * and when the option useMessageIDAsCorrelationID is enabled.      */
DECL|method|setWaitForProvisionCorrelationToBeUpdatedCounter (int counter)
specifier|public
name|void
name|setWaitForProvisionCorrelationToBeUpdatedCounter
parameter_list|(
name|int
name|counter
parameter_list|)
block|{
name|this
operator|.
name|waitForProvisionCorrelationToBeUpdatedCounter
operator|=
name|counter
expr_stmt|;
block|}
DECL|method|getWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime ()
specifier|public
name|long
name|getWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime
parameter_list|()
block|{
return|return
name|waitForProvisionCorrelationToBeUpdatedThreadSleepingTime
return|;
block|}
comment|/**      * Interval in millis to sleep each time while waiting for provisional correlation id to be updated.      */
DECL|method|setWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime (long sleepingTime)
specifier|public
name|void
name|setWaitForProvisionCorrelationToBeUpdatedThreadSleepingTime
parameter_list|(
name|long
name|sleepingTime
parameter_list|)
block|{
name|this
operator|.
name|waitForProvisionCorrelationToBeUpdatedThreadSleepingTime
operator|=
name|sleepingTime
expr_stmt|;
block|}
DECL|method|getMaxConcurrentConsumers ()
specifier|public
name|int
name|getMaxConcurrentConsumers
parameter_list|()
block|{
return|return
name|maxConcurrentConsumers
return|;
block|}
comment|/**      * Specifies the maximum number of concurrent consumers when consuming from JMS (not for request/reply over JMS).      * See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.      *<p>      * When doing request/reply over JMS then the option replyToMaxConcurrentConsumers is used to control number      * of concurrent consumers on the reply message listener.      */
DECL|method|setMaxConcurrentConsumers (int maxConcurrentConsumers)
specifier|public
name|void
name|setMaxConcurrentConsumers
parameter_list|(
name|int
name|maxConcurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|maxConcurrentConsumers
operator|=
name|maxConcurrentConsumers
expr_stmt|;
block|}
DECL|method|getReplyToMaxConcurrentConsumers ()
specifier|public
name|int
name|getReplyToMaxConcurrentConsumers
parameter_list|()
block|{
return|return
name|replyToMaxConcurrentConsumers
return|;
block|}
comment|/**      * Specifies the maximum number of concurrent consumers when using request/reply over JMS.      * See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.      */
DECL|method|setReplyToMaxConcurrentConsumers (int replyToMaxConcurrentConsumers)
specifier|public
name|void
name|setReplyToMaxConcurrentConsumers
parameter_list|(
name|int
name|replyToMaxConcurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|replyToMaxConcurrentConsumers
operator|=
name|replyToMaxConcurrentConsumers
expr_stmt|;
block|}
DECL|method|getReplyToOnTimeoutMaxConcurrentConsumers ()
specifier|public
name|int
name|getReplyToOnTimeoutMaxConcurrentConsumers
parameter_list|()
block|{
return|return
name|replyToOnTimeoutMaxConcurrentConsumers
return|;
block|}
comment|/**      * Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS.      */
DECL|method|setReplyToOnTimeoutMaxConcurrentConsumers (int replyToOnTimeoutMaxConcurrentConsumers)
specifier|public
name|void
name|setReplyToOnTimeoutMaxConcurrentConsumers
parameter_list|(
name|int
name|replyToOnTimeoutMaxConcurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|replyToOnTimeoutMaxConcurrentConsumers
operator|=
name|replyToOnTimeoutMaxConcurrentConsumers
expr_stmt|;
block|}
DECL|method|isExplicitQosEnabled ()
specifier|public
name|boolean
name|isExplicitQosEnabled
parameter_list|()
block|{
return|return
name|explicitQosEnabled
operator|!=
literal|null
condition|?
name|explicitQosEnabled
else|:
literal|false
return|;
block|}
comment|/**      * Set if the deliveryMode, priority or timeToLive qualities of service should be used when sending messages.      * This option is based on Spring's JmsTemplate. The deliveryMode, priority and timeToLive options are applied to the current endpoint.      * This contrasts with the preserveMessageQos option, which operates at message granularity,      * reading QoS properties exclusively from the Camel In message headers.      */
DECL|method|setExplicitQosEnabled (boolean explicitQosEnabled)
specifier|public
name|void
name|setExplicitQosEnabled
parameter_list|(
name|boolean
name|explicitQosEnabled
parameter_list|)
block|{
name|this
operator|.
name|explicitQosEnabled
operator|=
name|explicitQosEnabled
expr_stmt|;
block|}
DECL|method|isDeliveryPersistent ()
specifier|public
name|boolean
name|isDeliveryPersistent
parameter_list|()
block|{
return|return
name|deliveryPersistent
return|;
block|}
comment|/**      * Specifies whether persistent delivery is used by default.      */
DECL|method|setDeliveryPersistent (boolean deliveryPersistent)
specifier|public
name|void
name|setDeliveryPersistent
parameter_list|(
name|boolean
name|deliveryPersistent
parameter_list|)
block|{
name|this
operator|.
name|deliveryPersistent
operator|=
name|deliveryPersistent
expr_stmt|;
name|configuredQoS
argument_list|()
expr_stmt|;
block|}
DECL|method|getDeliveryMode ()
specifier|public
name|Integer
name|getDeliveryMode
parameter_list|()
block|{
return|return
name|deliveryMode
return|;
block|}
comment|/**      * Specifies the delivery mode to be used.      * Possibles values are those defined by javax.jms.DeliveryMode.      * NON_PERSISTENT = 1 and PERSISTENT = 2.      */
DECL|method|setDeliveryMode (Integer deliveryMode)
specifier|public
name|void
name|setDeliveryMode
parameter_list|(
name|Integer
name|deliveryMode
parameter_list|)
block|{
name|this
operator|.
name|deliveryMode
operator|=
name|deliveryMode
expr_stmt|;
name|configuredQoS
argument_list|()
expr_stmt|;
block|}
DECL|method|isReplyToDeliveryPersistent ()
specifier|public
name|boolean
name|isReplyToDeliveryPersistent
parameter_list|()
block|{
return|return
name|replyToDeliveryPersistent
return|;
block|}
comment|/**      * Specifies whether to use persistent delivery by default for replies.      */
DECL|method|setReplyToDeliveryPersistent (boolean replyToDeliveryPersistent)
specifier|public
name|void
name|setReplyToDeliveryPersistent
parameter_list|(
name|boolean
name|replyToDeliveryPersistent
parameter_list|)
block|{
name|this
operator|.
name|replyToDeliveryPersistent
operator|=
name|replyToDeliveryPersistent
expr_stmt|;
block|}
DECL|method|getTimeToLive ()
specifier|public
name|long
name|getTimeToLive
parameter_list|()
block|{
return|return
name|timeToLive
return|;
block|}
comment|/**      * When sending messages, specifies the time-to-live of the message (in milliseconds).      */
DECL|method|setTimeToLive (long timeToLive)
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|long
name|timeToLive
parameter_list|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
name|configuredQoS
argument_list|()
expr_stmt|;
block|}
DECL|method|getMessageConverter ()
specifier|public
name|MessageConverter
name|getMessageConverter
parameter_list|()
block|{
return|return
name|messageConverter
return|;
block|}
comment|/**      * To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control      * how to map to/from a javax.jms.Message.      */
DECL|method|setMessageConverter (MessageConverter messageConverter)
specifier|public
name|void
name|setMessageConverter
parameter_list|(
name|MessageConverter
name|messageConverter
parameter_list|)
block|{
name|this
operator|.
name|messageConverter
operator|=
name|messageConverter
expr_stmt|;
block|}
DECL|method|isMapJmsMessage ()
specifier|public
name|boolean
name|isMapJmsMessage
parameter_list|()
block|{
return|return
name|mapJmsMessage
return|;
block|}
comment|/**      * Specifies whether Camel should auto map the received JMS message to a suited payload type, such as javax.jms.TextMessage to a String etc.      */
DECL|method|setMapJmsMessage (boolean mapJmsMessage)
specifier|public
name|void
name|setMapJmsMessage
parameter_list|(
name|boolean
name|mapJmsMessage
parameter_list|)
block|{
name|this
operator|.
name|mapJmsMessage
operator|=
name|mapJmsMessage
expr_stmt|;
block|}
DECL|method|isMessageIdEnabled ()
specifier|public
name|boolean
name|isMessageIdEnabled
parameter_list|()
block|{
return|return
name|messageIdEnabled
return|;
block|}
comment|/**      * When sending, specifies whether message IDs should be added. This is just an hint to the JMS Broker.      * If the JMS provider accepts this hint, these messages must have the message ID set to null; if the provider ignores the hint, the message ID must be set to its normal unique value      */
DECL|method|setMessageIdEnabled (boolean messageIdEnabled)
specifier|public
name|void
name|setMessageIdEnabled
parameter_list|(
name|boolean
name|messageIdEnabled
parameter_list|)
block|{
name|this
operator|.
name|messageIdEnabled
operator|=
name|messageIdEnabled
expr_stmt|;
block|}
DECL|method|isMessageTimestampEnabled ()
specifier|public
name|boolean
name|isMessageTimestampEnabled
parameter_list|()
block|{
return|return
name|messageTimestampEnabled
return|;
block|}
comment|/**      * Specifies whether timestamps should be enabled by default on sending messages. This is just an hint to the JMS Broker.      * If the JMS provider accepts this hint, these messages must have the timestamp set to zero; if the provider ignores the hint, the timestamp must be set to its normal value.      */
DECL|method|setMessageTimestampEnabled (boolean messageTimestampEnabled)
specifier|public
name|void
name|setMessageTimestampEnabled
parameter_list|(
name|boolean
name|messageTimestampEnabled
parameter_list|)
block|{
name|this
operator|.
name|messageTimestampEnabled
operator|=
name|messageTimestampEnabled
expr_stmt|;
block|}
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
comment|/**      * Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest).      * The explicitQosEnabled option must also be enabled in order for this option to have any effect.      */
DECL|method|setPriority (int priority)
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|configuredQoS
argument_list|()
expr_stmt|;
block|}
DECL|method|getAcknowledgementMode ()
specifier|public
name|int
name|getAcknowledgementMode
parameter_list|()
block|{
return|return
name|acknowledgementMode
return|;
block|}
comment|/**      * The JMS acknowledgement mode defined as an Integer.      * Allows you to set vendor-specific extensions to the acknowledgment mode.      * For the regular modes, it is preferable to use the acknowledgementModeName instead.      */
DECL|method|setAcknowledgementMode (int consumerAcknowledgementMode)
specifier|public
name|void
name|setAcknowledgementMode
parameter_list|(
name|int
name|consumerAcknowledgementMode
parameter_list|)
block|{
name|this
operator|.
name|acknowledgementMode
operator|=
name|consumerAcknowledgementMode
expr_stmt|;
name|this
operator|.
name|acknowledgementModeName
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|isTransacted ()
specifier|public
name|boolean
name|isTransacted
parameter_list|()
block|{
return|return
name|transacted
return|;
block|}
comment|/**      * Specifies whether to use transacted mode      */
DECL|method|setTransacted (boolean consumerTransacted)
specifier|public
name|void
name|setTransacted
parameter_list|(
name|boolean
name|consumerTransacted
parameter_list|)
block|{
name|this
operator|.
name|transacted
operator|=
name|consumerTransacted
expr_stmt|;
block|}
DECL|method|isLazyCreateTransactionManager ()
specifier|public
name|boolean
name|isLazyCreateTransactionManager
parameter_list|()
block|{
return|return
name|lazyCreateTransactionManager
return|;
block|}
comment|/**      * If true, Camel will create a JmsTransactionManager, if there is no transactionManager injected when option transacted=true.      */
DECL|method|setLazyCreateTransactionManager (boolean lazyCreating)
specifier|public
name|void
name|setLazyCreateTransactionManager
parameter_list|(
name|boolean
name|lazyCreating
parameter_list|)
block|{
name|this
operator|.
name|lazyCreateTransactionManager
operator|=
name|lazyCreating
expr_stmt|;
block|}
DECL|method|isEagerLoadingOfProperties ()
specifier|public
name|boolean
name|isEagerLoadingOfProperties
parameter_list|()
block|{
return|return
name|eagerLoadingOfProperties
return|;
block|}
comment|/**      * Enables eager loading of JMS properties and payload as soon as a message is loaded      * which generally is inefficient as the JMS properties may not be required      * but sometimes can catch early any issues with the underlying JMS provider      * and the use of JMS properties      */
DECL|method|setEagerLoadingOfProperties (boolean eagerLoadingOfProperties)
specifier|public
name|void
name|setEagerLoadingOfProperties
parameter_list|(
name|boolean
name|eagerLoadingOfProperties
parameter_list|)
block|{
name|this
operator|.
name|eagerLoadingOfProperties
operator|=
name|eagerLoadingOfProperties
expr_stmt|;
block|}
DECL|method|isDisableReplyTo ()
specifier|public
name|boolean
name|isDisableReplyTo
parameter_list|()
block|{
return|return
name|disableReplyTo
return|;
block|}
comment|/**      * Specifies whether Camel ignores the JMSReplyTo header in messages. If true, Camel does not send a reply back to      * the destination specified in the JMSReplyTo header. You can use this option if you want Camel to consume from a      * route and you do not want Camel to automatically send back a reply message because another component in your code      * handles the reply message. You can also use this option if you want to use Camel as a proxy between different      * message brokers and you want to route message from one system to another.      */
DECL|method|setDisableReplyTo (boolean disableReplyTo)
specifier|public
name|void
name|setDisableReplyTo
parameter_list|(
name|boolean
name|disableReplyTo
parameter_list|)
block|{
name|this
operator|.
name|disableReplyTo
operator|=
name|disableReplyTo
expr_stmt|;
block|}
comment|/**      * Set to true, if you want to send message using the QoS settings specified on the message,      * instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority, JMSDeliveryMode,      * and JMSExpiration. You can provide all or only some of them. If not provided, Camel will fall back to use the      * values from the endpoint instead. So, when using this option, the headers override the values from the endpoint.      * The explicitQosEnabled option, by contrast, will only use options set on the endpoint, and not values from the message header.      */
DECL|method|setPreserveMessageQos (boolean preserveMessageQos)
specifier|public
name|void
name|setPreserveMessageQos
parameter_list|(
name|boolean
name|preserveMessageQos
parameter_list|)
block|{
name|this
operator|.
name|preserveMessageQos
operator|=
name|preserveMessageQos
expr_stmt|;
block|}
DECL|method|getJmsOperations ()
specifier|public
name|JmsOperations
name|getJmsOperations
parameter_list|()
block|{
return|return
name|jmsOperations
return|;
block|}
comment|/**      * Allows you to use your own implementation of the org.springframework.jms.core.JmsOperations interface.      * Camel uses JmsTemplate as default. Can be used for testing purpose, but not used much as stated in the spring API docs.      */
DECL|method|setJmsOperations (JmsOperations jmsOperations)
specifier|public
name|void
name|setJmsOperations
parameter_list|(
name|JmsOperations
name|jmsOperations
parameter_list|)
block|{
name|this
operator|.
name|jmsOperations
operator|=
name|jmsOperations
expr_stmt|;
block|}
DECL|method|getDestinationResolver ()
specifier|public
name|DestinationResolver
name|getDestinationResolver
parameter_list|()
block|{
return|return
name|destinationResolver
return|;
block|}
comment|/**      * A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver      * (for example, to lookup the real destination in a JNDI registry).      */
DECL|method|setDestinationResolver (DestinationResolver destinationResolver)
specifier|public
name|void
name|setDestinationResolver
parameter_list|(
name|DestinationResolver
name|destinationResolver
parameter_list|)
block|{
name|this
operator|.
name|destinationResolver
operator|=
name|destinationResolver
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
DECL|method|createDestinationResolver (final DestinationEndpoint destinationEndpoint)
specifier|public
specifier|static
name|DestinationResolver
name|createDestinationResolver
parameter_list|(
specifier|final
name|DestinationEndpoint
name|destinationEndpoint
parameter_list|)
block|{
return|return
operator|new
name|DestinationResolver
argument_list|()
block|{
specifier|public
name|Destination
name|resolveDestinationName
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|destinationEndpoint
operator|.
name|getJmsDestination
argument_list|(
name|session
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|configureMessageListenerContainer (AbstractMessageListenerContainer container, JmsEndpoint endpoint)
specifier|protected
name|void
name|configureMessageListenerContainer
parameter_list|(
name|AbstractMessageListenerContainer
name|container
parameter_list|,
name|JmsEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|container
operator|.
name|setConnectionFactory
argument_list|(
name|getListenerConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|DestinationEndpoint
condition|)
block|{
name|container
operator|.
name|setDestinationResolver
argument_list|(
name|createDestinationResolver
argument_list|(
operator|(
name|DestinationEndpoint
operator|)
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destinationResolver
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setDestinationResolver
argument_list|(
name|destinationResolver
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setAutoStartup
argument_list|(
name|autoStartup
argument_list|)
expr_stmt|;
if|if
condition|(
name|durableSubscriptionName
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setDurableSubscriptionName
argument_list|(
name|durableSubscriptionName
argument_list|)
expr_stmt|;
name|container
operator|.
name|setSubscriptionDurable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exceptionListener
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setExceptionListener
argument_list|(
name|exceptionListener
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errorHandler
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ErrorHandler
name|handler
init|=
operator|new
name|DefaultSpringErrorHandler
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|EndpointMessageListener
operator|.
name|class
argument_list|,
name|getErrorHandlerLoggingLevel
argument_list|()
argument_list|,
name|isErrorHandlerLogStackTrace
argument_list|()
argument_list|)
decl_stmt|;
name|container
operator|.
name|setErrorHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setAcceptMessagesWhileStopping
argument_list|(
name|acceptMessagesWhileStopping
argument_list|)
expr_stmt|;
name|container
operator|.
name|setExposeListenerSession
argument_list|(
name|exposeListenerSession
argument_list|)
expr_stmt|;
name|container
operator|.
name|setSessionTransacted
argument_list|(
name|transacted
argument_list|)
expr_stmt|;
if|if
condition|(
name|transacted
condition|)
block|{
name|container
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|acknowledgementMode
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|acknowledgementMode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|acknowledgementModeName
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setSessionAcknowledgeModeName
argument_list|(
name|acknowledgementModeName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endpoint
operator|.
name|getSelector
argument_list|()
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getSelector
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|container
operator|.
name|setMessageSelector
argument_list|(
name|endpoint
operator|.
name|getSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|instanceof
name|DefaultMessageListenerContainer
condition|)
block|{
name|DefaultMessageListenerContainer
name|listenerContainer
init|=
operator|(
name|DefaultMessageListenerContainer
operator|)
name|container
decl_stmt|;
name|configureDefaultMessageListenerContainer
argument_list|(
name|endpoint
argument_list|,
name|listenerContainer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|container
operator|instanceof
name|SimpleMessageListenerContainer
condition|)
block|{
name|SimpleMessageListenerContainer
name|listenerContainer
init|=
operator|(
name|SimpleMessageListenerContainer
operator|)
name|container
decl_stmt|;
name|configureSimpleMessageListenerContainer
argument_list|(
name|listenerContainer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureSimpleMessageListenerContainer (SimpleMessageListenerContainer listenerContainer)
specifier|private
name|void
name|configureSimpleMessageListenerContainer
parameter_list|(
name|SimpleMessageListenerContainer
name|listenerContainer
parameter_list|)
block|{
if|if
condition|(
name|maxConcurrentConsumers
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|maxConcurrentConsumers
operator|<
name|concurrentConsumers
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property maxConcurrentConsumers: "
operator|+
name|maxConcurrentConsumers
operator|+
literal|" must be higher than concurrentConsumers: "
operator|+
name|concurrentConsumers
argument_list|)
throw|;
block|}
name|listenerContainer
operator|.
name|setConcurrency
argument_list|(
name|concurrentConsumers
operator|+
literal|"-"
operator|+
name|maxConcurrentConsumers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|concurrentConsumers
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setConcurrentConsumers
argument_list|(
name|concurrentConsumers
argument_list|)
expr_stmt|;
block|}
name|listenerContainer
operator|.
name|setPubSubNoLocal
argument_list|(
name|pubSubNoLocal
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskExecutor
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setTaskExecutor
argument_list|(
name|taskExecutor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureDefaultMessageListenerContainer (JmsEndpoint endpoint, DefaultMessageListenerContainer container)
specifier|private
name|void
name|configureDefaultMessageListenerContainer
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|,
name|DefaultMessageListenerContainer
name|container
parameter_list|)
block|{
if|if
condition|(
name|concurrentConsumers
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setConcurrentConsumers
argument_list|(
name|concurrentConsumers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheLevel
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setCacheLevel
argument_list|(
name|cacheLevel
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cacheLevelName
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setCacheLevelName
argument_list|(
name|cacheLevelName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|container
operator|.
name|setCacheLevel
argument_list|(
name|defaultCacheLevel
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idleTaskExecutionLimit
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setIdleTaskExecutionLimit
argument_list|(
name|idleTaskExecutionLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idleConsumerLimit
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setIdleConsumerLimit
argument_list|(
name|idleConsumerLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxConcurrentConsumers
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|maxConcurrentConsumers
operator|<
name|concurrentConsumers
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property maxConcurrentConsumers: "
operator|+
name|maxConcurrentConsumers
operator|+
literal|" must be higher than concurrentConsumers: "
operator|+
name|concurrentConsumers
argument_list|)
throw|;
block|}
name|container
operator|.
name|setMaxConcurrentConsumers
argument_list|(
name|maxConcurrentConsumers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxMessagesPerTask
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setMaxMessagesPerTask
argument_list|(
name|maxMessagesPerTask
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setPubSubNoLocal
argument_list|(
name|pubSubNoLocal
argument_list|)
expr_stmt|;
if|if
condition|(
name|receiveTimeout
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setReceiveTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recoveryInterval
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setRecoveryInterval
argument_list|(
name|recoveryInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskExecutor
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setTaskExecutor
argument_list|(
name|taskExecutor
argument_list|)
expr_stmt|;
block|}
name|PlatformTransactionManager
name|tm
init|=
name|getTransactionManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setTransactionManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|transactionManager
operator|==
literal|null
operator|&&
name|transacted
operator|&&
operator|!
name|lazyCreateTransactionManager
condition|)
block|{
name|container
operator|.
name|setSessionTransacted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transactionName
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setTransactionName
argument_list|(
name|transactionName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transactionTimeout
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setTransactionTimeout
argument_list|(
name|transactionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|configureMessageListener (EndpointMessageListener listener)
specifier|public
name|void
name|configureMessageListener
parameter_list|(
name|EndpointMessageListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|isDisableReplyTo
argument_list|()
condition|)
block|{
name|listener
operator|.
name|setDisableReplyTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEagerLoadingOfProperties
argument_list|()
condition|)
block|{
name|listener
operator|.
name|setEagerLoadingOfProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getReplyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|setReplyToDestination
argument_list|(
name|getReplyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|JmsOperations
name|operations
init|=
name|listener
operator|.
name|getTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|operations
operator|instanceof
name|JmsTemplate
condition|)
block|{
name|JmsTemplate
name|template
init|=
operator|(
name|JmsTemplate
operator|)
name|operations
decl_stmt|;
name|template
operator|.
name|setDeliveryPersistent
argument_list|(
name|isReplyToDeliveryPersistent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Defaults the JMS cache level if none is explicitly specified.      *<p>      * Will return<tt>CACHE_AUTO</tt> which will pickup and use<tt>CACHE_NONE</tt>      * if transacted has been enabled, otherwise it will use<tt>CACHE_CONSUMER</tt>      * which is the most efficient.      *      * @param endpoint the endpoint      * @return the cache level      */
DECL|method|defaultCacheLevel (JmsEndpoint endpoint)
specifier|protected
name|int
name|defaultCacheLevel
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|DefaultMessageListenerContainer
operator|.
name|CACHE_AUTO
return|;
block|}
comment|/**      * Factory method which allows derived classes to customize the lazy      * creation      */
DECL|method|createConnectionFactory ()
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|connectionFactory
argument_list|,
literal|"connectionFactory"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Factory method which allows derived classes to customize the lazy      * creation      */
DECL|method|createListenerConnectionFactory ()
specifier|protected
name|ConnectionFactory
name|createListenerConnectionFactory
parameter_list|()
block|{
return|return
name|getOrCreateConnectionFactory
argument_list|()
return|;
block|}
comment|/**      * Factory method which allows derived classes to customize the lazy      * creation      */
DECL|method|createTemplateConnectionFactory ()
specifier|protected
name|ConnectionFactory
name|createTemplateConnectionFactory
parameter_list|()
block|{
return|return
name|getOrCreateConnectionFactory
argument_list|()
return|;
block|}
comment|/**      * Factory method which which allows derived classes to customize the lazy      * transaction manager creation      */
DECL|method|createTransactionManager ()
specifier|protected
name|PlatformTransactionManager
name|createTransactionManager
parameter_list|()
block|{
name|JmsTransactionManager
name|answer
init|=
operator|new
name|JmsTransactionManager
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setConnectionFactory
argument_list|(
name|getOrCreateConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|isPreserveMessageQos ()
specifier|public
name|boolean
name|isPreserveMessageQos
parameter_list|()
block|{
return|return
name|preserveMessageQos
return|;
block|}
comment|/**      * When one of the QoS properties are configured such as {@link #setDeliveryPersistent(boolean)},      * {@link #setPriority(int)} or {@link #setTimeToLive(long)} then we should auto default the      * setting of {@link #setExplicitQosEnabled(boolean)} if its not been configured yet      */
DECL|method|configuredQoS ()
specifier|protected
name|void
name|configuredQoS
parameter_list|()
block|{
if|if
condition|(
name|explicitQosEnabled
operator|==
literal|null
condition|)
block|{
name|explicitQosEnabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|isAlwaysCopyMessage ()
specifier|public
name|boolean
name|isAlwaysCopyMessage
parameter_list|()
block|{
return|return
name|alwaysCopyMessage
return|;
block|}
comment|/**      * If true, Camel will always make a JMS message copy of the message when it is passed to the producer for sending.      * Copying the message is needed in some situations, such as when a replyToDestinationSelectorName is set      * (incidentally, Camel will set the alwaysCopyMessage option to true, if a replyToDestinationSelectorName is set)      */
DECL|method|setAlwaysCopyMessage (boolean alwaysCopyMessage)
specifier|public
name|void
name|setAlwaysCopyMessage
parameter_list|(
name|boolean
name|alwaysCopyMessage
parameter_list|)
block|{
name|this
operator|.
name|alwaysCopyMessage
operator|=
name|alwaysCopyMessage
expr_stmt|;
block|}
DECL|method|isUseMessageIDAsCorrelationID ()
specifier|public
name|boolean
name|isUseMessageIDAsCorrelationID
parameter_list|()
block|{
return|return
name|useMessageIDAsCorrelationID
return|;
block|}
comment|/**      * Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages.      */
DECL|method|setUseMessageIDAsCorrelationID (boolean useMessageIDAsCorrelationID)
specifier|public
name|void
name|setUseMessageIDAsCorrelationID
parameter_list|(
name|boolean
name|useMessageIDAsCorrelationID
parameter_list|)
block|{
name|this
operator|.
name|useMessageIDAsCorrelationID
operator|=
name|useMessageIDAsCorrelationID
expr_stmt|;
block|}
DECL|method|getRequestTimeout ()
specifier|public
name|long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|requestTimeout
return|;
block|}
comment|/**      * The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds).      * The default is 20 seconds. You can include the header "CamelJmsRequestTimeout" to override this endpoint configured      * timeout value, and thus have per message individual timeout values.      * See also the requestTimeoutCheckerInterval option.      */
DECL|method|setRequestTimeout (long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|this
operator|.
name|requestTimeout
operator|=
name|requestTimeout
expr_stmt|;
block|}
DECL|method|getRequestTimeoutCheckerInterval ()
specifier|public
name|long
name|getRequestTimeoutCheckerInterval
parameter_list|()
block|{
return|return
name|requestTimeoutCheckerInterval
return|;
block|}
comment|/**      * Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS.      * By default Camel checks once per second. But if you must react faster when a timeout occurs,      * then you can lower this interval, to check more frequently. The timeout is determined by the option requestTimeout.      */
DECL|method|setRequestTimeoutCheckerInterval (long requestTimeoutCheckerInterval)
specifier|public
name|void
name|setRequestTimeoutCheckerInterval
parameter_list|(
name|long
name|requestTimeoutCheckerInterval
parameter_list|)
block|{
name|this
operator|.
name|requestTimeoutCheckerInterval
operator|=
name|requestTimeoutCheckerInterval
expr_stmt|;
block|}
DECL|method|getReplyTo ()
specifier|public
name|String
name|getReplyTo
parameter_list|()
block|{
return|return
name|replyTo
return|;
block|}
comment|/**      * Provides an explicit ReplyTo destination, which overrides any incoming value of Message.getJMSReplyTo().      */
DECL|method|setReplyTo (String replyToDestination)
specifier|public
name|void
name|setReplyTo
parameter_list|(
name|String
name|replyToDestination
parameter_list|)
block|{
name|this
operator|.
name|replyTo
operator|=
name|normalizeDestinationName
argument_list|(
name|replyToDestination
argument_list|)
expr_stmt|;
block|}
DECL|method|getReplyToDestinationSelectorName ()
specifier|public
name|String
name|getReplyToDestinationSelectorName
parameter_list|()
block|{
return|return
name|replyToDestinationSelectorName
return|;
block|}
comment|/**      * Sets the JMS Selector using the fixed name to be used so you can filter out your own replies      * from the others when using a shared queue (that is, if you are not using a temporary reply queue).      */
DECL|method|setReplyToDestinationSelectorName (String replyToDestinationSelectorName)
specifier|public
name|void
name|setReplyToDestinationSelectorName
parameter_list|(
name|String
name|replyToDestinationSelectorName
parameter_list|)
block|{
name|this
operator|.
name|replyToDestinationSelectorName
operator|=
name|replyToDestinationSelectorName
expr_stmt|;
comment|// in case of consumer -> producer and a named replyTo correlation selector
comment|// message pass through is impossible as we need to set the value of selector into
comment|// outgoing message, which would be read-only if pass through were to remain enabled
if|if
condition|(
name|replyToDestinationSelectorName
operator|!=
literal|null
condition|)
block|{
name|setAlwaysCopyMessage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getReplyToOverride ()
specifier|public
name|String
name|getReplyToOverride
parameter_list|()
block|{
return|return
name|replyToOverride
return|;
block|}
comment|/**      * Provides an explicit ReplyTo destination in the JMS message, which overrides the setting of replyTo.      * It is useful if you want to forward the message to a remote Queue and receive the reply message from the ReplyTo destination.      */
DECL|method|setReplyToOverride (String replyToDestination)
specifier|public
name|void
name|setReplyToOverride
parameter_list|(
name|String
name|replyToDestination
parameter_list|)
block|{
name|this
operator|.
name|replyToOverride
operator|=
name|normalizeDestinationName
argument_list|(
name|replyToDestination
argument_list|)
expr_stmt|;
block|}
DECL|method|isReplyToSameDestinationAllowed ()
specifier|public
name|boolean
name|isReplyToSameDestinationAllowed
parameter_list|()
block|{
return|return
name|replyToSameDestinationAllowed
return|;
block|}
comment|/**      * Whether a JMS consumer is allowed to send a reply message to the same destination that the consumer is using to      * consume from. This prevents an endless loop by consuming and sending back the same message to itself.      */
DECL|method|setReplyToSameDestinationAllowed (boolean replyToSameDestinationAllowed)
specifier|public
name|void
name|setReplyToSameDestinationAllowed
parameter_list|(
name|boolean
name|replyToSameDestinationAllowed
parameter_list|)
block|{
name|this
operator|.
name|replyToSameDestinationAllowed
operator|=
name|replyToSameDestinationAllowed
expr_stmt|;
block|}
DECL|method|getJmsMessageType ()
specifier|public
name|JmsMessageType
name|getJmsMessageType
parameter_list|()
block|{
return|return
name|jmsMessageType
return|;
block|}
comment|/**      * Allows you to force the use of a specific javax.jms.Message implementation for sending JMS messages.      * Possible values are: Bytes, Map, Object, Stream, Text.      * By default, Camel would determine which JMS message type to use from the In body type. This option allows you to specify it.      */
DECL|method|setJmsMessageType (JmsMessageType jmsMessageType)
specifier|public
name|void
name|setJmsMessageType
parameter_list|(
name|JmsMessageType
name|jmsMessageType
parameter_list|)
block|{
if|if
condition|(
name|jmsMessageType
operator|==
name|JmsMessageType
operator|.
name|Blob
operator|&&
operator|!
name|supportBlobMessage
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"BlobMessage is not supported by this implementation"
argument_list|)
throw|;
block|}
name|this
operator|.
name|jmsMessageType
operator|=
name|jmsMessageType
expr_stmt|;
block|}
comment|/**      * Should get overridden by implementations which support BlobMessages      *      * @return false      */
DECL|method|supportBlobMessage ()
specifier|protected
name|boolean
name|supportBlobMessage
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getJmsKeyFormatStrategy ()
specifier|public
name|JmsKeyFormatStrategy
name|getJmsKeyFormatStrategy
parameter_list|()
block|{
if|if
condition|(
name|jmsKeyFormatStrategy
operator|==
literal|null
condition|)
block|{
name|jmsKeyFormatStrategy
operator|=
operator|new
name|DefaultJmsKeyFormatStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|jmsKeyFormatStrategy
return|;
block|}
comment|/**      * Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification.      * Camel provides two implementations out of the box: default and passthrough.      * The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is.      * Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters.      * You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy      * and refer to it using the # notation.      */
DECL|method|setJmsKeyFormatStrategy (JmsKeyFormatStrategy jmsKeyFormatStrategy)
specifier|public
name|void
name|setJmsKeyFormatStrategy
parameter_list|(
name|JmsKeyFormatStrategy
name|jmsKeyFormatStrategy
parameter_list|)
block|{
name|this
operator|.
name|jmsKeyFormatStrategy
operator|=
name|jmsKeyFormatStrategy
expr_stmt|;
block|}
DECL|method|isTransferExchange ()
specifier|public
name|boolean
name|isTransferExchange
parameter_list|()
block|{
return|return
name|transferExchange
return|;
block|}
comment|/**      * You can transfer the exchange over the wire instead of just the body and headers.      * The following fields are transferred: In body, Out body, Fault body, In headers, Out headers, Fault headers,      * exchange properties, exchange exception.      * This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.      * You must enable this option on both the producer and consumer side, so Camel knows the payloads is an Exchange and not a regular payload.      * Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level,      * which forces a strong coupling between the producers and consumer having to use compatible Camel versions!      */
DECL|method|setTransferExchange (boolean transferExchange)
specifier|public
name|void
name|setTransferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|this
operator|.
name|transferExchange
operator|=
name|transferExchange
expr_stmt|;
block|}
DECL|method|isAllowSerializedHeaders ()
specifier|public
name|boolean
name|isAllowSerializedHeaders
parameter_list|()
block|{
return|return
name|allowSerializedHeaders
return|;
block|}
comment|/**      * Controls whether or not to include serialized headers.      * Applies only when {@link #isTransferExchange()} is {@code true}.      * This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.      */
DECL|method|setAllowSerializedHeaders (boolean allowSerializedHeaders)
specifier|public
name|void
name|setAllowSerializedHeaders
parameter_list|(
name|boolean
name|allowSerializedHeaders
parameter_list|)
block|{
name|this
operator|.
name|allowSerializedHeaders
operator|=
name|allowSerializedHeaders
expr_stmt|;
block|}
DECL|method|isTransferException ()
specifier|public
name|boolean
name|isTransferException
parameter_list|()
block|{
return|return
name|transferException
return|;
block|}
comment|/**      * If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side,      * then the caused Exception will be send back in response as a javax.jms.ObjectMessage.      * If the client is Camel, the returned Exception is rethrown. This allows you to use Camel JMS as a bridge      * in your routing - for example, using persistent queues to enable robust routing.      * Notice that if you also have transferExchange enabled, this option takes precedence.      * The caught exception is required to be serializable.      * The original Exception on the consumer side can be wrapped in an outer exception      * such as org.apache.camel.RuntimeCamelException when returned to the producer.      * Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level,      * which forces a strong coupling between the producers and consumer!      */
DECL|method|setTransferException (boolean transferException)
specifier|public
name|void
name|setTransferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|this
operator|.
name|transferException
operator|=
name|transferException
expr_stmt|;
block|}
DECL|method|isAsyncStartListener ()
specifier|public
name|boolean
name|isAsyncStartListener
parameter_list|()
block|{
return|return
name|asyncStartListener
return|;
block|}
comment|/**      * Whether to startup the JmsConsumer message listener asynchronously, when starting a route.      * For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying      * and/or failover. This will cause Camel to block while starting routes. By setting this option to true,      * you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread      * in asynchronous mode. If this option is used, then beware that if the connection could not be established,      * then an exception is logged at WARN level, and the consumer will not be able to receive messages;      * You can then restart the route to retry.      */
DECL|method|setAsyncStartListener (boolean asyncStartListener)
specifier|public
name|void
name|setAsyncStartListener
parameter_list|(
name|boolean
name|asyncStartListener
parameter_list|)
block|{
name|this
operator|.
name|asyncStartListener
operator|=
name|asyncStartListener
expr_stmt|;
block|}
DECL|method|isAsyncStopListener ()
specifier|public
name|boolean
name|isAsyncStopListener
parameter_list|()
block|{
return|return
name|asyncStopListener
return|;
block|}
comment|/**      * Whether to stop the JmsConsumer message listener asynchronously, when stopping a route.      */
DECL|method|setAsyncStopListener (boolean asyncStopListener)
specifier|public
name|void
name|setAsyncStopListener
parameter_list|(
name|boolean
name|asyncStopListener
parameter_list|)
block|{
name|this
operator|.
name|asyncStopListener
operator|=
name|asyncStopListener
expr_stmt|;
block|}
DECL|method|isTestConnectionOnStartup ()
specifier|public
name|boolean
name|isTestConnectionOnStartup
parameter_list|()
block|{
return|return
name|testConnectionOnStartup
return|;
block|}
comment|/**      * Specifies whether to test the connection on startup.      * This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker.      * If a connection cannot be granted then Camel throws an exception on startup.      * This ensures that Camel is not started with failed connections.      * The JMS producers is tested as well.      */
DECL|method|setTestConnectionOnStartup (boolean testConnectionOnStartup)
specifier|public
name|void
name|setTestConnectionOnStartup
parameter_list|(
name|boolean
name|testConnectionOnStartup
parameter_list|)
block|{
name|this
operator|.
name|testConnectionOnStartup
operator|=
name|testConnectionOnStartup
expr_stmt|;
block|}
comment|/**      * When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination      * if you touch the headers (get or set) during the route. Set this option to true to force Camel to send      * the original JMS message that was received.      */
DECL|method|setForceSendOriginalMessage (boolean forceSendOriginalMessage)
specifier|public
name|void
name|setForceSendOriginalMessage
parameter_list|(
name|boolean
name|forceSendOriginalMessage
parameter_list|)
block|{
name|this
operator|.
name|forceSendOriginalMessage
operator|=
name|forceSendOriginalMessage
expr_stmt|;
block|}
DECL|method|isForceSendOriginalMessage ()
specifier|public
name|boolean
name|isForceSendOriginalMessage
parameter_list|()
block|{
return|return
name|forceSendOriginalMessage
return|;
block|}
DECL|method|isDisableTimeToLive ()
specifier|public
name|boolean
name|isDisableTimeToLive
parameter_list|()
block|{
return|return
name|disableTimeToLive
return|;
block|}
comment|/**      * Use this option to force disabling time to live.      * For example when you do request/reply over JMS, then Camel will by default use the requestTimeout value      * as time to live on the message being sent. The problem is that the sender and receiver systems have      * to have their clocks synchronized, so they are in sync. This is not always so easy to archive.      * So you can use disableTimeToLive=true to not set a time to live value on the sent message.      * Then the message will not expire on the receiver system. See below in section About time to live for more details.      */
DECL|method|setDisableTimeToLive (boolean disableTimeToLive)
specifier|public
name|void
name|setDisableTimeToLive
parameter_list|(
name|boolean
name|disableTimeToLive
parameter_list|)
block|{
name|this
operator|.
name|disableTimeToLive
operator|=
name|disableTimeToLive
expr_stmt|;
block|}
DECL|method|getReplyToType ()
specifier|public
name|ReplyToType
name|getReplyToType
parameter_list|()
block|{
return|return
name|replyToType
return|;
block|}
comment|/**      * Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS.      * Possible values are: Temporary, Shared, or Exclusive.      * By default Camel will use temporary queues. However if replyTo has been configured, then Shared is used by default.      * This option allows you to use exclusive queues instead of shared ones.      * See Camel JMS documentation for more details, and especially the notes about the implications if running in a clustered environment,      * and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive.      */
DECL|method|setReplyToType (ReplyToType replyToType)
specifier|public
name|void
name|setReplyToType
parameter_list|(
name|ReplyToType
name|replyToType
parameter_list|)
block|{
name|this
operator|.
name|replyToType
operator|=
name|replyToType
expr_stmt|;
block|}
DECL|method|isAsyncConsumer ()
specifier|public
name|boolean
name|isAsyncConsumer
parameter_list|()
block|{
return|return
name|asyncConsumer
return|;
block|}
comment|/**      * Whether the JmsConsumer processes the Exchange asynchronously.      * If enabled then the JmsConsumer may pickup the next message from the JMS queue,      * while the previous message is being processed asynchronously (by the Asynchronous Routing Engine).      * This means that messages may be processed not 100% strictly in order. If disabled (as default)      * then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue.      * Note if transacted has been enabled, then asyncConsumer=true does not run asynchronously, as transaction      * must be executed synchronously (Camel 3.0 may support async transactions).      */
DECL|method|setAsyncConsumer (boolean asyncConsumer)
specifier|public
name|void
name|setAsyncConsumer
parameter_list|(
name|boolean
name|asyncConsumer
parameter_list|)
block|{
name|this
operator|.
name|asyncConsumer
operator|=
name|asyncConsumer
expr_stmt|;
block|}
comment|/**      * Sets the cache level by name for the reply consumer when doing request/reply over JMS.      * This option only applies when using fixed reply queues (not temporary).      * Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName.      * And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere      * may require to set the replyToCacheLevelName=CACHE_NONE to work.      * Note: If using temporary queues then CACHE_NONE is not allowed,      * and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION.      */
DECL|method|setReplyToCacheLevelName (String name)
specifier|public
name|void
name|setReplyToCacheLevelName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|replyToCacheLevelName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getReplyToCacheLevelName ()
specifier|public
name|String
name|getReplyToCacheLevelName
parameter_list|()
block|{
return|return
name|replyToCacheLevelName
return|;
block|}
DECL|method|isAllowNullBody ()
specifier|public
name|boolean
name|isAllowNullBody
parameter_list|()
block|{
return|return
name|allowNullBody
return|;
block|}
comment|/**      * Whether to allow sending messages with no body. If this option is false and the message body is null, then an JMSException is thrown.      */
DECL|method|setAllowNullBody (boolean allowNullBody)
specifier|public
name|void
name|setAllowNullBody
parameter_list|(
name|boolean
name|allowNullBody
parameter_list|)
block|{
name|this
operator|.
name|allowNullBody
operator|=
name|allowNullBody
expr_stmt|;
block|}
DECL|method|getMessageListenerContainerFactory ()
specifier|public
name|MessageListenerContainerFactory
name|getMessageListenerContainerFactory
parameter_list|()
block|{
return|return
name|messageListenerContainerFactory
return|;
block|}
comment|/**      * Registry ID of the MessageListenerContainerFactory used to determine what      * org.springframework.jms.listener.AbstractMessageListenerContainer to use to consume messages.      * Setting this will automatically set consumerType to Custom.      */
DECL|method|setMessageListenerContainerFactory (MessageListenerContainerFactory messageListenerContainerFactory)
specifier|public
name|void
name|setMessageListenerContainerFactory
parameter_list|(
name|MessageListenerContainerFactory
name|messageListenerContainerFactory
parameter_list|)
block|{
name|this
operator|.
name|messageListenerContainerFactory
operator|=
name|messageListenerContainerFactory
expr_stmt|;
block|}
DECL|method|isIncludeSentJMSMessageID ()
specifier|public
name|boolean
name|isIncludeSentJMSMessageID
parameter_list|()
block|{
return|return
name|includeSentJMSMessageID
return|;
block|}
comment|/**      * Only applicable when sending to JMS destination using InOnly (eg fire and forget).      * Enabling this option will enrich the Camel Exchange with the actual JMSMessageID      * that was used by the JMS client when the message was sent to the JMS destination.      */
DECL|method|setIncludeSentJMSMessageID (boolean includeSentJMSMessageID)
specifier|public
name|void
name|setIncludeSentJMSMessageID
parameter_list|(
name|boolean
name|includeSentJMSMessageID
parameter_list|)
block|{
name|this
operator|.
name|includeSentJMSMessageID
operator|=
name|includeSentJMSMessageID
expr_stmt|;
block|}
DECL|method|getDefaultTaskExecutorType ()
specifier|public
name|DefaultTaskExecutorType
name|getDefaultTaskExecutorType
parameter_list|()
block|{
return|return
name|defaultTaskExecutorType
return|;
block|}
comment|/**      * Specifies what default TaskExecutor type to use in the DefaultMessageListenerContainer,      * for both consumer endpoints and the ReplyTo consumer of producer endpoints.      * Possible values: SimpleAsync (uses Spring's SimpleAsyncTaskExecutor) or ThreadPool      * (uses Spring's ThreadPoolTaskExecutor with optimal values - cached threadpool-like).      * If not set, it defaults to the previous behaviour, which uses a cached thread pool      * for consumer endpoints and SimpleAsync for reply consumers.      * The use of ThreadPool is recommended to reduce "thread trash" in elastic configurations      * with dynamically increasing and decreasing concurrent consumers.      */
DECL|method|setDefaultTaskExecutorType (DefaultTaskExecutorType defaultTaskExecutorType)
specifier|public
name|void
name|setDefaultTaskExecutorType
parameter_list|(
name|DefaultTaskExecutorType
name|defaultTaskExecutorType
parameter_list|)
block|{
name|this
operator|.
name|defaultTaskExecutorType
operator|=
name|defaultTaskExecutorType
expr_stmt|;
block|}
DECL|method|isIncludeAllJMSXProperties ()
specifier|public
name|boolean
name|isIncludeAllJMSXProperties
parameter_list|()
block|{
return|return
name|includeAllJMSXProperties
return|;
block|}
comment|/**      * Whether to include all JMSXxxx properties when mapping from JMS to Camel Message.      * Setting this to true will include properties such as JMSXAppID, and JMSXUserID etc.      * Note: If you are using a custom headerFilterStrategy then this option does not apply.      */
DECL|method|setIncludeAllJMSXProperties (boolean includeAllJMSXProperties)
specifier|public
name|void
name|setIncludeAllJMSXProperties
parameter_list|(
name|boolean
name|includeAllJMSXProperties
parameter_list|)
block|{
name|this
operator|.
name|includeAllJMSXProperties
operator|=
name|includeAllJMSXProperties
expr_stmt|;
block|}
DECL|method|getMessageCreatedStrategy ()
specifier|public
name|MessageCreatedStrategy
name|getMessageCreatedStrategy
parameter_list|()
block|{
return|return
name|messageCreatedStrategy
return|;
block|}
comment|/**      * To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of<tt>javax.jms.Message</tt>      * objects when Camel is sending a JMS message.      */
DECL|method|setMessageCreatedStrategy (MessageCreatedStrategy messageCreatedStrategy)
specifier|public
name|void
name|setMessageCreatedStrategy
parameter_list|(
name|MessageCreatedStrategy
name|messageCreatedStrategy
parameter_list|)
block|{
name|this
operator|.
name|messageCreatedStrategy
operator|=
name|messageCreatedStrategy
expr_stmt|;
block|}
DECL|method|getSelector ()
specifier|public
name|String
name|getSelector
parameter_list|()
block|{
return|return
name|selector
return|;
block|}
comment|/**      * Sets the JMS selector to use      */
DECL|method|setSelector (String selector)
specifier|public
name|void
name|setSelector
parameter_list|(
name|String
name|selector
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
comment|/**      * Use this JMS property to correlate messages in InOut exchange pattern (request-reply)      * instead of JMSCorrelationID property. This allows you to exchange messages with       * systems that do not correlate messages using JMSCorrelationID JMS property. If used      * JMSCorrelationID will not be used or set by Camel. The value of here named property      * will be generated if not supplied in the header of the message under the same name.      */
DECL|method|setCorrelationProperty (final String correlationProperty)
specifier|public
name|void
name|setCorrelationProperty
parameter_list|(
specifier|final
name|String
name|correlationProperty
parameter_list|)
block|{
name|this
operator|.
name|correlationProperty
operator|=
name|correlationProperty
expr_stmt|;
block|}
DECL|method|getCorrelationProperty ()
specifier|public
name|String
name|getCorrelationProperty
parameter_list|()
block|{
return|return
name|correlationProperty
return|;
block|}
DECL|method|getAllowAdditionalHeaders ()
specifier|public
name|String
name|getAllowAdditionalHeaders
parameter_list|()
block|{
return|return
name|allowAdditionalHeaders
return|;
block|}
comment|/**      * This option is used to allow additional headers which may have values that are invalid according to JMS specification.      + For example some message systems such as WMQ do this with header names using prefix JMS_IBM_MQMD_ containing values with byte array or other invalid types.      + You can specify multiple header names separated by comma, and use * as suffix for wildcard matching.      */
DECL|method|setAllowAdditionalHeaders (String allowAdditionalHeaders)
specifier|public
name|void
name|setAllowAdditionalHeaders
parameter_list|(
name|String
name|allowAdditionalHeaders
parameter_list|)
block|{
name|this
operator|.
name|allowAdditionalHeaders
operator|=
name|allowAdditionalHeaders
expr_stmt|;
block|}
DECL|method|isSubscriptionDurable ()
specifier|public
name|boolean
name|isSubscriptionDurable
parameter_list|()
block|{
return|return
name|subscriptionDurable
return|;
block|}
comment|/**      * Set whether to make the subscription durable. The durable subscription name      * to be used can be specified through the "subscriptionName" property.      *<p>Default is "false". Set this to "true" to register a durable subscription,      * typically in combination with a "subscriptionName" value (unless      * your message listener class name is good enough as subscription name).      *<p>Only makes sense when listening to a topic (pub-sub domain),      * therefore this method switches the "pubSubDomain" flag as well.      */
DECL|method|setSubscriptionDurable (boolean subscriptionDurable)
specifier|public
name|void
name|setSubscriptionDurable
parameter_list|(
name|boolean
name|subscriptionDurable
parameter_list|)
block|{
name|this
operator|.
name|subscriptionDurable
operator|=
name|subscriptionDurable
expr_stmt|;
block|}
DECL|method|isSubscriptionShared ()
specifier|public
name|boolean
name|isSubscriptionShared
parameter_list|()
block|{
return|return
name|subscriptionShared
return|;
block|}
comment|/**      * Set whether to make the subscription shared. The shared subscription name      * to be used can be specified through the "subscriptionName" property.      *<p>Default is "false". Set this to "true" to register a shared subscription,      * typically in combination with a "subscriptionName" value (unless      * your message listener class name is good enough as subscription name).      * Note that shared subscriptions may also be durable, so this flag can      * (and often will) be combined with "subscriptionDurable" as well.      *<p>Only makes sense when listening to a topic (pub-sub domain),      * therefore this method switches the "pubSubDomain" flag as well.      *<p><b>Requires a JMS 2.0 compatible message broker.</b>      */
DECL|method|setSubscriptionShared (boolean subscriptionShared)
specifier|public
name|void
name|setSubscriptionShared
parameter_list|(
name|boolean
name|subscriptionShared
parameter_list|)
block|{
name|this
operator|.
name|subscriptionShared
operator|=
name|subscriptionShared
expr_stmt|;
block|}
DECL|method|getSubscriptionName ()
specifier|public
name|String
name|getSubscriptionName
parameter_list|()
block|{
return|return
name|subscriptionName
return|;
block|}
comment|/**      * Set the name of a subscription to create. To be applied in case      * of a topic (pub-sub domain) with a shared or durable subscription.      *<p>The subscription name needs to be unique within this client's      * JMS client id. Default is the class name of the specified message listener.      *<p>Note: Only 1 concurrent consumer (which is the default of this      * message listener container) is allowed for each subscription,      * except for a shared subscription (which requires JMS 2.0).      */
DECL|method|setSubscriptionName (String subscriptionName)
specifier|public
name|void
name|setSubscriptionName
parameter_list|(
name|String
name|subscriptionName
parameter_list|)
block|{
name|this
operator|.
name|subscriptionName
operator|=
name|subscriptionName
expr_stmt|;
block|}
DECL|method|isStreamMessageTypeEnabled ()
specifier|public
name|boolean
name|isStreamMessageTypeEnabled
parameter_list|()
block|{
return|return
name|streamMessageTypeEnabled
return|;
block|}
comment|/**      * Sets whether StreamMessage type is enabled or not.      * Message payloads of streaming kind such as files, InputStream, etc will either by sent as BytesMessage or StreamMessage.      * This option controls which kind will be used. By default BytesMessage is used which enforces the entire message payload to be read into memory.      * By enabling this option the message payload is read into memory in chunks and each chunk is then written to the StreamMessage until no more data.      */
DECL|method|setStreamMessageTypeEnabled (boolean streamMessageTypeEnabled)
specifier|public
name|void
name|setStreamMessageTypeEnabled
parameter_list|(
name|boolean
name|streamMessageTypeEnabled
parameter_list|)
block|{
name|this
operator|.
name|streamMessageTypeEnabled
operator|=
name|streamMessageTypeEnabled
expr_stmt|;
block|}
comment|/**      * Gets whether date headers should be formatted according to the ISO 8601      * standard.      */
DECL|method|isFormatDateHeadersToIso8601 ()
specifier|public
name|boolean
name|isFormatDateHeadersToIso8601
parameter_list|()
block|{
return|return
name|formatDateHeadersToIso8601
return|;
block|}
comment|/**      * Sets whether date headers should be formatted according to the ISO 8601      * standard.      */
DECL|method|setFormatDateHeadersToIso8601 (boolean formatDateHeadersToIso8601)
specifier|public
name|void
name|setFormatDateHeadersToIso8601
parameter_list|(
name|boolean
name|formatDateHeadersToIso8601
parameter_list|)
block|{
name|this
operator|.
name|formatDateHeadersToIso8601
operator|=
name|formatDateHeadersToIso8601
expr_stmt|;
block|}
block|}
end_class

end_unit

