begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSender
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|PackageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|task
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|JmsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate102
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|SessionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer102
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|SimpleMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|SimpleMessageListenerContainer102
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|serversession
operator|.
name|ServerSessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|serversession
operator|.
name|ServerSessionMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|serversession
operator|.
name|ServerSessionMessageListenerContainer102
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|JmsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|converter
operator|.
name|MessageConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|destination
operator|.
name|DestinationResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|removeStartingCharacters
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|JmsConfiguration
specifier|public
class|class
name|JmsConfiguration
implements|implements
name|Cloneable
block|{
DECL|field|QUEUE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_PREFIX
init|=
literal|"queue:"
decl_stmt|;
DECL|field|TOPIC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TOPIC_PREFIX
init|=
literal|"topic:"
decl_stmt|;
DECL|field|TEMP_QUEUE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_QUEUE_PREFIX
init|=
literal|"temp:queue:"
decl_stmt|;
DECL|field|TEMP_TOPIC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_TOPIC_PREFIX
init|=
literal|"temp:topic:"
decl_stmt|;
DECL|field|TRANSACTED
specifier|protected
specifier|static
specifier|final
name|String
name|TRANSACTED
init|=
literal|"TRANSACTED"
decl_stmt|;
DECL|field|CLIENT_ACKNOWLEDGE
specifier|protected
specifier|static
specifier|final
name|String
name|CLIENT_ACKNOWLEDGE
init|=
literal|"CLIENT_ACKNOWLEDGE"
decl_stmt|;
DECL|field|AUTO_ACKNOWLEDGE
specifier|protected
specifier|static
specifier|final
name|String
name|AUTO_ACKNOWLEDGE
init|=
literal|"AUTO_ACKNOWLEDGE"
decl_stmt|;
DECL|field|DUPS_OK_ACKNOWLEDGE
specifier|protected
specifier|static
specifier|final
name|String
name|DUPS_OK_ACKNOWLEDGE
init|=
literal|"DUPS_OK_ACKNOWLEDGE"
decl_stmt|;
DECL|field|REPLYTO_TEMP_DEST_AFFINITY_PER_COMPONENT
specifier|protected
specifier|static
specifier|final
name|String
name|REPLYTO_TEMP_DEST_AFFINITY_PER_COMPONENT
init|=
literal|"component"
decl_stmt|;
DECL|field|REPLYTO_TEMP_DEST_AFFINITY_PER_ENDPOINT
specifier|protected
specifier|static
specifier|final
name|String
name|REPLYTO_TEMP_DEST_AFFINITY_PER_ENDPOINT
init|=
literal|"endpoint"
decl_stmt|;
DECL|field|REPLYTO_TEMP_DEST_AFFINITY_PER_PRODUCER
specifier|protected
specifier|static
specifier|final
name|String
name|REPLYTO_TEMP_DEST_AFFINITY_PER_PRODUCER
init|=
literal|"producer"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JmsConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jmsOperations
specifier|private
name|JmsOperations
name|jmsOperations
decl_stmt|;
DECL|field|destinationResolver
specifier|private
name|DestinationResolver
name|destinationResolver
decl_stmt|;
DECL|field|connectionFactory
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
DECL|field|templateConnectionFactory
specifier|private
name|ConnectionFactory
name|templateConnectionFactory
decl_stmt|;
DECL|field|listenerConnectionFactory
specifier|private
name|ConnectionFactory
name|listenerConnectionFactory
decl_stmt|;
DECL|field|acknowledgementMode
specifier|private
name|int
name|acknowledgementMode
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|acknowledgementModeName
specifier|private
name|String
name|acknowledgementModeName
decl_stmt|;
comment|// Used to configure the spring Container
DECL|field|exceptionListener
specifier|private
name|ExceptionListener
name|exceptionListener
decl_stmt|;
DECL|field|consumerType
specifier|private
name|ConsumerType
name|consumerType
init|=
name|ConsumerType
operator|.
name|Default
decl_stmt|;
DECL|field|autoStartup
specifier|private
name|boolean
name|autoStartup
init|=
literal|true
decl_stmt|;
DECL|field|acceptMessagesWhileStopping
specifier|private
name|boolean
name|acceptMessagesWhileStopping
decl_stmt|;
DECL|field|clientId
specifier|private
name|String
name|clientId
decl_stmt|;
DECL|field|durableSubscriptionName
specifier|private
name|String
name|durableSubscriptionName
decl_stmt|;
DECL|field|subscriptionDurable
specifier|private
name|boolean
name|subscriptionDurable
decl_stmt|;
DECL|field|exposeListenerSession
specifier|private
name|boolean
name|exposeListenerSession
init|=
literal|true
decl_stmt|;
DECL|field|taskExecutor
specifier|private
name|TaskExecutor
name|taskExecutor
decl_stmt|;
DECL|field|pubSubNoLocal
specifier|private
name|boolean
name|pubSubNoLocal
decl_stmt|;
DECL|field|concurrentConsumers
specifier|private
name|int
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
DECL|field|maxMessagesPerTask
specifier|private
name|int
name|maxMessagesPerTask
init|=
literal|1
decl_stmt|;
DECL|field|serverSessionFactory
specifier|private
name|ServerSessionFactory
name|serverSessionFactory
decl_stmt|;
DECL|field|cacheLevel
specifier|private
name|int
name|cacheLevel
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|cacheLevelName
specifier|private
name|String
name|cacheLevelName
decl_stmt|;
DECL|field|recoveryInterval
specifier|private
name|long
name|recoveryInterval
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|receiveTimeout
specifier|private
name|long
name|receiveTimeout
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|requestTimeout
specifier|private
name|long
name|requestTimeout
init|=
literal|20000L
decl_stmt|;
DECL|field|idleTaskExecutionLimit
specifier|private
name|int
name|idleTaskExecutionLimit
init|=
literal|1
decl_stmt|;
DECL|field|maxConcurrentConsumers
specifier|private
name|int
name|maxConcurrentConsumers
init|=
literal|1
decl_stmt|;
comment|// JmsTemplate only
DECL|field|useVersion102
specifier|private
name|boolean
name|useVersion102
decl_stmt|;
DECL|field|explicitQosEnabled
specifier|private
name|Boolean
name|explicitQosEnabled
decl_stmt|;
DECL|field|deliveryPersistent
specifier|private
name|boolean
name|deliveryPersistent
init|=
literal|true
decl_stmt|;
DECL|field|replyToDeliveryPersistent
specifier|private
name|boolean
name|replyToDeliveryPersistent
init|=
literal|true
decl_stmt|;
DECL|field|timeToLive
specifier|private
name|long
name|timeToLive
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|messageConverter
specifier|private
name|MessageConverter
name|messageConverter
decl_stmt|;
DECL|field|messageIdEnabled
specifier|private
name|boolean
name|messageIdEnabled
init|=
literal|true
decl_stmt|;
DECL|field|messageTimestampEnabled
specifier|private
name|boolean
name|messageTimestampEnabled
init|=
literal|true
decl_stmt|;
DECL|field|priority
specifier|private
name|int
name|priority
init|=
operator|-
literal|1
decl_stmt|;
comment|// Transaction related configuration
DECL|field|transacted
specifier|private
name|boolean
name|transacted
decl_stmt|;
DECL|field|transactionManager
specifier|private
name|PlatformTransactionManager
name|transactionManager
decl_stmt|;
DECL|field|transactionName
specifier|private
name|String
name|transactionName
decl_stmt|;
DECL|field|transactionTimeout
specifier|private
name|int
name|transactionTimeout
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|preserveMessageQos
specifier|private
name|boolean
name|preserveMessageQos
decl_stmt|;
DECL|field|requestMapPurgePollTimeMillis
specifier|private
name|long
name|requestMapPurgePollTimeMillis
init|=
literal|1000L
decl_stmt|;
DECL|field|disableReplyTo
specifier|private
name|boolean
name|disableReplyTo
decl_stmt|;
DECL|field|eagerLoadingOfProperties
specifier|private
name|boolean
name|eagerLoadingOfProperties
decl_stmt|;
comment|// Always make a JMS message copy when it's passed to Producer
DECL|field|alwaysCopyMessage
specifier|private
name|boolean
name|alwaysCopyMessage
decl_stmt|;
DECL|field|useMessageIDAsCorrelationID
specifier|private
name|boolean
name|useMessageIDAsCorrelationID
decl_stmt|;
DECL|field|providerMetadata
specifier|private
name|JmsProviderMetadata
name|providerMetadata
init|=
operator|new
name|JmsProviderMetadata
argument_list|()
decl_stmt|;
DECL|field|metadataJmsOperations
specifier|private
name|JmsOperations
name|metadataJmsOperations
decl_stmt|;
comment|// defines the component created temporary replyTo destination sharing strategy:
comment|// possible values are: "component", "endpoint", "producer"
comment|// component - a single temp queue is shared among all producers for a given component instance
comment|// endpoint - a single temp queue is shared among all producers for a given endpoint instance
comment|// producer - a single temp queue is created per producer
DECL|field|replyToTempDestinationAffinity
specifier|private
name|String
name|replyToTempDestinationAffinity
init|=
name|REPLYTO_TEMP_DEST_AFFINITY_PER_ENDPOINT
decl_stmt|;
DECL|field|replyToDestination
specifier|private
name|String
name|replyToDestination
decl_stmt|;
DECL|field|replyToDestinationSelectorName
specifier|private
name|String
name|replyToDestinationSelectorName
decl_stmt|;
DECL|method|JmsConfiguration ()
specifier|public
name|JmsConfiguration
parameter_list|()
block|{     }
DECL|method|JmsConfiguration (ConnectionFactory connectionFactory)
specifier|public
name|JmsConfiguration
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
comment|/**      * Returns a copy of this configuration      */
DECL|method|copy ()
specifier|public
name|JmsConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|JmsConfiguration
operator|)
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|interface|MessageSentCallback
specifier|public
specifier|static
interface|interface
name|MessageSentCallback
block|{
DECL|method|sent (Message message)
name|void
name|sent
parameter_list|(
name|Message
name|message
parameter_list|)
function_decl|;
block|}
DECL|class|CamelJmsTemplate
specifier|public
specifier|static
class|class
name|CamelJmsTemplate
extends|extends
name|JmsTemplate
block|{
DECL|field|config
specifier|private
name|JmsConfiguration
name|config
decl_stmt|;
DECL|method|CamelJmsTemplate (JmsConfiguration config, ConnectionFactory connectionFactory)
specifier|public
name|CamelJmsTemplate
parameter_list|(
name|JmsConfiguration
name|config
parameter_list|,
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|super
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|send (final String destinationName, final MessageCreator messageCreator, final MessageSentCallback callback)
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|String
name|destinationName
parameter_list|,
specifier|final
name|MessageCreator
name|messageCreator
parameter_list|,
specifier|final
name|MessageSentCallback
name|callback
parameter_list|)
throws|throws
name|JmsException
block|{
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|()
block|{
specifier|public
name|Object
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|Destination
name|destination
init|=
name|resolveDestinationName
argument_list|(
name|session
argument_list|,
name|destinationName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|messageCreator
argument_list|,
literal|"MessageCreator must not be null"
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|createProducer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|message
operator|=
name|messageCreator
operator|.
name|createMessage
argument_list|(
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Sending created message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|doSend
argument_list|(
name|producer
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// Check commit - avoid commit call within a JTA transaction.
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
operator|&&
name|isSessionLocallyTransacted
argument_list|(
name|session
argument_list|)
condition|)
block|{
comment|// Transacted session created by this template -> commit.
name|JmsUtils
operator|.
name|commitIfNecessary
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|JmsUtils
operator|.
name|closeMessageProducer
argument_list|(
name|producer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|sent
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * Override so we can support preserving the Qos settings that have          * been set on the message.          */
annotation|@
name|Override
DECL|method|doSend (MessageProducer producer, Message message)
specifier|protected
name|void
name|doSend
parameter_list|(
name|MessageProducer
name|producer
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|config
operator|.
name|isPreserveMessageQos
argument_list|()
condition|)
block|{
name|long
name|ttl
init|=
name|message
operator|.
name|getJMSExpiration
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttl
operator|!=
literal|0
condition|)
block|{
name|ttl
operator|=
name|ttl
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Message had expired.. so set the ttl as small as
comment|// possible
if|if
condition|(
name|ttl
operator|<=
literal|0
condition|)
block|{
name|ttl
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|doSend
argument_list|(
name|producer
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|CamelJmsTeemplate102
specifier|public
specifier|static
class|class
name|CamelJmsTeemplate102
extends|extends
name|JmsTemplate102
block|{
DECL|field|config
specifier|private
name|JmsConfiguration
name|config
decl_stmt|;
DECL|method|CamelJmsTeemplate102 (JmsConfiguration config, ConnectionFactory connectionFactory, boolean pubSubDomain)
specifier|public
name|CamelJmsTeemplate102
parameter_list|(
name|JmsConfiguration
name|config
parameter_list|,
name|ConnectionFactory
name|connectionFactory
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
block|{
name|super
argument_list|(
name|connectionFactory
argument_list|,
name|pubSubDomain
argument_list|)
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|send (final String destinationName, final MessageCreator messageCreator, final MessageSentCallback callback)
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|String
name|destinationName
parameter_list|,
specifier|final
name|MessageCreator
name|messageCreator
parameter_list|,
specifier|final
name|MessageSentCallback
name|callback
parameter_list|)
throws|throws
name|JmsException
block|{
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|()
block|{
specifier|public
name|Object
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|Destination
name|destination
init|=
name|resolveDestinationName
argument_list|(
name|session
argument_list|,
name|destinationName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|notNull
argument_list|(
name|messageCreator
argument_list|,
literal|"MessageCreator must not be null"
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|createProducer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|message
operator|=
name|messageCreator
operator|.
name|createMessage
argument_list|(
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Sending created message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|doSend
argument_list|(
name|producer
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// Check commit - avoid commit call within a JTA
comment|// transaction.
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
operator|&&
name|isSessionLocallyTransacted
argument_list|(
name|session
argument_list|)
condition|)
block|{
comment|// Transacted session created by this template ->
comment|// commit.
name|JmsUtils
operator|.
name|commitIfNecessary
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|JmsUtils
operator|.
name|closeMessageProducer
argument_list|(
name|producer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|sent
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**          * Override so we can support preserving the Qos settings that have          * been set on the message.          */
annotation|@
name|Override
DECL|method|doSend (MessageProducer producer, Message message)
specifier|protected
name|void
name|doSend
parameter_list|(
name|MessageProducer
name|producer
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|config
operator|.
name|isPreserveMessageQos
argument_list|()
condition|)
block|{
name|long
name|ttl
init|=
name|message
operator|.
name|getJMSExpiration
argument_list|()
decl_stmt|;
if|if
condition|(
name|ttl
operator|!=
literal|0
condition|)
block|{
name|ttl
operator|=
name|ttl
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Message had expired.. so set the ttl as small as
comment|// possible
if|if
condition|(
name|ttl
operator|<=
literal|0
condition|)
block|{
name|ttl
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isPubSubDomain
argument_list|()
condition|)
block|{
operator|(
operator|(
name|TopicPublisher
operator|)
name|producer
operator|)
operator|.
name|publish
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|QueueSender
operator|)
name|producer
operator|)
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|doSend
argument_list|(
name|producer
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates a {@link JmsOperations} object used for request/response using a request      * timeout value      */
DECL|method|createInOutTemplate (JmsEndpoint endpoint, boolean pubSubDomain, String destination, long requestTimeout)
specifier|public
name|JmsOperations
name|createInOutTemplate
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|,
name|String
name|destination
parameter_list|,
name|long
name|requestTimeout
parameter_list|)
block|{
name|JmsOperations
name|answer
init|=
name|createInOnlyTemplate
argument_list|(
name|endpoint
argument_list|,
name|pubSubDomain
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|instanceof
name|JmsTemplate
operator|&&
name|requestTimeout
operator|>
literal|0
condition|)
block|{
name|JmsTemplate
name|jmsTemplate
init|=
operator|(
name|JmsTemplate
operator|)
name|answer
decl_stmt|;
name|jmsTemplate
operator|.
name|setExplicitQosEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setTimeToLive
argument_list|(
name|requestTimeout
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Creates a {@link JmsOperations} object used for one way messaging      */
DECL|method|createInOnlyTemplate (JmsEndpoint endpoint, boolean pubSubDomain, String destination)
specifier|public
name|JmsOperations
name|createInOnlyTemplate
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
if|if
condition|(
name|jmsOperations
operator|!=
literal|null
condition|)
block|{
return|return
name|jmsOperations
return|;
block|}
name|ConnectionFactory
name|factory
init|=
name|getTemplateConnectionFactory
argument_list|()
decl_stmt|;
name|JmsTemplate
name|template
init|=
name|useVersion102
condition|?
operator|new
name|CamelJmsTeemplate102
argument_list|(
name|this
argument_list|,
name|factory
argument_list|,
name|pubSubDomain
argument_list|)
else|:
operator|new
name|CamelJmsTemplate
argument_list|(
name|this
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|template
operator|.
name|setPubSubDomain
argument_list|(
name|pubSubDomain
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinationResolver
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setDestinationResolver
argument_list|(
name|destinationResolver
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|DestinationEndpoint
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"You are overloading the destinationResolver property on a DestinationEndpoint; are you sure you want to do that?"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|instanceof
name|DestinationEndpoint
condition|)
block|{
name|DestinationEndpoint
name|destinationEndpoint
init|=
operator|(
name|DestinationEndpoint
operator|)
name|endpoint
decl_stmt|;
name|template
operator|.
name|setDestinationResolver
argument_list|(
name|createDestinationResolver
argument_list|(
name|destinationEndpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setDefaultDestinationName
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|template
operator|.
name|setExplicitQosEnabled
argument_list|(
name|isExplicitQosEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|template
operator|.
name|setDeliveryPersistent
argument_list|(
name|deliveryPersistent
argument_list|)
expr_stmt|;
if|if
condition|(
name|messageConverter
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setMessageConverter
argument_list|(
name|messageConverter
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setMessageIdEnabled
argument_list|(
name|messageIdEnabled
argument_list|)
expr_stmt|;
name|template
operator|.
name|setMessageTimestampEnabled
argument_list|(
name|messageTimestampEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|priority
operator|>=
literal|0
condition|)
block|{
name|template
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setPubSubNoLocal
argument_list|(
name|pubSubNoLocal
argument_list|)
expr_stmt|;
if|if
condition|(
name|receiveTimeout
operator|>=
literal|0
condition|)
block|{
name|template
operator|.
name|setReceiveTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeToLive
operator|>=
literal|0
condition|)
block|{
name|template
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|setSessionTransacted
argument_list|(
name|transacted
argument_list|)
expr_stmt|;
if|if
condition|(
name|transacted
condition|)
block|{
name|template
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This is here for completeness, but the template should not get
comment|// used
comment|// for receiving messages.
if|if
condition|(
name|acknowledgementMode
operator|>=
literal|0
condition|)
block|{
name|template
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|acknowledgementMode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|acknowledgementModeName
operator|!=
literal|null
condition|)
block|{
name|template
operator|.
name|setSessionAcknowledgeModeName
argument_list|(
name|acknowledgementModeName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|template
return|;
block|}
DECL|method|createMessageListenerContainer (JmsEndpoint endpoint)
specifier|public
name|AbstractMessageListenerContainer
name|createMessageListenerContainer
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
name|AbstractMessageListenerContainer
name|container
init|=
name|chooseMessageListenerContainerImplementation
argument_list|()
decl_stmt|;
name|configureMessageListenerContainer
argument_list|(
name|container
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|connectionFactory
operator|==
literal|null
condition|)
block|{
name|connectionFactory
operator|=
name|createConnectionFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|connectionFactory
return|;
block|}
comment|/**      * Sets the default connection factory to be used if a connection factory is      * not specified for either      * {@link #setTemplateConnectionFactory(ConnectionFactory)} or      * {@link #setListenerConnectionFactory(ConnectionFactory)}      *      * @param connectionFactory the default connection factory to use      */
DECL|method|setConnectionFactory (ConnectionFactory connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
DECL|method|getListenerConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getListenerConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|listenerConnectionFactory
operator|==
literal|null
condition|)
block|{
name|listenerConnectionFactory
operator|=
name|createListenerConnectionFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|listenerConnectionFactory
return|;
block|}
comment|/**      * Sets the connection factory to be used for consuming messages via the      * {@link #createMessageListenerContainer(JmsEndpoint)}      *      * @param listenerConnectionFactory the connection factory to use for      *                consuming messages      */
DECL|method|setListenerConnectionFactory (ConnectionFactory listenerConnectionFactory)
specifier|public
name|void
name|setListenerConnectionFactory
parameter_list|(
name|ConnectionFactory
name|listenerConnectionFactory
parameter_list|)
block|{
name|this
operator|.
name|listenerConnectionFactory
operator|=
name|listenerConnectionFactory
expr_stmt|;
block|}
DECL|method|getTemplateConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getTemplateConnectionFactory
parameter_list|()
block|{
if|if
condition|(
name|templateConnectionFactory
operator|==
literal|null
condition|)
block|{
name|templateConnectionFactory
operator|=
name|createTemplateConnectionFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|templateConnectionFactory
return|;
block|}
comment|/**      * Sets the connection factory to be used for sending messages via the      * {@link JmsTemplate} via {@link #createInOnlyTemplate(JmsEndpoint,boolean, String)}      *      * @param templateConnectionFactory the connection factory for sending      *                messages      */
DECL|method|setTemplateConnectionFactory (ConnectionFactory templateConnectionFactory)
specifier|public
name|void
name|setTemplateConnectionFactory
parameter_list|(
name|ConnectionFactory
name|templateConnectionFactory
parameter_list|)
block|{
name|this
operator|.
name|templateConnectionFactory
operator|=
name|templateConnectionFactory
expr_stmt|;
block|}
DECL|method|isUseVersion102 ()
specifier|public
name|boolean
name|isUseVersion102
parameter_list|()
block|{
return|return
name|useVersion102
return|;
block|}
DECL|method|setUseVersion102 (boolean useVersion102)
specifier|public
name|void
name|setUseVersion102
parameter_list|(
name|boolean
name|useVersion102
parameter_list|)
block|{
name|this
operator|.
name|useVersion102
operator|=
name|useVersion102
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
DECL|method|setAutoStartup (boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|isAcceptMessagesWhileStopping ()
specifier|public
name|boolean
name|isAcceptMessagesWhileStopping
parameter_list|()
block|{
return|return
name|acceptMessagesWhileStopping
return|;
block|}
DECL|method|setAcceptMessagesWhileStopping (boolean acceptMessagesWhileStopping)
specifier|public
name|void
name|setAcceptMessagesWhileStopping
parameter_list|(
name|boolean
name|acceptMessagesWhileStopping
parameter_list|)
block|{
name|this
operator|.
name|acceptMessagesWhileStopping
operator|=
name|acceptMessagesWhileStopping
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|clientId
return|;
block|}
DECL|method|setClientId (String consumerClientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|consumerClientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|consumerClientId
expr_stmt|;
block|}
DECL|method|getDurableSubscriptionName ()
specifier|public
name|String
name|getDurableSubscriptionName
parameter_list|()
block|{
return|return
name|durableSubscriptionName
return|;
block|}
DECL|method|setDurableSubscriptionName (String durableSubscriptionName)
specifier|public
name|void
name|setDurableSubscriptionName
parameter_list|(
name|String
name|durableSubscriptionName
parameter_list|)
block|{
name|this
operator|.
name|durableSubscriptionName
operator|=
name|durableSubscriptionName
expr_stmt|;
block|}
DECL|method|getExceptionListener ()
specifier|public
name|ExceptionListener
name|getExceptionListener
parameter_list|()
block|{
return|return
name|exceptionListener
return|;
block|}
DECL|method|setExceptionListener (ExceptionListener exceptionListener)
specifier|public
name|void
name|setExceptionListener
parameter_list|(
name|ExceptionListener
name|exceptionListener
parameter_list|)
block|{
name|this
operator|.
name|exceptionListener
operator|=
name|exceptionListener
expr_stmt|;
block|}
DECL|method|isSubscriptionDurable ()
specifier|public
name|boolean
name|isSubscriptionDurable
parameter_list|()
block|{
return|return
name|subscriptionDurable
return|;
block|}
DECL|method|setSubscriptionDurable (boolean subscriptionDurable)
specifier|public
name|void
name|setSubscriptionDurable
parameter_list|(
name|boolean
name|subscriptionDurable
parameter_list|)
block|{
name|this
operator|.
name|subscriptionDurable
operator|=
name|subscriptionDurable
expr_stmt|;
block|}
DECL|method|getAcknowledgementModeName ()
specifier|public
name|String
name|getAcknowledgementModeName
parameter_list|()
block|{
return|return
name|acknowledgementModeName
return|;
block|}
DECL|method|setAcknowledgementModeName (String consumerAcknowledgementMode)
specifier|public
name|void
name|setAcknowledgementModeName
parameter_list|(
name|String
name|consumerAcknowledgementMode
parameter_list|)
block|{
name|this
operator|.
name|acknowledgementModeName
operator|=
name|consumerAcknowledgementMode
expr_stmt|;
name|this
operator|.
name|acknowledgementMode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|isExposeListenerSession ()
specifier|public
name|boolean
name|isExposeListenerSession
parameter_list|()
block|{
return|return
name|exposeListenerSession
return|;
block|}
DECL|method|setExposeListenerSession (boolean exposeListenerSession)
specifier|public
name|void
name|setExposeListenerSession
parameter_list|(
name|boolean
name|exposeListenerSession
parameter_list|)
block|{
name|this
operator|.
name|exposeListenerSession
operator|=
name|exposeListenerSession
expr_stmt|;
block|}
DECL|method|getTaskExecutor ()
specifier|public
name|TaskExecutor
name|getTaskExecutor
parameter_list|()
block|{
return|return
name|taskExecutor
return|;
block|}
DECL|method|setTaskExecutor (TaskExecutor taskExecutor)
specifier|public
name|void
name|setTaskExecutor
parameter_list|(
name|TaskExecutor
name|taskExecutor
parameter_list|)
block|{
name|this
operator|.
name|taskExecutor
operator|=
name|taskExecutor
expr_stmt|;
block|}
DECL|method|isPubSubNoLocal ()
specifier|public
name|boolean
name|isPubSubNoLocal
parameter_list|()
block|{
return|return
name|pubSubNoLocal
return|;
block|}
DECL|method|setPubSubNoLocal (boolean pubSubNoLocal)
specifier|public
name|void
name|setPubSubNoLocal
parameter_list|(
name|boolean
name|pubSubNoLocal
parameter_list|)
block|{
name|this
operator|.
name|pubSubNoLocal
operator|=
name|pubSubNoLocal
expr_stmt|;
block|}
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|getMaxMessagesPerTask ()
specifier|public
name|int
name|getMaxMessagesPerTask
parameter_list|()
block|{
return|return
name|maxMessagesPerTask
return|;
block|}
DECL|method|setMaxMessagesPerTask (int maxMessagesPerTask)
specifier|public
name|void
name|setMaxMessagesPerTask
parameter_list|(
name|int
name|maxMessagesPerTask
parameter_list|)
block|{
name|this
operator|.
name|maxMessagesPerTask
operator|=
name|maxMessagesPerTask
expr_stmt|;
block|}
DECL|method|getServerSessionFactory ()
specifier|public
name|ServerSessionFactory
name|getServerSessionFactory
parameter_list|()
block|{
return|return
name|serverSessionFactory
return|;
block|}
DECL|method|setServerSessionFactory (ServerSessionFactory serverSessionFactory)
specifier|public
name|void
name|setServerSessionFactory
parameter_list|(
name|ServerSessionFactory
name|serverSessionFactory
parameter_list|)
block|{
name|this
operator|.
name|serverSessionFactory
operator|=
name|serverSessionFactory
expr_stmt|;
block|}
DECL|method|getCacheLevel ()
specifier|public
name|int
name|getCacheLevel
parameter_list|()
block|{
return|return
name|cacheLevel
return|;
block|}
DECL|method|setCacheLevel (int cacheLevel)
specifier|public
name|void
name|setCacheLevel
parameter_list|(
name|int
name|cacheLevel
parameter_list|)
block|{
name|this
operator|.
name|cacheLevel
operator|=
name|cacheLevel
expr_stmt|;
block|}
DECL|method|getCacheLevelName ()
specifier|public
name|String
name|getCacheLevelName
parameter_list|()
block|{
return|return
name|cacheLevelName
return|;
block|}
DECL|method|setCacheLevelName (String cacheName)
specifier|public
name|void
name|setCacheLevelName
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
name|this
operator|.
name|cacheLevelName
operator|=
name|cacheName
expr_stmt|;
block|}
DECL|method|getRecoveryInterval ()
specifier|public
name|long
name|getRecoveryInterval
parameter_list|()
block|{
return|return
name|recoveryInterval
return|;
block|}
DECL|method|setRecoveryInterval (long recoveryInterval)
specifier|public
name|void
name|setRecoveryInterval
parameter_list|(
name|long
name|recoveryInterval
parameter_list|)
block|{
name|this
operator|.
name|recoveryInterval
operator|=
name|recoveryInterval
expr_stmt|;
block|}
DECL|method|getReceiveTimeout ()
specifier|public
name|long
name|getReceiveTimeout
parameter_list|()
block|{
return|return
name|receiveTimeout
return|;
block|}
DECL|method|setReceiveTimeout (long receiveTimeout)
specifier|public
name|void
name|setReceiveTimeout
parameter_list|(
name|long
name|receiveTimeout
parameter_list|)
block|{
name|this
operator|.
name|receiveTimeout
operator|=
name|receiveTimeout
expr_stmt|;
block|}
DECL|method|getTransactionManager ()
specifier|public
name|PlatformTransactionManager
name|getTransactionManager
parameter_list|()
block|{
return|return
name|transactionManager
return|;
block|}
DECL|method|setTransactionManager (PlatformTransactionManager transactionManager)
specifier|public
name|void
name|setTransactionManager
parameter_list|(
name|PlatformTransactionManager
name|transactionManager
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
block|}
DECL|method|getTransactionName ()
specifier|public
name|String
name|getTransactionName
parameter_list|()
block|{
return|return
name|transactionName
return|;
block|}
DECL|method|setTransactionName (String transactionName)
specifier|public
name|void
name|setTransactionName
parameter_list|(
name|String
name|transactionName
parameter_list|)
block|{
name|this
operator|.
name|transactionName
operator|=
name|transactionName
expr_stmt|;
block|}
DECL|method|getTransactionTimeout ()
specifier|public
name|int
name|getTransactionTimeout
parameter_list|()
block|{
return|return
name|transactionTimeout
return|;
block|}
DECL|method|setTransactionTimeout (int transactionTimeout)
specifier|public
name|void
name|setTransactionTimeout
parameter_list|(
name|int
name|transactionTimeout
parameter_list|)
block|{
name|this
operator|.
name|transactionTimeout
operator|=
name|transactionTimeout
expr_stmt|;
block|}
DECL|method|getIdleTaskExecutionLimit ()
specifier|public
name|int
name|getIdleTaskExecutionLimit
parameter_list|()
block|{
return|return
name|idleTaskExecutionLimit
return|;
block|}
DECL|method|setIdleTaskExecutionLimit (int idleTaskExecutionLimit)
specifier|public
name|void
name|setIdleTaskExecutionLimit
parameter_list|(
name|int
name|idleTaskExecutionLimit
parameter_list|)
block|{
name|this
operator|.
name|idleTaskExecutionLimit
operator|=
name|idleTaskExecutionLimit
expr_stmt|;
block|}
DECL|method|getMaxConcurrentConsumers ()
specifier|public
name|int
name|getMaxConcurrentConsumers
parameter_list|()
block|{
return|return
name|maxConcurrentConsumers
return|;
block|}
DECL|method|setMaxConcurrentConsumers (int maxConcurrentConsumers)
specifier|public
name|void
name|setMaxConcurrentConsumers
parameter_list|(
name|int
name|maxConcurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|maxConcurrentConsumers
operator|=
name|maxConcurrentConsumers
expr_stmt|;
block|}
DECL|method|isExplicitQosEnabled ()
specifier|public
name|boolean
name|isExplicitQosEnabled
parameter_list|()
block|{
return|return
name|explicitQosEnabled
operator|!=
literal|null
condition|?
name|explicitQosEnabled
else|:
literal|false
return|;
block|}
DECL|method|setExplicitQosEnabled (boolean explicitQosEnabled)
specifier|public
name|void
name|setExplicitQosEnabled
parameter_list|(
name|boolean
name|explicitQosEnabled
parameter_list|)
block|{
name|this
operator|.
name|explicitQosEnabled
operator|=
name|explicitQosEnabled
expr_stmt|;
block|}
DECL|method|isDeliveryPersistent ()
specifier|public
name|boolean
name|isDeliveryPersistent
parameter_list|()
block|{
return|return
name|deliveryPersistent
return|;
block|}
DECL|method|setDeliveryPersistent (boolean deliveryPersistent)
specifier|public
name|void
name|setDeliveryPersistent
parameter_list|(
name|boolean
name|deliveryPersistent
parameter_list|)
block|{
name|this
operator|.
name|deliveryPersistent
operator|=
name|deliveryPersistent
expr_stmt|;
name|configuredQoS
argument_list|()
expr_stmt|;
block|}
DECL|method|isReplyToDeliveryPersistent ()
specifier|public
name|boolean
name|isReplyToDeliveryPersistent
parameter_list|()
block|{
return|return
name|replyToDeliveryPersistent
return|;
block|}
DECL|method|setReplyToDeliveryPersistent (boolean replyToDeliveryPersistent)
specifier|public
name|void
name|setReplyToDeliveryPersistent
parameter_list|(
name|boolean
name|replyToDeliveryPersistent
parameter_list|)
block|{
name|this
operator|.
name|replyToDeliveryPersistent
operator|=
name|replyToDeliveryPersistent
expr_stmt|;
block|}
DECL|method|getTimeToLive ()
specifier|public
name|long
name|getTimeToLive
parameter_list|()
block|{
return|return
name|timeToLive
return|;
block|}
DECL|method|setTimeToLive (long timeToLive)
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|long
name|timeToLive
parameter_list|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
name|configuredQoS
argument_list|()
expr_stmt|;
block|}
DECL|method|getMessageConverter ()
specifier|public
name|MessageConverter
name|getMessageConverter
parameter_list|()
block|{
return|return
name|messageConverter
return|;
block|}
DECL|method|setMessageConverter (MessageConverter messageConverter)
specifier|public
name|void
name|setMessageConverter
parameter_list|(
name|MessageConverter
name|messageConverter
parameter_list|)
block|{
name|this
operator|.
name|messageConverter
operator|=
name|messageConverter
expr_stmt|;
block|}
DECL|method|isMessageIdEnabled ()
specifier|public
name|boolean
name|isMessageIdEnabled
parameter_list|()
block|{
return|return
name|messageIdEnabled
return|;
block|}
DECL|method|setMessageIdEnabled (boolean messageIdEnabled)
specifier|public
name|void
name|setMessageIdEnabled
parameter_list|(
name|boolean
name|messageIdEnabled
parameter_list|)
block|{
name|this
operator|.
name|messageIdEnabled
operator|=
name|messageIdEnabled
expr_stmt|;
block|}
DECL|method|isMessageTimestampEnabled ()
specifier|public
name|boolean
name|isMessageTimestampEnabled
parameter_list|()
block|{
return|return
name|messageTimestampEnabled
return|;
block|}
DECL|method|setMessageTimestampEnabled (boolean messageTimestampEnabled)
specifier|public
name|void
name|setMessageTimestampEnabled
parameter_list|(
name|boolean
name|messageTimestampEnabled
parameter_list|)
block|{
name|this
operator|.
name|messageTimestampEnabled
operator|=
name|messageTimestampEnabled
expr_stmt|;
block|}
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
DECL|method|setPriority (int priority)
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|configuredQoS
argument_list|()
expr_stmt|;
block|}
DECL|method|getConsumerType ()
specifier|public
name|ConsumerType
name|getConsumerType
parameter_list|()
block|{
return|return
name|consumerType
return|;
block|}
DECL|method|setConsumerType (ConsumerType consumerType)
specifier|public
name|void
name|setConsumerType
parameter_list|(
name|ConsumerType
name|consumerType
parameter_list|)
block|{
name|this
operator|.
name|consumerType
operator|=
name|consumerType
expr_stmt|;
block|}
DECL|method|getAcknowledgementMode ()
specifier|public
name|int
name|getAcknowledgementMode
parameter_list|()
block|{
return|return
name|acknowledgementMode
return|;
block|}
DECL|method|setAcknowledgementMode (int consumerAcknowledgementMode)
specifier|public
name|void
name|setAcknowledgementMode
parameter_list|(
name|int
name|consumerAcknowledgementMode
parameter_list|)
block|{
name|this
operator|.
name|acknowledgementMode
operator|=
name|consumerAcknowledgementMode
expr_stmt|;
name|this
operator|.
name|acknowledgementModeName
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|isTransacted ()
specifier|public
name|boolean
name|isTransacted
parameter_list|()
block|{
return|return
name|transacted
return|;
block|}
DECL|method|setTransacted (boolean consumerTransacted)
specifier|public
name|void
name|setTransacted
parameter_list|(
name|boolean
name|consumerTransacted
parameter_list|)
block|{
name|this
operator|.
name|transacted
operator|=
name|consumerTransacted
expr_stmt|;
block|}
DECL|method|isEagerLoadingOfProperties ()
specifier|public
name|boolean
name|isEagerLoadingOfProperties
parameter_list|()
block|{
return|return
name|eagerLoadingOfProperties
return|;
block|}
comment|/**      * Enables eager loading of JMS properties as soon as a message is loaded      * which generally is inefficient as the JMS properties may not be required      * but sometimes can catch early any issues with the underlying JMS provider      * and the use of JMS properties      *      * @param eagerLoadingOfProperties whether or not to enable eager loading of      *                JMS properties on inbound messages      */
DECL|method|setEagerLoadingOfProperties (boolean eagerLoadingOfProperties)
specifier|public
name|void
name|setEagerLoadingOfProperties
parameter_list|(
name|boolean
name|eagerLoadingOfProperties
parameter_list|)
block|{
name|this
operator|.
name|eagerLoadingOfProperties
operator|=
name|eagerLoadingOfProperties
expr_stmt|;
block|}
DECL|method|isDisableReplyTo ()
specifier|public
name|boolean
name|isDisableReplyTo
parameter_list|()
block|{
return|return
name|disableReplyTo
return|;
block|}
comment|/**      * Disables the use of the JMSReplyTo header for consumers so that inbound      * messages are treated as InOnly rather than InOut requests.      *      * @param disableReplyTo whether or not to disable the use of JMSReplyTo      *                header indicating an InOut      */
DECL|method|setDisableReplyTo (boolean disableReplyTo)
specifier|public
name|void
name|setDisableReplyTo
parameter_list|(
name|boolean
name|disableReplyTo
parameter_list|)
block|{
name|this
operator|.
name|disableReplyTo
operator|=
name|disableReplyTo
expr_stmt|;
block|}
comment|/**      * Set to true if you want to send message using the QoS settings specified      * on the message. Normally the QoS settings used are the one configured on      * this Object.      *      * @param preserveMessageQos      */
DECL|method|setPreserveMessageQos (boolean preserveMessageQos)
specifier|public
name|void
name|setPreserveMessageQos
parameter_list|(
name|boolean
name|preserveMessageQos
parameter_list|)
block|{
name|this
operator|.
name|preserveMessageQos
operator|=
name|preserveMessageQos
expr_stmt|;
block|}
DECL|method|getJmsOperations ()
specifier|public
name|JmsOperations
name|getJmsOperations
parameter_list|()
block|{
return|return
name|jmsOperations
return|;
block|}
DECL|method|setJmsOperations (JmsOperations jmsOperations)
specifier|public
name|void
name|setJmsOperations
parameter_list|(
name|JmsOperations
name|jmsOperations
parameter_list|)
block|{
name|this
operator|.
name|jmsOperations
operator|=
name|jmsOperations
expr_stmt|;
block|}
DECL|method|getDestinationResolver ()
specifier|public
name|DestinationResolver
name|getDestinationResolver
parameter_list|()
block|{
return|return
name|destinationResolver
return|;
block|}
DECL|method|setDestinationResolver (DestinationResolver destinationResolver)
specifier|public
name|void
name|setDestinationResolver
parameter_list|(
name|DestinationResolver
name|destinationResolver
parameter_list|)
block|{
name|this
operator|.
name|destinationResolver
operator|=
name|destinationResolver
expr_stmt|;
block|}
DECL|method|getRequestMapPurgePollTimeMillis ()
specifier|public
name|long
name|getRequestMapPurgePollTimeMillis
parameter_list|()
block|{
return|return
name|requestMapPurgePollTimeMillis
return|;
block|}
comment|/**      * Sets the frequency that the requestMap for InOut exchanges is purged for      * timed out message exchanges      *      * @param requestMapPurgePollTimeMillis      */
DECL|method|setRequestMapPurgePollTimeMillis (long requestMapPurgePollTimeMillis)
specifier|public
name|void
name|setRequestMapPurgePollTimeMillis
parameter_list|(
name|long
name|requestMapPurgePollTimeMillis
parameter_list|)
block|{
name|this
operator|.
name|requestMapPurgePollTimeMillis
operator|=
name|requestMapPurgePollTimeMillis
expr_stmt|;
block|}
DECL|method|getProviderMetadata ()
specifier|public
name|JmsProviderMetadata
name|getProviderMetadata
parameter_list|()
block|{
return|return
name|providerMetadata
return|;
block|}
comment|/**      * Allows the provider metadata to be explicitly configured. Typically this is not required      * and Camel will auto-detect the provider metadata from the underlying provider.      */
DECL|method|setProviderMetadata (JmsProviderMetadata providerMetadata)
specifier|public
name|void
name|setProviderMetadata
parameter_list|(
name|JmsProviderMetadata
name|providerMetadata
parameter_list|)
block|{
name|this
operator|.
name|providerMetadata
operator|=
name|providerMetadata
expr_stmt|;
block|}
DECL|method|getMetadataJmsOperations (JmsEndpoint endpoint)
specifier|public
name|JmsOperations
name|getMetadataJmsOperations
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
if|if
condition|(
name|metadataJmsOperations
operator|==
literal|null
condition|)
block|{
name|metadataJmsOperations
operator|=
name|getJmsOperations
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadataJmsOperations
operator|==
literal|null
condition|)
block|{
name|metadataJmsOperations
operator|=
name|createInOnlyTemplate
argument_list|(
name|endpoint
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metadataJmsOperations
return|;
block|}
comment|/**      * Sets the {@link JmsOperations} used to deduce the {@link JmsProviderMetadata} details which if none      * is customized one is lazily created on demand      *      * @param metadataJmsOperations      */
DECL|method|setMetadataJmsOperations (JmsOperations metadataJmsOperations)
specifier|public
name|void
name|setMetadataJmsOperations
parameter_list|(
name|JmsOperations
name|metadataJmsOperations
parameter_list|)
block|{
name|this
operator|.
name|metadataJmsOperations
operator|=
name|metadataJmsOperations
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
DECL|method|createDestinationResolver (final DestinationEndpoint destinationEndpoint)
specifier|public
specifier|static
name|DestinationResolver
name|createDestinationResolver
parameter_list|(
specifier|final
name|DestinationEndpoint
name|destinationEndpoint
parameter_list|)
block|{
return|return
operator|new
name|DestinationResolver
argument_list|()
block|{
specifier|public
name|Destination
name|resolveDestinationName
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|destinationEndpoint
operator|.
name|getJmsDestination
argument_list|(
name|session
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|configureMessageListenerContainer (AbstractMessageListenerContainer container, JmsEndpoint endpoint)
specifier|protected
name|void
name|configureMessageListenerContainer
parameter_list|(
name|AbstractMessageListenerContainer
name|container
parameter_list|,
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
name|container
operator|.
name|setConnectionFactory
argument_list|(
name|getListenerConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|DestinationEndpoint
condition|)
block|{
name|container
operator|.
name|setDestinationResolver
argument_list|(
name|createDestinationResolver
argument_list|(
operator|(
name|DestinationEndpoint
operator|)
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destinationResolver
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setDestinationResolver
argument_list|(
name|destinationResolver
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoStartup
condition|)
block|{
name|container
operator|.
name|setAutoStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setSubscriptionDurable
argument_list|(
name|subscriptionDurable
argument_list|)
expr_stmt|;
if|if
condition|(
name|durableSubscriptionName
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setDurableSubscriptionName
argument_list|(
name|durableSubscriptionName
argument_list|)
expr_stmt|;
block|}
comment|// lets default to durable subscription if the subscriber name and
comment|// client ID are specified (as there's
comment|// no reason to specify them if not! :)
if|if
condition|(
name|durableSubscriptionName
operator|!=
literal|null
operator|&&
name|clientId
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setSubscriptionDurable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exceptionListener
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setExceptionListener
argument_list|(
name|exceptionListener
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setAcceptMessagesWhileStopping
argument_list|(
name|acceptMessagesWhileStopping
argument_list|)
expr_stmt|;
name|container
operator|.
name|setExposeListenerSession
argument_list|(
name|exposeListenerSession
argument_list|)
expr_stmt|;
name|container
operator|.
name|setSessionTransacted
argument_list|(
name|transacted
argument_list|)
expr_stmt|;
if|if
condition|(
name|transacted
condition|)
block|{
name|container
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|acknowledgementMode
operator|>=
literal|0
condition|)
block|{
name|container
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|acknowledgementMode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|acknowledgementModeName
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|setSessionAcknowledgeModeName
argument_list|(
name|acknowledgementModeName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|endpoint
operator|.
name|getSelector
argument_list|()
operator|!=
literal|null
operator|&&
name|endpoint
operator|.
name|getSelector
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|container
operator|.
name|setMessageSelector
argument_list|(
name|endpoint
operator|.
name|getSelector
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|instanceof
name|DefaultMessageListenerContainer
condition|)
block|{
comment|// this includes DefaultMessageListenerContainer102
name|DefaultMessageListenerContainer
name|listenerContainer
init|=
operator|(
name|DefaultMessageListenerContainer
operator|)
name|container
decl_stmt|;
if|if
condition|(
name|concurrentConsumers
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setConcurrentConsumers
argument_list|(
name|concurrentConsumers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cacheLevel
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setCacheLevel
argument_list|(
name|cacheLevel
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cacheLevelName
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setCacheLevelName
argument_list|(
name|cacheLevelName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listenerContainer
operator|.
name|setCacheLevel
argument_list|(
name|defaultCacheLevel
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idleTaskExecutionLimit
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setIdleTaskExecutionLimit
argument_list|(
name|idleTaskExecutionLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxConcurrentConsumers
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setMaxConcurrentConsumers
argument_list|(
name|maxConcurrentConsumers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxMessagesPerTask
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setMaxMessagesPerTask
argument_list|(
name|maxMessagesPerTask
argument_list|)
expr_stmt|;
block|}
name|listenerContainer
operator|.
name|setPubSubNoLocal
argument_list|(
name|pubSubNoLocal
argument_list|)
expr_stmt|;
if|if
condition|(
name|receiveTimeout
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setReceiveTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|recoveryInterval
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setRecoveryInterval
argument_list|(
name|recoveryInterval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskExecutor
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setTaskExecutor
argument_list|(
name|taskExecutor
argument_list|)
expr_stmt|;
block|}
name|PlatformTransactionManager
name|tm
init|=
name|getTransactionManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setTransactionManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|transacted
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property transacted is enabled but a transactionManager was not injected!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|transactionName
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setTransactionName
argument_list|(
name|transactionName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transactionTimeout
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setTransactionTimeout
argument_list|(
name|transactionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|container
operator|instanceof
name|ServerSessionMessageListenerContainer
condition|)
block|{
comment|// this includes ServerSessionMessageListenerContainer102
name|ServerSessionMessageListenerContainer
name|listenerContainer
init|=
operator|(
name|ServerSessionMessageListenerContainer
operator|)
name|container
decl_stmt|;
if|if
condition|(
name|maxMessagesPerTask
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setMaxMessagesPerTask
argument_list|(
name|maxMessagesPerTask
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serverSessionFactory
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setServerSessionFactory
argument_list|(
name|serverSessionFactory
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|container
operator|instanceof
name|SimpleMessageListenerContainer
condition|)
block|{
comment|// this includes SimpleMessageListenerContainer102
name|SimpleMessageListenerContainer
name|listenerContainer
init|=
operator|(
name|SimpleMessageListenerContainer
operator|)
name|container
decl_stmt|;
if|if
condition|(
name|concurrentConsumers
operator|>=
literal|0
condition|)
block|{
name|listenerContainer
operator|.
name|setConcurrentConsumers
argument_list|(
name|concurrentConsumers
argument_list|)
expr_stmt|;
block|}
name|listenerContainer
operator|.
name|setPubSubNoLocal
argument_list|(
name|pubSubNoLocal
argument_list|)
expr_stmt|;
if|if
condition|(
name|taskExecutor
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setTaskExecutor
argument_list|(
name|taskExecutor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|configure (EndpointMessageListener listener)
specifier|public
name|void
name|configure
parameter_list|(
name|EndpointMessageListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|isDisableReplyTo
argument_list|()
condition|)
block|{
name|listener
operator|.
name|setDisableReplyTo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEagerLoadingOfProperties
argument_list|()
condition|)
block|{
name|listener
operator|.
name|setEagerLoadingOfProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// REVISIT: We really ought to change the model and let JmsProducer
comment|// and JmsConsumer have their own JmsConfiguration instance
comment|// This way producer's and consumer's QoS can differ and be
comment|// independently configured
name|JmsOperations
name|operations
init|=
name|listener
operator|.
name|getTemplate
argument_list|()
decl_stmt|;
if|if
condition|(
name|operations
operator|instanceof
name|JmsTemplate
condition|)
block|{
name|JmsTemplate
name|template
init|=
operator|(
name|JmsTemplate
operator|)
name|operations
decl_stmt|;
name|template
operator|.
name|setDeliveryPersistent
argument_list|(
name|isReplyToDeliveryPersistent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|chooseMessageListenerContainerImplementation ()
specifier|public
name|AbstractMessageListenerContainer
name|chooseMessageListenerContainerImplementation
parameter_list|()
block|{
comment|// TODO we could allow a spring container to auto-inject these objects?
switch|switch
condition|(
name|consumerType
condition|)
block|{
case|case
name|Simple
case|:
return|return
name|isUseVersion102
argument_list|()
condition|?
operator|new
name|SimpleMessageListenerContainer102
argument_list|()
else|:
operator|new
name|SimpleMessageListenerContainer
argument_list|()
return|;
case|case
name|ServerSessionPool
case|:
return|return
name|isUseVersion102
argument_list|()
condition|?
operator|new
name|ServerSessionMessageListenerContainer102
argument_list|()
else|:
operator|new
name|ServerSessionMessageListenerContainer
argument_list|()
return|;
case|case
name|Default
case|:
return|return
name|isUseVersion102
argument_list|()
condition|?
operator|new
name|DefaultMessageListenerContainer102
argument_list|()
else|:
operator|new
name|DefaultMessageListenerContainer
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown consumer type: "
operator|+
name|consumerType
argument_list|)
throw|;
block|}
block|}
comment|/**      * Defaults the JMS cache level if none is explicitly specified. Note that      * due to this<a      * href="http://opensource.atlassian.com/projects/spring/browse/SPR-3890">Spring      * Bug</a> we cannot use CACHE_CONSUMER by default (which we should do as      * its most efficient) unless the spring version is 2.5.1 or later. Instead      * we use CACHE_CONNECTION - part from for non-durable topics which must use      * CACHE_CONSUMER to avoid missing messages (due to the consumer being      * created and destroyed per message).      *      * @param endpoint the endpoint      * @return the cacne level      */
DECL|method|defaultCacheLevel (JmsEndpoint endpoint)
specifier|protected
name|int
name|defaultCacheLevel
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
comment|// if we are on a new enough spring version we can assume CACHE_CONSUMER
if|if
condition|(
name|PackageHelper
operator|.
name|isValidVersion
argument_list|(
literal|"org.springframework.jms"
argument_list|,
literal|2.51D
argument_list|)
condition|)
block|{
return|return
name|DefaultMessageListenerContainer
operator|.
name|CACHE_CONSUMER
return|;
block|}
else|else
block|{
if|if
condition|(
name|endpoint
operator|.
name|isPubSubDomain
argument_list|()
operator|&&
operator|!
name|isSubscriptionDurable
argument_list|()
condition|)
block|{
comment|// we must cache the consumer or we will miss messages
comment|// see https://issues.apache.org/activemq/browse/CAMEL-253
return|return
name|DefaultMessageListenerContainer
operator|.
name|CACHE_CONSUMER
return|;
block|}
else|else
block|{
comment|// to enable consuming and sending with a single JMS session (to
comment|// avoid XA) we can only use CACHE_CONNECTION
comment|// due to this bug :
comment|// http://opensource.atlassian.com/projects/spring/browse/SPR-3890
return|return
name|DefaultMessageListenerContainer
operator|.
name|CACHE_CONNECTION
return|;
block|}
block|}
block|}
comment|/**      * Factory method which allows derived classes to customize the lazy      * creation      */
DECL|method|createConnectionFactory ()
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|connectionFactory
argument_list|,
literal|"connectionFactory"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Factory method which allows derived classes to customize the lazy      * creation      */
DECL|method|createListenerConnectionFactory ()
specifier|protected
name|ConnectionFactory
name|createListenerConnectionFactory
parameter_list|()
block|{
return|return
name|getConnectionFactory
argument_list|()
return|;
block|}
comment|/**      * Factory method which allows derived classes to customize the lazy      * creation      */
DECL|method|createTemplateConnectionFactory ()
specifier|protected
name|ConnectionFactory
name|createTemplateConnectionFactory
parameter_list|()
block|{
return|return
name|getConnectionFactory
argument_list|()
return|;
block|}
DECL|method|isPreserveMessageQos ()
specifier|public
name|boolean
name|isPreserveMessageQos
parameter_list|()
block|{
return|return
name|preserveMessageQos
return|;
block|}
comment|/**      * When one of the QoS properties are configured such as {@link #setDeliveryPersistent(boolean)},      * {@link #setPriority(int)} or {@link #setTimeToLive(long)} then we should auto default the      * setting of {@link #setExplicitQosEnabled(boolean)} if its not been configured yet      */
DECL|method|configuredQoS ()
specifier|protected
name|void
name|configuredQoS
parameter_list|()
block|{
if|if
condition|(
name|explicitQosEnabled
operator|==
literal|null
condition|)
block|{
name|explicitQosEnabled
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|isAlwaysCopyMessage ()
specifier|public
name|boolean
name|isAlwaysCopyMessage
parameter_list|()
block|{
return|return
name|alwaysCopyMessage
return|;
block|}
DECL|method|setAlwaysCopyMessage (boolean alwaysCopyMessage)
specifier|public
name|void
name|setAlwaysCopyMessage
parameter_list|(
name|boolean
name|alwaysCopyMessage
parameter_list|)
block|{
name|this
operator|.
name|alwaysCopyMessage
operator|=
name|alwaysCopyMessage
expr_stmt|;
block|}
DECL|method|isUseMessageIDAsCorrelationID ()
specifier|public
name|boolean
name|isUseMessageIDAsCorrelationID
parameter_list|()
block|{
return|return
name|useMessageIDAsCorrelationID
return|;
block|}
DECL|method|setUseMessageIDAsCorrelationID (boolean useMessageIDAsCorrelationID)
specifier|public
name|void
name|setUseMessageIDAsCorrelationID
parameter_list|(
name|boolean
name|useMessageIDAsCorrelationID
parameter_list|)
block|{
name|this
operator|.
name|useMessageIDAsCorrelationID
operator|=
name|useMessageIDAsCorrelationID
expr_stmt|;
block|}
DECL|method|getReplyToTempDestinationAffinity ()
specifier|public
name|String
name|getReplyToTempDestinationAffinity
parameter_list|()
block|{
return|return
name|replyToTempDestinationAffinity
return|;
block|}
DECL|method|setReplyToTempDestinationAffinity ( String replyToTempDestinationAffinity)
specifier|public
name|void
name|setReplyToTempDestinationAffinity
parameter_list|(
name|String
name|replyToTempDestinationAffinity
parameter_list|)
block|{
name|this
operator|.
name|replyToTempDestinationAffinity
operator|=
name|replyToTempDestinationAffinity
expr_stmt|;
block|}
DECL|method|getRequestTimeout ()
specifier|public
name|long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|requestTimeout
return|;
block|}
DECL|method|setRequestTimeout (long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|this
operator|.
name|requestTimeout
operator|=
name|requestTimeout
expr_stmt|;
block|}
DECL|method|getReplyTo ()
specifier|public
name|String
name|getReplyTo
parameter_list|()
block|{
return|return
name|replyToDestination
return|;
block|}
DECL|method|setReplyTo (String replyToDestination)
specifier|public
name|void
name|setReplyTo
parameter_list|(
name|String
name|replyToDestination
parameter_list|)
block|{
if|if
condition|(
operator|!
name|replyToDestination
operator|.
name|startsWith
argument_list|(
name|QUEUE_PREFIX
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ReplyTo destination value has to be of type queue; "
operator|+
literal|"e.g: \"queue:replyQueue\""
argument_list|)
throw|;
block|}
name|this
operator|.
name|replyToDestination
operator|=
name|removeStartingCharacters
argument_list|(
name|replyToDestination
operator|.
name|substring
argument_list|(
name|QUEUE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
DECL|method|getReplyToDestinationSelectorName ()
specifier|public
name|String
name|getReplyToDestinationSelectorName
parameter_list|()
block|{
return|return
name|replyToDestinationSelectorName
return|;
block|}
DECL|method|setReplyToDestinationSelectorName (String replyToDestinationSelectorName)
specifier|public
name|void
name|setReplyToDestinationSelectorName
parameter_list|(
name|String
name|replyToDestinationSelectorName
parameter_list|)
block|{
name|this
operator|.
name|replyToDestinationSelectorName
operator|=
name|replyToDestinationSelectorName
expr_stmt|;
comment|// in case of consumer -> producer and a named replyTo correlation selector
comment|// message passthough is impossible as we need to set the value of selector into
comment|// outgoing message, which would be read-only if passthough were to remain enabled
if|if
condition|(
name|replyToDestinationSelectorName
operator|!=
literal|null
condition|)
block|{
name|setAlwaysCopyMessage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

