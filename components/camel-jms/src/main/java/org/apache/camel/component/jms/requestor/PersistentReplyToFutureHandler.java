begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms.requestor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|requestor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|requestor
operator|.
name|DeferredRequestReplyMap
operator|.
name|DeferredMessageSentCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|requestor
operator|.
name|PersistentReplyToRequestor
operator|.
name|MessageSelectorComposer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|task
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_class
DECL|class|PersistentReplyToFutureHandler
specifier|public
class|class
name|PersistentReplyToFutureHandler
extends|extends
name|FutureHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PersistentReplyToFutureHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|requestor
specifier|protected
name|PersistentReplyToRequestor
name|requestor
decl_stmt|;
DECL|field|callback
specifier|protected
name|DeferredMessageSentCallback
name|callback
decl_stmt|;
DECL|field|correlationID
specifier|protected
name|String
name|correlationID
decl_stmt|;
DECL|method|PersistentReplyToFutureHandler (PersistentReplyToRequestor requestor, String correlationID)
specifier|public
name|PersistentReplyToFutureHandler
parameter_list|(
name|PersistentReplyToRequestor
name|requestor
parameter_list|,
name|String
name|correlationID
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|requestor
operator|=
name|requestor
expr_stmt|;
name|this
operator|.
name|correlationID
operator|=
name|correlationID
expr_stmt|;
block|}
DECL|method|PersistentReplyToFutureHandler (PersistentReplyToRequestor requestor, DeferredMessageSentCallback callback)
specifier|public
name|PersistentReplyToFutureHandler
parameter_list|(
name|PersistentReplyToRequestor
name|requestor
parameter_list|,
name|DeferredMessageSentCallback
name|callback
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|requestor
operator|=
name|requestor
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|Message
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Message
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|updateSelector
argument_list|()
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|revertSelector
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|get (long timeout, TimeUnit unit)
specifier|public
name|Message
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|Message
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|updateSelector
argument_list|()
expr_stmt|;
name|result
operator|=
name|super
operator|.
name|get
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|revertSelector
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|updateSelector ()
specifier|protected
name|void
name|updateSelector
parameter_list|()
throws|throws
name|ExecutionException
block|{
try|try
block|{
name|MessageSelectorComposer
name|composer
init|=
operator|(
name|MessageSelectorComposer
operator|)
name|requestor
operator|.
name|getListenerContainer
argument_list|()
decl_stmt|;
name|composer
operator|.
name|addCorrelationID
argument_list|(
operator|(
name|correlationID
operator|!=
literal|null
operator|)
condition|?
name|correlationID
else|:
name|callback
operator|.
name|getMessage
argument_list|()
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|revertSelector ()
specifier|protected
name|void
name|revertSelector
parameter_list|()
throws|throws
name|ExecutionException
block|{
try|try
block|{
name|MessageSelectorComposer
name|composer
init|=
operator|(
name|MessageSelectorComposer
operator|)
name|requestor
operator|.
name|getListenerContainer
argument_list|()
decl_stmt|;
name|composer
operator|.
name|removeCorrelationID
argument_list|(
operator|(
name|correlationID
operator|!=
literal|null
operator|)
condition|?
name|correlationID
else|:
name|callback
operator|.
name|getMessage
argument_list|()
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

