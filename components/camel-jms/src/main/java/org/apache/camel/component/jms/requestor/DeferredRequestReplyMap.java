begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms.requestor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|requestor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsConfiguration
operator|.
name|MessageSentCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|TimeoutMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|DeferredRequestReplyMap
specifier|public
class|class
name|DeferredRequestReplyMap
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DeferredRequestReplyMap
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|requestor
specifier|private
name|Requestor
name|requestor
decl_stmt|;
DECL|field|producer
specifier|private
name|JmsProducer
name|producer
decl_stmt|;
DECL|field|deferredRequestMap
specifier|private
name|TimeoutMap
name|deferredRequestMap
decl_stmt|;
DECL|field|deferredReplyMap
specifier|private
name|TimeoutMap
name|deferredReplyMap
decl_stmt|;
DECL|class|DeferredMessageSentCallback
specifier|public
specifier|static
class|class
name|DeferredMessageSentCallback
implements|implements
name|MessageSentCallback
block|{
DECL|field|map
specifier|private
name|DeferredRequestReplyMap
name|map
decl_stmt|;
DECL|field|transitionalID
specifier|private
name|String
name|transitionalID
decl_stmt|;
DECL|field|message
specifier|private
name|Message
name|message
decl_stmt|;
DECL|field|monitor
specifier|private
name|Object
name|monitor
decl_stmt|;
DECL|method|DeferredMessageSentCallback (DeferredRequestReplyMap map, UuidGenerator uuidGenerator, Object monitor)
specifier|public
name|DeferredMessageSentCallback
parameter_list|(
name|DeferredRequestReplyMap
name|map
parameter_list|,
name|UuidGenerator
name|uuidGenerator
parameter_list|,
name|Object
name|monitor
parameter_list|)
block|{
name|transitionalID
operator|=
name|uuidGenerator
operator|.
name|generateId
argument_list|()
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|monitor
operator|=
name|monitor
expr_stmt|;
block|}
DECL|method|getDeferredRequestReplyMap ()
specifier|public
name|DeferredRequestReplyMap
name|getDeferredRequestReplyMap
parameter_list|()
block|{
return|return
name|map
return|;
block|}
DECL|method|getID ()
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|transitionalID
return|;
block|}
DECL|method|getMessage ()
specifier|public
name|Message
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
DECL|method|sent (Message message)
specifier|public
name|void
name|sent
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|map
operator|.
name|processDeferredReplies
argument_list|(
name|monitor
argument_list|,
name|getID
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|DeferredRequestReplyMap (Requestor requestor, JmsProducer producer, TimeoutMap deferredRequestMap, TimeoutMap deferredReplyMap)
specifier|public
name|DeferredRequestReplyMap
parameter_list|(
name|Requestor
name|requestor
parameter_list|,
name|JmsProducer
name|producer
parameter_list|,
name|TimeoutMap
name|deferredRequestMap
parameter_list|,
name|TimeoutMap
name|deferredReplyMap
parameter_list|)
block|{
name|this
operator|.
name|requestor
operator|=
name|requestor
expr_stmt|;
name|this
operator|.
name|producer
operator|=
name|producer
expr_stmt|;
name|this
operator|.
name|deferredRequestMap
operator|=
name|deferredRequestMap
expr_stmt|;
name|this
operator|.
name|deferredReplyMap
operator|=
name|deferredReplyMap
expr_stmt|;
block|}
DECL|method|getRequestTimeout ()
specifier|public
name|long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|producer
operator|.
name|getRequestTimeout
argument_list|()
return|;
block|}
DECL|method|createDeferredMessageSentCallback ()
specifier|public
name|DeferredMessageSentCallback
name|createDeferredMessageSentCallback
parameter_list|()
block|{
return|return
operator|new
name|DeferredMessageSentCallback
argument_list|(
name|this
argument_list|,
name|getUuidGenerator
argument_list|()
argument_list|,
name|requestor
argument_list|)
return|;
block|}
DECL|method|put (DeferredMessageSentCallback callback, FutureTask futureTask)
specifier|public
name|void
name|put
parameter_list|(
name|DeferredMessageSentCallback
name|callback
parameter_list|,
name|FutureTask
name|futureTask
parameter_list|)
block|{
name|deferredRequestMap
operator|.
name|put
argument_list|(
name|callback
operator|.
name|getID
argument_list|()
argument_list|,
name|futureTask
argument_list|,
name|getRequestTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processDeferredRequests (String correlationID, Message inMessage)
specifier|public
name|void
name|processDeferredRequests
parameter_list|(
name|String
name|correlationID
parameter_list|,
name|Message
name|inMessage
parameter_list|)
block|{
name|processDeferredRequests
argument_list|(
name|requestor
argument_list|,
name|deferredRequestMap
argument_list|,
name|deferredReplyMap
argument_list|,
name|correlationID
argument_list|,
name|requestor
operator|.
name|getMaxRequestTimeout
argument_list|()
argument_list|,
name|inMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|processDeferredRequests (Object monitor, TimeoutMap requestMap, TimeoutMap replyMap, String correlationID, long timeout, Message inMessage)
specifier|public
specifier|static
name|void
name|processDeferredRequests
parameter_list|(
name|Object
name|monitor
parameter_list|,
name|TimeoutMap
name|requestMap
parameter_list|,
name|TimeoutMap
name|replyMap
parameter_list|,
name|String
name|correlationID
parameter_list|,
name|long
name|timeout
parameter_list|,
name|Message
name|inMessage
parameter_list|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
try|try
block|{
name|Object
name|handler
init|=
name|requestMap
operator|.
name|get
argument_list|(
name|correlationID
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|requestMap
operator|.
name|size
argument_list|()
operator|>
name|replyMap
operator|.
name|size
argument_list|()
condition|)
block|{
name|replyMap
operator|.
name|put
argument_list|(
name|correlationID
argument_list|,
name|inMessage
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Response received for unknown correlationID: "
operator|+
name|correlationID
operator|+
literal|"; response: "
operator|+
name|inMessage
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
operator|&&
name|handler
operator|instanceof
name|ReplyHandler
condition|)
block|{
name|ReplyHandler
name|replyHandler
init|=
operator|(
name|ReplyHandler
operator|)
name|handler
decl_stmt|;
name|boolean
name|complete
init|=
name|replyHandler
operator|.
name|handle
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|complete
condition|)
block|{
name|requestMap
operator|.
name|remove
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToProcessResponse
argument_list|(
name|inMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|processDeferredReplies (Object monitor, String transitionalID, Message outMessage)
specifier|public
name|void
name|processDeferredReplies
parameter_list|(
name|Object
name|monitor
parameter_list|,
name|String
name|transitionalID
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
synchronized|synchronized
init|(
name|monitor
init|)
block|{
try|try
block|{
name|Object
name|handler
init|=
name|deferredRequestMap
operator|.
name|get
argument_list|(
name|transitionalID
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|deferredRequestMap
operator|.
name|remove
argument_list|(
name|transitionalID
argument_list|)
expr_stmt|;
name|String
name|correlationID
init|=
name|outMessage
operator|.
name|getJMSMessageID
argument_list|()
decl_stmt|;
name|Object
name|in
init|=
name|deferredReplyMap
operator|.
name|get
argument_list|(
name|correlationID
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
operator|&&
name|in
operator|instanceof
name|Message
condition|)
block|{
name|Message
name|inMessage
init|=
operator|(
name|Message
operator|)
name|in
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|ReplyHandler
condition|)
block|{
name|ReplyHandler
name|replyHandler
init|=
operator|(
name|ReplyHandler
operator|)
name|handler
decl_stmt|;
try|try
block|{
name|boolean
name|complete
init|=
name|replyHandler
operator|.
name|handle
argument_list|(
name|inMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|complete
condition|)
block|{
name|deferredReplyMap
operator|.
name|remove
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToProcessResponse
argument_list|(
name|inMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|deferredRequestMap
operator|.
name|put
argument_list|(
name|correlationID
argument_list|,
name|handler
argument_list|,
name|getRequestTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedToProcessResponse
argument_list|(
name|outMessage
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|getUuidGenerator ()
specifier|protected
name|UuidGenerator
name|getUuidGenerator
parameter_list|()
block|{
return|return
name|producer
operator|.
name|getUuidGenerator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

