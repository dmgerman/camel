begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FailedToCreateConsumerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|SuspendableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|JmsUtils
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.camel.Consumer} which uses Spring's {@link AbstractMessageListenerContainer} implementations  * to consume JMS messages.  *  * @version  * @see DefaultJmsMessageListenerContainer  * @see SimpleJmsMessageListenerContainer  */
end_comment

begin_class
DECL|class|JmsConsumer
specifier|public
class|class
name|JmsConsumer
extends|extends
name|DefaultConsumer
implements|implements
name|SuspendableService
block|{
DECL|field|listenerContainer
specifier|private
specifier|volatile
name|AbstractMessageListenerContainer
name|listenerContainer
decl_stmt|;
DECL|field|messageListener
specifier|private
specifier|volatile
name|EndpointMessageListener
name|messageListener
decl_stmt|;
DECL|field|initialized
specifier|private
specifier|volatile
name|boolean
name|initialized
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|volatile
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|shutdownExecutorService
specifier|private
specifier|volatile
name|boolean
name|shutdownExecutorService
decl_stmt|;
DECL|method|JmsConsumer (JmsEndpoint endpoint, Processor processor, AbstractMessageListenerContainer listenerContainer)
specifier|public
name|JmsConsumer
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|AbstractMessageListenerContainer
name|listenerContainer
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|listenerContainer
operator|=
name|listenerContainer
expr_stmt|;
name|this
operator|.
name|listenerContainer
operator|.
name|setMessageListener
argument_list|(
name|getEndpointMessageListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getEndpoint ()
specifier|public
name|JmsEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|JmsEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|getListenerContainer ()
specifier|public
name|AbstractMessageListenerContainer
name|getListenerContainer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|listenerContainer
operator|==
literal|null
condition|)
block|{
name|createMessageListenerContainer
argument_list|()
expr_stmt|;
block|}
return|return
name|listenerContainer
return|;
block|}
DECL|method|getEndpointMessageListener ()
specifier|public
name|EndpointMessageListener
name|getEndpointMessageListener
parameter_list|()
block|{
if|if
condition|(
name|messageListener
operator|==
literal|null
condition|)
block|{
name|createMessageListener
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|messageListener
return|;
block|}
DECL|method|createMessageListener (JmsEndpoint endpoint, Processor processor)
specifier|protected
name|void
name|createMessageListener
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|messageListener
operator|=
operator|new
name|EndpointMessageListener
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|configureMessageListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
name|messageListener
operator|.
name|setBinding
argument_list|(
name|endpoint
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
name|messageListener
operator|.
name|setAsync
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isAsyncConsumer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createMessageListenerContainer ()
specifier|protected
name|void
name|createMessageListenerContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|listenerContainer
operator|=
name|getEndpoint
argument_list|()
operator|.
name|createMessageListenerContainer
argument_list|()
expr_stmt|;
name|getEndpoint
argument_list|()
operator|.
name|configureListenerContainer
argument_list|(
name|listenerContainer
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|listenerContainer
operator|.
name|setMessageListener
argument_list|(
name|getEndpointMessageListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the {@link ExecutorService} the {@link AbstractMessageListenerContainer} is using (if any).      *<p/>      * The {@link AbstractMessageListenerContainer} may use a private thread pool, and then when this consumer      * is stopped, we need to shutdown this thread pool as well, to clean up all resources.      * If a shared thread pool is used by the {@link AbstractMessageListenerContainer} then the lifecycle      * of that shared thread pool is handled elsewhere (not by this consumer); and therefore      * the<tt>shutdownExecutorService</tt> parameter should be<tt>false</tt>.      *      * @param executorService         the thread pool      * @param shutdownExecutorService whether to shutdown the thread pool when this consumer stops      */
DECL|method|setListenerContainerExecutorService (ExecutorService executorService, boolean shutdownExecutorService)
name|void
name|setListenerContainerExecutorService
parameter_list|(
name|ExecutorService
name|executorService
parameter_list|,
name|boolean
name|shutdownExecutorService
parameter_list|)
block|{
name|this
operator|.
name|executorService
operator|=
name|executorService
expr_stmt|;
name|this
operator|.
name|shutdownExecutorService
operator|=
name|shutdownExecutorService
expr_stmt|;
block|}
comment|/**      * Starts the JMS listener container      *<p/>      * Can be used to start this consumer later if it was configured to not auto startup.      */
DECL|method|startListenerContainer ()
specifier|public
name|void
name|startListenerContainer
parameter_list|()
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Starting listener container {} on destination {}"
argument_list|,
name|listenerContainer
argument_list|,
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|listenerContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Started listener container {} on destination {}"
argument_list|,
name|listenerContainer
argument_list|,
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Pre tests the connection before starting the listening.      *<p/>      * In case of connection failure the exception is thrown which prevents Camel from starting.      *      * @throws FailedToCreateConsumerException is thrown if testing the connection failed      */
DECL|method|testConnectionOnStartup ()
specifier|protected
name|void
name|testConnectionOnStartup
parameter_list|()
throws|throws
name|FailedToCreateConsumerException
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Testing JMS Connection on startup for destination: {}"
argument_list|,
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|listenerContainer
operator|.
name|getConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|JmsUtils
operator|.
name|closeConnection
argument_list|(
name|con
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Successfully tested JMS Connection on startup for destination: {}"
argument_list|,
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot get JMS Connection on startup for destination "
operator|+
name|getDestinationName
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|FailedToCreateConsumerException
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// create listener container
if|if
condition|(
name|listenerContainer
operator|==
literal|null
condition|)
block|{
name|createMessageListenerContainer
argument_list|()
expr_stmt|;
block|}
name|getEndpoint
argument_list|()
operator|.
name|onListenerContainerStarting
argument_list|(
name|listenerContainer
argument_list|)
expr_stmt|;
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isAsyncStartListener
argument_list|()
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|getAsyncStartStopExecutorService
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|prepareAndStartListenerContainer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error starting listener container on destination: "
operator|+
name|getDestinationName
argument_list|()
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AsyncStartListenerTask["
operator|+
name|getDestinationName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prepareAndStartListenerContainer
argument_list|()
expr_stmt|;
block|}
comment|// mark as initialized for the first time
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|prepareAndStartListenerContainer ()
specifier|protected
name|void
name|prepareAndStartListenerContainer
parameter_list|()
block|{
name|listenerContainer
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
comment|// only start listener if auto start is enabled or we are explicit invoking start later
if|if
condition|(
name|initialized
operator|||
name|getEndpoint
argument_list|()
operator|.
name|isAutoStartup
argument_list|()
condition|)
block|{
comment|// should we pre test connections before starting?
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isTestConnectionOnStartup
argument_list|()
condition|)
block|{
name|testConnectionOnStartup
argument_list|()
expr_stmt|;
block|}
name|startListenerContainer
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|stopAndDestroyListenerContainer ()
specifier|protected
name|void
name|stopAndDestroyListenerContainer
parameter_list|()
block|{
if|if
condition|(
name|listenerContainer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|listenerContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|listenerContainer
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|getEndpoint
argument_list|()
operator|.
name|onListenerContainerStopped
argument_list|(
name|listenerContainer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// null container and listener so they are fully re created if this consumer is restarted
comment|// then we will use updated configuration from jms endpoint that may have been managed using JMX
name|listenerContainer
operator|=
literal|null
expr_stmt|;
name|messageListener
operator|=
literal|null
expr_stmt|;
comment|// shutdown thread pool if listener container was using a private thread pool
if|if
condition|(
name|shutdownExecutorService
operator|&&
name|executorService
operator|!=
literal|null
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdownNow
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|listenerContainer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isAsyncStopListener
argument_list|()
condition|)
block|{
name|getEndpoint
argument_list|()
operator|.
name|getAsyncStartStopExecutorService
argument_list|()
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|stopAndDestroyListenerContainer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error stopping listener container on destination: "
operator|+
name|getDestinationName
argument_list|()
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AsyncStopListenerTask["
operator|+
name|getDestinationName
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stopAndDestroyListenerContainer
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSuspend ()
specifier|protected
name|void
name|doSuspend
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|listenerContainer
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doResume ()
specifier|protected
name|void
name|doResume
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|listenerContainer
operator|!=
literal|null
condition|)
block|{
name|startListenerContainer
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDestinationName ()
specifier|private
name|String
name|getDestinationName
parameter_list|()
block|{
if|if
condition|(
name|listenerContainer
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|listenerContainer
operator|.
name|getDestination
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|listenerContainer
operator|.
name|getDestinationName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

