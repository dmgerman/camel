begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageEOFException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|StreamMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|NIOConverter
import|;
end_import

begin_comment
comment|/**  * Some simple payload conversions to I/O<a  * href="http://camel.apache.org/type-converter.html">Type Converters</a>  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|JmsIOConverter
specifier|public
specifier|final
class|class
name|JmsIOConverter
block|{
DECL|method|JmsIOConverter ()
specifier|private
name|JmsIOConverter
parameter_list|()
block|{     }
annotation|@
name|Converter
DECL|method|toByteBuffer (final Message message, Exchange exchange)
specifier|public
specifier|static
name|ByteBuffer
name|toByteBuffer
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
specifier|final
name|String
name|text
init|=
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
return|return
name|NIOConverter
operator|.
name|toByteBuffer
argument_list|(
name|text
argument_list|,
name|exchange
argument_list|)
return|;
block|}
if|if
condition|(
name|message
operator|instanceof
name|BytesMessage
condition|)
block|{
specifier|final
name|BytesMessage
name|bmsg
init|=
operator|(
name|BytesMessage
operator|)
name|message
decl_stmt|;
specifier|final
name|int
name|len
init|=
operator|(
name|int
operator|)
name|bmsg
operator|.
name|getBodyLength
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|bmsg
operator|.
name|readBytes
argument_list|(
name|data
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|NIOConverter
operator|.
name|toByteBuffer
argument_list|(
name|data
argument_list|)
return|;
block|}
if|if
condition|(
name|message
operator|instanceof
name|StreamMessage
condition|)
block|{
specifier|final
name|StreamMessage
name|msg
init|=
operator|(
name|StreamMessage
operator|)
name|message
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputStream
name|dataOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bytesOut
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|Object
name|obj
init|=
name|msg
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|writeData
argument_list|(
name|dataOut
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MessageEOFException
name|e
parameter_list|)
block|{
comment|// we have no other way of knowing the end of the message
block|}
finally|finally
block|{
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|NIOConverter
operator|.
name|toByteBuffer
argument_list|(
name|bytesOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|message
operator|instanceof
name|MapMessage
condition|)
block|{
specifier|final
name|MapMessage
name|msg
init|=
operator|(
name|MapMessage
operator|)
name|message
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputStream
name|dataOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bytesOut
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Enumeration
name|en
init|=
name|msg
operator|.
name|getMapNames
argument_list|()
init|;
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Object
name|obj
init|=
name|msg
operator|.
name|getObject
argument_list|(
name|en
operator|.
name|nextElement
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|dataOut
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|NIOConverter
operator|.
name|toByteBuffer
argument_list|(
name|bytesOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
name|ObjectMessage
name|objMessage
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|Object
name|object
init|=
name|objMessage
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|objectOut
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bytesOut
argument_list|)
decl_stmt|;
name|objectOut
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|objectOut
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|NIOConverter
operator|.
name|toByteBuffer
argument_list|(
name|bytesOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|writeData (DataOutputStream dataOut, Object data)
specifier|private
specifier|static
name|void
name|writeData
parameter_list|(
name|DataOutputStream
name|dataOut
parameter_list|,
name|Object
name|data
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|data
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|dataOut
operator|.
name|write
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|String
condition|)
block|{
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Double
condition|)
block|{
name|dataOut
operator|.
name|writeDouble
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|data
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Float
condition|)
block|{
name|dataOut
operator|.
name|writeFloat
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|data
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Long
condition|)
block|{
name|dataOut
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|data
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Integer
condition|)
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|data
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Short
condition|)
block|{
name|dataOut
operator|.
name|writeShort
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|data
operator|)
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Character
condition|)
block|{
name|dataOut
operator|.
name|writeChar
argument_list|(
operator|(
operator|(
name|Character
operator|)
name|data
operator|)
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Byte
condition|)
block|{
name|dataOut
operator|.
name|writeByte
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|data
operator|)
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|instanceof
name|Boolean
condition|)
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|data
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

