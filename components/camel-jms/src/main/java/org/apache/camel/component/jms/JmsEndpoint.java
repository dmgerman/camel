begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|requestor
operator|.
name|Requestor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractMessageListenerContainer
import|;
end_import

begin_comment
comment|/**  * A<a href="http://activemq.apache.org/jms.html">JMS Endpoint</a>  *  * @version $Revision:520964 $  */
end_comment

begin_class
DECL|class|JmsEndpoint
specifier|public
class|class
name|JmsEndpoint
extends|extends
name|DefaultEndpoint
argument_list|<
name|JmsExchange
argument_list|>
block|{
DECL|field|pubSubDomain
specifier|private
specifier|final
name|boolean
name|pubSubDomain
decl_stmt|;
DECL|field|binding
specifier|private
name|JmsBinding
name|binding
decl_stmt|;
DECL|field|destination
specifier|private
name|String
name|destination
decl_stmt|;
DECL|field|selector
specifier|private
name|String
name|selector
decl_stmt|;
DECL|field|configuration
specifier|private
name|JmsConfiguration
name|configuration
decl_stmt|;
DECL|field|requestor
specifier|private
name|Requestor
name|requestor
decl_stmt|;
DECL|method|JmsEndpoint (String uri, JmsComponent component, String destination, boolean pubSubDomain, JmsConfiguration configuration)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|JmsComponent
name|component
parameter_list|,
name|String
name|destination
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|,
name|JmsConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|pubSubDomain
operator|=
name|pubSubDomain
expr_stmt|;
block|}
DECL|method|JmsEndpoint (String endpointUri, JmsBinding binding, JmsConfiguration configuration, String destination, boolean pubSubDomain)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|JmsBinding
name|binding
parameter_list|,
name|JmsConfiguration
name|configuration
parameter_list|,
name|String
name|destination
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|pubSubDomain
operator|=
name|pubSubDomain
expr_stmt|;
block|}
DECL|method|JmsEndpoint (String endpointUri, String destination, boolean pubSubDomain)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|destination
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
block|{
name|this
argument_list|(
name|endpointUri
argument_list|,
operator|new
name|JmsBinding
argument_list|()
argument_list|,
operator|new
name|JmsConfiguration
argument_list|()
argument_list|,
name|destination
argument_list|,
name|pubSubDomain
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a pub-sub endpoint with the given destination      */
DECL|method|JmsEndpoint (String endpointUri, String destination)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|destination
parameter_list|)
block|{
name|this
argument_list|(
name|endpointUri
argument_list|,
name|destination
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|JmsProducer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|JmsProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Creates a producer using the given template for InOnly message exchanges      */
DECL|method|createProducer (JmsOperations template)
specifier|public
name|JmsProducer
name|createProducer
parameter_list|(
name|JmsOperations
name|template
parameter_list|)
throws|throws
name|Exception
block|{
name|JmsProducer
name|answer
init|=
name|createProducer
argument_list|()
decl_stmt|;
if|if
condition|(
name|template
operator|instanceof
name|JmsTemplate
condition|)
block|{
name|JmsTemplate
name|jmsTemplate
init|=
operator|(
name|JmsTemplate
operator|)
name|template
decl_stmt|;
name|jmsTemplate
operator|.
name|setPubSubDomain
argument_list|(
name|pubSubDomain
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setDefaultDestinationName
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setInOnlyTemplate
argument_list|(
name|template
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|JmsConsumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|AbstractMessageListenerContainer
name|listenerContainer
init|=
name|configuration
operator|.
name|createMessageListenerContainer
argument_list|(
name|this
argument_list|)
decl_stmt|;
return|return
name|createConsumer
argument_list|(
name|processor
argument_list|,
name|listenerContainer
argument_list|)
return|;
block|}
comment|/**      * Creates a consumer using the given processor and listener container      *      * @param processor         the processor to use to process the messages      * @param listenerContainer the listener container      * @return a newly created consumer      * @throws Exception if the consumer cannot be created      */
DECL|method|createConsumer (Processor processor, AbstractMessageListenerContainer listenerContainer)
specifier|public
name|JmsConsumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|AbstractMessageListenerContainer
name|listenerContainer
parameter_list|)
throws|throws
name|Exception
block|{
name|listenerContainer
operator|.
name|setDestinationName
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|listenerContainer
operator|.
name|setPubSubDomain
argument_list|(
name|pubSubDomain
argument_list|)
expr_stmt|;
return|return
operator|new
name|JmsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|listenerContainer
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createPollingConsumer ()
specifier|public
name|PollingConsumer
argument_list|<
name|JmsExchange
argument_list|>
name|createPollingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|JmsOperations
name|template
init|=
name|createInOnlyTemplate
argument_list|()
decl_stmt|;
return|return
operator|new
name|JmsPollingConsumer
argument_list|(
name|this
argument_list|,
name|template
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createExchange (ExchangePattern pattern)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|)
block|{
return|return
operator|new
name|JmsExchange
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|pattern
argument_list|,
name|getBinding
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createExchange (Message message)
specifier|public
name|JmsExchange
name|createExchange
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|new
name|JmsExchange
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|getExchangePattern
argument_list|()
argument_list|,
name|getBinding
argument_list|()
argument_list|,
name|message
argument_list|)
return|;
block|}
comment|/**      * Factory method for creating a new template for InOnly message exchanges      */
DECL|method|createInOnlyTemplate ()
specifier|public
name|JmsOperations
name|createInOnlyTemplate
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|createInOnlyTemplate
argument_list|(
name|this
argument_list|,
name|pubSubDomain
argument_list|,
name|destination
argument_list|)
return|;
block|}
comment|/**      * Factory method for creating a new template for InOut message exchanges      */
DECL|method|createInOutTemplate ()
specifier|public
name|JmsOperations
name|createInOutTemplate
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|createInOutTemplate
argument_list|(
name|this
argument_list|,
name|pubSubDomain
argument_list|,
name|destination
argument_list|,
name|getRequestTimeout
argument_list|()
argument_list|)
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getBinding ()
specifier|public
name|JmsBinding
name|getBinding
parameter_list|()
block|{
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|binding
operator|=
operator|new
name|JmsBinding
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|binding
return|;
block|}
comment|/**      * Sets the binding used to convert from a Camel message to and from a JMS      * message      *      * @param binding the binding to use      */
DECL|method|setBinding (JmsBinding binding)
specifier|public
name|void
name|setBinding
parameter_list|(
name|JmsBinding
name|binding
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
block|}
DECL|method|getDestination ()
specifier|public
name|String
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|JmsConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|getSelector ()
specifier|public
name|String
name|getSelector
parameter_list|()
block|{
return|return
name|selector
return|;
block|}
comment|/**      * Sets the JMS selector to use      */
DECL|method|setSelector (String selector)
specifier|public
name|void
name|setSelector
parameter_list|(
name|String
name|selector
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getRequestor ()
specifier|public
specifier|synchronized
name|Requestor
name|getRequestor
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|requestor
operator|==
literal|null
condition|)
block|{
name|requestor
operator|=
operator|new
name|Requestor
argument_list|(
name|getConfiguration
argument_list|()
argument_list|,
name|getExecutorService
argument_list|()
argument_list|)
expr_stmt|;
name|requestor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|requestor
return|;
block|}
DECL|method|setRequestor (Requestor requestor)
specifier|public
name|void
name|setRequestor
parameter_list|(
name|Requestor
name|requestor
parameter_list|)
block|{
name|this
operator|.
name|requestor
operator|=
name|requestor
expr_stmt|;
block|}
comment|/**      * @deprecated use configuration.requestTimeout. Will be removed in Camel 2.0      */
DECL|method|getRequestTimeout ()
specifier|public
name|long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getRequestTimeout
argument_list|()
return|;
block|}
comment|/**      * Sets the timeout in milliseconds which requests should timeout after      *      * @deprecated use configuration.requestTimeout. Will be removed in Camel 2.0      */
DECL|method|setRequestTimeout (long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|configuration
operator|.
name|setRequestTimeout
argument_list|(
name|requestTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|isPubSubDomain ()
specifier|public
name|boolean
name|isPubSubDomain
parameter_list|()
block|{
return|return
name|pubSubDomain
return|;
block|}
comment|/**      * Lazily loads the temporary queue type if one has not been explicitly configured      * via calling the {@link JmsProviderMetadata#setTemporaryQueueType(Class)}      * on the {@link #getConfiguration()} instance      */
DECL|method|getTemporaryQueueType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryQueue
argument_list|>
name|getTemporaryQueueType
parameter_list|()
block|{
name|JmsProviderMetadata
name|metadata
init|=
name|getProviderMetadata
argument_list|()
decl_stmt|;
name|JmsOperations
name|template
init|=
name|getMetadataJmsOperations
argument_list|()
decl_stmt|;
return|return
name|metadata
operator|.
name|getTemporaryQueueType
argument_list|(
name|template
argument_list|)
return|;
block|}
comment|/**      * Lazily loads the temporary topic type if one has not been explicitly configured      * via calling the {@link JmsProviderMetadata#setTemporaryTopicType(Class)}      * on the {@link #getConfiguration()} instance      */
DECL|method|getTemporaryTopicType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryTopic
argument_list|>
name|getTemporaryTopicType
parameter_list|()
block|{
name|JmsOperations
name|template
init|=
name|getMetadataJmsOperations
argument_list|()
decl_stmt|;
name|JmsProviderMetadata
name|metadata
init|=
name|getProviderMetadata
argument_list|()
decl_stmt|;
return|return
name|metadata
operator|.
name|getTemporaryTopicType
argument_list|(
name|template
argument_list|)
return|;
block|}
comment|/**      * Returns the provider metadata      */
DECL|method|getProviderMetadata ()
specifier|protected
name|JmsProviderMetadata
name|getProviderMetadata
parameter_list|()
block|{
name|JmsConfiguration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|JmsProviderMetadata
name|metadata
init|=
name|conf
operator|.
name|getProviderMetadata
argument_list|()
decl_stmt|;
return|return
name|metadata
return|;
block|}
comment|/**      * Returns the {@link JmsOperations} used for metadata operations such as creating temporary destinations      */
DECL|method|getMetadataJmsOperations ()
specifier|protected
name|JmsOperations
name|getMetadataJmsOperations
parameter_list|()
block|{
name|JmsOperations
name|template
init|=
name|getConfiguration
argument_list|()
operator|.
name|getMetadataJmsOperations
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Metadata JmsTemplate supplied!"
argument_list|)
throw|;
block|}
return|return
name|template
return|;
block|}
DECL|method|checkValidTemplate (JmsTemplate template)
specifier|public
name|void
name|checkValidTemplate
parameter_list|(
name|JmsTemplate
name|template
parameter_list|)
block|{
if|if
condition|(
name|template
operator|.
name|getDestinationResolver
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|instanceof
name|DestinationEndpoint
condition|)
block|{
specifier|final
name|DestinationEndpoint
name|destinationEndpoint
init|=
operator|(
name|DestinationEndpoint
operator|)
name|this
decl_stmt|;
name|template
operator|.
name|setDestinationResolver
argument_list|(
name|JmsConfiguration
operator|.
name|createDestinationResolver
argument_list|(
name|destinationEndpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
if|if
condition|(
name|getComponent
argument_list|()
operator|instanceof
name|HeaderFilterStrategyAware
condition|)
block|{
return|return
operator|(
operator|(
name|HeaderFilterStrategyAware
operator|)
name|getComponent
argument_list|()
operator|)
operator|.
name|getHeaderFilterStrategy
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|JmsHeaderFilterStrategy
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

