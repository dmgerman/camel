begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryTopic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MultipleConsumersSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|reply
operator|.
name|PersistentQueueReplyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|reply
operator|.
name|ReplyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|reply
operator|.
name|TemporaryQueueReplyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SynchronousDelegateProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|task
operator|.
name|TaskExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|converter
operator|.
name|MessageConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|destination
operator|.
name|DestinationResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jmx
operator|.
name|export
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_comment
comment|/**  * A<a href="http://activemq.apache.org/jms.html">JMS Endpoint</a>  *  * @version   */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed JMS Endpoint"
argument_list|)
DECL|class|JmsEndpoint
specifier|public
class|class
name|JmsEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|HeaderFilterStrategyAware
implements|,
name|MultipleConsumersSupport
implements|,
name|Service
block|{
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|field|pubSubDomain
specifier|private
name|boolean
name|pubSubDomain
decl_stmt|;
DECL|field|binding
specifier|private
name|JmsBinding
name|binding
decl_stmt|;
DECL|field|destinationName
specifier|private
name|String
name|destinationName
decl_stmt|;
DECL|field|destination
specifier|private
name|Destination
name|destination
decl_stmt|;
DECL|field|selector
specifier|private
name|String
name|selector
decl_stmt|;
DECL|field|configuration
specifier|private
name|JmsConfiguration
name|configuration
decl_stmt|;
DECL|field|replyToReplyManager
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ReplyManager
argument_list|>
name|replyToReplyManager
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ReplyManager
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|replyManager
specifier|private
name|ReplyManager
name|replyManager
decl_stmt|;
comment|// scheduled executor to check for timeout (reply not received)
DECL|field|replyManagerExecutorService
specifier|private
name|ScheduledExecutorService
name|replyManagerExecutorService
decl_stmt|;
DECL|field|running
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|JmsEndpoint ()
specifier|public
name|JmsEndpoint
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|JmsEndpoint (Topic destination)
specifier|public
name|JmsEndpoint
parameter_list|(
name|Topic
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
argument_list|(
literal|"jms:topic:"
operator|+
name|destination
operator|.
name|getTopicName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
DECL|method|JmsEndpoint (String uri, JmsComponent component, String destinationName, boolean pubSubDomain, JmsConfiguration configuration)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|JmsComponent
name|component
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|,
name|JmsConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
name|this
operator|.
name|pubSubDomain
operator|=
name|pubSubDomain
expr_stmt|;
block|}
DECL|method|JmsEndpoint (String endpointUri, JmsBinding binding, JmsConfiguration configuration, String destinationName, boolean pubSubDomain)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|JmsBinding
name|binding
parameter_list|,
name|JmsConfiguration
name|configuration
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
name|this
operator|.
name|pubSubDomain
operator|=
name|pubSubDomain
expr_stmt|;
block|}
DECL|method|JmsEndpoint (String endpointUri, String destinationName, boolean pubSubDomain)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
block|{
name|this
argument_list|(
name|endpointUri
argument_list|,
literal|null
argument_list|,
operator|new
name|JmsConfiguration
argument_list|()
argument_list|,
name|destinationName
argument_list|,
name|pubSubDomain
argument_list|)
expr_stmt|;
name|this
operator|.
name|binding
operator|=
operator|new
name|JmsBinding
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a pub-sub endpoint with the given destination      */
DECL|method|JmsEndpoint (String endpointUri, String destinationName)
specifier|public
name|JmsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|destinationName
parameter_list|)
block|{
name|this
argument_list|(
name|endpointUri
argument_list|,
name|destinationName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a new JMS endpoint for the given JMS destination using the configuration from the given JMS component      */
DECL|method|newInstance (Destination destination, JmsComponent component)
specifier|public
specifier|static
name|JmsEndpoint
name|newInstance
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|JmsComponent
name|component
parameter_list|)
throws|throws
name|JMSException
block|{
name|JmsEndpoint
name|answer
init|=
name|newInstance
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|JmsConfiguration
name|newConfiguration
init|=
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setConfiguration
argument_list|(
name|newConfiguration
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setCamelContext
argument_list|(
name|component
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * Returns a new JMS endpoint for the given JMS destination      */
DECL|method|newInstance (Destination destination)
specifier|public
specifier|static
name|JmsEndpoint
name|newInstance
parameter_list|(
name|Destination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|destination
operator|instanceof
name|TemporaryQueue
condition|)
block|{
return|return
operator|new
name|JmsTemporaryQueueEndpoint
argument_list|(
operator|(
name|TemporaryQueue
operator|)
name|destination
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|instanceof
name|TemporaryTopic
condition|)
block|{
return|return
operator|new
name|JmsTemporaryTopicEndpoint
argument_list|(
operator|(
name|TemporaryTopic
operator|)
name|destination
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
return|return
operator|new
name|JmsQueueEndpoint
argument_list|(
operator|(
name|Queue
operator|)
name|destination
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|JmsEndpoint
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|)
return|;
block|}
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|Producer
name|answer
init|=
operator|new
name|JmsProducer
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSynchronous
argument_list|()
condition|)
block|{
return|return
operator|new
name|SynchronousDelegateProducer
argument_list|(
name|answer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|answer
return|;
block|}
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|JmsConsumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|DefaultMessageListenerContainer
name|listenerContainer
init|=
name|createMessageListenerContainer
argument_list|()
decl_stmt|;
return|return
name|createConsumer
argument_list|(
name|processor
argument_list|,
name|listenerContainer
argument_list|)
return|;
block|}
DECL|method|createMessageListenerContainer ()
specifier|public
name|DefaultMessageListenerContainer
name|createMessageListenerContainer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|configuration
operator|.
name|createMessageListenerContainer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|configureListenerContainer (DefaultMessageListenerContainer listenerContainer, JmsConsumer consumer)
specifier|public
name|void
name|configureListenerContainer
parameter_list|(
name|DefaultMessageListenerContainer
name|listenerContainer
parameter_list|,
name|JmsConsumer
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|destinationName
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setDestinationName
argument_list|(
name|destinationName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DestinationResolver
name|resolver
init|=
name|getDestinationResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|listenerContainer
operator|.
name|setDestinationResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Neither destination, destinationName or destinationResolver are specified on this endpoint!"
argument_list|)
throw|;
block|}
block|}
name|listenerContainer
operator|.
name|setPubSubDomain
argument_list|(
name|pubSubDomain
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getTaskExecutor
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using custom TaskExecutor: {} on listener container: {}"
argument_list|,
name|configuration
operator|.
name|getTaskExecutor
argument_list|()
argument_list|,
name|listenerContainer
argument_list|)
expr_stmt|;
block|}
name|listenerContainer
operator|.
name|setTaskExecutor
argument_list|(
name|configuration
operator|.
name|getTaskExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// include destination name as part of thread name
name|String
name|name
init|=
literal|"JmsConsumer["
operator|+
name|getEndpointConfiguredDestinationName
argument_list|()
operator|+
literal|"]"
decl_stmt|;
comment|// use a cached pool as DefaultMessageListenerContainer will throttle pool sizing
name|ExecutorService
name|executor
init|=
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceStrategy
argument_list|()
operator|.
name|newCachedThreadPool
argument_list|(
name|consumer
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|listenerContainer
operator|.
name|setTaskExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the destination name which was configured from the endpoint uri.      *      * @return the destination name resolved from the endpoint uri      */
DECL|method|getEndpointConfiguredDestinationName ()
specifier|public
name|String
name|getEndpointConfiguredDestinationName
parameter_list|()
block|{
name|String
name|remainder
init|=
name|ObjectHelper
operator|.
name|after
argument_list|(
name|getEndpointKey
argument_list|()
argument_list|,
literal|"//"
argument_list|)
decl_stmt|;
return|return
name|JmsMessageHelper
operator|.
name|normalizeDestinationName
argument_list|(
name|remainder
argument_list|)
return|;
block|}
comment|/**      * Creates a consumer using the given processor and listener container      *      * @param processor         the processor to use to process the messages      * @param listenerContainer the listener container      * @return a newly created consumer      * @throws Exception if the consumer cannot be created      */
DECL|method|createConsumer (Processor processor, DefaultMessageListenerContainer listenerContainer)
specifier|public
name|JmsConsumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|,
name|DefaultMessageListenerContainer
name|listenerContainer
parameter_list|)
throws|throws
name|Exception
block|{
name|JmsConsumer
name|consumer
init|=
operator|new
name|JmsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|listenerContainer
argument_list|)
decl_stmt|;
name|configureListenerContainer
argument_list|(
name|listenerContainer
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|createPollingConsumer ()
specifier|public
name|PollingConsumer
name|createPollingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|JmsOperations
name|template
init|=
name|createInOnlyTemplate
argument_list|()
decl_stmt|;
return|return
operator|new
name|JmsPollingConsumer
argument_list|(
name|this
argument_list|,
name|template
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createExchange (ExchangePattern pattern)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|ExchangePattern
name|pattern
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|this
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|BINDING
argument_list|,
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|createExchange (Message message)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|getExchangePattern
argument_list|()
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|setIn
argument_list|(
operator|new
name|JmsMessage
argument_list|(
name|message
argument_list|,
name|getBinding
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
comment|/**      * Factory method for creating a new template for InOnly message exchanges      */
DECL|method|createInOnlyTemplate ()
specifier|public
name|JmsOperations
name|createInOnlyTemplate
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|createInOnlyTemplate
argument_list|(
name|this
argument_list|,
name|pubSubDomain
argument_list|,
name|destinationName
argument_list|)
return|;
block|}
comment|/**      * Factory method for creating a new template for InOut message exchanges      */
DECL|method|createInOutTemplate ()
specifier|public
name|JmsOperations
name|createInOutTemplate
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|createInOutTemplate
argument_list|(
name|this
argument_list|,
name|pubSubDomain
argument_list|,
name|destinationName
argument_list|,
name|configuration
operator|.
name|getRequestTimeout
argument_list|()
argument_list|)
return|;
block|}
DECL|method|isMultipleConsumersSupported ()
specifier|public
name|boolean
name|isMultipleConsumersSupported
parameter_list|()
block|{
comment|// only allow multiple consumers for pub sub domain (e.g. topics)
return|return
name|isPubSubDomain
argument_list|()
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
if|if
condition|(
name|headerFilterStrategy
operator|==
literal|null
condition|)
block|{
name|headerFilterStrategy
operator|=
operator|new
name|JmsHeaderFilterStrategy
argument_list|()
expr_stmt|;
block|}
return|return
name|headerFilterStrategy
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy strategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|getBinding ()
specifier|public
name|JmsBinding
name|getBinding
parameter_list|()
block|{
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|binding
operator|=
operator|new
name|JmsBinding
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|binding
return|;
block|}
comment|/**      * Sets the binding used to convert from a Camel message to and from a JMS      * message      *      * @param binding the binding to use      */
DECL|method|setBinding (JmsBinding binding)
specifier|public
name|void
name|setBinding
parameter_list|(
name|JmsBinding
name|binding
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
block|}
DECL|method|getDestinationName ()
specifier|public
name|String
name|getDestinationName
parameter_list|()
block|{
return|return
name|destinationName
return|;
block|}
DECL|method|setDestinationName (String destinationName)
specifier|public
name|void
name|setDestinationName
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
block|}
DECL|method|getDestination ()
specifier|public
name|Destination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
comment|/**      * Allows a specific JMS Destination object to be used as the destination      */
DECL|method|setDestination (Destination destination)
specifier|public
name|void
name|setDestination
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|JmsConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (JmsConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|JmsConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getSelector ()
specifier|public
name|String
name|getSelector
parameter_list|()
block|{
return|return
name|selector
return|;
block|}
comment|/**      * Sets the JMS selector to use      */
DECL|method|setSelector (String selector)
specifier|public
name|void
name|setSelector
parameter_list|(
name|String
name|selector
parameter_list|)
block|{
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
if|if
condition|(
name|isPubSubDomain
argument_list|()
condition|)
block|{
comment|// topic cannot be singleton, as there may be multiple consumers
comment|// on the same topic
return|return
literal|false
return|;
block|}
comment|// but queues can be singleton
return|return
literal|true
return|;
block|}
DECL|method|getReplyManager ()
specifier|public
specifier|synchronized
name|ReplyManager
name|getReplyManager
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|replyManager
operator|==
literal|null
condition|)
block|{
comment|// use a temporary queue
name|replyManager
operator|=
operator|new
name|TemporaryQueueReplyManager
argument_list|()
expr_stmt|;
name|replyManager
operator|.
name|setEndpoint
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|replyManager
operator|.
name|setScheduledExecutorService
argument_list|(
name|getReplyManagerExecutorService
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|replyManager
argument_list|)
expr_stmt|;
block|}
return|return
name|replyManager
return|;
block|}
DECL|method|getReplyManager (String replyTo)
specifier|public
specifier|synchronized
name|ReplyManager
name|getReplyManager
parameter_list|(
name|String
name|replyTo
parameter_list|)
throws|throws
name|Exception
block|{
name|ReplyManager
name|answer
init|=
name|replyToReplyManager
operator|.
name|get
argument_list|(
name|replyTo
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// use a persistent queue
name|answer
operator|=
operator|new
name|PersistentQueueReplyManager
argument_list|()
expr_stmt|;
name|answer
operator|.
name|setEndpoint
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setScheduledExecutorService
argument_list|(
name|getReplyManagerExecutorService
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|answer
argument_list|)
expr_stmt|;
comment|// remember this manager so we can re-use it
name|replyToReplyManager
operator|.
name|put
argument_list|(
name|replyTo
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|isPubSubDomain ()
specifier|public
name|boolean
name|isPubSubDomain
parameter_list|()
block|{
return|return
name|pubSubDomain
return|;
block|}
comment|/**      * Lazily loads the temporary queue type if one has not been explicitly configured      * via calling the {@link JmsProviderMetadata#setTemporaryQueueType(Class)}      * on the {@link #getConfiguration()} instance      */
DECL|method|getTemporaryQueueType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryQueue
argument_list|>
name|getTemporaryQueueType
parameter_list|()
block|{
name|JmsProviderMetadata
name|metadata
init|=
name|getProviderMetadata
argument_list|()
decl_stmt|;
name|JmsOperations
name|template
init|=
name|getMetadataJmsOperations
argument_list|()
decl_stmt|;
return|return
name|metadata
operator|.
name|getTemporaryQueueType
argument_list|(
name|template
argument_list|)
return|;
block|}
comment|/**      * Lazily loads the temporary topic type if one has not been explicitly configured      * via calling the {@link JmsProviderMetadata#setTemporaryTopicType(Class)}      * on the {@link #getConfiguration()} instance      */
DECL|method|getTemporaryTopicType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryTopic
argument_list|>
name|getTemporaryTopicType
parameter_list|()
block|{
name|JmsOperations
name|template
init|=
name|getMetadataJmsOperations
argument_list|()
decl_stmt|;
name|JmsProviderMetadata
name|metadata
init|=
name|getProviderMetadata
argument_list|()
decl_stmt|;
return|return
name|metadata
operator|.
name|getTemporaryTopicType
argument_list|(
name|template
argument_list|)
return|;
block|}
comment|/**      * Returns the provider metadata      */
DECL|method|getProviderMetadata ()
specifier|protected
name|JmsProviderMetadata
name|getProviderMetadata
parameter_list|()
block|{
name|JmsConfiguration
name|conf
init|=
name|getConfiguration
argument_list|()
decl_stmt|;
name|JmsProviderMetadata
name|metadata
init|=
name|conf
operator|.
name|getProviderMetadata
argument_list|()
decl_stmt|;
return|return
name|metadata
return|;
block|}
comment|/**      * Returns the {@link JmsOperations} used for metadata operations such as creating temporary destinations      */
DECL|method|getMetadataJmsOperations ()
specifier|protected
name|JmsOperations
name|getMetadataJmsOperations
parameter_list|()
block|{
name|JmsOperations
name|template
init|=
name|getConfiguration
argument_list|()
operator|.
name|getMetadataJmsOperations
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Metadata JmsTemplate supplied!"
argument_list|)
throw|;
block|}
return|return
name|template
return|;
block|}
DECL|method|getReplyManagerExecutorService ()
specifier|protected
specifier|synchronized
name|ScheduledExecutorService
name|getReplyManagerExecutorService
parameter_list|()
block|{
if|if
condition|(
name|replyManagerExecutorService
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
literal|"JmsReplyManagerTimeoutChecker["
operator|+
name|getEndpointConfiguredDestinationName
argument_list|()
operator|+
literal|"]"
decl_stmt|;
name|replyManagerExecutorService
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceStrategy
argument_list|()
operator|.
name|newScheduledThreadPool
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|replyManagerExecutorService
return|;
block|}
comment|/**      * State whether this endpoint is running (eg started)      */
DECL|method|isRunning ()
specifier|protected
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|running
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|replyManager
operator|!=
literal|null
condition|)
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|replyManager
argument_list|)
expr_stmt|;
name|replyManager
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|replyToReplyManager
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ReplyManager
name|replyManager
range|:
name|replyToReplyManager
operator|.
name|values
argument_list|()
control|)
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|replyManager
argument_list|)
expr_stmt|;
block|}
name|replyToReplyManager
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Delegated properties from the configuration
comment|//-------------------------------------------------------------------------
annotation|@
name|ManagedAttribute
DECL|method|getAcknowledgementMode ()
specifier|public
name|int
name|getAcknowledgementMode
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getAcknowledgementMode
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getAcknowledgementModeName ()
specifier|public
name|String
name|getAcknowledgementModeName
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getAcknowledgementModeName
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCacheLevel ()
specifier|public
name|int
name|getCacheLevel
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getCacheLevel
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getCacheLevelName ()
specifier|public
name|String
name|getCacheLevelName
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getCacheLevelName
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getClientId
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getConcurrentConsumers ()
specifier|public
name|int
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getConcurrentConsumers
argument_list|()
return|;
block|}
DECL|method|getConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getConnectionFactory
argument_list|()
return|;
block|}
DECL|method|getDestinationResolver ()
specifier|public
name|DestinationResolver
name|getDestinationResolver
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getDestinationResolver
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getDurableSubscriptionName ()
specifier|public
name|String
name|getDurableSubscriptionName
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getDurableSubscriptionName
argument_list|()
return|;
block|}
DECL|method|getExceptionListener ()
specifier|public
name|ExceptionListener
name|getExceptionListener
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getExceptionListener
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getIdleTaskExecutionLimit ()
specifier|public
name|int
name|getIdleTaskExecutionLimit
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getIdleTaskExecutionLimit
argument_list|()
return|;
block|}
DECL|method|getJmsOperations ()
specifier|public
name|JmsOperations
name|getJmsOperations
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getJmsOperations
argument_list|()
return|;
block|}
DECL|method|getListenerConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getListenerConnectionFactory
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getListenerConnectionFactory
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getMaxConcurrentConsumers ()
specifier|public
name|int
name|getMaxConcurrentConsumers
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getMaxConcurrentConsumers
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getMaxMessagesPerTask ()
specifier|public
name|int
name|getMaxMessagesPerTask
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getMaxMessagesPerTask
argument_list|()
return|;
block|}
DECL|method|getMessageConverter ()
specifier|public
name|MessageConverter
name|getMessageConverter
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getMessageConverter
argument_list|()
return|;
block|}
DECL|method|getMetadataJmsOperations (JmsEndpoint endpoint)
specifier|public
name|JmsOperations
name|getMetadataJmsOperations
parameter_list|(
name|JmsEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getMetadataJmsOperations
argument_list|(
name|endpoint
argument_list|)
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getPriority ()
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getPriority
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getReceiveTimeout ()
specifier|public
name|long
name|getReceiveTimeout
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getReceiveTimeout
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getRecoveryInterval ()
specifier|public
name|long
name|getRecoveryInterval
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getRecoveryInterval
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getReplyTo ()
specifier|public
name|String
name|getReplyTo
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getReplyTo
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getReplyToDestinationSelectorName ()
specifier|public
name|String
name|getReplyToDestinationSelectorName
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getReplyToDestinationSelectorName
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getRequestTimeout ()
specifier|public
name|long
name|getRequestTimeout
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getRequestTimeout
argument_list|()
return|;
block|}
DECL|method|getTaskExecutor ()
specifier|public
name|TaskExecutor
name|getTaskExecutor
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTaskExecutor
argument_list|()
return|;
block|}
DECL|method|getTemplateConnectionFactory ()
specifier|public
name|ConnectionFactory
name|getTemplateConnectionFactory
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTemplateConnectionFactory
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getTimeToLive ()
specifier|public
name|long
name|getTimeToLive
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTimeToLive
argument_list|()
return|;
block|}
DECL|method|getTransactionManager ()
specifier|public
name|PlatformTransactionManager
name|getTransactionManager
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getTransactionName ()
specifier|public
name|String
name|getTransactionName
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTransactionName
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|getTransactionTimeout ()
specifier|public
name|int
name|getTransactionTimeout
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTransactionTimeout
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isAcceptMessagesWhileStopping ()
specifier|public
name|boolean
name|isAcceptMessagesWhileStopping
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isAcceptMessagesWhileStopping
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isAlwaysCopyMessage ()
specifier|public
name|boolean
name|isAlwaysCopyMessage
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isAlwaysCopyMessage
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isAutoStartup ()
specifier|public
name|boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isAutoStartup
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isDeliveryPersistent ()
specifier|public
name|boolean
name|isDeliveryPersistent
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isDeliveryPersistent
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isDisableReplyTo ()
specifier|public
name|boolean
name|isDisableReplyTo
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isDisableReplyTo
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isEagerLoadingOfProperties ()
specifier|public
name|boolean
name|isEagerLoadingOfProperties
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isEagerLoadingOfProperties
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isExplicitQosEnabled ()
specifier|public
name|boolean
name|isExplicitQosEnabled
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isExplicitQosEnabled
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isExposeListenerSession ()
specifier|public
name|boolean
name|isExposeListenerSession
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isExposeListenerSession
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isMessageIdEnabled ()
specifier|public
name|boolean
name|isMessageIdEnabled
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isMessageIdEnabled
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isMessageTimestampEnabled ()
specifier|public
name|boolean
name|isMessageTimestampEnabled
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isMessageTimestampEnabled
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isPreserveMessageQos ()
specifier|public
name|boolean
name|isPreserveMessageQos
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isPreserveMessageQos
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isPubSubNoLocal ()
specifier|public
name|boolean
name|isPubSubNoLocal
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isPubSubNoLocal
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isReplyToDeliveryPersistent ()
specifier|public
name|boolean
name|isReplyToDeliveryPersistent
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isReplyToDeliveryPersistent
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
annotation|@
name|Deprecated
DECL|method|isSubscriptionDurable ()
specifier|public
name|boolean
name|isSubscriptionDurable
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isSubscriptionDurable
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isTransacted ()
specifier|public
name|boolean
name|isTransacted
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isTransacted
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
annotation|@
name|Deprecated
DECL|method|isTransactedInOut ()
specifier|public
name|boolean
name|isTransactedInOut
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isTransactedInOut
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isUseMessageIDAsCorrelationID ()
specifier|public
name|boolean
name|isUseMessageIDAsCorrelationID
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isUseMessageIDAsCorrelationID
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setAcceptMessagesWhileStopping (boolean acceptMessagesWhileStopping)
specifier|public
name|void
name|setAcceptMessagesWhileStopping
parameter_list|(
name|boolean
name|acceptMessagesWhileStopping
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAcceptMessagesWhileStopping
argument_list|(
name|acceptMessagesWhileStopping
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setAcknowledgementMode (int consumerAcknowledgementMode)
specifier|public
name|void
name|setAcknowledgementMode
parameter_list|(
name|int
name|consumerAcknowledgementMode
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAcknowledgementMode
argument_list|(
name|consumerAcknowledgementMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setAcknowledgementModeName (String consumerAcknowledgementMode)
specifier|public
name|void
name|setAcknowledgementModeName
parameter_list|(
name|String
name|consumerAcknowledgementMode
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAcknowledgementModeName
argument_list|(
name|consumerAcknowledgementMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setAlwaysCopyMessage (boolean alwaysCopyMessage)
specifier|public
name|void
name|setAlwaysCopyMessage
parameter_list|(
name|boolean
name|alwaysCopyMessage
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAlwaysCopyMessage
argument_list|(
name|alwaysCopyMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setAutoStartup (boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAutoStartup
argument_list|(
name|autoStartup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setCacheLevel (int cacheLevel)
specifier|public
name|void
name|setCacheLevel
parameter_list|(
name|int
name|cacheLevel
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setCacheLevel
argument_list|(
name|cacheLevel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setCacheLevelName (String cacheName)
specifier|public
name|void
name|setCacheLevelName
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setCacheLevelName
argument_list|(
name|cacheName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setClientId (String consumerClientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|consumerClientId
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setClientId
argument_list|(
name|consumerClientId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setConcurrentConsumers (int concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setConcurrentConsumers
argument_list|(
name|concurrentConsumers
argument_list|)
expr_stmt|;
block|}
DECL|method|setConnectionFactory (ConnectionFactory connectionFactory)
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setDeliveryPersistent (boolean deliveryPersistent)
specifier|public
name|void
name|setDeliveryPersistent
parameter_list|(
name|boolean
name|deliveryPersistent
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDeliveryPersistent
argument_list|(
name|deliveryPersistent
argument_list|)
expr_stmt|;
block|}
DECL|method|setDestinationResolver (DestinationResolver destinationResolver)
specifier|public
name|void
name|setDestinationResolver
parameter_list|(
name|DestinationResolver
name|destinationResolver
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDestinationResolver
argument_list|(
name|destinationResolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setDisableReplyTo (boolean disableReplyTo)
specifier|public
name|void
name|setDisableReplyTo
parameter_list|(
name|boolean
name|disableReplyTo
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDisableReplyTo
argument_list|(
name|disableReplyTo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setDurableSubscriptionName (String durableSubscriptionName)
specifier|public
name|void
name|setDurableSubscriptionName
parameter_list|(
name|String
name|durableSubscriptionName
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDurableSubscriptionName
argument_list|(
name|durableSubscriptionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setEagerLoadingOfProperties (boolean eagerLoadingOfProperties)
specifier|public
name|void
name|setEagerLoadingOfProperties
parameter_list|(
name|boolean
name|eagerLoadingOfProperties
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setEagerLoadingOfProperties
argument_list|(
name|eagerLoadingOfProperties
argument_list|)
expr_stmt|;
block|}
DECL|method|setExceptionListener (ExceptionListener exceptionListener)
specifier|public
name|void
name|setExceptionListener
parameter_list|(
name|ExceptionListener
name|exceptionListener
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setExceptionListener
argument_list|(
name|exceptionListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setExplicitQosEnabled (boolean explicitQosEnabled)
specifier|public
name|void
name|setExplicitQosEnabled
parameter_list|(
name|boolean
name|explicitQosEnabled
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setExplicitQosEnabled
argument_list|(
name|explicitQosEnabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setExposeListenerSession (boolean exposeListenerSession)
specifier|public
name|void
name|setExposeListenerSession
parameter_list|(
name|boolean
name|exposeListenerSession
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setExposeListenerSession
argument_list|(
name|exposeListenerSession
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setIdleTaskExecutionLimit (int idleTaskExecutionLimit)
specifier|public
name|void
name|setIdleTaskExecutionLimit
parameter_list|(
name|int
name|idleTaskExecutionLimit
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setIdleTaskExecutionLimit
argument_list|(
name|idleTaskExecutionLimit
argument_list|)
expr_stmt|;
block|}
DECL|method|setJmsOperations (JmsOperations jmsOperations)
specifier|public
name|void
name|setJmsOperations
parameter_list|(
name|JmsOperations
name|jmsOperations
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setJmsOperations
argument_list|(
name|jmsOperations
argument_list|)
expr_stmt|;
block|}
DECL|method|setListenerConnectionFactory (ConnectionFactory listenerConnectionFactory)
specifier|public
name|void
name|setListenerConnectionFactory
parameter_list|(
name|ConnectionFactory
name|listenerConnectionFactory
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setListenerConnectionFactory
argument_list|(
name|listenerConnectionFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setMaxConcurrentConsumers (int maxConcurrentConsumers)
specifier|public
name|void
name|setMaxConcurrentConsumers
parameter_list|(
name|int
name|maxConcurrentConsumers
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setMaxConcurrentConsumers
argument_list|(
name|maxConcurrentConsumers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setMaxMessagesPerTask (int maxMessagesPerTask)
specifier|public
name|void
name|setMaxMessagesPerTask
parameter_list|(
name|int
name|maxMessagesPerTask
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setMaxMessagesPerTask
argument_list|(
name|maxMessagesPerTask
argument_list|)
expr_stmt|;
block|}
DECL|method|setMessageConverter (MessageConverter messageConverter)
specifier|public
name|void
name|setMessageConverter
parameter_list|(
name|MessageConverter
name|messageConverter
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setMessageConverter
argument_list|(
name|messageConverter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setMessageIdEnabled (boolean messageIdEnabled)
specifier|public
name|void
name|setMessageIdEnabled
parameter_list|(
name|boolean
name|messageIdEnabled
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setMessageIdEnabled
argument_list|(
name|messageIdEnabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setMessageTimestampEnabled (boolean messageTimestampEnabled)
specifier|public
name|void
name|setMessageTimestampEnabled
parameter_list|(
name|boolean
name|messageTimestampEnabled
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setMessageTimestampEnabled
argument_list|(
name|messageTimestampEnabled
argument_list|)
expr_stmt|;
block|}
DECL|method|setMetadataJmsOperations (JmsOperations metadataJmsOperations)
specifier|public
name|void
name|setMetadataJmsOperations
parameter_list|(
name|JmsOperations
name|metadataJmsOperations
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setMetadataJmsOperations
argument_list|(
name|metadataJmsOperations
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setPreserveMessageQos (boolean preserveMessageQos)
specifier|public
name|void
name|setPreserveMessageQos
parameter_list|(
name|boolean
name|preserveMessageQos
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPreserveMessageQos
argument_list|(
name|preserveMessageQos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setPriority (int priority)
specifier|public
name|void
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
DECL|method|setProviderMetadata (JmsProviderMetadata providerMetadata)
specifier|public
name|void
name|setProviderMetadata
parameter_list|(
name|JmsProviderMetadata
name|providerMetadata
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setProviderMetadata
argument_list|(
name|providerMetadata
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setPubSubNoLocal (boolean pubSubNoLocal)
specifier|public
name|void
name|setPubSubNoLocal
parameter_list|(
name|boolean
name|pubSubNoLocal
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPubSubNoLocal
argument_list|(
name|pubSubNoLocal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setReceiveTimeout (long receiveTimeout)
specifier|public
name|void
name|setReceiveTimeout
parameter_list|(
name|long
name|receiveTimeout
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setReceiveTimeout
argument_list|(
name|receiveTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setRecoveryInterval (long recoveryInterval)
specifier|public
name|void
name|setRecoveryInterval
parameter_list|(
name|long
name|recoveryInterval
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setRecoveryInterval
argument_list|(
name|recoveryInterval
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setReplyTo (String replyToDestination)
specifier|public
name|void
name|setReplyTo
parameter_list|(
name|String
name|replyToDestination
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setReplyTo
argument_list|(
name|replyToDestination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setReplyToDeliveryPersistent (boolean replyToDeliveryPersistent)
specifier|public
name|void
name|setReplyToDeliveryPersistent
parameter_list|(
name|boolean
name|replyToDeliveryPersistent
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setReplyToDeliveryPersistent
argument_list|(
name|replyToDeliveryPersistent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setReplyToDestinationSelectorName (String replyToDestinationSelectorName)
specifier|public
name|void
name|setReplyToDestinationSelectorName
parameter_list|(
name|String
name|replyToDestinationSelectorName
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setReplyToDestinationSelectorName
argument_list|(
name|replyToDestinationSelectorName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setRequestTimeout (long requestTimeout)
specifier|public
name|void
name|setRequestTimeout
parameter_list|(
name|long
name|requestTimeout
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setRequestTimeout
argument_list|(
name|requestTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
annotation|@
name|Deprecated
DECL|method|setSubscriptionDurable (boolean subscriptionDurable)
specifier|public
name|void
name|setSubscriptionDurable
parameter_list|(
name|boolean
name|subscriptionDurable
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setSubscriptionDurable
argument_list|(
name|subscriptionDurable
argument_list|)
expr_stmt|;
block|}
DECL|method|setTaskExecutor (TaskExecutor taskExecutor)
specifier|public
name|void
name|setTaskExecutor
parameter_list|(
name|TaskExecutor
name|taskExecutor
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTaskExecutor
argument_list|(
name|taskExecutor
argument_list|)
expr_stmt|;
block|}
DECL|method|setTemplateConnectionFactory (ConnectionFactory templateConnectionFactory)
specifier|public
name|void
name|setTemplateConnectionFactory
parameter_list|(
name|ConnectionFactory
name|templateConnectionFactory
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTemplateConnectionFactory
argument_list|(
name|templateConnectionFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setTimeToLive (long timeToLive)
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|long
name|timeToLive
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setTransacted (boolean consumerTransacted)
specifier|public
name|void
name|setTransacted
parameter_list|(
name|boolean
name|consumerTransacted
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTransacted
argument_list|(
name|consumerTransacted
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
annotation|@
name|Deprecated
DECL|method|setTransactedInOut (boolean transactedInOut)
specifier|public
name|void
name|setTransactedInOut
parameter_list|(
name|boolean
name|transactedInOut
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTransactedInOut
argument_list|(
name|transactedInOut
argument_list|)
expr_stmt|;
block|}
DECL|method|setTransactionManager (PlatformTransactionManager transactionManager)
specifier|public
name|void
name|setTransactionManager
parameter_list|(
name|PlatformTransactionManager
name|transactionManager
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTransactionManager
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setTransactionName (String transactionName)
specifier|public
name|void
name|setTransactionName
parameter_list|(
name|String
name|transactionName
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTransactionName
argument_list|(
name|transactionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setTransactionTimeout (int transactionTimeout)
specifier|public
name|void
name|setTransactionTimeout
parameter_list|(
name|int
name|transactionTimeout
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTransactionTimeout
argument_list|(
name|transactionTimeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setUseMessageIDAsCorrelationID (boolean useMessageIDAsCorrelationID)
specifier|public
name|void
name|setUseMessageIDAsCorrelationID
parameter_list|(
name|boolean
name|useMessageIDAsCorrelationID
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setUseMessageIDAsCorrelationID
argument_list|(
name|useMessageIDAsCorrelationID
argument_list|)
expr_stmt|;
block|}
DECL|method|getJmsMessageType ()
specifier|public
name|JmsMessageType
name|getJmsMessageType
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getJmsMessageType
argument_list|()
return|;
block|}
DECL|method|setJmsMessageType (JmsMessageType jmsMessageType)
specifier|public
name|void
name|setJmsMessageType
parameter_list|(
name|JmsMessageType
name|jmsMessageType
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setJmsMessageType
argument_list|(
name|jmsMessageType
argument_list|)
expr_stmt|;
block|}
DECL|method|getJmsKeyFormatStrategy ()
specifier|public
name|JmsKeyFormatStrategy
name|getJmsKeyFormatStrategy
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getJmsKeyFormatStrategy
argument_list|()
return|;
block|}
DECL|method|setJmsKeyFormatStrategy (JmsKeyFormatStrategy jmsHeaderStrategy)
specifier|public
name|void
name|setJmsKeyFormatStrategy
parameter_list|(
name|JmsKeyFormatStrategy
name|jmsHeaderStrategy
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setJmsKeyFormatStrategy
argument_list|(
name|jmsHeaderStrategy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isTransferExchange ()
specifier|public
name|boolean
name|isTransferExchange
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isTransferExchange
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setTransferExchange (boolean transferExchange)
specifier|public
name|void
name|setTransferExchange
parameter_list|(
name|boolean
name|transferExchange
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTransferExchange
argument_list|(
name|transferExchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isTransferException ()
specifier|public
name|boolean
name|isTransferException
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isTransferException
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setTransferException (boolean transferException)
specifier|public
name|void
name|setTransferException
parameter_list|(
name|boolean
name|transferException
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTransferException
argument_list|(
name|transferException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isTestConnectionOnStartup ()
specifier|public
name|boolean
name|isTestConnectionOnStartup
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isTestConnectionOnStartup
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setTestConnectionOnStartup (boolean testConnectionOnStartup)
specifier|public
name|void
name|setTestConnectionOnStartup
parameter_list|(
name|boolean
name|testConnectionOnStartup
parameter_list|)
block|{
name|configuration
operator|.
name|setTestConnectionOnStartup
argument_list|(
name|testConnectionOnStartup
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isForceSendOriginalMessage ()
specifier|public
name|boolean
name|isForceSendOriginalMessage
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isForceSendOriginalMessage
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setForceSendOriginalMessage (boolean forceSendOriginalMessage)
specifier|public
name|void
name|setForceSendOriginalMessage
parameter_list|(
name|boolean
name|forceSendOriginalMessage
parameter_list|)
block|{
name|configuration
operator|.
name|setForceSendOriginalMessage
argument_list|(
name|forceSendOriginalMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|isDisableTimeToLive ()
specifier|public
name|boolean
name|isDisableTimeToLive
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isDisableTimeToLive
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
DECL|method|setDisableTimeToLive (boolean disableTimeToLive)
specifier|public
name|void
name|setDisableTimeToLive
parameter_list|(
name|boolean
name|disableTimeToLive
parameter_list|)
block|{
name|configuration
operator|.
name|setDisableTimeToLive
argument_list|(
name|disableTimeToLive
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Camel id"
argument_list|)
DECL|method|getCamelId ()
specifier|public
name|String
name|getCamelId
parameter_list|()
block|{
return|return
name|getCamelContext
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Endpoint Uri"
argument_list|)
annotation|@
name|Override
DECL|method|getEndpointUri ()
specifier|public
name|String
name|getEndpointUri
parameter_list|()
block|{
return|return
name|super
operator|.
name|getEndpointUri
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Service State"
argument_list|)
DECL|method|getState ()
specifier|public
name|String
name|getState
parameter_list|()
block|{
name|ServiceStatus
name|status
init|=
name|this
operator|.
name|getStatus
argument_list|()
decl_stmt|;
comment|// if no status exists then its stopped
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|status
operator|=
name|ServiceStatus
operator|.
name|Stopped
expr_stmt|;
block|}
return|return
name|status
operator|.
name|name
argument_list|()
return|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
annotation|@
name|Override
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
name|String
name|scheme
init|=
literal|"jms"
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
return|return
name|scheme
operator|+
literal|":"
operator|+
name|destination
return|;
block|}
elseif|else
if|if
condition|(
name|destinationName
operator|!=
literal|null
condition|)
block|{
return|return
name|scheme
operator|+
literal|":"
operator|+
name|destinationName
return|;
block|}
name|DestinationResolver
name|resolver
init|=
name|getDestinationResolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
return|return
name|scheme
operator|+
literal|":"
operator|+
name|resolver
return|;
block|}
return|return
name|super
operator|.
name|createEndpointUri
argument_list|()
return|;
block|}
block|}
end_class

end_unit

