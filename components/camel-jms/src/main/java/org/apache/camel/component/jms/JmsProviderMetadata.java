begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|SessionCallback
import|;
end_import

begin_comment
comment|/**  * A class which represents some metadata about the underlying JMS provider  * so that we can properly bridge JMS providers such as for dealing with temporary destinations.  *  * @version   */
end_comment

begin_class
DECL|class|JmsProviderMetadata
specifier|public
class|class
name|JmsProviderMetadata
block|{
DECL|field|temporaryQueueType
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryQueue
argument_list|>
name|temporaryQueueType
decl_stmt|;
DECL|field|temporaryTopicType
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryTopic
argument_list|>
name|temporaryTopicType
decl_stmt|;
comment|/**      * Lazily loads the temporary queue type if one has not been explicitly configured      * via calling the {@link #setTemporaryQueueType(Class)}      */
DECL|method|getTemporaryQueueType (JmsOperations template)
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryQueue
argument_list|>
name|getTemporaryQueueType
parameter_list|(
name|JmsOperations
name|template
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryQueue
argument_list|>
name|answer
init|=
name|getTemporaryQueueType
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|loadTemporaryDestinationTypes
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|answer
operator|=
name|getTemporaryQueueType
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * Lazily loads the temporary topic type if one has not been explicitly configured      * via calling the {@link #setTemporaryTopicType(Class)}      */
DECL|method|getTemporaryTopicType (JmsOperations template)
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryTopic
argument_list|>
name|getTemporaryTopicType
parameter_list|(
name|JmsOperations
name|template
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryTopic
argument_list|>
name|answer
init|=
name|getTemporaryTopicType
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|loadTemporaryDestinationTypes
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|answer
operator|=
name|getTemporaryTopicType
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|// Properties
comment|//-------------------------------------------------------------------------
DECL|method|getTemporaryQueueType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryQueue
argument_list|>
name|getTemporaryQueueType
parameter_list|()
block|{
return|return
name|temporaryQueueType
return|;
block|}
DECL|method|setTemporaryQueueType (Class<? extends TemporaryQueue> temporaryQueueType)
specifier|public
name|void
name|setTemporaryQueueType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryQueue
argument_list|>
name|temporaryQueueType
parameter_list|)
block|{
name|this
operator|.
name|temporaryQueueType
operator|=
name|temporaryQueueType
expr_stmt|;
block|}
DECL|method|getTemporaryTopicType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryTopic
argument_list|>
name|getTemporaryTopicType
parameter_list|()
block|{
return|return
name|temporaryTopicType
return|;
block|}
DECL|method|setTemporaryTopicType (Class<? extends TemporaryTopic> temporaryTopicType)
specifier|public
name|void
name|setTemporaryTopicType
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|TemporaryTopic
argument_list|>
name|temporaryTopicType
parameter_list|)
block|{
name|this
operator|.
name|temporaryTopicType
operator|=
name|temporaryTopicType
expr_stmt|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
DECL|method|loadTemporaryDestinationTypes (JmsOperations template)
specifier|protected
name|void
name|loadTemporaryDestinationTypes
parameter_list|(
name|JmsOperations
name|template
parameter_list|)
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No JmsTemplate supplied!"
argument_list|)
throw|;
block|}
name|template
operator|.
name|execute
argument_list|(
operator|new
name|SessionCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|doInJms
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|TemporaryQueue
name|queue
init|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|setTemporaryQueueType
argument_list|(
name|queue
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|TemporaryTopic
name|topic
init|=
name|session
operator|.
name|createTemporaryTopic
argument_list|()
decl_stmt|;
name|setTemporaryTopicType
argument_list|(
name|topic
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|delete
argument_list|()
expr_stmt|;
name|topic
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

