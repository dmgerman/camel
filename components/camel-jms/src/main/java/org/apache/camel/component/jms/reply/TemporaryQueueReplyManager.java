begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jms.reply
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|reply
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|DefaultJmsMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|DefaultSpringErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|AbstractMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|support
operator|.
name|destination
operator|.
name|DestinationResolver
import|;
end_import

begin_comment
comment|/**  * A {@link ReplyManager} when using temporary queues.  */
end_comment

begin_class
DECL|class|TemporaryQueueReplyManager
specifier|public
class|class
name|TemporaryQueueReplyManager
extends|extends
name|ReplyManagerSupport
block|{
DECL|field|destResolver
specifier|final
name|TemporaryReplyQueueDestinationResolver
name|destResolver
init|=
operator|new
name|TemporaryReplyQueueDestinationResolver
argument_list|()
decl_stmt|;
DECL|method|TemporaryQueueReplyManager (CamelContext camelContext)
specifier|public
name|TemporaryQueueReplyManager
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReplyTo ()
specifier|public
name|Destination
name|getReplyTo
parameter_list|()
block|{
try|try
block|{
name|destResolver
operator|.
name|destinationReady
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for JMSReplyTo destination refresh"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getReplyTo
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createReplyHandler (ReplyManager replyManager, Exchange exchange, AsyncCallback callback, String originalCorrelationId, String correlationId, long requestTimeout)
specifier|protected
name|ReplyHandler
name|createReplyHandler
parameter_list|(
name|ReplyManager
name|replyManager
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|,
name|String
name|originalCorrelationId
parameter_list|,
name|String
name|correlationId
parameter_list|,
name|long
name|requestTimeout
parameter_list|)
block|{
return|return
operator|new
name|TemporaryQueueReplyHandler
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|,
name|callback
argument_list|,
name|originalCorrelationId
argument_list|,
name|correlationId
argument_list|,
name|requestTimeout
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateCorrelationId (String correlationId, String newCorrelationId, long requestTimeout)
specifier|public
name|void
name|updateCorrelationId
parameter_list|(
name|String
name|correlationId
parameter_list|,
name|String
name|newCorrelationId
parameter_list|,
name|long
name|requestTimeout
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Updated provisional correlationId [{}] to expected correlationId [{}]"
argument_list|,
name|correlationId
argument_list|,
name|newCorrelationId
argument_list|)
expr_stmt|;
name|ReplyHandler
name|handler
init|=
name|correlation
operator|.
name|remove
argument_list|(
name|correlationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|correlation
operator|.
name|put
argument_list|(
name|newCorrelationId
argument_list|,
name|handler
argument_list|,
name|requestTimeout
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|handleReplyMessage (String correlationID, Message message, Session session)
specifier|protected
name|void
name|handleReplyMessage
parameter_list|(
name|String
name|correlationID
parameter_list|,
name|Message
name|message
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|ReplyHandler
name|handler
init|=
name|correlation
operator|.
name|get
argument_list|(
name|correlationID
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
operator|&&
name|endpoint
operator|.
name|isUseMessageIDAsCorrelationID
argument_list|()
condition|)
block|{
name|handler
operator|=
name|waitForProvisionCorrelationToBeUpdated
argument_list|(
name|correlationID
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|correlation
operator|.
name|remove
argument_list|(
name|correlationID
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onReply
argument_list|(
name|correlationID
argument_list|,
name|message
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we could not correlate the received reply message to a matching request and therefore
comment|// we cannot continue routing the unknown message
comment|// log a warn and then ignore the message
name|log
operator|.
name|warn
argument_list|(
literal|"Reply received for unknown correlationID [{}]. The message will be ignored: {}"
argument_list|,
name|correlationID
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setReplyToSelectorHeader (org.apache.camel.Message camelMessage, Message jmsMessage)
specifier|public
name|void
name|setReplyToSelectorHeader
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|camelMessage
parameter_list|,
name|Message
name|jmsMessage
parameter_list|)
throws|throws
name|JMSException
block|{
comment|// noop
block|}
annotation|@
name|Override
DECL|method|createListenerContainer ()
specifier|protected
name|AbstractMessageListenerContainer
name|createListenerContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Use DefaultMessageListenerContainer as it supports reconnects (see CAMEL-3193)
name|DefaultMessageListenerContainer
name|answer
init|=
operator|new
name|DefaultJmsMessageListenerContainer
argument_list|(
name|endpoint
argument_list|,
name|endpoint
operator|.
name|isAllowReplyManagerQuickStop
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setDestinationName
argument_list|(
literal|"temporary"
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDestinationResolver
argument_list|(
name|destResolver
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAutoStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getMaxMessagesPerTask
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|answer
operator|.
name|setMaxMessagesPerTask
argument_list|(
name|endpoint
operator|.
name|getMaxMessagesPerTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setIdleConsumerLimit
argument_list|(
name|endpoint
operator|.
name|getIdleConsumerLimit
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setIdleTaskExecutionLimit
argument_list|(
name|endpoint
operator|.
name|getIdleTaskExecutionLimit
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPubSubDomain
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setSubscriptionDurable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setConcurrentConsumers
argument_list|(
name|endpoint
operator|.
name|getReplyToConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getReplyToMaxConcurrentConsumers
argument_list|()
operator|>
literal|0
condition|)
block|{
name|answer
operator|.
name|setMaxConcurrentConsumers
argument_list|(
name|endpoint
operator|.
name|getReplyToMaxConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setConnectionFactory
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOrCreateConnectionFactory
argument_list|()
argument_list|)
expr_stmt|;
comment|// we use CACHE_CONSUMER by default to cling to the consumer as long as we can, since we can only consume
comment|// msgs from the JMS Connection that created the temp destination in the first place
if|if
condition|(
name|endpoint
operator|.
name|getReplyToCacheLevelName
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"CACHE_NONE"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getReplyToCacheLevelName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ReplyToCacheLevelName cannot be CACHE_NONE when using temporary reply queues. The value must be either CACHE_CONSUMER, or CACHE_SESSION"
argument_list|)
throw|;
block|}
name|answer
operator|.
name|setCacheLevelName
argument_list|(
name|endpoint
operator|.
name|getReplyToCacheLevelName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setCacheLevel
argument_list|(
name|DefaultMessageListenerContainer
operator|.
name|CACHE_CONSUMER
argument_list|)
expr_stmt|;
block|}
name|String
name|clientId
init|=
name|endpoint
operator|.
name|getClientId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|clientId
operator|+=
literal|".CamelReplyManager"
expr_stmt|;
name|answer
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
comment|// we cannot do request-reply over JMS with transaction
name|answer
operator|.
name|setSessionTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// other optional properties
name|answer
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|TemporaryReplyQueueExceptionListener
argument_list|(
name|destResolver
argument_list|,
name|endpoint
operator|.
name|getExceptionListener
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getErrorHandler
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setErrorHandler
argument_list|(
name|endpoint
operator|.
name|getErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|DefaultSpringErrorHandler
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|TemporaryQueueReplyManager
operator|.
name|class
argument_list|,
name|endpoint
operator|.
name|getErrorHandlerLoggingLevel
argument_list|()
argument_list|,
name|endpoint
operator|.
name|isErrorHandlerLogStackTrace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getReceiveTimeout
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|answer
operator|.
name|setReceiveTimeout
argument_list|(
name|endpoint
operator|.
name|getReceiveTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getRecoveryInterval
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|answer
operator|.
name|setRecoveryInterval
argument_list|(
name|endpoint
operator|.
name|getRecoveryInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endpoint
operator|.
name|getTaskExecutor
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Using custom TaskExecutor: {} on listener container: {}"
argument_list|,
name|endpoint
operator|.
name|getTaskExecutor
argument_list|()
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setTaskExecutor
argument_list|(
name|endpoint
operator|.
name|getTaskExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// setup a bean name which is used by Spring JMS as the thread name
comment|// use the name of the request destination
name|String
name|name
init|=
literal|"TemporaryQueueReplyManager["
operator|+
name|endpoint
operator|.
name|getDestinationName
argument_list|()
operator|+
literal|"]"
decl_stmt|;
name|answer
operator|.
name|setBeanName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|.
name|getConcurrentConsumers
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// log that we are using concurrent consumers
name|log
operator|.
name|info
argument_list|(
literal|"Using {}-{} concurrent consumers on {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|answer
operator|.
name|getConcurrentConsumers
argument_list|()
block|,
name|answer
operator|.
name|getMaxConcurrentConsumers
argument_list|()
block|,
name|name
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|class|TemporaryReplyQueueExceptionListener
specifier|private
specifier|final
class|class
name|TemporaryReplyQueueExceptionListener
implements|implements
name|ExceptionListener
block|{
DECL|field|destResolver
specifier|private
specifier|final
name|TemporaryReplyQueueDestinationResolver
name|destResolver
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|ExceptionListener
name|delegate
decl_stmt|;
DECL|method|TemporaryReplyQueueExceptionListener (TemporaryReplyQueueDestinationResolver destResolver, ExceptionListener delegate)
specifier|private
name|TemporaryReplyQueueExceptionListener
parameter_list|(
name|TemporaryReplyQueueDestinationResolver
name|destResolver
parameter_list|,
name|ExceptionListener
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|destResolver
operator|=
name|destResolver
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onException (JMSException exception)
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|exception
parameter_list|)
block|{
comment|// capture exceptions, and schedule a refresh of the ReplyTo destination
name|log
operator|.
name|warn
argument_list|(
literal|"Exception inside the DMLC for Temporary ReplyTo Queue for destination "
operator|+
name|endpoint
operator|.
name|getDestinationName
argument_list|()
operator|+
literal|", refreshing ReplyTo destination"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|destResolver
operator|.
name|scheduleRefresh
argument_list|()
expr_stmt|;
comment|// serve as a proxy for any exception listener the user may have set explicitly
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|onException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TemporaryReplyQueueDestinationResolver
specifier|private
specifier|final
class|class
name|TemporaryReplyQueueDestinationResolver
implements|implements
name|DestinationResolver
block|{
DECL|field|queue
specifier|private
name|TemporaryQueue
name|queue
decl_stmt|;
DECL|field|refreshWanted
specifier|private
specifier|final
name|AtomicBoolean
name|refreshWanted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|resolveDestinationName (Session session, String destinationName, boolean pubSubDomain)
specifier|public
name|Destination
name|resolveDestinationName
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|boolean
name|pubSubDomain
parameter_list|)
throws|throws
name|JMSException
block|{
comment|// use a temporary queue to gather the reply message
synchronized|synchronized
init|(
name|refreshWanted
init|)
block|{
if|if
condition|(
name|queue
operator|==
literal|null
operator|||
name|refreshWanted
operator|.
name|get
argument_list|()
condition|)
block|{
name|refreshWanted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|queue
operator|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|setReplyTo
argument_list|(
name|queue
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Refreshed Temporary ReplyTo Queue. New queue: {}"
argument_list|,
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|refreshWanted
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|queue
return|;
block|}
DECL|method|scheduleRefresh ()
specifier|public
name|void
name|scheduleRefresh
parameter_list|()
block|{
name|refreshWanted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|destinationReady ()
specifier|public
name|void
name|destinationReady
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|refreshWanted
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|refreshWanted
init|)
block|{
comment|//check if requestWanted is still true
if|if
condition|(
name|refreshWanted
operator|.
name|get
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Waiting for new Temporary ReplyTo queue to be assigned before we can continue"
argument_list|)
expr_stmt|;
name|refreshWanted
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

