begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.spring.batch
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|spring
operator|.
name|batch
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|batch
operator|.
name|core
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|batch
operator|.
name|core
operator|.
name|JobExecution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|batch
operator|.
name|core
operator|.
name|JobParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|batch
operator|.
name|core
operator|.
name|JobParametersBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|batch
operator|.
name|core
operator|.
name|launch
operator|.
name|JobLauncher
import|;
end_import

begin_comment
comment|/**  * Spring Batch Producer triggering the execution of the jobs.  */
end_comment

begin_class
DECL|class|SpringBatchProducer
specifier|public
class|class
name|SpringBatchProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|jobLauncher
specifier|private
specifier|final
name|JobLauncher
name|jobLauncher
decl_stmt|;
DECL|field|job
specifier|private
specifier|final
name|Job
name|job
decl_stmt|;
DECL|method|SpringBatchProducer (SpringBatchEndpoint endpoint, JobLauncher jobLauncher, Job job)
specifier|public
name|SpringBatchProducer
parameter_list|(
name|SpringBatchEndpoint
name|endpoint
parameter_list|,
name|JobLauncher
name|jobLauncher
parameter_list|,
name|Job
name|job
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|job
operator|=
name|job
expr_stmt|;
name|this
operator|.
name|jobLauncher
operator|=
name|jobLauncher
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|JobParameters
name|jobParameters
init|=
name|prepareJobParameters
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|JobExecution
name|jobExecution
init|=
name|jobLauncher
operator|.
name|run
argument_list|(
name|job
argument_list|,
name|jobParameters
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|putAll
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|jobExecution
argument_list|)
expr_stmt|;
block|}
comment|/**      * Helper method converting the Camel message headers into the Spring Batch parameters map. Date, Long and Double      * header values are converted to the appropriate types. All the other header values are converted to string      * representation.      *      * @param headers Camel message header to be converted      * @return Camel message headers converted into the Spring Batch parameters map      */
DECL|method|prepareJobParameters (Map<String, Object> headers)
specifier|protected
name|JobParameters
name|prepareJobParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
name|JobParametersBuilder
name|parametersBuilder
init|=
operator|new
name|JobParametersBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headerEntry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|headerKey
init|=
name|headerEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|headerValue
init|=
name|headerEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|headerValue
operator|instanceof
name|Date
condition|)
block|{
name|parametersBuilder
operator|.
name|addDate
argument_list|(
name|headerKey
argument_list|,
operator|(
name|Date
operator|)
name|headerValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|Long
condition|)
block|{
name|parametersBuilder
operator|.
name|addLong
argument_list|(
name|headerKey
argument_list|,
operator|(
name|Long
operator|)
name|headerValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|instanceof
name|Double
condition|)
block|{
name|parametersBuilder
operator|.
name|addDouble
argument_list|(
name|headerKey
argument_list|,
operator|(
name|Double
operator|)
name|headerValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|headerValue
operator|!=
literal|null
condition|)
block|{
name|parametersBuilder
operator|.
name|addString
argument_list|(
name|headerKey
argument_list|,
name|headerValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if the value is null we just put String with null value here to avoid the NPE
name|parametersBuilder
operator|.
name|addString
argument_list|(
name|headerKey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|JobParameters
name|jobParameters
init|=
name|parametersBuilder
operator|.
name|toJobParameters
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Prepared parameters for Spring Batch job: {}"
argument_list|,
name|jobParameters
argument_list|)
expr_stmt|;
return|return
name|jobParameters
return|;
block|}
block|}
end_class

end_unit

