begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.dropbox.integration.producer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dropbox
operator|.
name|integration
operator|.
name|producer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dropbox
operator|.
name|integration
operator|.
name|DropboxTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dropbox
operator|.
name|util
operator|.
name|DropboxConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dropbox
operator|.
name|util
operator|.
name|DropboxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dropbox
operator|.
name|util
operator|.
name|DropboxResultHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|dropbox
operator|.
name|util
operator|.
name|DropboxUploadMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsInstanceOf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|DropboxProducerPutSingleFileTest
specifier|public
class|class
name|DropboxProducerPutSingleFileTest
extends|extends
name|DropboxTestSupport
block|{
DECL|field|FILENAME
specifier|public
specifier|static
specifier|final
name|String
name|FILENAME
init|=
literal|"newFile.txt"
decl_stmt|;
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testCamelDropboxWithOptionInHeader ()
specifier|public
name|void
name|testCamelDropboxWithOptionInHeader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|file
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"camel"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|DropboxConstants
operator|.
name|HEADER_LOCAL_PATH
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|DropboxConstants
operator|.
name|HEADER_UPLOAD_MODE
argument_list|,
name|DropboxUploadMode
operator|.
name|add
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertFileUploaded
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadBodyTest ()
specifier|public
name|void
name|uploadBodyTest
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|"Helo Camels"
argument_list|,
name|DropboxConstants
operator|.
name|HEADER_UPLOAD_MODE
argument_list|,
name|DropboxUploadMode
operator|.
name|add
argument_list|)
expr_stmt|;
name|assertFileUploaded
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadIfExistsAddTest ()
specifier|public
name|void
name|uploadIfExistsAddTest
parameter_list|()
throws|throws
name|Exception
block|{
name|thrown
operator|.
name|expectCause
argument_list|(
name|IsInstanceOf
operator|.
name|instanceOf
argument_list|(
name|DropboxException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
name|FILENAME
argument_list|,
literal|"content"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"camel"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|DropboxConstants
operator|.
name|HEADER_LOCAL_PATH
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|DropboxConstants
operator|.
name|HEADER_UPLOAD_MODE
argument_list|,
name|DropboxUploadMode
operator|.
name|add
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|uploadIfExistsForceTest ()
specifier|public
name|void
name|uploadIfExistsForceTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|newContent
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|createFile
argument_list|(
name|FILENAME
argument_list|,
literal|"Hi camels"
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"camel"
argument_list|,
literal|".txt"
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|bw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|bw
operator|.
name|write
argument_list|(
name|newContent
argument_list|)
expr_stmt|;
name|bw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|DropboxConstants
operator|.
name|HEADER_LOCAL_PATH
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|DropboxConstants
operator|.
name|HEADER_UPLOAD_MODE
argument_list|,
name|DropboxUploadMode
operator|.
name|force
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertFileUploaded
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newContent
argument_list|,
name|getFileContent
argument_list|(
name|workdir
operator|+
literal|"/"
operator|+
name|FILENAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFileUploaded ()
specifier|private
name|void
name|assertFileUploaded
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|DropboxResultHeader
operator|.
name|UPLOADED_FILE
operator|.
name|name
argument_list|()
argument_list|,
name|workdir
operator|+
literal|"/"
operator|+
name|FILENAME
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"dropbox://put?accessToken={{accessToken}}&remotePath="
operator|+
name|workdir
operator|+
literal|"/"
operator|+
name|FILENAME
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

