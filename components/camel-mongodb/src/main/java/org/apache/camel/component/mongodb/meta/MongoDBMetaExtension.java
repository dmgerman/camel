begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb.meta
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|ObjectNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|Filters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|metadata
operator|.
name|AbstractMetaDataExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|metadata
operator|.
name|MetaDataBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|conf
operator|.
name|ConnectionParamsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
operator|.
name|cast
import|;
end_import

begin_class
DECL|class|MongoDBMetaExtension
specifier|public
class|class
name|MongoDBMetaExtension
extends|extends
name|AbstractMetaDataExtension
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDBMetaExtension
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|objectMapper
specifier|private
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|method|MongoDBMetaExtension ()
specifier|public
name|MongoDBMetaExtension
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MongoDBMetaExtension (CamelContext context)
specifier|public
name|MongoDBMetaExtension
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|meta (Map<String, Object> parameters)
specifier|public
name|Optional
argument_list|<
name|MetaData
argument_list|>
name|meta
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|textParameters
init|=
name|cast
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Fetching mongodb meta information with params: {}"
argument_list|,
name|textParameters
argument_list|)
expr_stmt|;
name|ConnectionParamsConfiguration
name|mongoConf
init|=
operator|new
name|ConnectionParamsConfiguration
argument_list|(
name|textParameters
argument_list|)
decl_stmt|;
name|MongoClientURI
name|connectionURI
init|=
operator|new
name|MongoClientURI
argument_list|(
name|mongoConf
operator|.
name|getMongoClientURI
argument_list|()
argument_list|)
decl_stmt|;
name|JsonNode
name|collectionInfoRoot
decl_stmt|;
try|try
init|(
name|MongoClient
name|mongoConnection
init|=
operator|new
name|MongoClient
argument_list|(
name|connectionURI
argument_list|)
init|)
block|{
name|Document
name|collectionInfo
init|=
name|mongoConnection
operator|.
name|getDatabase
argument_list|(
name|textParameters
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
argument_list|)
operator|.
name|listCollections
argument_list|()
operator|.
name|filter
argument_list|(
name|Filters
operator|.
name|eq
argument_list|(
literal|"name"
argument_list|,
name|textParameters
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Collection info: {}"
argument_list|,
name|collectionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionInfo
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Cannot read information for collection {}.{}"
argument_list|,
name|textParameters
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
argument_list|,
name|textParameters
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|String
name|collectionInfoJson
init|=
name|collectionInfo
operator|.
name|toJson
argument_list|()
decl_stmt|;
name|collectionInfoRoot
operator|=
name|objectMapper
operator|.
name|readTree
argument_list|(
name|collectionInfoJson
operator|.
name|replaceAll
argument_list|(
literal|"bsonType"
argument_list|,
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error occurred while reading schema information"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
name|JsonNode
name|schemaRoot
init|=
name|collectionInfoRoot
operator|.
name|path
argument_list|(
literal|"options"
argument_list|)
operator|.
name|path
argument_list|(
literal|"validator"
argument_list|)
operator|.
name|path
argument_list|(
literal|"$jsonSchema"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|schemaRoot
operator|.
name|isMissingNode
argument_list|()
condition|)
block|{
name|ObjectNode
name|root
init|=
operator|(
name|ObjectNode
operator|)
name|schemaRoot
decl_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"$schema"
argument_list|,
literal|"http://json-schema.org/schema#"
argument_list|)
expr_stmt|;
name|root
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"urn:jsonschema:%s:%s:%s)"
argument_list|,
literal|"org:apache:camel:component:mongodb"
argument_list|,
name|textParameters
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
argument_list|,
name|textParameters
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|MetaDataBuilder
operator|.
name|on
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
operator|.
name|withAttribute
argument_list|(
name|MetaData
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/schema+json"
argument_list|)
operator|.
name|withAttribute
argument_list|(
name|MetaData
operator|.
name|JAVA_TYPE
argument_list|,
name|JsonNode
operator|.
name|class
argument_list|)
operator|.
name|withPayload
argument_list|(
name|root
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Cannot retrieve info for : {}.{} collection. Likely the collection has not been provided with a validator"
argument_list|,
name|textParameters
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
argument_list|,
name|textParameters
operator|.
name|get
argument_list|(
literal|"collection"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

