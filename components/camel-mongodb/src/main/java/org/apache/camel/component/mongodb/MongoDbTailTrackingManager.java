begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObjectBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|Mongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MongoDbTailTrackingManager
specifier|public
class|class
name|MongoDbTailTrackingManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDbTailTrackingManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lastVal
specifier|public
name|Object
name|lastVal
decl_stmt|;
DECL|field|connection
specifier|private
specifier|final
name|Mongo
name|connection
decl_stmt|;
DECL|field|config
specifier|private
specifier|final
name|MongoDbTailTrackingConfig
name|config
decl_stmt|;
DECL|field|dbCol
specifier|private
name|DBCollection
name|dbCol
decl_stmt|;
DECL|field|trackingObj
specifier|private
name|DBObject
name|trackingObj
decl_stmt|;
DECL|method|MongoDbTailTrackingManager (Mongo connection, MongoDbTailTrackingConfig config)
specifier|public
name|MongoDbTailTrackingManager
parameter_list|(
name|Mongo
name|connection
parameter_list|,
name|MongoDbTailTrackingConfig
name|config
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|persistent
condition|)
block|{
return|return;
block|}
name|dbCol
operator|=
name|connection
operator|.
name|getDB
argument_list|(
name|config
operator|.
name|db
argument_list|)
operator|.
name|getCollection
argument_list|(
name|config
operator|.
name|collection
argument_list|)
expr_stmt|;
name|DBObject
name|filter
init|=
operator|new
name|BasicDBObject
argument_list|(
literal|"persistentId"
argument_list|,
name|config
operator|.
name|persistentId
argument_list|)
decl_stmt|;
name|trackingObj
operator|=
name|dbCol
operator|.
name|findOne
argument_list|(
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|trackingObj
operator|==
literal|null
condition|)
block|{
name|dbCol
operator|.
name|insert
argument_list|(
name|filter
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
expr_stmt|;
name|trackingObj
operator|=
name|dbCol
operator|.
name|findOne
argument_list|()
expr_stmt|;
block|}
comment|// keep only the _id, the rest is useless and causes more overhead during update
name|trackingObj
operator|=
operator|new
name|BasicDBObject
argument_list|(
literal|"_id"
argument_list|,
name|trackingObj
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|persistToStore ()
specifier|public
specifier|synchronized
name|void
name|persistToStore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|persistent
operator|||
name|lastVal
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Persisting lastVal={} to store, collection: {}"
argument_list|,
name|lastVal
argument_list|,
name|config
operator|.
name|collection
argument_list|)
expr_stmt|;
block|}
name|DBObject
name|updateObj
init|=
name|BasicDBObjectBuilder
operator|.
name|start
argument_list|()
operator|.
name|add
argument_list|(
literal|"$set"
argument_list|,
operator|new
name|BasicDBObject
argument_list|(
name|config
operator|.
name|field
argument_list|,
name|lastVal
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|dbCol
operator|.
name|update
argument_list|(
name|trackingObj
argument_list|,
name|updateObj
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
expr_stmt|;
name|trackingObj
operator|=
name|dbCol
operator|.
name|findOne
argument_list|()
expr_stmt|;
block|}
DECL|method|recoverFromStore ()
specifier|public
specifier|synchronized
name|Object
name|recoverFromStore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|persistent
condition|)
block|{
return|return
literal|null
return|;
block|}
name|lastVal
operator|=
name|dbCol
operator|.
name|findOne
argument_list|(
name|trackingObj
argument_list|)
operator|.
name|get
argument_list|(
name|config
operator|.
name|field
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovered lastVal={} from store, collection: {}"
argument_list|,
name|lastVal
argument_list|,
name|config
operator|.
name|collection
argument_list|)
expr_stmt|;
block|}
return|return
name|lastVal
return|;
block|}
DECL|method|setLastVal (DBObject o)
specifier|public
name|void
name|setLastVal
parameter_list|(
name|DBObject
name|o
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|increasingField
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|lastVal
operator|=
name|o
operator|.
name|get
argument_list|(
name|config
operator|.
name|increasingField
argument_list|)
expr_stmt|;
block|}
DECL|method|getIncreasingFieldName ()
specifier|public
name|String
name|getIncreasingFieldName
parameter_list|()
block|{
return|return
name|config
operator|.
name|increasingField
return|;
block|}
block|}
end_class

end_unit

