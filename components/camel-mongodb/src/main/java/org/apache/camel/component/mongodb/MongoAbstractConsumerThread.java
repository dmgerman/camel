begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MongoAbstractConsumerThread
specifier|abstract
class|class
name|MongoAbstractConsumerThread
implements|implements
name|Runnable
block|{
DECL|field|log
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// local final copies of variables for increased performance
DECL|field|cursorRegenerationDelay
specifier|protected
specifier|final
name|long
name|cursorRegenerationDelay
decl_stmt|;
DECL|field|cursorRegenerationDelayEnabled
specifier|protected
specifier|final
name|boolean
name|cursorRegenerationDelayEnabled
decl_stmt|;
DECL|field|dbCol
specifier|protected
specifier|final
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|dbCol
decl_stmt|;
DECL|field|consumer
specifier|protected
specifier|final
name|Consumer
name|consumer
decl_stmt|;
DECL|field|endpoint
specifier|protected
specifier|final
name|MongoDbEndpoint
name|endpoint
decl_stmt|;
DECL|field|cursor
specifier|protected
name|MongoCursor
name|cursor
decl_stmt|;
DECL|field|keepRunning
specifier|volatile
name|boolean
name|keepRunning
init|=
literal|true
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|volatile
name|boolean
name|stopped
decl_stmt|;
DECL|field|stoppedLatch
specifier|private
specifier|volatile
name|CountDownLatch
name|stoppedLatch
decl_stmt|;
DECL|method|MongoAbstractConsumerThread (MongoDbEndpoint endpoint, Consumer consumer)
name|MongoAbstractConsumerThread
parameter_list|(
name|MongoDbEndpoint
name|endpoint
parameter_list|,
name|Consumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|dbCol
operator|=
name|endpoint
operator|.
name|getMongoCollection
argument_list|()
expr_stmt|;
name|this
operator|.
name|cursorRegenerationDelay
operator|=
name|endpoint
operator|.
name|getCursorRegenerationDelay
argument_list|()
expr_stmt|;
name|this
operator|.
name|cursorRegenerationDelayEnabled
operator|=
operator|!
operator|(
name|this
operator|.
name|cursorRegenerationDelay
operator|==
literal|0
operator|)
expr_stmt|;
block|}
DECL|method|initializeCursor ()
specifier|protected
specifier|abstract
name|MongoCursor
argument_list|<
name|Document
argument_list|>
name|initializeCursor
parameter_list|()
function_decl|;
DECL|method|init ()
specifier|protected
specifier|abstract
name|void
name|init
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|doRun ()
specifier|protected
specifier|abstract
name|void
name|doRun
parameter_list|()
function_decl|;
DECL|method|regeneratingCursor ()
specifier|protected
specifier|abstract
name|void
name|regeneratingCursor
parameter_list|()
function_decl|;
comment|/**      * Main loop.      */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|stoppedLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|keepRunning
condition|)
block|{
name|doRun
argument_list|()
expr_stmt|;
comment|// regenerate the cursor, if reading failed for some reason
if|if
condition|(
name|keepRunning
condition|)
block|{
name|cursor
operator|.
name|close
argument_list|()
expr_stmt|;
name|regeneratingCursor
argument_list|()
expr_stmt|;
if|if
condition|(
name|cursorRegenerationDelayEnabled
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|cursorRegenerationDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{                     }
block|}
name|cursor
operator|=
name|initializeCursor
argument_list|()
expr_stmt|;
block|}
block|}
name|stopped
operator|=
literal|true
expr_stmt|;
name|stoppedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|stop ()
specifier|protected
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping MongoDB Tailable Cursor consumer, bound to collection: {}"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"db: %s, col: %s"
argument_list|,
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|keepRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|cursor
operator|!=
literal|null
condition|)
block|{
name|cursor
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|awaitStopped
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopped MongoDB Tailable Cursor consumer, bound to collection: {}"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"db: %s, col: %s"
argument_list|,
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|awaitStopped ()
specifier|private
name|void
name|awaitStopped
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|stopped
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Going to wait for stopping"
argument_list|)
expr_stmt|;
name|stoppedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

