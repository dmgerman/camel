begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|bulk
operator|.
name|BulkWriteResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|AggregateIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|DistinctIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|FindIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoDatabase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|BulkWriteOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|UpdateOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|WriteModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|result
operator|.
name|DeleteResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|result
operator|.
name|UpdateResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|conversions
operator|.
name|Bson
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The MongoDb producer.  */
end_comment

begin_class
DECL|class|MongoDbProducer
specifier|public
class|class
name|MongoDbProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDbProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|operations
specifier|private
specifier|final
name|Map
argument_list|<
name|MongoDbOperation
argument_list|,
name|Processor
argument_list|>
name|operations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|endpoint
specifier|private
name|MongoDbEndpoint
name|endpoint
decl_stmt|;
block|{
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|aggregate
argument_list|,
name|createDoAggregate
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|command
argument_list|,
name|createDoCommand
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|count
argument_list|,
name|createDoCount
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|findDistinct
argument_list|,
name|createDoDistinct
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|findAll
argument_list|,
name|createDoFindAll
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|findById
argument_list|,
name|createDoFindById
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|findOneByQuery
argument_list|,
name|createDoFindOneByQuery
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|getColStats
argument_list|,
name|createDoGetColStats
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|getDbStats
argument_list|,
name|createDoGetDbStats
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|insert
argument_list|,
name|createDoInsert
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|remove
argument_list|,
name|createDoRemove
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|save
argument_list|,
name|createDoSave
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|update
argument_list|,
name|createDoUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|MongoDbOperation
operator|.
name|bulkWrite
argument_list|,
name|createDoBulkWrite
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MongoDbProducer (MongoDbEndpoint endpoint)
specifier|public
name|MongoDbProducer
parameter_list|(
name|MongoDbEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|MongoDbOperation
name|operation
init|=
name|endpoint
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|Object
name|header
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|OPERATION_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding default operation with operation specified on header: {}"
argument_list|,
name|header
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|header
operator|instanceof
name|MongoDbOperation
condition|)
block|{
name|operation
operator|=
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|MongoDbOperation
operator|.
name|class
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// evaluate as a String
name|operation
operator|=
name|MongoDbOperation
operator|.
name|valueOf
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|OPERATION_HEADER
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Operation specified on header is not supported. Value: "
operator|+
name|header
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|invokeOperation
argument_list|(
name|operation
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|MongoDbComponent
operator|.
name|wrapInCamelMongoDbException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Entry method that selects the appropriate MongoDB operation and executes it      *      * @param operation      * @param exchange      */
DECL|method|invokeOperation (MongoDbOperation operation, Exchange exchange)
specifier|protected
name|void
name|invokeOperation
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Processor
name|processor
init|=
name|operations
operator|.
name|get
argument_list|(
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
name|processor
operator|!=
literal|null
condition|)
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Operation not supported. Value: "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
DECL|method|bind (MongoDbOperation operation, Function<Exchange, Object> mongoDbFunction)
specifier|private
name|MongoDbProducer
name|bind
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|,
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|mongoDbFunction
parameter_list|)
block|{
name|operations
operator|.
name|put
argument_list|(
name|operation
argument_list|,
name|wrap
argument_list|(
name|mongoDbFunction
argument_list|,
name|operation
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|// ----------- MongoDB operations ----------------
DECL|method|createDbStatsCommand ()
specifier|private
name|BasicDBObject
name|createDbStatsCommand
parameter_list|()
block|{
return|return
operator|new
name|BasicDBObject
argument_list|(
literal|"dbStats"
argument_list|,
literal|1
argument_list|)
operator|.
name|append
argument_list|(
literal|"scale"
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|createCollStatsCommand (String collectionName)
specifier|private
name|BasicDBObject
name|createCollStatsCommand
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
return|return
operator|new
name|BasicDBObject
argument_list|(
literal|"collStats"
argument_list|,
name|collectionName
argument_list|)
return|;
block|}
comment|// --------- Convenience methods -----------------------
DECL|method|calculateDb (Exchange exchange)
specifier|private
name|MongoDatabase
name|calculateDb
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// dynamic calculation is an option. In most cases it won't be used and we should not penalise all users with running this
comment|// resolution logic on every Exchange if they won't be using this functionality at all
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isDynamicity
argument_list|()
condition|)
block|{
return|return
name|endpoint
operator|.
name|getMongoDatabase
argument_list|()
return|;
block|}
name|String
name|dynamicDB
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|DATABASE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|MongoDatabase
name|db
decl_stmt|;
if|if
condition|(
name|dynamicDB
operator|==
literal|null
condition|)
block|{
name|db
operator|=
name|endpoint
operator|.
name|getMongoDatabase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|db
operator|=
name|endpoint
operator|.
name|getMongoConnection
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|dynamicDB
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dynamic database selected: {}"
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
DECL|method|calculateCollectionName (Exchange exchange)
specifier|private
name|String
name|calculateCollectionName
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isDynamicity
argument_list|()
condition|)
block|{
return|return
name|endpoint
operator|.
name|getCollection
argument_list|()
return|;
block|}
name|String
name|dynamicCollection
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|COLLECTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dynamicCollection
operator|==
literal|null
condition|)
block|{
return|return
name|endpoint
operator|.
name|getCollection
argument_list|()
return|;
block|}
return|return
name|dynamicCollection
return|;
block|}
DECL|method|calculateCollection (Exchange exchange)
specifier|private
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|calculateCollection
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// dynamic calculation is an option. In most cases it won't be used and we should not penalise all users with running this
comment|// resolution logic on every Exchange if they won't be using this functionality at all
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isDynamicity
argument_list|()
condition|)
block|{
return|return
name|endpoint
operator|.
name|getMongoCollection
argument_list|()
operator|.
name|withWriteConcern
argument_list|(
name|endpoint
operator|.
name|getWriteConcern
argument_list|()
argument_list|)
return|;
block|}
name|String
name|dynamicDB
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|DATABASE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|dynamicCollection
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|COLLECTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|BasicDBObject
argument_list|>
name|dynamicIndex
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|COLLECTION_INDEX
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
decl_stmt|;
if|if
condition|(
name|dynamicDB
operator|==
literal|null
operator|&&
name|dynamicCollection
operator|==
literal|null
condition|)
block|{
name|dbCol
operator|=
name|endpoint
operator|.
name|getMongoCollection
argument_list|()
operator|.
name|withWriteConcern
argument_list|(
name|endpoint
operator|.
name|getWriteConcern
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MongoDatabase
name|db
init|=
name|calculateDb
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|dynamicCollection
operator|==
literal|null
condition|)
block|{
name|dbCol
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|,
name|BasicDBObject
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dbCol
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|dynamicCollection
argument_list|,
name|BasicDBObject
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// on the fly add index
if|if
condition|(
name|dynamicIndex
operator|==
literal|null
condition|)
block|{
name|endpoint
operator|.
name|ensureIndex
argument_list|(
name|dbCol
argument_list|,
name|endpoint
operator|.
name|createIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|endpoint
operator|.
name|ensureIndex
argument_list|(
name|dbCol
argument_list|,
name|dynamicIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dynamic database and/or collection selected: {}->{}"
argument_list|,
name|endpoint
operator|.
name|getDatabase
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dbCol
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|attemptConvertToList (List insertList, Exchange exchange)
specifier|private
name|List
argument_list|<
name|DBObject
argument_list|>
name|attemptConvertToList
parameter_list|(
name|List
name|insertList
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|CamelMongoDbException
block|{
name|List
argument_list|<
name|DBObject
argument_list|>
name|dbObjectList
init|=
operator|new
name|ArrayList
argument_list|<
name|DBObject
argument_list|>
argument_list|(
name|insertList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|TypeConverter
name|converter
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|item
range|:
name|insertList
control|)
block|{
try|try
block|{
name|DBObject
name|dbObject
init|=
name|converter
operator|.
name|mandatoryConvertTo
argument_list|(
name|DBObject
operator|.
name|class
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|dbObjectList
operator|.
name|add
argument_list|(
name|dbObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"MongoDB operation = insert, Assuming List variant of MongoDB insert operation, but List contains non-DBObject items"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|dbObjectList
return|;
block|}
DECL|method|isWriteOperation (MongoDbOperation operation)
specifier|private
name|boolean
name|isWriteOperation
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|)
block|{
return|return
name|MongoDbComponent
operator|.
name|WRITE_OPERATIONS
operator|.
name|contains
argument_list|(
name|operation
argument_list|)
return|;
block|}
DECL|method|wrap (Function<Exchange, Object> supplier, MongoDbOperation operation)
specifier|private
name|Processor
name|wrap
parameter_list|(
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|supplier
parameter_list|,
name|MongoDbOperation
name|operation
parameter_list|)
block|{
return|return
name|exchange
lambda|->
block|{
name|Object
name|result
init|=
name|supplier
operator|.
name|apply
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|copyHeaders
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|moveBodyToOutIfResultIsReturnedAsHeader
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|processAndTransferResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
return|;
block|}
DECL|method|copyHeaders (Exchange exchange)
specifier|private
name|void
name|copyHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|MessageHelper
operator|.
name|copyHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|moveBodyToOutIfResultIsReturnedAsHeader (Exchange exchange, MongoDbOperation operation)
specifier|private
name|void
name|moveBodyToOutIfResultIsReturnedAsHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MongoDbOperation
name|operation
parameter_list|)
block|{
if|if
condition|(
name|isWriteOperation
argument_list|(
name|operation
argument_list|)
operator|&&
name|endpoint
operator|.
name|isWriteResultAsHeader
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processAndTransferResult (Object result, Exchange exchange, MongoDbOperation operation)
specifier|private
name|void
name|processAndTransferResult
parameter_list|(
name|Object
name|result
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|MongoDbOperation
name|operation
parameter_list|)
block|{
comment|// determine where to set the WriteResult: as the OUT body or as an IN message header
if|if
condition|(
name|isWriteOperation
argument_list|(
name|operation
argument_list|)
operator|&&
name|endpoint
operator|.
name|isWriteResultAsHeader
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|WRITERESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createDoGetColStats ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoGetColStats
parameter_list|()
block|{
return|return
name|exch
lambda|->
name|calculateDb
argument_list|(
name|exch
argument_list|)
operator|.
name|runCommand
argument_list|(
name|createCollStatsCommand
argument_list|(
name|calculateCollectionName
argument_list|(
name|exch
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|createDoFindOneByQuery ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoFindOneByQuery
parameter_list|()
block|{
return|return
name|exch
lambda|->
block|{
try|try
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exch
argument_list|)
decl_stmt|;
name|BasicDBObject
name|o
init|=
name|exch
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|BasicDBObject
name|sortBy
init|=
name|exch
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|SORT_BY
argument_list|,
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|BasicDBObject
name|fieldFilter
init|=
name|exch
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|FIELDS_FILTER
argument_list|,
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|fieldFilter
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sortBy
operator|==
literal|null
condition|)
block|{
name|sortBy
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
block|}
name|BasicDBObject
name|ret
init|=
name|dbCol
operator|.
name|find
argument_list|(
name|o
argument_list|)
operator|.
name|projection
argument_list|(
name|fieldFilter
argument_list|)
operator|.
name|sort
argument_list|(
name|sortBy
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|exch
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_TOTAL_SIZE
argument_list|,
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Payload is no BasicDBObject"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createDoCount ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoCount
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
name|BasicDBObject
name|query
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|BasicDBObject
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|query
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|Long
operator|)
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
operator|.
name|count
argument_list|(
name|query
argument_list|)
return|;
block|}
return|;
block|}
DECL|method|createDoDistinct ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoDistinct
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// get the parameters out of the Exchange Header
name|String
name|distinctFieldName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|DISTINCT_QUERY_FIELD
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|BasicDBObject
name|query
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|BasicDBObject
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
decl_stmt|;
name|DistinctIterable
argument_list|<
name|String
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|distinct
argument_list|(
name|distinctFieldName
argument_list|,
name|query
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|dbCol
operator|.
name|distinct
argument_list|(
name|distinctFieldName
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ret
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
operator|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|result
operator|)
operator|::
name|add
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_PAGE_SIZE
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|result
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ret
operator|.
name|iterator
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|;
block|}
DECL|method|createDoFindAll ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoFindAll
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
name|Iterable
argument_list|<
name|BasicDBObject
argument_list|>
name|result
decl_stmt|;
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// do not use getMandatoryBody, because if the body is empty we want to retrieve all objects in the collection
name|BasicDBObject
name|query
init|=
literal|null
decl_stmt|;
comment|// do not run around looking for a type converter unless there is a need for it
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|BasicDBObject
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BasicDBObject
name|fieldFilter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|FIELDS_FILTER
argument_list|,
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// get the batch size and number to skip
name|Integer
name|batchSize
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|BATCH_SIZE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|numToSkip
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|NUM_TO_SKIP
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|limit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|LIMIT
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|BasicDBObject
name|sortBy
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|SORT_BY
argument_list|,
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|FindIterable
argument_list|<
name|BasicDBObject
argument_list|>
name|ret
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
operator|&&
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|(
name|query
argument_list|)
operator|.
name|projection
argument_list|(
name|fieldFilter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|()
operator|.
name|projection
argument_list|(
name|fieldFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortBy
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|sort
argument_list|(
name|sortBy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|batchSize
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|batchSize
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numToSkip
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|skip
argument_list|(
name|numToSkip
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|MongoDbOutputType
operator|.
name|DBCursor
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getOutputType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ret
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
operator|(
operator|(
name|List
argument_list|<
name|BasicDBObject
argument_list|>
operator|)
name|result
operator|)
operator|::
name|add
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_PAGE_SIZE
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|BasicDBObject
argument_list|>
operator|)
name|result
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ret
operator|.
name|iterator
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|ret
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|;
block|}
DECL|method|createDoInsert ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoInsert
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|boolean
name|singleInsert
init|=
operator|!
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|MULTIINSERT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|insert
decl_stmt|;
if|if
condition|(
name|singleInsert
condition|)
block|{
name|insert
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|DBObject
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|insert
operator|==
literal|null
condition|)
block|{
comment|// previous behavior:
comment|// body could not be converted to DBObject, check to see if it's of type List<DBObject>
name|insert
operator|=
name|getMultiInsertBody
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|singleInsert
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|insert
operator|instanceof
name|BasicDBList
condition|)
block|{
name|singleInsert
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|insert
operator|=
name|getMultiInsertBody
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|singleInsert
condition|)
block|{
name|BasicDBObject
name|insertObject
init|=
operator|(
name|BasicDBObject
operator|)
name|insert
decl_stmt|;
name|dbCol
operator|.
name|insertOne
argument_list|(
name|insertObject
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|OID
argument_list|,
name|insertObject
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|BasicDBObject
argument_list|>
name|insertObjects
init|=
operator|(
name|List
argument_list|<
name|BasicDBObject
argument_list|>
operator|)
name|insert
decl_stmt|;
name|dbCol
operator|.
name|insertMany
argument_list|(
name|insertObjects
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|objectIdentification
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|insertObjects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|objectIdentification
operator|.
name|addAll
argument_list|(
name|insertObjects
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|insertObject
lambda|->
name|insertObject
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|OID
argument_list|,
name|objectIdentification
argument_list|)
expr_stmt|;
block|}
return|return
name|insert
return|;
block|}
return|;
block|}
DECL|method|getMultiInsertBody (Exchange exchange)
specifier|private
name|Object
name|getMultiInsertBody
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|insert
decl_stmt|;
comment|// we try List first, because it should be the common case
name|insert
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|insert
operator|!=
literal|null
condition|)
block|{
comment|// if the body of type List was obtained, ensure that all items are of type DBObject and cast the List to List<DBObject>
name|insert
operator|=
name|attemptConvertToList
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|insert
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insert
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|tryConvertTo
argument_list|(
name|BasicDBList
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|insert
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"MongoDB operation = insert, Body is not conversible to type DBObject nor List<DBObject>"
argument_list|)
throw|;
block|}
return|return
name|insert
return|;
block|}
DECL|method|createDoUpdate ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoUpdate
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
try|try
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BasicDBObject
argument_list|>
name|saveObj
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
call|(
name|Class
argument_list|<
name|List
argument_list|<
name|BasicDBObject
argument_list|>
argument_list|>
call|)
argument_list|(
name|Class
argument_list|<
name|?
argument_list|>
argument_list|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|saveObj
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"MongoDB operation = insert, failed because body is not a List of DBObject objects with size = 2"
argument_list|)
throw|;
block|}
name|BasicDBObject
name|updateCriteria
init|=
name|saveObj
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BasicDBObject
name|objNew
init|=
name|saveObj
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Boolean
name|multi
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|MULTIUPDATE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|upsert
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|UPSERT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|UpdateResult
name|result
decl_stmt|;
name|UpdateOptions
name|options
init|=
operator|new
name|UpdateOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|upsert
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|upsert
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multi
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|dbCol
operator|.
name|updateOne
argument_list|(
name|updateCriteria
argument_list|,
name|objNew
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|dbCol
operator|.
name|updateMany
argument_list|(
name|updateCriteria
argument_list|,
name|objNew
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|isModifiedCountAvailable
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RECORDS_AFFECTED
argument_list|,
name|result
operator|.
name|getModifiedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Invalid payload for update"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createDoRemove ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoRemove
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
try|try
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|BasicDBObject
name|removeObj
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|DeleteResult
name|result
init|=
name|dbCol
operator|.
name|deleteMany
argument_list|(
name|removeObj
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|wasAcknowledged
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RECORDS_AFFECTED
argument_list|,
name|result
operator|.
name|getDeletedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Invalid payload for remove"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createDoAggregate ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoAggregate
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
try|try
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|DBObject
name|query
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Allow body to be a pipeline
comment|// @see http://docs.mongodb.org/manual/core/aggregation/
name|List
argument_list|<
name|Bson
argument_list|>
name|queryList
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|BasicDBList
condition|)
block|{
name|queryList
operator|=
operator|(
operator|(
name|BasicDBList
operator|)
name|query
operator|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|o
lambda|->
operator|(
name|Bson
operator|)
name|o
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queryList
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Bson
operator|)
name|query
argument_list|)
expr_stmt|;
block|}
comment|// the number to skip must be in body query
name|AggregateIterable
argument_list|<
name|BasicDBObject
argument_list|>
name|aggregationResult
init|=
name|dbCol
operator|.
name|aggregate
argument_list|(
name|queryList
argument_list|)
decl_stmt|;
comment|// get the batch size
name|Integer
name|batchSize
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|BATCH_SIZE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|batchSize
operator|!=
literal|null
condition|)
block|{
name|aggregationResult
operator|.
name|batchSize
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|allowDiskUse
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|ALLOW_DISK_USE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|aggregationResult
operator|.
name|allowDiskUse
argument_list|(
name|allowDiskUse
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|BasicDBObject
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|MongoDbOutputType
operator|.
name|DBCursor
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getOutputType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|aggregationResult
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
operator|(
operator|(
name|List
argument_list|<
name|BasicDBObject
argument_list|>
operator|)
name|result
operator|)
operator|::
name|add
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_PAGE_SIZE
argument_list|,
operator|(
operator|(
name|List
argument_list|<
name|BasicDBObject
argument_list|>
operator|)
name|result
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|aggregationResult
operator|.
name|iterator
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|aggregationResult
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Invalid payload for aggregate"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createDoCommand ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoCommand
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
try|try
block|{
name|MongoDatabase
name|db
init|=
name|calculateDb
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|BasicDBObject
name|cmdObj
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|db
operator|.
name|runCommand
argument_list|(
name|cmdObj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Invalid payload for command"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createDoGetDbStats ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoGetDbStats
parameter_list|()
block|{
return|return
name|exchange1
lambda|->
name|calculateDb
argument_list|(
name|exchange1
argument_list|)
operator|.
name|runCommand
argument_list|(
name|createDbStatsCommand
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createDoFindById ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoFindById
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
try|try
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Object
name|id
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
decl_stmt|;
name|BasicDBObject
name|o
init|=
operator|new
name|BasicDBObject
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|DBObject
name|ret
decl_stmt|;
name|BasicDBObject
name|fieldFilter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|FIELDS_FILTER
argument_list|,
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|fieldFilter
operator|=
operator|new
name|BasicDBObject
argument_list|()
expr_stmt|;
block|}
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|(
name|o
argument_list|)
operator|.
name|projection
argument_list|(
name|fieldFilter
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_TOTAL_SIZE
argument_list|,
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Invalid payload for findById"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createDoSave ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoSave
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
try|try
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|BasicDBObject
name|saveObj
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|BasicDBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|UpdateOptions
name|options
init|=
operator|new
name|UpdateOptions
argument_list|()
operator|.
name|upsert
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|BasicDBObject
name|queryObject
init|=
operator|new
name|BasicDBObject
argument_list|(
literal|"_id"
argument_list|,
name|saveObj
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
decl_stmt|;
name|UpdateResult
name|result
init|=
name|dbCol
operator|.
name|replaceOne
argument_list|(
name|queryObject
argument_list|,
name|saveObj
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|OID
argument_list|,
name|saveObj
operator|.
name|get
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Body incorrect type for save"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
DECL|method|createDoBulkWrite ()
specifier|private
name|Function
argument_list|<
name|Exchange
argument_list|,
name|Object
argument_list|>
name|createDoBulkWrite
parameter_list|()
block|{
return|return
name|exchange
lambda|->
block|{
try|try
block|{
name|MongoCollection
argument_list|<
name|BasicDBObject
argument_list|>
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Boolean
name|ordered
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|BULK_ORDERED
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|BulkWriteOptions
name|options
init|=
operator|new
name|BulkWriteOptions
argument_list|()
operator|.
name|ordered
argument_list|(
name|ordered
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|WriteModel
argument_list|<
name|BasicDBObject
argument_list|>
argument_list|>
name|requests
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
call|(
name|Class
argument_list|<
name|List
argument_list|<
name|WriteModel
argument_list|<
name|BasicDBObject
argument_list|>
argument_list|>
argument_list|>
call|)
argument_list|(
name|Class
argument_list|<
name|?
argument_list|>
argument_list|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|BulkWriteResult
name|result
init|=
name|dbCol
operator|.
name|bulkWrite
argument_list|(
name|requests
argument_list|,
name|options
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Invalid payload for bulk write"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

