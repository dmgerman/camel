begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|AggregationOutput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|CommandResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The MongoDb producer.  */
end_comment

begin_class
DECL|class|MongoDbProducer
specifier|public
class|class
name|MongoDbProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDbProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|MongoDbEndpoint
name|endpoint
decl_stmt|;
DECL|method|MongoDbProducer (MongoDbEndpoint endpoint)
specifier|public
name|MongoDbProducer
parameter_list|(
name|MongoDbEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|MongoDbOperation
name|operation
init|=
name|endpoint
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|Object
name|header
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|OPERATION_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding default operation with operation specified on header: {}"
argument_list|,
name|header
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|header
operator|instanceof
name|MongoDbOperation
condition|)
block|{
name|operation
operator|=
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|MongoDbOperation
operator|.
name|class
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// evaluate as a String
name|operation
operator|=
name|MongoDbOperation
operator|.
name|valueOf
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|OPERATION_HEADER
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Operation specified on header is not supported. Value: "
operator|+
name|header
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|invokeOperation
argument_list|(
name|operation
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|MongoDbComponent
operator|.
name|wrapInCamelMongoDbException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Entry method that selects the appropriate MongoDB operation and executes it      * @param operation      * @param exchange      * @throws Exception      */
DECL|method|invokeOperation (MongoDbOperation operation, Exchange exchange)
specifier|protected
name|void
name|invokeOperation
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|count
case|:
name|doCount
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|findOneByQuery
case|:
name|doFindOneByQuery
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|findById
case|:
name|doFindById
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|findAll
case|:
name|doFindAll
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|insert
case|:
name|doInsert
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|save
case|:
name|doSave
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|update
case|:
name|doUpdate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|remove
case|:
name|doRemove
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|aggregate
case|:
name|doAggregate
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|getDbStats
case|:
name|doGetStats
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|getDbStats
argument_list|)
expr_stmt|;
break|break;
case|case
name|getColStats
case|:
name|doGetStats
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|getColStats
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Operation not supported. Value: "
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
comment|// ----------- MongoDB operations ----------------
DECL|method|doGetStats (Exchange exchange, MongoDbOperation operation)
specifier|protected
name|void
name|doGetStats
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MongoDbOperation
name|operation
parameter_list|)
throws|throws
name|Exception
block|{
name|DBObject
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operation
operator|==
name|MongoDbOperation
operator|.
name|getColStats
condition|)
block|{
name|result
operator|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|==
name|MongoDbOperation
operator|.
name|getDbStats
condition|)
block|{
comment|// if it's a DB, also take into account the dynamicity option and the DB that is used
name|result
operator|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
operator|.
name|getDB
argument_list|()
operator|.
name|getStats
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"Internal error: wrong operation for getStats variant"
operator|+
name|operation
argument_list|)
throw|;
block|}
name|Message
name|responseMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|operation
argument_list|)
decl_stmt|;
name|responseMessage
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doRemove (Exchange exchange)
specifier|protected
name|void
name|doRemove
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|DBObject
name|removeObj
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|WriteConcern
name|wc
init|=
name|extractWriteConcern
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|WriteResult
name|result
init|=
name|wc
operator|==
literal|null
condition|?
name|dbCol
operator|.
name|remove
argument_list|(
name|removeObj
argument_list|)
else|:
name|dbCol
operator|.
name|remove
argument_list|(
name|removeObj
argument_list|,
name|wc
argument_list|)
decl_stmt|;
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|remove
argument_list|)
decl_stmt|;
comment|// we always return the WriteResult, because whether the getLastError was called or not,
comment|// the user will have the means to call it or obtain the cached CommandResult
name|processAndTransferWriteResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|resultMessage
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RECORDS_AFFECTED
argument_list|,
name|result
operator|.
name|getN
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|doUpdate (Exchange exchange)
specifier|protected
name|void
name|doUpdate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DBObject
argument_list|>
name|saveObj
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
call|(
name|Class
argument_list|<
name|List
argument_list|<
name|DBObject
argument_list|>
argument_list|>
call|)
argument_list|(
name|Class
argument_list|<
name|?
argument_list|>
argument_list|)
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|saveObj
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"MongoDB operation = insert, failed because body is not a List of DBObject objects with size = 2"
argument_list|)
throw|;
block|}
name|DBObject
name|updateCriteria
init|=
name|saveObj
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DBObject
name|objNew
init|=
name|saveObj
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Boolean
name|multi
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|MULTIUPDATE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Boolean
name|upsert
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|UPSERT
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|WriteResult
name|result
decl_stmt|;
name|WriteConcern
name|wc
init|=
name|extractWriteConcern
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// In API 2.7, the default upsert and multi values of update(DBObject, DBObject) are false, false, so we unconditionally invoke the
comment|// full-signature method update(DBObject, DBObject, boolean, boolean). However, the default behaviour may change in the future,
comment|// so it's safer to be explicit at this level for full determinism
if|if
condition|(
name|multi
operator|==
literal|null
operator|&&
name|upsert
operator|==
literal|null
condition|)
block|{
comment|// for update with no multi nor upsert but with specific WriteConcern there is no update signature without multi and upsert args,
comment|// so assume defaults
name|result
operator|=
name|wc
operator|==
literal|null
condition|?
name|dbCol
operator|.
name|update
argument_list|(
name|updateCriteria
argument_list|,
name|objNew
argument_list|)
else|:
name|dbCol
operator|.
name|update
argument_list|(
name|updateCriteria
argument_list|,
name|objNew
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|wc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we calculate the final boolean values so that if any of these parameters is null, it is resolved to false
name|result
operator|=
name|wc
operator|==
literal|null
condition|?
name|dbCol
operator|.
name|update
argument_list|(
name|updateCriteria
argument_list|,
name|objNew
argument_list|,
name|calculateBooleanValue
argument_list|(
name|upsert
argument_list|)
argument_list|,
name|calculateBooleanValue
argument_list|(
name|multi
argument_list|)
argument_list|)
else|:
name|dbCol
operator|.
name|update
argument_list|(
name|updateCriteria
argument_list|,
name|objNew
argument_list|,
name|calculateBooleanValue
argument_list|(
name|upsert
argument_list|)
argument_list|,
name|calculateBooleanValue
argument_list|(
name|multi
argument_list|)
argument_list|,
name|wc
argument_list|)
expr_stmt|;
block|}
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|update
argument_list|)
decl_stmt|;
comment|// we always return the WriteResult, because whether the getLastError was called or not, the user will have the means to call it or
comment|// obtain the cached CommandResult
name|processAndTransferWriteResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|resultMessage
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RECORDS_AFFECTED
argument_list|,
name|result
operator|.
name|getN
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doSave (Exchange exchange)
specifier|protected
name|void
name|doSave
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|DBObject
name|saveObj
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|WriteConcern
name|wc
init|=
name|extractWriteConcern
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|WriteResult
name|result
init|=
name|wc
operator|==
literal|null
condition|?
name|dbCol
operator|.
name|save
argument_list|(
name|saveObj
argument_list|)
else|:
name|dbCol
operator|.
name|save
argument_list|(
name|saveObj
argument_list|,
name|wc
argument_list|)
decl_stmt|;
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|save
argument_list|)
expr_stmt|;
comment|// we always return the WriteResult, because whether the getLastError was called or not, the user will have the means to call it or
comment|// obtain the cached CommandResult
name|processAndTransferWriteResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|doFindById (Exchange exchange)
specifier|protected
name|void
name|doFindById
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
decl_stmt|;
name|DBObject
name|ret
decl_stmt|;
name|DBObject
name|fieldFilter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|FIELDS_FILTER
argument_list|,
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|findOne
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|dbCol
operator|.
name|findOne
argument_list|(
name|o
argument_list|,
name|fieldFilter
argument_list|)
expr_stmt|;
block|}
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|save
argument_list|)
decl_stmt|;
name|resultMessage
operator|.
name|setBody
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resultMessage
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_TOTAL_SIZE
argument_list|,
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|doInsert (Exchange exchange)
specifier|protected
name|void
name|doInsert
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|boolean
name|singleInsert
init|=
literal|true
decl_stmt|;
name|Object
name|insert
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// body could not be converted to DBObject, check to see if it's of type List<DBObject>
if|if
condition|(
name|insert
operator|==
literal|null
condition|)
block|{
name|insert
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// if the body of type List was obtained, ensure that all items are of type DBObject and cast the List to List<DBObject>
if|if
condition|(
name|insert
operator|!=
literal|null
condition|)
block|{
name|singleInsert
operator|=
literal|false
expr_stmt|;
name|insert
operator|=
name|attemptConvertToList
argument_list|(
operator|(
name|List
operator|)
name|insert
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"MongoDB operation = insert, Body is not conversible to type DBObject nor List<DBObject>"
argument_list|)
throw|;
block|}
block|}
name|WriteResult
name|result
decl_stmt|;
name|WriteConcern
name|wc
init|=
name|extractWriteConcern
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleInsert
condition|)
block|{
name|result
operator|=
name|wc
operator|==
literal|null
condition|?
name|dbCol
operator|.
name|insert
argument_list|(
operator|(
name|DBObject
operator|)
name|insert
argument_list|)
else|:
name|dbCol
operator|.
name|insert
argument_list|(
operator|(
name|DBObject
operator|)
name|insert
argument_list|,
name|wc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|wc
operator|==
literal|null
condition|?
name|dbCol
operator|.
name|insert
argument_list|(
operator|(
name|List
argument_list|<
name|DBObject
argument_list|>
operator|)
name|insert
argument_list|)
else|:
name|dbCol
operator|.
name|insert
argument_list|(
operator|(
name|List
argument_list|<
name|DBObject
argument_list|>
operator|)
name|insert
argument_list|,
name|wc
argument_list|)
expr_stmt|;
block|}
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|insert
argument_list|)
decl_stmt|;
comment|// we always return the WriteResult, because whether the getLastError was called or not, the user will have the means to call it or
comment|// obtain the cached CommandResult
name|processAndTransferWriteResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|resultMessage
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|doFindAll (Exchange exchange)
specifier|protected
name|void
name|doFindAll
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|// do not use getMandatoryBody, because if the body is empty we want to retrieve all objects in the collection
name|DBObject
name|query
init|=
literal|null
decl_stmt|;
comment|// do not run around looking for a type converter unless there is a need for it
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|query
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|DBObject
name|fieldFilter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|FIELDS_FILTER
argument_list|,
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// get the batch size and number to skip
name|Integer
name|batchSize
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|BATCH_SIZE
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|numToSkip
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|NUM_TO_SKIP
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|limit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|LIMIT
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBObject
name|sortBy
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|SORT_BY
argument_list|,
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBCursor
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|&&
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|(
operator|new
name|BasicDBObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|dbCol
operator|.
name|find
argument_list|(
name|query
argument_list|,
name|fieldFilter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortBy
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|sort
argument_list|(
name|sortBy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|batchSize
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|batchSize
argument_list|(
name|batchSize
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numToSkip
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|skip
argument_list|(
name|numToSkip
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|limit
argument_list|(
name|limit
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|findAll
argument_list|)
decl_stmt|;
name|resultMessage
operator|.
name|setBody
argument_list|(
name|ret
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|resultMessage
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_TOTAL_SIZE
argument_list|,
name|ret
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|resultMessage
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_PAGE_SIZE
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// rethrow the exception
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
comment|// make sure the cursor is closed
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doFindOneByQuery (Exchange exchange)
specifier|protected
name|void
name|doFindOneByQuery
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|DBObject
name|o
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|DBObject
name|ret
decl_stmt|;
name|DBObject
name|fieldFilter
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|FIELDS_FILTER
argument_list|,
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldFilter
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|dbCol
operator|.
name|findOne
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|dbCol
operator|.
name|findOne
argument_list|(
name|o
argument_list|,
name|fieldFilter
argument_list|)
expr_stmt|;
block|}
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|findOneByQuery
argument_list|)
decl_stmt|;
name|resultMessage
operator|.
name|setBody
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resultMessage
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|RESULT_TOTAL_SIZE
argument_list|,
name|ret
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|doCount (Exchange exchange)
specifier|protected
name|void
name|doCount
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Long
name|answer
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|dbCol
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|count
argument_list|)
decl_stmt|;
name|resultMessage
operator|.
name|setBody
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
comment|/**     * All headers except collection and database are non available for this     * operation.     *      * @param exchange     * @throws Exception     */
DECL|method|doAggregate (Exchange exchange)
specifier|protected
name|void
name|doAggregate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|DBCollection
name|dbCol
init|=
name|calculateCollection
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|DBObject
name|query
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|DBObject
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Impossible with java driver to get the batch size and number to skip
name|Iterable
argument_list|<
name|DBObject
argument_list|>
name|dbIterator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|AggregationOutput
name|aggregationResult
init|=
literal|null
decl_stmt|;
comment|// Allow body to be a pipeline
comment|// @see http://docs.mongodb.org/manual/core/aggregation/
if|if
condition|(
name|query
operator|instanceof
name|BasicDBList
condition|)
block|{
name|BasicDBList
name|queryList
init|=
operator|(
name|BasicDBList
operator|)
name|query
decl_stmt|;
name|aggregationResult
operator|=
name|dbCol
operator|.
name|aggregate
argument_list|(
operator|(
name|DBObject
operator|)
name|queryList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queryList
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|queryList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|BasicDBObject
index|[
name|queryList
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregationResult
operator|=
name|dbCol
operator|.
name|aggregate
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
name|dbIterator
operator|=
name|aggregationResult
operator|.
name|results
argument_list|()
expr_stmt|;
name|Message
name|resultMessage
init|=
name|prepareResponseMessage
argument_list|(
name|exchange
argument_list|,
name|MongoDbOperation
operator|.
name|aggregate
argument_list|)
decl_stmt|;
name|resultMessage
operator|.
name|setBody
argument_list|(
name|dbIterator
argument_list|)
expr_stmt|;
comment|// Mongo Driver does not allow to read size and to paginate aggregate result
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// rethrow the exception
throw|throw
name|e
throw|;
block|}
block|}
comment|// --------- Convenience methods -----------------------
DECL|method|calculateCollection (Exchange exchange)
specifier|private
name|DBCollection
name|calculateCollection
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// dynamic calculation is an option. In most cases it won't be used and we should not penalise all users with running this
comment|// resolution logic on every Exchange if they won't be using this functionality at all
if|if
condition|(
operator|!
name|endpoint
operator|.
name|isDynamicity
argument_list|()
condition|)
block|{
return|return
name|endpoint
operator|.
name|getDbCollection
argument_list|()
return|;
block|}
name|String
name|dynamicDB
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|DATABASE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|dynamicCollection
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|COLLECTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|dynamicDB
operator|==
literal|null
operator|&&
name|dynamicCollection
operator|==
literal|null
condition|)
block|{
return|return
name|endpoint
operator|.
name|getDbCollection
argument_list|()
return|;
block|}
name|DB
name|db
init|=
name|endpoint
operator|.
name|getDb
argument_list|()
decl_stmt|;
name|DBCollection
name|dbCol
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dynamicDB
operator|!=
literal|null
condition|)
block|{
name|db
operator|=
name|endpoint
operator|.
name|getMongoConnection
argument_list|()
operator|.
name|getDB
argument_list|(
name|dynamicDB
argument_list|)
expr_stmt|;
block|}
name|dbCol
operator|=
name|dynamicCollection
operator|==
literal|null
condition|?
name|db
operator|.
name|getCollection
argument_list|(
name|endpoint
operator|.
name|getCollection
argument_list|()
argument_list|)
else|:
name|db
operator|.
name|getCollection
argument_list|(
name|dynamicCollection
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dynamic database and/or collection selected: {}->{}"
argument_list|,
name|dbCol
operator|.
name|getDB
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|dbCol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dbCol
return|;
block|}
DECL|method|calculateBooleanValue (Boolean b)
specifier|private
name|boolean
name|calculateBooleanValue
parameter_list|(
name|Boolean
name|b
parameter_list|)
block|{
return|return
name|b
operator|==
literal|null
condition|?
literal|false
else|:
name|b
operator|.
name|booleanValue
argument_list|()
return|;
block|}
DECL|method|processAndTransferWriteResult (WriteResult result, Exchange exchange)
specifier|private
name|void
name|processAndTransferWriteResult
parameter_list|(
name|WriteResult
name|result
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// if invokeGetLastError is set, or a WriteConcern is set which implicitly calls getLastError, then we have the chance to populate
comment|// the MONGODB_LAST_ERROR header, as well as setting an exception on the Exchange if one occurred at the MongoDB server
if|if
condition|(
name|endpoint
operator|.
name|isInvokeGetLastError
argument_list|()
operator|||
operator|(
name|endpoint
operator|.
name|getWriteConcern
argument_list|()
operator|!=
literal|null
condition|?
name|endpoint
operator|.
name|getWriteConcern
argument_list|()
operator|.
name|callGetLastError
argument_list|()
else|:
literal|false
operator|)
condition|)
block|{
name|CommandResult
name|cr
init|=
name|result
operator|.
name|getCachedLastError
argument_list|()
operator|==
literal|null
condition|?
name|result
operator|.
name|getLastError
argument_list|()
else|:
name|result
operator|.
name|getCachedLastError
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|LAST_ERROR
argument_list|,
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cr
operator|.
name|ok
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|MongoDbComponent
operator|.
name|wrapInCamelMongoDbException
argument_list|(
name|cr
operator|.
name|getException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// determine where to set the WriteResult: as the OUT body or as an IN message header
if|if
condition|(
name|endpoint
operator|.
name|isWriteResultAsHeader
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|MongoDbConstants
operator|.
name|WRITERESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extractWriteConcern (Exchange exchange)
specifier|private
name|WriteConcern
name|extractWriteConcern
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|CamelMongoDbException
block|{
name|Object
name|o
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|MongoDbConstants
operator|.
name|WRITECONCERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|WriteConcern
condition|)
block|{
return|return
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|WriteConcern
operator|.
name|class
argument_list|,
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|WriteConcern
name|answer
init|=
name|WriteConcern
operator|.
name|valueOf
argument_list|(
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|o
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"WriteConcern specified in the "
operator|+
name|MongoDbConstants
operator|.
name|WRITECONCERN
operator|+
literal|" header, with value "
operator|+
name|o
operator|+
literal|" could not be resolved to a WriteConcern type"
argument_list|)
throw|;
block|}
block|}
comment|// should never get here
name|LOG
operator|.
name|warn
argument_list|(
literal|"A problem occurred while resolving the Exchange's Write Concern"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|attemptConvertToList (List insertList, Exchange exchange)
specifier|private
name|List
argument_list|<
name|DBObject
argument_list|>
name|attemptConvertToList
parameter_list|(
name|List
name|insertList
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|CamelMongoDbException
block|{
name|List
argument_list|<
name|DBObject
argument_list|>
name|dbObjectList
init|=
operator|new
name|ArrayList
argument_list|<
name|DBObject
argument_list|>
argument_list|(
name|insertList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|TypeConverter
name|converter
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|item
range|:
name|insertList
control|)
block|{
try|try
block|{
name|DBObject
name|dbObject
init|=
name|converter
operator|.
name|mandatoryConvertTo
argument_list|(
name|DBObject
operator|.
name|class
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|dbObjectList
operator|.
name|add
argument_list|(
name|dbObject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelMongoDbException
argument_list|(
literal|"MongoDB operation = insert, Assuming List variant of MongoDB insert operation, but List contains non-DBObject items"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|dbObjectList
return|;
block|}
DECL|method|prepareResponseMessage (Exchange exchange, MongoDbOperation operation)
specifier|private
name|Message
name|prepareResponseMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MongoDbOperation
name|operation
parameter_list|)
block|{
name|Message
name|answer
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|MessageHelper
operator|.
name|copyHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|answer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWriteOperation
argument_list|(
name|operation
argument_list|)
operator|&&
name|endpoint
operator|.
name|isWriteResultAsHeader
argument_list|()
condition|)
block|{
name|answer
operator|.
name|setBody
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|isWriteOperation (MongoDbOperation operation)
specifier|private
name|boolean
name|isWriteOperation
parameter_list|(
name|MongoDbOperation
name|operation
parameter_list|)
block|{
return|return
name|MongoDbComponent
operator|.
name|WRITE_OPERATIONS
operator|.
name|contains
argument_list|(
name|operation
argument_list|)
return|;
block|}
block|}
end_class

end_unit

