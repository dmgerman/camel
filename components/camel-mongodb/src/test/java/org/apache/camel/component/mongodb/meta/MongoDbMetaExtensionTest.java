begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb.meta
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|CreateCollectionOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|Filters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|ValidationOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|MetaDataExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|AbstractMongoDbTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|MongoDbComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|MongoDbMetaExtensionTest
specifier|public
class|class
name|MongoDbMetaExtensionTest
extends|extends
name|AbstractMongoDbTest
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MongoDbMetaExtensionTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We simulate the presence of an authenticated user
annotation|@
name|Before
DECL|method|createAuthorizationUser ()
specifier|public
name|void
name|createAuthorizationUser
parameter_list|()
block|{
name|super
operator|.
name|createAuthorizationUser
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getComponent ()
specifier|protected
name|MongoDbComponent
name|getComponent
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SCHEME
argument_list|,
name|MongoDbComponent
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testValidMetaData ()
specifier|public
name|void
name|testValidMetaData
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When
specifier|final
name|String
name|database
init|=
literal|"test"
decl_stmt|;
specifier|final
name|String
name|collection
init|=
literal|"validatedCollection"
decl_stmt|;
name|MongoDbComponent
name|component
init|=
name|this
operator|.
name|getComponent
argument_list|()
decl_stmt|;
comment|// Given
name|Document
name|jsonSchema
init|=
name|Document
operator|.
name|parse
argument_list|(
literal|"{ \n"
operator|+
literal|"      bsonType: \"object\", \n"
operator|+
literal|"      required: [ \"name\", \"surname\", \"email\" ], \n"
operator|+
literal|"      properties: { \n"
operator|+
literal|"         name: { \n"
operator|+
literal|"            bsonType: \"string\", \n"
operator|+
literal|"            description: \"required and must be a string\" }, \n"
operator|+
literal|"         surname: { \n"
operator|+
literal|"            bsonType: \"string\", \n"
operator|+
literal|"            description: \"required and must be a string\" }, \n"
operator|+
literal|"         email: { \n"
operator|+
literal|"            bsonType: \"string\", \n"
operator|+
literal|"            pattern: \"^.+@.+$\", \n"
operator|+
literal|"            description: \"required and must be a valid email address\" }, \n"
operator|+
literal|"         year_of_birth: { \n"
operator|+
literal|"            bsonType: \"int\", \n"
operator|+
literal|"            minimum: 1900, \n"
operator|+
literal|"            maximum: 2018,\n"
operator|+
literal|"            description: \"the value must be in the range 1900-2018\" }, \n"
operator|+
literal|"         gender: { \n"
operator|+
literal|"            enum: [ \"M\", \"F\" ], \n"
operator|+
literal|"            description: \"can be only M or F\" } \n"
operator|+
literal|"      }}"
argument_list|)
decl_stmt|;
name|ValidationOptions
name|collOptions
init|=
operator|new
name|ValidationOptions
argument_list|()
operator|.
name|validator
argument_list|(
name|Filters
operator|.
name|jsonSchema
argument_list|(
name|jsonSchema
argument_list|)
argument_list|)
decl_stmt|;
name|AbstractMongoDbTest
operator|.
name|mongo
operator|.
name|getDatabase
argument_list|(
name|database
argument_list|)
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
operator|new
name|CreateCollectionOptions
argument_list|()
operator|.
name|validationOptions
argument_list|(
name|collOptions
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|HOST
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|MetaDataExtension
operator|.
name|MetaData
name|result
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|MetaDataExtension
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|meta
argument_list|(
name|parameters
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|UnsupportedOperationException
operator|::
operator|new
argument_list|)
decl_stmt|;
comment|// Then
name|assertEquals
argument_list|(
literal|"application/schema+json"
argument_list|,
name|result
operator|.
name|getAttribute
argument_list|(
name|MetaDataExtension
operator|.
name|MetaData
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|,
name|result
operator|.
name|getAttribute
argument_list|(
name|MetaDataExtension
operator|.
name|MetaData
operator|.
name|JAVA_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getPayload
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getPayload
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getPayload
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|"$schema"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://json-schema.org/schema#"
argument_list|,
name|result
operator|.
name|getPayload
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|"$schema"
argument_list|)
operator|.
name|asText
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getPayload
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getPayload
argument_list|(
name|JsonNode
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testMissingCollection ()
specifier|public
name|void
name|testMissingCollection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When
specifier|final
name|String
name|database
init|=
literal|"test"
decl_stmt|;
specifier|final
name|String
name|collection
init|=
literal|"missingCollection"
decl_stmt|;
name|MongoDbComponent
name|component
init|=
name|this
operator|.
name|getComponent
argument_list|()
decl_stmt|;
comment|// Given
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|HOST
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
comment|// Then
name|MetaDataExtension
operator|.
name|MetaData
name|result
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|MetaDataExtension
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|meta
argument_list|(
name|parameters
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|IllegalArgumentException
operator|::
operator|new
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testMissingParameters ()
specifier|public
name|void
name|testMissingParameters
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When
name|MongoDbComponent
name|component
init|=
name|this
operator|.
name|getComponent
argument_list|()
decl_stmt|;
comment|// Given
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Then
name|MetaDataExtension
operator|.
name|MetaData
name|result
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|MetaDataExtension
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|meta
argument_list|(
name|parameters
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|IllegalArgumentException
operator|::
operator|new
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|testNotValidatedCollection ()
specifier|public
name|void
name|testNotValidatedCollection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// When
specifier|final
name|String
name|database
init|=
literal|"test"
decl_stmt|;
specifier|final
name|String
name|collection
init|=
literal|"notValidatedCollection"
decl_stmt|;
name|MongoDbComponent
name|component
init|=
name|this
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|AbstractMongoDbTest
operator|.
name|mongo
operator|.
name|getDatabase
argument_list|(
name|database
argument_list|)
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
comment|// Given
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|database
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|HOST
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
comment|// Then
name|MetaDataExtension
operator|.
name|MetaData
name|result
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|MetaDataExtension
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|meta
argument_list|(
name|parameters
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|UnsupportedOperationException
operator|::
operator|new
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

