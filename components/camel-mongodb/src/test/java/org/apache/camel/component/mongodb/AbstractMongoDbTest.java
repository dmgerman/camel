begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|Mongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoURI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|util
operator|.
name|JSON
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_class
DECL|class|AbstractMongoDbTest
specifier|public
specifier|abstract
class|class
name|AbstractMongoDbTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|mongo
specifier|protected
specifier|static
name|Mongo
name|mongo
decl_stmt|;
DECL|field|db
specifier|protected
specifier|static
name|DB
name|db
decl_stmt|;
DECL|field|testCollection
specifier|protected
specifier|static
name|DBCollection
name|testCollection
decl_stmt|;
DECL|field|dynamicCollection
specifier|protected
specifier|static
name|DBCollection
name|dynamicCollection
decl_stmt|;
DECL|field|dbName
specifier|protected
specifier|static
name|String
name|dbName
decl_stmt|;
DECL|field|testCollectionName
specifier|protected
specifier|static
name|String
name|testCollectionName
decl_stmt|;
DECL|field|dynamicCollectionName
specifier|protected
specifier|static
name|String
name|dynamicCollectionName
decl_stmt|;
DECL|field|properties
specifier|protected
specifier|static
name|Properties
name|properties
decl_stmt|;
DECL|field|applicationContext
specifier|protected
name|ApplicationContext
name|applicationContext
decl_stmt|;
DECL|method|AbstractMongoDbTest ()
specifier|public
name|AbstractMongoDbTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Checks whether Mongo is running using the connection URI defined in the mongodb.test.properties file      * @throws IOException       */
annotation|@
name|BeforeClass
DECL|method|checkMongoRunning ()
specifier|public
specifier|static
name|void
name|checkMongoRunning
parameter_list|()
throws|throws
name|IOException
block|{
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|MongoDbConversionsTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/mongodb.test.properties"
argument_list|)
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
comment|// ping Mongo and populate db and collection
try|try
block|{
name|mongo
operator|=
operator|new
name|Mongo
argument_list|(
operator|new
name|MongoURI
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mongodb.connectionURI"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mongo
operator|.
name|getDatabaseNames
argument_list|()
expr_stmt|;
name|dbName
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mongodb.testDb"
argument_list|)
expr_stmt|;
name|db
operator|=
name|mongo
operator|.
name|getDB
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assume
operator|.
name|assumeNoException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|initTestCase ()
specifier|public
name|void
name|initTestCase
parameter_list|()
block|{
comment|// Refresh the test collection - drop it and recreate it. We don't do this for the database because MongoDB would create large
comment|// store files each time
name|testCollectionName
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"mongodb.testCollection"
argument_list|)
expr_stmt|;
name|testCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|drop
argument_list|()
expr_stmt|;
name|testCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|testCollectionName
argument_list|)
expr_stmt|;
name|dynamicCollectionName
operator|=
name|testCollectionName
operator|.
name|concat
argument_list|(
literal|"Dynamic"
argument_list|)
expr_stmt|;
name|dynamicCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|dynamicCollectionName
argument_list|)
expr_stmt|;
name|dynamicCollection
operator|.
name|drop
argument_list|()
expr_stmt|;
name|dynamicCollection
operator|=
name|db
operator|.
name|getCollection
argument_list|(
name|dynamicCollectionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|testCollection
operator|.
name|drop
argument_list|()
expr_stmt|;
name|dynamicCollection
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
DECL|method|pumpDataIntoTestCollection ()
specifier|protected
name|void
name|pumpDataIntoTestCollection
parameter_list|()
block|{
comment|// there should be 100 of each
name|String
index|[]
name|scientists
init|=
block|{
literal|"Einstein"
block|,
literal|"Darwin"
block|,
literal|"Copernicus"
block|,
literal|"Pasteur"
block|,
literal|"Curie"
block|,
literal|"Faraday"
block|,
literal|"Newton"
block|,
literal|"Bohr"
block|,
literal|"Galilei"
block|,
literal|"Maxwell"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|i
operator|%
name|scientists
operator|.
name|length
decl_stmt|;
name|Formatter
name|f
init|=
operator|new
name|Formatter
argument_list|()
decl_stmt|;
name|String
name|doc
init|=
name|f
operator|.
name|format
argument_list|(
literal|"{\"_id\":\"%d\", \"scientist\":\"%s\", \"fixedField\": \"fixedValue\"}"
argument_list|,
name|i
argument_list|,
name|scientists
index|[
name|index
index|]
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|testCollection
operator|.
name|insert
argument_list|(
operator|(
name|DBObject
operator|)
name|JSON
operator|.
name|parse
argument_list|(
name|doc
argument_list|)
argument_list|,
name|WriteConcern
operator|.
name|SAFE
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Data pumping of 1000 entries did not complete entirely"
argument_list|,
literal|1000L
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|extractAndAssertCamelMongoDbException (Object result, String message)
specifier|protected
name|CamelMongoDbException
name|extractAndAssertCamelMongoDbException
parameter_list|(
name|Object
name|result
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Result is not an Exception"
argument_list|,
name|result
operator|instanceof
name|Throwable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Result is not an CamelExecutionException"
argument_list|,
name|result
operator|instanceof
name|CamelExecutionException
argument_list|)
expr_stmt|;
name|Throwable
name|exc
init|=
operator|(
operator|(
name|CamelExecutionException
operator|)
name|result
operator|)
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Result is not an CamelMongoDbException"
argument_list|,
name|exc
operator|instanceof
name|CamelMongoDbException
argument_list|)
expr_stmt|;
name|CamelMongoDbException
name|camelExc
init|=
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|CamelMongoDbException
operator|.
name|class
argument_list|,
name|exc
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"CamelMongoDbException doesn't contain desired message string"
argument_list|,
name|camelExc
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|camelExc
return|;
block|}
block|}
end_class

end_unit

