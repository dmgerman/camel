begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb.verifier
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|verifier
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|AbstractMongoDbTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|MongoDbComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|BeforeEach
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|MongoDbVerifierExtensionTest
specifier|public
class|class
name|MongoDbVerifierExtensionTest
extends|extends
name|AbstractMongoDbTest
block|{
comment|// We simulate the presence of an authenticated user
annotation|@
name|BeforeEach
DECL|method|createAuthorizationUser ()
specifier|public
name|void
name|createAuthorizationUser
parameter_list|()
block|{
name|super
operator|.
name|createAuthorizationUser
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|getComponent ()
specifier|protected
name|MongoDbComponent
name|getComponent
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SCHEME
argument_list|,
name|MongoDbComponent
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getExtension ()
specifier|protected
name|ComponentVerifierExtension
name|getExtension
parameter_list|()
block|{
name|Component
name|component
init|=
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
name|SCHEME
argument_list|)
decl_stmt|;
name|ComponentVerifierExtension
name|verifier
init|=
name|component
operator|.
name|getExtension
argument_list|(
name|ComponentVerifierExtension
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|IllegalStateException
operator|::
operator|new
argument_list|)
decl_stmt|;
return|return
name|verifier
return|;
block|}
annotation|@
name|Test
DECL|method|verifyConnectionOK ()
specifier|public
name|void
name|verifyConnectionOK
parameter_list|()
block|{
comment|//When
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|HOST
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
comment|//Given
name|ComponentVerifierExtension
operator|.
name|Result
name|result
init|=
name|getExtension
argument_list|()
operator|.
name|verify
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Scope
operator|.
name|CONNECTIVITY
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|//Then
name|assertEquals
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyConnectionKO ()
specifier|public
name|void
name|verifyConnectionKO
parameter_list|()
block|{
comment|//When
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
literal|"notReachable.host"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
comment|//Given
name|ComponentVerifierExtension
operator|.
name|Result
name|result
init|=
name|getExtension
argument_list|()
operator|.
name|verify
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Scope
operator|.
name|CONNECTIVITY
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|//Then
name|assertEquals
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|ERROR
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unable to connect"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyConnectionMissingParams ()
specifier|public
name|void
name|verifyConnectionMissingParams
parameter_list|()
block|{
comment|//When
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|HOST
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
comment|//Given
name|ComponentVerifierExtension
operator|.
name|Result
name|result
init|=
name|getExtension
argument_list|()
operator|.
name|verify
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Scope
operator|.
name|PARAMETERS
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|//Then
name|assertEquals
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|ERROR
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"password should be set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyConnectionNotAuthenticated ()
specifier|public
name|void
name|verifyConnectionNotAuthenticated
parameter_list|()
block|{
comment|//When
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|HOST
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
literal|"wrongPassword"
argument_list|)
expr_stmt|;
comment|//Given
name|ComponentVerifierExtension
operator|.
name|Result
name|result
init|=
name|getExtension
argument_list|()
operator|.
name|verify
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Scope
operator|.
name|CONNECTIVITY
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|//Then
name|assertEquals
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|ERROR
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unable to authenticate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyConnectionAdminDBKO ()
specifier|public
name|void
name|verifyConnectionAdminDBKO
parameter_list|()
block|{
comment|//When
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
name|HOST
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"adminDB"
argument_list|,
literal|"someAdminDB"
argument_list|)
expr_stmt|;
comment|//Given
name|ComponentVerifierExtension
operator|.
name|Result
name|result
init|=
name|getExtension
argument_list|()
operator|.
name|verify
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Scope
operator|.
name|CONNECTIVITY
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|//Then
name|assertEquals
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|ERROR
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unable to authenticate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|verifyConnectionPortKO ()
specifier|public
name|void
name|verifyConnectionPortKO
parameter_list|()
block|{
comment|//When
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"host"
argument_list|,
literal|"localhost:12343"
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
name|USER
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
literal|"password"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
comment|//Given
name|ComponentVerifierExtension
operator|.
name|Result
name|result
init|=
name|getExtension
argument_list|()
operator|.
name|verify
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Scope
operator|.
name|CONNECTIVITY
argument_list|,
name|parameters
argument_list|)
decl_stmt|;
comment|//Then
name|assertEquals
argument_list|(
name|ComponentVerifierExtension
operator|.
name|Result
operator|.
name|Status
operator|.
name|ERROR
argument_list|,
name|result
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDescription
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unable to connect"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

