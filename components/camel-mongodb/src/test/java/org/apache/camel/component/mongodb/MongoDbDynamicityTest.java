begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bson
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|model
operator|.
name|Filters
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
operator|.
name|MongoDbConstants
operator|.
name|MONGO_ID
import|;
end_import

begin_class
DECL|class|MongoDbDynamicityTest
specifier|public
class|class
name|MongoDbDynamicityTest
extends|extends
name|AbstractMongoDbTest
block|{
annotation|@
name|Test
DECL|method|testInsertDynamicityDisabled ()
specifier|public
name|void
name|testInsertDynamicityDisabled
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"otherDB"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|db
operator|.
name|getCollection
argument_list|(
literal|"otherCollection"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The otherDB database should not exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"{\"_id\": \"testInsertDynamicityDisabled\", \"a\" : \"1\"}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|DATABASE
argument_list|,
literal|"otherDB"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|COLLECTION
argument_list|,
literal|"otherCollection"
argument_list|)
expr_stmt|;
comment|// Object result =
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:noDynamicity"
argument_list|,
name|body
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Document
name|b
init|=
name|testCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityDisabled"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No record with 'testInsertDynamicityDisabled' _id"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|body
operator|=
literal|"{\"_id\": \"testInsertDynamicityDisabledExplicitly\", \"a\" : \"1\"}"
expr_stmt|;
comment|// result =
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:noDynamicityExplicit"
argument_list|,
name|body
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|b
operator|=
name|testCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityDisabledExplicitly"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No record with 'testInsertDynamicityDisabledExplicitly' _id"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The otherDB database should not exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertDynamicityEnabledDBOnly ()
specifier|public
name|void
name|testInsertDynamicityEnabledDBOnly
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"otherDB"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|db
operator|.
name|getCollection
argument_list|(
literal|"otherCollection"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The otherDB database should not exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"{\"_id\": \"testInsertDynamicityEnabledDBOnly\", \"a\" : \"1\"}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|DATABASE
argument_list|,
literal|"otherDB"
argument_list|)
expr_stmt|;
comment|// Object result =
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:dynamicityEnabled"
argument_list|,
name|body
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|localDynamicCollection
init|=
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"otherDB"
argument_list|)
operator|.
name|getCollection
argument_list|(
name|testCollection
operator|.
name|getNamespace
argument_list|()
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|Document
name|b
init|=
name|localDynamicCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityEnabledDBOnly"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No record with 'testInsertDynamicityEnabledDBOnly' _id"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|testCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityEnabledDBOnly"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"There is a record with 'testInsertDynamicityEnabledDBOnly' _id in the test collection"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The otherDB database should exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertDynamicityEnabledCollectionOnly ()
specifier|public
name|void
name|testInsertDynamicityEnabledCollectionOnly
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"otherDB"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|db
operator|.
name|getCollection
argument_list|(
literal|"otherCollection"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The otherDB database should not exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"{\"_id\": \"testInsertDynamicityEnabledCollectionOnly\", \"a\" : \"1\"}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|COLLECTION
argument_list|,
literal|"otherCollection"
argument_list|)
expr_stmt|;
comment|// Object result =
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:dynamicityEnabled"
argument_list|,
name|body
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|loaclDynamicCollection
init|=
name|db
operator|.
name|getCollection
argument_list|(
literal|"otherCollection"
argument_list|,
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|Document
name|b
init|=
name|loaclDynamicCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityEnabledCollectionOnly"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No record with 'testInsertDynamicityEnabledCollectionOnly' _id"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|testCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityEnabledDBOnly"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"There is a record with 'testInsertDynamicityEnabledCollectionOnly' _id in the test collection"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The otherDB database should not exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInsertDynamicityEnabledDBAndCollection ()
specifier|public
name|void
name|testInsertDynamicityEnabledDBAndCollection
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testCollection
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"otherDB"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|db
operator|.
name|getCollection
argument_list|(
literal|"otherCollection"
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The otherDB database should not exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"{\"_id\": \"testInsertDynamicityEnabledDBAndCollection\", \"a\" : \"1\"}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|DATABASE
argument_list|,
literal|"otherDB"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|MongoDbConstants
operator|.
name|COLLECTION
argument_list|,
literal|"otherCollection"
argument_list|)
expr_stmt|;
comment|// Object result =
name|template
operator|.
name|requestBodyAndHeaders
argument_list|(
literal|"direct:dynamicityEnabled"
argument_list|,
name|body
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MongoCollection
argument_list|<
name|Document
argument_list|>
name|loaclDynamicCollection
init|=
name|mongo
operator|.
name|getDatabase
argument_list|(
literal|"otherDB"
argument_list|)
operator|.
name|getCollection
argument_list|(
literal|"otherCollection"
argument_list|,
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|Document
name|b
init|=
name|loaclDynamicCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityEnabledDBAndCollection"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No record with 'testInsertDynamicityEnabledDBAndCollection' _id"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|testCollection
operator|.
name|find
argument_list|(
name|eq
argument_list|(
name|MONGO_ID
argument_list|,
literal|"testInsertDynamicityEnabledDBOnly"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"There is a record with 'testInsertDynamicityEnabledDBAndCollection' _id in the test collection"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The otherDB database should exist"
argument_list|,
name|StreamSupport
operator|.
name|stream
argument_list|(
name|mongo
operator|.
name|listDatabaseNames
argument_list|()
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|anyMatch
argument_list|(
literal|"otherDB"
operator|::
name|equals
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:noDynamicity"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:noDynamicityExplicit"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=false"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:dynamicityEnabled"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=insert&dynamicity=true"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

