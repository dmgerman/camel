begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mongodb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|client
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThrows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit5
operator|.
name|TestSupport
operator|.
name|assertIsInstanceOf
import|;
end_import

begin_class
DECL|class|MongoDbConnectionBeansTest
specifier|public
class|class
name|MongoDbConnectionBeansTest
extends|extends
name|AbstractMongoDbTest
block|{
annotation|@
name|Test
DECL|method|checkConnectionFromProperties ()
specifier|public
name|void
name|checkConnectionFromProperties
parameter_list|()
block|{
name|MongoDbEndpoint
name|testEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mongodb:anyName?mongoConnection=#myDb&database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=count&dynamicity=true"
argument_list|,
name|MongoDbEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"myDb"
argument_list|,
name|testEndpoint
operator|.
name|getConnectionBean
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mongo
argument_list|,
name|testEndpoint
operator|.
name|getMongoConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkConnectionFromBean ()
specifier|public
name|void
name|checkConnectionFromBean
parameter_list|()
block|{
name|MongoDbEndpoint
name|testEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mongodb:myDb?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=count&dynamicity=true"
argument_list|,
name|MongoDbEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myDb"
argument_list|,
name|testEndpoint
operator|.
name|getConnectionBean
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mongo
argument_list|,
name|testEndpoint
operator|.
name|getMongoConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkConnectionBothExisting ()
specifier|public
name|void
name|checkConnectionBothExisting
parameter_list|()
block|{
name|MongoDbEndpoint
name|testEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mongodb:myDb?mongoConnection=#myDbS&database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=count&dynamicity=true"
argument_list|,
name|MongoDbEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"myDb"
argument_list|,
name|testEndpoint
operator|.
name|getConnectionBean
argument_list|()
argument_list|)
expr_stmt|;
name|MongoClient
name|myDbS
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"myDbS"
argument_list|,
name|MongoClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|myDbS
argument_list|,
name|testEndpoint
operator|.
name|getMongoConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkMissingConnection ()
specifier|public
name|void
name|checkMissingConnection
parameter_list|()
block|{
name|assertThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|MongoDbEndpoint
name|testEndpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mongodb:anythingNotRelated?database={{mongodb.testDb}}&collection={{mongodb.testCollection}}&operation=count&dynamicity=true"
argument_list|,
name|MongoDbEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkConnectionOnComponent ()
specifier|public
name|void
name|checkConnectionOnComponent
parameter_list|()
throws|throws
name|Exception
block|{
name|MongoDbComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"mongodb"
argument_list|,
name|MongoDbComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|MongoClient
name|myDbS
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"myDbS"
argument_list|,
name|MongoClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|component
operator|.
name|setMongoConnection
argument_list|(
name|myDbS
argument_list|)
expr_stmt|;
name|Endpoint
name|endpoint
init|=
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"mongodb:justARouteName?database={{mongodb.testDb}}&collection="
operator|+
literal|"{{mongodb.testCollection}}&operation=count&dynamicity=true"
argument_list|)
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|MongoDbEndpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|myDbS
argument_list|,
operator|(
operator|(
name|MongoDbEndpoint
operator|)
name|endpoint
operator|)
operator|.
name|getMongoConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

