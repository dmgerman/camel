begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jdbc.aggregationrepository
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jdbc
operator|.
name|aggregationrepository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RecoverableAggregationRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|dao
operator|.
name|EmptyResultDataAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|RowMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|support
operator|.
name|AbstractLobCreatingPreparedStatementCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|support
operator|.
name|lob
operator|.
name|DefaultLobHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|support
operator|.
name|lob
operator|.
name|LobCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|support
operator|.
name|lob
operator|.
name|LobHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallbackWithoutResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_comment
comment|/**  * JDBC based {@link org.apache.camel.spi.AggregationRepository}  */
end_comment

begin_class
DECL|class|JdbcAggregationRepository
specifier|public
class|class
name|JdbcAggregationRepository
extends|extends
name|ServiceSupport
implements|implements
name|RecoverableAggregationRepository
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JdbcAggregationRepository
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ID
specifier|private
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"id"
decl_stmt|;
DECL|field|EXCHANGE
specifier|private
specifier|static
specifier|final
name|String
name|EXCHANGE
init|=
literal|"exchange"
decl_stmt|;
DECL|field|transactionManager
specifier|private
name|PlatformTransactionManager
name|transactionManager
decl_stmt|;
DECL|field|dataSource
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
DECL|field|transactionTemplate
specifier|private
name|TransactionTemplate
name|transactionTemplate
decl_stmt|;
DECL|field|transactionTemplateReadOnly
specifier|private
name|TransactionTemplate
name|transactionTemplateReadOnly
decl_stmt|;
DECL|field|jdbcTemplate
specifier|private
name|JdbcTemplate
name|jdbcTemplate
decl_stmt|;
DECL|field|lobHandler
specifier|private
name|LobHandler
name|lobHandler
init|=
operator|new
name|DefaultLobHandler
argument_list|()
decl_stmt|;
DECL|field|repositoryName
specifier|private
name|String
name|repositoryName
decl_stmt|;
DECL|field|returnOldExchange
specifier|private
name|boolean
name|returnOldExchange
decl_stmt|;
DECL|field|codec
specifier|private
name|JdbcCamelCodec
name|codec
init|=
operator|new
name|JdbcCamelCodec
argument_list|()
decl_stmt|;
DECL|field|recoveryInterval
specifier|private
name|long
name|recoveryInterval
init|=
literal|5000
decl_stmt|;
DECL|field|useRecovery
specifier|private
name|boolean
name|useRecovery
init|=
literal|true
decl_stmt|;
DECL|field|maximumRedeliveries
specifier|private
name|int
name|maximumRedeliveries
decl_stmt|;
DECL|field|deadLetterUri
specifier|private
name|String
name|deadLetterUri
decl_stmt|;
comment|/**      * Creates an aggregation repository      */
DECL|method|JdbcAggregationRepository ()
specifier|public
name|JdbcAggregationRepository
parameter_list|()
block|{     }
comment|/**      * Creates an aggregation repository with the three mandatory parameters      */
DECL|method|JdbcAggregationRepository (PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource)
specifier|public
name|JdbcAggregationRepository
parameter_list|(
name|PlatformTransactionManager
name|transactionManager
parameter_list|,
name|String
name|repositoryName
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|setRepositoryName
argument_list|(
name|repositoryName
argument_list|)
expr_stmt|;
name|this
operator|.
name|setTransactionManager
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|setDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param repositoryName the repositoryName to set      */
DECL|method|setRepositoryName (String repositoryName)
specifier|public
specifier|final
name|void
name|setRepositoryName
parameter_list|(
name|String
name|repositoryName
parameter_list|)
block|{
name|this
operator|.
name|repositoryName
operator|=
name|repositoryName
expr_stmt|;
block|}
DECL|method|setTransactionManager (PlatformTransactionManager transactionManager)
specifier|public
specifier|final
name|void
name|setTransactionManager
parameter_list|(
name|PlatformTransactionManager
name|transactionManager
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
name|transactionTemplate
operator|=
operator|new
name|TransactionTemplate
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
name|transactionTemplate
operator|.
name|setPropagationBehavior
argument_list|(
name|TransactionTemplate
operator|.
name|PROPAGATION_REQUIRED
argument_list|)
expr_stmt|;
name|transactionTemplateReadOnly
operator|=
operator|new
name|TransactionTemplate
argument_list|(
name|transactionManager
argument_list|)
expr_stmt|;
name|transactionTemplateReadOnly
operator|.
name|setPropagationBehavior
argument_list|(
name|TransactionTemplate
operator|.
name|PROPAGATION_REQUIRED
argument_list|)
expr_stmt|;
name|transactionTemplateReadOnly
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|setDataSource (DataSource dataSource)
specifier|public
specifier|final
name|void
name|setDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
name|jdbcTemplate
operator|=
operator|new
name|JdbcTemplate
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|add (final CamelContext camelContext, final String correlationId, final Exchange exchange)
specifier|public
name|Exchange
name|add
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|String
name|correlationId
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|(
name|Exchange
operator|)
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|()
block|{
specifier|public
name|Exchange
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
name|String
name|sql
decl_stmt|;
name|Exchange
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|key
init|=
name|correlationId
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|codec
operator|.
name|marshallExchange
argument_list|(
name|camelContext
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding exchange with key: ["
operator|+
name|key
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|String
name|insert
init|=
literal|"INSERT INTO "
operator|+
name|getRepositoryName
argument_list|()
operator|+
literal|" ("
operator|+
name|EXCHANGE
operator|+
literal|", "
operator|+
name|ID
operator|+
literal|") VALUES (?, ?)"
decl_stmt|;
name|String
name|update
init|=
literal|"UPDATE "
operator|+
name|getRepositoryName
argument_list|()
operator|+
literal|" SET "
operator|+
name|EXCHANGE
operator|+
literal|" = ? WHERE "
operator|+
name|ID
operator|+
literal|" = ?"
decl_stmt|;
name|boolean
name|present
init|=
name|jdbcTemplate
operator|.
name|queryForInt
argument_list|(
literal|"SELECT COUNT (*) FROM "
operator|+
name|getRepositoryName
argument_list|()
operator|+
literal|" WHERE "
operator|+
name|ID
operator|+
literal|" = ?"
argument_list|,
name|key
argument_list|)
operator|!=
literal|0
decl_stmt|;
name|sql
operator|=
name|present
condition|?
name|update
else|:
name|insert
expr_stmt|;
comment|// Recover existing exchange with that ID
if|if
condition|(
name|isReturnOldExchange
argument_list|()
operator|&&
name|present
condition|)
block|{
name|result
operator|=
name|get
argument_list|(
name|key
argument_list|,
name|getRepositoryName
argument_list|()
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
name|jdbcTemplate
operator|.
name|execute
argument_list|(
name|sql
argument_list|,
operator|new
name|AbstractLobCreatingPreparedStatementCallback
argument_list|(
name|getLobHandler
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setValues
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|LobCreator
name|lobCreator
parameter_list|)
throws|throws
name|SQLException
block|{
name|lobCreator
operator|.
name|setBlobAsBytes
argument_list|(
name|ps
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error adding to repository "
operator|+
name|repositoryName
operator|+
literal|" with key "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|get (final CamelContext camelContext, final String correlationId)
specifier|public
name|Exchange
name|get
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|String
name|correlationId
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|correlationId
decl_stmt|;
name|Exchange
name|result
init|=
name|get
argument_list|(
name|key
argument_list|,
name|getRepositoryName
argument_list|()
argument_list|,
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting key  ["
operator|+
name|key
operator|+
literal|"] -> "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|get (final String key, final String repositoryName, final CamelContext camelContext)
specifier|private
name|Exchange
name|get
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|repositoryName
parameter_list|,
specifier|final
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
operator|(
name|Exchange
operator|)
name|transactionTemplateReadOnly
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|()
block|{
specifier|public
name|Exchange
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
try|try
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
literal|"SELECT "
operator|+
name|EXCHANGE
operator|+
literal|" FROM "
operator|+
name|repositoryName
operator|+
literal|" WHERE "
operator|+
name|ID
operator|+
literal|" = ?"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|key
block|}
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
return|return
name|codec
operator|.
name|unmarshallExchange
argument_list|(
name|camelContext
argument_list|,
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EmptyResultDataAccessException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// Rollback the transaction
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error getting key "
operator|+
name|key
operator|+
literal|" from repository "
operator|+
name|repositoryName
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
comment|// Rollback the transaction
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|remove (final CamelContext camelContext, final String correlationId, final Exchange exchange)
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|String
name|correlationId
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallbackWithoutResult
argument_list|()
block|{
specifier|protected
name|void
name|doInTransactionWithoutResult
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|correlationId
decl_stmt|;
specifier|final
name|String
name|confirmKey
init|=
name|exchange
operator|.
name|getExchangeId
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|codec
operator|.
name|marshallExchange
argument_list|(
name|camelContext
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing key ["
operator|+
name|key
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|jdbcTemplate
operator|.
name|update
argument_list|(
literal|"DELETE FROM "
operator|+
name|getRepositoryName
argument_list|()
operator|+
literal|" WHERE "
operator|+
name|ID
operator|+
literal|" = ?"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|key
block|}
argument_list|)
expr_stmt|;
name|jdbcTemplate
operator|.
name|execute
argument_list|(
literal|"INSERT INTO "
operator|+
name|getRepositoryNameCompleted
argument_list|()
operator|+
literal|" ("
operator|+
name|EXCHANGE
operator|+
literal|", "
operator|+
name|ID
operator|+
literal|") VALUES (?, ?)"
argument_list|,
operator|new
name|AbstractLobCreatingPreparedStatementCallback
argument_list|(
name|getLobHandler
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setValues
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|LobCreator
name|lobCreator
parameter_list|)
throws|throws
name|SQLException
block|{
name|lobCreator
operator|.
name|setBlobAsBytes
argument_list|(
name|ps
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|confirmKey
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error removing key "
operator|+
name|key
operator|+
literal|" from repository "
operator|+
name|repositoryName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|confirm (final CamelContext camelContext, final String exchangeId)
specifier|public
name|void
name|confirm
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|String
name|exchangeId
parameter_list|)
block|{
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallbackWithoutResult
argument_list|()
block|{
specifier|protected
name|void
name|doInTransactionWithoutResult
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Confirming exchangeId ["
operator|+
name|exchangeId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|confirmKey
init|=
name|exchangeId
decl_stmt|;
name|jdbcTemplate
operator|.
name|update
argument_list|(
literal|"DELETE FROM "
operator|+
name|getRepositoryNameCompleted
argument_list|()
operator|+
literal|" WHERE "
operator|+
name|ID
operator|+
literal|" = ?"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|confirmKey
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getKeys ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
operator|(
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
operator|)
name|transactionTemplateReadOnly
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|()
block|{
specifier|public
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|jdbcTemplate
operator|.
name|query
argument_list|(
literal|"SELECT "
operator|+
name|ID
operator|+
literal|" FROM "
operator|+
name|getRepositoryName
argument_list|()
argument_list|,
operator|new
name|RowMapper
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|mapRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|rowNum
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|id
init|=
name|rs
operator|.
name|getString
argument_list|(
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getKey ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|keys
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|scan (CamelContext camelContext)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|scan
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
operator|(
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
operator|)
name|transactionTemplateReadOnly
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|()
block|{
specifier|public
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|jdbcTemplate
operator|.
name|query
argument_list|(
literal|"SELECT "
operator|+
name|ID
operator|+
literal|" FROM "
operator|+
name|getRepositoryNameCompleted
argument_list|()
argument_list|,
operator|new
name|RowMapper
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|mapRow
parameter_list|(
name|ResultSet
name|rs
parameter_list|,
name|int
name|rowNum
parameter_list|)
throws|throws
name|SQLException
block|{
name|String
name|id
init|=
name|rs
operator|.
name|getString
argument_list|(
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"getKey ["
operator|+
name|id
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|keys
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|recover (CamelContext camelContext, String exchangeId)
specifier|public
name|Exchange
name|recover
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|exchangeId
parameter_list|)
block|{
specifier|final
name|String
name|key
init|=
name|exchangeId
decl_stmt|;
name|Exchange
name|answer
init|=
name|get
argument_list|(
name|key
argument_list|,
name|getRepositoryNameCompleted
argument_list|()
argument_list|,
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recovering exchangeId ["
operator|+
name|key
operator|+
literal|"] -> "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|setRecoveryInterval (long interval, TimeUnit timeUnit)
specifier|public
name|void
name|setRecoveryInterval
parameter_list|(
name|long
name|interval
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
name|this
operator|.
name|recoveryInterval
operator|=
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
DECL|method|setRecoveryInterval (long interval)
specifier|public
name|void
name|setRecoveryInterval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|recoveryInterval
operator|=
name|interval
expr_stmt|;
block|}
DECL|method|getRecoveryIntervalInMillis ()
specifier|public
name|long
name|getRecoveryIntervalInMillis
parameter_list|()
block|{
return|return
name|recoveryInterval
return|;
block|}
DECL|method|isUseRecovery ()
specifier|public
name|boolean
name|isUseRecovery
parameter_list|()
block|{
return|return
name|useRecovery
return|;
block|}
DECL|method|setUseRecovery (boolean useRecovery)
specifier|public
name|void
name|setUseRecovery
parameter_list|(
name|boolean
name|useRecovery
parameter_list|)
block|{
name|this
operator|.
name|useRecovery
operator|=
name|useRecovery
expr_stmt|;
block|}
DECL|method|getMaximumRedeliveries ()
specifier|public
name|int
name|getMaximumRedeliveries
parameter_list|()
block|{
return|return
name|maximumRedeliveries
return|;
block|}
DECL|method|setMaximumRedeliveries (int maximumRedeliveries)
specifier|public
name|void
name|setMaximumRedeliveries
parameter_list|(
name|int
name|maximumRedeliveries
parameter_list|)
block|{
name|this
operator|.
name|maximumRedeliveries
operator|=
name|maximumRedeliveries
expr_stmt|;
block|}
DECL|method|getDeadLetterUri ()
specifier|public
name|String
name|getDeadLetterUri
parameter_list|()
block|{
return|return
name|deadLetterUri
return|;
block|}
DECL|method|setDeadLetterUri (String deadLetterUri)
specifier|public
name|void
name|setDeadLetterUri
parameter_list|(
name|String
name|deadLetterUri
parameter_list|)
block|{
name|this
operator|.
name|deadLetterUri
operator|=
name|deadLetterUri
expr_stmt|;
block|}
DECL|method|isReturnOldExchange ()
specifier|public
name|boolean
name|isReturnOldExchange
parameter_list|()
block|{
return|return
name|returnOldExchange
return|;
block|}
DECL|method|setReturnOldExchange (boolean returnOldExchange)
specifier|public
name|void
name|setReturnOldExchange
parameter_list|(
name|boolean
name|returnOldExchange
parameter_list|)
block|{
name|this
operator|.
name|returnOldExchange
operator|=
name|returnOldExchange
expr_stmt|;
block|}
comment|/**      * @return the lobHandler      */
DECL|method|getLobHandler ()
specifier|public
name|LobHandler
name|getLobHandler
parameter_list|()
block|{
return|return
name|lobHandler
return|;
block|}
comment|/**      * @param lobHandler the lobHandler to set      */
DECL|method|setLobHandler (LobHandler lobHandler)
specifier|public
name|void
name|setLobHandler
parameter_list|(
name|LobHandler
name|lobHandler
parameter_list|)
block|{
name|this
operator|.
name|lobHandler
operator|=
name|lobHandler
expr_stmt|;
block|}
DECL|method|getRepositoryName ()
specifier|public
name|String
name|getRepositoryName
parameter_list|()
block|{
return|return
name|repositoryName
return|;
block|}
DECL|method|getRepositoryNameCompleted ()
specifier|public
name|String
name|getRepositoryNameCompleted
parameter_list|()
block|{
return|return
name|getRepositoryName
argument_list|()
operator|+
literal|"_completed"
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|repositoryName
argument_list|,
literal|"RepositoryName"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|transactionManager
argument_list|,
literal|"TransactionManager"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|dataSource
argument_list|,
literal|"DataSource"
argument_list|)
expr_stmt|;
comment|// log number of existing exchanges
name|int
name|current
init|=
name|getKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|completed
init|=
name|scan
argument_list|(
literal|null
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"On startup there are "
operator|+
name|current
operator|+
literal|" aggregate exchanges (not completed) in repository: "
operator|+
name|getRepositoryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"On startup there are no existing aggregate exchanges (not completed) in repository: "
operator|+
name|getRepositoryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|completed
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"On startup there are "
operator|+
name|completed
operator|+
literal|" completed exchanges to be recovered in repository: "
operator|+
name|getRepositoryNameCompleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"On startup there are no completed exchanges to be recovered in repository: "
operator|+
name|getRepositoryNameCompleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
block|}
end_class

end_unit

