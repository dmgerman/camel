begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.supercsv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|supercsv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|BeanUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|io
operator|.
name|CsvBeanWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|io
operator|.
name|CsvMapReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|io
operator|.
name|CsvMapWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|io
operator|.
name|ICsvBeanWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|io
operator|.
name|ICsvMapReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|io
operator|.
name|ICsvMapWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|supercsv
operator|.
name|prefs
operator|.
name|CsvPreference
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|CsvDataFormat
specifier|public
class|class
name|CsvDataFormat
implements|implements
name|DataFormat
block|{
DECL|field|preference
specifier|private
name|CsvPreference
name|preference
init|=
name|CsvPreference
operator|.
name|STANDARD_PREFERENCE
decl_stmt|;
DECL|method|marshal (Exchange exchange, Object object, OutputStream outputStream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|object
parameter_list|,
name|OutputStream
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStreamWriter
name|out
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|outputStream
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|Map
condition|)
block|{
name|ICsvMapWriter
name|writer
init|=
operator|new
name|CsvMapWriter
argument_list|(
name|out
argument_list|,
name|preference
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
operator|)
name|object
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|map
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|String
index|[]
name|headers
init|=
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|keys
operator|.
name|toArray
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeHeader
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|map
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|ICsvBeanWriter
name|writer
init|=
operator|new
name|CsvBeanWriter
argument_list|(
name|out
argument_list|,
name|preference
argument_list|)
decl_stmt|;
name|PropertyDescriptor
index|[]
name|properties
init|=
name|BeanUtils
operator|.
name|getPropertyDescriptors
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|properties
operator|.
name|length
decl_stmt|;
name|String
index|[]
name|headers
init|=
operator|new
name|String
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|headers
index|[
name|i
index|]
operator|=
name|properties
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|writeHeader
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|object
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|unmarshal (Exchange exchange, InputStream inputStream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|ICsvMapReader
name|reader
init|=
operator|new
name|CsvMapReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|,
name|preference
argument_list|)
decl_stmt|;
name|String
index|[]
name|headers
init|=
name|reader
operator|.
name|getCSVHeader
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|reader
operator|.
name|read
argument_list|(
name|headers
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// ignore exception
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|list
return|;
block|}
block|}
DECL|method|getPreference ()
specifier|public
name|CsvPreference
name|getPreference
parameter_list|()
block|{
return|return
name|preference
return|;
block|}
DECL|method|setPreference (CsvPreference preference)
specifier|public
name|void
name|setPreference
parameter_list|(
name|CsvPreference
name|preference
parameter_list|)
block|{
name|this
operator|.
name|preference
operator|=
name|preference
expr_stmt|;
block|}
block|}
end_class

end_unit

