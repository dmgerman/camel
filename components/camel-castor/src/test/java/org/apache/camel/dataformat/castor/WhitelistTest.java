begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.castor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|castor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|WhitelistTest
specifier|public
class|class
name|WhitelistTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testDeny ()
specifier|public
name|void
name|testDeny
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|stuff
init|=
literal|"<x xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:java=\"http://java.sun.com\""
operator|+
literal|" xsi:type=\"java:org.springframework.beans.factory.config.PropertyPathFactoryBean\">"
operator|+
literal|"<target-bean-name>ldap://localhost:1389/obj</target-bean-name><property-path>foo</property-path>"
operator|+
literal|"<bean-factory xsi:type=\"java:org.springframework.jndi.support.SimpleJndiBeanFactory\">"
operator|+
literal|"<shareable-resource>ldap://localhost:1389/obj</shareable-resource></bean-factory></x>"
decl_stmt|;
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:unmarshal"
argument_list|,
name|stuff
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw an error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|IllegalAccessException
name|iae
init|=
name|assertIsInstanceOf
argument_list|(
name|IllegalAccessException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|iae
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Not allowed to create class of type: class org.springframework.beans.factory.config.PropertyPathFactoryBean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|CastorDataFormat
name|castor
init|=
operator|new
name|CastorDataFormat
argument_list|()
decl_stmt|;
comment|// note that whitelist is enabled by default
comment|// castor.setWhitlistEnabled(true);
comment|// and that everything is denied by default
comment|// so you would need to configure allow to enable safe classes to be loaded
comment|// castor.setDeniedUnmarshallObjects("org.spring.*");
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:unmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|castor
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unmarshal"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

