begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.castor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|castor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Marhsal tests with domain objects.  */
end_comment

begin_class
DECL|class|MarshalWithMappingDomainObjectTest
specifier|public
class|class
name|MarshalWithMappingDomainObjectTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testMarshalDomainObject ()
specifier|public
name|void
name|testMarshalDomainObject
parameter_list|()
throws|throws
name|Exception
block|{
comment|// some platform cannot test using Castor as it uses a SUN dependent Xerces
if|if
condition|(
name|isJavaVendor
argument_list|(
literal|"IBM"
argument_list|)
condition|)
block|{
return|return;
block|}
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:marshal"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|()
decl_stmt|;
name|student
operator|.
name|setStuLastName
argument_list|(
literal|"Dilshan"
argument_list|)
expr_stmt|;
name|student
operator|.
name|setStuAge
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|student
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmarshalDomainObject ()
specifier|public
name|void
name|testUnmarshalDomainObject
parameter_list|()
throws|throws
name|Exception
block|{
comment|// some platform cannot test using Castor as it uses a SUN dependent Xerces
if|if
condition|(
name|isJavaVendor
argument_list|(
literal|"IBM"
argument_list|)
condition|)
block|{
return|return;
block|}
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:unmarshal"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
literal|"<student><firstname>Sagara</firstname><lastname>Gunathunga</lastname><age>27</age></student>"
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:unmarshal"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|()
decl_stmt|;
name|student
operator|.
name|setStuLastName
argument_list|(
literal|"Gunathunga"
argument_list|)
expr_stmt|;
name|student
operator|.
name|setStuFirstName
argument_list|(
literal|"Sagara"
argument_list|)
expr_stmt|;
name|student
operator|.
name|setStuAge
argument_list|(
literal|27
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|Student
operator|.
name|class
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|equals
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|CastorDataFormat
name|myformat
init|=
operator|new
name|CastorDataFormat
argument_list|()
decl_stmt|;
name|myformat
operator|.
name|setMappingFile
argument_list|(
literal|"map.xml"
argument_list|)
expr_stmt|;
name|myformat
operator|.
name|setValidation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshal"
argument_list|)
operator|.
name|marshal
argument_list|(
name|myformat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:marshal"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:unmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|myformat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:unmarshal"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

