begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.castor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|castor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|util
operator|.
name|DefaultObjectFactory
import|;
end_import

begin_class
DECL|class|WhitelistObjectFactory
specifier|public
class|class
name|WhitelistObjectFactory
extends|extends
name|DefaultObjectFactory
block|{
DECL|field|allowClasses
specifier|private
name|String
name|allowClasses
decl_stmt|;
DECL|field|denyClasses
specifier|private
name|String
name|denyClasses
decl_stmt|;
DECL|method|getAllowClasses ()
specifier|public
name|String
name|getAllowClasses
parameter_list|()
block|{
return|return
name|allowClasses
return|;
block|}
DECL|method|setAllowClasses (String allowClasses)
specifier|public
name|void
name|setAllowClasses
parameter_list|(
name|String
name|allowClasses
parameter_list|)
block|{
name|this
operator|.
name|allowClasses
operator|=
name|allowClasses
expr_stmt|;
block|}
DECL|method|getDenyClasses ()
specifier|public
name|String
name|getDenyClasses
parameter_list|()
block|{
return|return
name|denyClasses
return|;
block|}
DECL|method|setDenyClasses (String denyClasses)
specifier|public
name|void
name|setDenyClasses
parameter_list|(
name|String
name|denyClasses
parameter_list|)
block|{
name|this
operator|.
name|denyClasses
operator|=
name|denyClasses
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createInstance (Class type)
specifier|public
name|Object
name|createInstance
parameter_list|(
name|Class
name|type
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
if|if
condition|(
name|allowCreate
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|createInstance
argument_list|(
name|type
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Not allowed to create class of type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createInstance (Class type, Object[] args)
specifier|public
name|Object
name|createInstance
parameter_list|(
name|Class
name|type
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
if|if
condition|(
name|allowCreate
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|createInstance
argument_list|(
name|type
argument_list|,
name|args
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Not allowed to create class of type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createInstance (Class type, Class[] argTypes, Object[] args)
specifier|public
name|Object
name|createInstance
parameter_list|(
name|Class
name|type
parameter_list|,
name|Class
index|[]
name|argTypes
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
if|if
condition|(
name|allowCreate
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|createInstance
argument_list|(
name|type
argument_list|,
name|argTypes
argument_list|,
name|args
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Not allowed to create class of type: "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
DECL|method|allowCreate (Class type)
specifier|private
name|boolean
name|allowCreate
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|String
name|name
init|=
name|type
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// deny takes precedence
if|if
condition|(
name|denyClasses
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|denyClasses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|arr
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|name
argument_list|,
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|// deny takes precedence
if|if
condition|(
name|allowClasses
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|arr
init|=
name|allowClasses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|arr
control|)
block|{
if|if
condition|(
name|EndpointHelper
operator|.
name|matchPattern
argument_list|(
name|name
argument_list|,
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|// deny by default
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

