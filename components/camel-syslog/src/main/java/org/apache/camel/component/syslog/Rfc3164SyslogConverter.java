begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.syslog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|syslog
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|Rfc3164SyslogConverter
specifier|public
class|class
name|Rfc3164SyslogConverter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Rfc3164SyslogConverter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|MONTHS
specifier|private
specifier|static
enum|enum
name|MONTHS
block|{
DECL|enumConstant|jan
DECL|enumConstant|feb
DECL|enumConstant|mar
DECL|enumConstant|apr
DECL|enumConstant|may
DECL|enumConstant|jun
DECL|enumConstant|jul
DECL|enumConstant|aug
DECL|enumConstant|sep
DECL|enumConstant|oct
DECL|enumConstant|nov
DECL|enumConstant|dec
name|jan
block|,
name|feb
block|,
name|mar
block|,
name|apr
block|,
name|may
block|,
name|jun
block|,
name|jul
block|,
name|aug
block|,
name|sep
block|,
name|oct
block|,
name|nov
block|,
name|dec
block|}
DECL|field|MONTH_VALUE_MAP
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|MONTHS
argument_list|>
name|MONTH_VALUE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MONTHS
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
literal|"jan"
argument_list|,
name|MONTHS
operator|.
name|jan
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"feb"
argument_list|,
name|MONTHS
operator|.
name|feb
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"mar"
argument_list|,
name|MONTHS
operator|.
name|mar
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"apr"
argument_list|,
name|MONTHS
operator|.
name|apr
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"may"
argument_list|,
name|MONTHS
operator|.
name|may
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"jun"
argument_list|,
name|MONTHS
operator|.
name|jun
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"jul"
argument_list|,
name|MONTHS
operator|.
name|jul
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"aug"
argument_list|,
name|MONTHS
operator|.
name|aug
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"sep"
argument_list|,
name|MONTHS
operator|.
name|sep
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"oct"
argument_list|,
name|MONTHS
operator|.
name|oct
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"nov"
argument_list|,
name|MONTHS
operator|.
name|nov
argument_list|)
expr_stmt|;
name|put
argument_list|(
literal|"dec"
argument_list|,
name|MONTHS
operator|.
name|dec
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Converter
DECL|method|toString (SyslogMessage message)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|SyslogMessage
name|message
parameter_list|)
block|{
name|StringBuilder
name|sbr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sbr
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getFacility
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setFacility
argument_list|(
name|SyslogFacility
operator|.
name|USER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|getSeverity
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setSeverity
argument_list|(
name|SyslogSeverity
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|getHostname
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//This is massively ugly..
try|try
block|{
name|message
operator|.
name|setHostname
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|message
operator|.
name|setHostname
argument_list|(
literal|"UNKNOWN_HOST"
argument_list|)
expr_stmt|;
block|}
block|}
name|sbr
operator|.
name|append
argument_list|(
name|message
operator|.
name|getFacility
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|*
literal|8
operator|+
name|message
operator|.
name|getSeverity
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|sbr
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getTimestamp
argument_list|()
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//SDF isn't going to help much here.
name|Calendar
name|cal
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|message
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|firstLetter
init|=
name|MONTHS
operator|.
name|values
argument_list|()
index|[
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
index|]
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Get first letter
name|String
name|remainder
init|=
name|MONTHS
operator|.
name|values
argument_list|()
index|[
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
index|]
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Get remainder of word.
name|String
name|capitalized
init|=
name|firstLetter
operator|.
name|toUpperCase
argument_list|()
operator|+
name|remainder
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|sbr
operator|.
name|append
argument_list|(
name|capitalized
argument_list|)
expr_stmt|;
name|sbr
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|<
literal|10
condition|)
block|{
name|sbr
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sbr
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sbr
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|<
literal|10
condition|)
block|{
name|sbr
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sbr
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sbr
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|<
literal|10
condition|)
block|{
name|sbr
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sbr
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sbr
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
operator|<
literal|10
condition|)
block|{
name|sbr
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sbr
operator|.
name|append
argument_list|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sbr
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sbr
operator|.
name|append
argument_list|(
name|message
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|sbr
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sbr
operator|.
name|append
argument_list|(
name|message
operator|.
name|getLogMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sbr
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toSyslogMessage (String body)
specifier|public
specifier|static
name|SyslogMessage
name|toSyslogMessage
parameter_list|(
name|String
name|body
parameter_list|)
block|{
return|return
name|parseMessage
argument_list|(
name|body
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|parseMessage (byte[] bytes)
specifier|public
specifier|final
specifier|static
name|SyslogMessage
name|parseMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|ByteBuffer
name|byteBuffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|byteBuffer
operator|.
name|put
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|SyslogMessage
name|syslogMessage
init|=
operator|new
name|SyslogMessage
argument_list|()
decl_stmt|;
name|Character
name|charFound
init|=
operator|(
name|char
operator|)
name|byteBuffer
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
name|charFound
operator|!=
literal|'<'
condition|)
block|{
comment|//Ignore noise in beginning of message.
name|charFound
operator|=
operator|(
name|char
operator|)
name|byteBuffer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|char
name|priChar
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|charFound
operator|==
literal|'<'
condition|)
block|{
name|int
name|facility
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|priChar
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
argument_list|)
condition|)
block|{
name|facility
operator|*=
literal|10
expr_stmt|;
name|facility
operator|+=
name|Character
operator|.
name|digit
argument_list|(
name|priChar
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|syslogMessage
operator|.
name|setFacility
argument_list|(
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
name|facility
operator|>>
literal|3
index|]
argument_list|)
expr_stmt|;
name|syslogMessage
operator|.
name|setSeverity
argument_list|(
name|SyslogSeverity
operator|.
name|values
argument_list|()
index|[
name|facility
operator|&
literal|0x07
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|priChar
operator|!=
literal|'>'
condition|)
block|{
comment|//Invalid character - this is not a well defined syslog message.
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid syslog message, missing a> in the Facility/Priority part"
argument_list|)
expr_stmt|;
block|}
comment|//Done parsing severity and facility
comment|//<169>Oct 22 10:52:01 TZ-6 scapegoat.dmz.example.org 10.1.2.3 sched[0]: That's All Folks!
comment|//Need to parse the date.
comment|/**          The TIMESTAMP field is the local time and is in the format of "Mmm dd          hh:mm:ss" (without the quote marks) where:           Mmm is the English language abbreviation for the month of the          year with the first character in uppercase and the other two          characters in lowercase.  The following are the only acceptable          values:           Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec           dd is the day of the month.  If the day of the month is less          than 10, then it MUST be represented as a space and then the          number.  For example, the 7th day of August would be          represented as "Aug  7", with two spaces between the "g" and          the "7".           hh:mm:ss is the local time.  The hour (hh) is represented in a          24-hour format.  Valid entries are between 00 and 23,          inclusive.  The minute (mm) and second (ss) entries are between          00 and 59 inclusive.            */
name|char
index|[]
name|month
init|=
operator|new
name|char
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|month
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|charFound
operator|=
operator|(
name|char
operator|)
name|byteBuffer
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|charFound
operator|!=
literal|' '
condition|)
block|{
comment|//Invalid Message - missing mandatory space.
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid syslog message, missing a mandatory space after month"
argument_list|)
expr_stmt|;
block|}
name|charFound
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|int
name|day
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|charFound
operator|==
literal|' '
condition|)
block|{
comment|//Extra space for the day - this is okay.
comment|//Just ignored per the spec.
block|}
else|else
block|{
name|day
operator|*=
literal|10
expr_stmt|;
name|day
operator|+=
name|Character
operator|.
name|digit
argument_list|(
name|charFound
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|charFound
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
argument_list|)
condition|)
block|{
name|day
operator|*=
literal|10
expr_stmt|;
name|day
operator|+=
name|Character
operator|.
name|digit
argument_list|(
name|charFound
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|int
name|hour
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|charFound
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
argument_list|)
condition|)
block|{
name|hour
operator|*=
literal|10
expr_stmt|;
name|hour
operator|+=
name|Character
operator|.
name|digit
argument_list|(
name|charFound
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|int
name|minute
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|charFound
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
argument_list|)
condition|)
block|{
name|minute
operator|*=
literal|10
expr_stmt|;
name|minute
operator|+=
name|Character
operator|.
name|digit
argument_list|(
name|charFound
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|int
name|second
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|charFound
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
argument_list|)
condition|)
block|{
name|second
operator|*=
literal|10
expr_stmt|;
name|second
operator|+=
name|Character
operator|.
name|digit
argument_list|(
name|charFound
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|//The host is the char sequence until the next ' '
name|StringBuilder
name|host
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|charFound
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
operator|)
operator|!=
literal|' '
condition|)
block|{
name|host
operator|.
name|append
argument_list|(
name|charFound
argument_list|)
expr_stmt|;
block|}
name|syslogMessage
operator|.
name|setHostname
argument_list|(
name|host
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|byteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|charFound
operator|=
call|(
name|char
call|)
argument_list|(
name|byteBuffer
operator|.
name|get
argument_list|()
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|charFound
argument_list|)
expr_stmt|;
block|}
name|Calendar
name|calendar
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|,
name|MONTH_VALUE_MAP
operator|.
name|get
argument_list|(
operator|(
name|String
operator|.
name|valueOf
argument_list|(
name|month
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|)
argument_list|)
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|hour
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|minute
argument_list|)
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|syslogMessage
operator|.
name|setTimestamp
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|syslogMessage
operator|.
name|setLogMessage
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Syslog message : "
operator|+
name|syslogMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|syslogMessage
return|;
block|}
block|}
end_class

end_unit

