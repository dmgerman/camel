begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.syslog.netty
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|syslog
operator|.
name|netty
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|ByteBuf
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|buffer
operator|.
name|Unpooled
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|ByteToMessageDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|netty4
operator|.
name|ChannelHandlerFactory
import|;
end_import

begin_class
DECL|class|Rfc5425FrameDecoder
specifier|public
class|class
name|Rfc5425FrameDecoder
extends|extends
name|ByteToMessageDecoder
implements|implements
name|ChannelHandlerFactory
block|{
DECL|field|currentFramelength
specifier|private
name|Integer
name|currentFramelength
decl_stmt|;
annotation|@
name|Override
DECL|method|decode (ChannelHandlerContext ctx, ByteBuf in, List<Object> out)
specifier|protected
name|void
name|decode
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|ByteBuf
name|in
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|out
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|currentFramelength
operator|==
literal|null
condition|)
block|{
comment|// find index of the first space, it should be after the length field
name|int
name|index
init|=
name|indexOf
argument_list|(
name|in
argument_list|,
name|Unpooled
operator|.
name|wrappedBuffer
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|' '
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// Read part until the first space, if we have found one
name|StringBuffer
name|lengthbuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|ByteBuf
name|byteBuf
init|=
name|in
operator|.
name|readBytes
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|byte
index|[]
name|dest
init|=
operator|new
name|byte
index|[
name|byteBuf
operator|.
name|readableBytes
argument_list|()
index|]
decl_stmt|;
name|byteBuf
operator|.
name|readBytes
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|lengthbuffer
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|length
decl_stmt|;
try|try
block|{
comment|// add one because we have to take in account the space after
comment|// the length field
name|length
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|lengthbuffer
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|length
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// We have not found the length field, reset the buffer so we can
comment|// retry next time
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
name|in
operator|.
name|resetReaderIndex
argument_list|()
expr_stmt|;
return|return;
block|}
name|currentFramelength
operator|=
name|length
expr_stmt|;
block|}
comment|// Buffer does not contain enough data yet, wait until it does
if|if
condition|(
name|in
operator|.
name|readableBytes
argument_list|()
operator|<
name|currentFramelength
condition|)
block|{
return|return;
block|}
comment|// read the message
name|int
name|lengthToRead
init|=
name|currentFramelength
decl_stmt|;
name|currentFramelength
operator|=
literal|null
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|in
operator|.
name|readBytes
argument_list|(
name|lengthToRead
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Borrowed from the DelimiterBasedFrameDecoder Returns the number of bytes      * between the readerIndex of the haystack and the first needle found in the      * haystack. -1 is returned if no needle is found in the haystack.      */
DECL|method|indexOf (ByteBuf haystack, ByteBuf needle)
specifier|private
specifier|static
name|int
name|indexOf
parameter_list|(
name|ByteBuf
name|haystack
parameter_list|,
name|ByteBuf
name|needle
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|haystack
operator|.
name|readerIndex
argument_list|()
init|;
name|i
operator|<
name|haystack
operator|.
name|writerIndex
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|haystackIndex
init|=
name|i
decl_stmt|;
name|int
name|needleIndex
decl_stmt|;
for|for
control|(
name|needleIndex
operator|=
literal|0
init|;
name|needleIndex
operator|<
name|needle
operator|.
name|capacity
argument_list|()
condition|;
name|needleIndex
operator|++
control|)
block|{
if|if
condition|(
name|haystack
operator|.
name|getByte
argument_list|(
name|haystackIndex
argument_list|)
operator|!=
name|needle
operator|.
name|getByte
argument_list|(
name|needleIndex
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|haystackIndex
operator|++
expr_stmt|;
if|if
condition|(
name|haystackIndex
operator|==
name|haystack
operator|.
name|writerIndex
argument_list|()
operator|&&
name|needleIndex
operator|!=
name|needle
operator|.
name|capacity
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
if|if
condition|(
name|needleIndex
operator|==
name|needle
operator|.
name|capacity
argument_list|()
condition|)
block|{
comment|// Found the needle from the haystack!
return|return
name|i
operator|-
name|haystack
operator|.
name|readerIndex
argument_list|()
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|newChannelHandler ()
specifier|public
name|ChannelHandler
name|newChannelHandler
parameter_list|()
block|{
return|return
operator|new
name|Rfc5425FrameDecoder
argument_list|()
return|;
block|}
block|}
end_class

end_unit

