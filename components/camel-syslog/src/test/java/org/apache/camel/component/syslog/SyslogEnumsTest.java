begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.syslog
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|syslog
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SyslogEnumsTest
specifier|public
class|class
name|SyslogEnumsTest
extends|extends
name|TestCase
block|{
annotation|@
name|Test
DECL|method|testFacilityConstants ()
specifier|public
name|void
name|testFacilityConstants
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"KERN"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
literal|0
operator|>>
literal|3
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"USER"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|1
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MAIL"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|2
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DAEMON"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|3
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AUTH"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|4
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SYSLOG"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|5
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LPR"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
operator|(
literal|6
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NEWS"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
operator|(
literal|7
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UUCP"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
operator|(
literal|8
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CRON"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
operator|(
literal|9
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AUTHPRIV"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|10
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"FTP"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|11
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|/**          RESERVED_12,          RESERVED_13,          RESERVED_14,          RESERVED_15,          */
name|assertEquals
argument_list|(
literal|"LOCAL0"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|16
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCAL1"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|17
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCAL2"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|18
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCAL3"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|19
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCAL4"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|20
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCAL5"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|21
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCAL6"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|22
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"LOCAL7"
argument_list|,
name|SyslogFacility
operator|.
name|values
argument_list|()
index|[
operator|(
operator|(
literal|23
operator|>>
literal|3
operator|/
literal|8
operator|)
operator|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSeverity ()
specifier|public
name|void
name|testSeverity
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"EMERG"
argument_list|,
name|SyslogSeverity
operator|.
name|values
argument_list|()
index|[
literal|0
operator|&
literal|0x07
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ALERT"
argument_list|,
name|SyslogSeverity
operator|.
name|values
argument_list|()
index|[
literal|1
operator|&
literal|0x07
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DEBUG"
argument_list|,
name|SyslogSeverity
operator|.
name|values
argument_list|()
index|[
literal|7
operator|&
literal|0x07
index|]
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

