begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grok
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grok
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GrokUnmarshalTest
specifier|public
class|class
name|GrokUnmarshalTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|bindToRegistry
argument_list|(
literal|"myCustomPatternBean"
argument_list|,
operator|new
name|GrokPattern
argument_list|(
literal|"FOOBAR"
argument_list|,
literal|"foo|bar"
argument_list|)
argument_list|)
expr_stmt|;
name|bindToRegistry
argument_list|(
literal|"myAnotherCustomPatternBean"
argument_list|,
operator|new
name|GrokPattern
argument_list|(
literal|"FOOBAR_WITH_PREFIX_AND_SUFFIX"
argument_list|,
literal|"-- %{FOOBAR}+ --"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:ip"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|grok
argument_list|(
literal|"%{IP:ip}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:ip"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:fooBar"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|grok
argument_list|(
literal|"%{FOOBAR_WITH_PREFIX_AND_SUFFIX:fooBar}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:fooBar"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testSingleIp ()
specifier|public
name|void
name|testSingleIp
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:ip"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:ip"
argument_list|,
literal|"178.21.82.201"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.201"
argument_list|,
name|result
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleIpSingleLine ()
specifier|public
name|void
name|testMultipleIpSingleLine
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:ip"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:ip"
argument_list|,
literal|"178.21.82.201 178.21.82.202 178.21.82.203 178.21.82.204"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.201"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.202"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.203"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.204"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleIpMultipleLineMixedLineEndings ()
specifier|public
name|void
name|testMultipleIpMultipleLineMixedLineEndings
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:ip"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:ip"
argument_list|,
literal|"178.21.82.201 178.21.82.202\n178.21.82.203\r\n178.21.82.204"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.201"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.202"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.203"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"178.21.82.204"
argument_list|,
name|get
argument_list|(
name|result
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|"ip"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomPattern ()
specifier|public
name|void
name|testCustomPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:fooBar"
argument_list|)
decl_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:fooBar"
argument_list|,
literal|"bar foobar bar -- barbarfoobarfoobar -- barbar"
argument_list|)
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"-- barbarfoobarfoobar --"
argument_list|,
name|result
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|"fooBar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|get (Exchange exchange, int listIndex, String mapKey)
specifier|private
name|Object
name|get
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|int
name|listIndex
parameter_list|,
name|String
name|mapKey
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Body should not be null"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|list
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|>
name|listIndex
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|listIndex
argument_list|)
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
name|listIndex
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|mapKey
argument_list|)
return|;
block|}
DECL|method|get (MockEndpoint mockEndpoint, int exchangeIndex, int listIndex, String mapKey)
specifier|private
name|Object
name|get
parameter_list|(
name|MockEndpoint
name|mockEndpoint
parameter_list|,
name|int
name|exchangeIndex
parameter_list|,
name|int
name|listIndex
parameter_list|,
name|String
name|mapKey
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|exchangeIndex
argument_list|)
expr_stmt|;
return|return
name|get
argument_list|(
name|mockEndpoint
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
name|exchangeIndex
argument_list|)
argument_list|,
name|listIndex
argument_list|,
name|mapKey
argument_list|)
return|;
block|}
block|}
end_class

end_unit

