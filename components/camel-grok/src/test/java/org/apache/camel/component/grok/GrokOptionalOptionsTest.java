begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grok
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grok
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|krakens
operator|.
name|grok
operator|.
name|api
operator|.
name|exception
operator|.
name|GrokException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|GrokOptionalOptionsTest
specifier|public
class|class
name|GrokOptionalOptionsTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|DataFormat
name|grokFlattenedTrue
init|=
operator|new
name|GrokDataFormat
argument_list|(
literal|"%{INT:i} %{INT:i}"
argument_list|)
operator|.
name|setFlattened
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DataFormat
name|grokFlattenedFalse
init|=
operator|new
name|GrokDataFormat
argument_list|(
literal|"%{INT:i} %{INT:i}"
argument_list|)
operator|.
name|setFlattened
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DataFormat
name|grokNamedOnlyTrue
init|=
operator|new
name|GrokDataFormat
argument_list|(
literal|"%{URI:website}"
argument_list|)
operator|.
name|setNamedOnly
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DataFormat
name|grokNamedOnlyFalse
init|=
operator|new
name|GrokDataFormat
argument_list|(
literal|"%{URI:website}"
argument_list|)
operator|.
name|setNamedOnly
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DataFormat
name|grokAllowMultipleMatchesPerLineTrue
init|=
operator|new
name|GrokDataFormat
argument_list|(
literal|"%{INT:i}"
argument_list|)
operator|.
name|setAllowMultipleMatchesPerLine
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DataFormat
name|grokAllowMultipleMatchesPerLineFalse
init|=
operator|new
name|GrokDataFormat
argument_list|(
literal|"%{INT:i}"
argument_list|)
operator|.
name|setAllowMultipleMatchesPerLine
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:flattenedTrue"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|grokFlattenedTrue
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:flattenedFalse"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|grokFlattenedFalse
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:namedOnlyTrue"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|grokNamedOnlyTrue
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:namedOnlyFalse"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|grokNamedOnlyFalse
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:allowMultipleMatchesPerLineTrue"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|grokAllowMultipleMatchesPerLineTrue
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:allowMultipleMatchesPerLineFalse"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|grokAllowMultipleMatchesPerLineFalse
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testFlattened ()
specifier|public
name|void
name|testFlattened
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|flattenedFalse
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:flattenedFalse"
argument_list|,
literal|"123 456"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|flattenedFalse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedFalse
operator|.
name|containsKey
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|flattenedFalse
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"123"
argument_list|,
operator|(
operator|(
name|List
operator|)
name|flattenedFalse
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"456"
argument_list|,
operator|(
operator|(
name|List
operator|)
name|flattenedFalse
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:flattenedTrue"
argument_list|,
literal|"1 2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should throw GrokException"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|GrokException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testNamedOnly ()
specifier|public
name|void
name|testNamedOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|namedOnlyTrue
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:namedOnlyTrue"
argument_list|,
literal|"https://github.com/apache/camel"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|namedOnlyTrue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"https://github.com/apache/camel"
argument_list|,
name|namedOnlyTrue
operator|.
name|get
argument_list|(
literal|"website"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|namedOnlyTrue
operator|.
name|containsKey
argument_list|(
literal|"URIPROTO"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|namedOnlyTrue
operator|.
name|containsKey
argument_list|(
literal|"URIHOST"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|namedOnlyTrue
operator|.
name|containsKey
argument_list|(
literal|"URIPATHPARAM"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|namedOnlyFalse
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:namedOnlyFalse"
argument_list|,
literal|"https://github.com/apache/camel"
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|namedOnlyFalse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"https://github.com/apache/camel"
argument_list|,
name|namedOnlyFalse
operator|.
name|get
argument_list|(
literal|"website"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"https"
argument_list|,
name|namedOnlyFalse
operator|.
name|get
argument_list|(
literal|"URIPROTO"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"github.com"
argument_list|,
name|namedOnlyFalse
operator|.
name|get
argument_list|(
literal|"URIHOST"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/apache/camel"
argument_list|,
name|namedOnlyFalse
operator|.
name|get
argument_list|(
literal|"URIPATHPARAM"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAllowMultipleMatchesPerLine ()
specifier|public
name|void
name|testAllowMultipleMatchesPerLine
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|allowMultipleMatchesPerLineTrue
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:allowMultipleMatchesPerLineTrue"
argument_list|,
literal|"1 2 \n 3"
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allowMultipleMatchesPerLineTrue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allowMultipleMatchesPerLineTrue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|allowMultipleMatchesPerLineTrue
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|allowMultipleMatchesPerLineTrue
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|allowMultipleMatchesPerLineTrue
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|allowMultipleMatchesPerLineFalse
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:allowMultipleMatchesPerLineFalse"
argument_list|,
literal|"1 2 \n 3"
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allowMultipleMatchesPerLineFalse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allowMultipleMatchesPerLineFalse
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|allowMultipleMatchesPerLineFalse
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|allowMultipleMatchesPerLineFalse
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

