begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grok
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grok
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|GrokPatternsTest
specifier|public
class|class
name|GrokPatternsTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
DECL|field|input
specifier|private
name|String
name|input
decl_stmt|;
DECL|field|expectedOutputTest
specifier|private
name|Consumer
argument_list|<
name|Map
argument_list|>
name|expectedOutputTest
decl_stmt|;
DECL|method|GrokPatternsTest (String pattern, String input, Consumer<Map> expectedOutputTest)
specifier|public
name|GrokPatternsTest
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|input
parameter_list|,
name|Consumer
argument_list|<
name|Map
argument_list|>
name|expectedOutputTest
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|input
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|expectedOutputTest
operator|=
name|expectedOutputTest
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: (\"{0}\",\"{1}\") matches {2}"
argument_list|)
DECL|method|data ()
specifier|public
specifier|static
name|Object
index|[]
index|[]
name|data
parameter_list|()
block|{
name|String
name|randomUuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"%{QS:qs}"
block|,
literal|"this is some \"quoted string\"."
block|,
name|test
argument_list|(
literal|"qs"
argument_list|,
literal|"quoted string"
argument_list|)
block|}
block|,
block|{
literal|"%{UUID:uuid}"
block|,
literal|"some "
operator|+
name|randomUuid
block|,
name|test
argument_list|(
literal|"uuid"
argument_list|,
name|randomUuid
argument_list|)
block|}
block|,
block|{
literal|"%{MAC:mac}"
block|,
literal|"some:invalid:prefix:of:eth0:02:00:4c:4f:4f:50"
block|,
name|test
argument_list|(
literal|"mac"
argument_list|,
literal|"02:00:4c:4f:4f:50"
argument_list|)
block|}
block|,
block|{
literal|"%{PATH:path}"
block|,
literal|"C:\\path\\file"
block|,
name|test
argument_list|(
literal|"path"
argument_list|,
literal|"C:\\path\\file"
argument_list|)
block|}
block|,
block|{
literal|"%{PATH:path}"
block|,
literal|"C:\\path\\file.txt"
block|,
name|test
argument_list|(
literal|"path"
argument_list|,
literal|"C:\\path\\file.txt"
argument_list|)
block|}
block|,
block|{
literal|"%{PATH:path}"
block|,
literal|"\\\\server\\share\\path\\file"
block|,
name|test
argument_list|(
literal|"path"
argument_list|,
literal|"\\\\server\\share\\path\\file"
argument_list|)
block|}
block|,
block|{
literal|"%{PATH:path}"
block|,
literal|"/root/.hidden_file"
block|,
name|test
argument_list|(
literal|"path"
argument_list|,
literal|"/root/.hidden_file"
argument_list|)
block|}
block|,
block|{
literal|"%{PATH:path}"
block|,
literal|"/home/user/../../mnt"
block|,
name|test
argument_list|(
literal|"path"
argument_list|,
literal|"/home/user/../../mnt"
argument_list|)
block|}
block|,
block|{
literal|"%{PATH:path}"
block|,
literal|"/root"
block|,
name|test
argument_list|(
literal|"path"
argument_list|,
literal|"/root"
argument_list|)
block|}
block|,
block|{
literal|"%{URI:camelSite}"
block|,
literal|"the site is at http://camel.apache.org/"
block|,
name|test
argument_list|(
literal|"camelSite"
argument_list|,
literal|"http://camel.apache.org/"
argument_list|)
block|}
block|,
block|{
literal|"%{URI:camelSite}"
block|,
literal|"the dataformat docs is at http://camel.apache.org/data-format.html"
block|,
name|test
argument_list|(
literal|"camelSite"
argument_list|,
literal|"http://camel.apache.org/data-format.html"
argument_list|)
block|}
block|,
block|{
literal|"%{NUMBER:num}"
block|,
literal|"number is 123."
block|,
name|test
argument_list|(
literal|"num"
argument_list|,
literal|"123"
argument_list|)
block|}
block|,
block|{
literal|"%{NUMBER:num:integer}"
block|,
literal|"number is 123."
block|,
name|test
argument_list|(
literal|"num"
argument_list|,
literal|123
argument_list|)
block|}
block|,
block|{
literal|"%{IP:ip}"
block|,
literal|"my ip is 192.168.0.1"
block|,
name|test
argument_list|(
literal|"ip"
argument_list|,
literal|"192.168.0.1"
argument_list|)
block|}
block|,
block|{
literal|"%{TIMESTAMP_ISO8601:timestamp}"
block|,
literal|"This test was created at 2019-05-26T10:54:15Z test plain"
block|,
name|test
argument_list|(
literal|"timestamp"
argument_list|,
literal|"2019-05-26T10:54:15Z"
argument_list|)
block|}
block|,
block|{
literal|"%{TIMESTAMP_ISO8601:timestamp:date}"
block|,
literal|"This test was created at 2019-05-26T10:54:15Z test convert"
block|,
name|test
argument_list|(
literal|"timestamp"
argument_list|,
name|Instant
operator|.
name|ofEpochSecond
argument_list|(
literal|1558868055
argument_list|)
argument_list|)
block|}
block|,         }
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:input"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|grok
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testPattern ()
specifier|public
name|void
name|testPattern
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedOutputTest
operator|.
name|accept
argument_list|(
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:input"
argument_list|,
name|input
argument_list|,
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|test (String key, Object value)
specifier|private
specifier|static
name|Consumer
argument_list|<
name|Map
argument_list|>
name|test
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|Consumer
argument_list|<
name|Map
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|Map
name|m
parameter_list|)
block|{
name|boolean
name|result
init|=
name|m
operator|!=
literal|null
operator|&&
name|m
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected: map.get(%s) == %s. Given map %s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|m
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"map[%s] = %s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

