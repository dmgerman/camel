begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.grok
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|grok
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|io
operator|.
name|krakens
operator|.
name|grok
operator|.
name|api
operator|.
name|Grok
import|;
end_import

begin_import
import|import
name|io
operator|.
name|krakens
operator|.
name|grok
operator|.
name|api
operator|.
name|GrokCompiler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|krakens
operator|.
name|grok
operator|.
name|api
operator|.
name|Match
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormatName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Dataformat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
annotation|@
name|Dataformat
argument_list|(
literal|"grok"
argument_list|)
DECL|class|GrokDataFormat
specifier|public
class|class
name|GrokDataFormat
extends|extends
name|ServiceSupport
implements|implements
name|DataFormat
implements|,
name|DataFormatName
implements|,
name|CamelContextAware
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|grok
specifier|private
name|Grok
name|grok
decl_stmt|;
DECL|field|allowMultipleMatchesPerLine
specifier|private
name|boolean
name|allowMultipleMatchesPerLine
init|=
literal|true
decl_stmt|;
DECL|field|customPatterns
specifier|private
name|Set
argument_list|<
name|GrokPattern
argument_list|>
name|customPatterns
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|flattened
specifier|private
name|boolean
name|flattened
decl_stmt|;
DECL|field|namedOnly
specifier|private
name|boolean
name|namedOnly
decl_stmt|;
DECL|field|pattern
specifier|private
name|String
name|pattern
decl_stmt|;
DECL|method|GrokDataFormat (String pattern)
specifier|public
name|GrokDataFormat
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
DECL|method|GrokDataFormat ()
specifier|public
name|GrokDataFormat
parameter_list|()
block|{     }
DECL|method|registerPatternDefinition (GrokPattern pattern)
specifier|public
name|GrokDataFormat
name|registerPatternDefinition
parameter_list|(
name|GrokPattern
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|customPatterns
operator|.
name|add
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|refreshGrok
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @param name : Pattern Name      * @param pattern : Regular expression Or Grok pattern      */
DECL|method|registerPatternDefinition (String name, String pattern)
specifier|public
name|GrokDataFormat
name|registerPatternDefinition
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
return|return
name|registerPatternDefinition
argument_list|(
operator|new
name|GrokPattern
argument_list|(
name|name
argument_list|,
name|pattern
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setPattern (String pattern)
specifier|public
name|GrokDataFormat
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the flattened mode flag      * @param flattened If true, conversion throws exception for conficting named matches.      */
DECL|method|setFlattened (boolean flattened)
specifier|public
name|GrokDataFormat
name|setFlattened
parameter_list|(
name|boolean
name|flattened
parameter_list|)
block|{
name|this
operator|.
name|flattened
operator|=
name|flattened
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setAllowMultipleMatchesPerLine (boolean allowMultipleMatchesPerLine)
specifier|public
name|GrokDataFormat
name|setAllowMultipleMatchesPerLine
parameter_list|(
name|boolean
name|allowMultipleMatchesPerLine
parameter_list|)
block|{
name|this
operator|.
name|allowMultipleMatchesPerLine
operator|=
name|allowMultipleMatchesPerLine
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Whether to capture named expressions only or not (i.e. %{IP:ip} but not ${IP})      */
DECL|method|setNamedOnly (boolean namedOnly)
specifier|public
name|GrokDataFormat
name|setNamedOnly
parameter_list|(
name|boolean
name|namedOnly
parameter_list|)
block|{
name|this
operator|.
name|namedOnly
operator|=
name|namedOnly
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|refreshGrok ()
specifier|private
name|void
name|refreshGrok
parameter_list|()
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|pattern
argument_list|,
literal|"pattern"
argument_list|)
expr_stmt|;
name|GrokCompiler
name|grokCompiler
init|=
name|GrokCompiler
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|grokCompiler
operator|.
name|registerDefaultPatterns
argument_list|()
expr_stmt|;
for|for
control|(
name|GrokPattern
name|pattern
range|:
name|customPatterns
control|)
block|{
name|grokCompiler
operator|.
name|register
argument_list|(
name|pattern
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|grok
operator|=
name|grokCompiler
operator|.
name|compile
argument_list|(
name|pattern
argument_list|,
name|namedOnly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"grok"
return|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|marshal (Exchange exchange, Object graph, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|graph
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"GrokDataFormat does not support marshalling. Use unmarshal instead."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|unmarshal (Exchange exchange, InputStream stream)
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|InputStreamReader
name|in
init|=
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
name|ExchangeHelper
operator|.
name|getCharsetName
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|Stream
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|BufferedReader
argument_list|(
name|in
argument_list|)
operator|.
name|lines
argument_list|()
init|)
block|{
name|lines
operator|.
name|forEachOrdered
argument_list|(
name|line
lambda|->
name|processLine
argument_list|(
name|line
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
DECL|method|processLine (String line, List<Map<String, Object>> resultList)
specifier|private
name|void
name|processLine
parameter_list|(
name|String
name|line
parameter_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|resultList
parameter_list|)
block|{
name|CharBuffer
name|charBuffer
init|=
name|CharBuffer
operator|.
name|wrap
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|charBuffer
operator|.
name|length
argument_list|()
condition|)
block|{
comment|//Allow multiple matches per line
name|Match
name|gm
init|=
name|grok
operator|.
name|match
argument_list|(
name|charBuffer
operator|.
name|subSequence
argument_list|(
name|start
argument_list|,
name|charBuffer
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|gm
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|flattened
condition|)
block|{
name|resultList
operator|.
name|add
argument_list|(
name|gm
operator|.
name|captureFlattened
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultList
operator|.
name|add
argument_list|(
name|gm
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|+=
name|gm
operator|.
name|getEnd
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
if|if
condition|(
operator|!
name|allowMultipleMatchesPerLine
condition|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|customPatterns
operator|.
name|addAll
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|GrokPattern
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|refreshGrok
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|//noop
block|}
block|}
end_class

end_unit

