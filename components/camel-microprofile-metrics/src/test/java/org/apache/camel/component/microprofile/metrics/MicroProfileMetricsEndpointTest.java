begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsInstanceOf
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsEndpointTest
specifier|public
class|class
name|MicroProfileMetricsEndpointTest
block|{
annotation|@
name|Test
DECL|method|testCreateCounterProducer ()
specifier|public
name|void
name|testCreateCounterProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|MetricType
operator|.
name|COUNTER
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|MicroProfileMetricsCounterProducer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateGaugeProducer ()
specifier|public
name|void
name|testCreateGaugeProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|MetricType
operator|.
name|GAUGE
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|MicroProfileMetricsGaugeProducer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|=
name|createEndpoint
argument_list|(
name|MetricType
operator|.
name|CONCURRENT_GAUGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|endpoint
operator|.
name|createProducer
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|MicroProfileMetricsGaugeProducer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateHistogramProducer ()
specifier|public
name|void
name|testCreateHistogramProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|MetricType
operator|.
name|HISTOGRAM
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|MicroProfileMetricsHistogramProducer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateMeteredProducer ()
specifier|public
name|void
name|testCreateMeteredProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|MetricType
operator|.
name|METERED
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|MicroProfileMetricsMeteredProducer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateTimerProducer ()
specifier|public
name|void
name|testCreateTimerProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|MetricType
operator|.
name|TIMER
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|MicroProfileMetricsTimerProducer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testInvalidMetricType ()
specifier|public
name|void
name|testInvalidMetricType
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsEndpoint
name|endpoint
init|=
name|createEndpoint
argument_list|(
name|MetricType
operator|.
name|INVALID
argument_list|)
decl_stmt|;
name|Producer
name|producer
init|=
name|endpoint
operator|.
name|createProducer
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|producer
argument_list|,
name|is
argument_list|(
name|instanceOf
argument_list|(
name|MicroProfileMetricsCounterProducer
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createEndpoint (MetricType metricType)
specifier|private
name|MicroProfileMetricsEndpoint
name|createEndpoint
parameter_list|(
name|MetricType
name|metricType
parameter_list|)
block|{
return|return
operator|new
name|MicroProfileMetricsEndpoint
argument_list|(
literal|"microprofile-metrics:foo:bar"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|metricType
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

