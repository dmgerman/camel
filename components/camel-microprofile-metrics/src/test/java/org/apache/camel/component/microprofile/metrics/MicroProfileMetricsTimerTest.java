begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|HEADER_TIMER_ACTION
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsTimerTest
specifier|public
class|class
name|MicroProfileMetricsTimerTest
extends|extends
name|MicroProfileMetricsTestSupport
block|{
DECL|field|DELAY
specifier|private
specifier|static
specifier|final
name|long
name|DELAY
init|=
literal|100L
decl_stmt|;
annotation|@
name|Test
DECL|method|testTimerMetric ()
specifier|public
name|void
name|testTimerMetric
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:timer"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Timer
name|timer
init|=
name|getTimer
argument_list|(
literal|"test-timer"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|timer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|timer
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMax
argument_list|()
operator|>
name|DELAY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimerMetricActionFromHeader ()
specifier|public
name|void
name|testTimerMetricActionFromHeader
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:timer"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Timer
name|timer
init|=
name|getTimer
argument_list|(
literal|"test-timer"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|timer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|timer
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMax
argument_list|()
operator|>
name|DELAY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimerMetricActionFromHeaderOverride ()
specifier|public
name|void
name|testTimerMetricActionFromHeaderOverride
parameter_list|()
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:timer"
argument_list|,
literal|null
argument_list|,
name|HEADER_TIMER_ACTION
argument_list|,
literal|"stop"
argument_list|)
expr_stmt|;
name|Timer
name|timer
init|=
name|getTimer
argument_list|(
literal|"test-timer"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|timer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:timer"
argument_list|)
operator|.
name|to
argument_list|(
literal|"microprofile-metrics:timer:test-timer?action=start"
argument_list|)
operator|.
name|delayer
argument_list|(
name|DELAY
argument_list|)
operator|.
name|to
argument_list|(
literal|"microprofile-metrics:timer:test-timer?action=stop"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:timerFromHeader"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|constant
argument_list|(
name|TimerAction
operator|.
name|START
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"microprofile-metrics:timer:test-timer-header"
argument_list|)
operator|.
name|delayer
argument_list|(
name|DELAY
argument_list|)
operator|.
name|setHeader
argument_list|(
name|HEADER_TIMER_ACTION
argument_list|,
name|constant
argument_list|(
name|TimerAction
operator|.
name|STOP
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"microprofile-metrics:timer:test-timer-header"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

