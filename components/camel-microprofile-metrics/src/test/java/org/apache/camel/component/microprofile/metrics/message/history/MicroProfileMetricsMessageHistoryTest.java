begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics.message.history
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|message
operator|.
name|history
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|smallrye
operator|.
name|metrics
operator|.
name|TagsUtils
import|;
end_import

begin_import
import|import
name|io
operator|.
name|smallrye
operator|.
name|metrics
operator|.
name|exporters
operator|.
name|JsonExporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|DEFAULT_CAMEL_MESSAGE_HISTORY_METRIC_NAME
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsMessageHistoryTest
specifier|public
class|class
name|MicroProfileMetricsMessageHistoryTest
extends|extends
name|MicroProfileMetricsTestSupport
block|{
annotation|@
name|Test
DECL|method|testMetricsHistory ()
specifier|public
name|void
name|testMetricsHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:foo"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:bar"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:baz"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
literal|"Hello "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:bar"
argument_list|,
literal|"Hello "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|SortedMap
argument_list|<
name|MetricID
argument_list|,
name|Timer
argument_list|>
name|timers
init|=
name|metricRegistry
operator|.
name|getTimers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|timers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|contextTag
init|=
literal|"camelContext="
operator|+
name|context
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Tag
index|[]
name|fooTags
init|=
name|getTags
argument_list|(
operator|new
name|String
index|[]
block|{
name|contextTag
block|,
literal|"nodeId=foo"
block|,
literal|"routeId=routeA"
block|,
literal|"serviceName=MicroProfileMetricsMessageHistory"
block|}
argument_list|)
decl_stmt|;
name|Timer
name|fooTimer
init|=
name|MicroProfileMetricsHelper
operator|.
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|DEFAULT_CAMEL_MESSAGE_HISTORY_METRIC_NAME
argument_list|,
name|Timer
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|fooTags
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|/
literal|2
argument_list|,
name|fooTimer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
index|[]
name|barTags
init|=
name|getTags
argument_list|(
operator|new
name|String
index|[]
block|{
name|contextTag
block|,
literal|"nodeId=bar"
block|,
literal|"routeId=routeB"
block|,
literal|"serviceName=MicroProfileMetricsMessageHistory"
block|}
argument_list|)
decl_stmt|;
name|Timer
name|barTimer
init|=
name|MicroProfileMetricsHelper
operator|.
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|DEFAULT_CAMEL_MESSAGE_HISTORY_METRIC_NAME
argument_list|,
name|Timer
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|barTags
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|/
literal|2
argument_list|,
name|barTimer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
index|[]
name|bazTags
init|=
name|getTags
argument_list|(
operator|new
name|String
index|[]
block|{
name|contextTag
block|,
literal|"nodeId=baz"
block|,
literal|"routeId=routeB"
block|,
literal|"serviceName=MicroProfileMetricsMessageHistory"
block|}
argument_list|)
decl_stmt|;
name|Timer
name|bazTimer
init|=
name|MicroProfileMetricsHelper
operator|.
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|DEFAULT_CAMEL_MESSAGE_HISTORY_METRIC_NAME
argument_list|,
name|Timer
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|bazTags
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|/
literal|2
argument_list|,
name|bazTimer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|MicroProfileMetricsMessageHistoryService
name|service
init|=
name|context
operator|.
name|hasService
argument_list|(
name|MicroProfileMetricsMessageHistoryService
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|JsonExporter
name|exporter
init|=
operator|new
name|JsonExporter
argument_list|()
decl_stmt|;
name|String
name|json
init|=
name|exporter
operator|.
name|exportAllScopes
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"nodeId=foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"nodeId=bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|contains
argument_list|(
literal|"nodeId=baz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"routeA"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:foo"
argument_list|)
operator|.
name|id
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bar"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"routeB"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:bar"
argument_list|)
operator|.
name|id
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:baz"
argument_list|)
operator|.
name|id
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsMessageHistoryFactory
name|factory
init|=
operator|new
name|MicroProfileMetricsMessageHistoryFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setMetricRegistry
argument_list|(
name|metricRegistry
argument_list|)
expr_stmt|;
name|CamelContext
name|context
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setMessageHistoryFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|getTags (String[] tagStrings)
specifier|private
name|Tag
index|[]
name|getTags
parameter_list|(
name|String
index|[]
name|tagStrings
parameter_list|)
block|{
return|return
name|TagsUtils
operator|.
name|parseTagsAsArray
argument_list|(
name|tagStrings
argument_list|)
return|;
block|}
block|}
end_class

end_unit

