begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|smallrye
operator|.
name|metrics
operator|.
name|MetricRegistries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|BindToRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|ConcurrentGauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsHelper
operator|.
name|findMetric
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsTestSupport
specifier|public
class|class
name|MicroProfileMetricsTestSupport
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|BindToRegistry
argument_list|(
name|MicroProfileMetricsConstants
operator|.
name|METRIC_REGISTRY_NAME
argument_list|)
DECL|field|metricRegistry
specifier|protected
name|MetricRegistry
name|metricRegistry
decl_stmt|;
DECL|field|registries
specifier|private
name|MetricRegistries
name|registries
init|=
operator|new
name|MetricRegistries
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|metricRegistry
operator|=
name|registries
operator|.
name|getApplicationRegistry
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|registries
operator|.
name|cleanUp
argument_list|()
expr_stmt|;
block|}
DECL|method|getCounter (String metricName)
specifier|protected
name|Counter
name|getCounter
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
return|return
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metricName
argument_list|,
name|Counter
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getConcurrentGauge (String metricName)
specifier|protected
name|ConcurrentGauge
name|getConcurrentGauge
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
return|return
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metricName
argument_list|,
name|ConcurrentGauge
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getGauge (String metricName)
specifier|protected
name|MicroProfileMetricsCamelGauge
name|getGauge
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
return|return
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metricName
argument_list|,
name|MicroProfileMetricsCamelGauge
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getHistogram (String metricName)
specifier|protected
name|Histogram
name|getHistogram
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
return|return
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metricName
argument_list|,
name|Histogram
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getMeter (String metricName)
specifier|protected
name|Meter
name|getMeter
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
return|return
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metricName
argument_list|,
name|Meter
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getTimer (String metricName)
specifier|protected
name|Timer
name|getTimer
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
return|return
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metricName
argument_list|,
name|Timer
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|getMetricMetadata (String metricName)
specifier|protected
name|Metadata
name|getMetricMetadata
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Metadata
argument_list|>
name|metadataMap
init|=
name|metricRegistry
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Metadata
argument_list|>
name|entry
range|:
name|metadataMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Metadata
name|metadata
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|metricName
argument_list|)
condition|)
block|{
return|return
name|metadata
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getMetricTags (String metricName)
specifier|protected
name|List
argument_list|<
name|Tag
argument_list|>
name|getMetricTags
parameter_list|(
name|String
name|metricName
parameter_list|)
block|{
name|Map
argument_list|<
name|MetricID
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricRegistry
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MetricID
argument_list|,
name|Metric
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|metricName
argument_list|)
condition|)
block|{
return|return
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTagsAsList
argument_list|()
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

