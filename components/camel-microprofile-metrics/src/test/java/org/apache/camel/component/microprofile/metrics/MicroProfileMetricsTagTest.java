begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|HEADER_METRIC_TAGS
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsTagTest
specifier|public
class|class
name|MicroProfileMetricsTagTest
extends|extends
name|MicroProfileMetricsTestSupport
block|{
annotation|@
name|Test
DECL|method|testMetricTags ()
specifier|public
name|void
name|testMetricTags
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:tags"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|getMetricTags
argument_list|(
literal|"test-counter"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagCamelContext
init|=
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"camelContext"
argument_list|,
name|tagCamelContext
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|,
name|tagCamelContext
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagCheese
init|=
name|tags
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cheese"
argument_list|,
name|tagCheese
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wine"
argument_list|,
name|tagCheese
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagFoo
init|=
name|tags
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|tagFoo
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tagFoo
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricTagsFromHeader ()
specifier|public
name|void
name|testMetricTagsFromHeader
parameter_list|()
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:tagsFromHeader"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|getMetricTags
argument_list|(
literal|"test-counter-header"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagA
init|=
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tagA
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tagA
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagC
init|=
name|tags
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tagC
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|tagC
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagCamelContext
init|=
name|tags
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"camelContext"
argument_list|,
name|tagCamelContext
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|,
name|tagCamelContext
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetricTagsFromUriMergeWithHeaderValue ()
specifier|public
name|void
name|testMetricTagsFromUriMergeWithHeaderValue
parameter_list|()
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:tags"
argument_list|,
literal|null
argument_list|,
name|HEADER_METRIC_TAGS
argument_list|,
literal|"a=b,c=d"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|getMetricTags
argument_list|(
literal|"test-counter"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagA
init|=
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tagA
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tagA
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagC
init|=
name|tags
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tagC
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|tagC
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagCamelContext
init|=
name|tags
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"camelContext"
argument_list|,
name|tagCamelContext
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getName
argument_list|()
argument_list|,
name|tagCamelContext
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagCheese
init|=
name|tags
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"cheese"
argument_list|,
name|tagCheese
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wine"
argument_list|,
name|tagCheese
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tagFoo
init|=
name|tags
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|tagFoo
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|tagFoo
operator|.
name|getTagValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:tags"
argument_list|)
operator|.
name|to
argument_list|(
literal|"microprofile-metrics:counter:test-counter?tags=foo=bar,cheese=wine"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:tagsFromHeader"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|HEADER_METRIC_TAGS
argument_list|,
name|constant
argument_list|(
literal|"a=b,c=d"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"microprofile-metrics:counter:test-counter-header"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

