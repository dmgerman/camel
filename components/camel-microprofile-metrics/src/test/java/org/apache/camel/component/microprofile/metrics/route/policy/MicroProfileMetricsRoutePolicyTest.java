begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics.route.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|route
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|io
operator|.
name|smallrye
operator|.
name|metrics
operator|.
name|TagsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|gauge
operator|.
name|AtomicIntegerGauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|CAMEL_CONTEXT_TAG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|DEFAULT_CAMEL_ROUTE_POLICY_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|DEFAULT_CAMEL_ROUTE_POLICY_PROCESSING_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|EXCHANGES_COMPLETED_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|EXCHANGES_EXTERNAL_REDELIVERIES_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|EXCHANGES_FAILED_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|EXCHANGES_FAILURES_HANDLED_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|EXCHANGES_INFLIGHT_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|EXCHANGES_TOTAL_METRIC_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|ROUTE_ID_TAG
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsRoutePolicyTest
specifier|public
class|class
name|MicroProfileMetricsRoutePolicyTest
extends|extends
name|MicroProfileMetricsTestSupport
block|{
DECL|field|DELAY_FOO
specifier|private
specifier|static
specifier|final
name|long
name|DELAY_FOO
init|=
literal|20
decl_stmt|;
DECL|field|DELAY_BAR
specifier|private
specifier|static
specifier|final
name|long
name|DELAY_BAR
init|=
literal|50
decl_stmt|;
annotation|@
name|Test
DECL|method|testMetricsRoutePolicy ()
specifier|public
name|void
name|testMetricsRoutePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|10
decl_stmt|;
name|MockEndpoint
name|mockEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mockEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|7
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:foo"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:bar"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Timer
name|fooTimer
init|=
name|getTimer
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_PROCESSING_METRIC_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|/
literal|2
argument_list|,
name|fooTimer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Snapshot
name|fooSnapshot
init|=
name|fooTimer
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|fooSnapshot
operator|.
name|getMean
argument_list|()
operator|>
name|DELAY_FOO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fooSnapshot
operator|.
name|getMax
argument_list|()
operator|>
name|DELAY_FOO
argument_list|)
expr_stmt|;
name|String
name|contextTag
init|=
literal|"camelContext="
operator|+
name|context
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
index|[]
name|tagStrings
init|=
operator|new
name|String
index|[]
block|{
name|contextTag
block|,
literal|"routeId=foo"
block|}
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
name|TagsUtils
operator|.
name|parseTagsAsArray
argument_list|(
name|tagStrings
argument_list|)
decl_stmt|;
name|Timer
name|barTimer
init|=
name|MicroProfileMetricsHelper
operator|.
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|DEFAULT_CAMEL_ROUTE_POLICY_PROCESSING_METRIC_NAME
argument_list|,
name|Timer
operator|.
name|class
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tags
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|count
operator|/
literal|2
argument_list|,
name|barTimer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Snapshot
name|barSnapshot
init|=
name|fooTimer
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|barSnapshot
operator|.
name|getMean
argument_list|()
operator|>
name|DELAY_FOO
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|barSnapshot
operator|.
name|getMax
argument_list|()
operator|>
name|DELAY_FOO
argument_list|)
expr_stmt|;
name|assertRouteExchangeMetrics
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertRouteExchangeMetrics
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|removeRouteTest ()
specifier|public
name|void
name|removeRouteTest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|countRouteMetrics
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|countRouteMetrics
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|context
operator|.
name|removeRoute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countRouteMetrics
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|countRouteMetrics
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|countRouteMetrics (String routeId)
specifier|private
name|long
name|countRouteMetrics
parameter_list|(
name|String
name|routeId
parameter_list|)
block|{
return|return
name|metricRegistry
operator|.
name|getMetricIDs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|metricID
lambda|->
name|metricID
operator|.
name|getTags
argument_list|()
operator|.
name|containsValue
argument_list|(
name|routeId
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
return|;
block|}
DECL|method|assertRouteExchangeMetrics (String routeId, int expectedFailuresHandled)
specifier|private
name|void
name|assertRouteExchangeMetrics
parameter_list|(
name|String
name|routeId
parameter_list|,
name|int
name|expectedFailuresHandled
parameter_list|)
block|{
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[]
block|{
operator|new
name|Tag
argument_list|(
name|CAMEL_CONTEXT_TAG
argument_list|,
name|context
operator|.
name|getName
argument_list|()
argument_list|)
block|,
operator|new
name|Tag
argument_list|(
name|ROUTE_ID_TAG
argument_list|,
name|routeId
argument_list|)
block|}
decl_stmt|;
name|Counter
name|exchangesCompleted
init|=
name|getCounter
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METRIC_NAME
operator|+
name|EXCHANGES_COMPLETED_METRIC_NAME
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exchangesCompleted
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|exchangesFailed
init|=
name|getCounter
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METRIC_NAME
operator|+
name|EXCHANGES_FAILED_METRIC_NAME
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exchangesFailed
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|exchangesTotal
init|=
name|getCounter
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METRIC_NAME
operator|+
name|EXCHANGES_TOTAL_METRIC_NAME
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|exchangesTotal
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|AtomicIntegerGauge
name|exchangesInflight
init|=
name|getAtomicIntegerGauge
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METRIC_NAME
operator|+
name|EXCHANGES_INFLIGHT_METRIC_NAME
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exchangesInflight
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|externalRedeliveries
init|=
name|getCounter
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METRIC_NAME
operator|+
name|EXCHANGES_EXTERNAL_REDELIVERIES_METRIC_NAME
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|externalRedeliveries
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|failuresHandled
init|=
name|getCounter
argument_list|(
name|DEFAULT_CAMEL_ROUTE_POLICY_METRIC_NAME
operator|+
name|EXCHANGES_FAILURES_HANDLED_METRIC_NAME
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFailuresHandled
argument_list|,
name|failuresHandled
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|onException
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:foo"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
lambda|->
block|{
name|Integer
name|count
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid count"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|delay
argument_list|(
name|DELAY_FOO
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bar"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|process
argument_list|(
name|exchange
lambda|->
block|{
name|Integer
name|count
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|%
literal|5
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid count"
argument_list|)
throw|;
block|}
block|}
argument_list|)
operator|.
name|delay
argument_list|(
name|DELAY_BAR
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|MicroProfileMetricsRoutePolicyFactory
name|factory
init|=
operator|new
name|MicroProfileMetricsRoutePolicyFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setMetricRegistry
argument_list|(
name|metricRegistry
argument_list|)
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|super
operator|.
name|createCamelContext
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|addRoutePolicyFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
block|}
end_class

end_unit

