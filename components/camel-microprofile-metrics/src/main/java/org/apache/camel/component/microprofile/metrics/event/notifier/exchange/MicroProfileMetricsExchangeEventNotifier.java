begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics.event.notifier.exchange
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|event
operator|.
name|notifier
operator|.
name|exchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|event
operator|.
name|notifier
operator|.
name|AbstractMicroProfileMetricsEventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|ExchangeCompletedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|ExchangeCreatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|ExchangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|ExchangeSentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Timer
operator|.
name|Context
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsExchangeEventNotifier
specifier|public
class|class
name|MicroProfileMetricsExchangeEventNotifier
extends|extends
name|AbstractMicroProfileMetricsEventNotifier
argument_list|<
name|ExchangeEvent
argument_list|>
block|{
DECL|field|ignoreExchanges
specifier|private
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|ignoreExchanges
init|=
name|exchange
lambda|->
literal|false
decl_stmt|;
DECL|field|namingStrategy
specifier|private
name|MicroProfileMetricsExchangeEventNotifierNamingStrategy
name|namingStrategy
init|=
name|MicroProfileMetricsExchangeEventNotifierNamingStrategy
operator|.
name|DEFAULT
decl_stmt|;
DECL|method|MicroProfileMetricsExchangeEventNotifier ()
specifier|public
name|MicroProfileMetricsExchangeEventNotifier
parameter_list|()
block|{
name|super
argument_list|(
name|ExchangeEvent
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|getIgnoreExchanges ()
specifier|public
name|Predicate
argument_list|<
name|Exchange
argument_list|>
name|getIgnoreExchanges
parameter_list|()
block|{
return|return
name|ignoreExchanges
return|;
block|}
DECL|method|getNamingStrategy ()
specifier|public
name|MicroProfileMetricsExchangeEventNotifierNamingStrategy
name|getNamingStrategy
parameter_list|()
block|{
return|return
name|namingStrategy
return|;
block|}
DECL|method|setNamingStrategy (MicroProfileMetricsExchangeEventNotifierNamingStrategy namingStrategy)
specifier|public
name|void
name|setNamingStrategy
parameter_list|(
name|MicroProfileMetricsExchangeEventNotifierNamingStrategy
name|namingStrategy
parameter_list|)
block|{
name|this
operator|.
name|namingStrategy
operator|=
name|namingStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notify (CamelEvent event)
specifier|public
name|void
name|notify
parameter_list|(
name|CamelEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
operator|(
name|getIgnoreExchanges
argument_list|()
operator|.
name|test
argument_list|(
operator|(
operator|(
name|ExchangeEvent
operator|)
name|event
operator|)
operator|.
name|getExchange
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|ExchangeSentEvent
condition|)
block|{
name|handleSentEvent
argument_list|(
operator|(
name|ExchangeSentEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeCreatedEvent
condition|)
block|{
name|handleCreatedEvent
argument_list|(
operator|(
name|ExchangeCreatedEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ExchangeCompletedEvent
operator|||
name|event
operator|instanceof
name|CamelEvent
operator|.
name|ExchangeFailedEvent
condition|)
block|{
name|handleDoneEvent
argument_list|(
operator|(
name|ExchangeEvent
operator|)
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|handleCreatedEvent (ExchangeCreatedEvent createdEvent)
specifier|protected
name|void
name|handleCreatedEvent
parameter_list|(
name|ExchangeCreatedEvent
name|createdEvent
parameter_list|)
block|{
name|String
name|name
init|=
name|namingStrategy
operator|.
name|getName
argument_list|(
name|createdEvent
operator|.
name|getExchange
argument_list|()
argument_list|,
name|createdEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|getFromEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
name|namingStrategy
operator|.
name|getTags
argument_list|(
name|createdEvent
argument_list|,
name|createdEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|getFromEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|Timer
name|timer
init|=
name|getMetricRegistry
argument_list|()
operator|.
name|timer
argument_list|(
name|name
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|createdEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"eventTimer:"
operator|+
name|name
argument_list|,
name|timer
argument_list|)
expr_stmt|;
name|createdEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"eventTimerContext:"
operator|+
name|name
argument_list|,
name|timer
operator|.
name|time
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleSentEvent (ExchangeSentEvent sentEvent)
specifier|protected
name|void
name|handleSentEvent
parameter_list|(
name|ExchangeSentEvent
name|sentEvent
parameter_list|)
block|{
name|String
name|name
init|=
name|namingStrategy
operator|.
name|getName
argument_list|(
name|sentEvent
operator|.
name|getExchange
argument_list|()
argument_list|,
name|sentEvent
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|Timer
name|timer
init|=
name|sentEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"eventTimer:"
operator|+
name|name
argument_list|,
name|Timer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|timer
operator|==
literal|null
condition|)
block|{
name|Tag
index|[]
name|tags
init|=
name|namingStrategy
operator|.
name|getTags
argument_list|(
name|sentEvent
argument_list|,
name|sentEvent
operator|.
name|getEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|timer
operator|=
name|getMetricRegistry
argument_list|()
operator|.
name|timer
argument_list|(
name|name
argument_list|,
name|tags
argument_list|)
expr_stmt|;
name|sentEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"eventTimer:"
operator|+
name|name
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
name|timer
operator|.
name|update
argument_list|(
name|sentEvent
operator|.
name|getTimeTaken
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|handleDoneEvent (ExchangeEvent doneEvent)
specifier|protected
name|void
name|handleDoneEvent
parameter_list|(
name|ExchangeEvent
name|doneEvent
parameter_list|)
block|{
name|String
name|name
init|=
name|namingStrategy
operator|.
name|getName
argument_list|(
name|doneEvent
operator|.
name|getExchange
argument_list|()
argument_list|,
name|doneEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|getFromEndpoint
argument_list|()
argument_list|)
decl_stmt|;
name|doneEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|removeProperty
argument_list|(
literal|"eventTimer:"
operator|+
name|name
argument_list|)
expr_stmt|;
name|Context
name|context
init|=
operator|(
name|Context
operator|)
name|doneEvent
operator|.
name|getExchange
argument_list|()
operator|.
name|removeProperty
argument_list|(
literal|"eventTimerContext:"
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

