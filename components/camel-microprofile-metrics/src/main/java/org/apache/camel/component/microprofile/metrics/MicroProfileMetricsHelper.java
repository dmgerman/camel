begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|METRIC_REGISTRY_NAME
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsHelper
specifier|public
specifier|final
class|class
name|MicroProfileMetricsHelper
block|{
DECL|field|DEFAULT_METRIC_TYPE
specifier|private
specifier|static
specifier|final
name|MetricType
name|DEFAULT_METRIC_TYPE
init|=
name|MetricType
operator|.
name|COUNTER
decl_stmt|;
DECL|method|MicroProfileMetricsHelper ()
specifier|private
name|MicroProfileMetricsHelper
parameter_list|()
block|{     }
DECL|method|getMetricsName (String remaining)
specifier|public
specifier|static
name|String
name|getMetricsName
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|String
name|name
init|=
name|StringHelper
operator|.
name|after
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
return|return
name|name
operator|==
literal|null
condition|?
name|remaining
else|:
name|name
return|;
block|}
DECL|method|getMetricsType (String remaining)
specifier|public
specifier|static
name|MetricType
name|getMetricsType
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|String
name|type
init|=
name|StringHelper
operator|.
name|before
argument_list|(
name|remaining
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
return|return
name|type
operator|==
literal|null
condition|?
name|DEFAULT_METRIC_TYPE
else|:
name|MetricType
operator|.
name|from
argument_list|(
name|type
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getMetricsTag (String rawTags)
specifier|public
specifier|static
name|List
argument_list|<
name|Tag
argument_list|>
name|getMetricsTag
parameter_list|(
name|String
name|rawTags
parameter_list|)
block|{
if|if
condition|(
name|rawTags
operator|!=
literal|null
operator|&&
operator|!
name|rawTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|tagStrings
init|=
name|rawTags
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|of
argument_list|(
name|tagStrings
argument_list|)
operator|.
name|map
argument_list|(
name|tag
lambda|->
name|parseTag
argument_list|(
name|tag
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
DECL|method|findMetric (MetricRegistry metricRegistry, String metricName, Class<T> metricType)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Metric
parameter_list|>
name|T
name|findMetric
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|,
name|String
name|metricName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|metricType
parameter_list|)
block|{
return|return
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metricName
argument_list|,
name|metricType
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|findMetric (MetricRegistry metricRegistry, String metricName, Class<T> metricType, List<Tag> tags)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Metric
parameter_list|>
name|T
name|findMetric
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|,
name|String
name|metricName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|metricType
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
name|Map
argument_list|<
name|MetricID
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricRegistry
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MetricID
argument_list|,
name|Metric
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|metricTypeMatches
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|metricType
argument_list|)
condition|)
block|{
name|MetricID
name|metricID
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|metricID
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|metricName
argument_list|)
condition|)
block|{
if|if
condition|(
name|tags
operator|.
name|isEmpty
argument_list|()
operator|||
name|metricID
operator|.
name|getTagsAsList
argument_list|()
operator|.
name|equals
argument_list|(
name|tags
argument_list|)
condition|)
block|{
return|return
name|metricType
operator|.
name|cast
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|parseTag (String tagString)
specifier|public
specifier|static
name|Tag
name|parseTag
parameter_list|(
name|String
name|tagString
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|tagString
argument_list|)
operator|||
operator|!
name|tagString
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag must be in the format: key=value"
argument_list|)
throw|;
block|}
name|String
index|[]
name|tagElements
init|=
name|tagString
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagElements
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag must be in the format: key=value"
argument_list|)
throw|;
block|}
return|return
operator|new
name|Tag
argument_list|(
name|tagElements
index|[
literal|0
index|]
argument_list|,
name|tagElements
index|[
literal|1
index|]
argument_list|)
return|;
block|}
DECL|method|parseTagArray (String[] tagStrings)
specifier|public
specifier|static
name|Tag
index|[]
name|parseTagArray
parameter_list|(
name|String
index|[]
name|tagStrings
parameter_list|)
block|{
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[
name|tagStrings
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|tagString
range|:
name|tagStrings
control|)
block|{
name|tags
index|[
name|i
index|]
operator|=
name|parseTag
argument_list|(
name|tagString
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|tags
return|;
block|}
DECL|method|getMetricRegistry (CamelContext camelContext)
specifier|public
specifier|static
name|MetricRegistry
name|getMetricRegistry
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|Registry
name|camelRegistry
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|MetricRegistry
name|metricRegistry
init|=
name|camelRegistry
operator|.
name|lookupByNameAndType
argument_list|(
name|METRIC_REGISTRY_NAME
argument_list|,
name|MetricRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricRegistry
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No usable MetricRegistry has been configured"
argument_list|)
throw|;
block|}
return|return
name|metricRegistry
return|;
block|}
DECL|method|metricTypeMatches (Metric metric, Class<? extends Metric> metricType)
specifier|private
specifier|static
name|boolean
name|metricTypeMatches
parameter_list|(
name|Metric
name|metric
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Metric
argument_list|>
name|metricType
parameter_list|)
block|{
return|return
name|metricType
operator|.
name|isInstance
argument_list|(
name|metric
argument_list|)
return|;
block|}
block|}
end_class

end_unit

