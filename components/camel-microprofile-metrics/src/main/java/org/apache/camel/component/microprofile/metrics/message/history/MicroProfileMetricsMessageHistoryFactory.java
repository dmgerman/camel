begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics.message.history
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|message
operator|.
name|history
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|MessageHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NonManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StaticService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|MessageHistoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|PatternHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsMessageHistoryFactory
specifier|public
class|class
name|MicroProfileMetricsMessageHistoryFactory
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
implements|,
name|StaticService
implements|,
name|NonManagedService
implements|,
name|MessageHistoryFactory
block|{
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|metricRegistry
specifier|private
name|MetricRegistry
name|metricRegistry
decl_stmt|;
DECL|field|copyMessage
specifier|private
name|boolean
name|copyMessage
decl_stmt|;
DECL|field|nodePattern
specifier|private
name|String
name|nodePattern
decl_stmt|;
DECL|field|namingStrategy
specifier|private
name|MicroProfileMetricsMessageHistoryNamingStrategy
name|namingStrategy
init|=
name|MicroProfileMetricsMessageHistoryNamingStrategy
operator|.
name|DEFAULT
decl_stmt|;
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getMetricRegistry ()
specifier|public
name|MetricRegistry
name|getMetricRegistry
parameter_list|()
block|{
return|return
name|metricRegistry
return|;
block|}
DECL|method|setMetricRegistry (MetricRegistry metricRegistry)
specifier|public
name|void
name|setMetricRegistry
parameter_list|(
name|MetricRegistry
name|metricRegistry
parameter_list|)
block|{
name|this
operator|.
name|metricRegistry
operator|=
name|metricRegistry
expr_stmt|;
block|}
DECL|method|getNamingStrategy ()
specifier|public
name|MicroProfileMetricsMessageHistoryNamingStrategy
name|getNamingStrategy
parameter_list|()
block|{
return|return
name|namingStrategy
return|;
block|}
DECL|method|setNamingStrategy (MicroProfileMetricsMessageHistoryNamingStrategy namingStrategy)
specifier|public
name|void
name|setNamingStrategy
parameter_list|(
name|MicroProfileMetricsMessageHistoryNamingStrategy
name|namingStrategy
parameter_list|)
block|{
name|this
operator|.
name|namingStrategy
operator|=
name|namingStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isCopyMessage ()
specifier|public
name|boolean
name|isCopyMessage
parameter_list|()
block|{
return|return
name|copyMessage
return|;
block|}
annotation|@
name|Override
DECL|method|setCopyMessage (boolean copyMessage)
specifier|public
name|void
name|setCopyMessage
parameter_list|(
name|boolean
name|copyMessage
parameter_list|)
block|{
name|this
operator|.
name|copyMessage
operator|=
name|copyMessage
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodePattern ()
specifier|public
name|String
name|getNodePattern
parameter_list|()
block|{
return|return
name|nodePattern
return|;
block|}
annotation|@
name|Override
DECL|method|setNodePattern (String nodePattern)
specifier|public
name|void
name|setNodePattern
parameter_list|(
name|String
name|nodePattern
parameter_list|)
block|{
name|this
operator|.
name|nodePattern
operator|=
name|nodePattern
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newMessageHistory (String routeId, NamedNode namedNode, long timestamp, Exchange exchange)
specifier|public
name|MessageHistory
name|newMessageHistory
parameter_list|(
name|String
name|routeId
parameter_list|,
name|NamedNode
name|namedNode
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|nodePattern
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|namedNode
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|nodePattern
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|boolean
name|match
init|=
name|PatternHelper
operator|.
name|matchPattern
argument_list|(
name|name
argument_list|,
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
name|Message
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|copyMessage
condition|)
block|{
name|msg
operator|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|Route
name|route
init|=
name|camelContext
operator|.
name|getRoute
argument_list|(
name|routeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|MicroProfileMetricsMessageHistory
argument_list|(
name|getMetricRegistry
argument_list|()
argument_list|,
name|route
argument_list|,
name|namedNode
argument_list|,
name|getNamingStrategy
argument_list|()
argument_list|,
name|timestamp
argument_list|,
name|msg
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|metricRegistry
operator|==
literal|null
condition|)
block|{
name|metricRegistry
operator|=
name|MicroProfileMetricsHelper
operator|.
name|getMetricRegistry
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|MicroProfileMetricsMessageHistoryService
name|service
init|=
name|camelContext
operator|.
name|hasService
argument_list|(
name|MicroProfileMetricsMessageHistoryService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|service
operator|=
operator|new
name|MicroProfileMetricsMessageHistoryService
argument_list|()
expr_stmt|;
name|service
operator|.
name|setMetricRegistry
argument_list|(
name|getMetricRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
block|{     }
block|}
end_class

end_unit

