begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics.event.notifier.route
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|event
operator|.
name|notifier
operator|.
name|route
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|event
operator|.
name|notifier
operator|.
name|AbstractMicroProfileMetricsEventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|RouteEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|ConcurrentGauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|Type
operator|.
name|RouteAdded
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|Type
operator|.
name|RouteRemoved
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|Type
operator|.
name|RouteStarted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|Type
operator|.
name|RouteStopped
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsRouteEventNotifier
specifier|public
class|class
name|MicroProfileMetricsRouteEventNotifier
extends|extends
name|AbstractMicroProfileMetricsEventNotifier
argument_list|<
name|RouteEvent
argument_list|>
block|{
DECL|field|routesAdded
specifier|private
name|ConcurrentGauge
name|routesAdded
decl_stmt|;
DECL|field|routesRunning
specifier|private
name|ConcurrentGauge
name|routesRunning
decl_stmt|;
DECL|field|namingStrategy
specifier|private
name|MicroProfileMetricsRouteEventNotifierNamingStrategy
name|namingStrategy
init|=
name|MicroProfileMetricsRouteEventNotifierNamingStrategy
operator|.
name|DEFAULT
decl_stmt|;
DECL|method|MicroProfileMetricsRouteEventNotifier ()
specifier|public
name|MicroProfileMetricsRouteEventNotifier
parameter_list|()
block|{
name|super
argument_list|(
name|RouteEvent
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|CamelContext
name|camelContext
init|=
name|getCamelContext
argument_list|()
decl_stmt|;
name|MetricRegistry
name|metricRegistry
init|=
name|getMetricRegistry
argument_list|()
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
name|namingStrategy
operator|.
name|getTags
argument_list|(
name|camelContext
argument_list|)
decl_stmt|;
name|routesAdded
operator|=
name|metricRegistry
operator|.
name|concurrentGauge
argument_list|(
name|namingStrategy
operator|.
name|getRouteAddedName
argument_list|()
argument_list|,
name|tags
argument_list|)
expr_stmt|;
name|routesRunning
operator|=
name|metricRegistry
operator|.
name|concurrentGauge
argument_list|(
name|namingStrategy
operator|.
name|getRouteRunningName
argument_list|()
argument_list|,
name|tags
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notify (CamelEvent event)
specifier|public
name|void
name|notify
parameter_list|(
name|CamelEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|routesAdded
operator|==
literal|null
operator|||
name|routesRunning
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RouteAdded
argument_list|)
condition|)
block|{
name|routesAdded
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RouteRemoved
argument_list|)
condition|)
block|{
name|routesAdded
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RouteStarted
argument_list|)
condition|)
block|{
name|routesRunning
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RouteStopped
argument_list|)
condition|)
block|{
name|routesRunning
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNamingStrategy ()
specifier|public
name|MicroProfileMetricsRouteEventNotifierNamingStrategy
name|getNamingStrategy
parameter_list|()
block|{
return|return
name|namingStrategy
return|;
block|}
DECL|method|setNamingStrategy (MicroProfileMetricsRouteEventNotifierNamingStrategy namingStrategy)
specifier|public
name|void
name|setNamingStrategy
parameter_list|(
name|MicroProfileMetricsRouteEventNotifierNamingStrategy
name|namingStrategy
parameter_list|)
block|{
name|this
operator|.
name|namingStrategy
operator|=
name|namingStrategy
expr_stmt|;
block|}
block|}
end_class

end_unit

