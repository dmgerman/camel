begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.microprofile.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|gauge
operator|.
name|SimpleGauge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|Tag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsConstants
operator|.
name|HEADER_GAUGE_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|microprofile
operator|.
name|metrics
operator|.
name|MicroProfileMetricsHelper
operator|.
name|findMetric
import|;
end_import

begin_class
DECL|class|MicroProfileMetricsGaugeProducer
specifier|public
class|class
name|MicroProfileMetricsGaugeProducer
extends|extends
name|AbstractMicroProfileMetricsProducer
argument_list|<
name|SimpleGauge
argument_list|>
block|{
DECL|method|MicroProfileMetricsGaugeProducer (MicroProfileMetricsEndpoint endpoint)
specifier|public
name|MicroProfileMetricsGaugeProducer
parameter_list|(
name|MicroProfileMetricsEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doProcess (Exchange exchange, MicroProfileMetricsEndpoint endpoint, SimpleGauge gauge)
specifier|protected
name|void
name|doProcess
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MicroProfileMetricsEndpoint
name|endpoint
parameter_list|,
name|SimpleGauge
name|gauge
parameter_list|)
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Number
name|finalGaugeValue
init|=
name|getNumericHeader
argument_list|(
name|in
argument_list|,
name|HEADER_GAUGE_VALUE
argument_list|,
name|endpoint
operator|.
name|getGaugeValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalGaugeValue
operator|!=
literal|null
condition|)
block|{
name|gauge
operator|.
name|setValue
argument_list|(
name|finalGaugeValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|registerMetric (Metadata metadata, List<Tag> tags)
specifier|protected
name|Function
argument_list|<
name|MetricRegistry
argument_list|,
name|SimpleGauge
argument_list|>
name|registerMetric
parameter_list|(
name|Metadata
name|metadata
parameter_list|,
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|metricRegistry
lambda|->
block|{
name|Tag
index|[]
name|tagArray
init|=
name|tags
operator|.
name|toArray
argument_list|(
operator|new
name|Tag
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SimpleGauge
name|existing
init|=
name|findMetric
argument_list|(
name|metricRegistry
argument_list|,
name|metadata
operator|.
name|getName
argument_list|()
argument_list|,
name|SimpleGauge
operator|.
name|class
argument_list|,
name|tags
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
return|return
name|metricRegistry
operator|.
name|register
argument_list|(
name|metadata
argument_list|,
operator|new
name|SimpleGauge
argument_list|()
argument_list|,
name|tagArray
argument_list|)
return|;
block|}
return|return
name|existing
return|;
block|}
return|;
block|}
block|}
end_class

end_unit

