begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|DefaultRoutesCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RoutesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|AntPathMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * Spring Boot {@link org.apache.camel.main.RoutesCollector}.  */
end_comment

begin_class
DECL|class|SpringBootRoutesCollector
specifier|public
class|class
name|SpringBootRoutesCollector
extends|extends
name|DefaultRoutesCollector
block|{
DECL|field|applicationContext
specifier|private
specifier|final
name|ApplicationContext
name|applicationContext
decl_stmt|;
DECL|method|SpringBootRoutesCollector (ApplicationContext applicationContext)
specifier|public
name|SpringBootRoutesCollector
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collectRoutesFromRegistry (CamelContext camelContext, String excludePattern, String includePattern)
specifier|public
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|collectRoutesFromRegistry
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|excludePattern
parameter_list|,
name|String
name|includePattern
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|AntPathMatcher
name|matcher
init|=
operator|new
name|AntPathMatcher
argument_list|()
decl_stmt|;
for|for
control|(
name|RoutesBuilder
name|routesBuilder
range|:
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|RoutesBuilder
operator|.
name|class
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
comment|// filter out abstract classes
name|boolean
name|abs
init|=
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|routesBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getModifiers
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|abs
condition|)
block|{
name|String
name|name
init|=
name|routesBuilder
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// make name as path so we can use ant path matcher
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|boolean
name|match
init|=
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|includePattern
argument_list|)
decl_stmt|;
comment|// exclude take precedence over include
if|if
condition|(
name|match
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|excludePattern
argument_list|)
condition|)
block|{
comment|// there may be multiple separated by comma
name|String
index|[]
name|parts
init|=
name|excludePattern
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
comment|// must negate when excluding, and hence !
name|match
operator|=
operator|!
name|matcher
operator|.
name|match
argument_list|(
name|part
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Java RoutesBuilder: {} exclude filter: {} -> {}"
argument_list|,
name|name
argument_list|,
name|part
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// special support for testing with @ExcludeRoutes annotation with camel-test-spring
name|excludePattern
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"CamelTestSpringExcludeRoutes"
argument_list|)
expr_stmt|;
comment|// exclude take precedence over include
if|if
condition|(
name|match
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|excludePattern
argument_list|)
condition|)
block|{
comment|// this property is a comma separated list of FQN class names, so we need to make
comment|// name as path so we can use ant patch matcher
name|excludePattern
operator|=
name|excludePattern
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
comment|// there may be multiple separated by comma
name|String
index|[]
name|parts
init|=
name|excludePattern
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
comment|// must negate when excluding, and hence !
name|match
operator|=
operator|!
name|matcher
operator|.
name|match
argument_list|(
name|part
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Java RoutesBuilder: {} exclude filter: {} -> {}"
argument_list|,
name|name
argument_list|,
name|part
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|match
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|includePattern
argument_list|)
condition|)
block|{
comment|// there may be multiple separated by comma
name|String
index|[]
name|parts
init|=
name|includePattern
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|match
operator|=
name|matcher
operator|.
name|match
argument_list|(
name|part
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Java RoutesBuilder: {} include filter: {} -> {}"
argument_list|,
name|name
argument_list|,
name|part
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
condition|)
block|{
break|break;
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Java RoutesBuilder: {} accepted by include/exclude filter: {}"
argument_list|,
name|name
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
condition|)
block|{
name|routes
operator|.
name|add
argument_list|(
name|routesBuilder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|routes
return|;
block|}
annotation|@
name|Override
DECL|method|collectXmlRoutesFromDirectory (CamelContext camelContext, String directory)
specifier|public
name|List
argument_list|<
name|RoutesDefinition
argument_list|>
name|collectXmlRoutesFromDirectory
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|directory
parameter_list|)
block|{
name|List
argument_list|<
name|RoutesDefinition
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|directory
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading additional Camel XML routes from: {}"
argument_list|,
name|part
argument_list|)
expr_stmt|;
try|try
block|{
name|Resource
index|[]
name|xmlRoutes
init|=
name|applicationContext
operator|.
name|getResources
argument_list|(
name|part
argument_list|)
decl_stmt|;
for|for
control|(
name|Resource
name|xmlRoute
range|:
name|xmlRoutes
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Found XML route: {}"
argument_list|,
name|xmlRoute
argument_list|)
expr_stmt|;
name|RoutesDefinition
name|routes
init|=
name|ModelHelper
operator|.
name|loadRoutesDefinition
argument_list|(
name|camelContext
argument_list|,
name|xmlRoute
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No XML routes found in {}. Skipping XML routes detection."
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|collectXmlRestsFromDirectory (CamelContext camelContext, String directory)
specifier|public
name|List
argument_list|<
name|RestsDefinition
argument_list|>
name|collectXmlRestsFromDirectory
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|directory
parameter_list|)
block|{
name|List
argument_list|<
name|RestsDefinition
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|directory
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Loading additional Camel XML rests from: {}"
argument_list|,
name|part
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Resource
index|[]
name|xmlRests
init|=
name|applicationContext
operator|.
name|getResources
argument_list|(
name|part
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Resource
name|xmlRest
range|:
name|xmlRests
control|)
block|{
name|RestsDefinition
name|rests
init|=
name|ModelHelper
operator|.
name|loadRestsDefinition
argument_list|(
name|camelContext
argument_list|,
name|xmlRest
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|rests
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No XML rests found in {}. Skipping XML rests detection."
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

