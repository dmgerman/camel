begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StartupListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|MainDurationEventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|RoutesCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|RoutesConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventNotifierSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ConfigurableApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|event
operator|.
name|ContextRefreshedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|Ordered
import|;
end_import

begin_comment
comment|/**  * A spring application listener that when spring boot is starting (refresh event) will setup Camel by:  *<p>  * 1. collecting routes and rests from the various sources (like Spring application context beans registry or opinionated  * classpath locations) and injects these into the Camel context.  * 2. setting up Camel main controller if enabled.  * 3. setting up run duration if in use.  */
end_comment

begin_class
DECL|class|CamelSpringBootApplicationListener
specifier|public
class|class
name|CamelSpringBootApplicationListener
implements|implements
name|ApplicationListener
argument_list|<
name|ContextRefreshedEvent
argument_list|>
implements|,
name|Ordered
block|{
comment|// Static collaborators
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelSpringBootApplicationListener
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Collaborators
DECL|field|applicationContext
specifier|private
specifier|final
name|ApplicationContext
name|applicationContext
decl_stmt|;
DECL|field|camelContextConfigurations
specifier|private
specifier|final
name|List
argument_list|<
name|CamelContextConfiguration
argument_list|>
name|camelContextConfigurations
decl_stmt|;
DECL|field|configurationProperties
specifier|private
specifier|final
name|CamelConfigurationProperties
name|configurationProperties
decl_stmt|;
DECL|field|springBootRoutesCollector
specifier|private
specifier|final
name|RoutesCollector
name|springBootRoutesCollector
decl_stmt|;
comment|// Constructors
DECL|method|CamelSpringBootApplicationListener (ApplicationContext applicationContext, List<CamelContextConfiguration> camelContextConfigurations, CamelConfigurationProperties configurationProperties, RoutesCollector springBootRoutesCollector)
specifier|public
name|CamelSpringBootApplicationListener
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|List
argument_list|<
name|CamelContextConfiguration
argument_list|>
name|camelContextConfigurations
parameter_list|,
name|CamelConfigurationProperties
name|configurationProperties
parameter_list|,
name|RoutesCollector
name|springBootRoutesCollector
parameter_list|)
block|{
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
name|this
operator|.
name|camelContextConfigurations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|camelContextConfigurations
argument_list|)
expr_stmt|;
name|this
operator|.
name|configurationProperties
operator|=
name|configurationProperties
expr_stmt|;
name|this
operator|.
name|springBootRoutesCollector
operator|=
name|springBootRoutesCollector
expr_stmt|;
block|}
comment|// Overridden
annotation|@
name|Override
DECL|method|onApplicationEvent (ContextRefreshedEvent event)
specifier|public
name|void
name|onApplicationEvent
parameter_list|(
name|ContextRefreshedEvent
name|event
parameter_list|)
block|{
name|CamelContext
name|camelContext
init|=
name|applicationContext
operator|.
name|getBean
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// only add and start Camel if its stopped (initial state)
if|if
condition|(
name|event
operator|.
name|getApplicationContext
argument_list|()
operator|==
name|this
operator|.
name|applicationContext
operator|&&
name|camelContext
operator|.
name|getStatus
argument_list|()
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Post-processing CamelContext bean: {}"
argument_list|,
name|camelContext
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|RoutesConfigurer
name|configurer
init|=
operator|new
name|RoutesConfigurer
argument_list|(
name|springBootRoutesCollector
argument_list|)
decl_stmt|;
name|configurer
operator|.
name|configureRoutes
argument_list|(
name|camelContext
argument_list|,
name|configurationProperties
argument_list|)
expr_stmt|;
for|for
control|(
name|CamelContextConfiguration
name|camelContextConfiguration
range|:
name|camelContextConfigurations
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CamelContextConfiguration found. Invoking beforeApplicationStart: {}"
argument_list|,
name|camelContextConfiguration
argument_list|)
expr_stmt|;
name|camelContextConfiguration
operator|.
name|beforeApplicationStart
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|configurationProperties
operator|.
name|isMainRunController
argument_list|()
condition|)
block|{
name|CamelMainRunController
name|controller
init|=
operator|new
name|CamelMainRunController
argument_list|(
name|applicationContext
argument_list|,
name|camelContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
operator|>
literal|0
operator|||
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot will terminate after processing {} messages"
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot will terminate after being idle for more {} seconds"
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// register lifecycle so we can trigger to shutdown the JVM when maximum number of messages has been processed
name|EventNotifier
name|notifier
init|=
operator|new
name|MainDurationEventNotifier
argument_list|(
name|camelContext
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
argument_list|,
name|controller
operator|.
name|getCompleted
argument_list|()
argument_list|,
name|controller
operator|.
name|getLatch
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// register our event notifier
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot will terminate after {} seconds"
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|terminateMainControllerAfter
argument_list|(
name|camelContext
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
argument_list|,
name|controller
operator|.
name|getCompleted
argument_list|()
argument_list|,
name|controller
operator|.
name|getLatch
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|camelContext
operator|.
name|addStartupListener
argument_list|(
operator|new
name|StartupListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCamelContextStarted
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|boolean
name|alreadyStarted
parameter_list|)
throws|throws
name|Exception
block|{
comment|// run the CamelMainRunController after the context has been started
comment|// this way we ensure that NO_START flag is honoured as it's set as
comment|// a thread local variable of the thread CamelMainRunController is
comment|// not running on
if|if
condition|(
operator|!
name|alreadyStarted
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting CamelMainRunController to ensure the main thread keeps running"
argument_list|)
expr_stmt|;
name|controller
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|applicationContext
operator|instanceof
name|ConfigurableApplicationContext
condition|)
block|{
name|ConfigurableApplicationContext
name|cac
init|=
operator|(
name|ConfigurableApplicationContext
operator|)
name|applicationContext
decl_stmt|;
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot will terminate after {} seconds"
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|terminateApplicationContext
argument_list|(
name|cac
argument_list|,
name|camelContext
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
operator|>
literal|0
operator|||
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot will terminate after processing {} messages"
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot will terminate after being idle for more {} seconds"
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// needed by MainDurationEventNotifier to signal when we have processed the max messages
specifier|final
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// register lifecycle so we can trigger to shutdown the JVM when maximum number of messages has been processed
name|EventNotifier
name|notifier
init|=
operator|new
name|MainDurationEventNotifier
argument_list|(
name|camelContext
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxMessages
argument_list|()
argument_list|,
name|configurationProperties
operator|.
name|getDurationMaxIdleSeconds
argument_list|()
argument_list|,
name|completed
argument_list|,
name|latch
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// register our event notifier
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
name|terminateApplicationContext
argument_list|(
name|cac
argument_list|,
name|camelContext
argument_list|,
name|latch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|camelContextConfigurations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// we want to call these notifications just after CamelContext has been fully started
comment|// so use an event notifier to trigger when this happens
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
operator|new
name|EventNotifierSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|notify
parameter_list|(
name|CamelEvent
name|eventObject
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|CamelContextConfiguration
name|camelContextConfiguration
range|:
name|camelContextConfigurations
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"CamelContextConfiguration found. Invoking afterApplicationStart: {}"
argument_list|,
name|camelContextConfiguration
argument_list|)
expr_stmt|;
try|try
block|{
name|camelContextConfiguration
operator|.
name|afterApplicationStart
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error during calling afterApplicationStart due "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". This exception is ignored"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|CamelEvent
name|eventObject
parameter_list|)
block|{
return|return
name|eventObject
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|CamelContextStarted
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CamelSpringBootInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Camel already started, not adding routes."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getOrder ()
specifier|public
name|int
name|getOrder
parameter_list|()
block|{
comment|// RoutesCollector implements Ordered so that it's the
comment|// first Camel ApplicationListener to receive events,
comment|// SpringCamelContext should be the last one,
comment|// CamelContextFactoryBean should be second to last and then
comment|// RoutesCollector. This is important for startup as we want
comment|// all resources to be ready and all routes added to the
comment|// context before we start CamelContext.
comment|// So the order should be:
comment|// 1. RoutesCollector (LOWEST_PRECEDENCE - 2)
comment|// 2. CamelContextFactoryBean (LOWEST_PRECEDENCE -1)
comment|// 3. SpringCamelContext (LOWEST_PRECEDENCE)
return|return
name|LOWEST_PRECEDENCE
operator|-
literal|2
return|;
block|}
comment|// Helpers
DECL|method|terminateMainControllerAfter (final CamelContext camelContext, int seconds, final AtomicBoolean completed, final CountDownLatch latch)
specifier|private
name|void
name|terminateMainControllerAfter
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
name|int
name|seconds
parameter_list|,
specifier|final
name|AtomicBoolean
name|completed
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|ScheduledExecutorService
name|executorService
init|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"CamelSpringBootTerminateTask"
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot triggering shutdown of the JVM."
argument_list|)
expr_stmt|;
try|try
block|{
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error during stopping CamelContext"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|completed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|executorService
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|seconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|terminateApplicationContext (final ConfigurableApplicationContext applicationContext, final CamelContext camelContext, int seconds)
specifier|private
name|void
name|terminateApplicationContext
parameter_list|(
specifier|final
name|ConfigurableApplicationContext
name|applicationContext
parameter_list|,
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
name|int
name|seconds
parameter_list|)
block|{
name|ScheduledExecutorService
name|executorService
init|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"CamelSpringBootTerminateTask"
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot triggering shutdown of the JVM."
argument_list|)
expr_stmt|;
comment|// we need to run a daemon thread to stop ourselves so this thread pool can be stopped nice also
operator|new
name|Thread
argument_list|(
name|applicationContext
operator|::
name|close
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
decl_stmt|;
name|executorService
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
name|seconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
DECL|method|terminateApplicationContext (final ConfigurableApplicationContext applicationContext, final CamelContext camelContext, final CountDownLatch latch)
specifier|private
name|void
name|terminateApplicationContext
parameter_list|(
specifier|final
name|ConfigurableApplicationContext
name|applicationContext
parameter_list|,
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|ExecutorService
name|executorService
init|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadExecutor
argument_list|(
name|this
argument_list|,
literal|"CamelSpringBootTerminateTask"
argument_list|)
decl_stmt|;
name|Runnable
name|task
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CamelSpringBoot triggering shutdown of the JVM."
argument_list|)
expr_stmt|;
comment|// we need to run a daemon thread to stop ourselves so this thread pool can be stopped nice also
operator|new
name|Thread
argument_list|(
name|applicationContext
operator|::
name|close
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
decl_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

