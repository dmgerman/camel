begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.actuate.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|actuate
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|health
operator|.
name|AbstractHealthIndicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|health
operator|.
name|Health
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|health
operator|.
name|HealthIndicator
import|;
end_import

begin_comment
comment|/**  * Camel {@link org.apache.camel.health.HealthCheck} {@link HealthIndicator}.  */
end_comment

begin_class
DECL|class|CamelHealthCheckIndicator
specifier|public
class|class
name|CamelHealthCheckIndicator
extends|extends
name|AbstractHealthIndicator
block|{
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|filters
specifier|private
specifier|final
name|List
argument_list|<
name|HealthCheckFilter
argument_list|>
name|filters
decl_stmt|;
DECL|method|CamelHealthCheckIndicator (CamelContext camelContext, List<HealthCheckFilter> filters)
specifier|public
name|CamelHealthCheckIndicator
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|List
argument_list|<
name|HealthCheckFilter
argument_list|>
name|filters
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doHealthCheck (Health.Builder builder)
specifier|protected
name|void
name|doHealthCheck
parameter_list|(
name|Health
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
comment|// By default the status is unknown.
name|builder
operator|.
name|unknown
argument_list|()
expr_stmt|;
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|HealthCheck
operator|.
name|Result
argument_list|>
name|results
init|=
name|HealthCheckHelper
operator|.
name|invoke
argument_list|(
name|camelContext
argument_list|,
parameter_list|(
name|HealthCheck
name|check
parameter_list|)
lambda|->
name|filters
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|test
argument_list|(
name|check
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// assuming the status is up unless a specific check is failing
comment|// which is determined later.
name|builder
operator|.
name|up
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|HealthCheck
operator|.
name|Result
name|result
range|:
name|results
control|)
block|{
name|builder
operator|.
name|withDetail
argument_list|(
name|result
operator|.
name|getCheck
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|result
operator|.
name|getState
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getState
argument_list|()
operator|==
name|HealthCheck
operator|.
name|State
operator|.
name|DOWN
condition|)
block|{
name|builder
operator|.
name|down
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

