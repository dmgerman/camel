begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.actuate.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
operator|.
name|mvc
operator|.
name|EndpointMvcAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
operator|.
name|mvc
operator|.
name|MvcEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|ResponseStatus
import|;
end_import

begin_comment
comment|/**  * Adapter to expose {@link T} as an {@link MvcEndpoint}.  */
end_comment

begin_class
DECL|class|AbstractCamelMvcEndpoint
specifier|abstract
class|class
name|AbstractCamelMvcEndpoint
parameter_list|<
name|T
extends|extends
name|Endpoint
parameter_list|>
extends|extends
name|EndpointMvcAdapter
block|{
DECL|field|delegate
specifier|private
specifier|final
name|T
name|delegate
decl_stmt|;
DECL|method|AbstractCamelMvcEndpoint (String path, T delegate)
specifier|protected
name|AbstractCamelMvcEndpoint
parameter_list|(
name|String
name|path
parameter_list|,
name|T
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// ********************************************
comment|// Helpers
comment|// ********************************************
DECL|method|delegate ()
specifier|protected
name|T
name|delegate
parameter_list|()
block|{
return|return
name|this
operator|.
name|delegate
return|;
block|}
DECL|method|doIfEnabled (Supplier<Object> supplier)
specifier|protected
name|Object
name|doIfEnabled
parameter_list|(
name|Supplier
argument_list|<
name|Object
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
operator|!
name|delegate
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
return|return
name|getDisabledResponse
argument_list|()
return|;
block|}
return|return
name|supplier
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|doIfEnabled (Function<T, Object> supplier)
specifier|protected
name|Object
name|doIfEnabled
parameter_list|(
name|Function
argument_list|<
name|T
argument_list|,
name|Object
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
operator|!
name|delegate
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
return|return
name|getDisabledResponse
argument_list|()
return|;
block|}
return|return
name|supplier
operator|.
name|apply
argument_list|(
name|delegate
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|ResponseStatus
argument_list|(
name|value
operator|=
name|HttpStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|)
DECL|class|GenericException
specifier|public
specifier|static
class|class
name|GenericException
extends|extends
name|RuntimeException
block|{
DECL|method|GenericException (String message, Throwable cause)
specifier|public
name|GenericException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

