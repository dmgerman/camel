begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|ConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|ConversionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|TypeDescriptor
import|;
end_import

begin_class
DECL|class|CompositeConversionService
specifier|public
class|class
name|CompositeConversionService
implements|implements
name|ConversionService
block|{
DECL|field|delegates
specifier|private
specifier|final
name|List
argument_list|<
name|ConversionService
argument_list|>
name|delegates
decl_stmt|;
DECL|method|CompositeConversionService (List<ConversionService> delegates)
specifier|public
name|CompositeConversionService
parameter_list|(
name|List
argument_list|<
name|ConversionService
argument_list|>
name|delegates
parameter_list|)
block|{
name|this
operator|.
name|delegates
operator|=
name|delegates
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|canConvert (Class<?> sourceType, Class<?> targetType)
specifier|public
name|boolean
name|canConvert
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|sourceType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|targetType
parameter_list|)
block|{
for|for
control|(
name|ConversionService
name|service
range|:
name|this
operator|.
name|delegates
control|)
block|{
if|if
condition|(
name|service
operator|.
name|canConvert
argument_list|(
name|sourceType
argument_list|,
name|targetType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|canConvert (TypeDescriptor sourceType, TypeDescriptor targetType)
specifier|public
name|boolean
name|canConvert
parameter_list|(
name|TypeDescriptor
name|sourceType
parameter_list|,
name|TypeDescriptor
name|targetType
parameter_list|)
block|{
for|for
control|(
name|ConversionService
name|service
range|:
name|this
operator|.
name|delegates
control|)
block|{
if|if
condition|(
name|service
operator|.
name|canConvert
argument_list|(
name|sourceType
argument_list|,
name|targetType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|convert (Object source, Class<T> targetType)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|convert
parameter_list|(
name|Object
name|source
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetType
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|delegates
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ConversionService
name|delegate
init|=
name|this
operator|.
name|delegates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|delegate
operator|.
name|canConvert
argument_list|(
name|source
operator|.
name|getClass
argument_list|()
argument_list|,
name|targetType
argument_list|)
condition|)
block|{
return|return
name|delegate
operator|.
name|convert
argument_list|(
name|source
argument_list|,
name|targetType
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ConversionException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
return|return
name|this
operator|.
name|delegates
operator|.
name|get
argument_list|(
name|this
operator|.
name|delegates
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|convert
argument_list|(
name|source
argument_list|,
name|targetType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|convert (Object source, TypeDescriptor sourceType, TypeDescriptor targetType)
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|source
parameter_list|,
name|TypeDescriptor
name|sourceType
parameter_list|,
name|TypeDescriptor
name|targetType
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|delegates
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ConversionService
name|delegate
init|=
name|this
operator|.
name|delegates
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|delegate
operator|.
name|canConvert
argument_list|(
name|sourceType
argument_list|,
name|targetType
argument_list|)
condition|)
block|{
return|return
name|delegate
operator|.
name|convert
argument_list|(
name|source
argument_list|,
name|sourceType
argument_list|,
name|targetType
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ConversionException
name|e
parameter_list|)
block|{
comment|// ignored
block|}
block|}
return|return
name|this
operator|.
name|delegates
operator|.
name|get
argument_list|(
name|this
operator|.
name|delegates
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|convert
argument_list|(
name|source
argument_list|,
name|sourceType
argument_list|,
name|targetType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

