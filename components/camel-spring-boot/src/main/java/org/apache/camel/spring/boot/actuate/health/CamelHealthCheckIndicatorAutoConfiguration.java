begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.actuate.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|actuate
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|CamelAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|health
operator|.
name|HealthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
operator|.
name|GroupCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|health
operator|.
name|HealthIndicator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureAfter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|ConditionalOnClass
argument_list|(
block|{
name|CamelContext
operator|.
name|class
block|,
name|HealthIndicator
operator|.
name|class
block|}
argument_list|)
annotation|@
name|Conditional
argument_list|(
name|CamelHealthCheckIndicatorAutoConfiguration
operator|.
name|Condition
operator|.
name|class
argument_list|)
annotation|@
name|ConditionalOnBean
argument_list|(
block|{
name|CamelAutoConfiguration
operator|.
name|class
block|,
name|CamelContext
operator|.
name|class
block|}
argument_list|)
annotation|@
name|AutoConfigureAfter
argument_list|(
name|CamelAutoConfiguration
operator|.
name|class
argument_list|)
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|CamelHealthCheckIndicatorConfiguration
operator|.
name|class
argument_list|)
DECL|class|CamelHealthCheckIndicatorAutoConfiguration
specifier|public
class|class
name|CamelHealthCheckIndicatorAutoConfiguration
block|{
annotation|@
name|Autowired
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Autowired
DECL|field|configuration
specifier|private
name|CamelHealthCheckIndicatorConfiguration
name|configuration
decl_stmt|;
annotation|@
name|Autowired
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|filterList
specifier|private
name|List
argument_list|<
name|HealthCheckFilter
argument_list|>
name|filterList
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"camel-health-checks"
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|CamelHealthCheckIndicator
operator|.
name|class
argument_list|)
DECL|method|camelHealthChecksIndicator ()
specifier|public
name|HealthIndicator
name|camelHealthChecksIndicator
parameter_list|()
block|{
comment|// Collect filters from the environment first so user defined filter
comment|// take precedence over platform ones.
specifier|final
name|List
argument_list|<
name|HealthCheckFilter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|filterList
argument_list|)
decl_stmt|;
comment|// ids
for|for
control|(
name|String
name|exclusion
range|:
name|configuration
operator|.
name|getExclusion
argument_list|()
operator|.
name|getIds
argument_list|()
control|)
block|{
comment|// "cache" the pattern
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|exclusion
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|check
lambda|->
name|exclusion
operator|.
name|equals
argument_list|(
name|check
operator|.
name|getId
argument_list|()
argument_list|)
operator|||
name|pattern
operator|.
name|matcher
argument_list|(
name|check
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// groups
for|for
control|(
name|String
name|exclusion
range|:
name|configuration
operator|.
name|getExclusion
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
block|{
comment|// "cache" the pattern
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|exclusion
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|check
lambda|->
name|exclusion
operator|.
name|equals
argument_list|(
name|check
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|||
name|pattern
operator|.
name|matcher
argument_list|(
name|check
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CamelHealthCheckIndicator
argument_list|(
name|camelContext
argument_list|,
name|filters
argument_list|)
return|;
block|}
comment|// ***************************************
comment|// Condition
comment|// ***************************************
DECL|class|Condition
specifier|public
specifier|static
class|class
name|Condition
extends|extends
name|GroupCondition
block|{
DECL|method|Condition ()
specifier|public
name|Condition
parameter_list|()
block|{
name|super
argument_list|(
name|HealthConstants
operator|.
name|HEALTH_PREFIX
argument_list|,
name|HealthConstants
operator|.
name|HEALTH_CHECK_INDICATOR_PREFIX
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

