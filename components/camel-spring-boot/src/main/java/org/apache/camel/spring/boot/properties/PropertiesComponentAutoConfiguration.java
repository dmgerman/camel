begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.properties
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|CamelAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
operator|.
name|ConditionalOnCamelContextAndAutoConfigurationBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureAfter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|Conditional
argument_list|(
block|{
name|ConditionalOnCamelContextAndAutoConfigurationBeans
operator|.
name|class
block|}
argument_list|)
annotation|@
name|AutoConfigureAfter
argument_list|(
name|CamelAutoConfiguration
operator|.
name|class
argument_list|)
annotation|@
name|EnableConfigurationProperties
argument_list|(
block|{
name|PropertiesComponentConfiguration
operator|.
name|class
block|}
argument_list|)
DECL|class|PropertiesComponentAutoConfiguration
specifier|public
class|class
name|PropertiesComponentAutoConfiguration
block|{
annotation|@
name|Autowired
DECL|field|applicationContext
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Autowired
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Lazy
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"properties-component"
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|PropertiesComponent
operator|.
name|class
argument_list|)
DECL|method|configurePropertiesComponent (PropertiesComponentConfiguration configuration)
specifier|public
name|PropertiesComponent
name|configurePropertiesComponent
parameter_list|(
name|PropertiesComponentConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|PropertiesComponent
name|component
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|component
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getAutoDiscoverPropertiesSources
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setAutoDiscoverPropertiesSources
argument_list|(
name|configuration
operator|.
name|getAutoDiscoverPropertiesSources
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getDefaultFallbackEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setDefaultFallbackEnabled
argument_list|(
name|configuration
operator|.
name|getDefaultFallbackEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getEncoding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setEncoding
argument_list|(
name|configuration
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getEnvironmentVariableMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setEnvironmentVariableMode
argument_list|(
name|configuration
operator|.
name|getEnvironmentVariableMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getSystemPropertiesMode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setSystemPropertiesMode
argument_list|(
name|configuration
operator|.
name|getSystemPropertiesMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getIgnoreMissingLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setIgnoreMissingLocation
argument_list|(
name|configuration
operator|.
name|getIgnoreMissingLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|component
operator|.
name|setLocation
argument_list|(
name|configuration
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getInitialProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Properties
name|prop
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|configuration
operator|.
name|getInitialProperties
argument_list|()
argument_list|,
name|Properties
operator|.
name|class
argument_list|)
decl_stmt|;
name|component
operator|.
name|setInitialProperties
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getOverrideProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Properties
name|prop
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|configuration
operator|.
name|getOverrideProperties
argument_list|()
argument_list|,
name|Properties
operator|.
name|class
argument_list|)
decl_stmt|;
name|component
operator|.
name|setOverrideProperties
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getPropertiesParser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PropertiesParser
name|parser
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|configuration
operator|.
name|getPropertiesParser
argument_list|()
argument_list|,
name|PropertiesParser
operator|.
name|class
argument_list|)
decl_stmt|;
name|component
operator|.
name|setPropertiesParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
return|return
name|component
return|;
block|}
block|}
end_class

end_unit

