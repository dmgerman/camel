begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  *<p>  * Opinionated auto-configuration of the Camel context. Auto-detects Camel routes available in the Spring context and  * exposes the key Camel utilities (like producer template, consumer template and type converter).  *</p>  *<p>  * The most important piece of functionality provided by the Camel starter is {@code CamelContext} instance. Camel starter  * will create {@code SpringCamelContext} for your and take care of the proper initialization and shutdown of that context. Created  * Camel context is also registered in the Spring application context (under {@code camelContext} name), so you can access it just  * as the any other Spring bean.  *  *<pre>  * {@literal @}Configuration  * public class MyAppConfig {  *  *   {@literal @}Autowired  *   CamelContext camelContext;  *  *   {@literal @}Bean  *   MyService myService() {  *     return new DefaultMyService(camelContext);  *   }  *  * }  *</pre>  *  *</p>  *<p>  * Camel starter collects all the `RoutesBuilder` instances from the Spring context and automatically injects  * them into the provided {@code CamelContext}. It means that creating new Camel route with the Spring Boot starter is as simple as  * adding the {@code @Component} annotated class into your classpath:  *</p>  *  *<p>  *<pre>  * {@literal @}Component  * public class MyRouter extends RouteBuilder {  *  *  {@literal @}Override  *    public void configure() throws Exception {  *     from("jms:invoices").to("file:/invoices");  *   }  *  * }  *</pre>  *</p>  *  *<p>  * Or creating new route {@code RoutesBuilder} in your {@code @Configuration} class:  *</p>  *<p>  *<pre>  * {@literal @}Configuration  * public class MyRouterConfiguration {  *  *   {@literal @}Bean  *   RoutesBuilder myRouter() {  *     return new RouteBuilder() {  *  *       {@literal @}Override  *       public void configure() throws Exception {  *         from("jms:invoices").to("file:/invoices");  *       }  *  *     };  *   }  *  * }  *</pre>  *</p>  */
end_comment

begin_class
annotation|@
name|Configuration
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|CamelConfigurationProperties
operator|.
name|class
argument_list|)
DECL|class|CamelAutoConfiguration
specifier|public
class|class
name|CamelAutoConfiguration
block|{
annotation|@
name|Autowired
DECL|field|configurationProperties
specifier|private
name|CamelConfigurationProperties
name|configurationProperties
decl_stmt|;
annotation|@
name|Autowired
DECL|field|applicationContext
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Autowired
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|camelContextConfiguration
specifier|private
name|CamelContextConfiguration
name|camelContextConfiguration
decl_stmt|;
comment|/**      * Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring      * context.      */
annotation|@
name|Bean
DECL|method|camelContext ()
name|CamelContext
name|camelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
operator|new
name|SpringCamelContext
argument_list|(
name|applicationContext
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configurationProperties
operator|.
name|isJmxEnabled
argument_list|()
condition|)
block|{
name|camelContext
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|camelContextConfiguration
operator|!=
literal|null
condition|)
block|{
name|camelContextConfiguration
operator|.
name|beforeStart
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
return|return
name|camelContext
return|;
block|}
annotation|@
name|Bean
DECL|method|camelRoutesInjector ()
name|RoutesCollector
name|camelRoutesInjector
parameter_list|()
block|{
return|return
operator|new
name|RoutesCollector
argument_list|()
return|;
block|}
comment|/**      * Default producer template for the bootstrapped Camel context.      */
annotation|@
name|Bean
DECL|method|producerTemplate ()
name|ProducerTemplate
name|producerTemplate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|camelContext
argument_list|()
operator|.
name|createProducerTemplate
argument_list|(
name|configurationProperties
operator|.
name|getProducerTemplateCacheSize
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Default consumer template for the bootstrapped Camel context.      */
annotation|@
name|Bean
DECL|method|consumerTemplate ()
name|ConsumerTemplate
name|consumerTemplate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|camelContext
argument_list|()
operator|.
name|createConsumerTemplate
argument_list|(
name|configurationProperties
operator|.
name|getConsumerTemplateCacheSize
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Bean
DECL|method|typeConverter ()
name|TypeConverter
name|typeConverter
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|camelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
return|;
block|}
annotation|@
name|Bean
DECL|method|propertiesParser ()
name|PropertiesParser
name|propertiesParser
parameter_list|()
block|{
return|return
operator|new
name|SpringPropertiesParser
argument_list|()
return|;
block|}
annotation|@
name|Bean
DECL|method|properties ()
name|PropertiesComponent
name|properties
parameter_list|()
block|{
name|PropertiesComponent
name|properties
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setPropertiesParser
argument_list|(
name|propertiesParser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

