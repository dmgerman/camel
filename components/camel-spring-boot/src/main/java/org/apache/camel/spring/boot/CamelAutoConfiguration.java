begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FluentProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cluster
operator|.
name|CamelClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|FileWatcherReloadStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|BacklogTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|DefaultTraceFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AsyncProcessorAwaitManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InflightRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LogListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementNamingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ReloadStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RuntimeEndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|StreamCachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWorkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
operator|.
name|XmlCamelContextConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|GlobalSSLContextParametersSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|ConfigurableEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|MutablePropertySources
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|CamelConfigurationProperties
operator|.
name|class
argument_list|)
annotation|@
name|Import
argument_list|(
name|TypeConversionConfiguration
operator|.
name|class
argument_list|)
DECL|class|CamelAutoConfiguration
specifier|public
class|class
name|CamelAutoConfiguration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelAutoConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Allows to do custom configuration when running XML based Camel in Spring Boot      */
comment|// must be named xmlCamelContextConfigurer
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"xmlCamelContextConfigurer"
argument_list|)
DECL|method|springBootCamelContextConfigurer ()
name|XmlCamelContextConfigurer
name|springBootCamelContextConfigurer
parameter_list|()
block|{
return|return
operator|new
name|SpringBootXmlCamelContextConfigurer
argument_list|()
return|;
block|}
comment|/**      * Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case CamelContext::shutdown or CamelContext::stop would
comment|// be used for bean destruction. As SpringCamelContext is a lifecycle
comment|// bean (implements Lifecycle) additional invocations of shutdown or
comment|// close would be superfluous.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
DECL|method|camelContext (ApplicationContext applicationContext, CamelConfigurationProperties config)
name|CamelContext
name|camelContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
operator|new
name|SpringCamelContext
argument_list|(
name|applicationContext
argument_list|)
decl_stmt|;
return|return
name|doConfigureCamelContext
argument_list|(
name|applicationContext
argument_list|,
name|camelContext
argument_list|,
name|config
argument_list|)
return|;
block|}
DECL|method|doConfigureCamelContext (ApplicationContext applicationContext, CamelContext camelContext, CamelConfigurationProperties config)
specifier|static
name|CamelContext
name|doConfigureCamelContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|config
operator|.
name|getFileConfigurations
argument_list|()
argument_list|)
condition|)
block|{
name|Environment
name|env
init|=
name|applicationContext
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|env
operator|instanceof
name|ConfigurableEnvironment
condition|)
block|{
name|MutablePropertySources
name|sources
init|=
operator|(
operator|(
name|ConfigurableEnvironment
operator|)
name|env
operator|)
operator|.
name|getPropertySources
argument_list|()
decl_stmt|;
if|if
condition|(
name|sources
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|sources
operator|.
name|contains
argument_list|(
literal|"camel-file-configuration"
argument_list|)
condition|)
block|{
name|sources
operator|.
name|addFirst
argument_list|(
operator|new
name|FilePropertySource
argument_list|(
literal|"camel-file-configuration"
argument_list|,
name|applicationContext
argument_list|,
name|config
operator|.
name|getFileConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|isJmxEnabled
argument_list|()
condition|)
block|{
name|camelContext
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SpringCamelContext
operator|)
name|camelContext
operator|)
operator|.
name|setName
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getShutdownTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|camelContext
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|setTimeout
argument_list|(
name|config
operator|.
name|getShutdownTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|camelContext
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|setSuppressLoggingOnTimeout
argument_list|(
name|config
operator|.
name|isShutdownSuppressLoggingOnTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|setShutdownNowOnTimeout
argument_list|(
name|config
operator|.
name|isShutdownNowOnTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|setShutdownRoutesInReverseOrder
argument_list|(
name|config
operator|.
name|isShutdownRoutesInReverseOrder
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getShutdownStrategy
argument_list|()
operator|.
name|setLogInflightExchangesOnTimeout
argument_list|(
name|config
operator|.
name|isShutdownLogInflightExchangesOnTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getLogDebugMaxChars
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|camelContext
operator|.
name|getGlobalOptions
argument_list|()
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|LOG_DEBUG_BODY_MAX_CHARS
argument_list|,
literal|""
operator|+
name|config
operator|.
name|getLogDebugMaxChars
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// stream caching
name|camelContext
operator|.
name|setStreamCaching
argument_list|(
name|config
operator|.
name|isStreamCachingEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setAnySpoolRules
argument_list|(
name|config
operator|.
name|isStreamCachingAnySpoolRules
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setBufferSize
argument_list|(
name|config
operator|.
name|getStreamCachingBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setRemoveSpoolDirectoryWhenStopping
argument_list|(
name|config
operator|.
name|isStreamCachingRemoveSpoolDirectoryWhenStopping
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolChiper
argument_list|(
name|config
operator|.
name|getStreamCachingSpoolChiper
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getStreamCachingSpoolDirectory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolDirectory
argument_list|(
name|config
operator|.
name|getStreamCachingSpoolDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getStreamCachingSpoolThreshold
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolThreshold
argument_list|(
name|config
operator|.
name|getStreamCachingSpoolThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getStreamCachingSpoolUsedHeapMemoryLimit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StreamCachingStrategy
operator|.
name|SpoolUsedHeapMemoryLimit
name|limit
decl_stmt|;
if|if
condition|(
literal|"Committed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|config
operator|.
name|getStreamCachingSpoolUsedHeapMemoryLimit
argument_list|()
argument_list|)
condition|)
block|{
name|limit
operator|=
name|StreamCachingStrategy
operator|.
name|SpoolUsedHeapMemoryLimit
operator|.
name|Committed
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"Max"
operator|.
name|equalsIgnoreCase
argument_list|(
name|config
operator|.
name|getStreamCachingSpoolUsedHeapMemoryLimit
argument_list|()
argument_list|)
condition|)
block|{
name|limit
operator|=
name|StreamCachingStrategy
operator|.
name|SpoolUsedHeapMemoryLimit
operator|.
name|Max
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid option "
operator|+
name|config
operator|.
name|getStreamCachingSpoolUsedHeapMemoryLimit
argument_list|()
operator|+
literal|" must either be Committed or Max"
argument_list|)
throw|;
block|}
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolUsedHeapMemoryLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getStreamCachingSpoolUsedHeapMemoryThreshold
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|camelContext
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolUsedHeapMemoryThreshold
argument_list|(
name|config
operator|.
name|getStreamCachingSpoolUsedHeapMemoryThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|camelContext
operator|.
name|setMessageHistory
argument_list|(
name|config
operator|.
name|isMessageHistory
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setLogMask
argument_list|(
name|config
operator|.
name|isLogMask
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setLogExhaustedMessageBody
argument_list|(
name|config
operator|.
name|isLogExhaustedMessageBody
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setHandleFault
argument_list|(
name|config
operator|.
name|isHandleFault
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setAutoStartup
argument_list|(
name|config
operator|.
name|isAutoStartup
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setAllowUseOriginalMessage
argument_list|(
name|config
operator|.
name|isAllowUseOriginalMessage
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setUseBreadcrumb
argument_list|(
name|config
operator|.
name|isUseBreadcrumb
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setUseDataType
argument_list|(
name|config
operator|.
name|isUseDataType
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setUseMDCLogging
argument_list|(
name|config
operator|.
name|isUseMdcLogging
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setLoadTypeConverters
argument_list|(
name|config
operator|.
name|isLoadTypeConverters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|setEndpointRuntimeStatisticsEnabled
argument_list|(
name|config
operator|.
name|isEndpointRuntimeStatisticsEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|setStatisticsLevel
argument_list|(
name|config
operator|.
name|getJmxManagementStatisticsLevel
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|setManagementNamePattern
argument_list|(
name|config
operator|.
name|getJmxManagementNamePattern
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|setCreateConnector
argument_list|(
name|config
operator|.
name|isJmxCreateConnector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|camelContext
operator|.
name|setPackageScanClassResolver
argument_list|(
operator|new
name|FatJarPackageScanClassResolver
argument_list|()
argument_list|)
expr_stmt|;
comment|// tracing
name|camelContext
operator|.
name|setTracing
argument_list|(
name|config
operator|.
name|isTracing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|camelContext
operator|.
name|getDefaultTracer
argument_list|()
operator|instanceof
name|Tracer
condition|)
block|{
name|Tracer
name|tracer
init|=
operator|(
name|Tracer
operator|)
name|camelContext
operator|.
name|getDefaultTracer
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracer
operator|.
name|getDefaultTraceFormatter
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DefaultTraceFormatter
name|formatter
init|=
name|tracer
operator|.
name|getDefaultTraceFormatter
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getTracerFormatterBreadCrumbLength
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|setBreadCrumbLength
argument_list|(
name|config
operator|.
name|getTracerFormatterBreadCrumbLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getTracerFormatterMaxChars
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|setMaxChars
argument_list|(
name|config
operator|.
name|getTracerFormatterMaxChars
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getTracerFormatterNodeLength
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|formatter
operator|.
name|setNodeLength
argument_list|(
name|config
operator|.
name|getTracerFormatterNodeLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|formatter
operator|.
name|setShowBody
argument_list|(
name|config
operator|.
name|isTraceFormatterShowBody
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowBodyType
argument_list|(
name|config
operator|.
name|isTracerFormatterShowBodyType
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowBreadCrumb
argument_list|(
name|config
operator|.
name|isTraceFormatterShowBreadCrumb
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowException
argument_list|(
name|config
operator|.
name|isTraceFormatterShowException
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowExchangeId
argument_list|(
name|config
operator|.
name|isTraceFormatterShowExchangeId
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowExchangePattern
argument_list|(
name|config
operator|.
name|isTraceFormatterShowExchangePattern
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowHeaders
argument_list|(
name|config
operator|.
name|isTraceFormatterShowHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowNode
argument_list|(
name|config
operator|.
name|isTraceFormatterShowNode
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowProperties
argument_list|(
name|config
operator|.
name|isTraceFormatterShowProperties
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowRouteId
argument_list|(
name|config
operator|.
name|isTraceFormatterShowRouteId
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setShowShortExchangeId
argument_list|(
name|config
operator|.
name|isTraceFormatterShowShortExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|.
name|getXmlRoutesReloadDirectory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ReloadStrategy
name|reload
init|=
operator|new
name|FileWatcherReloadStrategy
argument_list|(
name|config
operator|.
name|getXmlRoutesReloadDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|camelContext
operator|.
name|setReloadStrategy
argument_list|(
name|reload
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getThreadNamePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|setThreadNamePattern
argument_list|(
name|config
operator|.
name|getThreadNamePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// additional advanced configuration which is not configured using CamelConfigurationProperties
name|afterPropertiesSet
argument_list|(
name|applicationContext
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Bean
DECL|method|applicationController (ApplicationContext applicationContext, CamelContext camelContext)
name|CamelSpringBootApplicationController
name|applicationController
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
operator|new
name|CamelSpringBootApplicationController
argument_list|(
name|applicationContext
argument_list|,
name|camelContext
argument_list|)
return|;
block|}
annotation|@
name|Bean
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|RoutesCollector
operator|.
name|class
argument_list|)
DECL|method|routesCollector (ApplicationContext applicationContext, CamelConfigurationProperties config)
name|RoutesCollector
name|routesCollector
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
block|{
name|Collection
argument_list|<
name|CamelContextConfiguration
argument_list|>
name|configurations
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|CamelContextConfiguration
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
return|return
operator|new
name|RoutesCollector
argument_list|(
name|applicationContext
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|configurations
argument_list|)
argument_list|,
name|config
argument_list|)
return|;
block|}
comment|/**      * Default fluent producer template for the bootstrapped Camel context.      * Create the bean lazy as it should only be created if its in-use.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case Service::close (FluentProducerTemplate implements Service)
comment|// would be used for bean destruction. And we want Camel to handle the
comment|// lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|FluentProducerTemplate
operator|.
name|class
argument_list|)
annotation|@
name|Lazy
DECL|method|fluentProducerTemplate (CamelContext camelContext, CamelConfigurationProperties config)
name|FluentProducerTemplate
name|fluentProducerTemplate
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FluentProducerTemplate
name|fluentProducerTemplate
init|=
name|camelContext
operator|.
name|createFluentProducerTemplate
argument_list|(
name|config
operator|.
name|getProducerTemplateCacheSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// we add this fluentProducerTemplate as a Service to CamelContext so that it performs proper lifecycle (start and stop)
name|camelContext
operator|.
name|addService
argument_list|(
name|fluentProducerTemplate
argument_list|)
expr_stmt|;
return|return
name|fluentProducerTemplate
return|;
block|}
comment|/**      * Default producer template for the bootstrapped Camel context.      * Create the bean lazy as it should only be created if its in-use.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case Service::close (ProducerTemplate implements Service)
comment|// would be used for bean destruction. And we want Camel to handle the
comment|// lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|ProducerTemplate
operator|.
name|class
argument_list|)
annotation|@
name|Lazy
DECL|method|producerTemplate (CamelContext camelContext, CamelConfigurationProperties config)
name|ProducerTemplate
name|producerTemplate
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ProducerTemplate
name|producerTemplate
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|(
name|config
operator|.
name|getProducerTemplateCacheSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// we add this producerTemplate as a Service to CamelContext so that it performs proper lifecycle (start and stop)
name|camelContext
operator|.
name|addService
argument_list|(
name|producerTemplate
argument_list|)
expr_stmt|;
return|return
name|producerTemplate
return|;
block|}
comment|/**      * Default consumer template for the bootstrapped Camel context.      * Create the bean lazy as it should only be created if its in-use.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case Service::close (ConsumerTemplate implements Service)
comment|// would be used for bean destruction. And we want Camel to handle the
comment|// lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|ConsumerTemplate
operator|.
name|class
argument_list|)
annotation|@
name|Lazy
DECL|method|consumerTemplate (CamelContext camelContext, CamelConfigurationProperties config)
name|ConsumerTemplate
name|consumerTemplate
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ConsumerTemplate
name|consumerTemplate
init|=
name|camelContext
operator|.
name|createConsumerTemplate
argument_list|(
name|config
operator|.
name|getConsumerTemplateCacheSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// we add this consumerTemplate as a Service to CamelContext so that it performs proper lifecycle (start and stop)
name|camelContext
operator|.
name|addService
argument_list|(
name|consumerTemplate
argument_list|)
expr_stmt|;
return|return
name|consumerTemplate
return|;
block|}
comment|// SpringCamelContext integration
annotation|@
name|Bean
DECL|method|propertiesParser ()
name|PropertiesParser
name|propertiesParser
parameter_list|()
block|{
return|return
operator|new
name|SpringPropertiesParser
argument_list|()
return|;
block|}
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case ShutdownableService::shutdown/Service::close
comment|// (PropertiesComponent extends ServiceSupport) would be used for bean
comment|// destruction. And we want Camel to handle the lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
DECL|method|properties (CamelContext camelContext, PropertiesParser parser)
name|PropertiesComponent
name|properties
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|PropertiesParser
name|parser
parameter_list|)
block|{
if|if
condition|(
name|camelContext
operator|.
name|hasComponent
argument_list|(
literal|"properties"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|camelContext
operator|.
name|getComponent
argument_list|(
literal|"properties"
argument_list|,
name|PropertiesComponent
operator|.
name|class
argument_list|)
return|;
block|}
else|else
block|{
name|PropertiesComponent
name|pc
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setPropertiesParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|pc
return|;
block|}
block|}
comment|/**      * Camel post processor - required to support Camel annotations.      */
annotation|@
name|Bean
DECL|method|camelBeanPostProcessor (ApplicationContext applicationContext)
name|CamelBeanPostProcessor
name|camelBeanPostProcessor
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
name|CamelBeanPostProcessor
name|processor
init|=
operator|new
name|CamelBeanPostProcessor
argument_list|()
decl_stmt|;
name|processor
operator|.
name|setApplicationContext
argument_list|(
name|applicationContext
argument_list|)
expr_stmt|;
return|return
name|processor
return|;
block|}
comment|/**      * Performs additional configuration to lookup beans of Camel types to configure      * advanced configurations.      *<p/>      * Similar code in camel-core-xml module in class org.apache.camel.core.xml.AbstractCamelContextFactoryBean.      */
DECL|method|afterPropertiesSet (ApplicationContext applicationContext, CamelContext camelContext)
specifier|static
name|void
name|afterPropertiesSet
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Tracer
name|tracer
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|Tracer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracer
operator|!=
literal|null
condition|)
block|{
comment|// use formatter if there is a TraceFormatter bean defined
name|TraceFormatter
name|formatter
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|TraceFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|!=
literal|null
condition|)
block|{
name|tracer
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom Tracer: {}"
argument_list|,
name|tracer
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addInterceptStrategy
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
block|}
name|BacklogTracer
name|backlogTracer
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|BacklogTracer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|backlogTracer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom BacklogTracer: {}"
argument_list|,
name|backlogTracer
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addInterceptStrategy
argument_list|(
name|backlogTracer
argument_list|)
expr_stmt|;
block|}
name|HandleFault
name|handleFault
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|HandleFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|handleFault
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom HandleFault: {}"
argument_list|,
name|handleFault
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addInterceptStrategy
argument_list|(
name|handleFault
argument_list|)
expr_stmt|;
block|}
name|InflightRepository
name|inflightRepository
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|InflightRepository
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|inflightRepository
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom InflightRepository: {}"
argument_list|,
name|inflightRepository
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setInflightRepository
argument_list|(
name|inflightRepository
argument_list|)
expr_stmt|;
block|}
name|AsyncProcessorAwaitManager
name|asyncProcessorAwaitManager
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|AsyncProcessorAwaitManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncProcessorAwaitManager
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom AsyncProcessorAwaitManager: {}"
argument_list|,
name|asyncProcessorAwaitManager
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setAsyncProcessorAwaitManager
argument_list|(
name|asyncProcessorAwaitManager
argument_list|)
expr_stmt|;
block|}
name|ManagementStrategy
name|managementStrategy
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|ManagementStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|managementStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ManagementStrategy: {}"
argument_list|,
name|managementStrategy
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setManagementStrategy
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
block|}
name|ManagementNamingStrategy
name|managementNamingStrategy
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|ManagementNamingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|managementNamingStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ManagementNamingStrategy: {}"
argument_list|,
name|managementNamingStrategy
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setManagementNamingStrategy
argument_list|(
name|managementNamingStrategy
argument_list|)
expr_stmt|;
block|}
name|EventFactory
name|eventFactory
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|EventFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EventFactory: {}"
argument_list|,
name|eventFactory
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setEventFactory
argument_list|(
name|eventFactory
argument_list|)
expr_stmt|;
block|}
name|UnitOfWorkFactory
name|unitOfWorkFactory
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|UnitOfWorkFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|unitOfWorkFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom UnitOfWorkFactory: {}"
argument_list|,
name|unitOfWorkFactory
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setUnitOfWorkFactory
argument_list|(
name|unitOfWorkFactory
argument_list|)
expr_stmt|;
block|}
name|RuntimeEndpointRegistry
name|runtimeEndpointRegistry
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|RuntimeEndpointRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|runtimeEndpointRegistry
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom RuntimeEndpointRegistry: {}"
argument_list|,
name|runtimeEndpointRegistry
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setRuntimeEndpointRegistry
argument_list|(
name|runtimeEndpointRegistry
argument_list|)
expr_stmt|;
block|}
comment|// custom type converters defined as<bean>s
name|Map
argument_list|<
name|String
argument_list|,
name|TypeConverters
argument_list|>
name|typeConverters
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|TypeConverters
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeConverters
operator|!=
literal|null
operator|&&
operator|!
name|typeConverters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TypeConverters
argument_list|>
name|entry
range|:
name|typeConverters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TypeConverters
name|converter
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding custom TypeConverters with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|addTypeConverters
argument_list|(
name|converter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the event notifier strategies if defined
name|Map
argument_list|<
name|String
argument_list|,
name|EventNotifier
argument_list|>
name|eventNotifiers
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|EventNotifier
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventNotifiers
operator|!=
literal|null
operator|&&
operator|!
name|eventNotifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|EventNotifier
argument_list|>
name|entry
range|:
name|eventNotifiers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EventNotifier
name|notifier
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getEventNotifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|notifier
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EventNotifier with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|notifier
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set endpoint strategies if defined
name|Map
argument_list|<
name|String
argument_list|,
name|EndpointStrategy
argument_list|>
name|endpointStrategies
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|EndpointStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointStrategies
operator|!=
literal|null
operator|&&
operator|!
name|endpointStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|EndpointStrategy
argument_list|>
name|entry
range|:
name|endpointStrategies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EndpointStrategy
name|strategy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EndpointStrategy with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addRegisterEndpointCallback
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
comment|// shutdown
name|ShutdownStrategy
name|shutdownStrategy
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|ShutdownStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|shutdownStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ShutdownStrategy: "
operator|+
name|shutdownStrategy
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setShutdownStrategy
argument_list|(
name|shutdownStrategy
argument_list|)
expr_stmt|;
block|}
comment|// add global interceptors
name|Map
argument_list|<
name|String
argument_list|,
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|InterceptStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|interceptStrategies
operator|!=
literal|null
operator|&&
operator|!
name|interceptStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InterceptStrategy
argument_list|>
name|entry
range|:
name|interceptStrategies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InterceptStrategy
name|strategy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|camelContext
operator|.
name|getInterceptStrategies
argument_list|()
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom InterceptStrategy with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addInterceptStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set the lifecycle strategy if defined
name|Map
argument_list|<
name|String
argument_list|,
name|LifecycleStrategy
argument_list|>
name|lifecycleStrategies
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|LifecycleStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|lifecycleStrategies
operator|!=
literal|null
operator|&&
operator|!
name|lifecycleStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LifecycleStrategy
argument_list|>
name|entry
range|:
name|lifecycleStrategies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LifecycleStrategy
name|strategy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|camelContext
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom LifecycleStrategy with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addLifecycleStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// cluster service
name|Map
argument_list|<
name|String
argument_list|,
name|CamelClusterService
argument_list|>
name|clusterServices
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|CamelClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterServices
operator|!=
literal|null
operator|&&
operator|!
name|clusterServices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CamelClusterService
argument_list|>
name|entry
range|:
name|clusterServices
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CamelClusterService
name|service
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using CamelClusterService with id: {} and implementation: {}"
argument_list|,
name|service
operator|.
name|getId
argument_list|()
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add route policy factories
name|Map
argument_list|<
name|String
argument_list|,
name|RoutePolicyFactory
argument_list|>
name|routePolicyFactories
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|RoutePolicyFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|routePolicyFactories
operator|!=
literal|null
operator|&&
operator|!
name|routePolicyFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RoutePolicyFactory
argument_list|>
name|entry
range|:
name|routePolicyFactories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RoutePolicyFactory
name|factory
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom RoutePolicyFactory with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addRoutePolicyFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add SSL context parameters
name|GlobalSSLContextParametersSupplier
name|sslContextParametersSupplier
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|GlobalSSLContextParametersSupplier
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslContextParametersSupplier
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|setSSLContextParameters
argument_list|(
name|sslContextParametersSupplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Health check registry
name|HealthCheckRegistry
name|healthCheckRegistry
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|HealthCheckRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|healthCheckRegistry
operator|!=
literal|null
condition|)
block|{
name|healthCheckRegistry
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using HealthCheckRegistry: {}"
argument_list|,
name|healthCheckRegistry
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setHealthCheckRegistry
argument_list|(
name|healthCheckRegistry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|healthCheckRegistry
operator|=
name|camelContext
operator|.
name|getHealthCheckRegistry
argument_list|()
expr_stmt|;
name|healthCheckRegistry
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
comment|// Health check repository
name|Map
argument_list|<
name|String
argument_list|,
name|HealthCheckRepository
argument_list|>
name|repositories
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|HealthCheckRepository
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|repositories
argument_list|)
condition|)
block|{
for|for
control|(
name|HealthCheckRepository
name|repository
range|:
name|repositories
operator|.
name|values
argument_list|()
control|)
block|{
name|healthCheckRegistry
operator|.
name|addRepository
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Health check service
name|HealthCheckService
name|healthCheckService
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|HealthCheckService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|healthCheckService
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using HealthCheckService: {}"
argument_list|,
name|healthCheckService
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addService
argument_list|(
name|healthCheckService
argument_list|)
expr_stmt|;
block|}
comment|// Route controller
name|RouteController
name|routeController
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|RouteController
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|routeController
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using RouteController: "
operator|+
name|routeController
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setRouteController
argument_list|(
name|routeController
argument_list|)
expr_stmt|;
block|}
comment|// UuidGenerator
name|UuidGenerator
name|uuidGenerator
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|UuidGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuidGenerator
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom UuidGenerator: {}"
argument_list|,
name|uuidGenerator
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setUuidGenerator
argument_list|(
name|uuidGenerator
argument_list|)
expr_stmt|;
block|}
comment|// LogListener
name|Map
argument_list|<
name|String
argument_list|,
name|LogListener
argument_list|>
name|logListeners
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|LogListener
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|logListeners
operator|!=
literal|null
operator|&&
operator|!
name|logListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LogListener
argument_list|>
name|entry
range|:
name|logListeners
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LogListener
name|logListener
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|camelContext
operator|.
name|getLogListeners
argument_list|()
operator|.
name|contains
argument_list|(
name|logListener
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom LogListener with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|logListener
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addLogListener
argument_list|(
name|logListener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// ExecutorServiceManager
specifier|final
name|ExecutorServiceManager
name|executorServiceManager
init|=
name|getSingleBeanOfType
argument_list|(
name|applicationContext
argument_list|,
name|ExecutorServiceManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|executorServiceManager
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ExecutorServiceManager: {}"
argument_list|,
name|executorServiceManager
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setExecutorServiceManager
argument_list|(
name|executorServiceManager
argument_list|)
expr_stmt|;
block|}
comment|// set the default thread pool profile if defined
name|initThreadPoolProfiles
argument_list|(
name|applicationContext
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
DECL|method|initThreadPoolProfiles (ApplicationContext applicationContext, CamelContext camelContext)
specifier|private
specifier|static
name|void
name|initThreadPoolProfiles
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|defaultIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// lookup and use custom profiles from the registry
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
name|profiles
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|ThreadPoolProfile
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|profiles
operator|!=
literal|null
operator|&&
operator|!
name|profiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
name|entry
range|:
name|profiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ThreadPoolProfile
name|profile
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
name|profile
operator|.
name|isDefaultProfile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom default ThreadPoolProfile with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|setDefaultThreadPoolProfile
argument_list|(
name|profile
argument_list|)
expr_stmt|;
name|defaultIds
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|registerThreadPoolProfile
argument_list|(
name|profile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// validate at most one is defined
if|if
condition|(
name|defaultIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only exactly one default ThreadPoolProfile is allowed, was "
operator|+
name|defaultIds
operator|.
name|size
argument_list|()
operator|+
literal|" ids: "
operator|+
name|defaultIds
argument_list|)
throw|;
block|}
block|}
DECL|method|getSingleBeanOfType (ApplicationContext applicationContext, Class<T> type)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getSingleBeanOfType
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|beans
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|beans
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|beans
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

