begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ConsumerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FluentProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|DefaultConfigurationConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|main
operator|.
name|RoutesCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BeanRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|CamelBeanPostProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
operator|.
name|ApplicationContextBeanRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|spi
operator|.
name|XmlCamelContextConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Import
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|OrderComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|ConfigurableEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|MutablePropertySources
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|CamelConfigurationProperties
operator|.
name|class
argument_list|)
annotation|@
name|Import
argument_list|(
name|TypeConversionConfiguration
operator|.
name|class
argument_list|)
DECL|class|CamelAutoConfiguration
specifier|public
class|class
name|CamelAutoConfiguration
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelAutoConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Allows to do custom configuration when running XML based Camel in Spring Boot      */
comment|// must be named xmlCamelContextConfigurer
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"xmlCamelContextConfigurer"
argument_list|)
DECL|method|springBootCamelContextConfigurer ()
name|XmlCamelContextConfigurer
name|springBootCamelContextConfigurer
parameter_list|()
block|{
return|return
operator|new
name|SpringBootXmlCamelContextConfigurer
argument_list|()
return|;
block|}
comment|/**      * Spring-aware Camel context for the application. Auto-detects and loads all routes available in the Spring context.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case CamelContext::shutdown or CamelContext::stop would
comment|// be used for bean destruction. As SpringCamelContext is a lifecycle
comment|// bean (implements Lifecycle) additional invocations of shutdown or
comment|// close would be superfluous.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|CamelContext
operator|.
name|class
argument_list|)
DECL|method|camelContext (ApplicationContext applicationContext, CamelConfigurationProperties config)
name|CamelContext
name|camelContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
operator|new
name|SpringBootCamelContext
argument_list|(
name|applicationContext
argument_list|,
name|config
operator|.
name|isWarnOnEarlyShutdown
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|doConfigureCamelContext
argument_list|(
name|applicationContext
argument_list|,
name|camelContext
argument_list|,
name|config
argument_list|)
return|;
block|}
DECL|method|doConfigureCamelContext (ApplicationContext applicationContext, CamelContext camelContext, CamelConfigurationProperties config)
specifier|static
name|CamelContext
name|doConfigureCamelContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|camelContext
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// initialize properties component eager
name|PropertiesComponent
name|pc
init|=
name|applicationContext
operator|.
name|getBeanProvider
argument_list|(
name|PropertiesComponent
operator|.
name|class
argument_list|)
operator|.
name|getIfAvailable
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|setPropertiesComponent
argument_list|(
name|pc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BeanRepository
argument_list|>
name|repositories
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|BeanRepository
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|repositories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|BeanRepository
argument_list|>
name|reps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// include default bean repository as well
name|reps
operator|.
name|add
argument_list|(
operator|new
name|ApplicationContextBeanRepository
argument_list|(
name|applicationContext
argument_list|)
argument_list|)
expr_stmt|;
comment|// and then any custom
name|reps
operator|.
name|addAll
argument_list|(
name|repositories
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
comment|// sort by ordered
name|OrderComparator
operator|.
name|sort
argument_list|(
name|reps
argument_list|)
expr_stmt|;
comment|// and plugin as new registry
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|setRegistry
argument_list|(
operator|new
name|DefaultRegistry
argument_list|(
name|reps
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|config
operator|.
name|getFileConfigurations
argument_list|()
argument_list|)
condition|)
block|{
name|Environment
name|env
init|=
name|applicationContext
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|env
operator|instanceof
name|ConfigurableEnvironment
condition|)
block|{
name|MutablePropertySources
name|sources
init|=
operator|(
operator|(
name|ConfigurableEnvironment
operator|)
name|env
operator|)
operator|.
name|getPropertySources
argument_list|()
decl_stmt|;
if|if
condition|(
name|sources
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|sources
operator|.
name|contains
argument_list|(
literal|"camel-file-configuration"
argument_list|)
condition|)
block|{
name|sources
operator|.
name|addFirst
argument_list|(
operator|new
name|FilePropertySource
argument_list|(
literal|"camel-file-configuration"
argument_list|,
name|applicationContext
argument_list|,
name|config
operator|.
name|getFileConfigurations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|camelContext
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|setPackageScanClassResolver
argument_list|(
operator|new
name|FatJarPackageScanClassResolver
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getRouteFilterIncludePattern
argument_list|()
operator|!=
literal|null
operator|||
name|config
operator|.
name|getRouteFilterExcludePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Route filtering pattern: include={}, exclude={}"
argument_list|,
name|config
operator|.
name|getRouteFilterIncludePattern
argument_list|()
argument_list|,
name|config
operator|.
name|getRouteFilterExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|getExtension
argument_list|(
name|Model
operator|.
name|class
argument_list|)
operator|.
name|setRouteFilterPattern
argument_list|(
name|config
operator|.
name|getRouteFilterIncludePattern
argument_list|()
argument_list|,
name|config
operator|.
name|getRouteFilterExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// configure the common/default options
name|DefaultConfigurationConfigurer
operator|.
name|configure
argument_list|(
name|camelContext
argument_list|,
name|config
argument_list|)
expr_stmt|;
comment|// lookup and configure SPI beans
name|DefaultConfigurationConfigurer
operator|.
name|afterPropertiesSet
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
return|return
name|camelContext
return|;
block|}
annotation|@
name|Bean
DECL|method|applicationController (ApplicationContext applicationContext, CamelContext camelContext)
name|CamelSpringBootApplicationController
name|applicationController
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
return|return
operator|new
name|CamelSpringBootApplicationController
argument_list|(
name|applicationContext
argument_list|,
name|camelContext
argument_list|)
return|;
block|}
annotation|@
name|Bean
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|RoutesCollector
operator|.
name|class
argument_list|)
DECL|method|routesCollector (ApplicationContext applicationContext)
name|RoutesCollector
name|routesCollector
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
return|return
operator|new
name|SpringBootRoutesCollector
argument_list|(
name|applicationContext
argument_list|)
return|;
block|}
annotation|@
name|Bean
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|CamelSpringBootApplicationListener
operator|.
name|class
argument_list|)
DECL|method|routesCollectorListener (ApplicationContext applicationContext, CamelConfigurationProperties config, RoutesCollector routesCollector)
name|CamelSpringBootApplicationListener
name|routesCollectorListener
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|,
name|RoutesCollector
name|routesCollector
parameter_list|)
block|{
name|Collection
argument_list|<
name|CamelContextConfiguration
argument_list|>
name|configurations
init|=
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|CamelContextConfiguration
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
return|return
operator|new
name|CamelSpringBootApplicationListener
argument_list|(
name|applicationContext
argument_list|,
operator|new
name|ArrayList
argument_list|(
name|configurations
argument_list|)
argument_list|,
name|config
argument_list|,
name|routesCollector
argument_list|)
return|;
block|}
comment|/**      * Default fluent producer template for the bootstrapped Camel context.      * Create the bean lazy as it should only be created if its in-use.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case Service::close (FluentProducerTemplate implements Service)
comment|// would be used for bean destruction. And we want Camel to handle the
comment|// lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|FluentProducerTemplate
operator|.
name|class
argument_list|)
annotation|@
name|Lazy
DECL|method|fluentProducerTemplate (CamelContext camelContext, CamelConfigurationProperties config)
name|FluentProducerTemplate
name|fluentProducerTemplate
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FluentProducerTemplate
name|fluentProducerTemplate
init|=
name|camelContext
operator|.
name|createFluentProducerTemplate
argument_list|(
name|config
operator|.
name|getProducerTemplateCacheSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// we add this fluentProducerTemplate as a Service to CamelContext so that it performs proper lifecycle (start and stop)
name|camelContext
operator|.
name|addService
argument_list|(
name|fluentProducerTemplate
argument_list|)
expr_stmt|;
return|return
name|fluentProducerTemplate
return|;
block|}
comment|/**      * Default producer template for the bootstrapped Camel context.      * Create the bean lazy as it should only be created if its in-use.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case Service::close (ProducerTemplate implements Service)
comment|// would be used for bean destruction. And we want Camel to handle the
comment|// lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|ProducerTemplate
operator|.
name|class
argument_list|)
annotation|@
name|Lazy
DECL|method|producerTemplate (CamelContext camelContext, CamelConfigurationProperties config)
name|ProducerTemplate
name|producerTemplate
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ProducerTemplate
name|producerTemplate
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|(
name|config
operator|.
name|getProducerTemplateCacheSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// we add this producerTemplate as a Service to CamelContext so that it performs proper lifecycle (start and stop)
name|camelContext
operator|.
name|addService
argument_list|(
name|producerTemplate
argument_list|)
expr_stmt|;
return|return
name|producerTemplate
return|;
block|}
comment|/**      * Default consumer template for the bootstrapped Camel context.      * Create the bean lazy as it should only be created if its in-use.      */
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case Service::close (ConsumerTemplate implements Service)
comment|// would be used for bean destruction. And we want Camel to handle the
comment|// lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|ConsumerTemplate
operator|.
name|class
argument_list|)
annotation|@
name|Lazy
DECL|method|consumerTemplate (CamelContext camelContext, CamelConfigurationProperties config)
name|ConsumerTemplate
name|consumerTemplate
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|CamelConfigurationProperties
name|config
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ConsumerTemplate
name|consumerTemplate
init|=
name|camelContext
operator|.
name|createConsumerTemplate
argument_list|(
name|config
operator|.
name|getConsumerTemplateCacheSize
argument_list|()
argument_list|)
decl_stmt|;
comment|// we add this consumerTemplate as a Service to CamelContext so that it performs proper lifecycle (start and stop)
name|camelContext
operator|.
name|addService
argument_list|(
name|consumerTemplate
argument_list|)
expr_stmt|;
return|return
name|consumerTemplate
return|;
block|}
comment|// SpringCamelContext integration
annotation|@
name|Bean
DECL|method|propertiesParser ()
name|PropertiesParser
name|propertiesParser
parameter_list|()
block|{
return|return
operator|new
name|SpringPropertiesParser
argument_list|()
return|;
block|}
comment|// We explicitly declare the destroyMethod to be "" as the Spring @Bean
comment|// annotation defaults to AbstractBeanDefinition.INFER_METHOD otherwise
comment|// and in that case ShutdownableService::shutdown/Service::close
comment|// (PropertiesComponent extends ServiceSupport) would be used for bean
comment|// destruction. And we want Camel to handle the lifecycle.
annotation|@
name|Bean
argument_list|(
name|destroyMethod
operator|=
literal|""
argument_list|)
DECL|method|properties (PropertiesParser parser)
name|PropertiesComponent
name|properties
parameter_list|(
name|PropertiesParser
name|parser
parameter_list|)
block|{
name|PropertiesComponent
name|pc
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setPropertiesParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|pc
return|;
block|}
comment|/**      * Camel post processor - required to support Camel annotations.      */
annotation|@
name|Bean
DECL|method|camelBeanPostProcessor (ApplicationContext applicationContext)
name|CamelBeanPostProcessor
name|camelBeanPostProcessor
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
return|return
operator|new
name|CamelSpringBootBeanPostProcessor
argument_list|(
name|applicationContext
argument_list|)
return|;
block|}
block|}
end_class

end_unit

