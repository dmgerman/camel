begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|StaticServiceDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
operator|.
name|GroupCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|CamelCloudConfigurationProperties
operator|.
name|class
argument_list|)
annotation|@
name|Conditional
argument_list|(
name|CamelCloudServiceDiscoveryAutoConfiguration
operator|.
name|Condition
operator|.
name|class
argument_list|)
DECL|class|CamelCloudServiceDiscoveryAutoConfiguration
specifier|public
class|class
name|CamelCloudServiceDiscoveryAutoConfiguration
block|{
annotation|@
name|Lazy
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"static-service-discovery"
argument_list|)
DECL|method|staticServiceDiscovery (CamelCloudConfigurationProperties properties)
specifier|public
name|ServiceDiscovery
name|staticServiceDiscovery
parameter_list|(
name|CamelCloudConfigurationProperties
name|properties
parameter_list|)
block|{
name|StaticServiceDiscovery
name|staticServiceDiscovery
init|=
operator|new
name|StaticServiceDiscovery
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|services
init|=
name|properties
operator|.
name|getServiceDiscovery
argument_list|()
operator|.
name|getServices
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|services
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|staticServiceDiscovery
operator|.
name|addServers
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|staticServiceDiscovery
return|;
block|}
annotation|@
name|Lazy
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"service-discovery"
argument_list|)
DECL|method|serviceDiscovery ( CamelContext camelContext, CamelCloudConfigurationProperties properties, List<ServiceDiscovery> serviceDiscoveryList)
specifier|public
name|CamelCloudServiceDiscovery
name|serviceDiscovery
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|CamelCloudConfigurationProperties
name|properties
parameter_list|,
name|List
argument_list|<
name|ServiceDiscovery
argument_list|>
name|serviceDiscoveryList
parameter_list|)
throws|throws
name|NoTypeConversionAvailableException
block|{
name|String
name|cacheTimeout
init|=
name|properties
operator|.
name|getServiceDiscovery
argument_list|()
operator|.
name|getCacheTimeout
argument_list|()
decl_stmt|;
name|Long
name|timeout
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cacheTimeout
operator|!=
literal|null
condition|)
block|{
name|timeout
operator|=
name|camelContext
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CamelCloudServiceDiscovery
argument_list|(
name|timeout
argument_list|,
name|serviceDiscoveryList
argument_list|)
return|;
block|}
comment|// *******************************
comment|// Condition
comment|// *******************************
DECL|class|Condition
specifier|public
specifier|static
class|class
name|Condition
extends|extends
name|GroupCondition
block|{
DECL|method|Condition ()
specifier|public
name|Condition
parameter_list|()
block|{
name|super
argument_list|(
literal|"camel.cloud"
argument_list|,
literal|"camel.cloud.service-discovery"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

