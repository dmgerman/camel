begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|TimePatternConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SupervisingRouteController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SupervisingRouteControllerFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|SupervisingRouteControllerConfiguration
operator|.
name|BackOffConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|SupervisingRouteControllerConfiguration
operator|.
name|RouteConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|backoff
operator|.
name|BackOff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|ConfigurableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureBefore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|AutoConfigureBefore
argument_list|(
name|CamelAutoConfiguration
operator|.
name|class
argument_list|)
annotation|@
name|ConditionalOnProperty
argument_list|(
name|prefix
operator|=
literal|"camel.supervising.controller"
argument_list|,
name|name
operator|=
literal|"enabled"
argument_list|)
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|SupervisingRouteControllerConfiguration
operator|.
name|class
argument_list|)
DECL|class|SupervisingRouteControllerAutoConfiguration
specifier|public
class|class
name|SupervisingRouteControllerAutoConfiguration
block|{
annotation|@
name|Autowired
DECL|field|configuration
specifier|private
name|SupervisingRouteControllerConfiguration
name|configuration
decl_stmt|;
annotation|@
name|Autowired
argument_list|(
name|required
operator|=
literal|false
argument_list|)
DECL|field|filters
specifier|private
name|List
argument_list|<
name|SupervisingRouteController
operator|.
name|Filter
argument_list|>
name|filters
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
annotation|@
name|Bean
annotation|@
name|Scope
argument_list|(
name|ConfigurableBeanFactory
operator|.
name|SCOPE_SINGLETON
argument_list|)
annotation|@
name|ConditionalOnMissingBean
DECL|method|routeController ()
specifier|public
name|RouteController
name|routeController
parameter_list|()
block|{
name|SupervisingRouteController
name|controller
init|=
operator|new
name|SupervisingRouteController
argument_list|()
decl_stmt|;
comment|// Initial delay
name|Optional
operator|.
name|ofNullable
argument_list|(
name|configuration
operator|.
name|getInitialDelay
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|TimePatternConverter
operator|::
name|toMilliSeconds
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|controller
operator|::
name|setInitialDelay
argument_list|)
expr_stmt|;
comment|// Filter list
name|controller
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
comment|// Back off
name|controller
operator|.
name|setDefaultBackOff
argument_list|(
name|configureBackOff
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|configuration
operator|.
name|getDefaultBackOff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RouteConfiguration
argument_list|>
name|entry
range|:
name|configuration
operator|.
name|getRoutes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|RouteConfiguration
name|cfg
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|BackOff
argument_list|>
name|defaultBackOff
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|controller
operator|.
name|getDefaultBackOff
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cfg
operator|.
name|isSupervised
argument_list|()
condition|)
block|{
comment|// Mark this route as excluded from supervisor
name|controller
operator|.
name|addFilter
argument_list|(
operator|new
name|SupervisingRouteControllerFilters
operator|.
name|BlackList
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// configure teh route
name|controller
operator|.
name|setBackOff
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|configureBackOff
argument_list|(
name|defaultBackOff
argument_list|,
name|cfg
operator|.
name|getBackOff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|controller
return|;
block|}
DECL|method|configureBackOff (Optional<BackOff> template, BackOffConfiguration conf)
specifier|private
name|BackOff
name|configureBackOff
parameter_list|(
name|Optional
argument_list|<
name|BackOff
argument_list|>
name|template
parameter_list|,
name|BackOffConfiguration
name|conf
parameter_list|)
block|{
specifier|final
name|BackOff
operator|.
name|Builder
name|builder
init|=
name|template
operator|.
name|map
argument_list|(
name|BackOff
operator|::
name|builder
argument_list|)
operator|.
name|orElseGet
argument_list|(
name|BackOff
operator|::
name|builder
argument_list|)
decl_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|conf
operator|.
name|getDelay
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|TimePatternConverter
operator|::
name|toMilliSeconds
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|builder
operator|::
name|delay
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|conf
operator|.
name|getMaxDelay
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|TimePatternConverter
operator|::
name|toMilliSeconds
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|builder
operator|::
name|maxDelay
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|conf
operator|.
name|getMaxElapsedTime
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|TimePatternConverter
operator|::
name|toMilliSeconds
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|builder
operator|::
name|maxElapsedTime
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|conf
operator|.
name|getMaxAttempts
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|builder
operator|::
name|maxAttempts
argument_list|)
expr_stmt|;
name|Optional
operator|.
name|ofNullable
argument_list|(
name|conf
operator|.
name|getMultiplier
argument_list|()
argument_list|)
operator|.
name|ifPresent
argument_list|(
name|builder
operator|::
name|multiplier
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

