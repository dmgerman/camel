begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Generates relaxed name variations from a given source.  *  * @author Phillip Webb  * @author Dave Syer  * @see RelaxedPropertyResolver  *  * Source code copied from spring-boot 1.5.6.RELEASE  */
end_comment

begin_class
DECL|class|RelaxedNames
specifier|public
specifier|final
class|class
name|RelaxedNames
implements|implements
name|Iterable
argument_list|<
name|String
argument_list|>
block|{
DECL|field|CAMEL_CASE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|CAMEL_CASE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^A-Z-])([A-Z])"
argument_list|)
decl_stmt|;
DECL|field|SEPARATED_TO_CAMEL_CASE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SEPARATED_TO_CAMEL_CASE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[_\\-.]"
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Create a new {@link RelaxedNames} instance.      * @param name the source name. For the maximum number of variations specify the name      * using dashed notation (e.g. {@literal my-property-name}      */
DECL|method|RelaxedNames (String name)
specifier|public
name|RelaxedNames
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
operator|==
literal|null
condition|?
literal|""
else|:
name|name
expr_stmt|;
name|initialize
argument_list|(
name|RelaxedNames
operator|.
name|this
operator|.
name|name
argument_list|,
name|this
operator|.
name|values
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|this
operator|.
name|values
operator|.
name|iterator
argument_list|()
return|;
block|}
DECL|method|initialize (String name, Set<String> values)
specifier|private
name|void
name|initialize
parameter_list|(
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Variation
name|variation
range|:
name|Variation
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Manipulation
name|manipulation
range|:
name|Manipulation
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|result
init|=
name|name
decl_stmt|;
name|result
operator|=
name|manipulation
operator|.
name|apply
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|variation
operator|.
name|apply
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|initialize
argument_list|(
name|result
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Name variations.      */
DECL|enum|Variation
enum|enum
name|Variation
block|{
DECL|enumConstant|NONE
name|NONE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
block|,
DECL|enumConstant|LOWERCASE
name|LOWERCASE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
name|value
else|:
name|value
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|UPPERCASE
name|UPPERCASE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|isEmpty
argument_list|()
condition|?
name|value
else|:
name|value
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
block|;
DECL|method|apply (String value)
specifier|public
specifier|abstract
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
function_decl|;
block|}
comment|/**      * Name manipulations.      */
DECL|enum|Manipulation
enum|enum
name|Manipulation
block|{
DECL|enumConstant|NONE
name|NONE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
block|,
DECL|enumConstant|HYPHEN_TO_UNDERSCORE
name|HYPHEN_TO_UNDERSCORE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|!=
operator|-
literal|1
condition|?
name|value
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
else|:
name|value
return|;
block|}
block|}
block|,
DECL|enumConstant|UNDERSCORE_TO_PERIOD
name|UNDERSCORE_TO_PERIOD
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
operator|!=
operator|-
literal|1
condition|?
name|value
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'.'
argument_list|)
else|:
name|value
return|;
block|}
block|}
block|,
DECL|enumConstant|PERIOD_TO_UNDERSCORE
name|PERIOD_TO_UNDERSCORE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|!=
operator|-
literal|1
condition|?
name|value
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
else|:
name|value
return|;
block|}
block|}
block|,
DECL|enumConstant|CAMELCASE_TO_UNDERSCORE
name|CAMELCASE_TO_UNDERSCORE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|value
return|;
block|}
name|Matcher
name|matcher
init|=
name|CAMEL_CASE_PATTERN
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|value
return|;
block|}
name|matcher
operator|=
name|matcher
operator|.
name|reset
argument_list|()
expr_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|result
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|'_'
operator|+
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|CAMELCASE_TO_HYPHEN
name|CAMELCASE_TO_HYPHEN
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|value
return|;
block|}
name|Matcher
name|matcher
init|=
name|CAMEL_CASE_PATTERN
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
return|return
name|value
return|;
block|}
name|matcher
operator|=
name|matcher
operator|.
name|reset
argument_list|()
expr_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|result
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|+
literal|'-'
operator|+
name|StringUtils
operator|.
name|uncapitalize
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|matcher
operator|.
name|appendTail
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|,
DECL|enumConstant|SEPARATED_TO_CAMELCASE
name|SEPARATED_TO_CAMELCASE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|separatedToCamelCase
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
block|,
DECL|enumConstant|CASE_INSENSITIVE_SEPARATED_TO_CAMELCASE
name|CASE_INSENSITIVE_SEPARATED_TO_CAMELCASE
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|separatedToCamelCase
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
block|;
DECL|field|SUFFIXES
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|SUFFIXES
init|=
operator|new
name|char
index|[]
block|{
literal|'_'
block|,
literal|'-'
block|,
literal|'.'
block|}
decl_stmt|;
DECL|method|apply (String value)
specifier|public
specifier|abstract
name|String
name|apply
parameter_list|(
name|String
name|value
parameter_list|)
function_decl|;
DECL|method|separatedToCamelCase (String value, boolean caseInsensitive)
specifier|private
specifier|static
name|String
name|separatedToCamelCase
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|caseInsensitive
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|value
return|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|SEPARATED_TO_CAMEL_CASE_PATTERN
operator|.
name|split
argument_list|(
name|value
argument_list|)
control|)
block|{
name|field
operator|=
name|caseInsensitive
condition|?
name|field
operator|.
name|toLowerCase
argument_list|()
else|:
name|field
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
name|field
else|:
name|StringUtils
operator|.
name|capitalize
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|char
name|lastChar
init|=
name|value
operator|.
name|charAt
argument_list|(
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|char
name|suffix
range|:
name|SUFFIXES
control|)
block|{
if|if
condition|(
name|lastChar
operator|==
name|suffix
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Return a {@link RelaxedNames} for the given source camelCase source name.      * @param name the source name in camelCase      * @return the relaxed names      */
DECL|method|forCamelCase (String name)
specifier|public
specifier|static
name|RelaxedNames
name|forCamelCase
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|name
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
operator|&&
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|result
operator|.
name|charAt
argument_list|(
name|result
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'-'
condition|?
literal|"-"
operator|+
name|Character
operator|.
name|toLowerCase
argument_list|(
name|c
argument_list|)
else|:
name|c
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RelaxedNames
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

