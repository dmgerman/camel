begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.security
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|CipherSuitesParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|FilterParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|KeyManagersParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextClientParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SSLContextServerParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SecureRandomParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|SecureSocketProtocolsParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|jsse
operator|.
name|TrustManagersParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.ssl"
argument_list|)
DECL|class|CamelSSLConfigurationProperties
specifier|public
class|class
name|CamelSSLConfigurationProperties
block|{
comment|// These option must be copied from camel-core SSLContextParameters to
comment|// allow spring boot to include them in its spring-configuration-metadata.json file
comment|/**      * Global Camel security configuration.      */
DECL|field|config
specifier|private
name|SSLContextParameters
name|config
init|=
operator|new
name|SSLContextParameters
argument_list|()
decl_stmt|;
comment|/**      * The optional key manager configuration for creating the      * KeyManager used in constructing an SSLContext.      */
DECL|field|keyManagers
specifier|private
name|KeyManagersParameters
name|keyManagers
decl_stmt|;
comment|/**      * The optional trust manager configuration for creating the      * TrustManager used in constructing an SSLContext.      */
DECL|field|trustManagers
specifier|private
name|TrustManagersParameters
name|trustManagers
decl_stmt|;
comment|/**      * The optional secure random configuration options to use for constructing      * the SecureRandom used in the creation of an SSLContext.      */
DECL|field|secureRandom
specifier|private
name|SecureRandomParameters
name|secureRandom
decl_stmt|;
comment|/**      * The optional configuration options to be applied purely to the client side settings      * of the SSLContext. Settings specified here override any duplicate settings      * provided at the overall level by this class. These parameters apply to      * SSLSocketFactory and SSLEngine produced by the SSLContext      * produced from this class as well as to the SSLContext itself.      */
DECL|field|clientParameters
specifier|private
name|SSLContextClientParameters
name|clientParameters
decl_stmt|;
comment|/**      * The optional configuration options to be applied purely to the server side settings      * of the SSLContext. Settings specified here override any duplicate settings      * provided at the overall level by this class. These parameters apply to      * SSLServerSocketFactory and SSLEngine produced by the SSLContext      * produced from this class as well as to the SSLContext itself.      */
DECL|field|serverParameters
specifier|private
name|SSLContextServerParameters
name|serverParameters
decl_stmt|;
comment|/**      * The optional provider identifier for the JSSE implementation to use when      * constructing an SSLContext.      */
DECL|field|provider
specifier|private
name|String
name|provider
decl_stmt|;
comment|/**      * The optional protocol for the secure sockets created by the SSLContext      * represented by this instance's configuration. See Appendix A in the      * Java Secure Socket Extension Reference Guide for information about      * standard protocol names.      */
DECL|field|secureSocketProtocol
specifier|private
name|String
name|secureSocketProtocol
decl_stmt|;
comment|/**      * An optional certificate alias to use. This is useful when the keystore has multiple      * certificates.      */
DECL|field|certAlias
specifier|private
name|String
name|certAlias
decl_stmt|;
comment|/**      * The optional explicitly configured cipher suites for this configuration.      */
DECL|field|cipherSuites
specifier|private
name|CipherSuitesParameters
name|cipherSuites
decl_stmt|;
comment|/**      * The optional cipher suite filter configuration for this configuration.      */
DECL|field|cipherSuitesFilter
specifier|private
name|FilterParameters
name|cipherSuitesFilter
decl_stmt|;
comment|/**      * The optional explicitly configured secure socket protocol names for this configuration.      */
DECL|field|secureSocketProtocols
specifier|private
name|SecureSocketProtocolsParameters
name|secureSocketProtocols
decl_stmt|;
comment|/**      * The option secure socket protocol name filter configuration for this configuration.      */
DECL|field|secureSocketProtocolsFilter
specifier|private
name|FilterParameters
name|secureSocketProtocolsFilter
decl_stmt|;
comment|/**      * The optional SSLSessionContext timeout time for javax.net.ssl.SSLSession in seconds.      */
DECL|field|sessionTimeout
specifier|private
name|String
name|sessionTimeout
decl_stmt|;
DECL|method|getConfig ()
specifier|public
name|SSLContextParameters
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
DECL|method|setConfig (SSLContextParameters config)
specifier|public
name|void
name|setConfig
parameter_list|(
name|SSLContextParameters
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
DECL|method|getKeyManagers ()
specifier|public
name|KeyManagersParameters
name|getKeyManagers
parameter_list|()
block|{
return|return
name|config
operator|.
name|getKeyManagers
argument_list|()
return|;
block|}
DECL|method|setKeyManagers (KeyManagersParameters keyManagers)
specifier|public
name|void
name|setKeyManagers
parameter_list|(
name|KeyManagersParameters
name|keyManagers
parameter_list|)
block|{
name|config
operator|.
name|setKeyManagers
argument_list|(
name|keyManagers
argument_list|)
expr_stmt|;
block|}
DECL|method|getTrustManagers ()
specifier|public
name|TrustManagersParameters
name|getTrustManagers
parameter_list|()
block|{
return|return
name|config
operator|.
name|getTrustManagers
argument_list|()
return|;
block|}
DECL|method|setTrustManagers (TrustManagersParameters trustManagers)
specifier|public
name|void
name|setTrustManagers
parameter_list|(
name|TrustManagersParameters
name|trustManagers
parameter_list|)
block|{
name|config
operator|.
name|setTrustManagers
argument_list|(
name|trustManagers
argument_list|)
expr_stmt|;
block|}
DECL|method|getSecureRandom ()
specifier|public
name|SecureRandomParameters
name|getSecureRandom
parameter_list|()
block|{
return|return
name|config
operator|.
name|getSecureRandom
argument_list|()
return|;
block|}
DECL|method|setSecureRandom (SecureRandomParameters secureRandom)
specifier|public
name|void
name|setSecureRandom
parameter_list|(
name|SecureRandomParameters
name|secureRandom
parameter_list|)
block|{
name|config
operator|.
name|setSecureRandom
argument_list|(
name|secureRandom
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientParameters ()
specifier|public
name|SSLContextClientParameters
name|getClientParameters
parameter_list|()
block|{
return|return
name|config
operator|.
name|getClientParameters
argument_list|()
return|;
block|}
DECL|method|setClientParameters (SSLContextClientParameters clientParameters)
specifier|public
name|void
name|setClientParameters
parameter_list|(
name|SSLContextClientParameters
name|clientParameters
parameter_list|)
block|{
name|config
operator|.
name|setClientParameters
argument_list|(
name|clientParameters
argument_list|)
expr_stmt|;
block|}
DECL|method|getServerParameters ()
specifier|public
name|SSLContextServerParameters
name|getServerParameters
parameter_list|()
block|{
return|return
name|config
operator|.
name|getServerParameters
argument_list|()
return|;
block|}
DECL|method|setServerParameters (SSLContextServerParameters serverParameters)
specifier|public
name|void
name|setServerParameters
parameter_list|(
name|SSLContextServerParameters
name|serverParameters
parameter_list|)
block|{
name|config
operator|.
name|setServerParameters
argument_list|(
name|serverParameters
argument_list|)
expr_stmt|;
block|}
DECL|method|getProvider ()
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
name|config
operator|.
name|getProvider
argument_list|()
return|;
block|}
DECL|method|setProvider (String provider)
specifier|public
name|void
name|setProvider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
name|config
operator|.
name|setProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
DECL|method|getSecureSocketProtocol ()
specifier|public
name|String
name|getSecureSocketProtocol
parameter_list|()
block|{
return|return
name|config
operator|.
name|getSecureSocketProtocol
argument_list|()
return|;
block|}
DECL|method|setSecureSocketProtocol (String secureSocketProtocol)
specifier|public
name|void
name|setSecureSocketProtocol
parameter_list|(
name|String
name|secureSocketProtocol
parameter_list|)
block|{
name|config
operator|.
name|setSecureSocketProtocol
argument_list|(
name|secureSocketProtocol
argument_list|)
expr_stmt|;
block|}
DECL|method|getCertAlias ()
specifier|public
name|String
name|getCertAlias
parameter_list|()
block|{
return|return
name|config
operator|.
name|getCertAlias
argument_list|()
return|;
block|}
DECL|method|setCertAlias (String certAlias)
specifier|public
name|void
name|setCertAlias
parameter_list|(
name|String
name|certAlias
parameter_list|)
block|{
name|config
operator|.
name|setCertAlias
argument_list|(
name|certAlias
argument_list|)
expr_stmt|;
block|}
DECL|method|getCipherSuites ()
specifier|public
name|CipherSuitesParameters
name|getCipherSuites
parameter_list|()
block|{
return|return
name|config
operator|.
name|getCipherSuites
argument_list|()
return|;
block|}
DECL|method|setCipherSuites (CipherSuitesParameters cipherSuites)
specifier|public
name|void
name|setCipherSuites
parameter_list|(
name|CipherSuitesParameters
name|cipherSuites
parameter_list|)
block|{
name|config
operator|.
name|setCipherSuites
argument_list|(
name|cipherSuites
argument_list|)
expr_stmt|;
block|}
DECL|method|getCipherSuitesFilter ()
specifier|public
name|FilterParameters
name|getCipherSuitesFilter
parameter_list|()
block|{
return|return
name|config
operator|.
name|getCipherSuitesFilter
argument_list|()
return|;
block|}
DECL|method|setCipherSuitesFilter (FilterParameters cipherSuitesFilter)
specifier|public
name|void
name|setCipherSuitesFilter
parameter_list|(
name|FilterParameters
name|cipherSuitesFilter
parameter_list|)
block|{
name|config
operator|.
name|setCipherSuitesFilter
argument_list|(
name|cipherSuitesFilter
argument_list|)
expr_stmt|;
block|}
DECL|method|getSecureSocketProtocols ()
specifier|public
name|SecureSocketProtocolsParameters
name|getSecureSocketProtocols
parameter_list|()
block|{
return|return
name|config
operator|.
name|getSecureSocketProtocols
argument_list|()
return|;
block|}
DECL|method|setSecureSocketProtocols (SecureSocketProtocolsParameters secureSocketProtocols)
specifier|public
name|void
name|setSecureSocketProtocols
parameter_list|(
name|SecureSocketProtocolsParameters
name|secureSocketProtocols
parameter_list|)
block|{
name|config
operator|.
name|setSecureSocketProtocols
argument_list|(
name|secureSocketProtocols
argument_list|)
expr_stmt|;
block|}
DECL|method|getSecureSocketProtocolsFilter ()
specifier|public
name|FilterParameters
name|getSecureSocketProtocolsFilter
parameter_list|()
block|{
return|return
name|config
operator|.
name|getSecureSocketProtocolsFilter
argument_list|()
return|;
block|}
DECL|method|setSecureSocketProtocolsFilter (FilterParameters secureSocketProtocolsFilter)
specifier|public
name|void
name|setSecureSocketProtocolsFilter
parameter_list|(
name|FilterParameters
name|secureSocketProtocolsFilter
parameter_list|)
block|{
name|config
operator|.
name|setSecureSocketProtocolsFilter
argument_list|(
name|secureSocketProtocolsFilter
argument_list|)
expr_stmt|;
block|}
DECL|method|getSessionTimeout ()
specifier|public
name|String
name|getSessionTimeout
parameter_list|()
block|{
return|return
name|config
operator|.
name|getSessionTimeout
argument_list|()
return|;
block|}
DECL|method|setSessionTimeout (String sessionTimeout)
specifier|public
name|void
name|setSessionTimeout
parameter_list|(
name|String
name|sessionTimeout
parameter_list|)
block|{
name|config
operator|.
name|setSessionTimeout
argument_list|(
name|sessionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

