begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|cloud
operator|.
name|ServiceCallDefinitionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Language
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
operator|.
name|GroupCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnMissingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|EnableConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|ConditionalOnBean
argument_list|(
block|{
name|CamelCloudAutoConfiguration
operator|.
name|class
block|,
name|CamelContext
operator|.
name|class
block|}
argument_list|)
annotation|@
name|EnableConfigurationProperties
argument_list|(
name|CamelCloudConfigurationProperties
operator|.
name|class
argument_list|)
annotation|@
name|Conditional
argument_list|(
name|CamelCloudServiceCallConfigurationAutoConfiguration
operator|.
name|ServiceCallCondition
operator|.
name|class
argument_list|)
DECL|class|CamelCloudServiceCallConfigurationAutoConfiguration
specifier|public
class|class
name|CamelCloudServiceCallConfigurationAutoConfiguration
block|{
annotation|@
name|Autowired
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Autowired
DECL|field|configurationProperties
specifier|private
name|CamelCloudConfigurationProperties
name|configurationProperties
decl_stmt|;
annotation|@
name|Lazy
annotation|@
name|Bean
argument_list|(
name|name
operator|=
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_SERVICE_CALL_CONFIG_ID
argument_list|)
annotation|@
name|ConditionalOnMissingBean
argument_list|(
name|name
operator|=
name|ServiceCallDefinitionConstants
operator|.
name|DEFAULT_SERVICE_CALL_CONFIG_ID
argument_list|)
DECL|method|serviceCallConfiguration ()
specifier|public
name|ServiceCallConfigurationDefinition
name|serviceCallConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ServiceCallConfigurationDefinition
name|definition
init|=
operator|new
name|ServiceCallConfigurationDefinition
argument_list|()
decl_stmt|;
specifier|final
name|CamelCloudConfigurationProperties
operator|.
name|ServiceCall
name|serviceCall
init|=
name|configurationProperties
operator|.
name|getServiceCall
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|serviceCall
operator|.
name|getComponent
argument_list|()
argument_list|,
name|definition
operator|::
name|setComponent
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|serviceCall
operator|.
name|getUri
argument_list|()
argument_list|,
name|definition
operator|::
name|setUri
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|serviceCall
operator|.
name|getServiceDiscovery
argument_list|()
argument_list|,
name|definition
operator|::
name|setServiceDiscoveryRef
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|serviceCall
operator|.
name|getServiceFilter
argument_list|()
argument_list|,
name|definition
operator|::
name|setServiceFilterRef
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|serviceCall
operator|.
name|getServiceChooser
argument_list|()
argument_list|,
name|definition
operator|::
name|setServiceChooserRef
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|serviceCall
operator|.
name|getLoadBalancer
argument_list|()
argument_list|,
name|definition
operator|::
name|setLoadBalancerRef
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceCall
operator|.
name|getLoadBalancer
argument_list|()
operator|==
literal|null
operator|&&
name|serviceCall
operator|.
name|isDefaultLoadBalancer
argument_list|()
condition|)
block|{
name|definition
operator|.
name|defaultLoadBalancer
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|expression
init|=
name|serviceCall
operator|.
name|getExpression
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expressionLanguage
init|=
name|serviceCall
operator|.
name|getExpressionLanguage
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|expression
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|expressionLanguage
argument_list|)
condition|)
block|{
name|Language
name|language
init|=
name|camelContext
operator|.
name|resolveLanguage
argument_list|(
name|expressionLanguage
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to resolve language: "
operator|+
name|expressionLanguage
argument_list|)
throw|;
block|}
name|definition
operator|.
name|setExpression
argument_list|(
name|language
operator|.
name|createExpression
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|definition
return|;
block|}
comment|// *******************************
comment|// Condition
comment|// *******************************
DECL|class|ServiceCallCondition
specifier|public
specifier|static
class|class
name|ServiceCallCondition
extends|extends
name|GroupCondition
block|{
DECL|method|ServiceCallCondition ()
specifier|public
name|ServiceCallCondition
parameter_list|()
block|{
name|super
argument_list|(
literal|"camel.cloud"
argument_list|,
literal|"camel.cloud.service-call"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

