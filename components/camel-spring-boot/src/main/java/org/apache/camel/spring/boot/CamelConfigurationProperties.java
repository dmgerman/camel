begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ManagementStatisticsLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"camel.springboot"
argument_list|)
DECL|class|CamelConfigurationProperties
specifier|public
class|class
name|CamelConfigurationProperties
block|{
comment|// Properties
comment|/**      * Sets the name of the CamelContext.      */
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**      * Enable JMX in your Camel application.      */
DECL|field|jmxEnabled
specifier|private
name|boolean
name|jmxEnabled
init|=
literal|true
decl_stmt|;
comment|/**      * Producer template endpoints cache size.      */
DECL|field|producerTemplateCacheSize
specifier|private
name|int
name|producerTemplateCacheSize
init|=
literal|1000
decl_stmt|;
comment|/**      * Consumer template endpoints cache size.      */
DECL|field|consumerTemplateCacheSize
specifier|private
name|int
name|consumerTemplateCacheSize
init|=
literal|1000
decl_stmt|;
comment|/**      * Enables enhanced Camel/Spring type conversion.      */
DECL|field|typeConversion
specifier|private
name|boolean
name|typeConversion
init|=
literal|true
decl_stmt|;
comment|/**      * Directory to scan for adding additional XML routes.      * You can turn this off by setting the value to false.      */
DECL|field|xmlRoutes
specifier|private
name|String
name|xmlRoutes
init|=
literal|"classpath:camel/*.xml"
decl_stmt|;
comment|/**      * Directory to scan for adding additional XML rests.      * You can turn this off by setting the value to false.      */
DECL|field|xmlRests
specifier|private
name|String
name|xmlRests
init|=
literal|"classpath:camel-rest/*.xml"
decl_stmt|;
comment|/**      * Whether to use the main run controller to ensure the Spring-Boot application      * keeps running until being stopped or the JVM terminated.      * You typically only need this if you run Spring-Boot standalone.      * If you run Spring-Boot with spring-boot-starter-web then the web container keeps the JVM running.      */
DECL|field|mainRunController
specifier|private
name|boolean
name|mainRunController
decl_stmt|;
comment|/**      * Is used to limit the maximum length of the logging Camel message bodies. If the message body      * is longer than the limit, the log message is clipped. Use a value of 0 or negative to have unlimited length.      * Use for example 1000 to log at at most 1000 chars.      */
DECL|field|logDebugMaxChars
specifier|private
name|int
name|logDebugMaxChars
decl_stmt|;
comment|/**      * Sets whether stream caching is enabled or not.      *      * Default is false.      */
DECL|field|streamCaching
specifier|private
name|boolean
name|streamCaching
decl_stmt|;
comment|/**      * Sets whether tracing is enabled or not.      *      * Default is false.      */
DECL|field|tracing
specifier|private
name|boolean
name|tracing
decl_stmt|;
comment|/**      * Sets whether message history is enabled or not.      *      * Default is true.      */
DECL|field|messageHistory
specifier|private
name|boolean
name|messageHistory
init|=
literal|true
decl_stmt|;
comment|/**      * Sets whether to log exhausted message body with message history.      *      * Default is false.      */
DECL|field|logExhaustedMessageBody
specifier|private
name|boolean
name|logExhaustedMessageBody
decl_stmt|;
comment|/**      * Sets whether fault handling is enabled or not.      *      * Default is false.      */
DECL|field|handleFault
specifier|private
name|boolean
name|handleFault
decl_stmt|;
comment|/**      * Sets whether the object should automatically start when Camel starts.      * Important: Currently only routes can be disabled, as CamelContext's are always started.      * Note: When setting auto startup false on CamelContext then that takes precedence      * and no routes is started. You would need to start CamelContext explicit using      * the org.apache.camel.CamelContext.start() method, to start the context, and then      * you would need to start the routes manually using CamelContext.startRoute(String).      *      * Default is true to always start up.      */
DECL|field|autoStartup
specifier|private
name|boolean
name|autoStartup
init|=
literal|true
decl_stmt|;
comment|/**      * Sets whether to allow access to the original message from Camel's error handler,      * or from org.apache.camel.spi.UnitOfWork.getOriginalInMessage().      * Turning this off can optimize performance, as defensive copy of the original message is not needed.      *      * Default is true.      */
DECL|field|allowUseOriginalMessage
specifier|private
name|boolean
name|allowUseOriginalMessage
init|=
literal|true
decl_stmt|;
comment|/**      * Sets whether endpoint runtime statistics is enabled (gathers runtime usage of each incoming and outgoing endpoints).      *      * The default value is true.      */
DECL|field|endpointRuntimeStatisticsEnabled
specifier|private
name|boolean
name|endpointRuntimeStatisticsEnabled
init|=
literal|true
decl_stmt|;
comment|/**      * Sets the JMX statistics level      * The level can be set to Extended to gather additional information      *      * The default value is Default.      */
DECL|field|jmxManagementStatisticsLevel
specifier|private
name|ManagementStatisticsLevel
name|jmxManagementStatisticsLevel
init|=
name|ManagementStatisticsLevel
operator|.
name|Default
decl_stmt|;
comment|/**      * The naming pattern for creating the CamelContext JMX management name.      *      * The default pattern is #name#      */
DECL|field|jmxManagementNamePattern
specifier|private
name|String
name|jmxManagementNamePattern
init|=
literal|"#name#"
decl_stmt|;
comment|/**      * Whether JMX connector is created, allowing clients to connect remotely      *      * The default value is false.      */
DECL|field|jmxCreateConnector
specifier|private
name|boolean
name|jmxCreateConnector
decl_stmt|;
comment|// Getters& setters
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|isJmxEnabled ()
specifier|public
name|boolean
name|isJmxEnabled
parameter_list|()
block|{
return|return
name|jmxEnabled
return|;
block|}
DECL|method|setJmxEnabled (boolean jmxEnabled)
specifier|public
name|void
name|setJmxEnabled
parameter_list|(
name|boolean
name|jmxEnabled
parameter_list|)
block|{
name|this
operator|.
name|jmxEnabled
operator|=
name|jmxEnabled
expr_stmt|;
block|}
DECL|method|getProducerTemplateCacheSize ()
specifier|public
name|int
name|getProducerTemplateCacheSize
parameter_list|()
block|{
return|return
name|producerTemplateCacheSize
return|;
block|}
DECL|method|setProducerTemplateCacheSize (int producerTemplateCacheSize)
specifier|public
name|void
name|setProducerTemplateCacheSize
parameter_list|(
name|int
name|producerTemplateCacheSize
parameter_list|)
block|{
name|this
operator|.
name|producerTemplateCacheSize
operator|=
name|producerTemplateCacheSize
expr_stmt|;
block|}
DECL|method|getConsumerTemplateCacheSize ()
specifier|public
name|int
name|getConsumerTemplateCacheSize
parameter_list|()
block|{
return|return
name|consumerTemplateCacheSize
return|;
block|}
DECL|method|setConsumerTemplateCacheSize (int consumerTemplateCacheSize)
specifier|public
name|void
name|setConsumerTemplateCacheSize
parameter_list|(
name|int
name|consumerTemplateCacheSize
parameter_list|)
block|{
name|this
operator|.
name|consumerTemplateCacheSize
operator|=
name|consumerTemplateCacheSize
expr_stmt|;
block|}
DECL|method|isTypeConversion ()
specifier|public
name|boolean
name|isTypeConversion
parameter_list|()
block|{
return|return
name|typeConversion
return|;
block|}
DECL|method|setTypeConversion (boolean typeConversion)
specifier|public
name|void
name|setTypeConversion
parameter_list|(
name|boolean
name|typeConversion
parameter_list|)
block|{
name|this
operator|.
name|typeConversion
operator|=
name|typeConversion
expr_stmt|;
block|}
DECL|method|getXmlRoutes ()
specifier|public
name|String
name|getXmlRoutes
parameter_list|()
block|{
return|return
name|xmlRoutes
return|;
block|}
DECL|method|setXmlRoutes (String xmlRoutes)
specifier|public
name|void
name|setXmlRoutes
parameter_list|(
name|String
name|xmlRoutes
parameter_list|)
block|{
name|this
operator|.
name|xmlRoutes
operator|=
name|xmlRoutes
expr_stmt|;
block|}
DECL|method|getXmlRests ()
specifier|public
name|String
name|getXmlRests
parameter_list|()
block|{
return|return
name|xmlRests
return|;
block|}
DECL|method|setXmlRests (String xmlRests)
specifier|public
name|void
name|setXmlRests
parameter_list|(
name|String
name|xmlRests
parameter_list|)
block|{
name|this
operator|.
name|xmlRests
operator|=
name|xmlRests
expr_stmt|;
block|}
DECL|method|isMainRunController ()
specifier|public
name|boolean
name|isMainRunController
parameter_list|()
block|{
return|return
name|mainRunController
return|;
block|}
DECL|method|setMainRunController (boolean mainRunController)
specifier|public
name|void
name|setMainRunController
parameter_list|(
name|boolean
name|mainRunController
parameter_list|)
block|{
name|this
operator|.
name|mainRunController
operator|=
name|mainRunController
expr_stmt|;
block|}
DECL|method|getLogDebugMaxChars ()
specifier|public
name|int
name|getLogDebugMaxChars
parameter_list|()
block|{
return|return
name|logDebugMaxChars
return|;
block|}
DECL|method|setLogDebugMaxChars (int logDebugMaxChars)
specifier|public
name|void
name|setLogDebugMaxChars
parameter_list|(
name|int
name|logDebugMaxChars
parameter_list|)
block|{
name|this
operator|.
name|logDebugMaxChars
operator|=
name|logDebugMaxChars
expr_stmt|;
block|}
DECL|method|isStreamCaching ()
specifier|public
name|boolean
name|isStreamCaching
parameter_list|()
block|{
return|return
name|streamCaching
return|;
block|}
DECL|method|setStreamCaching (boolean streamCaching)
specifier|public
name|void
name|setStreamCaching
parameter_list|(
name|boolean
name|streamCaching
parameter_list|)
block|{
name|this
operator|.
name|streamCaching
operator|=
name|streamCaching
expr_stmt|;
block|}
DECL|method|isTracing ()
specifier|public
name|boolean
name|isTracing
parameter_list|()
block|{
return|return
name|tracing
return|;
block|}
DECL|method|setTracing (boolean tracing)
specifier|public
name|void
name|setTracing
parameter_list|(
name|boolean
name|tracing
parameter_list|)
block|{
name|this
operator|.
name|tracing
operator|=
name|tracing
expr_stmt|;
block|}
DECL|method|isMessageHistory ()
specifier|public
name|boolean
name|isMessageHistory
parameter_list|()
block|{
return|return
name|messageHistory
return|;
block|}
DECL|method|setMessageHistory (boolean messageHistory)
specifier|public
name|void
name|setMessageHistory
parameter_list|(
name|boolean
name|messageHistory
parameter_list|)
block|{
name|this
operator|.
name|messageHistory
operator|=
name|messageHistory
expr_stmt|;
block|}
DECL|method|isLogExhaustedMessageBody ()
specifier|public
name|boolean
name|isLogExhaustedMessageBody
parameter_list|()
block|{
return|return
name|logExhaustedMessageBody
return|;
block|}
DECL|method|setLogExhaustedMessageBody (boolean logExhaustedMessageBody)
specifier|public
name|void
name|setLogExhaustedMessageBody
parameter_list|(
name|boolean
name|logExhaustedMessageBody
parameter_list|)
block|{
name|this
operator|.
name|logExhaustedMessageBody
operator|=
name|logExhaustedMessageBody
expr_stmt|;
block|}
DECL|method|isHandleFault ()
specifier|public
name|boolean
name|isHandleFault
parameter_list|()
block|{
return|return
name|handleFault
return|;
block|}
DECL|method|setHandleFault (boolean handleFault)
specifier|public
name|void
name|setHandleFault
parameter_list|(
name|boolean
name|handleFault
parameter_list|)
block|{
name|this
operator|.
name|handleFault
operator|=
name|handleFault
expr_stmt|;
block|}
DECL|method|isAutoStartup ()
specifier|public
name|boolean
name|isAutoStartup
parameter_list|()
block|{
return|return
name|autoStartup
return|;
block|}
DECL|method|setAutoStartup (boolean autoStartup)
specifier|public
name|void
name|setAutoStartup
parameter_list|(
name|boolean
name|autoStartup
parameter_list|)
block|{
name|this
operator|.
name|autoStartup
operator|=
name|autoStartup
expr_stmt|;
block|}
DECL|method|isAllowUseOriginalMessage ()
specifier|public
name|boolean
name|isAllowUseOriginalMessage
parameter_list|()
block|{
return|return
name|allowUseOriginalMessage
return|;
block|}
DECL|method|setAllowUseOriginalMessage (boolean allowUseOriginalMessage)
specifier|public
name|void
name|setAllowUseOriginalMessage
parameter_list|(
name|boolean
name|allowUseOriginalMessage
parameter_list|)
block|{
name|this
operator|.
name|allowUseOriginalMessage
operator|=
name|allowUseOriginalMessage
expr_stmt|;
block|}
DECL|method|isEndpointRuntimeStatisticsEnabled ()
specifier|public
name|boolean
name|isEndpointRuntimeStatisticsEnabled
parameter_list|()
block|{
return|return
name|endpointRuntimeStatisticsEnabled
return|;
block|}
DECL|method|setEndpointRuntimeStatisticsEnabled (boolean endpointRuntimeStatisticsEnabled)
specifier|public
name|void
name|setEndpointRuntimeStatisticsEnabled
parameter_list|(
name|boolean
name|endpointRuntimeStatisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|endpointRuntimeStatisticsEnabled
operator|=
name|endpointRuntimeStatisticsEnabled
expr_stmt|;
block|}
DECL|method|getJmxManagementStatisticsLevel ()
specifier|public
name|ManagementStatisticsLevel
name|getJmxManagementStatisticsLevel
parameter_list|()
block|{
return|return
name|jmxManagementStatisticsLevel
return|;
block|}
DECL|method|setJmxManagementStatisticsLevel (ManagementStatisticsLevel jmxManagementStatisticsLevel)
specifier|public
name|void
name|setJmxManagementStatisticsLevel
parameter_list|(
name|ManagementStatisticsLevel
name|jmxManagementStatisticsLevel
parameter_list|)
block|{
name|this
operator|.
name|jmxManagementStatisticsLevel
operator|=
name|jmxManagementStatisticsLevel
expr_stmt|;
block|}
DECL|method|getJmxManagementNamePattern ()
specifier|public
name|String
name|getJmxManagementNamePattern
parameter_list|()
block|{
return|return
name|jmxManagementNamePattern
return|;
block|}
DECL|method|setJmxManagementNamePattern (String jmxManagementNamePattern)
specifier|public
name|void
name|setJmxManagementNamePattern
parameter_list|(
name|String
name|jmxManagementNamePattern
parameter_list|)
block|{
name|this
operator|.
name|jmxManagementNamePattern
operator|=
name|jmxManagementNamePattern
expr_stmt|;
block|}
DECL|method|isJmxCreateConnector ()
specifier|public
name|boolean
name|isJmxCreateConnector
parameter_list|()
block|{
return|return
name|jmxCreateConnector
return|;
block|}
DECL|method|setJmxCreateConnector (boolean jmxCreateConnector)
specifier|public
name|void
name|setJmxCreateConnector
parameter_list|(
name|boolean
name|jmxCreateConnector
parameter_list|)
block|{
name|this
operator|.
name|jmxCreateConnector
operator|=
name|jmxCreateConnector
expr_stmt|;
block|}
block|}
end_class

end_unit

