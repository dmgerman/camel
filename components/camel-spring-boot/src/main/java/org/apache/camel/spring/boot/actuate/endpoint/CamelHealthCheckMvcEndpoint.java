begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.actuate.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
operator|.
name|mvc
operator|.
name|ActuatorMediaTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
operator|.
name|mvc
operator|.
name|MvcEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|GetMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|PathVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|RequestParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|ResponseBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|bind
operator|.
name|annotation
operator|.
name|ResponseStatus
import|;
end_import

begin_comment
comment|/**  * Adapter to expose {@link CamelHealthCheckEndpoint} as an {@link MvcEndpoint}.  */
end_comment

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"endpoints."
operator|+
name|CamelHealthCheckEndpoint
operator|.
name|ENDPOINT_ID
argument_list|)
DECL|class|CamelHealthCheckMvcEndpoint
specifier|public
class|class
name|CamelHealthCheckMvcEndpoint
extends|extends
name|AbstractCamelMvcEndpoint
argument_list|<
name|CamelHealthCheckEndpoint
argument_list|>
block|{
DECL|method|CamelHealthCheckMvcEndpoint (CamelHealthCheckEndpoint delegate)
specifier|public
name|CamelHealthCheckMvcEndpoint
parameter_list|(
name|CamelHealthCheckEndpoint
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
literal|"/camel/health/check"
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
block|}
comment|// ********************************************
comment|// Endpoints
comment|// ********************************************
annotation|@
name|ResponseBody
annotation|@
name|GetMapping
argument_list|(
name|value
operator|=
literal|"/{id}"
argument_list|,
name|produces
operator|=
block|{
name|ActuatorMediaTypes
operator|.
name|APPLICATION_ACTUATOR_V1_JSON_VALUE
block|,
name|MediaType
operator|.
name|APPLICATION_JSON_VALUE
block|}
argument_list|)
DECL|method|query ( @athVariable String id, @RequestParam(required = false) Map<String, Object> options)
specifier|public
name|Object
name|query
parameter_list|(
annotation|@
name|PathVariable
name|String
name|id
parameter_list|,
annotation|@
name|RequestParam
argument_list|(
name|required
operator|=
literal|false
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
return|return
name|doIfEnabled
argument_list|(
name|delegate
lambda|->
name|delegate
operator|.
name|query
argument_list|(
name|id
argument_list|,
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|options
argument_list|,
name|Collections
operator|::
name|emptyMap
argument_list|)
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|NoSuchCheckException
argument_list|(
literal|"No such check "
operator|+
name|id
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|ResponseBody
annotation|@
name|GetMapping
argument_list|(
name|value
operator|=
literal|"/{id}/invoke"
argument_list|,
name|produces
operator|=
block|{
name|ActuatorMediaTypes
operator|.
name|APPLICATION_ACTUATOR_V1_JSON_VALUE
block|,
name|MediaType
operator|.
name|APPLICATION_JSON_VALUE
block|}
argument_list|)
DECL|method|invoke ( @athVariable String id, @RequestParam(required = false) Map<String, Object> options)
specifier|public
name|Object
name|invoke
parameter_list|(
annotation|@
name|PathVariable
name|String
name|id
parameter_list|,
annotation|@
name|RequestParam
argument_list|(
name|required
operator|=
literal|false
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
return|return
name|doIfEnabled
argument_list|(
name|delegate
lambda|->
name|delegate
operator|.
name|invoke
argument_list|(
name|id
argument_list|,
name|ObjectHelper
operator|.
name|supplyIfEmpty
argument_list|(
name|options
argument_list|,
name|Collections
operator|::
name|emptyMap
argument_list|)
argument_list|)
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|NoSuchCheckException
argument_list|(
literal|"No such check "
operator|+
name|id
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|// ********************************************
comment|// Exceptions
comment|// ********************************************
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|ResponseStatus
argument_list|(
name|value
operator|=
name|HttpStatus
operator|.
name|NOT_FOUND
argument_list|,
name|reason
operator|=
literal|"No such check"
argument_list|)
DECL|class|NoSuchCheckException
specifier|public
specifier|static
class|class
name|NoSuchCheckException
extends|extends
name|RuntimeException
block|{
DECL|method|NoSuchCheckException (String message)
specifier|public
name|NoSuchCheckException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

