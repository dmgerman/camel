begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.actuate.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Route
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|mbean
operator|.
name|ManagedRouteMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|model
operator|.
name|RouteDetailsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|model
operator|.
name|RouteInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_comment
comment|/**  * {@link Endpoint} to expose {@link org.apache.camel.Route} information.  */
end_comment

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
literal|"endpoints."
operator|+
name|CamelRoutesEndpoint
operator|.
name|ENDPOINT_ID
argument_list|)
DECL|class|CamelRoutesEndpoint
specifier|public
class|class
name|CamelRoutesEndpoint
extends|extends
name|AbstractCamelEndpoint
argument_list|<
name|List
argument_list|<
name|RouteInfo
argument_list|>
argument_list|>
block|{
DECL|field|ENDPOINT_ID
specifier|public
specifier|static
specifier|final
name|String
name|ENDPOINT_ID
init|=
literal|"camelroutes"
decl_stmt|;
DECL|method|CamelRoutesEndpoint (CamelContext camelContext)
specifier|public
name|CamelRoutesEndpoint
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|ENDPOINT_ID
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|invoke ()
specifier|public
name|List
argument_list|<
name|RouteInfo
argument_list|>
name|invoke
parameter_list|()
block|{
return|return
name|getRoutesInfo
argument_list|()
return|;
block|}
DECL|method|getRouteInfo (String id)
specifier|public
name|RouteInfo
name|getRouteInfo
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Route
name|route
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRoute
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RouteInfo
argument_list|(
name|route
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRoutesInfo ()
specifier|public
name|List
argument_list|<
name|RouteInfo
argument_list|>
name|getRoutesInfo
parameter_list|()
block|{
return|return
name|getCamelContext
argument_list|()
operator|.
name|getRoutes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|RouteInfo
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getRouteDetailsInfo (String id)
specifier|public
name|RouteDetailsInfo
name|getRouteDetailsInfo
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Route
name|route
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRoute
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RouteDetailsInfo
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|route
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getRouteDump (String id)
specifier|public
name|String
name|getRouteDump
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|RouteDefinition
name|route
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRouteDefinition
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|route
operator|!=
literal|null
condition|)
block|{
return|return
name|ModelHelper
operator|.
name|dumpModelAsXml
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|route
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|startRoute (String id)
specifier|public
name|void
name|startRoute
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|startRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|resetRoute (String id)
specifier|public
name|void
name|resetRoute
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagedRouteMBean
name|managedRouteMBean
init|=
name|getCamelContext
argument_list|()
operator|.
name|getManagedRoute
argument_list|(
name|id
argument_list|,
name|ManagedRouteMBean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|managedRouteMBean
operator|!=
literal|null
condition|)
block|{
name|managedRouteMBean
operator|.
name|reset
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopRoute (String id, Optional<Long> timeout, Optional<TimeUnit> timeUnit, Optional<Boolean> abortAfterTimeout)
specifier|public
name|void
name|stopRoute
parameter_list|(
name|String
name|id
parameter_list|,
name|Optional
argument_list|<
name|Long
argument_list|>
name|timeout
parameter_list|,
name|Optional
argument_list|<
name|TimeUnit
argument_list|>
name|timeUnit
parameter_list|,
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|abortAfterTimeout
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|timeout
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|id
argument_list|,
name|timeout
operator|.
name|get
argument_list|()
argument_list|,
name|timeUnit
operator|.
name|orElse
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|abortAfterTimeout
operator|.
name|orElse
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|stopRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|suspendRoute (String id, Optional<Long> timeout, Optional<TimeUnit> timeUnit)
specifier|public
name|void
name|suspendRoute
parameter_list|(
name|String
name|id
parameter_list|,
name|Optional
argument_list|<
name|Long
argument_list|>
name|timeout
parameter_list|,
name|Optional
argument_list|<
name|TimeUnit
argument_list|>
name|timeUnit
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|timeout
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|suspendRoute
argument_list|(
name|id
argument_list|,
name|timeout
operator|.
name|get
argument_list|()
argument_list|,
name|timeUnit
operator|.
name|orElse
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|suspendRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resumeRoute (String id)
specifier|public
name|void
name|resumeRoute
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|getCamelContext
argument_list|()
operator|.
name|getRouteController
argument_list|()
operator|.
name|resumeRoute
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

