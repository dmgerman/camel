begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.actuate.health
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|actuate
operator|.
name|health
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|health
operator|.
name|HealthConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|context
operator|.
name|properties
operator|.
name|ConfigurationProperties
import|;
end_import

begin_class
annotation|@
name|ConfigurationProperties
argument_list|(
name|prefix
operator|=
name|HealthConstants
operator|.
name|HEALTH_CHECK_INDICATOR_PREFIX
argument_list|)
DECL|class|CamelHealthCheckIndicatorConfiguration
specifier|public
class|class
name|CamelHealthCheckIndicatorConfiguration
block|{
comment|/**      * Global option to enable/disable this {@link org.springframework.boot.actuate.health.HealthIndicator}, default is true.      */
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
comment|/**      * Health check exclusion configuration.      */
DECL|field|exclusion
specifier|private
name|Exclusion
name|exclusion
init|=
operator|new
name|Exclusion
argument_list|()
decl_stmt|;
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
DECL|method|getExclusion ()
specifier|public
name|Exclusion
name|getExclusion
parameter_list|()
block|{
return|return
name|exclusion
return|;
block|}
comment|// *****************************************
comment|//
comment|// *****************************************
DECL|class|Exclusion
specifier|public
class|class
name|Exclusion
block|{
comment|/**          * A list of health check ids to exclude, either the id or a regexp.          */
DECL|field|ids
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**          * A list of health check groups to exclude, either the group or a regexp.          */
DECL|field|groups
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getIds ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIds
parameter_list|()
block|{
return|return
name|ids
return|;
block|}
DECL|method|getGroups ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
block|}
block|}
end_class

end_unit

