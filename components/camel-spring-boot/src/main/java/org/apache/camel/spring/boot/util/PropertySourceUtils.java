begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|EnumerablePropertySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|PropertySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|PropertySources
import|;
end_import

begin_comment
comment|/**  * Convenience class for manipulating PropertySources.  *  * @author Dave Syer  * @see PropertySource  * @see PropertySources  *  * Source code copied from spring-boot 1.5.6.RELEASE  */
end_comment

begin_class
DECL|class|PropertySourceUtils
specifier|public
specifier|abstract
class|class
name|PropertySourceUtils
block|{
comment|/**      * Return a Map of all values from the specified {@link PropertySources} that start      * with a particular key.      * @param propertySources the property sources to scan      * @param keyPrefix the key prefixes to test      * @return a map of all sub properties starting with the specified key prefixes.      * @see PropertySourceUtils#getSubProperties(PropertySources, String, String)      */
DECL|method|getSubProperties (PropertySources propertySources, String keyPrefix)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSubProperties
parameter_list|(
name|PropertySources
name|propertySources
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
block|{
return|return
name|PropertySourceUtils
operator|.
name|getSubProperties
argument_list|(
name|propertySources
argument_list|,
literal|null
argument_list|,
name|keyPrefix
argument_list|)
return|;
block|}
comment|/**      * Return a Map of all values from the specified {@link PropertySources} that start      * with a particular key.      * @param propertySources the property sources to scan      * @param rootPrefix a root prefix to be prepended to the keyPrefix (can be      * {@code null})      * @param keyPrefix the key prefixes to test      * @return a map of all sub properties starting with the specified key prefixes.      * @see #getSubProperties(PropertySources, String, String)      */
DECL|method|getSubProperties (PropertySources propertySources, String rootPrefix, String keyPrefix)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSubProperties
parameter_list|(
name|PropertySources
name|propertySources
parameter_list|,
name|String
name|rootPrefix
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
block|{
name|RelaxedNames
name|keyPrefixes
init|=
operator|new
name|RelaxedNames
argument_list|(
name|keyPrefix
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|subProperties
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertySource
argument_list|<
name|?
argument_list|>
name|source
range|:
name|propertySources
control|)
block|{
if|if
condition|(
name|source
operator|instanceof
name|EnumerablePropertySource
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
operator|(
operator|(
name|EnumerablePropertySource
argument_list|<
name|?
argument_list|>
operator|)
name|source
operator|)
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|PropertySourceUtils
operator|.
name|getSubKey
argument_list|(
name|name
argument_list|,
name|rootPrefix
argument_list|,
name|keyPrefixes
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|subProperties
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|subProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|source
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|subProperties
argument_list|)
return|;
block|}
DECL|method|getSubKey (String name, String rootPrefixes, RelaxedNames keyPrefix)
specifier|private
specifier|static
name|String
name|getSubKey
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|rootPrefixes
parameter_list|,
name|RelaxedNames
name|keyPrefix
parameter_list|)
block|{
name|rootPrefixes
operator|=
name|rootPrefixes
operator|==
literal|null
condition|?
literal|""
else|:
name|rootPrefixes
expr_stmt|;
for|for
control|(
name|String
name|rootPrefix
range|:
operator|new
name|RelaxedNames
argument_list|(
name|rootPrefixes
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|candidateKeyPrefix
range|:
name|keyPrefix
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|rootPrefix
operator|+
name|candidateKeyPrefix
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
operator|(
name|rootPrefix
operator|+
name|candidateKeyPrefix
operator|)
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

