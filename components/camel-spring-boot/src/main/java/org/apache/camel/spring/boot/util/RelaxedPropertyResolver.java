begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|ConfigurableEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|PropertyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|env
operator|.
name|PropertySourcesPropertyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * {@link PropertyResolver} that attempts to resolve values using {@link RelaxedNames}.  *  * @author Phillip Webb  * @see RelaxedNames  *  * Source code copied from spring-boot 1.5.6.RELEASE  */
end_comment

begin_class
DECL|class|RelaxedPropertyResolver
specifier|public
class|class
name|RelaxedPropertyResolver
implements|implements
name|PropertyResolver
block|{
DECL|field|resolver
specifier|private
specifier|final
name|PropertyResolver
name|resolver
decl_stmt|;
DECL|field|prefix
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
DECL|method|RelaxedPropertyResolver (PropertyResolver resolver)
specifier|public
name|RelaxedPropertyResolver
parameter_list|(
name|PropertyResolver
name|resolver
parameter_list|)
block|{
name|this
argument_list|(
name|resolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|RelaxedPropertyResolver (PropertyResolver resolver, String prefix)
specifier|public
name|RelaxedPropertyResolver
parameter_list|(
name|PropertyResolver
name|resolver
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|resolver
argument_list|,
literal|"PropertyResolver must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|prefix
operator|=
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRequiredProperty (String key)
specifier|public
name|String
name|getRequiredProperty
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IllegalStateException
block|{
return|return
name|getRequiredProperty
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRequiredProperty (String key, Class<T> targetType)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getRequiredProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetType
parameter_list|)
throws|throws
name|IllegalStateException
block|{
name|T
name|value
init|=
name|getProperty
argument_list|(
name|key
argument_list|,
name|targetType
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|state
argument_list|(
name|value
operator|!=
literal|null
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"required key [%s] not found"
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String key)
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getProperty
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String key, String defaultValue)
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|getProperty
argument_list|(
name|key
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String key, Class<T> targetType)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetType
parameter_list|)
block|{
return|return
name|getProperty
argument_list|(
name|key
argument_list|,
name|targetType
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getProperty (String key, Class<T> targetType, T defaultValue)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetType
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
name|RelaxedNames
name|prefixes
init|=
operator|new
name|RelaxedNames
argument_list|(
name|this
operator|.
name|prefix
argument_list|)
decl_stmt|;
name|RelaxedNames
name|keys
init|=
operator|new
name|RelaxedNames
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
for|for
control|(
name|String
name|relaxedKey
range|:
name|keys
control|)
block|{
if|if
condition|(
name|this
operator|.
name|resolver
operator|.
name|containsProperty
argument_list|(
name|prefix
operator|+
name|relaxedKey
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|resolver
operator|.
name|getProperty
argument_list|(
name|prefix
operator|+
name|relaxedKey
argument_list|,
name|targetType
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|defaultValue
return|;
block|}
comment|// not implemented in spring boot 2 and not in use by us
DECL|method|getPropertyAsClass (String key, Class<T> targetType)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|getPropertyAsClass
parameter_list|(
name|String
name|key
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|targetType
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|containsProperty (String key)
specifier|public
name|boolean
name|containsProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|RelaxedNames
name|prefixes
init|=
operator|new
name|RelaxedNames
argument_list|(
name|this
operator|.
name|prefix
argument_list|)
decl_stmt|;
name|RelaxedNames
name|keys
init|=
operator|new
name|RelaxedNames
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
for|for
control|(
name|String
name|relaxedKey
range|:
name|keys
control|)
block|{
if|if
condition|(
name|this
operator|.
name|resolver
operator|.
name|containsProperty
argument_list|(
name|prefix
operator|+
name|relaxedKey
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|resolvePlaceholders (String text)
specifier|public
name|String
name|resolvePlaceholders
parameter_list|(
name|String
name|text
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to resolve placeholders with relaxed properties"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|resolveRequiredPlaceholders (String text)
specifier|public
name|String
name|resolveRequiredPlaceholders
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to resolve placeholders with relaxed properties"
argument_list|)
throw|;
block|}
comment|/**      * Return a Map of all values from all underlying properties that start with the      * specified key. NOTE: this method can only be used if the underlying resolver is a      * {@link ConfigurableEnvironment}.      * @param keyPrefix the key prefix used to filter results      * @return a map of all sub properties starting with the specified key prefix.      * @see PropertySourceUtils#getSubProperties      */
DECL|method|getSubProperties (String keyPrefix)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSubProperties
parameter_list|(
name|String
name|keyPrefix
parameter_list|)
block|{
name|Assert
operator|.
name|isInstanceOf
argument_list|(
name|ConfigurableEnvironment
operator|.
name|class
argument_list|,
name|this
operator|.
name|resolver
argument_list|,
literal|"SubProperties not available."
argument_list|)
expr_stmt|;
name|ConfigurableEnvironment
name|env
init|=
operator|(
name|ConfigurableEnvironment
operator|)
name|this
operator|.
name|resolver
decl_stmt|;
return|return
name|PropertySourceUtils
operator|.
name|getSubProperties
argument_list|(
name|env
operator|.
name|getPropertySources
argument_list|()
argument_list|,
name|this
operator|.
name|prefix
argument_list|,
name|keyPrefix
argument_list|)
return|;
block|}
comment|/**      * Return a property resolver for the environment, preferring one that ignores      * unresolvable nested placeholders.      * @param environment the source environment      * @param prefix the prefix      * @return a property resolver for the environment      * @since 1.4.3      */
DECL|method|ignoringUnresolvableNestedPlaceholders ( Environment environment, String prefix)
specifier|public
specifier|static
name|RelaxedPropertyResolver
name|ignoringUnresolvableNestedPlaceholders
parameter_list|(
name|Environment
name|environment
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Assert
operator|.
name|notNull
argument_list|(
name|environment
argument_list|,
literal|"Environment must not be null"
argument_list|)
expr_stmt|;
name|PropertyResolver
name|resolver
init|=
name|environment
decl_stmt|;
if|if
condition|(
name|environment
operator|instanceof
name|ConfigurableEnvironment
condition|)
block|{
name|resolver
operator|=
operator|new
name|PropertySourcesPropertyResolver
argument_list|(
operator|(
operator|(
name|ConfigurableEnvironment
operator|)
name|environment
operator|)
operator|.
name|getPropertySources
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PropertySourcesPropertyResolver
operator|)
name|resolver
operator|)
operator|.
name|setIgnoreUnresolvableNestedPlaceholders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|RelaxedPropertyResolver
argument_list|(
name|resolver
argument_list|,
name|prefix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

