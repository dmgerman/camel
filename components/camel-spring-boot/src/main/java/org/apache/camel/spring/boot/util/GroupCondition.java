begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionOutcome
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|SpringBootCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|bind
operator|.
name|RelaxedPropertyResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|ConditionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|type
operator|.
name|AnnotatedTypeMetadata
import|;
end_import

begin_class
DECL|class|GroupCondition
specifier|public
class|class
name|GroupCondition
extends|extends
name|SpringBootCondition
block|{
DECL|field|group
specifier|private
specifier|final
name|String
name|group
decl_stmt|;
DECL|field|single
specifier|private
specifier|final
name|String
name|single
decl_stmt|;
DECL|field|groupDefault
specifier|private
specifier|final
name|boolean
name|groupDefault
decl_stmt|;
DECL|field|singleDefault
specifier|private
specifier|final
name|boolean
name|singleDefault
decl_stmt|;
DECL|method|GroupCondition (String group, String single)
specifier|public
name|GroupCondition
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|single
parameter_list|)
block|{
name|this
argument_list|(
name|group
argument_list|,
literal|true
argument_list|,
name|single
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|GroupCondition (String group, boolean groupDefault, String single, boolean singleDefault)
specifier|public
name|GroupCondition
parameter_list|(
name|String
name|group
parameter_list|,
name|boolean
name|groupDefault
parameter_list|,
name|String
name|single
parameter_list|,
name|boolean
name|singleDefault
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
name|group
else|:
name|group
operator|+
literal|"."
expr_stmt|;
name|this
operator|.
name|groupDefault
operator|=
name|groupDefault
expr_stmt|;
name|this
operator|.
name|single
operator|=
name|group
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|?
name|single
else|:
name|single
operator|+
literal|"."
expr_stmt|;
name|this
operator|.
name|singleDefault
operator|=
name|singleDefault
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMatchOutcome (ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)
specifier|public
name|ConditionOutcome
name|getMatchOutcome
parameter_list|(
name|ConditionContext
name|conditionContext
parameter_list|,
name|AnnotatedTypeMetadata
name|annotatedTypeMetadata
parameter_list|)
block|{
name|boolean
name|groupEnabled
init|=
name|isEnabled
argument_list|(
name|conditionContext
argument_list|,
name|this
operator|.
name|group
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ConditionMessage
operator|.
name|Builder
name|message
init|=
name|ConditionMessage
operator|.
name|forCondition
argument_list|(
name|this
operator|.
name|single
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEnabled
argument_list|(
name|conditionContext
argument_list|,
name|this
operator|.
name|single
argument_list|,
name|groupEnabled
argument_list|)
condition|)
block|{
return|return
name|ConditionOutcome
operator|.
name|match
argument_list|(
name|message
operator|.
name|because
argument_list|(
literal|"enabled"
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ConditionOutcome
operator|.
name|noMatch
argument_list|(
name|message
operator|.
name|because
argument_list|(
literal|"not enabled"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|isEnabled (ConditionContext context, String prefix, boolean defaultValue)
specifier|public
specifier|static
name|boolean
name|isEnabled
parameter_list|(
name|ConditionContext
name|context
parameter_list|,
name|String
name|prefix
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|RelaxedPropertyResolver
name|resolver
init|=
operator|new
name|RelaxedPropertyResolver
argument_list|(
name|context
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
return|return
name|resolver
operator|.
name|getProperty
argument_list|(
literal|"enabled"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
block|}
end_class

end_unit

