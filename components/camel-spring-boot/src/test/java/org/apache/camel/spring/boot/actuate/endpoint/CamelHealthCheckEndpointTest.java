begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.actuate.endpoint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|actuate
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|health
operator|.
name|HealthCheckResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|health
operator|.
name|AbstractHealthCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|CamelAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_class
annotation|@
name|DirtiesContext
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|SpringBootTest
argument_list|(
name|classes
operator|=
block|{
name|CamelAutoConfiguration
operator|.
name|class
block|,
name|CamelHealthCheckEndpointAutoConfiguration
operator|.
name|class
block|,
name|CamelHealthCheckEndpointTest
operator|.
name|TestConfiguration
operator|.
name|class
block|}
argument_list|,
name|properties
operator|=
block|{      }
argument_list|)
DECL|class|CamelHealthCheckEndpointTest
specifier|public
class|class
name|CamelHealthCheckEndpointTest
block|{
annotation|@
name|Autowired
DECL|field|endpoint
specifier|private
name|CamelHealthCheckEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|Test
DECL|method|testHealthCheckEndpoint ()
specifier|public
name|void
name|testHealthCheckEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|CamelHealthCheckEndpoint
operator|.
name|HealthCheckResult
argument_list|>
name|results
init|=
name|endpoint
operator|.
name|invoke
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getCheck
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"check-1"
argument_list|)
operator|&&
name|r
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|HealthCheck
operator|.
name|State
operator|.
name|UP
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getCheck
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"check-2"
argument_list|)
operator|&&
name|r
operator|.
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|HealthCheck
operator|.
name|State
operator|.
name|DOWN
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvokeHealthCheckEndpoint ()
specifier|public
name|void
name|testInvokeHealthCheckEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|CamelHealthCheckEndpoint
operator|.
name|HealthCheckResult
argument_list|>
name|result1
init|=
name|endpoint
operator|.
name|invoke
argument_list|(
literal|"check-1"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|CamelHealthCheckEndpoint
operator|.
name|HealthCheckResult
argument_list|>
name|result2
init|=
name|endpoint
operator|.
name|invoke
argument_list|(
literal|"check-2"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|CamelHealthCheckEndpoint
operator|.
name|HealthCheckResult
argument_list|>
name|result3
init|=
name|endpoint
operator|.
name|invoke
argument_list|(
literal|"check-3"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result1
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"check-1"
argument_list|,
name|result1
operator|.
name|get
argument_list|()
operator|.
name|getCheck
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HealthCheck
operator|.
name|State
operator|.
name|UP
operator|.
name|name
argument_list|()
argument_list|,
name|result1
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result2
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"check-2"
argument_list|,
name|result2
operator|.
name|get
argument_list|()
operator|.
name|getCheck
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|HealthCheck
operator|.
name|State
operator|.
name|DOWN
operator|.
name|name
argument_list|()
argument_list|,
name|result2
operator|.
name|get
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|result3
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestConfiguration
specifier|public
specifier|static
class|class
name|TestConfiguration
block|{
annotation|@
name|Bean
DECL|method|check1 ()
specifier|public
name|HealthCheck
name|check1
parameter_list|()
block|{
name|MyCheck
name|check
init|=
operator|new
name|MyCheck
argument_list|(
literal|"test"
argument_list|,
literal|"check-1"
argument_list|)
decl_stmt|;
name|check
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|check
operator|.
name|setState
argument_list|(
name|HealthCheck
operator|.
name|State
operator|.
name|UP
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
annotation|@
name|Bean
DECL|method|check2 ()
specifier|public
name|HealthCheck
name|check2
parameter_list|()
block|{
name|MyCheck
name|check
init|=
operator|new
name|MyCheck
argument_list|(
literal|"test"
argument_list|,
literal|"check-2"
argument_list|)
decl_stmt|;
name|check
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|check
operator|.
name|setState
argument_list|(
name|HealthCheck
operator|.
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
block|}
DECL|class|MyCheck
specifier|public
specifier|static
class|class
name|MyCheck
extends|extends
name|AbstractHealthCheck
block|{
DECL|field|state
specifier|private
name|State
name|state
decl_stmt|;
DECL|method|MyCheck (String group, String id)
specifier|public
name|MyCheck
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|group
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
DECL|method|getState ()
specifier|public
name|State
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
DECL|method|setState (State state)
specifier|public
name|void
name|setState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCall (HealthCheckResultBuilder builder, Map<String, Object> options)
specifier|protected
name|void
name|doCall
parameter_list|(
name|HealthCheckResultBuilder
name|builder
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
parameter_list|)
block|{
name|builder
operator|.
name|state
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

