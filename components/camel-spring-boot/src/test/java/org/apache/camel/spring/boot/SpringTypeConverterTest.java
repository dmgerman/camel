begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Qualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|EnableAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|web
operator|.
name|WebMvcAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|ConversionFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|ConversionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|ConverterNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|converter
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|support
operator|.
name|DefaultConversionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|SpringBootTest
argument_list|(
name|classes
operator|=
name|SpringTypeConverterTest
operator|.
name|SpringTypeConversionConfiguration
operator|.
name|class
argument_list|)
DECL|class|SpringTypeConverterTest
specifier|public
class|class
name|SpringTypeConverterTest
block|{
annotation|@
name|Autowired
annotation|@
name|Qualifier
argument_list|(
literal|"camelSpringConversionService"
argument_list|)
DECL|field|conversionService
name|ConversionService
name|conversionService
decl_stmt|;
annotation|@
name|Autowired
annotation|@
name|Qualifier
argument_list|(
literal|"camelSpringTypeConverter"
argument_list|)
DECL|field|converter
name|SpringTypeConverter
name|converter
decl_stmt|;
annotation|@
name|Test
DECL|method|testConversionService ()
specifier|public
name|void
name|testConversionService
parameter_list|()
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|source
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Person
argument_list|(
literal|"Name"
argument_list|,
literal|30
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conversionService
operator|.
name|canConvert
argument_list|(
name|Person
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|conversionService
operator|.
name|canConvert
argument_list|(
name|source
operator|.
name|getClass
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|conversionService
operator|.
name|convert
argument_list|(
name|source
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConversionFailedException
name|e
parameter_list|)
block|{
comment|// Expected as Person can't be converted to a string according to
comment|// Spring's FallbackObjectToStringConverter, see javadoc for:
comment|//
comment|//   org.springframework.core.convert.support.FallbackObjectToStringConverter
comment|//
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ConverterNotFoundException
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
name|converter
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|Person
specifier|public
specifier|static
class|class
name|Person
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|age
specifier|private
name|int
name|age
decl_stmt|;
DECL|method|Person (String name, int age)
specifier|public
name|Person
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|age
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|age
operator|=
name|age
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getAge ()
specifier|public
name|int
name|getAge
parameter_list|()
block|{
return|return
name|age
return|;
block|}
DECL|method|setAge (int age)
specifier|public
name|void
name|setAge
parameter_list|(
name|int
name|age
parameter_list|)
block|{
name|this
operator|.
name|age
operator|=
name|age
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Person{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", age="
operator|+
name|age
operator|+
literal|'}'
return|;
block|}
block|}
annotation|@
name|Configuration
annotation|@
name|EnableAutoConfiguration
argument_list|(
name|exclude
operator|=
block|{
name|CamelAutoConfiguration
operator|.
name|class
block|,
name|TypeConversionConfiguration
operator|.
name|class
block|,
name|WebMvcAutoConfiguration
operator|.
name|class
block|}
argument_list|)
DECL|class|SpringTypeConversionConfiguration
specifier|public
specifier|static
class|class
name|SpringTypeConversionConfiguration
block|{
annotation|@
name|Bean
DECL|method|camelSpringConversionService (ApplicationContext applicationContext)
name|ConversionService
name|camelSpringConversionService
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
name|DefaultConversionService
name|service
init|=
operator|new
name|DefaultConversionService
argument_list|()
decl_stmt|;
for|for
control|(
name|Converter
name|converter
range|:
name|applicationContext
operator|.
name|getBeansOfType
argument_list|(
name|Converter
operator|.
name|class
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|service
operator|.
name|addConverter
argument_list|(
name|converter
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
annotation|@
name|Bean
DECL|method|camelSpringTypeConverter (List<ConversionService> conversionServices)
name|SpringTypeConverter
name|camelSpringTypeConverter
parameter_list|(
name|List
argument_list|<
name|ConversionService
argument_list|>
name|conversionServices
parameter_list|)
block|{
return|return
operator|new
name|SpringTypeConverter
argument_list|(
name|conversionServices
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

