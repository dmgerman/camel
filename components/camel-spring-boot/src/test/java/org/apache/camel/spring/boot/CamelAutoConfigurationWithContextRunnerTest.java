begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigurations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|runner
operator|.
name|ApplicationContextRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|CamelAutoConfigurationWithContextRunnerTest
specifier|public
class|class
name|CamelAutoConfigurationWithContextRunnerTest
block|{
annotation|@
name|Test
DECL|method|testCamelAnnotationsAutoConfigurationBean ()
specifier|public
name|void
name|testCamelAnnotationsAutoConfigurationBean
parameter_list|()
block|{
operator|new
name|ApplicationContextRunner
argument_list|()
operator|.
name|withConfiguration
argument_list|(
name|AutoConfigurations
operator|.
name|of
argument_list|(
name|CamelAutoConfigurationTest
operator|.
name|class
argument_list|,
name|RouteConfigWithCamelContextInjected
operator|.
name|class
argument_list|,
name|CamelAutoConfigurationWithContextRunnerTest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|withPropertyValues
argument_list|(
literal|"camel.springboot.consumerTemplateCacheSize=100"
argument_list|,
literal|"camel.springboot.jmxEnabled=true"
argument_list|,
literal|"camel.springboot.name=customName"
argument_list|,
literal|"camel.springboot.typeConversion=true"
argument_list|,
literal|"camel.springboot.threadNamePattern=customThreadName #counter#"
argument_list|)
operator|.
name|run
argument_list|(
parameter_list|(
name|context
parameter_list|)
lambda|->
block|{
name|assertThat
argument_list|(
name|context
argument_list|)
operator|.
name|doesNotHaveBean
argument_list|(
name|CamelAnnotationsTest
operator|.
name|TestConfig
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
argument_list|)
operator|.
name|doesNotHaveBean
argument_list|(
name|CamelAnnotationsTest
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
argument_list|)
operator|.
name|getBeanNames
argument_list|(
name|CamelAutoConfigurationTest
operator|.
name|class
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
argument_list|)
operator|.
name|hasSingleBean
argument_list|(
name|RouteConfigWithCamelContextInjected
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|context
argument_list|)
operator|.
name|getBean
argument_list|(
name|CamelAutoConfigurationTest
operator|.
name|class
argument_list|)
operator|.
name|hasNoNullFieldsOrProperties
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

