begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.issues
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|issues
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExchangeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ToDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestBindingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|EnableAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|HttpMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|http
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|SocketUtils
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|EnableAutoConfiguration
annotation|@
name|SpringBootTest
argument_list|(
name|classes
operator|=
block|{
name|RestDslPostTest
operator|.
name|class
block|}
argument_list|)
DECL|class|RestDslPostTest
specifier|public
class|class
name|RestDslPostTest
extends|extends
name|Assert
block|{
DECL|field|port
specifier|final
specifier|static
name|int
name|port
init|=
name|SocketUtils
operator|.
name|findAvailableTcpPort
argument_list|(
literal|20000
argument_list|)
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:user"
argument_list|)
DECL|field|resultEndpointUser
specifier|protected
name|MockEndpoint
name|resultEndpointUser
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:country"
argument_list|)
DECL|field|resultEndpointCountry
specifier|protected
name|MockEndpoint
name|resultEndpointCountry
decl_stmt|;
annotation|@
name|Autowired
DECL|field|template
specifier|protected
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|Autowired
DECL|field|context
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Test
DECL|method|testMultiplePostTypes ()
specifier|public
name|void
name|testMultiplePostTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|UserPojo
name|user
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user
operator|.
name|setName
argument_list|(
literal|"My Name"
argument_list|)
expr_stmt|;
name|resultEndpointUser
operator|.
name|expectedBodiesReceived
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|resultEndpointUser
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CountryPojo
name|country
init|=
operator|new
name|CountryPojo
argument_list|()
decl_stmt|;
name|country
operator|.
name|setCountry
argument_list|(
literal|"England"
argument_list|)
expr_stmt|;
name|country
operator|.
name|setIso
argument_list|(
literal|"EN"
argument_list|)
expr_stmt|;
name|resultEndpointCountry
operator|.
name|expectedBodiesReceived
argument_list|(
name|country
argument_list|)
expr_stmt|;
name|resultEndpointCountry
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ExchangeBuilder
name|builder
init|=
name|ExchangeBuilder
operator|.
name|anExchange
argument_list|(
name|context
argument_list|)
operator|.
name|withHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|HttpMethod
operator|.
name|POST
argument_list|)
operator|.
name|withHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|Exchange
name|outExchangeUser
init|=
name|builder
operator|.
name|withBody
argument_list|(
literal|"{\"id\": 1, \"name\": \"My Name\"}"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Exchange
name|outExchangeCountry
init|=
name|builder
operator|.
name|withBody
argument_list|(
literal|"{\"iso\": \"EN\", \"country\": \"England\"}"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port
operator|+
literal|"/user"
argument_list|,
name|outExchangeUser
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
literal|"jetty:http://localhost:"
operator|+
name|port
operator|+
literal|"/country"
argument_list|,
name|outExchangeCountry
argument_list|)
expr_stmt|;
name|resultEndpointCountry
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|resultEndpointUser
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Configuration
DECL|class|ContextConfig
specifier|public
specifier|static
class|class
name|ContextConfig
block|{
annotation|@
name|Bean
DECL|method|route ()
specifier|public
name|RouteBuilder
name|route
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|restConfiguration
argument_list|()
operator|.
name|host
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|port
argument_list|(
name|port
argument_list|)
operator|.
name|bindingMode
argument_list|(
name|RestBindingMode
operator|.
name|json
argument_list|)
expr_stmt|;
name|rest
argument_list|(
literal|"/"
argument_list|)
operator|.
name|post
argument_list|(
literal|"/user"
argument_list|)
operator|.
name|type
argument_list|(
name|UserPojo
operator|.
name|class
argument_list|)
operator|.
name|route
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:user"
argument_list|)
operator|.
name|endRest
argument_list|()
operator|.
name|post
argument_list|(
literal|"/country"
argument_list|)
operator|.
name|type
argument_list|(
name|CountryPojo
operator|.
name|class
argument_list|)
operator|.
name|route
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:country"
argument_list|)
operator|.
name|endRest
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

