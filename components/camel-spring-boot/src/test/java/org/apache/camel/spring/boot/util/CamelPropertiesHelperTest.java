begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|SpringBootApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|DirtiesContext
annotation|@
name|SpringBootApplication
annotation|@
name|SpringBootTest
argument_list|(
name|classes
operator|=
block|{
name|CamelPropertiesHelperTest
operator|.
name|TestConfiguration
operator|.
name|class
block|}
argument_list|)
DECL|class|CamelPropertiesHelperTest
specifier|public
class|class
name|CamelPropertiesHelperTest
block|{
annotation|@
name|Autowired
DECL|field|context
name|ApplicationContext
name|context
decl_stmt|;
annotation|@
name|Autowired
DECL|field|camelContext
name|CamelContext
name|camelContext
decl_stmt|;
annotation|@
name|Configuration
DECL|class|TestConfiguration
specifier|static
class|class
name|TestConfiguration
block|{
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"myCoolOption"
argument_list|)
DECL|method|myCoolBean ()
name|MyOption
name|myCoolBean
parameter_list|()
block|{
return|return
operator|new
name|MyOption
argument_list|()
return|;
block|}
block|}
DECL|class|MyOption
specifier|static
class|class
name|MyOption
block|{     }
DECL|class|MyClass
specifier|static
class|class
name|MyClass
block|{
DECL|field|id
specifier|private
name|int
name|id
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|option
specifier|private
name|MyOption
name|option
decl_stmt|;
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (int id)
specifier|public
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|setName (String name)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getOption ()
specifier|public
name|MyOption
name|getOption
parameter_list|()
block|{
return|return
name|option
return|;
block|}
DECL|method|setOption (MyOption option)
specifier|public
name|void
name|setOption
parameter_list|(
name|MyOption
name|option
parameter_list|)
block|{
name|this
operator|.
name|option
operator|=
name|option
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetCamelProperties ()
specifier|public
name|void
name|testSetCamelProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|MyClass
name|target
init|=
operator|new
name|MyClass
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Donald Duck"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
literal|"myCoolOption"
argument_list|)
expr_stmt|;
name|CamelPropertiesHelper
operator|.
name|setCamelProperties
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should configure all options"
argument_list|,
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Donald Duck"
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|context
operator|.
name|getBean
argument_list|(
literal|"myCoolOption"
argument_list|)
argument_list|,
name|target
operator|.
name|getOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCamelPropertiesReference ()
specifier|public
name|void
name|testSetCamelPropertiesReference
parameter_list|()
throws|throws
name|Exception
block|{
name|MyClass
name|target
init|=
operator|new
name|MyClass
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Donald Duck"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
literal|"#myCoolOption"
argument_list|)
expr_stmt|;
name|CamelPropertiesHelper
operator|.
name|setCamelProperties
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should configure all options"
argument_list|,
literal|0
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Donald Duck"
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|context
operator|.
name|getBean
argument_list|(
literal|"myCoolOption"
argument_list|)
argument_list|,
name|target
operator|.
name|getOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCamelPropertiesUnknownOption ()
specifier|public
name|void
name|testSetCamelPropertiesUnknownOption
parameter_list|()
throws|throws
name|Exception
block|{
name|MyClass
name|target
init|=
operator|new
name|MyClass
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Donald Duck"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
literal|"#myCoolOption"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"unknown"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
try|try
block|{
name|CamelPropertiesHelper
operator|.
name|setCamelProperties
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|map
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot configure option [unknown] with value [foo]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should configure the three first options"
argument_list|,
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Donald Duck"
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|context
operator|.
name|getBean
argument_list|(
literal|"myCoolOption"
argument_list|)
argument_list|,
name|target
operator|.
name|getOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCamelPropertiesUnknownOptionIgnore ()
specifier|public
name|void
name|testSetCamelPropertiesUnknownOptionIgnore
parameter_list|()
throws|throws
name|Exception
block|{
name|MyClass
name|target
init|=
operator|new
name|MyClass
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Donald Duck"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"option"
argument_list|,
literal|"#myCoolOption"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"unknown"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|CamelPropertiesHelper
operator|.
name|setCamelProperties
argument_list|(
name|camelContext
argument_list|,
name|target
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Should configure the three first options"
argument_list|,
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|target
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Donald Duck"
argument_list|,
name|target
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|context
operator|.
name|getBean
argument_list|(
literal|"myCoolOption"
argument_list|)
argument_list|,
name|target
operator|.
name|getOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

