begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|DefaultTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|test
operator|.
name|context
operator|.
name|SpringBootTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ConfigurableApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
operator|.
name|ClassMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringRunner
import|;
end_import

begin_comment
comment|/**  * Test class illustrating the invalid shutdown sequence when using the autoconfiguration  * provided by<code>camel-spring-boot</code>.  *<p>  * This is caused by the {@link TypeConversionConfiguration} class registering a  * {@link TypeConverter} (of actual type {@link DefaultTypeConverter}) in the Spring  * {@link ApplicationContext}. Its '{@code public void shutdown()}' method is inferred as a destroy-method by<i>Spring</i>,  * which will thus be called before the {@link CamelContext} shutdown  * when the context is closed.  *<p>  * As a consequence, any inflight message that should be processed during the graceful  * shutdown period of Camel won't have access to any type conversion support.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|DirtiesContext
argument_list|(
name|classMode
operator|=
name|ClassMode
operator|.
name|AFTER_EACH_TEST_METHOD
argument_list|)
comment|// Let the CamelAutoConfiguration do all the configuration for us
comment|// including the TypeConverter registration into the ApplicationContext
annotation|@
name|SpringBootTest
argument_list|(
name|classes
operator|=
block|{
name|CamelAutoConfiguration
operator|.
name|class
block|,
name|CamelSpringBootShutdownTest
operator|.
name|TestRouteConfiguration
operator|.
name|class
block|}
argument_list|)
DECL|class|CamelSpringBootShutdownTest
specifier|public
class|class
name|CamelSpringBootShutdownTest
block|{
annotation|@
name|Autowired
DECL|field|context
specifier|private
name|ConfigurableApplicationContext
name|context
decl_stmt|;
annotation|@
name|Autowired
DECL|field|template
specifier|private
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|Test
DECL|method|test1 ()
specifier|public
name|void
name|test1
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Send a String body that need to be converted to an InputStream
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
comment|// unwrap Exception
throw|throw
operator|(
name|Exception
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|test2 ()
specifier|public
name|void
name|test2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// Starts a Thread to close the context in 500 ms
operator|new
name|DelayedCloser
argument_list|(
name|context
argument_list|,
literal|500
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Send the same body, and let the context be closed before the processing happens
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
comment|// unwrap Exception
throw|throw
operator|(
name|Exception
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
DECL|class|DelayedCloser
specifier|public
specifier|static
class|class
name|DelayedCloser
extends|extends
name|Thread
block|{
DECL|field|sleep
specifier|private
specifier|final
name|long
name|sleep
decl_stmt|;
DECL|field|closeable
specifier|private
specifier|final
name|Closeable
name|closeable
decl_stmt|;
DECL|method|DelayedCloser (Closeable closeable, long sleep)
specifier|public
name|DelayedCloser
parameter_list|(
name|Closeable
name|closeable
parameter_list|,
name|long
name|sleep
parameter_list|)
block|{
name|this
operator|.
name|closeable
operator|=
name|closeable
expr_stmt|;
name|this
operator|.
name|sleep
operator|=
name|sleep
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|class|TestRouteConfiguration
specifier|public
specifier|static
class|class
name|TestRouteConfiguration
block|{
annotation|@
name|Bean
DECL|method|route ()
specifier|public
name|RouteBuilder
name|route
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
comment|// delay the processing to force the exchange to be inflight
comment|// during the context shutdown
operator|.
name|delay
argument_list|(
literal|1000
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:route-log"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

