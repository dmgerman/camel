begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.boot.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_class
DECL|class|GroupConditionTestBase
specifier|public
class|class
name|GroupConditionTestBase
block|{
annotation|@
name|Configuration
DECL|class|TestConfiguration
specifier|static
class|class
name|TestConfiguration
block|{
annotation|@
name|Bean
annotation|@
name|Conditional
argument_list|(
name|TestConfiguration
operator|.
name|Conditions
operator|.
name|class
argument_list|)
DECL|method|stringComponent ()
specifier|public
name|MyClass
name|stringComponent
parameter_list|()
block|{
return|return
operator|new
name|MyClass
argument_list|()
return|;
block|}
DECL|class|Conditions
specifier|static
class|class
name|Conditions
extends|extends
name|GroupCondition
block|{
DECL|method|Conditions ()
specifier|public
name|Conditions
parameter_list|()
block|{
name|super
argument_list|(
literal|"test.group"
argument_list|,
literal|"test.group.my-class"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|MyClass
specifier|static
class|class
name|MyClass
block|{     }
block|}
end_class

end_unit

