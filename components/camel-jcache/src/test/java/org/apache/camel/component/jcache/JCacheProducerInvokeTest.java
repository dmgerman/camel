begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|processor
operator|.
name|EntryProcessor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|processor
operator|.
name|EntryProcessorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|processor
operator|.
name|EntryProcessorResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|processor
operator|.
name|MutableEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JCacheProducerInvokeTest
specifier|public
class|class
name|JCacheProducerInvokeTest
extends|extends
name|JCacheComponentTestSupport
block|{
DECL|field|ENTRY_PROCESSOR
specifier|private
specifier|static
specifier|final
name|EntryProcessor
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
name|ENTRY_PROCESSOR
init|=
operator|new
name|EntryProcessor
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|process
parameter_list|(
name|MutableEntry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
parameter_list|,
name|Object
modifier|...
name|arguments
parameter_list|)
throws|throws
name|EntryProcessorException
block|{
return|return
literal|"processor-"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testInvoke ()
specifier|public
name|void
name|testInvoke
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|getCacheFromEndpoint
argument_list|(
literal|"jcache://test-cache"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|key
init|=
name|randomString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|val
init|=
name|randomString
argument_list|()
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JCacheConstants
operator|.
name|ACTION
argument_list|,
literal|"INVOKE"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JCacheConstants
operator|.
name|ENTRY_PROCESSOR
argument_list|,
name|ENTRY_PROCESSOR
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:invoke"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:invoke"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessagesMatches
argument_list|(
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|equals
argument_list|(
literal|"processor-"
operator|+
name|val
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvokeAll ()
specifier|public
name|void
name|testInvokeAll
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|getCacheFromEndpoint
argument_list|(
literal|"jcache://test-cache"
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|values1
init|=
name|generateRandomMap
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|values2
init|=
name|generateRandomMap
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cache
operator|.
name|putAll
argument_list|(
name|values1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|putAll
argument_list|(
name|values2
argument_list|)
expr_stmt|;
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JCacheConstants
operator|.
name|ACTION
argument_list|,
literal|"INVOKE"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JCacheConstants
operator|.
name|KEYS
argument_list|,
name|values2
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|JCacheConstants
operator|.
name|ENTRY_PROCESSOR
argument_list|,
name|ENTRY_PROCESSOR
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:invoke-all"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:invoke-all"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
name|JCacheConstants
operator|.
name|KEYS
argument_list|,
name|values2
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedMessagesMatches
argument_list|(
operator|new
name|Predicate
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|EntryProcessorResult
argument_list|<
name|Object
argument_list|>
argument_list|>
name|map
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|values2
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"processor-"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|values1
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|values2
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:invoke"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jcache://test-cache"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:invoke"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:invoke-all"
argument_list|)
operator|.
name|to
argument_list|(
literal|"jcache://test-cache"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:invoke-all"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

