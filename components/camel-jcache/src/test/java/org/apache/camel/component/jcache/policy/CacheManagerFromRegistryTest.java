begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Caching
import|;
end_import

begin_import
import|import
name|com
operator|.
name|hazelcast
operator|.
name|instance
operator|.
name|HazelcastInstanceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|//This test requires a registered CacheManager, but the others do not.
end_comment

begin_class
DECL|class|CacheManagerFromRegistryTest
specifier|public
class|class
name|CacheManagerFromRegistryTest
extends|extends
name|JCachePolicyTestBase
block|{
comment|//Register cacheManager in CamelContext. Set cacheName
annotation|@
name|Test
DECL|method|testCacheManagerFromContext ()
specifier|public
name|void
name|testCacheManagerFromContext
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|key
init|=
name|randomString
argument_list|()
decl_stmt|;
comment|//Send exchange
name|Object
name|responseBody
init|=
name|this
operator|.
name|template
argument_list|()
operator|.
name|requestBody
argument_list|(
literal|"direct:policy-context-manager"
argument_list|,
name|key
argument_list|)
decl_stmt|;
comment|//Verify the cacheManager "hzsecond" registered in the CamelContext was used
name|assertNull
argument_list|(
name|lookupCache
argument_list|(
literal|"contextCacheManager"
argument_list|)
argument_list|)
expr_stmt|;
name|CacheManager
name|cacheManager
init|=
name|Caching
operator|.
name|getCachingProvider
argument_list|()
operator|.
name|getCacheManager
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"hzsecond"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Cache
name|cache
init|=
name|cacheManager
operator|.
name|getCache
argument_list|(
literal|"contextCacheManager"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|generateValue
argument_list|(
name|key
argument_list|)
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|generateValue
argument_list|(
name|key
argument_list|)
argument_list|,
name|responseBody
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getMockEndpoint
argument_list|(
literal|"mock:value"
argument_list|)
operator|.
name|getExchanges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Use the cacheManager registered in CamelContext. See createRegistry(). Set cacheName
comment|//During the test JndiRegistry is used, so we add the cacheManager to JNDI. In Spring context a bean works.
name|JCachePolicy
name|jcachePolicy
init|=
operator|new
name|JCachePolicy
argument_list|()
decl_stmt|;
name|jcachePolicy
operator|.
name|setCacheName
argument_list|(
literal|"contextCacheManager"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:policy-context-manager"
argument_list|)
operator|.
name|policy
argument_list|(
name|jcachePolicy
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:value"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
comment|//Register another CacheManager in registry
name|registry
operator|.
name|bind
argument_list|(
literal|"cachemanager-hzsecond"
argument_list|,
name|Caching
operator|.
name|getCachingProvider
argument_list|()
operator|.
name|getCacheManager
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"hzsecond"
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
name|CacheManager
name|cacheManager
init|=
name|Caching
operator|.
name|getCachingProvider
argument_list|()
operator|.
name|getCacheManager
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"hzsecond"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cacheManager
operator|.
name|getCacheNames
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|s
parameter_list|)
lambda|->
name|cacheManager
operator|.
name|destroyCache
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|Caching
operator|.
name|getCachingProvider
argument_list|()
operator|.
name|close
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"hzsecond"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//We need to shutdown the second instance using the Hazelcast api. close(URI,ClassLoader) doesn't do that.
name|HazelcastInstanceFactory
operator|.
name|getHazelcastInstance
argument_list|(
literal|"hzsecond"
argument_list|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

