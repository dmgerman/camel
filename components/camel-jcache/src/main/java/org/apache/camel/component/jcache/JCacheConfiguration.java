begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryEventFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|expiry
operator|.
name|ExpiryPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|integration
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|integration
operator|.
name|CacheWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|JCacheConfiguration
specifier|public
class|class
name|JCacheConfiguration
block|{
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|cachingProvider
specifier|private
name|String
name|cachingProvider
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|cacheConfiguration
specifier|private
name|Configuration
name|cacheConfiguration
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|cacheConfigurationProperties
specifier|private
name|Properties
name|cacheConfigurationProperties
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|configurationUri
specifier|private
name|String
name|configurationUri
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|cacheLoaderFactory
specifier|private
name|Factory
argument_list|<
name|CacheLoader
argument_list|>
name|cacheLoaderFactory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|cacheWriterFactory
specifier|private
name|Factory
argument_list|<
name|CacheWriter
argument_list|>
name|cacheWriterFactory
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|expiryPolicyFactory
specifier|private
name|Factory
argument_list|<
name|ExpiryPolicy
argument_list|>
name|expiryPolicyFactory
decl_stmt|;
annotation|@
name|UriParam
DECL|field|readThrough
specifier|private
name|boolean
name|readThrough
decl_stmt|;
annotation|@
name|UriParam
DECL|field|writeThrough
specifier|private
name|boolean
name|writeThrough
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|storeByValue
specifier|private
name|boolean
name|storeByValue
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
DECL|field|statisticsEnabled
specifier|private
name|boolean
name|statisticsEnabled
decl_stmt|;
annotation|@
name|UriParam
DECL|field|managementEnabled
specifier|private
name|boolean
name|managementEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|enums
operator|=
literal|"CREATED,UPDATED,REMOVED,EXPIRED"
argument_list|)
DECL|field|filteredEvents
specifier|private
name|List
argument_list|<
name|EventType
argument_list|>
name|filteredEvents
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer,advanced"
argument_list|)
DECL|field|eventFilters
specifier|private
name|List
argument_list|<
name|CacheEntryEventFilter
argument_list|>
name|eventFilters
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|oldValueRequired
specifier|private
name|boolean
name|oldValueRequired
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|synchronous
specifier|private
name|boolean
name|synchronous
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|action
specifier|private
name|String
name|action
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|createCacheIfNotExists
specifier|private
name|boolean
name|createCacheIfNotExists
init|=
literal|true
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|JCacheConfiguration ()
specifier|public
name|JCacheConfiguration
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|JCacheConfiguration (CamelContext camelContext)
specifier|public
name|JCacheConfiguration
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
comment|/**      * The fully qualified class name of the {@link javax.cache.spi.CachingProvider}      */
DECL|method|getCachingProvider ()
specifier|public
name|String
name|getCachingProvider
parameter_list|()
block|{
return|return
name|cachingProvider
return|;
block|}
DECL|method|setCachingProvider (String cachingProvider)
specifier|public
name|void
name|setCachingProvider
parameter_list|(
name|String
name|cachingProvider
parameter_list|)
block|{
name|this
operator|.
name|cachingProvider
operator|=
name|cachingProvider
expr_stmt|;
block|}
comment|/**      * A {@link Configuration} for the {@link Cache}      */
DECL|method|getCacheConfiguration ()
specifier|public
name|Configuration
name|getCacheConfiguration
parameter_list|()
block|{
return|return
name|cacheConfiguration
return|;
block|}
DECL|method|setCacheConfiguration (Configuration cacheConfiguration)
specifier|public
name|void
name|setCacheConfiguration
parameter_list|(
name|Configuration
name|cacheConfiguration
parameter_list|)
block|{
name|this
operator|.
name|cacheConfiguration
operator|=
name|cacheConfiguration
expr_stmt|;
block|}
comment|/**      * The {@link Properties} for the {@link javax.cache.spi.CachingProvider} to      * create the {@link CacheManager}      */
DECL|method|getCacheConfigurationProperties ()
specifier|public
name|Properties
name|getCacheConfigurationProperties
parameter_list|()
block|{
return|return
name|cacheConfigurationProperties
return|;
block|}
DECL|method|setCacheConfigurationProperties (Properties cacheConfigurationProperties)
specifier|public
name|void
name|setCacheConfigurationProperties
parameter_list|(
name|Properties
name|cacheConfigurationProperties
parameter_list|)
block|{
name|this
operator|.
name|cacheConfigurationProperties
operator|=
name|cacheConfigurationProperties
expr_stmt|;
block|}
comment|/**      * An implementation specific URI for the {@link CacheManager}      */
DECL|method|getConfigurationUri ()
specifier|public
name|String
name|getConfigurationUri
parameter_list|()
block|{
return|return
name|configurationUri
return|;
block|}
DECL|method|setConfigurationUri (String configurationUri)
specifier|public
name|void
name|setConfigurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|this
operator|.
name|configurationUri
operator|=
name|configurationUri
expr_stmt|;
block|}
comment|/**      * The {@link CacheLoader} factory      */
DECL|method|getCacheLoaderFactory ()
specifier|public
name|Factory
argument_list|<
name|CacheLoader
argument_list|>
name|getCacheLoaderFactory
parameter_list|()
block|{
return|return
name|cacheLoaderFactory
return|;
block|}
DECL|method|setCacheLoaderFactory (Factory<CacheLoader> cacheLoaderFactory)
specifier|public
name|void
name|setCacheLoaderFactory
parameter_list|(
name|Factory
argument_list|<
name|CacheLoader
argument_list|>
name|cacheLoaderFactory
parameter_list|)
block|{
name|this
operator|.
name|cacheLoaderFactory
operator|=
name|cacheLoaderFactory
expr_stmt|;
block|}
comment|/**      * The {@link CacheWriter} factory      */
DECL|method|getCacheWriterFactory ()
specifier|public
name|Factory
argument_list|<
name|CacheWriter
argument_list|>
name|getCacheWriterFactory
parameter_list|()
block|{
return|return
name|cacheWriterFactory
return|;
block|}
DECL|method|setCacheWriterFactory (Factory<CacheWriter> cacheWriterFactory)
specifier|public
name|void
name|setCacheWriterFactory
parameter_list|(
name|Factory
argument_list|<
name|CacheWriter
argument_list|>
name|cacheWriterFactory
parameter_list|)
block|{
name|this
operator|.
name|cacheWriterFactory
operator|=
name|cacheWriterFactory
expr_stmt|;
block|}
comment|/**      * The {@link ExpiryPolicy} factory      */
DECL|method|getExpiryPolicyFactory ()
specifier|public
name|Factory
argument_list|<
name|ExpiryPolicy
argument_list|>
name|getExpiryPolicyFactory
parameter_list|()
block|{
return|return
name|expiryPolicyFactory
return|;
block|}
DECL|method|setExpiryPolicyFactory (Factory<ExpiryPolicy> expiryPolicyFactory)
specifier|public
name|void
name|setExpiryPolicyFactory
parameter_list|(
name|Factory
argument_list|<
name|ExpiryPolicy
argument_list|>
name|expiryPolicyFactory
parameter_list|)
block|{
name|this
operator|.
name|expiryPolicyFactory
operator|=
name|expiryPolicyFactory
expr_stmt|;
block|}
comment|/**      * If read-through caching should be used      */
DECL|method|isReadThrough ()
specifier|public
name|boolean
name|isReadThrough
parameter_list|()
block|{
return|return
name|readThrough
return|;
block|}
DECL|method|setReadThrough (boolean readThrough)
specifier|public
name|void
name|setReadThrough
parameter_list|(
name|boolean
name|readThrough
parameter_list|)
block|{
name|this
operator|.
name|readThrough
operator|=
name|readThrough
expr_stmt|;
block|}
comment|/**      * If write-through caching should be used      */
DECL|method|isWriteThrough ()
specifier|public
name|boolean
name|isWriteThrough
parameter_list|()
block|{
return|return
name|writeThrough
return|;
block|}
DECL|method|setWriteThrough (boolean writeThrough)
specifier|public
name|void
name|setWriteThrough
parameter_list|(
name|boolean
name|writeThrough
parameter_list|)
block|{
name|this
operator|.
name|writeThrough
operator|=
name|writeThrough
expr_stmt|;
block|}
comment|/**      * If cache should use store-by-value or store-by-reference semantics      */
DECL|method|isStoreByValue ()
specifier|public
name|boolean
name|isStoreByValue
parameter_list|()
block|{
return|return
name|storeByValue
return|;
block|}
DECL|method|setStoreByValue (boolean storeByValue)
specifier|public
name|void
name|setStoreByValue
parameter_list|(
name|boolean
name|storeByValue
parameter_list|)
block|{
name|this
operator|.
name|storeByValue
operator|=
name|storeByValue
expr_stmt|;
block|}
comment|/**      * Whether statistics gathering is enabled      */
DECL|method|isStatisticsEnabled ()
specifier|public
name|boolean
name|isStatisticsEnabled
parameter_list|()
block|{
return|return
name|statisticsEnabled
return|;
block|}
DECL|method|setStatisticsEnabled (boolean statisticsEnabled)
specifier|public
name|void
name|setStatisticsEnabled
parameter_list|(
name|boolean
name|statisticsEnabled
parameter_list|)
block|{
name|this
operator|.
name|statisticsEnabled
operator|=
name|statisticsEnabled
expr_stmt|;
block|}
comment|/**      * Whether management gathering is enabled      */
DECL|method|isManagementEnabled ()
specifier|public
name|boolean
name|isManagementEnabled
parameter_list|()
block|{
return|return
name|managementEnabled
return|;
block|}
DECL|method|setManagementEnabled (boolean managementEnabled)
specifier|public
name|void
name|setManagementEnabled
parameter_list|(
name|boolean
name|managementEnabled
parameter_list|)
block|{
name|this
operator|.
name|managementEnabled
operator|=
name|managementEnabled
expr_stmt|;
block|}
comment|/**      * Events a consumer should filter      */
DECL|method|getFilteredEvents ()
specifier|public
name|List
argument_list|<
name|EventType
argument_list|>
name|getFilteredEvents
parameter_list|()
block|{
return|return
name|filteredEvents
return|;
block|}
DECL|method|setFilteredEvents (List<EventType> filteredEvents)
specifier|public
name|void
name|setFilteredEvents
parameter_list|(
name|List
argument_list|<
name|EventType
argument_list|>
name|filteredEvents
parameter_list|)
block|{
name|this
operator|.
name|filteredEvents
operator|=
name|filteredEvents
expr_stmt|;
block|}
DECL|method|setFilteredEvents (String filteredEvents)
specifier|public
name|void
name|setFilteredEvents
parameter_list|(
name|String
name|filteredEvents
parameter_list|)
block|{
name|this
operator|.
name|filteredEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|event
range|:
name|filteredEvents
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|this
operator|.
name|filteredEvents
operator|.
name|add
argument_list|(
name|EventType
operator|.
name|valueOf
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The CacheEntryEventFilter      */
DECL|method|getEventFilters ()
specifier|public
name|List
argument_list|<
name|CacheEntryEventFilter
argument_list|>
name|getEventFilters
parameter_list|()
block|{
return|return
name|eventFilters
return|;
block|}
DECL|method|setEventFilters (List<CacheEntryEventFilter> eventFilters)
specifier|public
name|void
name|setEventFilters
parameter_list|(
name|List
argument_list|<
name|CacheEntryEventFilter
argument_list|>
name|eventFilters
parameter_list|)
block|{
name|this
operator|.
name|eventFilters
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|eventFilters
argument_list|)
expr_stmt|;
block|}
DECL|method|setEventFilters (String eventFilter)
specifier|public
name|void
name|setEventFilters
parameter_list|(
name|String
name|eventFilter
parameter_list|)
block|{
name|this
operator|.
name|eventFilters
operator|=
name|EndpointHelper
operator|.
name|resolveReferenceListParameter
argument_list|(
name|camelContext
argument_list|,
name|eventFilter
argument_list|,
name|CacheEntryEventFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * if the old value is required for events      */
DECL|method|isOldValueRequired ()
specifier|public
name|boolean
name|isOldValueRequired
parameter_list|()
block|{
return|return
name|oldValueRequired
return|;
block|}
DECL|method|setOldValueRequired (boolean oldValueRequired)
specifier|public
name|void
name|setOldValueRequired
parameter_list|(
name|boolean
name|oldValueRequired
parameter_list|)
block|{
name|this
operator|.
name|oldValueRequired
operator|=
name|oldValueRequired
expr_stmt|;
block|}
comment|/**      * if the the event listener should block the thread causing the event      */
DECL|method|isSynchronous ()
specifier|public
name|boolean
name|isSynchronous
parameter_list|()
block|{
return|return
name|synchronous
return|;
block|}
DECL|method|setSynchronous (boolean synchronous)
specifier|public
name|void
name|setSynchronous
parameter_list|(
name|boolean
name|synchronous
parameter_list|)
block|{
name|this
operator|.
name|synchronous
operator|=
name|synchronous
expr_stmt|;
block|}
DECL|method|getAction ()
specifier|public
name|String
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * To configure using a cache operation by default. If an operation in the      * message header, then the operation from the header takes precedence.      */
DECL|method|setAction (String action)
specifier|public
name|void
name|setAction
parameter_list|(
name|String
name|action
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
DECL|method|isCreateCacheIfNotExists ()
specifier|public
name|boolean
name|isCreateCacheIfNotExists
parameter_list|()
block|{
return|return
name|createCacheIfNotExists
return|;
block|}
comment|/**      * Configure if a cache need to be created if it does exist or can't be      * pre-configured.      */
DECL|method|setCreateCacheIfNotExists (boolean createCacheIfNotExists)
specifier|public
name|void
name|setCreateCacheIfNotExists
parameter_list|(
name|boolean
name|createCacheIfNotExists
parameter_list|)
block|{
name|this
operator|.
name|createCacheIfNotExists
operator|=
name|createCacheIfNotExists
expr_stmt|;
block|}
block|}
end_class

end_unit

