begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryEventFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryListenerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|EventType
import|;
end_import

begin_class
DECL|class|JCacheEntryEventFilters
class|class
name|JCacheEntryEventFilters
block|{
DECL|class|Named
specifier|public
specifier|static
class|class
name|Named
implements|implements
name|CacheEntryEventFilter
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|field|filteredEvents
specifier|private
name|List
argument_list|<
name|EventType
argument_list|>
name|filteredEvents
decl_stmt|;
DECL|method|Named (Collection<EventType> filteredEventNames)
name|Named
parameter_list|(
name|Collection
argument_list|<
name|EventType
argument_list|>
name|filteredEventNames
parameter_list|)
block|{
if|if
condition|(
name|filteredEventNames
operator|!=
literal|null
operator|&&
operator|!
name|filteredEventNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|filteredEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|filteredEventNames
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|evaluate (CacheEntryEvent<?, ?> event)
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|CacheEntryEvent
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|event
parameter_list|)
throws|throws
name|CacheEntryListenerException
block|{
if|if
condition|(
name|filteredEvents
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|!
name|filteredEvents
operator|.
name|contains
argument_list|(
name|event
operator|.
name|getEventType
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|Chained
specifier|public
specifier|static
class|class
name|Chained
implements|implements
name|CacheEntryEventFilter
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|field|filteredEvents
specifier|private
specifier|final
name|List
argument_list|<
name|CacheEntryEventFilter
argument_list|>
name|filteredEvents
decl_stmt|;
DECL|field|filteredEventsSize
specifier|private
specifier|final
name|int
name|filteredEventsSize
decl_stmt|;
DECL|method|Chained (List<CacheEntryEventFilter> filteredEvents)
name|Chained
parameter_list|(
name|List
argument_list|<
name|CacheEntryEventFilter
argument_list|>
name|filteredEvents
parameter_list|)
block|{
if|if
condition|(
name|filteredEvents
operator|!=
literal|null
operator|&&
operator|!
name|filteredEvents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|filteredEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|filteredEvents
argument_list|)
expr_stmt|;
name|this
operator|.
name|filteredEventsSize
operator|=
name|this
operator|.
name|filteredEvents
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|filteredEvents
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|filteredEventsSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|evaluate (CacheEntryEvent<?, ?> event)
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|CacheEntryEvent
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|event
parameter_list|)
throws|throws
name|CacheEntryListenerException
block|{
if|if
condition|(
name|filteredEvents
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filteredEventsSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|filteredEvents
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|evaluate
argument_list|(
name|event
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

