begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Caching
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|MutableConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NamedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Policy for routes. It caches the final body of a route and next time takes it from the cache instead of executing the route.  * The cache key is determined by the keyExpression (message body by default).  * If there is an object in the cache under that key the rest of the route is not executed, but the cached object is added to the Exchange.  *  * Fields:  * cache: JCache to use  * cacheManager: If cache is not set, a new one is get or created using this cacheManager. If cacheManager is not set, we try to lookup one from CamelContext.  * cacheName: Name of the cache to use or create. RouteId is used by default.  * cacheConfiguration: CacheConfiguration used if a new cache is created. Using default MutableConfiguration if not set.  * keyExpression: The Expression to generate the key for the cache. E.g simple("${header.username}")  * enabled: If JCachePolicy is not enabled, no policy is added to the route. Has an impact only during startup.  */
end_comment

begin_class
DECL|class|JCachePolicy
specifier|public
class|class
name|JCachePolicy
implements|implements
name|Policy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JCachePolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cache
specifier|private
name|Cache
name|cache
decl_stmt|;
DECL|field|cacheManager
specifier|private
name|CacheManager
name|cacheManager
decl_stmt|;
DECL|field|cacheName
specifier|private
name|String
name|cacheName
decl_stmt|;
DECL|field|cacheConfiguration
specifier|private
name|Configuration
name|cacheConfiguration
decl_stmt|;
DECL|field|keyExpression
specifier|private
name|Expression
name|keyExpression
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|beforeWrap (RouteContext routeContext, NamedNode namedNode)
specifier|public
name|void
name|beforeWrap
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|NamedNode
name|namedNode
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|wrap (RouteContext routeContext, Processor processor)
specifier|public
name|Processor
name|wrap
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
comment|//Don't add JCachePolicyProcessor if JCachePolicy is disabled. This means enable/disable has impact only during startup
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
condition|)
block|{
return|return
name|processor
return|;
block|}
name|Cache
name|cache
init|=
name|this
operator|.
name|cache
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
comment|//Create cache based on given configuration
comment|//Find CacheManager
name|CacheManager
name|cacheManager
init|=
name|this
operator|.
name|cacheManager
decl_stmt|;
comment|//Lookup CacheManager from CamelContext if it's not set
if|if
condition|(
name|cacheManager
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|CacheManager
argument_list|>
name|lookupResult
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|CacheManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|lookupResult
argument_list|)
condition|)
block|{
comment|//Use the first cache manager found
name|cacheManager
operator|=
name|lookupResult
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CacheManager from CamelContext registry: {}"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Lookup CacheManager the standard way
if|if
condition|(
name|cacheManager
operator|==
literal|null
condition|)
block|{
name|cacheManager
operator|=
name|Caching
operator|.
name|getCachingProvider
argument_list|()
operator|.
name|getCacheManager
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"CacheManager from CachingProvider: {}"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
block|}
comment|//Use routeId as cacheName if it's not set
name|String
name|cacheName
init|=
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|this
operator|.
name|cacheName
argument_list|)
condition|?
name|this
operator|.
name|cacheName
else|:
name|routeContext
operator|.
name|getRouteId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting cache:{}"
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
comment|//Get cache or create a new one using the cacheConfiguration
name|cache
operator|=
name|cacheManager
operator|.
name|getCache
argument_list|(
name|cacheName
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create cache:{}"
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|cache
operator|=
name|cacheManager
operator|.
name|createCache
argument_list|(
name|cacheName
argument_list|,
name|cacheConfiguration
operator|!=
literal|null
condition|?
name|this
operator|.
name|cacheConfiguration
else|:
operator|(
name|Configuration
operator|)
operator|new
name|MutableConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Create processor
return|return
operator|new
name|JCachePolicyProcessor
argument_list|(
name|cache
argument_list|,
name|keyExpression
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|getCache ()
specifier|public
name|Cache
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
DECL|method|setCache (Cache cache)
specifier|public
name|void
name|setCache
parameter_list|(
name|Cache
name|cache
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
DECL|method|getCacheManager ()
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|cacheManager
return|;
block|}
DECL|method|setCacheManager (CacheManager cacheManager)
specifier|public
name|void
name|setCacheManager
parameter_list|(
name|CacheManager
name|cacheManager
parameter_list|)
block|{
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
block|}
DECL|method|getCacheConfiguration ()
specifier|public
name|Configuration
name|getCacheConfiguration
parameter_list|()
block|{
return|return
name|cacheConfiguration
return|;
block|}
DECL|method|setCacheConfiguration (Configuration cacheConfiguration)
specifier|public
name|void
name|setCacheConfiguration
parameter_list|(
name|Configuration
name|cacheConfiguration
parameter_list|)
block|{
name|this
operator|.
name|cacheConfiguration
operator|=
name|cacheConfiguration
expr_stmt|;
block|}
DECL|method|getCacheName ()
specifier|public
name|String
name|getCacheName
parameter_list|()
block|{
return|return
name|cacheName
return|;
block|}
DECL|method|setCacheName (String cacheName)
specifier|public
name|void
name|setCacheName
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
name|this
operator|.
name|cacheName
operator|=
name|cacheName
expr_stmt|;
block|}
DECL|method|getKeyExpression ()
specifier|public
name|Expression
name|getKeyExpression
parameter_list|()
block|{
return|return
name|keyExpression
return|;
block|}
DECL|method|setKeyExpression (Expression keyExpression)
specifier|public
name|void
name|setKeyExpression
parameter_list|(
name|Expression
name|keyExpression
parameter_list|)
block|{
name|this
operator|.
name|keyExpression
operator|=
name|keyExpression
expr_stmt|;
block|}
DECL|method|isEnabled ()
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
DECL|method|setEnabled (boolean enabled)
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JCachePolicy{"
operator|+
literal|"keyExpression="
operator|+
name|keyExpression
operator|+
literal|", enabled="
operator|+
name|enabled
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

