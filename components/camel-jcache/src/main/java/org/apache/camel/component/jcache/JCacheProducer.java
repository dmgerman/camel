begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|processor
operator|.
name|EntryProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * The JCache producer.  */
end_comment

begin_class
DECL|class|JCacheProducer
specifier|public
class|class
name|JCacheProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|configuration
specifier|private
specifier|final
name|JCacheConfiguration
name|configuration
decl_stmt|;
DECL|method|JCacheProducer (JCacheEndpoint endpoint, JCacheConfiguration configuration)
specifier|public
name|JCacheProducer
parameter_list|(
name|JCacheEndpoint
name|endpoint
parameter_list|,
name|JCacheConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|actionName
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|ACTION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|actionName
operator|==
literal|null
condition|)
block|{
name|actionName
operator|=
name|configuration
operator|.
name|getAction
argument_list|()
expr_stmt|;
block|}
name|StringHelper
operator|.
name|notEmpty
argument_list|(
name|actionName
argument_list|,
name|JCacheConstants
operator|.
name|ACTION
argument_list|)
expr_stmt|;
name|Action
name|action
init|=
name|Action
operator|.
name|fromName
argument_list|(
name|actionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
block|{
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|getJCacheEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getCache
argument_list|()
decl_stmt|;
name|action
operator|.
name|validate
argument_list|(
name|cache
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|action
operator|.
name|execute
argument_list|(
name|cache
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The value '%s' is not allowed for parameter '%s'"
argument_list|,
name|actionName
argument_list|,
name|JCacheConstants
operator|.
name|ACTION
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|getCache
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
DECL|method|getJCacheEndpoint ()
specifier|private
name|JCacheEndpoint
name|getJCacheEndpoint
parameter_list|()
block|{
return|return
operator|(
name|JCacheEndpoint
operator|)
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|getCache ()
specifier|private
name|Cache
name|getCache
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getJCacheEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getCache
argument_list|()
return|;
block|}
DECL|enum|Action
specifier|private
enum|enum
name|Action
block|{
DECL|enumConstant|PUT
name|PUT
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|PUTALL
name|PUTALL
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{             }
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|cache
operator|.
name|putAll
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|PUTIFABSENT
name|PUTIFABSENT
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JCacheConstants
operator|.
name|RESULT
argument_list|,
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|GET
name|GET
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|GETALL
name|GETALL
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEYS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|cache
operator|.
name|getAll
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEYS
argument_list|,
name|Set
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|GETANDREMOVE
name|GETANDREMOVE
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|cache
operator|.
name|getAndRemove
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|GETANDREPLACE
name|GETANDREPLACE
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|cache
operator|.
name|getAndReplace
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|GETANDPUT
name|GETANDPUT
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|cache
operator|.
name|getAndPut
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|REPLACE
name|REPLACE
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|oldValue
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|OLD_VALUE
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JCacheConstants
operator|.
name|RESULT
argument_list|,
name|oldValue
operator|!=
literal|null
condition|?
name|cache
operator|.
name|replace
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|oldValue
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
else|:
name|cache
operator|.
name|replace
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|REMOVE
name|REMOVE
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|oldValue
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|OLD_VALUE
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JCacheConstants
operator|.
name|RESULT
argument_list|,
name|oldValue
operator|!=
literal|null
condition|?
name|cache
operator|.
name|remove
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|oldValue
argument_list|)
else|:
name|cache
operator|.
name|remove
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|REMOVEALL
name|REMOVEALL
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{             }
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEYS
argument_list|,
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|removeAll
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|,
DECL|enumConstant|INVOKE
name|INVOKE
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|headerIsNotNull
argument_list|(
name|exchange
argument_list|,
name|JCacheConstants
operator|.
name|ENTRY_PROCESSOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEYS
argument_list|)
operator|==
literal|null
operator|&&
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Either %s or %s must be set for action %s"
argument_list|,
name|JCacheConstants
operator|.
name|KEYS
argument_list|,
name|JCacheConstants
operator|.
name|KEY
argument_list|,
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEYS
argument_list|,
name|Set
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntryProcessor
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|,
name|Object
argument_list|>
name|entryProcessor
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|ENTRY_PROCESSOR
argument_list|,
name|EntryProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|ARGUMENTS
argument_list|,
name|Collection
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|arguments
operator|==
literal|null
condition|)
block|{
name|arguments
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|message
operator|.
name|setBody
argument_list|(
name|keys
operator|!=
literal|null
condition|?
name|cache
operator|.
name|invokeAll
argument_list|(
name|keys
argument_list|,
name|entryProcessor
argument_list|,
name|arguments
argument_list|)
else|:
name|cache
operator|.
name|invoke
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|)
argument_list|,
name|entryProcessor
argument_list|,
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|CLEAR
name|CLEAR
block|{
annotation|@
name|Override
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{             }
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|;
DECL|field|VALUES
specifier|static
specifier|final
name|Action
index|[]
name|VALUES
init|=
name|values
argument_list|()
decl_stmt|;
DECL|method|fromName (String name)
specifier|static
name|Action
name|fromName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
for|for
control|(
name|Action
name|action
range|:
name|VALUES
control|)
block|{
if|if
condition|(
name|action
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|action
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|validate (Cache<Object, Object> cache, Exchange exchange)
name|void
name|validate
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{         }
DECL|method|execute (Cache<Object, Object> cache, Exchange exchange)
name|void
name|execute
parameter_list|(
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{         }
DECL|method|headerIsNotNull (Exchange exchange, String... keys)
specifier|protected
name|void
name|headerIsNotNull
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
name|keys
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Header %s must be set for action %s"
argument_list|,
name|keys
index|[
name|i
index|]
argument_list|,
name|name
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

