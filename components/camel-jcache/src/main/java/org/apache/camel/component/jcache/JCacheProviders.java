begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
package|;
end_package

begin_enum
DECL|enum|JCacheProviders
specifier|public
enum|enum
name|JCacheProviders
implements|implements
name|JCacheProvider
block|{
DECL|enumConstant|hazelcast
name|hazelcast
block|{
block|{
name|shortName
operator|=
literal|"hazelcast"
expr_stmt|;
name|className
operator|=
literal|"com.hazelcast.cache.HazelcastCachingProvider"
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ehcache
name|ehcache
block|{
block|{
name|shortName
operator|=
literal|"ehcache"
expr_stmt|;
name|className
operator|=
literal|"org.ehcache.jsr107.EhcacheCachingProvider"
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|caffeine
name|caffeine
block|{
block|{
name|shortName
operator|=
literal|"caffeine"
expr_stmt|;
name|className
operator|=
literal|"com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider"
expr_stmt|;
block|}
block|}
block|,
DECL|enumConstant|ispnEmbedded
name|ispnEmbedded
block|{
block|{
name|shortName
operator|=
literal|"infinispan-embedded"
expr_stmt|;
name|className
operator|=
literal|"org.infinispan.jcache.embedded.JCachingProvider"
expr_stmt|;
block|}
block|}
block|;
DECL|field|shortName
specifier|protected
name|String
name|shortName
decl_stmt|;
DECL|field|className
specifier|protected
name|String
name|className
decl_stmt|;
annotation|@
name|Override
DECL|method|shortName ()
specifier|public
name|String
name|shortName
parameter_list|()
block|{
return|return
name|shortName
return|;
block|}
annotation|@
name|Override
DECL|method|className ()
specifier|public
name|String
name|className
parameter_list|()
block|{
return|return
name|className
return|;
block|}
DECL|method|lookup (String providerName)
specifier|public
specifier|static
name|JCacheProvider
name|lookup
parameter_list|(
name|String
name|providerName
parameter_list|)
block|{
if|if
condition|(
name|providerName
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|JCacheProvider
name|provider
range|:
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|provider
operator|.
name|shortName
argument_list|()
operator|.
name|equals
argument_list|(
name|providerName
argument_list|)
operator|||
name|provider
operator|.
name|className
argument_list|()
operator|.
name|equals
argument_list|(
name|providerName
argument_list|)
condition|)
block|{
return|return
name|provider
return|;
block|}
block|}
block|}
return|return
operator|new
name|JCacheProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|shortName
parameter_list|()
block|{
return|return
name|providerName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|className
parameter_list|()
block|{
return|return
name|providerName
return|;
block|}
block|}
return|;
block|}
block|}
end_enum

end_unit

