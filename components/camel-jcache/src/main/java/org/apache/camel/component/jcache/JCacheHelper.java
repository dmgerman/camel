begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_class
DECL|class|JCacheHelper
specifier|public
specifier|final
class|class
name|JCacheHelper
block|{
DECL|method|JCacheHelper ()
specifier|private
name|JCacheHelper
parameter_list|()
block|{     }
DECL|method|createManager (JCacheConfiguration configuration)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|JCacheManager
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createManager
parameter_list|(
name|JCacheConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|isOSGi
argument_list|()
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.camel.component.jcache.osgi.OSGiCacheManager"
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|ctor
init|=
name|type
operator|.
name|getConstructor
argument_list|(
name|JCacheConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|(
name|JCacheManager
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|ctor
operator|.
name|newInstance
argument_list|(
name|configuration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|JCacheManager
argument_list|<>
argument_list|(
name|configuration
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|tcclProxy (final T instance, Class<T> type, final ClassLoader classLoader)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|tcclProxy
parameter_list|(
specifier|final
name|T
name|instance
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|ClassLoader
name|classLoader
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|JCacheHelper
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|type
block|}
operator|,
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
lambda|->
block|{
specifier|final
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
return|return
name|method
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|args
argument_list|)
return|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|tccl
argument_list|)
expr_stmt|;
block|}
block|}
block|)
function|;
block|}
end_class

begin_function
DECL|method|isOSGi ()
specifier|public
specifier|static
name|boolean
name|isOSGi
parameter_list|()
block|{
try|try
block|{
comment|// Check if we are in an osgi container
name|Class
argument_list|<
name|?
argument_list|>
name|fu
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.osgi.framework.FrameworkUtil"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fu
operator|!=
literal|null
condition|)
block|{
name|Method
name|method
init|=
name|fu
operator|.
name|getMethod
argument_list|(
literal|"getBundle"
argument_list|,
name|Class
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|JCacheHelper
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
end_function

unit|}
end_unit

