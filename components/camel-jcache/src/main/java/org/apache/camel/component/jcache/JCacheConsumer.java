begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jcache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jcache
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|CacheEntryListenerConfiguration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|MutableCacheEntryListenerConfiguration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryEventFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|event
operator|.
name|CacheEntryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The JCache consumer.  */
end_comment

begin_class
DECL|class|JCacheConsumer
specifier|public
class|class
name|JCacheConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JCacheConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|entryListenerConfiguration
specifier|private
name|CacheEntryListenerConfiguration
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entryListenerConfiguration
decl_stmt|;
DECL|method|JCacheConsumer (final JCacheEndpoint endpoint, Processor processor)
specifier|public
name|JCacheConsumer
parameter_list|(
specifier|final
name|JCacheEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|entryListenerConfiguration
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|entryListenerConfiguration
operator|!=
literal|null
condition|)
block|{
name|getCache
argument_list|()
operator|.
name|deregisterCacheEntryListener
argument_list|(
name|entryListenerConfiguration
argument_list|)
expr_stmt|;
block|}
name|entryListenerConfiguration
operator|=
name|createEntryListenerConfiguration
argument_list|()
expr_stmt|;
name|getCache
argument_list|()
operator|.
name|registerCacheEntryListener
argument_list|(
name|entryListenerConfiguration
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|entryListenerConfiguration
operator|!=
literal|null
condition|)
block|{
name|getCache
argument_list|()
operator|.
name|deregisterCacheEntryListener
argument_list|(
name|entryListenerConfiguration
argument_list|)
expr_stmt|;
name|entryListenerConfiguration
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getJCacheEndpoint ()
specifier|private
name|JCacheEndpoint
name|getJCacheEndpoint
parameter_list|()
block|{
return|return
operator|(
name|JCacheEndpoint
operator|)
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|getCache ()
specifier|private
name|Cache
name|getCache
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getJCacheEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getCache
argument_list|()
return|;
block|}
DECL|method|createEntryListenerConfiguration ()
specifier|private
name|CacheEntryListenerConfiguration
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|createEntryListenerConfiguration
parameter_list|()
block|{
return|return
operator|new
name|MutableCacheEntryListenerConfiguration
argument_list|<>
argument_list|(
operator|new
name|Factory
argument_list|<
name|CacheEntryListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CacheEntryListener
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|()
block|{
return|return
operator|new
name|JCacheEntryEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onEvents
parameter_list|(
name|Iterable
argument_list|<
name|CacheEntryEvent
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
name|events
parameter_list|)
block|{
for|for
control|(
name|CacheEntryEvent
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|event
range|:
name|events
control|)
block|{
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|JCacheConstants
operator|.
name|EVENT_TYPE
argument_list|,
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|JCacheConstants
operator|.
name|KEY
argument_list|,
name|event
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isOldValueAvailable
argument_list|()
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|JCacheConstants
operator|.
name|OLD_VALUE
argument_list|,
name|event
operator|.
name|getOldValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error processing event "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
block|}
argument_list|,
operator|new
name|Factory
argument_list|<
name|CacheEntryEventFilter
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CacheEntryEventFilter
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|create
parameter_list|()
block|{
return|return
name|getJCacheEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getEventFilter
argument_list|()
return|;
block|}
block|}
argument_list|,
name|getJCacheEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isOldValueRequired
argument_list|()
argument_list|,
name|getJCacheEndpoint
argument_list|()
operator|.
name|getManager
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isSynchronous
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

