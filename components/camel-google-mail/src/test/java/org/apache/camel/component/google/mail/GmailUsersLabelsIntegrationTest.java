begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|gmail
operator|.
name|model
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|mail
operator|.
name|internal
operator|.
name|GoogleMailApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|mail
operator|.
name|internal
operator|.
name|GmailUsersLabelsApiMethod
import|;
end_import

begin_comment
comment|/**  * Test class for {@link com.google.api.services.gmail.Gmail$Users$Labels} APIs.  */
end_comment

begin_class
DECL|class|GmailUsersLabelsIntegrationTest
specifier|public
class|class
name|GmailUsersLabelsIntegrationTest
extends|extends
name|AbstractGoogleMailTestSupport
block|{
DECL|field|CAMEL_TEST_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|CAMEL_TEST_LABEL
init|=
literal|"CamelTestLabel"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GmailUsersLabelsIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|GoogleMailApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|GmailUsersLabelsApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testLabels ()
specifier|public
name|void
name|testLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using String message body for single parameter "userId"
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|gmail
operator|.
name|model
operator|.
name|ListLabelsResponse
name|labels
init|=
name|requestBody
argument_list|(
literal|"direct://LIST"
argument_list|,
name|CURRENT_USERID
argument_list|)
decl_stmt|;
name|String
name|labelId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getTestLabel
argument_list|(
name|labels
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelGoogleMail.userId"
argument_list|,
name|CURRENT_USERID
argument_list|)
expr_stmt|;
name|Label
name|label
init|=
operator|new
name|Label
argument_list|()
operator|.
name|setName
argument_list|(
name|CAMEL_TEST_LABEL
argument_list|)
operator|.
name|setMessageListVisibility
argument_list|(
literal|"show"
argument_list|)
operator|.
name|setLabelListVisibility
argument_list|(
literal|"labelShow"
argument_list|)
decl_stmt|;
comment|// parameter type is com.google.api.services.gmail.model.Label
name|headers
operator|.
name|put
argument_list|(
literal|"CamelGoogleMail.content"
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|gmail
operator|.
name|model
operator|.
name|Label
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://CREATE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"create result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|labelId
operator|=
name|result
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|labelId
operator|=
name|getTestLabel
argument_list|(
name|labels
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
comment|// using String message body for single parameter "userId"
name|labels
operator|=
name|requestBody
argument_list|(
literal|"direct://LIST"
argument_list|,
name|CURRENT_USERID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getTestLabel
argument_list|(
name|labels
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelGoogleMail.userId"
argument_list|,
name|CURRENT_USERID
argument_list|)
expr_stmt|;
comment|// parameter type is String
name|headers
operator|.
name|put
argument_list|(
literal|"CamelGoogleMail.id"
argument_list|,
name|labelId
argument_list|)
expr_stmt|;
name|requestBodyAndHeaders
argument_list|(
literal|"direct://DELETE"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
comment|// using String message body for single parameter "userId"
name|labels
operator|=
name|requestBody
argument_list|(
literal|"direct://LIST"
argument_list|,
name|CURRENT_USERID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getTestLabel
argument_list|(
name|labels
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestLabel (com.google.api.services.gmail.model.ListLabelsResponse labels)
specifier|private
name|Label
name|getTestLabel
parameter_list|(
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|gmail
operator|.
name|model
operator|.
name|ListLabelsResponse
name|labels
parameter_list|)
block|{
for|for
control|(
name|Label
name|label
range|:
name|labels
operator|.
name|getLabels
argument_list|()
control|)
block|{
if|if
condition|(
name|CAMEL_TEST_LABEL
operator|.
name|equals
argument_list|(
name|label
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|label
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for create
name|from
argument_list|(
literal|"direct://CREATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"google-mail://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/create"
argument_list|)
expr_stmt|;
comment|// test route for delete
name|from
argument_list|(
literal|"direct://DELETE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"google-mail://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/delete"
argument_list|)
expr_stmt|;
comment|// test route for get
name|from
argument_list|(
literal|"direct://GET"
argument_list|)
operator|.
name|to
argument_list|(
literal|"google-mail://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/get"
argument_list|)
expr_stmt|;
comment|// test route for list
name|from
argument_list|(
literal|"direct://LIST"
argument_list|)
operator|.
name|to
argument_list|(
literal|"google-mail://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/list?inBody=userId"
argument_list|)
expr_stmt|;
comment|// test route for patch
name|from
argument_list|(
literal|"direct://PATCH"
argument_list|)
operator|.
name|to
argument_list|(
literal|"google-mail://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/patch"
argument_list|)
expr_stmt|;
comment|// test route for update
name|from
argument_list|(
literal|"direct://UPDATE"
argument_list|)
operator|.
name|to
argument_list|(
literal|"google-mail://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/update"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

