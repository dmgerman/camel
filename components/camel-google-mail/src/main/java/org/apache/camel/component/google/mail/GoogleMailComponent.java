begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.google.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|api
operator|.
name|services
operator|.
name|gmail
operator|.
name|Gmail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|mail
operator|.
name|internal
operator|.
name|GoogleMailApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|google
operator|.
name|mail
operator|.
name|internal
operator|.
name|GoogleMailApiName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|component
operator|.
name|AbstractApiComponent
import|;
end_import

begin_comment
comment|/**  * Represents the component that manages {@link GoogleMailEndpoint}.  */
end_comment

begin_class
DECL|class|GoogleMailComponent
specifier|public
class|class
name|GoogleMailComponent
extends|extends
name|AbstractApiComponent
argument_list|<
name|GoogleMailApiName
argument_list|,
name|GoogleMailConfiguration
argument_list|,
name|GoogleMailApiCollection
argument_list|>
block|{
DECL|field|client
specifier|private
name|Gmail
name|client
decl_stmt|;
DECL|field|clientFactory
specifier|private
name|GoogleMailClientFactory
name|clientFactory
decl_stmt|;
DECL|method|GoogleMailComponent ()
specifier|public
name|GoogleMailComponent
parameter_list|()
block|{
name|super
argument_list|(
name|GoogleMailEndpoint
operator|.
name|class
argument_list|,
name|GoogleMailApiName
operator|.
name|class
argument_list|,
name|GoogleMailApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|GoogleMailComponent (CamelContext context)
specifier|public
name|GoogleMailComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|GoogleMailEndpoint
operator|.
name|class
argument_list|,
name|GoogleMailApiName
operator|.
name|class
argument_list|,
name|GoogleMailApiCollection
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApiName (String apiNameStr)
specifier|protected
name|GoogleMailApiName
name|getApiName
parameter_list|(
name|String
name|apiNameStr
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
return|return
name|GoogleMailApiName
operator|.
name|fromValue
argument_list|(
name|apiNameStr
argument_list|)
return|;
block|}
DECL|method|getClient ()
specifier|public
name|Gmail
name|getClient
parameter_list|()
block|{
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|client
operator|=
name|getClientFactory
argument_list|()
operator|.
name|makeClient
argument_list|(
name|configuration
operator|.
name|getClientId
argument_list|()
argument_list|,
name|configuration
operator|.
name|getClientSecret
argument_list|()
argument_list|,
name|configuration
operator|.
name|getScopes
argument_list|()
argument_list|,
name|configuration
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|configuration
operator|.
name|getRefreshToken
argument_list|()
argument_list|,
name|configuration
operator|.
name|getAccessToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|getClientFactory ()
specifier|public
name|GoogleMailClientFactory
name|getClientFactory
parameter_list|()
block|{
if|if
condition|(
name|clientFactory
operator|==
literal|null
condition|)
block|{
name|clientFactory
operator|=
operator|new
name|BatchGoogleMailClientFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|clientFactory
return|;
block|}
comment|/**      * To use the shared configuration. Properties of the shared configuration can also be set individually.      */
annotation|@
name|Override
DECL|method|setConfiguration (GoogleMailConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|GoogleMailConfiguration
name|configuration
parameter_list|)
block|{
name|super
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|GoogleMailConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|super
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
comment|/**      * To use the GoogleCalendarClientFactory as factory for creating the client.      * Will by default use {@link BatchGoogleMailClientFactory}      */
DECL|method|setClientFactory (GoogleMailClientFactory clientFactory)
specifier|public
name|void
name|setClientFactory
parameter_list|(
name|GoogleMailClientFactory
name|clientFactory
parameter_list|)
block|{
name|this
operator|.
name|clientFactory
operator|=
name|clientFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String methodName, GoogleMailApiName apiName, GoogleMailConfiguration endpointConfiguration)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|methodName
parameter_list|,
name|GoogleMailApiName
name|apiName
parameter_list|,
name|GoogleMailConfiguration
name|endpointConfiguration
parameter_list|)
block|{
name|endpointConfiguration
operator|.
name|setApiName
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
name|endpointConfiguration
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
return|return
operator|new
name|GoogleMailEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|apiName
argument_list|,
name|methodName
argument_list|,
name|endpointConfiguration
argument_list|)
return|;
block|}
DECL|method|getConfigurationOrCreate ()
specifier|private
name|GoogleMailConfiguration
name|getConfigurationOrCreate
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|setConfiguration
argument_list|(
operator|new
name|GoogleMailConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|getConfiguration
argument_list|()
return|;
block|}
DECL|method|getApiName ()
specifier|public
name|GoogleMailApiName
name|getApiName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getApiName
argument_list|()
return|;
block|}
comment|/**      * What kind of operation to perform      * @param apiName      */
DECL|method|setApiName (GoogleMailApiName apiName)
specifier|public
name|void
name|setApiName
parameter_list|(
name|GoogleMailApiName
name|apiName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setApiName
argument_list|(
name|apiName
argument_list|)
expr_stmt|;
block|}
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getMethodName
argument_list|()
return|;
block|}
comment|/**      * What sub operation to use for the selected operation      * @param methodName      */
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setMethodName
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientId ()
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getClientId
argument_list|()
return|;
block|}
comment|/**      * Client ID of the mail application      * @param clientId      */
DECL|method|setClientId (String clientId)
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientSecret ()
specifier|public
name|String
name|getClientSecret
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getClientSecret
argument_list|()
return|;
block|}
comment|/**      * Client secret of the mail application      * @param clientSecret      */
DECL|method|setClientSecret (String clientSecret)
specifier|public
name|void
name|setClientSecret
parameter_list|(
name|String
name|clientSecret
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setClientSecret
argument_list|(
name|clientSecret
argument_list|)
expr_stmt|;
block|}
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getAccessToken
argument_list|()
return|;
block|}
comment|/**      * OAuth 2 access token. This typically expires after an hour so refreshToken is recommended for long term usage.      * @param accessToken      */
DECL|method|setAccessToken (String accessToken)
specifier|public
name|void
name|setAccessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setAccessToken
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
block|}
DECL|method|getRefreshToken ()
specifier|public
name|String
name|getRefreshToken
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getRefreshToken
argument_list|()
return|;
block|}
comment|/**      * OAuth 2 refresh token. Using this, the Google Calendar component can obtain a new accessToken whenever the current one expires - a necessity if the application is long-lived.      * @param refreshToken      */
DECL|method|setRefreshToken (String refreshToken)
specifier|public
name|void
name|setRefreshToken
parameter_list|(
name|String
name|refreshToken
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setRefreshToken
argument_list|(
name|refreshToken
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getApplicationName
argument_list|()
return|;
block|}
comment|/**      * Google mail application name. Example would be "camel-google-mail/1.0"      * @param applicationName      */
DECL|method|setApplicationName (String applicationName)
specifier|public
name|void
name|setApplicationName
parameter_list|(
name|String
name|applicationName
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setApplicationName
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
block|}
DECL|method|getScopes ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getScopes
parameter_list|()
block|{
return|return
name|getConfigurationOrCreate
argument_list|()
operator|.
name|getScopes
argument_list|()
return|;
block|}
comment|/**      * Specifies the level of permissions you want a mail application to have to a user account. See https://developers.google.com/gmail/api/auth/scopes for more info.      * @param scopes      */
DECL|method|setScopes (List<String> scopes)
specifier|public
name|void
name|setScopes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|scopes
parameter_list|)
block|{
name|getConfigurationOrCreate
argument_list|()
operator|.
name|setScopes
argument_list|(
name|scopes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

