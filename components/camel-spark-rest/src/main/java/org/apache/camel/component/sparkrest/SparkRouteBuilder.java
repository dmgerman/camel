begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sparkrest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sparkrest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_comment
comment|/**  * A Spark extended {@link org.apache.camel.builder.RouteBuilder} which allows to define routes using the Spark DSL.  */
end_comment

begin_class
DECL|class|SparkRouteBuilder
specifier|public
specifier|abstract
class|class
name|SparkRouteBuilder
extends|extends
name|RouteBuilder
block|{
DECL|method|get (String path)
specifier|public
name|RouteDefinition
name|get
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:get:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|get (String path, String accept)
specifier|public
name|RouteDefinition
name|get
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:get:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
DECL|method|post (String path)
specifier|public
name|RouteDefinition
name|post
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:post:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|post (String path, String accept)
specifier|public
name|RouteDefinition
name|post
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:post:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
DECL|method|put (String path)
specifier|public
name|RouteDefinition
name|put
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:post:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|put (String path, String accept)
specifier|public
name|RouteDefinition
name|put
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:post:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
DECL|method|delete (String path)
specifier|public
name|RouteDefinition
name|delete
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:delete:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|delete (String path, String accept)
specifier|public
name|RouteDefinition
name|delete
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:delete:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
DECL|method|head (String path)
specifier|public
name|RouteDefinition
name|head
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:head:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|head (String path, String accept)
specifier|public
name|RouteDefinition
name|head
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:head:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
DECL|method|trace (String path)
specifier|public
name|RouteDefinition
name|trace
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:trace:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|trace (String path, String accept)
specifier|public
name|RouteDefinition
name|trace
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:trace:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
DECL|method|connect (String path)
specifier|public
name|RouteDefinition
name|connect
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:connect:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|connect (String path, String accept)
specifier|public
name|RouteDefinition
name|connect
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:connect:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
DECL|method|options (String path)
specifier|public
name|RouteDefinition
name|options
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:options:"
operator|+
name|path
argument_list|)
return|;
block|}
DECL|method|options (String path, String accept)
specifier|public
name|RouteDefinition
name|options
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|accept
parameter_list|)
block|{
return|return
name|from
argument_list|(
literal|"spark-rest:options:"
operator|+
name|path
operator|+
literal|"?accept="
operator|+
name|accept
argument_list|)
return|;
block|}
block|}
end_class

end_unit

