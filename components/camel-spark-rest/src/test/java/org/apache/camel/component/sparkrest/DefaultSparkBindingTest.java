begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sparkrest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sparkrest
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|CONTENT_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|HTTP_METHOD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|HTTP_QUERY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|HTTP_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|HTTP_URL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|DataPoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|FromDataPoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|Theories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|theories
operator|.
name|Theory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|spark
operator|.
name|Request
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Theories
operator|.
name|class
argument_list|)
DECL|class|DefaultSparkBindingTest
specifier|public
class|class
name|DefaultSparkBindingTest
block|{
DECL|field|defaultSparkBinding
specifier|private
name|DefaultSparkBinding
name|defaultSparkBinding
decl_stmt|;
DECL|field|request
specifier|private
name|Request
name|request
init|=
name|mock
argument_list|(
name|Request
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sparkConfiguration
specifier|private
name|SparkConfiguration
name|sparkConfiguration
init|=
name|mock
argument_list|(
name|SparkConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|httpServletRequest
specifier|private
name|HttpServletRequest
name|httpServletRequest
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|camelExchange
specifier|private
name|Exchange
name|camelExchange
init|=
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|defaultSparkBinding
operator|=
operator|new
name|DefaultSparkBinding
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|raw
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|httpServletRequest
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|headers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|headers
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|httpServletRequest
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|httpServletRequest
operator|.
name|getQueryString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"?query=value"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|httpServletRequest
operator|.
name|getRequestURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuffer
argument_list|(
literal|"http://localhost?query=value"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|httpServletRequest
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"http://localhost?query=value"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|httpServletRequest
operator|.
name|getContentType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|camelExchange
operator|.
name|getFromEndpoint
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|SparkEndpoint
argument_list|(
literal|"/"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|DataPoints
argument_list|(
literal|"exchangeHeaderScenarios"
argument_list|)
DECL|method|exchangeHeaderScenarios ()
specifier|public
specifier|static
name|List
argument_list|<
name|ExchangeHeaderScenario
argument_list|>
name|exchangeHeaderScenarios
parameter_list|()
block|{
return|return
name|asList
argument_list|(
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|HTTP_METHOD
argument_list|,
literal|"POST"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|HTTP_QUERY
argument_list|,
literal|"?query=value"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|HTTP_URL
argument_list|,
literal|"http://localhost?query=value"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|HTTP_URI
argument_list|,
literal|"http://localhost?query=value"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|emptyMap
argument_list|()
argument_list|,
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|HTTP_METHOD
argument_list|,
literal|"GET"
argument_list|)
argument_list|,
name|HTTP_METHOD
argument_list|,
literal|"GET"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|HTTP_QUERY
argument_list|,
literal|"?originalQuery=value"
argument_list|)
argument_list|,
name|HTTP_QUERY
argument_list|,
literal|"?originalQuery=value"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|HTTP_URL
argument_list|,
literal|"http://originalhost?query=value"
argument_list|)
argument_list|,
name|HTTP_URL
argument_list|,
literal|"http://originalhost?query=value"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|HTTP_URI
argument_list|,
literal|"http://originalhost?query=value"
argument_list|)
argument_list|,
name|HTTP_URI
argument_list|,
literal|"http://originalhost?query=value"
argument_list|)
argument_list|,
operator|new
name|ExchangeHeaderScenario
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CONTENT_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
argument_list|,
name|CONTENT_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Theory
annotation|@
name|Test
DECL|method|shouldOnlyAddStandardExchangeHeader_givenHeaderNotPresentInInput ( @romDataPointsR) ExchangeHeaderScenario scenario)
specifier|public
name|void
name|shouldOnlyAddStandardExchangeHeader_givenHeaderNotPresentInInput
parameter_list|(
annotation|@
name|FromDataPoints
argument_list|(
literal|"exchangeHeaderScenarios"
argument_list|)
name|ExchangeHeaderScenario
name|scenario
parameter_list|)
throws|throws
name|Exception
block|{
comment|//given
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|scenario
operator|.
name|headers
decl_stmt|;
comment|//when
name|defaultSparkBinding
operator|.
name|populateCamelHeaders
argument_list|(
name|request
argument_list|,
name|headers
argument_list|,
name|camelExchange
argument_list|,
name|sparkConfiguration
argument_list|)
expr_stmt|;
comment|//then
name|String
name|actualHeader
init|=
name|Objects
operator|.
name|toString
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|scenario
operator|.
name|expectedHeaderName
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scenario
operator|.
name|expectedHeaderValue
argument_list|,
name|actualHeader
argument_list|)
expr_stmt|;
block|}
DECL|class|ExchangeHeaderScenario
specifier|private
specifier|static
class|class
name|ExchangeHeaderScenario
block|{
DECL|field|headers
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|expectedHeaderName
name|String
name|expectedHeaderName
decl_stmt|;
DECL|field|expectedHeaderValue
name|String
name|expectedHeaderValue
decl_stmt|;
DECL|method|ExchangeHeaderScenario (Map<String, Object> headers, String expectedHeaderName, String expectedHeaderValue)
specifier|public
name|ExchangeHeaderScenario
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|String
name|expectedHeaderName
parameter_list|,
name|String
name|expectedHeaderValue
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|expectedHeaderName
operator|=
name|expectedHeaderName
expr_stmt|;
name|this
operator|.
name|expectedHeaderValue
operator|=
name|expectedHeaderValue
expr_stmt|;
name|this
operator|.
name|headers
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

