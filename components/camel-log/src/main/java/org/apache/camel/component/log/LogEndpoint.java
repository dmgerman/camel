begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.log
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|log
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExtendedCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|LoggingLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|MaskingFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ProcessorEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|CamelLogProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|DefaultExchangeFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|DefaultMaskingFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|processor
operator|.
name|ThroughputLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * The log component logs message exchanges to the underlying logging mechanism.  *  * Camel uses sfl4j which allows you to configure logging to the actual logging system.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"1.1.0"
argument_list|,
name|scheme
operator|=
literal|"log"
argument_list|,
name|title
operator|=
literal|"Log"
argument_list|,
name|syntax
operator|=
literal|"log:loggerName"
argument_list|,
name|producerOnly
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"core,monitoring"
argument_list|)
DECL|class|LogEndpoint
specifier|public
class|class
name|LogEndpoint
extends|extends
name|ProcessorEndpoint
block|{
DECL|field|logger
specifier|private
specifier|volatile
name|Processor
name|logger
decl_stmt|;
DECL|field|providedLogger
specifier|private
name|Logger
name|providedLogger
decl_stmt|;
DECL|field|localFormatter
specifier|private
name|ExchangeFormatter
name|localFormatter
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Name of the logging category to use"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|loggerName
specifier|private
name|String
name|loggerName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"INFO"
argument_list|,
name|enums
operator|=
literal|"ERROR,WARN,INFO,DEBUG,TRACE,OFF"
argument_list|)
DECL|field|level
specifier|private
name|String
name|level
decl_stmt|;
annotation|@
name|UriParam
DECL|field|marker
specifier|private
name|String
name|marker
decl_stmt|;
annotation|@
name|UriParam
DECL|field|groupSize
specifier|private
name|Integer
name|groupSize
decl_stmt|;
annotation|@
name|UriParam
DECL|field|groupInterval
specifier|private
name|Long
name|groupInterval
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|groupActiveOnly
specifier|private
name|Boolean
name|groupActiveOnly
decl_stmt|;
annotation|@
name|UriParam
DECL|field|groupDelay
specifier|private
name|Long
name|groupDelay
decl_stmt|;
annotation|@
name|UriParam
DECL|field|logMask
specifier|private
name|Boolean
name|logMask
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|exchangeFormatter
specifier|private
name|ExchangeFormatter
name|exchangeFormatter
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"Show the unique exchange ID."
argument_list|)
DECL|field|showExchangeId
specifier|private
name|boolean
name|showExchangeId
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Shows the Message Exchange Pattern (or MEP for short)."
argument_list|)
DECL|field|showExchangePattern
specifier|private
name|boolean
name|showExchangePattern
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"Show the exchange properties."
argument_list|)
DECL|field|showProperties
specifier|private
name|boolean
name|showProperties
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"Show the message headers."
argument_list|)
DECL|field|showHeaders
specifier|private
name|boolean
name|showHeaders
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Whether to skip line separators when logging the message body."
operator|+
literal|"This allows to log the message body in one line, setting this option to false will preserve any line separators from the body, which then will log the body as is."
argument_list|)
DECL|field|skipBodyLineSeparator
specifier|private
name|boolean
name|skipBodyLineSeparator
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Show the message body."
argument_list|)
DECL|field|showBody
specifier|private
name|boolean
name|showBody
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|,
name|description
operator|=
literal|"Show the body Java type."
argument_list|)
DECL|field|showBodyType
specifier|private
name|boolean
name|showBodyType
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"If the exchange has an exception, show the exception message (no stacktrace)"
argument_list|)
DECL|field|showException
specifier|private
name|boolean
name|showException
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"f the exchange has a caught exception, show the exception message (no stack trace)."
operator|+
literal|"A caught exception is stored as a property on the exchange (using the key org.apache.camel.Exchange#EXCEPTION_CAUGHT and for instance a doCatch can catch exceptions."
argument_list|)
DECL|field|showCaughtException
specifier|private
name|boolean
name|showCaughtException
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"Show the stack trace, if an exchange has an exception. Only effective if one of showAll, showException or showCaughtException are enabled."
argument_list|)
DECL|field|showStackTrace
specifier|private
name|boolean
name|showStackTrace
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"Quick option for turning all options on. (multiline, maxChars has to be manually set if to be used)"
argument_list|)
DECL|field|showAll
specifier|private
name|boolean
name|showAll
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"If enabled then each information is outputted on a newline."
argument_list|)
DECL|field|multiline
specifier|private
name|boolean
name|multiline
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"If enabled Camel will on Future objects wait for it to complete to obtain the payload to be logged."
argument_list|)
DECL|field|showFuture
specifier|private
name|boolean
name|showFuture
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"Whether Camel should show stream bodies or not (eg such as java.io.InputStream). Beware if you enable this option then "
operator|+
literal|"you may not be able later to access the message body as the stream have already been read by this logger. To remedy this you will have to use Stream Caching."
argument_list|)
DECL|field|showStreams
specifier|private
name|boolean
name|showStreams
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|description
operator|=
literal|"If enabled Camel will output files"
argument_list|)
DECL|field|showFiles
specifier|private
name|boolean
name|showFiles
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|,
name|description
operator|=
literal|"Limits the number of characters logged per line."
argument_list|)
DECL|field|maxChars
specifier|private
name|int
name|maxChars
init|=
literal|10000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"formatting"
argument_list|,
name|enums
operator|=
literal|"Default,Tab,Fixed"
argument_list|,
name|defaultValue
operator|=
literal|"Default"
argument_list|,
name|description
operator|=
literal|"Sets the outputs style to use."
argument_list|)
DECL|field|style
specifier|private
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
name|style
init|=
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
operator|.
name|Default
decl_stmt|;
DECL|method|LogEndpoint ()
specifier|public
name|LogEndpoint
parameter_list|()
block|{     }
DECL|method|LogEndpoint (String endpointUri, Component component)
specifier|public
name|LogEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|LogEndpoint (String endpointUri, Component component, Processor logger)
specifier|public
name|LogEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|Processor
name|logger
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|setLogger
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doInit ()
specifier|protected
name|void
name|doInit
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doInit
argument_list|()
expr_stmt|;
name|this
operator|.
name|localFormatter
operator|=
name|exchangeFormatter
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|localFormatter
operator|==
literal|null
condition|)
block|{
name|DefaultExchangeFormatter
name|def
init|=
operator|new
name|DefaultExchangeFormatter
argument_list|()
decl_stmt|;
name|def
operator|.
name|setShowExchangeId
argument_list|(
name|showExchangeId
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowExchangePattern
argument_list|(
name|showExchangePattern
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowProperties
argument_list|(
name|showProperties
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowHeaders
argument_list|(
name|showHeaders
argument_list|)
expr_stmt|;
name|def
operator|.
name|setSkipBodyLineSeparator
argument_list|(
name|skipBodyLineSeparator
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowBody
argument_list|(
name|showBody
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowBodyType
argument_list|(
name|showBodyType
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowException
argument_list|(
name|showException
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowStackTrace
argument_list|(
name|showStackTrace
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowAll
argument_list|(
name|showAll
argument_list|)
expr_stmt|;
name|def
operator|.
name|setMultiline
argument_list|(
name|multiline
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowFuture
argument_list|(
name|showFuture
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowStreams
argument_list|(
name|showStreams
argument_list|)
expr_stmt|;
name|def
operator|.
name|setShowFiles
argument_list|(
name|showFiles
argument_list|)
expr_stmt|;
name|def
operator|.
name|setMaxChars
argument_list|(
name|maxChars
argument_list|)
expr_stmt|;
name|def
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|this
operator|.
name|localFormatter
operator|=
name|def
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
name|logger
operator|=
name|createLogger
argument_list|()
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|setLogger (Processor logger)
specifier|public
name|void
name|setLogger
parameter_list|(
name|Processor
name|logger
parameter_list|)
block|{
name|this
operator|.
name|logger
operator|=
name|logger
expr_stmt|;
comment|// the logger is the processor
name|setProcessor
argument_list|(
name|this
operator|.
name|logger
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogger ()
specifier|public
name|Processor
name|getLogger
parameter_list|()
block|{
return|return
name|logger
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ensure logger is created and started first
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
name|logger
operator|=
name|createLogger
argument_list|()
expr_stmt|;
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|logger
argument_list|)
expr_stmt|;
return|return
operator|new
name|LogProducer
argument_list|(
name|this
argument_list|,
name|logger
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
return|return
literal|"log:"
operator|+
name|logger
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Creates the logger {@link Processor} to be used.      */
DECL|method|createLogger ()
specifier|protected
name|Processor
name|createLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|Processor
name|answer
decl_stmt|;
comment|// setup a new logger here
name|CamelLogger
name|camelLogger
decl_stmt|;
name|LoggingLevel
name|loggingLevel
init|=
name|LoggingLevel
operator|.
name|INFO
decl_stmt|;
if|if
condition|(
name|level
operator|!=
literal|null
condition|)
block|{
name|loggingLevel
operator|=
name|LoggingLevel
operator|.
name|valueOf
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|providedLogger
operator|==
literal|null
condition|)
block|{
name|camelLogger
operator|=
operator|new
name|CamelLogger
argument_list|(
name|loggerName
argument_list|,
name|loggingLevel
argument_list|,
name|getMarker
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|camelLogger
operator|=
operator|new
name|CamelLogger
argument_list|(
name|providedLogger
argument_list|,
name|loggingLevel
argument_list|,
name|getMarker
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getGroupSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|ThroughputLogger
argument_list|(
name|camelLogger
argument_list|,
name|getGroupSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getGroupInterval
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Boolean
name|groupActiveOnly
init|=
name|getGroupActiveOnly
argument_list|()
operator|!=
literal|null
condition|?
name|getGroupActiveOnly
argument_list|()
else|:
name|Boolean
operator|.
name|TRUE
decl_stmt|;
name|Long
name|groupDelay
init|=
name|getGroupDelay
argument_list|()
decl_stmt|;
name|answer
operator|=
operator|new
name|ThroughputLogger
argument_list|(
name|camelLogger
argument_list|,
name|this
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|getGroupInterval
argument_list|()
argument_list|,
name|groupDelay
argument_list|,
name|groupActiveOnly
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|CamelLogProcessor
argument_list|(
name|camelLogger
argument_list|,
name|localFormatter
argument_list|,
name|getMaskingFormatter
argument_list|()
argument_list|,
name|getCamelContext
argument_list|()
operator|.
name|adapt
argument_list|(
name|ExtendedCamelContext
operator|.
name|class
argument_list|)
operator|.
name|getLogListeners
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the logger is the processor
name|setProcessor
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|getMaskingFormatter ()
specifier|private
name|MaskingFormatter
name|getMaskingFormatter
parameter_list|()
block|{
if|if
condition|(
name|logMask
operator|!=
literal|null
condition|?
name|logMask
else|:
name|getCamelContext
argument_list|()
operator|.
name|isLogMask
argument_list|()
condition|)
block|{
name|MaskingFormatter
name|formatter
init|=
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|MaskingFormatter
operator|.
name|CUSTOM_LOG_MASK_REF
argument_list|,
name|MaskingFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|==
literal|null
condition|)
block|{
name|formatter
operator|=
operator|new
name|DefaultMaskingFormatter
argument_list|()
expr_stmt|;
block|}
return|return
name|formatter
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Logging level to use.      *<p/>      * The default value is INFO.      */
DECL|method|getLevel ()
specifier|public
name|String
name|getLevel
parameter_list|()
block|{
return|return
name|level
return|;
block|}
comment|/**      * Logging level to use.      *<p/>      * The default value is INFO.      */
DECL|method|setLevel (String level)
specifier|public
name|void
name|setLevel
parameter_list|(
name|String
name|level
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
block|}
comment|/**      * An optional Marker name to use.      */
DECL|method|getMarker ()
specifier|public
name|String
name|getMarker
parameter_list|()
block|{
return|return
name|marker
return|;
block|}
comment|/**      * An optional Marker name to use.      */
DECL|method|setMarker (String marker)
specifier|public
name|void
name|setMarker
parameter_list|(
name|String
name|marker
parameter_list|)
block|{
name|this
operator|.
name|marker
operator|=
name|marker
expr_stmt|;
block|}
comment|/**      * An integer that specifies a group size for throughput logging.      */
DECL|method|getGroupSize ()
specifier|public
name|Integer
name|getGroupSize
parameter_list|()
block|{
return|return
name|groupSize
return|;
block|}
comment|/**      * An integer that specifies a group size for throughput logging.      */
DECL|method|setGroupSize (Integer groupSize)
specifier|public
name|void
name|setGroupSize
parameter_list|(
name|Integer
name|groupSize
parameter_list|)
block|{
name|this
operator|.
name|groupSize
operator|=
name|groupSize
expr_stmt|;
block|}
comment|/**      * If specified will group message stats by this time interval (in millis)      */
DECL|method|getGroupInterval ()
specifier|public
name|Long
name|getGroupInterval
parameter_list|()
block|{
return|return
name|groupInterval
return|;
block|}
comment|/**      * If specified will group message stats by this time interval (in millis)      */
DECL|method|setGroupInterval (Long groupInterval)
specifier|public
name|void
name|setGroupInterval
parameter_list|(
name|Long
name|groupInterval
parameter_list|)
block|{
name|this
operator|.
name|groupInterval
operator|=
name|groupInterval
expr_stmt|;
block|}
comment|/**      * If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.      */
DECL|method|getGroupActiveOnly ()
specifier|public
name|Boolean
name|getGroupActiveOnly
parameter_list|()
block|{
return|return
name|groupActiveOnly
return|;
block|}
comment|/**      * If true, will hide stats when no new messages have been received for a time interval, if false, show stats regardless of message traffic.      */
DECL|method|setGroupActiveOnly (Boolean groupActiveOnly)
specifier|public
name|void
name|setGroupActiveOnly
parameter_list|(
name|Boolean
name|groupActiveOnly
parameter_list|)
block|{
name|this
operator|.
name|groupActiveOnly
operator|=
name|groupActiveOnly
expr_stmt|;
block|}
comment|/**      * Set the initial delay for stats (in millis)      */
DECL|method|getGroupDelay ()
specifier|public
name|Long
name|getGroupDelay
parameter_list|()
block|{
return|return
name|groupDelay
return|;
block|}
comment|/**      * Set the initial delay for stats (in millis)      */
DECL|method|setGroupDelay (Long groupDelay)
specifier|public
name|void
name|setGroupDelay
parameter_list|(
name|Long
name|groupDelay
parameter_list|)
block|{
name|this
operator|.
name|groupDelay
operator|=
name|groupDelay
expr_stmt|;
block|}
DECL|method|getLocalFormatter ()
specifier|public
name|ExchangeFormatter
name|getLocalFormatter
parameter_list|()
block|{
return|return
name|localFormatter
return|;
block|}
DECL|method|setLocalFormatter (ExchangeFormatter localFormatter)
specifier|public
name|void
name|setLocalFormatter
parameter_list|(
name|ExchangeFormatter
name|localFormatter
parameter_list|)
block|{
name|this
operator|.
name|localFormatter
operator|=
name|localFormatter
expr_stmt|;
block|}
DECL|method|getProvidedLogger ()
specifier|public
name|Logger
name|getProvidedLogger
parameter_list|()
block|{
return|return
name|providedLogger
return|;
block|}
DECL|method|setProvidedLogger (Logger providedLogger)
specifier|public
name|void
name|setProvidedLogger
parameter_list|(
name|Logger
name|providedLogger
parameter_list|)
block|{
name|this
operator|.
name|providedLogger
operator|=
name|providedLogger
expr_stmt|;
block|}
comment|/**      * The logger name to use      */
DECL|method|getLoggerName ()
specifier|public
name|String
name|getLoggerName
parameter_list|()
block|{
return|return
name|loggerName
return|;
block|}
comment|/**      * The logger name to use      */
DECL|method|setLoggerName (String loggerName)
specifier|public
name|void
name|setLoggerName
parameter_list|(
name|String
name|loggerName
parameter_list|)
block|{
name|this
operator|.
name|loggerName
operator|=
name|loggerName
expr_stmt|;
block|}
DECL|method|getLogMask ()
specifier|public
name|Boolean
name|getLogMask
parameter_list|()
block|{
return|return
name|logMask
return|;
block|}
comment|/**      * If true, mask sensitive information like password or passphrase in the log.      */
DECL|method|setLogMask (Boolean logMask)
specifier|public
name|void
name|setLogMask
parameter_list|(
name|Boolean
name|logMask
parameter_list|)
block|{
name|this
operator|.
name|logMask
operator|=
name|logMask
expr_stmt|;
block|}
DECL|method|getExchangeFormatter ()
specifier|public
name|ExchangeFormatter
name|getExchangeFormatter
parameter_list|()
block|{
return|return
name|exchangeFormatter
return|;
block|}
comment|/**      * To use a custom exchange formatter      */
DECL|method|setExchangeFormatter (ExchangeFormatter exchangeFormatter)
specifier|public
name|void
name|setExchangeFormatter
parameter_list|(
name|ExchangeFormatter
name|exchangeFormatter
parameter_list|)
block|{
name|this
operator|.
name|exchangeFormatter
operator|=
name|exchangeFormatter
expr_stmt|;
block|}
DECL|method|isShowExchangeId ()
specifier|public
name|boolean
name|isShowExchangeId
parameter_list|()
block|{
return|return
name|showExchangeId
return|;
block|}
DECL|method|setShowExchangeId (boolean showExchangeId)
specifier|public
name|void
name|setShowExchangeId
parameter_list|(
name|boolean
name|showExchangeId
parameter_list|)
block|{
name|this
operator|.
name|showExchangeId
operator|=
name|showExchangeId
expr_stmt|;
block|}
DECL|method|isShowExchangePattern ()
specifier|public
name|boolean
name|isShowExchangePattern
parameter_list|()
block|{
return|return
name|showExchangePattern
return|;
block|}
DECL|method|setShowExchangePattern (boolean showExchangePattern)
specifier|public
name|void
name|setShowExchangePattern
parameter_list|(
name|boolean
name|showExchangePattern
parameter_list|)
block|{
name|this
operator|.
name|showExchangePattern
operator|=
name|showExchangePattern
expr_stmt|;
block|}
DECL|method|isShowProperties ()
specifier|public
name|boolean
name|isShowProperties
parameter_list|()
block|{
return|return
name|showProperties
return|;
block|}
DECL|method|setShowProperties (boolean showProperties)
specifier|public
name|void
name|setShowProperties
parameter_list|(
name|boolean
name|showProperties
parameter_list|)
block|{
name|this
operator|.
name|showProperties
operator|=
name|showProperties
expr_stmt|;
block|}
DECL|method|isShowHeaders ()
specifier|public
name|boolean
name|isShowHeaders
parameter_list|()
block|{
return|return
name|showHeaders
return|;
block|}
DECL|method|setShowHeaders (boolean showHeaders)
specifier|public
name|void
name|setShowHeaders
parameter_list|(
name|boolean
name|showHeaders
parameter_list|)
block|{
name|this
operator|.
name|showHeaders
operator|=
name|showHeaders
expr_stmt|;
block|}
DECL|method|isSkipBodyLineSeparator ()
specifier|public
name|boolean
name|isSkipBodyLineSeparator
parameter_list|()
block|{
return|return
name|skipBodyLineSeparator
return|;
block|}
DECL|method|setSkipBodyLineSeparator (boolean skipBodyLineSeparator)
specifier|public
name|void
name|setSkipBodyLineSeparator
parameter_list|(
name|boolean
name|skipBodyLineSeparator
parameter_list|)
block|{
name|this
operator|.
name|skipBodyLineSeparator
operator|=
name|skipBodyLineSeparator
expr_stmt|;
block|}
DECL|method|isShowBody ()
specifier|public
name|boolean
name|isShowBody
parameter_list|()
block|{
return|return
name|showBody
return|;
block|}
DECL|method|setShowBody (boolean showBody)
specifier|public
name|void
name|setShowBody
parameter_list|(
name|boolean
name|showBody
parameter_list|)
block|{
name|this
operator|.
name|showBody
operator|=
name|showBody
expr_stmt|;
block|}
DECL|method|isShowBodyType ()
specifier|public
name|boolean
name|isShowBodyType
parameter_list|()
block|{
return|return
name|showBodyType
return|;
block|}
DECL|method|setShowBodyType (boolean showBodyType)
specifier|public
name|void
name|setShowBodyType
parameter_list|(
name|boolean
name|showBodyType
parameter_list|)
block|{
name|this
operator|.
name|showBodyType
operator|=
name|showBodyType
expr_stmt|;
block|}
DECL|method|isShowException ()
specifier|public
name|boolean
name|isShowException
parameter_list|()
block|{
return|return
name|showException
return|;
block|}
DECL|method|setShowException (boolean showException)
specifier|public
name|void
name|setShowException
parameter_list|(
name|boolean
name|showException
parameter_list|)
block|{
name|this
operator|.
name|showException
operator|=
name|showException
expr_stmt|;
block|}
DECL|method|isShowCaughtException ()
specifier|public
name|boolean
name|isShowCaughtException
parameter_list|()
block|{
return|return
name|showCaughtException
return|;
block|}
DECL|method|setShowCaughtException (boolean showCaughtException)
specifier|public
name|void
name|setShowCaughtException
parameter_list|(
name|boolean
name|showCaughtException
parameter_list|)
block|{
name|this
operator|.
name|showCaughtException
operator|=
name|showCaughtException
expr_stmt|;
block|}
DECL|method|isShowStackTrace ()
specifier|public
name|boolean
name|isShowStackTrace
parameter_list|()
block|{
return|return
name|showStackTrace
return|;
block|}
DECL|method|setShowStackTrace (boolean showStackTrace)
specifier|public
name|void
name|setShowStackTrace
parameter_list|(
name|boolean
name|showStackTrace
parameter_list|)
block|{
name|this
operator|.
name|showStackTrace
operator|=
name|showStackTrace
expr_stmt|;
block|}
DECL|method|isShowAll ()
specifier|public
name|boolean
name|isShowAll
parameter_list|()
block|{
return|return
name|showAll
return|;
block|}
DECL|method|setShowAll (boolean showAll)
specifier|public
name|void
name|setShowAll
parameter_list|(
name|boolean
name|showAll
parameter_list|)
block|{
name|this
operator|.
name|showAll
operator|=
name|showAll
expr_stmt|;
block|}
DECL|method|isMultiline ()
specifier|public
name|boolean
name|isMultiline
parameter_list|()
block|{
return|return
name|multiline
return|;
block|}
DECL|method|setMultiline (boolean multiline)
specifier|public
name|void
name|setMultiline
parameter_list|(
name|boolean
name|multiline
parameter_list|)
block|{
name|this
operator|.
name|multiline
operator|=
name|multiline
expr_stmt|;
block|}
DECL|method|isShowFuture ()
specifier|public
name|boolean
name|isShowFuture
parameter_list|()
block|{
return|return
name|showFuture
return|;
block|}
DECL|method|setShowFuture (boolean showFuture)
specifier|public
name|void
name|setShowFuture
parameter_list|(
name|boolean
name|showFuture
parameter_list|)
block|{
name|this
operator|.
name|showFuture
operator|=
name|showFuture
expr_stmt|;
block|}
DECL|method|isShowStreams ()
specifier|public
name|boolean
name|isShowStreams
parameter_list|()
block|{
return|return
name|showStreams
return|;
block|}
DECL|method|setShowStreams (boolean showStreams)
specifier|public
name|void
name|setShowStreams
parameter_list|(
name|boolean
name|showStreams
parameter_list|)
block|{
name|this
operator|.
name|showStreams
operator|=
name|showStreams
expr_stmt|;
block|}
DECL|method|isShowFiles ()
specifier|public
name|boolean
name|isShowFiles
parameter_list|()
block|{
return|return
name|showFiles
return|;
block|}
DECL|method|setShowFiles (boolean showFiles)
specifier|public
name|void
name|setShowFiles
parameter_list|(
name|boolean
name|showFiles
parameter_list|)
block|{
name|this
operator|.
name|showFiles
operator|=
name|showFiles
expr_stmt|;
block|}
DECL|method|getMaxChars ()
specifier|public
name|int
name|getMaxChars
parameter_list|()
block|{
return|return
name|maxChars
return|;
block|}
DECL|method|setMaxChars (int maxChars)
specifier|public
name|void
name|setMaxChars
parameter_list|(
name|int
name|maxChars
parameter_list|)
block|{
name|this
operator|.
name|maxChars
operator|=
name|maxChars
expr_stmt|;
block|}
DECL|method|getStyle ()
specifier|public
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
name|getStyle
parameter_list|()
block|{
return|return
name|style
return|;
block|}
DECL|method|setStyle (DefaultExchangeFormatter.OutputStyle style)
specifier|public
name|void
name|setStyle
parameter_list|(
name|DefaultExchangeFormatter
operator|.
name|OutputStyle
name|style
parameter_list|)
block|{
name|this
operator|.
name|style
operator|=
name|style
expr_stmt|;
block|}
block|}
end_class

end_unit

