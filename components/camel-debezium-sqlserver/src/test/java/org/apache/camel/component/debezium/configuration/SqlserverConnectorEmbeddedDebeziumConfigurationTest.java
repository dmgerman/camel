begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.debezium.configuration
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|configuration
package|;
end_package

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|CommonConnectorConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|connector
operator|.
name|sqlserver
operator|.
name|SqlServerConnector
import|;
end_import

begin_import
import|import
name|io
operator|.
name|debezium
operator|.
name|embedded
operator|.
name|EmbeddedEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|debezium
operator|.
name|DebeziumConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|SqlserverConnectorEmbeddedDebeziumConfigurationTest
specifier|public
class|class
name|SqlserverConnectorEmbeddedDebeziumConfigurationTest
block|{
annotation|@
name|Test
DECL|method|testIfCreatesConfig ()
specifier|public
name|void
name|testIfCreatesConfig
parameter_list|()
block|{
specifier|final
name|SqlServerConnectorEmbeddedDebeziumConfiguration
name|configuration
init|=
operator|new
name|SqlServerConnectorEmbeddedDebeziumConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setName
argument_list|(
literal|"test_config"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseUser
argument_list|(
literal|"test_user"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setMaxQueueSize
argument_list|(
literal|1212
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|dbzConfigurations
init|=
name|configuration
operator|.
name|createDebeziumConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test_config"
argument_list|,
name|dbzConfigurations
operator|.
name|getString
argument_list|(
name|EmbeddedEngine
operator|.
name|ENGINE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_user"
argument_list|,
name|dbzConfigurations
operator|.
name|getString
argument_list|(
literal|"database.user"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1212
argument_list|,
name|dbzConfigurations
operator|.
name|getInteger
argument_list|(
name|CommonConnectorConfig
operator|.
name|MAX_QUEUE_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SqlServerConnector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|dbzConfigurations
operator|.
name|getString
argument_list|(
name|EmbeddedEngine
operator|.
name|CONNECTOR_CLASS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DebeziumConstants
operator|.
name|DEFAULT_OFFSET_STORAGE
argument_list|,
name|dbzConfigurations
operator|.
name|getString
argument_list|(
name|EmbeddedEngine
operator|.
name|OFFSET_STORAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIfValidatesConfigurationCorrectly ()
specifier|public
name|void
name|testIfValidatesConfigurationCorrectly
parameter_list|()
block|{
specifier|final
name|SqlServerConnectorEmbeddedDebeziumConfiguration
name|configuration
init|=
operator|new
name|SqlServerConnectorEmbeddedDebeziumConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setName
argument_list|(
literal|"test_config"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseUser
argument_list|(
literal|"test_db"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseServerName
argument_list|(
literal|"test_server"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setOffsetStorageFileName
argument_list|(
literal|"/offset/file"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseHistoryFileFilename
argument_list|(
literal|"/database_history/file"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|configuration
operator|.
name|validateConfiguration
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseHostname
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabasePassword
argument_list|(
literal|"test_pwd"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configuration
operator|.
name|validateConfiguration
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateConfigurationsForAllRequiredFields ()
specifier|public
name|void
name|testValidateConfigurationsForAllRequiredFields
parameter_list|()
block|{
specifier|final
name|SqlServerConnectorEmbeddedDebeziumConfiguration
name|configuration
init|=
operator|new
name|SqlServerConnectorEmbeddedDebeziumConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setName
argument_list|(
literal|"test_config"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseUser
argument_list|(
literal|"test_db"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseHostname
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabasePassword
argument_list|(
literal|"test_pwd"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseServerName
argument_list|(
literal|"test_server"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setOffsetStorageFileName
argument_list|(
literal|"/offset/file"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDatabaseHistoryFileFilename
argument_list|(
literal|"/database_history/file"
argument_list|)
expr_stmt|;
specifier|final
name|ConfigurationValidation
name|validation
init|=
name|configuration
operator|.
name|validateConfiguration
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|validation
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_config"
argument_list|,
name|configuration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_db"
argument_list|,
name|configuration
operator|.
name|getDatabaseUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|configuration
operator|.
name|getDatabaseHostname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_pwd"
argument_list|,
name|configuration
operator|.
name|getDatabasePassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test_server"
argument_list|,
name|configuration
operator|.
name|getDatabaseServerName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/offset/file"
argument_list|,
name|configuration
operator|.
name|getOffsetStorageFileName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/database_history/file"
argument_list|,
name|configuration
operator|.
name|getDatabaseHistoryFileFilename
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

