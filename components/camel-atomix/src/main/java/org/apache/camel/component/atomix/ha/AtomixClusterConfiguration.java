begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atomix.ha
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|AtomixReplica
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|catalyst
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|copycat
operator|.
name|server
operator|.
name|storage
operator|.
name|StorageLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|AtomixConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|AtomixClusterConfiguration
specifier|public
class|class
name|AtomixClusterConfiguration
extends|extends
name|AtomixConfiguration
argument_list|<
name|AtomixReplica
argument_list|>
implements|implements
name|Cloneable
block|{
annotation|@
name|UriParam
DECL|field|clientTransport
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|clientTransport
decl_stmt|;
annotation|@
name|UriParam
DECL|field|serverTransport
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|serverTransport
decl_stmt|;
annotation|@
name|UriParam
DECL|field|storagePath
specifier|private
name|String
name|storagePath
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"MEMORY"
argument_list|)
DECL|field|storageLevel
specifier|private
name|StorageLevel
name|storageLevel
init|=
name|StorageLevel
operator|.
name|MEMORY
decl_stmt|;
DECL|method|AtomixClusterConfiguration ()
specifier|public
name|AtomixClusterConfiguration
parameter_list|()
block|{     }
comment|// ******************************************
comment|// Properties
comment|// ******************************************
DECL|method|getClientTransport ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|getClientTransport
parameter_list|()
block|{
return|return
name|clientTransport
return|;
block|}
comment|/**      * The client transport      */
DECL|method|setClientTransport (Class<? extends Transport> clientTransport)
specifier|public
name|void
name|setClientTransport
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|clientTransport
parameter_list|)
block|{
name|this
operator|.
name|clientTransport
operator|=
name|clientTransport
expr_stmt|;
block|}
DECL|method|getServerTransport ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|getServerTransport
parameter_list|()
block|{
return|return
name|serverTransport
return|;
block|}
comment|/**      * The server transport      */
DECL|method|setServerTransport (Class<? extends Transport> serverTransport)
specifier|public
name|void
name|setServerTransport
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|serverTransport
parameter_list|)
block|{
name|this
operator|.
name|serverTransport
operator|=
name|serverTransport
expr_stmt|;
block|}
DECL|method|getStoragePath ()
specifier|public
name|String
name|getStoragePath
parameter_list|()
block|{
return|return
name|storagePath
return|;
block|}
comment|/**      * Sets the log directory.      */
DECL|method|setStoragePath (String storagePath)
specifier|public
name|void
name|setStoragePath
parameter_list|(
name|String
name|storagePath
parameter_list|)
block|{
name|this
operator|.
name|storagePath
operator|=
name|storagePath
expr_stmt|;
block|}
DECL|method|getStorageLevel ()
specifier|public
name|StorageLevel
name|getStorageLevel
parameter_list|()
block|{
return|return
name|storageLevel
return|;
block|}
comment|/**      * Sets the log storage level.      */
DECL|method|setStorageLevel (StorageLevel storageLevel)
specifier|public
name|void
name|setStorageLevel
parameter_list|(
name|StorageLevel
name|storageLevel
parameter_list|)
block|{
name|this
operator|.
name|storageLevel
operator|=
name|storageLevel
expr_stmt|;
block|}
comment|// ****************************************
comment|// Copy
comment|// ****************************************
DECL|method|copy ()
specifier|public
name|AtomixClusterConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|AtomixClusterConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

