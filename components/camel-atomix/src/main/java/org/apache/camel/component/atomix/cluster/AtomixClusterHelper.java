begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atomix.cluster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|AtomixReplica
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|catalyst
operator|.
name|transport
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|copycat
operator|.
name|server
operator|.
name|storage
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_class
DECL|class|AtomixClusterHelper
specifier|public
specifier|final
class|class
name|AtomixClusterHelper
block|{
DECL|method|AtomixClusterHelper ()
specifier|private
name|AtomixClusterHelper
parameter_list|()
block|{     }
DECL|method|createReplica (CamelContext camelContext, String address, AtomixClusterConfiguration configuration)
specifier|public
specifier|static
name|AtomixReplica
name|createReplica
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|address
parameter_list|,
name|AtomixClusterConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createReplica
argument_list|(
name|camelContext
argument_list|,
operator|new
name|Address
argument_list|(
name|address
argument_list|)
argument_list|,
name|configuration
argument_list|)
return|;
block|}
DECL|method|createReplica (CamelContext camelContext, Address address, AtomixClusterConfiguration configuration)
specifier|public
specifier|static
name|AtomixReplica
name|createReplica
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Address
name|address
parameter_list|,
name|AtomixClusterConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|AtomixReplica
name|atomix
init|=
name|configuration
operator|.
name|getAtomix
argument_list|()
decl_stmt|;
if|if
condition|(
name|atomix
operator|==
literal|null
condition|)
block|{
specifier|final
name|AtomixReplica
operator|.
name|Builder
name|atomixBuilder
decl_stmt|;
name|String
name|uri
init|=
name|configuration
operator|.
name|getConfigurationUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|uri
operator|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|)
init|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|atomixBuilder
operator|=
name|AtomixReplica
operator|.
name|builder
argument_list|(
name|address
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|atomixBuilder
operator|=
name|AtomixReplica
operator|.
name|builder
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
name|Storage
operator|.
name|Builder
name|storageBuilder
init|=
name|Storage
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getStorageLevel
argument_list|()
argument_list|,
name|storageBuilder
operator|::
name|withStorageLevel
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getStoragePath
argument_list|()
argument_list|,
name|storageBuilder
operator|::
name|withDirectory
argument_list|)
expr_stmt|;
name|atomixBuilder
operator|.
name|withStorage
argument_list|(
name|storageBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getTransport
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atomixBuilder
operator|.
name|withTransport
argument_list|(
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|configuration
operator|.
name|getTransport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getClientTransport
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atomixBuilder
operator|.
name|withClientTransport
argument_list|(
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|configuration
operator|.
name|getClientTransport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getServerTransport
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atomixBuilder
operator|.
name|withServerTransport
argument_list|(
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|configuration
operator|.
name|getServerTransport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|atomix
operator|=
name|atomixBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|atomix
return|;
block|}
block|}
end_class

end_unit

