begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atomix.ha
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|Atomix
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|AtomixReplica
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|catalyst
operator|.
name|transport
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|catalyst
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|copycat
operator|.
name|server
operator|.
name|storage
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|copycat
operator|.
name|server
operator|.
name|storage
operator|.
name|StorageLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|cluster
operator|.
name|AtomixClusterConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|AtomixClusterService
specifier|public
class|class
name|AtomixClusterService
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
implements|,
name|CamelClusterService
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AtomixClusterService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|AtomixClusterConfiguration
name|configuration
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|address
specifier|private
name|Address
name|address
decl_stmt|;
DECL|field|cluster
specifier|private
name|AtomixCluster
name|cluster
decl_stmt|;
DECL|method|AtomixClusterService ()
specifier|public
name|AtomixClusterService
parameter_list|()
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|AtomixClusterConfiguration
argument_list|()
expr_stmt|;
block|}
comment|// **********************************
comment|// Properties
comment|// **********************************
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
DECL|method|getAddress ()
specifier|public
name|Address
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
DECL|method|setAddress (String address)
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
operator|new
name|Address
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
DECL|method|setAddress (Address address)
specifier|public
name|void
name|setAddress
parameter_list|(
name|Address
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
DECL|method|getStoragePath ()
specifier|public
name|String
name|getStoragePath
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getStoragePath
argument_list|()
return|;
block|}
DECL|method|setStoragePath (String storagePath)
specifier|public
name|void
name|setStoragePath
parameter_list|(
name|String
name|storagePath
parameter_list|)
block|{
name|configuration
operator|.
name|setStoragePath
argument_list|(
name|storagePath
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodes ()
specifier|public
name|List
argument_list|<
name|Address
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getNodes
argument_list|()
return|;
block|}
DECL|method|getStorageLevel ()
specifier|public
name|StorageLevel
name|getStorageLevel
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getStorageLevel
argument_list|()
return|;
block|}
DECL|method|setNodes (List<Address> nodes)
specifier|public
name|void
name|setNodes
parameter_list|(
name|List
argument_list|<
name|Address
argument_list|>
name|nodes
parameter_list|)
block|{
name|configuration
operator|.
name|setNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|setStorageLevel (StorageLevel storageLevel)
specifier|public
name|void
name|setStorageLevel
parameter_list|(
name|StorageLevel
name|storageLevel
parameter_list|)
block|{
name|configuration
operator|.
name|setStorageLevel
argument_list|(
name|storageLevel
argument_list|)
expr_stmt|;
block|}
DECL|method|setNodes (String nodes)
specifier|public
name|void
name|setNodes
parameter_list|(
name|String
name|nodes
parameter_list|)
block|{
name|configuration
operator|.
name|setNodes
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
DECL|method|getTransport ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|getTransport
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getTransport
argument_list|()
return|;
block|}
DECL|method|setTransport (Class<? extends Transport> transport)
specifier|public
name|void
name|setTransport
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Transport
argument_list|>
name|transport
parameter_list|)
block|{
name|configuration
operator|.
name|setTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
DECL|method|getReplicaRef ()
specifier|public
name|String
name|getReplicaRef
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getReplicaRef
argument_list|()
return|;
block|}
comment|/**      * Set the reference of an instance of {@link AtomixReplica}.      * @param clusterref      */
DECL|method|setReplicaRef (String clusterref)
specifier|public
name|void
name|setReplicaRef
parameter_list|(
name|String
name|clusterref
parameter_list|)
block|{
name|configuration
operator|.
name|setReplicaRef
argument_list|(
name|clusterref
argument_list|)
expr_stmt|;
block|}
DECL|method|getReplica ()
specifier|public
name|Atomix
name|getReplica
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getReplica
argument_list|()
return|;
block|}
comment|/**      * Set an instance of {@link AtomixReplica}.      * @param replica      */
DECL|method|setReplica (AtomixReplica replica)
specifier|public
name|void
name|setReplica
parameter_list|(
name|AtomixReplica
name|replica
parameter_list|)
block|{
name|configuration
operator|.
name|setReplica
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigurationUri ()
specifier|public
name|String
name|getConfigurationUri
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getConfigurationUri
argument_list|()
return|;
block|}
DECL|method|setConfigurationUri (String configurationUri)
specifier|public
name|void
name|setConfigurationUri
parameter_list|(
name|String
name|configurationUri
parameter_list|)
block|{
name|configuration
operator|.
name|setConfigurationUri
argument_list|(
name|configurationUri
argument_list|)
expr_stmt|;
block|}
comment|// **********************************
comment|// Cluster
comment|// **********************************
annotation|@
name|Override
DECL|method|getCluster ()
specifier|public
specifier|synchronized
name|CamelCluster
name|getCluster
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|cluster
operator|==
literal|null
condition|)
block|{
name|AtomixReplica
name|atomix
init|=
name|configuration
operator|.
name|getReplica
argument_list|()
decl_stmt|;
if|if
condition|(
name|atomix
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getReplicaRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atomix
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|camelContext
argument_list|,
name|configuration
operator|.
name|getReplicaRef
argument_list|()
argument_list|,
name|AtomixReplica
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|this
operator|.
name|address
argument_list|,
literal|"Atomix Address"
argument_list|)
expr_stmt|;
specifier|final
name|AtomixReplica
operator|.
name|Builder
name|atomixBuilder
decl_stmt|;
name|String
name|uri
init|=
name|configuration
operator|.
name|getConfigurationUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|uri
operator|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|)
init|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|atomixBuilder
operator|=
name|AtomixReplica
operator|.
name|builder
argument_list|(
name|this
operator|.
name|address
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|atomixBuilder
operator|=
name|AtomixReplica
operator|.
name|builder
argument_list|(
name|this
operator|.
name|address
argument_list|)
expr_stmt|;
block|}
name|Storage
operator|.
name|Builder
name|storageBuilder
init|=
name|Storage
operator|.
name|builder
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getStorageLevel
argument_list|()
argument_list|,
name|storageBuilder
operator|::
name|withStorageLevel
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|ifNotEmpty
argument_list|(
name|configuration
operator|.
name|getStoragePath
argument_list|()
argument_list|,
name|storageBuilder
operator|::
name|withDirectory
argument_list|)
expr_stmt|;
name|atomixBuilder
operator|.
name|withStorage
argument_list|(
name|storageBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configuration
operator|.
name|getTransport
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atomixBuilder
operator|.
name|withTransport
argument_list|(
name|camelContext
operator|.
name|getInjector
argument_list|()
operator|.
name|newInstance
argument_list|(
name|configuration
operator|.
name|getTransport
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|atomix
operator|=
name|atomixBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|cluster
operator|=
operator|new
name|AtomixCluster
argument_list|(
name|atomix
argument_list|,
name|configuration
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cluster
operator|.
name|setCamelContext
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|cluster
return|;
block|}
annotation|@
name|Override
DECL|method|createView (String namespace)
specifier|public
name|CamelClusterView
name|createView
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getCluster
argument_list|()
operator|.
name|createView
argument_list|(
name|namespace
argument_list|)
return|;
block|}
comment|// **********************************
comment|// Service
comment|// **********************************
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Starting cluster on address {}"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|getCluster
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|cluster
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

