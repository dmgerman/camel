begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atomix.ha
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|ha
package|;
end_package

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|Atomix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ha
operator|.
name|AbstractCamelCluster
import|;
end_import

begin_comment
comment|/**  * TODO: Dummy implementation for testing purpose  */
end_comment

begin_class
DECL|class|AtomixCluster
specifier|public
class|class
name|AtomixCluster
extends|extends
name|AbstractCamelCluster
argument_list|<
name|AtomixClusterView
argument_list|>
block|{
DECL|field|atomix
specifier|private
specifier|final
name|Atomix
name|atomix
decl_stmt|;
DECL|method|AtomixCluster (Atomix atomix)
specifier|public
name|AtomixCluster
parameter_list|(
name|Atomix
name|atomix
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|atomix
argument_list|)
expr_stmt|;
block|}
DECL|method|AtomixCluster (CamelContext camelContext, Atomix atomix)
specifier|public
name|AtomixCluster
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Atomix
name|atomix
parameter_list|)
block|{
name|super
argument_list|(
literal|"camel-atomix"
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|atomix
operator|=
name|atomix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doCreateView (String namespace)
specifier|public
name|AtomixClusterView
name|doCreateView
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|AtomixClusterView
argument_list|(
name|this
argument_list|,
name|namespace
argument_list|,
name|atomix
operator|.
name|getGroup
argument_list|(
name|namespace
argument_list|)
operator|.
name|join
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

