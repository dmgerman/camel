begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.atomix.client.messaging
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|messaging
package|;
end_package

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|group
operator|.
name|DistributedGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|group
operator|.
name|GroupMember
import|;
end_import

begin_import
import|import
name|io
operator|.
name|atomix
operator|.
name|group
operator|.
name|messaging
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|AbstractAtomixClientProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InvokeOnHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|AtomixClientConstants
operator|.
name|BROADCAST_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|AtomixClientConstants
operator|.
name|CHANNEL_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|AtomixClientConstants
operator|.
name|MEMBER_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|AtomixClientConstants
operator|.
name|RESOURCE_ACTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|AtomixClientConstants
operator|.
name|RESOURCE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|AtomixClientConstants
operator|.
name|RESOURCE_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|messaging
operator|.
name|AtomixMessaging
operator|.
name|OPTIONS_BROADCAST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|messaging
operator|.
name|AtomixMessaging
operator|.
name|OPTIONS_BROADCAST_RANDOM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|atomix
operator|.
name|client
operator|.
name|messaging
operator|.
name|AtomixMessaging
operator|.
name|OPTIONS_DIRECT
import|;
end_import

begin_class
DECL|class|AtomixMessagingProducer
specifier|final
class|class
name|AtomixMessagingProducer
extends|extends
name|AbstractAtomixClientProducer
argument_list|<
name|AtomixMessagingEndpoint
argument_list|,
name|DistributedGroup
argument_list|>
block|{
DECL|field|configuration
specifier|private
specifier|final
name|AtomixMessagingConfiguration
name|configuration
decl_stmt|;
DECL|method|AtomixMessagingProducer (AtomixMessagingEndpoint endpoint)
specifier|protected
name|AtomixMessagingProducer
parameter_list|(
name|AtomixMessagingEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
block|}
comment|// *********************************
comment|// Handlers
comment|// *********************************
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"DIRECT"
argument_list|)
DECL|method|onDirect (Message message, AsyncCallback callback)
name|boolean
name|onDirect
parameter_list|(
name|Message
name|message
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|RESOURCE_VALUE
argument_list|,
name|message
operator|::
name|getBody
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|memberName
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|MEMBER_NAME
argument_list|,
name|configuration
operator|::
name|getMemberName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|channelName
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CHANNEL_NAME
argument_list|,
name|configuration
operator|::
name|getChannelName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|memberName
argument_list|,
name|MEMBER_NAME
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|channelName
argument_list|,
name|CHANNEL_NAME
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|value
argument_list|,
name|RESOURCE_VALUE
argument_list|)
expr_stmt|;
specifier|final
name|DistributedGroup
name|group
init|=
name|getResource
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|final
name|GroupMember
name|member
init|=
name|group
operator|.
name|member
argument_list|(
name|memberName
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
argument_list|<
name|Object
argument_list|>
name|producer
init|=
name|member
operator|.
name|messaging
argument_list|()
operator|.
name|producer
argument_list|(
name|channelName
argument_list|,
name|OPTIONS_DIRECT
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|value
argument_list|)
operator|.
name|thenAccept
argument_list|(
name|result
lambda|->
name|processResult
argument_list|(
name|message
argument_list|,
name|callback
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"BROADCAST"
argument_list|)
DECL|method|onBroadcast (Message message, AsyncCallback callback)
name|boolean
name|onBroadcast
parameter_list|(
name|Message
name|message
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|RESOURCE_VALUE
argument_list|,
name|message
operator|::
name|getBody
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|channelName
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|CHANNEL_NAME
argument_list|,
name|configuration
operator|::
name|getChannelName
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|AtomixMessaging
operator|.
name|BroadcastType
name|type
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|BROADCAST_TYPE
argument_list|,
name|configuration
operator|::
name|getBroadcastType
argument_list|,
name|AtomixMessaging
operator|.
name|BroadcastType
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|channelName
argument_list|,
name|CHANNEL_NAME
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|value
argument_list|,
name|RESOURCE_VALUE
argument_list|)
expr_stmt|;
name|MessageProducer
operator|.
name|Options
name|options
init|=
name|type
operator|==
name|AtomixMessaging
operator|.
name|BroadcastType
operator|.
name|RANDOM
condition|?
name|OPTIONS_BROADCAST_RANDOM
else|:
name|OPTIONS_BROADCAST
decl_stmt|;
specifier|final
name|DistributedGroup
name|group
init|=
name|getResource
argument_list|(
name|message
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
argument_list|<
name|Object
argument_list|>
name|producer
init|=
name|group
operator|.
name|messaging
argument_list|()
operator|.
name|producer
argument_list|(
name|channelName
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|value
argument_list|)
operator|.
name|thenRun
argument_list|(
parameter_list|()
lambda|->
name|processResult
argument_list|(
name|message
argument_list|,
name|callback
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// *********************************
comment|// Implementation
comment|// *********************************
annotation|@
name|Override
DECL|method|getProcessorKey (Message message)
specifier|protected
name|String
name|getProcessorKey
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|RESOURCE_ACTION
argument_list|,
name|configuration
operator|::
name|getDefaultAction
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceName (Message message)
specifier|protected
name|String
name|getResourceName
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getHeader
argument_list|(
name|RESOURCE_NAME
argument_list|,
name|getAtomixEndpoint
argument_list|()
operator|::
name|getResourceName
argument_list|,
name|String
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createResource (String resourceName)
specifier|protected
name|DistributedGroup
name|createResource
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
return|return
name|getAtomixEndpoint
argument_list|()
operator|.
name|getAtomix
argument_list|()
operator|.
name|getGroup
argument_list|(
name|resourceName
argument_list|,
operator|new
name|DistributedGroup
operator|.
name|Config
argument_list|(
name|getAtomixEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getResourceOptions
argument_list|(
name|resourceName
argument_list|)
argument_list|)
argument_list|,
operator|new
name|DistributedGroup
operator|.
name|Options
argument_list|(
name|getAtomixEndpoint
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getResourceConfig
argument_list|(
name|resourceName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
return|;
block|}
block|}
end_class

end_unit

