begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
operator|.
name|AbstractServiceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLManager
import|;
end_import

begin_comment
comment|/**  * This class will help the WSDLServiceFactoryBean to look up the ServiceName and PortName from WSDL  */
end_comment

begin_class
DECL|class|WSDLServiceConfiguration
specifier|public
class|class
name|WSDLServiceConfiguration
extends|extends
name|AbstractServiceConfiguration
block|{
DECL|field|serviceFactoryBean
specifier|private
name|WSDLServiceFactoryBean
name|serviceFactoryBean
decl_stmt|;
DECL|field|definition
specifier|private
name|Definition
name|definition
decl_stmt|;
DECL|field|serviceQName
specifier|private
name|QName
name|serviceQName
decl_stmt|;
DECL|field|endpointQName
specifier|private
name|QName
name|endpointQName
decl_stmt|;
DECL|method|WSDLServiceConfiguration (WSDLServiceFactoryBean factoryBean)
specifier|public
name|WSDLServiceConfiguration
parameter_list|(
name|WSDLServiceFactoryBean
name|factoryBean
parameter_list|)
block|{
name|this
operator|.
name|serviceFactoryBean
operator|=
name|factoryBean
expr_stmt|;
block|}
DECL|method|getDefinition ()
specifier|protected
name|Definition
name|getDefinition
parameter_list|()
block|{
if|if
condition|(
name|definition
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|definition
operator|=
name|serviceFactoryBean
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|WSDLManager
operator|.
name|class
argument_list|)
operator|.
name|getDefinition
argument_list|(
name|serviceFactoryBean
operator|.
name|getWsdlURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|definition
return|;
block|}
DECL|method|getServiceQName ()
specifier|protected
name|QName
name|getServiceQName
parameter_list|()
block|{
if|if
condition|(
name|serviceQName
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|?
argument_list|>
name|services
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|getDefinition
argument_list|()
operator|.
name|getServices
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|services
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There is no service in the WSDL"
operator|+
name|serviceFactoryBean
operator|.
name|getWsdlURL
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|services
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"service name must be specified, there is more than one service in the WSDL"
operator|+
name|serviceFactoryBean
operator|.
name|getWsdlURL
argument_list|()
argument_list|)
throw|;
block|}
name|serviceQName
operator|=
name|services
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|serviceQName
return|;
block|}
DECL|method|getEndpointQName ()
specifier|protected
name|QName
name|getEndpointQName
parameter_list|()
block|{
if|if
condition|(
name|endpointQName
operator|==
literal|null
condition|)
block|{
name|Service
name|service
init|=
name|getDefinition
argument_list|()
operator|.
name|getService
argument_list|(
name|serviceFactoryBean
operator|.
name|getServiceQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There is no service "
operator|+
name|serviceFactoryBean
operator|.
name|getServiceQName
argument_list|()
operator|+
literal|" in WSDL "
operator|+
name|serviceFactoryBean
operator|.
name|getWsdlURL
argument_list|()
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|ports
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|service
operator|.
name|getPorts
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ports
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"There is no port/endpoint in the service "
operator|+
name|serviceFactoryBean
operator|.
name|getServiceQName
argument_list|()
operator|+
literal|"of WSDL"
operator|+
name|serviceFactoryBean
operator|.
name|getWsdlURL
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|ports
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Port/endpoint name must be specified, There is more than one port in the service"
operator|+
name|serviceFactoryBean
operator|.
name|getServiceQName
argument_list|()
operator|+
literal|" of the WSDL"
operator|+
name|serviceFactoryBean
operator|.
name|getWsdlURL
argument_list|()
argument_list|)
throw|;
block|}
name|endpointQName
operator|=
operator|new
name|QName
argument_list|(
name|service
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|ports
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|endpointQName
return|;
block|}
DECL|method|getServiceName ()
specifier|public
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|getServiceQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
DECL|method|getServiceNamespace ()
specifier|public
name|String
name|getServiceNamespace
parameter_list|()
block|{
return|return
name|getServiceQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
DECL|method|getEndpointName ()
specifier|public
name|QName
name|getEndpointName
parameter_list|()
block|{
return|return
name|getEndpointQName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

