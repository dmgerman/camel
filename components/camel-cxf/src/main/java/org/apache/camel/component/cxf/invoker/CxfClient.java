begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.invoker
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|invoker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|PreexistingConduitSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_comment
comment|/**  * Just deal with the PayLoadMessage and RawMessage  *  */
end_comment

begin_class
DECL|class|CxfClient
specifier|public
class|class
name|CxfClient
extends|extends
name|ClientImpl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CxfClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
DECL|method|CxfClient (Bus b, Endpoint e)
specifier|public
name|CxfClient
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Endpoint
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|endpoint
operator|=
name|e
expr_stmt|;
block|}
DECL|method|dispatch (Object params, Map<String, Object> context, Exchange exchange)
specifier|public
name|Object
name|dispatch
parameter_list|(
name|Object
name|params
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|retval
init|=
literal|null
decl_stmt|;
name|InvokingContext
name|invokingContext
init|=
name|exchange
operator|.
name|get
argument_list|(
name|InvokingContext
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|invokingContext
operator|!=
literal|null
assert|;
comment|// get InBound binding operation info from the exchange object
name|BindingOperationInfo
name|inBoundOp
init|=
name|exchange
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|outBoundOp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inBoundOp
operator|!=
literal|null
condition|)
block|{
comment|//Get the BindingOperationInfo for the outbound binding.
name|BindingInfo
name|bi
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|outBoundOp
operator|=
name|bi
operator|.
name|getOperation
argument_list|(
name|inBoundOp
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outBoundOp
operator|!=
literal|null
operator|&&
name|inBoundOp
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|outBoundOp
operator|=
name|outBoundOp
operator|.
name|getUnwrappedOperation
argument_list|()
expr_stmt|;
block|}
block|}
name|retval
operator|=
name|invokeWithMessageStream
argument_list|(
name|outBoundOp
argument_list|,
name|params
argument_list|,
name|context
argument_list|,
name|invokingContext
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|invokeWithMessageStream (BindingOperationInfo bi, Object param, Map<String, Object> context, InvokingContext invokingContext)
specifier|public
name|Object
name|invokeWithMessageStream
parameter_list|(
name|BindingOperationInfo
name|bi
parameter_list|,
name|Object
name|param
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|,
name|InvokingContext
name|invokingContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|retval
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|context
condition|)
block|{
name|requestContext
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|REQUEST_CONTEXT
argument_list|)
expr_stmt|;
name|responseContext
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|RESPONSE_CONTEXT
argument_list|)
expr_stmt|;
block|}
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
comment|// put the message Observer to call the CxfClient onMessage()
name|exchange
operator|.
name|put
argument_list|(
name|MessageObserver
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|InvokingContext
operator|.
name|class
argument_list|,
name|invokingContext
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|getEndpoint
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
condition|)
block|{
comment|//Set The InputMessage
name|exchange
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|bi
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|,
name|bi
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOneWay
argument_list|(
name|bi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|prepareMessage
argument_list|(
name|exchange
argument_list|,
name|requestContext
argument_list|,
name|param
argument_list|,
name|invokingContext
argument_list|)
decl_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
name|setupOutChain
argument_list|(
name|requestContext
argument_list|,
name|message
argument_list|,
name|invokingContext
argument_list|)
decl_stmt|;
comment|// setup conduit selector
name|prepareConduitSelector
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// execute chain
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|//it will close all the stream in the message, so we do not call it
comment|//getConduitSelector().complete(exchange);
comment|// Check to see if there is a Fault from the outgoing chain
name|Exception
name|ex
init|=
name|message
operator|.
name|getContent
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Exception in outgoing chain: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
if|if
condition|(
operator|!
name|exchange
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|ex
operator|=
name|getException
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Exception in incoming chain: "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|ex
throw|;
block|}
name|retval
operator|=
name|invokingContext
operator|.
name|getResponseObject
argument_list|(
name|exchange
argument_list|,
name|responseContext
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
DECL|method|onMessage (Message message)
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"call the cxf client on message , exchange is "
operator|+
name|exchange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|get
argument_list|(
name|InvokingContext
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Binding
operator|.
name|class
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
argument_list|)
expr_stmt|;
name|BindingOperationInfo
name|bi
init|=
name|exchange
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
condition|)
block|{
comment|//Set The OutputMessage
name|exchange
operator|.
name|put
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|,
name|bi
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InvokingContext
name|invokingContext
init|=
name|exchange
operator|.
name|get
argument_list|(
name|InvokingContext
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|invokingContext
operator|!=
literal|null
assert|;
comment|// setup interceptor chain
name|PhaseInterceptorChain
name|chain
init|=
name|invokingContext
operator|.
name|getResponseInInterceptorChain
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
comment|// execute chain
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// set inMessage in the exchange
name|exchange
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prepareMessage (Exchange exchange, Map<String, Object> requestContext, Object param, InvokingContext InvokingContext)
specifier|private
name|Message
name|prepareMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
parameter_list|,
name|Object
name|param
parameter_list|,
name|InvokingContext
name|InvokingContext
parameter_list|)
block|{
name|Message
name|message
init|=
name|getEndpoint
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
comment|// setup the message context
if|if
condition|(
name|requestContext
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|putAll
argument_list|(
name|requestContext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|InvokingContext
operator|.
name|setRequestOutMessageContent
argument_list|(
name|message
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|requestContext
condition|)
block|{
name|exchange
operator|.
name|putAll
argument_list|(
name|requestContext
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
DECL|method|setupOutChain (Map<String, Object> requestContext, Message message, InvokingContext invokingContext)
specifier|private
name|PhaseInterceptorChain
name|setupOutChain
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
parameter_list|,
name|Message
name|message
parameter_list|,
name|InvokingContext
name|invokingContext
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finest
argument_list|(
literal|"Build an out interceptor chain to send request to server"
argument_list|)
expr_stmt|;
block|}
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|PhaseInterceptorChain
name|chain
init|=
name|invokingContext
operator|.
name|getRequestOutInterceptorChain
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|modifyChain
argument_list|(
name|chain
argument_list|,
name|requestContext
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setFaultObserver
argument_list|(
name|outFaultObserver
argument_list|)
expr_stmt|;
return|return
name|chain
return|;
block|}
DECL|method|getEndpoint ()
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
DECL|method|getBus ()
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
block|}
end_class

end_unit

