begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientFactoryBean
import|;
end_import

begin_comment
comment|/**  * Sends messages from Camel into the CXF endpoint  *   * @version $Revision$  */
end_comment

begin_class
DECL|class|CxfInvokeProducer
specifier|public
class|class
name|CxfInvokeProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|endpoint
specifier|private
name|CxfInvokeEndpoint
name|endpoint
decl_stmt|;
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|method|CxfInvokeProducer (CxfInvokeEndpoint endpoint)
specifier|public
name|CxfInvokeProducer
parameter_list|(
name|CxfInvokeEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|CxfExchange
name|cxfExchange
init|=
name|endpoint
operator|.
name|toExchangeType
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|process
argument_list|(
name|cxfExchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|copyFrom
argument_list|(
name|cxfExchange
argument_list|)
expr_stmt|;
block|}
DECL|method|process (CxfExchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|CxfExchange
name|exchange
parameter_list|)
block|{
name|List
name|params
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
index|[]
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|client
operator|.
name|invoke
argument_list|(
name|endpoint
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|METHOD
argument_list|)
argument_list|,
name|params
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|CxfBinding
name|binding
init|=
name|endpoint
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|binding
operator|.
name|storeCxfResponse
argument_list|(
name|exchange
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO Add support for sending message inputstream. Currently, we only
comment|// handle
comment|// method invocation with pojo.
comment|// TODO Add support for endpoints associated with a WSDL
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|ClientFactoryBean
name|cfBean
init|=
operator|new
name|ClientFactoryBean
argument_list|()
decl_stmt|;
name|cfBean
operator|.
name|setAddress
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|cfBean
operator|.
name|setBus
argument_list|(
name|endpoint
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|endpoint
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|SEI
argument_list|)
decl_stmt|;
name|Class
name|type
init|=
name|ObjectHelper
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|cfBean
operator|.
name|setServiceClass
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|client
operator|=
name|cfBean
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|getConduit
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

