begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * CxfMessage body type when {@link DataFormat#PAYLOAD} is used.  *   * @version   */
end_comment

begin_class
DECL|class|CxfPayload
specifier|public
class|class
name|CxfPayload
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|body
specifier|private
name|List
argument_list|<
name|Element
argument_list|>
name|body
decl_stmt|;
DECL|field|headers
specifier|private
name|List
argument_list|<
name|T
argument_list|>
name|headers
decl_stmt|;
DECL|method|CxfPayload (List<T> headers, List<Element> body)
specifier|public
name|CxfPayload
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|headers
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|body
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|this
operator|.
name|body
operator|=
name|body
expr_stmt|;
block|}
DECL|method|getBody ()
specifier|public
name|List
argument_list|<
name|Element
argument_list|>
name|getBody
parameter_list|()
block|{
return|return
name|body
return|;
block|}
DECL|method|getHeaders ()
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|XmlConverter
name|converter
init|=
operator|new
name|XmlConverter
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" headers: "
operator|+
name|headers
argument_list|)
expr_stmt|;
comment|// go through the list of element and turn it into String
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"body: "
operator|+
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"body: [ "
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|element
range|:
name|body
control|)
block|{
name|String
name|elementString
init|=
literal|""
decl_stmt|;
try|try
block|{
name|elementString
operator|=
name|converter
operator|.
name|toString
argument_list|(
name|element
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
name|elementString
operator|=
name|element
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"["
operator|+
name|elementString
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

