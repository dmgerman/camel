begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.invoker
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|invoker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
DECL|class|RawMessageInvokingContext
specifier|public
class|class
name|RawMessageInvokingContext
extends|extends
name|AbstractInvokingContext
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|RawMessageInvokingContext
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RawMessageInvokingContext ()
specifier|public
name|RawMessageInvokingContext
parameter_list|()
block|{      }
DECL|method|setRequestOutMessageContent (Message message, Map<Class, Object> contents)
specifier|public
name|void
name|setRequestOutMessageContent
parameter_list|(
name|Message
name|message
parameter_list|,
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|contents
parameter_list|)
block|{
name|Set
name|entries
init|=
name|contents
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Iterator
name|iter
init|=
name|entries
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Class
condition|)
block|{
name|message
operator|.
name|setContent
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|obj
argument_list|,
name|contents
operator|.
name|get
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getResponseObject (Exchange exchange, Map<String, Object> responseContext)
specifier|public
name|Object
name|getResponseObject
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
parameter_list|)
block|{
return|return
name|getResponseObject
argument_list|(
name|exchange
operator|.
name|getInMessage
argument_list|()
argument_list|,
name|responseContext
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|setResponseContent (Message outMessage, Object resultPayload)
specifier|public
name|void
name|setResponseContent
parameter_list|(
name|Message
name|outMessage
parameter_list|,
name|Object
name|resultPayload
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Set content: "
operator|+
name|resultPayload
argument_list|)
expr_stmt|;
name|outMessage
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|resultPayload
argument_list|)
expr_stmt|;
comment|//loggerTheMessage(outMessage, "Out Message");
block|}
DECL|method|getRequestContent (Message inMessage)
specifier|public
name|Map
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|getRequestContent
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
comment|//loggerTheMessage(inMessage, "In Message");
name|IdentityHashMap
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
name|contents
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Class
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Set
name|set
init|=
name|inMessage
operator|.
name|getContentFormats
argument_list|()
decl_stmt|;
name|Iterator
name|iter
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Class
condition|)
block|{
name|contents
operator|.
name|put
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|obj
argument_list|,
name|inMessage
operator|.
name|getContent
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|contents
return|;
block|}
annotation|@
name|Override
DECL|method|getLogger ()
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
block|}
end_class

end_unit

