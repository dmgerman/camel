begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
operator|.
name|AttachmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WrappedMessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_comment
comment|/**  * The Default CXF binding implementation.  *   * @version $Revision$  */
end_comment

begin_class
DECL|class|DefaultCxfBinding
specifier|public
class|class
name|DefaultCxfBinding
implements|implements
name|CxfBinding
implements|,
name|HeaderFilterStrategyAware
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DefaultCxfBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
comment|// CxfBinding Methods
comment|// -------------------------------------------------------------------------
comment|/**      *<p>      * This method is called by {@link CxfProducer#process(Exchange)}. It populates       * the CXF exchange and invocation context (i.e. request/response) contexts, it       * but does not create and populate a CXF message as a ClientImpl's invoke method      * will create a new CXF Message.  That method will put all properties from the       * CXF exchange and request context to the CXF message.      *</p>      */
DECL|method|populateCxfRequestFromExchange ( org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange, Map<String, Object> requestContext)
specifier|public
name|void
name|populateCxfRequestFromExchange
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|,
name|Exchange
name|camelExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
parameter_list|)
block|{
comment|// propagate request context
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|camelHeaders
init|=
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|extractInvocationContextFromCamel
argument_list|(
name|camelExchange
argument_list|,
name|camelHeaders
argument_list|,
name|requestContext
argument_list|,
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|)
expr_stmt|;
comment|// propagate headers
name|propagateHeadersFromCamelToCxf
argument_list|(
name|camelExchange
argument_list|,
name|camelHeaders
argument_list|,
name|cxfExchange
argument_list|,
name|requestContext
argument_list|)
expr_stmt|;
comment|// propagate attachments
name|Set
argument_list|<
name|Attachment
argument_list|>
name|attachments
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|entry
range|:
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|attachments
operator|==
literal|null
condition|)
block|{
name|attachments
operator|=
operator|new
name|HashSet
argument_list|<
name|Attachment
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|AttachmentImpl
name|attachment
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|attachment
operator|.
name|setXOP
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// only supports MTOM
name|attachments
operator|.
name|add
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
name|requestContext
operator|.
name|put
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_ATTACHMENTS
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method is called by {@link CxfProducer#process(Exchange)}.  It propagates       * information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a       * request from a CXF server.      */
DECL|method|populateExchangeFromCxfResponse (Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange, Map<String, Object> responseContext)
specifier|public
name|void
name|populateExchangeFromCxfResponse
parameter_list|(
name|Exchange
name|camelExchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
parameter_list|)
block|{
name|Message
name|cxfMessage
init|=
name|cxfExchange
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Populate exchange from CXF response message: "
operator|+
name|cxfMessage
argument_list|)
expr_stmt|;
block|}
comment|// propagate body
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|DefaultCxfBinding
operator|.
name|getContentFromCxf
argument_list|(
name|cxfMessage
argument_list|,
name|camelExchange
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|DATA_FORMAT_PROPERTY
argument_list|,
name|DataFormat
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// propagate response context
if|if
condition|(
name|responseContext
operator|!=
literal|null
operator|&&
name|responseContext
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|,
name|responseContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set header = "
operator|+
name|Client
operator|.
name|RESPONSE_CONTEXT
operator|+
literal|" value = "
operator|+
name|responseContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|// propagate protocol headers
name|propagateHeadersFromCxfToCamel
argument_list|(
name|cxfMessage
argument_list|,
name|camelExchange
operator|.
name|getOut
argument_list|()
argument_list|,
name|camelExchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|cxfMessage
operator|.
name|getAttachments
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// TODO: workaround for CXF-2503
try|try
block|{
name|cxfMessage
operator|.
name|getAttachments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// end of workaround
comment|// propagate attachments
for|for
control|(
name|Attachment
name|attachment
range|:
name|cxfMessage
operator|.
name|getAttachments
argument_list|()
control|)
block|{
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|addAttachment
argument_list|(
name|attachment
operator|.
name|getId
argument_list|()
argument_list|,
name|attachment
operator|.
name|getDataHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method is called by {@link CxfConsumer}.      */
DECL|method|populateExchangeFromCxfRequest (org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange)
specifier|public
name|void
name|populateExchangeFromCxfRequest
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|,
name|Exchange
name|camelExchange
parameter_list|)
block|{
name|Method
name|method
init|=
literal|null
decl_stmt|;
name|QName
name|operationName
init|=
literal|null
decl_stmt|;
name|ExchangePattern
name|mep
init|=
name|ExchangePattern
operator|.
name|InOut
decl_stmt|;
comment|// extract binding operation information
name|BindingOperationInfo
name|boi
init|=
name|camelExchange
operator|.
name|getProperty
argument_list|(
name|BindingOperationInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|boi
operator|!=
literal|null
condition|)
block|{
name|Service
name|service
init|=
operator|(
name|Service
operator|)
name|cxfExchange
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|MethodDispatcher
name|md
init|=
operator|(
name|MethodDispatcher
operator|)
name|service
operator|.
name|get
argument_list|(
name|MethodDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|!=
literal|null
condition|)
block|{
name|method
operator|=
name|md
operator|.
name|getMethod
argument_list|(
name|boi
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|mep
operator|=
name|ExchangePattern
operator|.
name|InOnly
expr_stmt|;
block|}
name|operationName
operator|=
name|boi
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
comment|// set operation name in header
if|if
condition|(
name|operationName
operator|!=
literal|null
condition|)
block|{
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAMESPACE
argument_list|,
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set IN header: "
operator|+
name|CxfConstants
operator|.
name|OPERATION_NAMESPACE
operator|+
literal|"="
operator|+
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set IN header: "
operator|+
name|CxfConstants
operator|.
name|OPERATION_NAME
operator|+
literal|"="
operator|+
name|boi
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set IN header: "
operator|+
name|CxfConstants
operator|.
name|OPERATION_NAME
operator|+
literal|"="
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set message exchange pattern
name|camelExchange
operator|.
name|setPattern
argument_list|(
name|mep
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set exchange MEP: "
operator|+
name|mep
argument_list|)
expr_stmt|;
block|}
comment|// propagate headers
name|Message
name|cxfMessage
init|=
name|cxfExchange
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
name|propagateHeadersFromCxfToCamel
argument_list|(
name|cxfMessage
argument_list|,
name|camelExchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|camelExchange
argument_list|)
expr_stmt|;
comment|// Propagating properties from CXF Exchange to Camel Exchange has an
comment|// side effect of copying reply side stuff when the producer is retried.
comment|// So, we do not want to do this.
comment|//camelExchange.getProperties().putAll(cxfExchange);
comment|// propagate request context
name|Object
name|value
init|=
name|cxfMessage
operator|.
name|get
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|,
name|value
argument_list|,
name|camelExchange
argument_list|)
condition|)
block|{
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Populate context from CXF message "
operator|+
name|Client
operator|.
name|REQUEST_CONTEXT
operator|+
literal|" value="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set body
name|Object
name|body
init|=
name|DefaultCxfBinding
operator|.
name|getContentFromCxf
argument_list|(
name|cxfMessage
argument_list|,
name|camelExchange
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|DATA_FORMAT_PROPERTY
argument_list|,
name|DataFormat
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
comment|// propagate attachments
if|if
condition|(
name|cxfMessage
operator|.
name|getAttachments
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Attachment
name|attachment
range|:
name|cxfMessage
operator|.
name|getAttachments
argument_list|()
control|)
block|{
name|camelExchange
operator|.
name|getIn
argument_list|()
operator|.
name|addAttachment
argument_list|(
name|attachment
operator|.
name|getId
argument_list|()
argument_list|,
name|attachment
operator|.
name|getDataHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * This method is called by {@link CxfConsumer} to populate a CXF response exchange       * from a Camel exchange.      */
DECL|method|populateCxfResponseFromExchange (Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange)
specifier|public
name|void
name|populateCxfResponseFromExchange
parameter_list|(
name|Exchange
name|camelExchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|)
block|{
comment|// create response context
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|// propagate response context
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|camelHeaders
init|=
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|extractInvocationContextFromCamel
argument_list|(
name|camelExchange
argument_list|,
name|camelHeaders
argument_list|,
name|responseContext
argument_list|,
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|)
expr_stmt|;
name|propagateHeadersFromCamelToCxf
argument_list|(
name|camelExchange
argument_list|,
name|camelHeaders
argument_list|,
name|cxfExchange
argument_list|,
name|responseContext
argument_list|)
expr_stmt|;
comment|// create out message
name|Endpoint
name|ep
init|=
name|cxfExchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|outMessage
init|=
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|cxfExchange
operator|.
name|setOutMessage
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|DataFormat
name|dataFormat
init|=
name|camelExchange
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|DATA_FORMAT_PROPERTY
argument_list|,
name|DataFormat
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// propagate contexts
if|if
condition|(
name|dataFormat
operator|!=
name|DataFormat
operator|.
name|POJO
condition|)
block|{
comment|// copying response context to out message seems to cause problem in POJO mode
name|outMessage
operator|.
name|putAll
argument_list|(
name|responseContext
argument_list|)
expr_stmt|;
block|}
name|outMessage
operator|.
name|put
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|,
name|responseContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set out response context = "
operator|+
name|responseContext
argument_list|)
expr_stmt|;
block|}
comment|// set body
name|Object
name|outBody
init|=
name|DefaultCxfBinding
operator|.
name|getBodyFromCamel
argument_list|(
name|camelExchange
operator|.
name|getOut
argument_list|()
argument_list|,
name|dataFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|outBody
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|CxfPayload
argument_list|<
name|?
argument_list|>
name|payload
init|=
operator|(
name|CxfPayload
argument_list|<
name|?
argument_list|>
operator|)
name|outBody
decl_stmt|;
name|outMessage
operator|.
name|put
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|payload
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|outMessage
operator|.
name|put
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|payload
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|responseContext
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|put
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|responseContext
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MessageContentsList
name|resList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outBody
operator|instanceof
name|MessageContentsList
condition|)
block|{
name|resList
operator|=
operator|(
name|MessageContentsList
operator|)
name|outBody
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outBody
operator|instanceof
name|List
condition|)
block|{
name|resList
operator|=
operator|new
name|MessageContentsList
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|outBody
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outBody
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|resList
operator|=
operator|new
name|MessageContentsList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|outBody
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resList
operator|=
operator|new
name|MessageContentsList
argument_list|(
name|outBody
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resList
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|resList
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set Out CXF message content = "
operator|+
name|resList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// propagate attachments
name|Set
argument_list|<
name|Attachment
argument_list|>
name|attachments
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|entry
range|:
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getAttachments
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|attachments
operator|==
literal|null
condition|)
block|{
name|attachments
operator|=
operator|new
name|HashSet
argument_list|<
name|Attachment
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|AttachmentImpl
name|attachment
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|attachment
operator|.
name|setXOP
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// only supports MTOM
name|attachments
operator|.
name|add
argument_list|(
name|attachment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|setAttachments
argument_list|(
name|attachments
argument_list|)
expr_stmt|;
block|}
name|BindingOperationInfo
name|boi
init|=
name|cxfExchange
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|boi
operator|!=
literal|null
condition|)
block|{
name|cxfExchange
operator|.
name|put
argument_list|(
name|BindingMessageInfo
operator|.
name|class
argument_list|,
name|boi
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// HeaderFilterStrategyAware Methods
comment|// -------------------------------------------------------------------------
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy strategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|strategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|strategy
expr_stmt|;
block|}
comment|// Non public methods
comment|// -------------------------------------------------------------------------
comment|/**      * @param camelExchange      * @param cxfContext Request or Response context      * @param camelHeaders       * @param contextKey       */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|extractInvocationContextFromCamel (Exchange camelExchange, Map<String, Object> camelHeaders, Map<String, Object> cxfContext, String contextKey)
specifier|protected
name|void
name|extractInvocationContextFromCamel
parameter_list|(
name|Exchange
name|camelExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|camelHeaders
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cxfContext
parameter_list|,
name|String
name|contextKey
parameter_list|)
block|{
comment|// extract from header
name|Map
name|context
init|=
operator|(
name|Map
operator|)
name|camelHeaders
operator|.
name|get
argument_list|(
name|contextKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|cxfContext
operator|.
name|putAll
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Propagate "
operator|+
name|contextKey
operator|+
literal|" from header context = "
operator|+
operator|(
operator|(
name|context
operator|instanceof
name|WrappedMessageContext
operator|)
condition|?
operator|(
operator|(
name|WrappedMessageContext
operator|)
name|context
operator|)
operator|.
name|getWrappedMap
argument_list|()
else|:
name|context
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// extract from exchange property
name|context
operator|=
operator|(
name|Map
operator|)
name|camelExchange
operator|.
name|getProperty
argument_list|(
name|contextKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|cxfContext
operator|.
name|putAll
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Propagate "
operator|+
name|contextKey
operator|+
literal|" from exchange property context = "
operator|+
operator|(
operator|(
name|context
operator|instanceof
name|WrappedMessageContext
operator|)
condition|?
operator|(
operator|(
name|WrappedMessageContext
operator|)
name|context
operator|)
operator|.
name|getWrappedMap
argument_list|()
else|:
name|context
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// copy camel exchange properties into context
if|if
condition|(
name|camelExchange
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cxfContext
operator|.
name|putAll
argument_list|(
name|camelExchange
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|camelExchange
operator|.
name|setProperty
argument_list|(
name|contextKey
argument_list|,
name|cxfContext
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param cxfMessage      * @param camelMessage      * @param exchange provides context for filtering      */
DECL|method|propagateHeadersFromCxfToCamel (Message cxfMessage, org.apache.camel.Message camelMessage, Exchange exchange)
specifier|protected
name|void
name|propagateHeadersFromCxfToCamel
parameter_list|(
name|Message
name|cxfMessage
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|camelMessage
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|cxfHeaders
init|=
operator|(
name|Map
operator|)
name|cxfMessage
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|camelHeaders
init|=
name|camelMessage
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
if|if
condition|(
name|cxfHeaders
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|cxfHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|camelHeaders
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Populate header from CXF header="
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" value="
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// propagate SOAP/protocol header list
name|String
name|key
init|=
name|Header
operator|.
name|HEADER_LIST
decl_stmt|;
name|Object
name|value
init|=
name|cxfMessage
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|camelHeaders
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Populate header from CXF header="
operator|+
name|key
operator|+
literal|" value="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|value
operator|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|propagateHeadersFromCamelToCxf (Exchange camelExchange, Map<String, Object> camelHeaders, org.apache.cxf.message.Exchange cxfExchange, Map<String, Object> cxfContext)
specifier|protected
name|void
name|propagateHeadersFromCamelToCxf
parameter_list|(
name|Exchange
name|camelExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|camelHeaders
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cxfContext
parameter_list|)
block|{
comment|// get cxf transport headers (if any) from camel exchange
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|transportHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|camelExchange
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|h
init|=
operator|(
name|Map
operator|)
name|camelExchange
operator|.
name|getProperty
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
block|{
name|transportHeaders
operator|.
name|putAll
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
init|=
operator|(
name|Map
operator|)
name|camelHeaders
operator|.
name|get
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|transportHeaders
operator|.
name|putAll
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|camelHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// this header should be filtered, continue to the next header
if|if
condition|(
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|camelExchange
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Propagate to CXF header: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" value: "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// put response code in request context so it will be copied to CXF message's property
if|if
condition|(
name|Message
operator|.
name|RESPONSE_CODE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|cxfContext
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// put SOAP/protocol header list in exchange
if|if
condition|(
name|Header
operator|.
name|HEADER_LIST
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Header
argument_list|>
name|headerList
init|=
operator|(
name|List
argument_list|<
name|Header
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headerList
control|)
block|{
name|header
operator|.
name|setDirection
argument_list|(
name|Header
operator|.
name|Direction
operator|.
name|DIRECTION_OUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Propagate SOAP/protocol header: "
operator|+
name|header
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
operator|+
name|header
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//cxfExchange.put(Header.HEADER_LIST, headerList);
name|cxfContext
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|headerList
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// things that are not filtered and not specifically copied will be put in transport headers
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
condition|)
block|{
name|transportHeaders
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|listValue
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|listValue
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|transportHeaders
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|listValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transportHeaders
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cxfContext
operator|.
name|put
argument_list|(
name|Message
operator|.
name|PROTOCOL_HEADERS
argument_list|,
name|transportHeaders
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContentFromCxf (Message message, DataFormat dataFormat)
specifier|protected
specifier|static
name|Object
name|getContentFromCxf
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|contentFormats
init|=
name|message
operator|.
name|getContentFormats
argument_list|()
decl_stmt|;
name|Object
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contentFormats
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|contentFormat
range|:
name|contentFormats
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content format="
operator|+
name|contentFormat
operator|+
literal|" value="
operator|+
name|message
operator|.
name|getContent
argument_list|(
name|contentFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|POJO
condition|)
block|{
name|answer
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|MessageContentsList
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
comment|// TODO handle other message types in the future.  Currently, this binding only
comment|// deal with SOAP in PayLoad mode.
name|List
argument_list|<
name|Element
argument_list|>
name|body
init|=
name|message
operator|.
name|get
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SoapHeader
argument_list|>
name|headers
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|answer
operator|=
operator|new
name|CxfPayload
argument_list|<
name|SoapHeader
argument_list|>
argument_list|(
name|headers
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|MESSAGE
condition|)
block|{
name|answer
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Extracted body from CXF message = "
operator|+
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
DECL|method|getBodyFromCamel (org.apache.camel.Message out, DataFormat dataFormat)
specifier|public
specifier|static
name|Object
name|getBodyFromCamel
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|out
parameter_list|,
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|Object
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|POJO
condition|)
block|{
name|answer
operator|=
name|out
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|answer
operator|=
name|out
operator|.
name|getBody
argument_list|(
name|CxfPayload
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|MESSAGE
condition|)
block|{
name|answer
operator|=
name|out
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|copyJaxWsContext (org.apache.cxf.message.Exchange cxfExchange, Map<String, Object> context)
specifier|public
name|void
name|copyJaxWsContext
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
if|if
condition|(
name|cxfExchange
operator|.
name|getOutMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|outMessage
init|=
name|cxfExchange
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|context
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|outMessage
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|outMessage
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|extractJaxWsContext (org.apache.cxf.message.Exchange cxfExchange, Map<String, Object> context)
specifier|public
name|void
name|extractJaxWsContext
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|inMessage
init|=
name|cxfExchange
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|inMessage
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"javax.xml.ws"
argument_list|)
condition|)
block|{
name|context
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

