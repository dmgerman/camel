begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.transport
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|CamelTransportBase
specifier|public
class|class
name|CamelTransportBase
block|{
DECL|field|template
name|CamelTemplate
argument_list|<
name|Exchange
argument_list|>
name|template
decl_stmt|;
DECL|field|bus
name|Bus
name|bus
decl_stmt|;
DECL|field|endpointInfo
name|EndpointInfo
name|endpointInfo
decl_stmt|;
DECL|field|replyDestination
specifier|private
name|String
name|replyDestination
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|CamelTransportBase (CamelContext camelContext, Bus bus, EndpointInfo endpointInfo, boolean b, String baseBeanNameSuffix)
specifier|public
name|CamelTransportBase
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|EndpointInfo
name|endpointInfo
parameter_list|,
name|boolean
name|b
parameter_list|,
name|String
name|baseBeanNameSuffix
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|this
operator|.
name|endpointInfo
operator|=
name|endpointInfo
expr_stmt|;
name|this
operator|.
name|template
operator|=
operator|new
name|CamelTemplate
argument_list|<
name|Exchange
argument_list|>
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
block|}
DECL|method|populateIncomingContext (Exchange exchange, MessageImpl inMessage, String camelServerRequestHeaders)
specifier|public
name|void
name|populateIncomingContext
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|MessageImpl
name|inMessage
parameter_list|,
name|String
name|camelServerRequestHeaders
parameter_list|)
block|{      }
DECL|method|getReplyDestination ()
specifier|public
name|String
name|getReplyDestination
parameter_list|()
block|{
return|return
name|replyDestination
return|;
block|}
DECL|method|setMessageProperties (Message inMessage, Exchange reply)
specifier|public
name|void
name|setMessageProperties
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Exchange
name|reply
parameter_list|)
block|{      }
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|template
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|template
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing?
comment|// TODO
block|}
block|}
block|}
comment|/**      * Populates a Camel exchange with a payload      *       * @param payload the message payload, expected to be either of type String      *                or byte[] depending on payload type      * @param replyTo the ReplyTo destination if any      * @param exchange the underlying exchange to marshal to      */
DECL|method|marshal (Object payload, String replyTo, Exchange exchange)
specifier|protected
name|void
name|marshal
parameter_list|(
name|Object
name|payload
parameter_list|,
name|String
name|replyTo
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|payload
argument_list|)
expr_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|CamelConstants
operator|.
name|CAMEL_CORRELATION_ID
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unmarshal the payload of an incoming message.      */
DECL|method|unmarshal (Exchange exchange)
specifier|public
name|byte
index|[]
name|unmarshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
return|;
block|}
comment|/*      * protected CamelMessageHeadersType      * populateIncomingContext(javax.camel.Message message,      * org.apache.cxf.message.Message inMessage, String headerType) throws      * CamelException { CamelMessageHeadersType headers = null; headers =      * (CamelMessageHeadersType)inMessage.get(headerType); if (headers == null) {      * headers = new CamelMessageHeadersType(); inMessage.put(headerType,      * headers); }      * headers.setCamelCorrelationID(message.getCamelCorrelationID());      * headers.setCamelDeliveryMode(new      * Integer(message.getCamelDeliveryMode())); headers.setCamelExpiration(new      * Long(message.getCamelExpiration()));      * headers.setCamelMessageID(message.getCamelMessageID());      * headers.setCamelPriority(new Integer(message.getCamelPriority()));      * headers.setCamelRedelivered(Boolean.valueOf(message.getCamelRedelivered()));      * headers.setCamelTimeStamp(new Long(message.getCamelTimestamp()));      * headers.setCamelType(message.getCamelType()); List<CamelPropertyType>      * props = headers.getProperty(); Enumeration enm =      * message.getPropertyNames(); while (enm.hasMoreElements()) { String name =      * (String)enm.nextElement(); String val = message.getStringProperty(name);      * CamelPropertyType prop = new CamelPropertyType(); prop.setName(name);      * prop.setValue(val); props.add(prop); } return headers; } protected int      * getCamelDeliveryMode(CamelMessageHeadersType headers) { int deliveryMode =      * Message.DEFAULT_DELIVERY_MODE; if (headers != null&&      * headers.isSetCamelDeliveryMode()) { deliveryMode =      * headers.getCamelDeliveryMode(); } return deliveryMode; } protected int      * getCamelPriority(CamelMessageHeadersType headers) { int priority =      * Message.DEFAULT_PRIORITY; if (headers != null&&      * headers.isSetCamelPriority()) { priority = headers.getCamelPriority(); }      * return priority; } protected long getTimeToLive(CamelMessageHeadersType      * headers) { long ttl = -1; if (headers != null&&      * headers.isSetTimeToLive()) { ttl = headers.getTimeToLive(); } return ttl; }      * protected String getCorrelationId(CamelMessageHeadersType headers) {      * String correlationId = null; if (headers != null&&      * headers.isSetCamelCorrelationID()) { correlationId =      * headers.getCamelCorrelationID(); } return correlationId; } protected      * String getAddrUriFromCamelAddrPolicy() { AddressType camelAddressPolicy =      * transport.getCamelAddress(); return "camel:" +      * camelAddressPolicy.getJndiConnectionFactoryName() + "#" +      * camelAddressPolicy.getJndiDestinationName(); } protected String      * getReplyTotAddrUriFromCamelAddrPolicy() { AddressType camelAddressPolicy =      * transport.getCamelAddress(); return "camel:" +      * camelAddressPolicy.getJndiConnectionFactoryName() + "#" +      * camelAddressPolicy.getJndiReplyDestinationName(); } protected boolean      * isDestinationStyleQueue() { return CamelConstants.CAMEL_QUEUE.equals(      * transport.getCamelAddress().getDestinationStyle().value()); }      */
block|}
end_class

end_unit

