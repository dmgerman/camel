begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_comment
comment|/**  * A Consumer of exchanges for a service in CXF.  CxfConsumer acts a CXF  * service to receive requests, convert them, and forward them to Camel   * route for processing. It is also responsible for converting and sending  * back responses to CXF client.  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|CxfConsumer
specifier|public
class|class
name|CxfConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CxfConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|method|CxfConsumer (CxfEndpoint endpoint, Processor processor)
specifier|public
name|CxfConsumer
parameter_list|(
name|CxfEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
comment|// create server
name|ServerFactoryBean
name|svrBean
init|=
name|endpoint
operator|.
name|createServerFactoryBean
argument_list|()
decl_stmt|;
name|svrBean
operator|.
name|setInvoker
argument_list|(
operator|new
name|Invoker
argument_list|()
block|{
comment|// we receive a CXF request when this method is called
specifier|public
name|Object
name|invoke
parameter_list|(
name|Exchange
name|cxfExchange
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received CXF Request: "
operator|+
name|cxfExchange
argument_list|)
expr_stmt|;
block|}
comment|// get CXF binding
name|CxfEndpoint
name|endpoint
init|=
operator|(
name|CxfEndpoint
operator|)
name|getEndpoint
argument_list|()
decl_stmt|;
name|CxfBinding
name|binding
init|=
name|endpoint
operator|.
name|getCxfBinding
argument_list|()
decl_stmt|;
comment|// create a Camel exchange
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|DataFormat
name|dataFormat
init|=
name|endpoint
operator|.
name|getDataFormat
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|cxfExchange
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
comment|// make sure the "boi" is remained as wrapped in PAYLOAD mode
if|if
condition|(
name|dataFormat
operator|==
name|DataFormat
operator|.
name|PAYLOAD
operator|&&
name|boi
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|boi
operator|=
name|boi
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
name|cxfExchange
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boi
operator|!=
literal|null
condition|)
block|{
name|camelExchange
operator|.
name|setProperty
argument_list|(
name|BindingOperationInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|boi
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set exchange property: BindingOperationInfo: "
operator|+
name|boi
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set data format mode in Camel exchange
name|camelExchange
operator|.
name|setProperty
argument_list|(
name|CxfConstants
operator|.
name|DATA_FORMAT_PROPERTY
argument_list|,
name|dataFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Set Exchange property: "
operator|+
name|DataFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|dataFormat
argument_list|)
expr_stmt|;
block|}
comment|// bind the CXF request into a Camel exchange
name|binding
operator|.
name|populateExchangeFromCxfRequest
argument_list|(
name|cxfExchange
argument_list|,
name|camelExchange
argument_list|)
expr_stmt|;
comment|// extract the javax.xml.ws header
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|binding
operator|.
name|extractJaxWsContext
argument_list|(
name|cxfExchange
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// send Camel exchange to the target processor
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing +++ START +++"
argument_list|)
expr_stmt|;
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|camelExchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing +++ END +++"
argument_list|)
expr_stmt|;
name|checkFailure
argument_list|(
name|camelExchange
argument_list|)
expr_stmt|;
comment|// bind the Camel response into a CXF response
if|if
condition|(
name|camelExchange
operator|.
name|getPattern
argument_list|()
operator|.
name|isOutCapable
argument_list|()
condition|)
block|{
name|binding
operator|.
name|populateCxfResponseFromExchange
argument_list|(
name|camelExchange
argument_list|,
name|cxfExchange
argument_list|)
expr_stmt|;
block|}
comment|// check failure again as fault could be discovered by converter
name|checkFailure
argument_list|(
name|camelExchange
argument_list|)
expr_stmt|;
comment|// copy the headers javax.xml.ws header back
name|binding
operator|.
name|copyJaxWsContext
argument_list|(
name|cxfExchange
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// response should have been set in outMessage's content
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|checkFailure
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|camelExchange
operator|.
name|isFailed
argument_list|()
condition|)
block|{
comment|// either Fault or Exception
name|Throwable
name|t
init|=
operator|(
name|camelExchange
operator|.
name|hasOut
argument_list|()
operator|&&
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|isFault
argument_list|()
operator|)
condition|?
operator|(
name|Throwable
operator|)
name|camelExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
else|:
name|camelExchange
operator|.
name|getException
argument_list|()
decl_stmt|;
throw|throw
operator|(
name|t
operator|instanceof
name|Fault
operator|)
condition|?
operator|(
name|Fault
operator|)
name|t
else|:
operator|new
name|Fault
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|server
operator|=
name|svrBean
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getServer ()
specifier|public
name|Server
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
block|}
end_class

end_unit

