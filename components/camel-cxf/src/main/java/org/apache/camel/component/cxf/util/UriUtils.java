begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_class
DECL|class|UriUtils
specifier|public
specifier|final
class|class
name|UriUtils
block|{
DECL|method|UriUtils ()
specifier|private
name|UriUtils
parameter_list|()
block|{
comment|// not constructred
block|}
DECL|method|getWsdlUrl (final URI uri)
specifier|static
name|URL
name|getWsdlUrl
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|URL
name|wsdlUrl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|CxfConstants
operator|.
name|PROTOCOL_NAME_RES
argument_list|)
condition|)
block|{
if|if
condition|(
name|uri
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|path
init|=
name|uri
operator|.
name|isAbsolute
argument_list|()
condition|?
name|getRelativePath
argument_list|(
name|uri
argument_list|)
else|:
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|wsdlUrl
operator|=
name|ClassLoaderUtils
operator|.
name|getResource
argument_list|(
name|path
argument_list|,
name|UriUtils
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|wsdlUrl
operator|=
operator|new
name|URL
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|uri
operator|.
name|getHost
argument_list|()
argument_list|,
name|uri
operator|.
name|getPort
argument_list|()
argument_list|,
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|wsdlUrl
return|;
block|}
DECL|method|getRelativePath (URI uri)
specifier|private
specifier|static
name|String
name|getRelativePath
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|URI
name|base
init|=
literal|null
decl_stmt|;
try|try
block|{
name|base
operator|=
operator|new
name|URI
argument_list|(
name|CxfConstants
operator|.
name|PROTOCOL_NAME_RES
argument_list|,
literal|""
argument_list|,
literal|"/"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// this shouldn't fail
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|base
operator|.
name|relativize
argument_list|(
name|uri
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

