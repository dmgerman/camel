begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|LoggingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_class
DECL|class|RsServerBlueprintBean
specifier|public
class|class
name|RsServerBlueprintBean
extends|extends
name|JAXRSServerFactoryBean
implements|implements
name|BlueprintSupport
implements|,
name|Cloneable
block|{
DECL|field|blueprintContainer
specifier|private
name|BlueprintContainer
name|blueprintContainer
decl_stmt|;
DECL|field|bundleContext
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
DECL|field|loggingFeature
specifier|private
name|LoggingFeature
name|loggingFeature
decl_stmt|;
DECL|field|loggingSizeLimit
specifier|private
name|int
name|loggingSizeLimit
decl_stmt|;
DECL|method|getBlueprintContainer ()
specifier|public
name|BlueprintContainer
name|getBlueprintContainer
parameter_list|()
block|{
return|return
name|blueprintContainer
return|;
block|}
DECL|method|setBlueprintContainer (BlueprintContainer blueprintContainer)
specifier|public
name|void
name|setBlueprintContainer
parameter_list|(
name|BlueprintContainer
name|blueprintContainer
parameter_list|)
block|{
name|this
operator|.
name|blueprintContainer
operator|=
name|blueprintContainer
expr_stmt|;
block|}
DECL|method|getBundleContext ()
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
DECL|method|setBundleContext (BundleContext bundleContext)
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
DECL|method|isLoggingFeatureEnabled ()
specifier|public
name|boolean
name|isLoggingFeatureEnabled
parameter_list|()
block|{
return|return
name|loggingFeature
operator|!=
literal|null
return|;
block|}
DECL|method|setLoggingFeatureEnabled (boolean loggingFeatureEnabled)
specifier|public
name|void
name|setLoggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
if|if
condition|(
name|loggingFeature
operator|!=
literal|null
condition|)
block|{
name|getFeatures
argument_list|()
operator|.
name|remove
argument_list|(
name|loggingFeature
argument_list|)
expr_stmt|;
name|loggingFeature
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|loggingFeatureEnabled
condition|)
block|{
if|if
condition|(
name|getLoggingSizeLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|loggingFeature
operator|=
operator|new
name|LoggingFeature
argument_list|(
name|getLoggingSizeLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loggingFeature
operator|=
operator|new
name|LoggingFeature
argument_list|()
expr_stmt|;
block|}
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|loggingFeature
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLoggingSizeLimit ()
specifier|public
name|int
name|getLoggingSizeLimit
parameter_list|()
block|{
return|return
name|loggingSizeLimit
return|;
block|}
DECL|method|setLoggingSizeLimit (int loggingSizeLimit)
specifier|public
name|void
name|setLoggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|this
operator|.
name|loggingSizeLimit
operator|=
name|loggingSizeLimit
expr_stmt|;
if|if
condition|(
name|loggingFeature
operator|!=
literal|null
condition|)
block|{
name|getFeatures
argument_list|()
operator|.
name|remove
argument_list|(
name|loggingFeature
argument_list|)
expr_stmt|;
if|if
condition|(
name|loggingSizeLimit
operator|>
literal|0
condition|)
block|{
name|loggingFeature
operator|=
operator|new
name|LoggingFeature
argument_list|(
name|loggingSizeLimit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loggingFeature
operator|=
operator|new
name|LoggingFeature
argument_list|()
expr_stmt|;
block|}
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|loggingFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

