begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * A consumer of exchanges for a service in CXF  *   * @version $Revision$  */
end_comment

begin_class
DECL|class|CxfInvokeConsumer
specifier|public
class|class
name|CxfInvokeConsumer
extends|extends
name|DefaultConsumer
argument_list|<
name|CxfExchange
argument_list|>
block|{
DECL|field|cxfEndpoint
specifier|protected
name|CxfInvokeEndpoint
name|cxfEndpoint
decl_stmt|;
DECL|field|server
specifier|private
name|ServerImpl
name|server
decl_stmt|;
DECL|method|CxfInvokeConsumer (CxfInvokeEndpoint endpoint, Processor processor)
specifier|public
name|CxfInvokeConsumer
parameter_list|(
name|CxfInvokeEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|cxfEndpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
comment|// TODO we need to add custom cxf message observer and wire the
comment|// incomingCxfMessage method. Also, custom cxf interceptors are
comment|// needed in order to object SOAP/XML message. Currently, the
comment|// CXF service invoker will invoke the service class.
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
comment|// start a cxf service
name|ServerFactoryBean
name|svrBean
init|=
operator|new
name|ServerFactoryBean
argument_list|()
decl_stmt|;
name|svrBean
operator|.
name|setAddress
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|svrBean
operator|.
name|setServiceClass
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|cxfEndpoint
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|IMPL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|svrBean
operator|.
name|setBus
argument_list|(
name|cxfEndpoint
operator|.
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
operator|(
name|ServerImpl
operator|)
name|svrBean
operator|.
name|create
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
comment|// TODO this method currently is not being called.
DECL|method|incomingCxfMessage (Message message)
specifier|protected
name|void
name|incomingCxfMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|CxfExchange
name|exchange
init|=
name|cxfEndpoint
operator|.
name|createExchange
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: what do do if we are getting processing errors from camel?
comment|// Shutdown?
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

