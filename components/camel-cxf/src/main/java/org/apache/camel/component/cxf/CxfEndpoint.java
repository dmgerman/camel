begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|header
operator|.
name|CxfHeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|feature
operator|.
name|CXFMessageDataFormatFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|feature
operator|.
name|PayLoadDataFormatFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|feature
operator|.
name|RAWDataFormatFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SynchronousDelegateProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|ResourceInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ModCountCopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|source
operator|.
name|SourceDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|LoggingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractLoggingInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|context
operator|.
name|WebServiceContextResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|handler
operator|.
name|AnnotationHandlerChainBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsEndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|support
operator|.
name|JaxWsServiceFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|logging
operator|.
name|FaultListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|DefaultResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Defines the<a href="http://camel.apache.org/cxf.html">CXF Endpoint</a>.  * It contains a list of properties for CXF endpoint including {@link DataFormat},  * {@link CxfBinding}, and {@link HeaderFilterStrategy}.  The default DataFormat  * mode is {@link DataFormat#POJO}.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"cxf"
argument_list|,
name|title
operator|=
literal|"CXF"
argument_list|,
name|syntax
operator|=
literal|"cxf:beanId:address"
argument_list|,
name|consumerClass
operator|=
name|CxfConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"soap,webservice"
argument_list|)
DECL|class|CxfEndpoint
specifier|public
class|class
name|CxfEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|HeaderFilterStrategyAware
implements|,
name|Service
implements|,
name|Cloneable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CxfEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UriPath
DECL|field|bus
specifier|protected
name|Bus
name|bus
decl_stmt|;
DECL|field|getBusHasBeenCalled
specifier|private
name|AtomicBoolean
name|getBusHasBeenCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|createBus
specifier|private
specifier|volatile
name|boolean
name|createBus
decl_stmt|;
DECL|field|bindingConfig
specifier|private
name|BindingConfiguration
name|bindingConfig
decl_stmt|;
DECL|field|dataBinding
specifier|private
name|DataBinding
name|dataBinding
decl_stmt|;
DECL|field|serviceFactoryBean
specifier|private
name|Object
name|serviceFactoryBean
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
DECL|field|in
specifier|private
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|in
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|out
specifier|private
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|out
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|outFault
specifier|private
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|outFault
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|inFault
specifier|private
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|inFault
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|features
specifier|private
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|handlers
specifier|private
name|List
argument_list|<
name|Handler
argument_list|>
name|handlers
decl_stmt|;
DECL|field|schemaLocations
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|schemaLocations
decl_stmt|;
DECL|field|transportId
specifier|private
name|String
name|transportId
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"To lookup an existing configured CxfEndpoint. Must used bean: as prefix."
argument_list|)
DECL|field|beanId
specifier|private
name|String
name|beanId
decl_stmt|;
annotation|@
name|UriPath
DECL|field|address
specifier|private
name|String
name|address
decl_stmt|;
annotation|@
name|UriParam
DECL|field|wsdlURL
specifier|private
name|String
name|wsdlURL
decl_stmt|;
DECL|field|serviceClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|name
operator|=
literal|"portName"
argument_list|)
DECL|field|portNameString
specifier|private
name|String
name|portNameString
decl_stmt|;
DECL|field|portName
specifier|private
name|QName
name|portName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|name
operator|=
literal|"serviceName"
argument_list|)
DECL|field|serviceNameString
specifier|private
name|String
name|serviceNameString
decl_stmt|;
DECL|field|serviceName
specifier|private
name|QName
name|serviceName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|defaultOperationName
specifier|private
name|String
name|defaultOperationName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|defaultOperationNamespace
specifier|private
name|String
name|defaultOperationNamespace
decl_stmt|;
annotation|@
name|UriParam
DECL|field|wrapped
specifier|private
name|boolean
name|wrapped
decl_stmt|;
annotation|@
name|UriParam
DECL|field|wrappedStyle
specifier|private
name|Boolean
name|wrappedStyle
decl_stmt|;
annotation|@
name|UriParam
DECL|field|allowStreaming
specifier|private
name|Boolean
name|allowStreaming
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"POJO"
argument_list|)
DECL|field|dataFormat
specifier|private
name|DataFormat
name|dataFormat
init|=
name|DataFormat
operator|.
name|POJO
decl_stmt|;
annotation|@
name|UriParam
DECL|field|publishedEndpointUrl
specifier|private
name|String
name|publishedEndpointUrl
decl_stmt|;
annotation|@
name|UriParam
DECL|field|cxfBinding
specifier|private
name|CxfBinding
name|cxfBinding
decl_stmt|;
annotation|@
name|UriParam
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
annotation|@
name|UriParam
DECL|field|defaultBus
specifier|private
name|boolean
name|defaultBus
decl_stmt|;
annotation|@
name|UriParam
DECL|field|loggingFeatureEnabled
specifier|private
name|boolean
name|loggingFeatureEnabled
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|""
operator|+
name|AbstractLoggingInterceptor
operator|.
name|DEFAULT_LIMIT
argument_list|)
DECL|field|loggingSizeLimit
specifier|private
name|int
name|loggingSizeLimit
decl_stmt|;
annotation|@
name|UriParam
DECL|field|mtomEnabled
specifier|private
name|boolean
name|mtomEnabled
decl_stmt|;
annotation|@
name|UriParam
DECL|field|skipPayloadMessagePartCheck
specifier|private
name|boolean
name|skipPayloadMessagePartCheck
decl_stmt|;
annotation|@
name|UriParam
DECL|field|skipFaultLogging
specifier|private
name|boolean
name|skipFaultLogging
decl_stmt|;
annotation|@
name|UriParam
DECL|field|mergeProtocolHeaders
specifier|private
name|boolean
name|mergeProtocolHeaders
decl_stmt|;
annotation|@
name|UriParam
DECL|field|bindingId
specifier|private
name|String
name|bindingId
decl_stmt|;
annotation|@
name|UriParam
DECL|field|cxfEndpointConfigurer
specifier|private
name|CxfEndpointConfigurer
name|cxfEndpointConfigurer
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"30000"
argument_list|)
DECL|field|continuationTimeout
specifier|private
name|long
name|continuationTimeout
init|=
literal|30000
decl_stmt|;
annotation|@
name|UriParam
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|UriParam
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|method|CxfEndpoint ()
specifier|public
name|CxfEndpoint
parameter_list|()
block|{     }
DECL|method|CxfEndpoint (String remaining, CxfComponent cxfComponent)
specifier|public
name|CxfEndpoint
parameter_list|(
name|String
name|remaining
parameter_list|,
name|CxfComponent
name|cxfComponent
parameter_list|)
block|{
name|super
argument_list|(
name|remaining
argument_list|,
name|cxfComponent
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|CxfEndpoint (String remaining, CamelContext context)
specifier|public
name|CxfEndpoint
parameter_list|(
name|String
name|remaining
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|remaining
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
DECL|method|CxfEndpoint (String remaining)
specifier|public
name|CxfEndpoint
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|super
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|CxfEndpoint
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|CxfEndpoint
operator|)
name|this
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|// This method is for CxfComponent setting the EndpointUri
DECL|method|updateEndpointUri (String endpointUri)
specifier|protected
name|void
name|updateEndpointUri
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|super
operator|.
name|setEndpointUri
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|endpointUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|Producer
name|answer
init|=
operator|new
name|CxfProducer
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSynchronous
argument_list|()
condition|)
block|{
return|return
operator|new
name|SynchronousDelegateProducer
argument_list|(
name|answer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|answer
return|;
block|}
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|CxfConsumer
name|answer
init|=
operator|new
name|CxfConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Populate server factory bean      */
DECL|method|setupServerFactoryBean (ServerFactoryBean sfb, Class<?> cls)
specifier|protected
name|void
name|setupServerFactoryBean
parameter_list|(
name|ServerFactoryBean
name|sfb
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
comment|// address
name|sfb
operator|.
name|setAddress
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setServiceClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setInInterceptors
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setOutInterceptors
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setOutFaultInterceptors
argument_list|(
name|outFault
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setInFaultInterceptors
argument_list|(
name|inFault
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setFeatures
argument_list|(
name|features
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaLocations
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setSchemaLocations
argument_list|(
name|schemaLocations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bindingConfig
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setBindingConfig
argument_list|(
name|bindingConfig
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataBinding
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceFactoryBean
operator|!=
literal|null
condition|)
block|{
name|setServiceFactory
argument_list|(
name|sfb
argument_list|,
name|serviceFactoryBean
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sfb
operator|instanceof
name|JaxWsServerFactoryBean
operator|&&
name|handlers
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|JaxWsServerFactoryBean
operator|)
name|sfb
operator|)
operator|.
name|setHandlers
argument_list|(
name|handlers
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getTransportId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setTransportId
argument_list|(
name|getTransportId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getBindingId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setBindingId
argument_list|(
name|getBindingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// wsdl url
if|if
condition|(
name|getWsdlURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setWsdlURL
argument_list|(
name|getWsdlURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// service  name qname
if|if
condition|(
name|getServiceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setServiceName
argument_list|(
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// port qname
if|if
condition|(
name|getPortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setEndpointName
argument_list|(
name|getPortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// apply feature here
if|if
condition|(
operator|!
name|CxfEndpointUtils
operator|.
name|hasAnnotation
argument_list|(
name|cls
argument_list|,
name|WebServiceProvider
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|PayLoadDataFormatFeature
argument_list|(
name|allowStreaming
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|dealias
argument_list|()
operator|==
name|DataFormat
operator|.
name|CXF_MESSAGE
condition|)
block|{
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|CXFMessageDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setDataBinding
argument_list|(
operator|new
name|SourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|dealias
argument_list|()
operator|==
name|DataFormat
operator|.
name|RAW
condition|)
block|{
name|RAWDataFormatFeature
name|feature
init|=
operator|new
name|RAWDataFormatFeature
argument_list|()
decl_stmt|;
name|feature
operator|.
name|addInIntercepters
argument_list|(
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|feature
operator|.
name|addOutInterceptors
argument_list|(
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignore DataFormat mode {} since SEI class is annotated with WebServiceProvider"
argument_list|,
name|getDataFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLoggingFeatureEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|getLoggingSizeLimit
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|(
name|getLoggingSizeLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|sfb
operator|.
name|setDataBinding
argument_list|(
operator|new
name|HybridSourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set the document-literal wrapped style
if|if
condition|(
name|getWrappedStyle
argument_list|()
operator|!=
literal|null
operator|&&
name|getDataFormat
argument_list|()
operator|.
name|dealias
argument_list|()
operator|!=
name|DataFormat
operator|.
name|CXF_MESSAGE
condition|)
block|{
name|setWrapped
argument_list|(
name|sfb
argument_list|,
name|getWrappedStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// any optional properties
if|if
condition|(
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sfb
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// add to existing properties
name|sfb
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sfb
operator|.
name|setProperties
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"ServerFactoryBean: {} added properties: {}"
argument_list|,
name|sfb
argument_list|,
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSkipPayloadMessagePartCheck
argument_list|()
condition|)
block|{
if|if
condition|(
name|sfb
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sfb
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sfb
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"soap.no.validate.parts"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSkipFaultLogging
argument_list|()
condition|)
block|{
if|if
condition|(
name|sfb
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sfb
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sfb
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|FaultListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|NullFaultListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sfb
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setStart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCxfEndpointConfigurer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getCxfEndpointConfigurer
argument_list|()
operator|.
name|configure
argument_list|(
name|sfb
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Create a client factory bean object.  Notice that the serviceClass<b>must</b> be      * an interface.      */
DECL|method|createClientFactoryBean (Class<?> cls)
specifier|protected
name|ClientFactoryBean
name|createClientFactoryBean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
throws|throws
name|CamelException
block|{
if|if
condition|(
name|CxfEndpointUtils
operator|.
name|hasWebServiceAnnotation
argument_list|(
name|cls
argument_list|)
condition|)
block|{
return|return
operator|new
name|JaxWsClientFactoryBean
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Client
name|createClient
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
return|return
operator|new
name|CamelCxfClientImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|ep
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|ClientFactoryBean
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Client
name|createClient
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
return|return
operator|new
name|CamelCxfClientImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|ep
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|/**      * Create a client factory bean object without serviceClass interface.      */
DECL|method|createClientFactoryBean ()
specifier|protected
name|ClientFactoryBean
name|createClientFactoryBean
parameter_list|()
block|{
name|ClientFactoryBean
name|cf
init|=
operator|new
name|ClientFactoryBean
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Client
name|createClient
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
return|return
operator|new
name|CamelCxfClientImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|ep
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeAnnotationInterceptors
parameter_list|(
name|Endpoint
name|ep
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
comment|// Do nothing here
block|}
block|}
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|cf
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"setServiceFactory"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Set Object class as the service class of WSDLServiceFactoryBean
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m
argument_list|)
operator|.
name|invoke
argument_list|(
name|cf
argument_list|,
operator|new
name|WSDLServiceFactoryBean
argument_list|(
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|cf
return|;
block|}
DECL|method|setupHandlers (ClientFactoryBean factoryBean, Client client)
specifier|protected
name|void
name|setupHandlers
parameter_list|(
name|ClientFactoryBean
name|factoryBean
parameter_list|,
name|Client
name|client
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|factoryBean
operator|instanceof
name|JaxWsClientFactoryBean
operator|&&
name|handlers
operator|!=
literal|null
condition|)
block|{
name|AnnotationHandlerChainBuilder
name|builder
init|=
operator|new
name|AnnotationHandlerChainBuilder
argument_list|()
decl_stmt|;
name|Method
name|m
init|=
name|factoryBean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getServiceFactory"
argument_list|)
decl_stmt|;
name|JaxWsServiceFactoryBean
name|sf
init|=
operator|(
name|JaxWsServiceFactoryBean
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|factoryBean
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Handler
argument_list|>
name|chain
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|>
argument_list|(
name|handlers
argument_list|)
decl_stmt|;
name|chain
operator|.
name|addAll
argument_list|(
name|builder
operator|.
name|buildHandlerChainFromClass
argument_list|(
name|sf
operator|.
name|getServiceClass
argument_list|()
argument_list|,
name|sf
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|sf
operator|.
name|getServiceQName
argument_list|()
argument_list|,
name|factoryBean
operator|.
name|getBindingId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|chain
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResourceManager
name|resourceManager
init|=
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|resolvers
init|=
name|resourceManager
operator|.
name|getResourceResolvers
argument_list|()
decl_stmt|;
name|resourceManager
operator|=
operator|new
name|DefaultResourceManager
argument_list|(
name|resolvers
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|addResourceResolver
argument_list|(
operator|new
name|WebServiceContextResourceResolver
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceInjector
name|injector
init|=
operator|new
name|ResourceInjector
argument_list|(
name|resourceManager
argument_list|)
decl_stmt|;
for|for
control|(
name|Handler
argument_list|<
name|?
argument_list|>
name|h
range|:
name|chain
control|)
block|{
if|if
condition|(
name|Proxy
operator|.
name|isProxyClass
argument_list|(
name|h
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|getServiceClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|injector
operator|.
name|inject
argument_list|(
name|h
argument_list|,
name|getServiceClass
argument_list|()
argument_list|)
expr_stmt|;
name|injector
operator|.
name|construct
argument_list|(
name|h
argument_list|,
name|getServiceClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|injector
operator|.
name|inject
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|injector
operator|.
name|construct
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|(
operator|(
name|JaxWsEndpointImpl
operator|)
name|client
operator|.
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getJaxwsBinding
argument_list|()
operator|.
name|setHandlerChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupClientFactoryBean (ClientFactoryBean factoryBean, Class<?> cls)
specifier|protected
name|void
name|setupClientFactoryBean
parameter_list|(
name|ClientFactoryBean
name|factoryBean
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setServiceClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
name|factoryBean
operator|.
name|setInInterceptors
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setOutInterceptors
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setOutFaultInterceptors
argument_list|(
name|outFault
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setInFaultInterceptors
argument_list|(
name|inFault
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setFeatures
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setTransportId
argument_list|(
name|transportId
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setBindingId
argument_list|(
name|bindingId
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindingConfig
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setBindingConfig
argument_list|(
name|bindingConfig
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataBinding
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setDataBinding
argument_list|(
name|dataBinding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceFactoryBean
operator|!=
literal|null
condition|)
block|{
name|setServiceFactory
argument_list|(
name|factoryBean
argument_list|,
name|serviceFactoryBean
argument_list|)
expr_stmt|;
block|}
comment|// address
name|factoryBean
operator|.
name|setAddress
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// wsdl url
if|if
condition|(
name|getWsdlURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setWsdlURL
argument_list|(
name|getWsdlURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// service name qname
if|if
condition|(
name|getServiceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setServiceName
argument_list|(
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// port name qname
if|if
condition|(
name|getPortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setEndpointName
argument_list|(
name|getPortName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// apply feature here
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|dealias
argument_list|()
operator|==
name|DataFormat
operator|.
name|RAW
condition|)
block|{
name|RAWDataFormatFeature
name|feature
init|=
operator|new
name|RAWDataFormatFeature
argument_list|()
decl_stmt|;
name|feature
operator|.
name|addInIntercepters
argument_list|(
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|feature
operator|.
name|addOutInterceptors
argument_list|(
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|dealias
argument_list|()
operator|==
name|DataFormat
operator|.
name|CXF_MESSAGE
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|CXFMessageDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setDataBinding
argument_list|(
operator|new
name|SourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|PayLoadDataFormatFeature
argument_list|(
name|allowStreaming
argument_list|)
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setDataBinding
argument_list|(
operator|new
name|HybridSourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLoggingFeatureEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|getLoggingSizeLimit
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|(
name|getLoggingSizeLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the document-literal wrapped style
if|if
condition|(
name|getWrappedStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|setWrapped
argument_list|(
name|factoryBean
argument_list|,
name|getWrappedStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// any optional properties
if|if
condition|(
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|factoryBean
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// add to existing properties
name|factoryBean
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factoryBean
operator|.
name|setProperties
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"ClientFactoryBean: {} added properties: {}"
argument_list|,
name|factoryBean
argument_list|,
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// setup the basic authentication property
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|AuthorizationPolicy
name|authPolicy
init|=
operator|new
name|AuthorizationPolicy
argument_list|()
decl_stmt|;
name|authPolicy
operator|.
name|setUserName
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|authPolicy
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|authPolicy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSkipPayloadMessagePartCheck
argument_list|()
condition|)
block|{
if|if
condition|(
name|factoryBean
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|factoryBean
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
literal|"soap.no.validate.parts"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|isSkipFaultLogging
argument_list|()
condition|)
block|{
if|if
condition|(
name|factoryBean
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|factoryBean
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|FaultListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|NullFaultListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|factoryBean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getCxfEndpointConfigurer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getCxfEndpointConfigurer
argument_list|()
operator|.
name|configure
argument_list|(
name|factoryBean
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Package private methods
comment|// -------------------------------------------------------------------------
DECL|method|setWrapped (Object factoryBean, boolean wrapped)
specifier|private
name|void
name|setWrapped
parameter_list|(
name|Object
name|factoryBean
parameter_list|,
name|boolean
name|wrapped
parameter_list|)
block|{
try|try
block|{
name|Object
name|sf
init|=
name|factoryBean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getServiceFactory"
argument_list|)
operator|.
name|invoke
argument_list|(
name|factoryBean
argument_list|)
decl_stmt|;
name|sf
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setWrapped"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|sf
argument_list|,
name|wrapped
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|setServiceFactory (Object factoryBean, Object serviceFactoryBean2)
specifier|private
name|void
name|setServiceFactory
parameter_list|(
name|Object
name|factoryBean
parameter_list|,
name|Object
name|serviceFactoryBean2
parameter_list|)
block|{
for|for
control|(
name|Method
name|m
range|:
name|factoryBean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"setServiceFactory"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|isInstance
argument_list|(
name|serviceFactoryBean2
argument_list|)
condition|)
block|{
try|try
block|{
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m
argument_list|)
operator|.
name|invoke
argument_list|(
name|factoryBean
argument_list|,
name|serviceFactoryBean2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Create a CXF client object      */
DECL|method|createClient ()
name|Client
name|createClient
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get service class
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|DataFormat
operator|.
name|POJO
argument_list|)
condition|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getServiceClass
argument_list|()
argument_list|,
name|CxfConstants
operator|.
name|SERVICE_CLASS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getWsdlURL
argument_list|()
operator|==
literal|null
operator|&&
name|getServiceClass
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no WSDL and serviceClass specified, set our default serviceClass
name|setServiceClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|DefaultSEI
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultOperationNamespace
argument_list|(
name|CxfConstants
operator|.
name|DISPATCH_NAMESPACE
argument_list|)
expr_stmt|;
name|setDefaultOperationName
argument_list|(
name|CxfConstants
operator|.
name|DISPATCH_DEFAULT_OPERATION_NAMESPACE
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|DataFormat
operator|.
name|PAYLOAD
argument_list|)
condition|)
block|{
name|setSkipPayloadMessagePartCheck
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getServiceClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cls
operator|=
name|getServiceClass
argument_list|()
expr_stmt|;
comment|// create client factory bean
name|ClientFactoryBean
name|factoryBean
init|=
name|createClientFactoryBean
argument_list|(
name|cls
argument_list|)
decl_stmt|;
comment|// setup client factory bean
name|setupClientFactoryBean
argument_list|(
name|factoryBean
argument_list|,
name|cls
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
name|factoryBean
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// setup the handlers
name|setupHandlers
argument_list|(
name|factoryBean
argument_list|,
name|client
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
else|else
block|{
comment|// create the client without service class
name|checkName
argument_list|(
name|portName
argument_list|,
literal|"endpoint/port name"
argument_list|)
expr_stmt|;
name|checkName
argument_list|(
name|serviceName
argument_list|,
literal|"service name"
argument_list|)
expr_stmt|;
name|ClientFactoryBean
name|factoryBean
init|=
name|createClientFactoryBean
argument_list|()
decl_stmt|;
comment|// setup client factory bean
name|setupClientFactoryBean
argument_list|(
name|factoryBean
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|factoryBean
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|method|checkName (Object value, String name)
name|void
name|checkName
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The "
operator|+
name|name
operator|+
literal|" of "
operator|+
name|this
operator|.
name|getEndpointUri
argument_list|()
operator|+
literal|" is empty, cxf will try to load the first one in wsdl for you."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Create a CXF server factory bean      */
DECL|method|createServerFactoryBean ()
name|ServerFactoryBean
name|createServerFactoryBean
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|POJO
condition|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|getServiceClass
argument_list|()
argument_list|,
name|CxfConstants
operator|.
name|SERVICE_CLASS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getWsdlURL
argument_list|()
operator|==
literal|null
operator|&&
name|getServiceClass
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no WSDL and serviceClass specified, set our default serviceClass
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|DataFormat
operator|.
name|PAYLOAD
argument_list|)
condition|)
block|{
name|setServiceClass
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|DefaultPayloadProviderSEI
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getServiceClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cls
operator|=
name|getServiceClass
argument_list|()
expr_stmt|;
block|}
comment|// create server factory bean
comment|// Shouldn't use CxfEndpointUtils.getServerFactoryBean(cls) as it is for
comment|// CxfSoapComponent
name|ServerFactoryBean
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
name|checkName
argument_list|(
name|portName
argument_list|,
literal|" endpoint/port name"
argument_list|)
expr_stmt|;
name|checkName
argument_list|(
name|serviceName
argument_list|,
literal|" service name"
argument_list|)
expr_stmt|;
name|answer
operator|=
operator|new
name|JaxWsServerFactoryBean
argument_list|(
operator|new
name|WSDLServiceFactoryBean
argument_list|()
argument_list|)
block|{
block|{
name|doInit
operator|=
literal|false
expr_stmt|;
block|}
block|}
expr_stmt|;
name|cls
operator|=
name|Provider
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CxfEndpointUtils
operator|.
name|hasWebServiceAnnotation
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|JaxWsServerFactoryBean
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|ServerFactoryBean
argument_list|()
expr_stmt|;
block|}
comment|// setup server factory bean
name|setupServerFactoryBean
argument_list|(
name|answer
argument_list|,
name|cls
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|resolvePropertyPlaceholders (String str)
specifier|protected
name|String
name|resolvePropertyPlaceholders
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|getCamelContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCamelContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|str
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|str
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getBeanId ()
specifier|public
name|String
name|getBeanId
parameter_list|()
block|{
return|return
name|beanId
return|;
block|}
DECL|method|setBeanId (String beanId)
specifier|public
name|void
name|setBeanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|this
operator|.
name|beanId
operator|=
name|beanId
expr_stmt|;
block|}
DECL|method|getDataFormat ()
specifier|public
name|DataFormat
name|getDataFormat
parameter_list|()
block|{
return|return
name|dataFormat
return|;
block|}
comment|/**      * The data type messages supported by the CXF endpoint.      */
DECL|method|setDataFormat (DataFormat format)
specifier|public
name|void
name|setDataFormat
parameter_list|(
name|DataFormat
name|format
parameter_list|)
block|{
name|dataFormat
operator|=
name|format
expr_stmt|;
block|}
DECL|method|getPublishedEndpointUrl ()
specifier|public
name|String
name|getPublishedEndpointUrl
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|publishedEndpointUrl
argument_list|)
return|;
block|}
comment|/**      * This option can override the endpointUrl that published from the WSDL which can be accessed with service address url plus ?wsd      */
DECL|method|setPublishedEndpointUrl (String url)
specifier|public
name|void
name|setPublishedEndpointUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|publishedEndpointUrl
operator|=
name|url
expr_stmt|;
block|}
DECL|method|getWsdlURL ()
specifier|public
name|String
name|getWsdlURL
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|wsdlURL
argument_list|)
return|;
block|}
comment|/**      * The location of the WSDL. Can be on the classpath, file system, or be hosted remotely.      */
DECL|method|setWsdlURL (String url)
specifier|public
name|void
name|setWsdlURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|wsdlURL
operator|=
name|url
expr_stmt|;
block|}
DECL|method|getServiceClass ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getServiceClass
parameter_list|()
block|{
return|return
name|serviceClass
return|;
block|}
comment|/**      * The class name of the SEI (Service Endpoint Interface) class which could have JSR181 annotation or not.      */
DECL|method|setServiceClass (Class<?> cls)
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|serviceClass
operator|=
name|cls
expr_stmt|;
block|}
comment|/**      * The class name of the SEI (Service Endpoint Interface) class which could have JSR181 annotation or not.      */
DECL|method|setServiceClass (Object instance)
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|serviceClass
operator|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
comment|/**      * The class name of the SEI (Service Endpoint Interface) class which could have JSR181 annotation or not.      */
DECL|method|setServiceClass (String type)
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|type
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The serviceClass option can neither be null nor an empty String."
argument_list|)
throw|;
block|}
name|serviceClass
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|resolvePropertyPlaceholders
argument_list|(
name|type
argument_list|)
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * The service name this service is implementing, it maps to the wsdl:service@name.      */
DECL|method|setServiceNameString (String service)
specifier|public
name|void
name|setServiceNameString
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|serviceNameString
operator|=
name|service
expr_stmt|;
block|}
comment|/**      * The service name this service is implementing, it maps to the wsdl:service@name.      */
DECL|method|setServiceName (QName service)
specifier|public
name|void
name|setServiceName
parameter_list|(
name|QName
name|service
parameter_list|)
block|{
name|serviceName
operator|=
name|service
expr_stmt|;
block|}
comment|/**      * The service name this service is implementing, it maps to the wsdl:service@name.      */
DECL|method|setService (String service)
specifier|public
name|void
name|setService
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|serviceNameString
operator|=
name|service
expr_stmt|;
block|}
DECL|method|getServiceName ()
specifier|public
name|QName
name|getServiceName
parameter_list|()
block|{
if|if
condition|(
name|serviceName
operator|==
literal|null
operator|&&
name|serviceNameString
operator|!=
literal|null
condition|)
block|{
name|serviceName
operator|=
name|QName
operator|.
name|valueOf
argument_list|(
name|resolvePropertyPlaceholders
argument_list|(
name|serviceNameString
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serviceName
return|;
block|}
DECL|method|getPortName ()
specifier|public
name|QName
name|getPortName
parameter_list|()
block|{
if|if
condition|(
name|portName
operator|==
literal|null
operator|&&
name|portNameString
operator|!=
literal|null
condition|)
block|{
name|portName
operator|=
name|QName
operator|.
name|valueOf
argument_list|(
name|resolvePropertyPlaceholders
argument_list|(
name|portNameString
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|portName
return|;
block|}
comment|/**      * The endpoint name this service is implementing, it maps to the wsdl:port@name. In the format of ns:PORT_NAME where ns is a namespace prefix valid at this scope.      */
DECL|method|setPortName (QName port)
specifier|public
name|void
name|setPortName
parameter_list|(
name|QName
name|port
parameter_list|)
block|{
name|portName
operator|=
name|port
expr_stmt|;
block|}
comment|/**      * The endpoint name this service is implementing, it maps to the wsdl:port@name. In the format of ns:PORT_NAME where ns is a namespace prefix valid at this scope.      */
DECL|method|setPortNameString (String portNameString)
specifier|public
name|void
name|setPortNameString
parameter_list|(
name|String
name|portNameString
parameter_list|)
block|{
name|this
operator|.
name|portNameString
operator|=
name|portNameString
expr_stmt|;
block|}
DECL|method|setPortName (String portName)
specifier|public
name|void
name|setPortName
parameter_list|(
name|String
name|portName
parameter_list|)
block|{
name|portNameString
operator|=
name|portName
expr_stmt|;
block|}
comment|/**      * The port name this service is implementing, it maps to the wsdl:port@name.      */
DECL|method|setEndpointNameString (String port)
specifier|public
name|void
name|setEndpointNameString
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|portNameString
operator|=
name|port
expr_stmt|;
block|}
comment|/**      * The port name this service is implementing, it maps to the wsdl:port@name.      */
DECL|method|setEndpointName (QName port)
specifier|public
name|void
name|setEndpointName
parameter_list|(
name|QName
name|port
parameter_list|)
block|{
name|portName
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getDefaultOperationName ()
specifier|public
name|String
name|getDefaultOperationName
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|defaultOperationName
argument_list|)
return|;
block|}
comment|/**      * This option will set the default operationName that will be used by the CxfProducer which invokes the remote service.      */
DECL|method|setDefaultOperationName (String name)
specifier|public
name|void
name|setDefaultOperationName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|defaultOperationName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getDefaultOperationNamespace ()
specifier|public
name|String
name|getDefaultOperationNamespace
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|defaultOperationNamespace
argument_list|)
return|;
block|}
comment|/**      * This option will set the default operationNamespace that will be used by the CxfProducer which invokes the remote service.      */
DECL|method|setDefaultOperationNamespace (String namespace)
specifier|public
name|void
name|setDefaultOperationNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|defaultOperationNamespace
operator|=
name|namespace
expr_stmt|;
block|}
DECL|method|isWrapped ()
specifier|public
name|boolean
name|isWrapped
parameter_list|()
block|{
return|return
name|wrapped
return|;
block|}
comment|/**      * Which kind of operation that CXF endpoint producer will invoke      */
DECL|method|setWrapped (boolean wrapped)
specifier|public
name|void
name|setWrapped
parameter_list|(
name|boolean
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
block|}
DECL|method|getWrappedStyle ()
specifier|public
name|Boolean
name|getWrappedStyle
parameter_list|()
block|{
return|return
name|wrappedStyle
return|;
block|}
comment|/**      * The WSDL style that describes how parameters are represented in the SOAP body.      * If the value is false, CXF will chose the document-literal unwrapped style,      * If the value is true, CXF will chose the document-literal wrapped style      */
DECL|method|setWrappedStyle (Boolean wrapped)
specifier|public
name|void
name|setWrappedStyle
parameter_list|(
name|Boolean
name|wrapped
parameter_list|)
block|{
name|wrappedStyle
operator|=
name|wrapped
expr_stmt|;
block|}
comment|/**      * This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages      * into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.      */
DECL|method|setAllowStreaming (Boolean allowStreaming)
specifier|public
name|void
name|setAllowStreaming
parameter_list|(
name|Boolean
name|allowStreaming
parameter_list|)
block|{
name|this
operator|.
name|allowStreaming
operator|=
name|allowStreaming
expr_stmt|;
block|}
DECL|method|getAllowStreaming ()
specifier|public
name|Boolean
name|getAllowStreaming
parameter_list|()
block|{
return|return
name|allowStreaming
return|;
block|}
comment|/**      * To use a custom CxfBinding to control the binding between Camel Message and CXF Message.      */
DECL|method|setCxfBinding (CxfBinding cxfBinding)
specifier|public
name|void
name|setCxfBinding
parameter_list|(
name|CxfBinding
name|cxfBinding
parameter_list|)
block|{
name|this
operator|.
name|cxfBinding
operator|=
name|cxfBinding
expr_stmt|;
block|}
DECL|method|getCxfBinding ()
specifier|public
name|CxfBinding
name|getCxfBinding
parameter_list|()
block|{
return|return
name|cxfBinding
return|;
block|}
comment|/**      * To use a custom HeaderFilterStrategy to filter header to and from Camel message.      */
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
if|if
condition|(
name|cxfBinding
operator|instanceof
name|HeaderFilterStrategyAware
condition|)
block|{
operator|(
operator|(
name|HeaderFilterStrategyAware
operator|)
name|cxfBinding
operator|)
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|headerFilterStrategy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
comment|/**      * To use a custom configured CXF Bus.      */
DECL|method|setBus (Bus bus)
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|this
operator|.
name|createBus
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getBus ()
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
name|bus
operator|=
name|CxfEndpointUtils
operator|.
name|createBus
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|createBus
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using DefaultBus {}"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getBusHasBeenCalled
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|&&
name|defaultBus
condition|)
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set bus {} as thread default bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
return|return
name|bus
return|;
block|}
comment|/**      * Will set the default bus when CXF endpoint create a bus by itself      */
DECL|method|setDefaultBus (boolean defaultBus)
specifier|public
name|void
name|setDefaultBus
parameter_list|(
name|boolean
name|defaultBus
parameter_list|)
block|{
name|this
operator|.
name|defaultBus
operator|=
name|defaultBus
expr_stmt|;
block|}
DECL|method|isDefaultBus ()
specifier|public
name|boolean
name|isDefaultBus
parameter_list|()
block|{
return|return
name|defaultBus
return|;
block|}
comment|/**      * This option enables CXF Logging Feature which writes inbound and outbound SOAP messages to log.      */
DECL|method|setLoggingFeatureEnabled (boolean loggingFeatureEnabled)
specifier|public
name|void
name|setLoggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|this
operator|.
name|loggingFeatureEnabled
operator|=
name|loggingFeatureEnabled
expr_stmt|;
block|}
DECL|method|isLoggingFeatureEnabled ()
specifier|public
name|boolean
name|isLoggingFeatureEnabled
parameter_list|()
block|{
return|return
name|loggingFeatureEnabled
return|;
block|}
DECL|method|getLoggingSizeLimit ()
specifier|public
name|int
name|getLoggingSizeLimit
parameter_list|()
block|{
return|return
name|loggingSizeLimit
return|;
block|}
comment|/**      * To limit the total size of number of bytes the logger will output when logging feature has been enabled and -1 for no limit.      */
DECL|method|setLoggingSizeLimit (int loggingSizeLimit)
specifier|public
name|void
name|setLoggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
if|if
condition|(
name|loggingSizeLimit
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"LoggingSizeLimit must be greater or equal to -1."
argument_list|)
throw|;
block|}
name|this
operator|.
name|loggingSizeLimit
operator|=
name|loggingSizeLimit
expr_stmt|;
block|}
DECL|method|isSkipPayloadMessagePartCheck ()
specifier|public
name|boolean
name|isSkipPayloadMessagePartCheck
parameter_list|()
block|{
return|return
name|skipPayloadMessagePartCheck
return|;
block|}
comment|/**      * Sets whether SOAP message validation should be disabled.      */
DECL|method|setSkipPayloadMessagePartCheck (boolean skipPayloadMessagePartCheck)
specifier|public
name|void
name|setSkipPayloadMessagePartCheck
parameter_list|(
name|boolean
name|skipPayloadMessagePartCheck
parameter_list|)
block|{
name|this
operator|.
name|skipPayloadMessagePartCheck
operator|=
name|skipPayloadMessagePartCheck
expr_stmt|;
block|}
DECL|method|getProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setCamelContext (CamelContext c)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|c
parameter_list|)
block|{
name|super
operator|.
name|setCamelContext
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|properties
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|EndpointHelper
operator|.
name|setReferenceProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|properties
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|properties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// TODO: Why dont't we rethrown this exception
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error setting CamelContext. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setProperties (Map<String, Object> properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|properties
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getCamelContext
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|properties
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|EndpointHelper
operator|.
name|setReferenceProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|properties
argument_list|)
expr_stmt|;
name|EndpointHelper
operator|.
name|setProperties
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|properties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// TODO: Why dont't we rethrown this exception
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error setting properties. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|headerFilterStrategy
operator|==
literal|null
condition|)
block|{
name|headerFilterStrategy
operator|=
operator|new
name|CxfHeaderFilterStrategy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cxfBinding
operator|==
literal|null
condition|)
block|{
name|cxfBinding
operator|=
operator|new
name|DefaultCxfBinding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cxfBinding
operator|instanceof
name|HeaderFilterStrategyAware
condition|)
block|{
operator|(
operator|(
name|HeaderFilterStrategyAware
operator|)
name|cxfBinding
operator|)
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we should consider to shutdown the bus if the bus is created by cxfEndpoint
if|if
condition|(
name|createBus
operator|&&
name|bus
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"shutdown the bus ... "
operator|+
name|bus
argument_list|)
expr_stmt|;
name|getBus
argument_list|()
operator|.
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// clean up the bus to create a new one if the endpoint is started again
name|bus
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * The service publish address.      */
DECL|method|setAddress (String address)
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|super
operator|.
name|setEndpointUri
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
DECL|method|getAddress ()
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|address
argument_list|)
return|;
block|}
comment|/**      * To enable MTOM (attachments). This requires to use POJO or PAYLOAD data format mode.      */
DECL|method|setMtomEnabled (boolean mtomEnabled)
specifier|public
name|void
name|setMtomEnabled
parameter_list|(
name|boolean
name|mtomEnabled
parameter_list|)
block|{
name|this
operator|.
name|mtomEnabled
operator|=
name|mtomEnabled
expr_stmt|;
block|}
DECL|method|isMtomEnabled ()
specifier|public
name|boolean
name|isMtomEnabled
parameter_list|()
block|{
return|return
name|mtomEnabled
return|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * This option is used to set the basic authentication information of password for the CXF client.      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/**      * This option is used to set the basic authentication information of username for the CXF client.      */
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
comment|/**      * We need to override the {@link ClientImpl#setParameters} method      * to insert parameters into CXF Message for {@link DataFormat#PAYLOAD} mode.      */
DECL|class|CamelCxfClientImpl
class|class
name|CamelCxfClientImpl
extends|extends
name|ClientImpl
block|{
DECL|method|CamelCxfClientImpl (Bus bus, Endpoint ep)
specifier|public
name|CamelCxfClientImpl
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Endpoint
name|ep
parameter_list|)
block|{
name|super
argument_list|(
name|bus
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
DECL|method|getBus ()
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|setParameters (Object[] params, Message message)
specifier|protected
name|void
name|setParameters
parameter_list|(
name|Object
index|[]
name|params
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|Object
name|attachments
init|=
name|message
operator|.
name|get
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_ATTACHMENTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setAttachments
argument_list|(
operator|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
operator|)
name|attachments
argument_list|)
expr_stmt|;
name|message
operator|.
name|remove
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_ATTACHMENTS
argument_list|)
expr_stmt|;
block|}
comment|// Don't try to reset the parameters if the parameter is not CxfPayload instance
comment|// as the setParameter will be called more than once when using the fail over feature
if|if
condition|(
name|DataFormat
operator|.
name|PAYLOAD
operator|==
name|message
operator|.
name|get
argument_list|(
name|DataFormat
operator|.
name|class
argument_list|)
operator|&&
name|params
index|[
literal|0
index|]
operator|instanceof
name|CxfPayload
condition|)
block|{
name|CxfPayload
argument_list|<
name|?
argument_list|>
name|payload
init|=
operator|(
name|CxfPayload
argument_list|<
name|?
argument_list|>
operator|)
name|params
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|Source
argument_list|>
name|elements
init|=
name|payload
operator|.
name|getBodySources
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|message
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|MessageContentsList
name|content
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|partInfo
range|:
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|elements
operator|.
name|size
argument_list|()
operator|>
name|i
condition|)
block|{
if|if
condition|(
name|isSkipPayloadMessagePartCheck
argument_list|()
condition|)
block|{
name|content
operator|.
name|put
argument_list|(
name|partInfo
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|name
init|=
name|findName
argument_list|(
name|elements
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|partInfo
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|content
operator|.
name|put
argument_list|(
name|partInfo
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|elements
operator|!=
literal|null
operator|&&
name|content
operator|.
name|size
argument_list|()
operator|<
name|elements
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The PayLoad elements cannot fit with the message parts of the BindingOperation. Please check the BindingOperation and PayLoadMessage."
argument_list|)
throw|;
block|}
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// merge header list from request context with header list from CXF payload
name|List
argument_list|<
name|Object
argument_list|>
name|headerListOfRequestContxt
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|headerListOfPayload
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|payload
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerListOfRequestContxt
operator|==
name|headerListOfPayload
condition|)
block|{
comment|// == is correct, we want to compare the object instances
comment|// nothing to do, this can happen when the CXF payload is already created in the from-cxf-endpoint and then forwarded to a to-cxf-endpoint
block|}
else|else
block|{
if|if
condition|(
name|headerListOfRequestContxt
operator|==
literal|null
condition|)
block|{
name|message
operator|.
name|put
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|payload
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|headerListOfRequestContxt
operator|.
name|addAll
argument_list|(
name|headerListOfPayload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|super
operator|.
name|setParameters
argument_list|(
name|params
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|remove
argument_list|(
name|DataFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|findName (List<Source> sources, int i)
specifier|private
name|String
name|findName
parameter_list|(
name|List
argument_list|<
name|Source
argument_list|>
name|sources
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|Source
name|source
init|=
name|sources
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|XMLStreamReader
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|DOMSource
condition|)
block|{
name|Node
name|nd
init|=
operator|(
operator|(
name|DOMSource
operator|)
name|source
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
name|nd
operator|=
operator|(
operator|(
name|Document
operator|)
name|nd
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|Element
operator|)
name|nd
operator|)
operator|.
name|getLocalName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StaxSource
condition|)
block|{
name|StaxSource
name|s
init|=
operator|(
name|StaxSource
operator|)
name|source
decl_stmt|;
name|r
operator|=
name|s
operator|.
name|getXMLStreamReader
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StAXSource
condition|)
block|{
name|StAXSource
name|s
init|=
operator|(
name|StAXSource
operator|)
name|source
decl_stmt|;
name|r
operator|=
name|s
operator|.
name|getXMLStreamReader
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StreamSource
operator|||
name|source
operator|instanceof
name|SAXSource
condition|)
block|{
comment|//flip to stax so we can get the name
name|r
operator|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|StaxSource
name|src2
init|=
operator|new
name|StaxSource
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|sources
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|src2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|r
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
condition|)
block|{
name|r
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getEventType
argument_list|()
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
name|r
operator|.
name|nextTag
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|//ignore
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error finding the start element."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|r
operator|.
name|getLocalName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|method|getOutFaultInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutFaultInterceptors
parameter_list|()
block|{
return|return
name|outFault
return|;
block|}
DECL|method|getInFaultInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInFaultInterceptors
parameter_list|()
block|{
return|return
name|inFault
return|;
block|}
DECL|method|getInInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInInterceptors
parameter_list|()
block|{
return|return
name|in
return|;
block|}
DECL|method|getOutInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutInterceptors
parameter_list|()
block|{
return|return
name|out
return|;
block|}
DECL|method|setInInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setInInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|in
operator|=
name|interceptors
expr_stmt|;
block|}
DECL|method|setInFaultInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setInFaultInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|inFault
operator|=
name|interceptors
expr_stmt|;
block|}
DECL|method|setOutInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setOutInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|out
operator|=
name|interceptors
expr_stmt|;
block|}
DECL|method|setOutFaultInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setOutFaultInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|outFault
operator|=
name|interceptors
expr_stmt|;
block|}
DECL|method|setFeatures (List<Feature> f)
specifier|public
name|void
name|setFeatures
parameter_list|(
name|List
argument_list|<
name|Feature
argument_list|>
name|f
parameter_list|)
block|{
name|features
operator|=
name|f
expr_stmt|;
block|}
DECL|method|getFeatures ()
specifier|public
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|setHandlers (List<Handler> h)
specifier|public
name|void
name|setHandlers
parameter_list|(
name|List
argument_list|<
name|Handler
argument_list|>
name|h
parameter_list|)
block|{
name|handlers
operator|=
name|h
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|getHandlers ()
specifier|public
name|List
argument_list|<
name|Handler
argument_list|>
name|getHandlers
parameter_list|()
block|{
return|return
name|handlers
return|;
block|}
DECL|method|setSchemaLocations (List<String> sc)
specifier|public
name|void
name|setSchemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sc
parameter_list|)
block|{
name|schemaLocations
operator|=
name|sc
expr_stmt|;
block|}
DECL|method|getSchemaLocations ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSchemaLocations
parameter_list|()
block|{
return|return
name|schemaLocations
return|;
block|}
DECL|method|getTransportId ()
specifier|public
name|String
name|getTransportId
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|transportId
argument_list|)
return|;
block|}
DECL|method|setTransportId (String transportId)
specifier|public
name|void
name|setTransportId
parameter_list|(
name|String
name|transportId
parameter_list|)
block|{
name|this
operator|.
name|transportId
operator|=
name|transportId
expr_stmt|;
block|}
DECL|method|getBindingId ()
specifier|public
name|String
name|getBindingId
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|bindingId
argument_list|)
return|;
block|}
comment|/**      * The bindingId for the service model to use.      */
DECL|method|setBindingId (String bindingId)
specifier|public
name|void
name|setBindingId
parameter_list|(
name|String
name|bindingId
parameter_list|)
block|{
name|this
operator|.
name|bindingId
operator|=
name|bindingId
expr_stmt|;
block|}
DECL|method|getBindingConfig ()
specifier|public
name|BindingConfiguration
name|getBindingConfig
parameter_list|()
block|{
return|return
name|bindingConfig
return|;
block|}
DECL|method|isSkipFaultLogging ()
specifier|public
name|boolean
name|isSkipFaultLogging
parameter_list|()
block|{
return|return
name|skipFaultLogging
return|;
block|}
comment|/**      * This option controls whether the PhaseInterceptorChain skips logging the Fault that it catches.      */
DECL|method|setSkipFaultLogging (boolean skipFaultLogging)
specifier|public
name|void
name|setSkipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|this
operator|.
name|skipFaultLogging
operator|=
name|skipFaultLogging
expr_stmt|;
block|}
DECL|method|getMergeProtocolHeaders ()
specifier|public
name|Boolean
name|getMergeProtocolHeaders
parameter_list|()
block|{
return|return
name|mergeProtocolHeaders
return|;
block|}
comment|/**      * Whether to merge protocol headers. If enabled then propagating headers between Camel and CXF becomes more consistent and similar. For more details see CAMEL-6393.      */
DECL|method|setMergeProtocolHeaders (boolean mergeProtocolHeaders)
specifier|public
name|void
name|setMergeProtocolHeaders
parameter_list|(
name|boolean
name|mergeProtocolHeaders
parameter_list|)
block|{
name|this
operator|.
name|mergeProtocolHeaders
operator|=
name|mergeProtocolHeaders
expr_stmt|;
block|}
DECL|method|setBindingConfig (BindingConfiguration bindingConfig)
specifier|public
name|void
name|setBindingConfig
parameter_list|(
name|BindingConfiguration
name|bindingConfig
parameter_list|)
block|{
name|this
operator|.
name|bindingConfig
operator|=
name|bindingConfig
expr_stmt|;
block|}
DECL|method|getDataBinding ()
specifier|public
name|DataBinding
name|getDataBinding
parameter_list|()
block|{
return|return
name|dataBinding
return|;
block|}
DECL|method|setDataBinding (DataBinding dataBinding)
specifier|public
name|void
name|setDataBinding
parameter_list|(
name|DataBinding
name|dataBinding
parameter_list|)
block|{
name|this
operator|.
name|dataBinding
operator|=
name|dataBinding
expr_stmt|;
block|}
DECL|method|getServiceFactoryBean ()
specifier|public
name|Object
name|getServiceFactoryBean
parameter_list|()
block|{
return|return
name|serviceFactoryBean
return|;
block|}
DECL|method|setServiceFactoryBean (Object serviceFactoryBean)
specifier|public
name|void
name|setServiceFactoryBean
parameter_list|(
name|Object
name|serviceFactoryBean
parameter_list|)
block|{
name|this
operator|.
name|serviceFactoryBean
operator|=
name|serviceFactoryBean
expr_stmt|;
block|}
DECL|method|getCxfEndpointConfigurer ()
specifier|public
name|CxfEndpointConfigurer
name|getCxfEndpointConfigurer
parameter_list|()
block|{
return|return
name|cxfEndpointConfigurer
return|;
block|}
comment|/**      * This option could apply the implementation of org.apache.camel.component.cxf.CxfEndpointConfigurer which supports to configure the CXF endpoint      * in  programmatic way. User can configure the CXF server and client by implementing configure{Server|Client} method of CxfEndpointConfigurer.      */
DECL|method|setCxfEndpointConfigurer (CxfEndpointConfigurer configurer)
specifier|public
name|void
name|setCxfEndpointConfigurer
parameter_list|(
name|CxfEndpointConfigurer
name|configurer
parameter_list|)
block|{
name|this
operator|.
name|cxfEndpointConfigurer
operator|=
name|configurer
expr_stmt|;
block|}
DECL|method|getContinuationTimeout ()
specifier|public
name|long
name|getContinuationTimeout
parameter_list|()
block|{
return|return
name|continuationTimeout
return|;
block|}
comment|/**      * This option is used to set the CXF continuation timeout which could be used in CxfConsumer by default when the CXF server is using Jetty or Servlet transport.      */
DECL|method|setContinuationTimeout (long continuationTimeout)
specifier|public
name|void
name|setContinuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|this
operator|.
name|continuationTimeout
operator|=
name|continuationTimeout
expr_stmt|;
block|}
block|}
end_class

end_unit

