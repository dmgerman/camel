begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|feature
operator|.
name|MessageDataFormatFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|feature
operator|.
name|PayLoadDataFormatFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|util
operator|.
name|CxfEndpointUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SynchronousDelegateProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ClassHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|LoggingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_comment
comment|/**  * Defines the<a href="http://camel.apache.org/cxf.html">CXF Endpoint</a>.  * It contains a list of properties for CXF endpoint including {@link DataFormat},   * {@link CxfBinding}, and {@link HeaderFilterStrategy}.  The default DataFormat   * mode is {@link DataFormat#POJO}.    *  * @version   */
end_comment

begin_class
DECL|class|CxfEndpoint
specifier|public
class|class
name|CxfEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|HeaderFilterStrategyAware
implements|,
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CxfEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|wsdlURL
specifier|private
name|String
name|wsdlURL
decl_stmt|;
DECL|field|serviceClass
specifier|private
name|String
name|serviceClass
decl_stmt|;
DECL|field|portName
specifier|private
name|String
name|portName
decl_stmt|;
DECL|field|serviceName
specifier|private
name|String
name|serviceName
decl_stmt|;
DECL|field|defaultOperationName
specifier|private
name|String
name|defaultOperationName
decl_stmt|;
DECL|field|defaultOperationNamespace
specifier|private
name|String
name|defaultOperationNamespace
decl_stmt|;
DECL|field|dataFormat
specifier|private
name|DataFormat
name|dataFormat
init|=
name|DataFormat
operator|.
name|POJO
decl_stmt|;
comment|// This is for invoking the CXFClient with wrapped parameters of unwrapped parameters
DECL|field|isWrapped
specifier|private
name|boolean
name|isWrapped
decl_stmt|;
comment|// This is for marshal or unmarshal message with the document-literal wrapped or unwrapped style
DECL|field|wrappedStyle
specifier|private
name|Boolean
name|wrappedStyle
decl_stmt|;
DECL|field|publishedEndpointUrl
specifier|private
name|String
name|publishedEndpointUrl
decl_stmt|;
DECL|field|inOut
specifier|private
name|boolean
name|inOut
init|=
literal|true
decl_stmt|;
DECL|field|bus
specifier|private
name|Bus
name|bus
decl_stmt|;
DECL|field|cxfBinding
specifier|private
name|CxfBinding
name|cxfBinding
decl_stmt|;
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|field|getBusHasBeenCalled
specifier|private
name|AtomicBoolean
name|getBusHasBeenCalled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|isSetDefaultBus
specifier|private
name|boolean
name|isSetDefaultBus
decl_stmt|;
DECL|field|loggingFeatureEnabled
specifier|private
name|boolean
name|loggingFeatureEnabled
decl_stmt|;
DECL|field|address
specifier|private
name|String
name|address
decl_stmt|;
DECL|field|mtomEnabled
specifier|private
name|boolean
name|mtomEnabled
decl_stmt|;
DECL|method|CxfEndpoint (String remaining, CxfComponent cxfComponent)
specifier|public
name|CxfEndpoint
parameter_list|(
name|String
name|remaining
parameter_list|,
name|CxfComponent
name|cxfComponent
parameter_list|)
block|{
name|super
argument_list|(
name|remaining
argument_list|,
name|cxfComponent
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
DECL|method|CxfEndpoint (String remaining, CamelContext context)
specifier|public
name|CxfEndpoint
parameter_list|(
name|String
name|remaining
parameter_list|,
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|remaining
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
comment|// This method is for CxfComponent setting the EndpointUri
DECL|method|updateEndpointUri (String endpointUri)
specifier|protected
name|void
name|updateEndpointUri
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|super
operator|.
name|setEndpointUri
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|Producer
name|answer
init|=
operator|new
name|CxfProducer
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSynchronous
argument_list|()
condition|)
block|{
return|return
operator|new
name|SynchronousDelegateProducer
argument_list|(
name|answer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|answer
return|;
block|}
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|CxfConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Populate server factory bean      */
DECL|method|setupServerFactoryBean (ServerFactoryBean sfb, Class<?> cls)
specifier|protected
name|void
name|setupServerFactoryBean
parameter_list|(
name|ServerFactoryBean
name|sfb
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
comment|// address
name|sfb
operator|.
name|setAddress
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// service class
name|sfb
operator|.
name|setServiceClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
comment|// wsdl url
if|if
condition|(
name|getWsdlURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setWsdlURL
argument_list|(
name|getWsdlURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// service  name qname
if|if
condition|(
name|getServiceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setServiceName
argument_list|(
name|CxfEndpointUtils
operator|.
name|getQName
argument_list|(
name|getServiceName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// port qname
if|if
condition|(
name|getPortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setEndpointName
argument_list|(
name|CxfEndpointUtils
operator|.
name|getQName
argument_list|(
name|getPortName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// apply feature here
if|if
condition|(
operator|!
name|CxfEndpointUtils
operator|.
name|hasAnnotation
argument_list|(
name|cls
argument_list|,
name|WebServiceProvider
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|PayLoadDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|MESSAGE
condition|)
block|{
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignore DataFormat mode "
operator|+
name|getDataFormat
argument_list|()
operator|+
literal|" since SEI class is annotated with WebServiceProvider"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|loggingFeatureEnabled
condition|)
block|{
name|sfb
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|sfb
operator|.
name|setDataBinding
argument_list|(
operator|new
name|HybridSourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set the document-literal wrapped style
if|if
condition|(
name|getWrappedStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|getServiceFactory
argument_list|()
operator|.
name|setWrapped
argument_list|(
name|getWrappedStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sfb
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setStart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a client factory bean object.  Notice that the serviceClass<b>must</b> be      * an interface.      */
DECL|method|createClientFactoryBean (Class<?> cls)
specifier|protected
name|ClientProxyFactoryBean
name|createClientFactoryBean
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
throws|throws
name|CamelException
block|{
if|if
condition|(
name|CxfEndpointUtils
operator|.
name|hasWebServiceAnnotation
argument_list|(
name|cls
argument_list|)
condition|)
block|{
return|return
operator|new
name|JaxWsProxyFactoryBean
argument_list|(
operator|new
name|JaxWsClientFactoryBean
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Client
name|createClient
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
return|return
operator|new
name|CamelCxfClientImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|ep
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ClientProxyFactoryBean
argument_list|(
operator|new
name|ClientFactoryBean
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Client
name|createClient
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
return|return
operator|new
name|CamelCxfClientImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|ep
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
comment|/**      * Create a client factory bean object without serviceClass interface.      */
DECL|method|createClientFactoryBean ()
specifier|protected
name|ClientFactoryBean
name|createClientFactoryBean
parameter_list|()
block|{
return|return
operator|new
name|ClientFactoryBean
argument_list|(
operator|new
name|WSDLServiceFactoryBean
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Client
name|createClient
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
return|return
operator|new
name|CamelCxfClientImpl
argument_list|(
name|getBus
argument_list|()
argument_list|,
name|ep
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeAnnotationInterceptors
parameter_list|(
name|Endpoint
name|ep
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
comment|// Do nothing here
block|}
block|}
return|;
block|}
DECL|method|doGetBus ()
specifier|protected
name|Bus
name|doGetBus
parameter_list|()
block|{
name|BusFactory
name|busFactory
init|=
name|BusFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// need to check if the camelContext is SpringCamelContext and
comment|// update the bus configuration with the applicationContext
comment|// which SpringCamelContext holds
if|if
condition|(
name|getCamelContext
argument_list|()
operator|instanceof
name|SpringCamelContext
condition|)
block|{
name|SpringCamelContext
name|springCamelContext
init|=
operator|(
name|SpringCamelContext
operator|)
name|getCamelContext
argument_list|()
decl_stmt|;
name|ApplicationContext
name|applicationContext
init|=
name|springCamelContext
operator|.
name|getApplicationContext
argument_list|()
decl_stmt|;
name|busFactory
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
argument_list|(
name|applicationContext
argument_list|)
expr_stmt|;
block|}
return|return
name|busFactory
operator|.
name|createBus
argument_list|()
return|;
block|}
comment|/**      * Populate a client factory bean      */
DECL|method|setupClientFactoryBean (ClientProxyFactoryBean factoryBean, Class<?> cls)
specifier|protected
name|void
name|setupClientFactoryBean
parameter_list|(
name|ClientProxyFactoryBean
name|factoryBean
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
comment|// service class
name|factoryBean
operator|.
name|setServiceClass
argument_list|(
name|cls
argument_list|)
expr_stmt|;
comment|// address
name|factoryBean
operator|.
name|setAddress
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// wsdl url
if|if
condition|(
name|getWsdlURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setWsdlURL
argument_list|(
name|getWsdlURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// service name qname
if|if
condition|(
name|getServiceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setServiceName
argument_list|(
name|CxfEndpointUtils
operator|.
name|getQName
argument_list|(
name|getServiceName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// port name qname
if|if
condition|(
name|getPortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setEndpointName
argument_list|(
name|CxfEndpointUtils
operator|.
name|getQName
argument_list|(
name|getPortName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// apply feature here
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|MESSAGE
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|PayLoadDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setDataBinding
argument_list|(
operator|new
name|HybridSourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loggingFeatureEnabled
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set the document-literal wrapped style
if|if
condition|(
name|getWrappedStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|getServiceFactory
argument_list|()
operator|.
name|setWrapped
argument_list|(
name|getWrappedStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|factoryBean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupClientFactoryBean (ClientFactoryBean factoryBean)
specifier|protected
name|void
name|setupClientFactoryBean
parameter_list|(
name|ClientFactoryBean
name|factoryBean
parameter_list|)
block|{
comment|// address
name|factoryBean
operator|.
name|setAddress
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// wsdl url
if|if
condition|(
name|getWsdlURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setWsdlURL
argument_list|(
name|getWsdlURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// service name qname
if|if
condition|(
name|getServiceName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setServiceName
argument_list|(
name|CxfEndpointUtils
operator|.
name|getQName
argument_list|(
name|getServiceName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// port name qname
if|if
condition|(
name|getPortName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|setEndpointName
argument_list|(
name|CxfEndpointUtils
operator|.
name|getQName
argument_list|(
name|getPortName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// apply feature here
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|MESSAGE
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MessageDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|PAYLOAD
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|PayLoadDataFormatFeature
argument_list|()
argument_list|)
expr_stmt|;
name|factoryBean
operator|.
name|setDataBinding
argument_list|(
operator|new
name|HybridSourceDataBinding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loggingFeatureEnabled
condition|)
block|{
name|factoryBean
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set the document-literal wrapped style
if|if
condition|(
name|getWrappedStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|factoryBean
operator|.
name|getServiceFactory
argument_list|()
operator|.
name|setWrapped
argument_list|(
name|getWrappedStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|factoryBean
operator|.
name|setBus
argument_list|(
name|getBus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Package private methods
comment|// -------------------------------------------------------------------------
comment|/**      * Create a CXF client object      */
DECL|method|createClient ()
name|Client
name|createClient
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get service class
if|if
condition|(
name|getDataFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|DataFormat
operator|.
name|POJO
argument_list|)
condition|)
block|{
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|getServiceClass
argument_list|()
argument_list|,
name|CxfConstants
operator|.
name|SERVICE_CLASS
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getServiceClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cls
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|getServiceClass
argument_list|()
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// create client factory bean
name|ClientProxyFactoryBean
name|factoryBean
init|=
name|createClientFactoryBean
argument_list|(
name|cls
argument_list|)
decl_stmt|;
comment|// setup client factory bean
name|setupClientFactoryBean
argument_list|(
name|factoryBean
argument_list|,
name|cls
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ClientProxy
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|factoryBean
operator|.
name|create
argument_list|()
argument_list|)
operator|)
operator|.
name|getClient
argument_list|()
return|;
block|}
else|else
block|{
name|checkName
argument_list|(
name|portName
argument_list|,
literal|"endpoint/port name"
argument_list|)
expr_stmt|;
name|checkName
argument_list|(
name|serviceName
argument_list|,
literal|"service name"
argument_list|)
expr_stmt|;
name|ClientFactoryBean
name|factoryBean
init|=
name|createClientFactoryBean
argument_list|()
decl_stmt|;
comment|// setup client factory bean
name|setupClientFactoryBean
argument_list|(
name|factoryBean
argument_list|)
expr_stmt|;
return|return
name|factoryBean
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|method|checkName (Object value, String name)
name|void
name|checkName
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The "
operator|+
name|name
operator|+
literal|" of "
operator|+
name|this
operator|.
name|getEndpointUri
argument_list|()
operator|+
literal|" is empty, cxf will try to load the first one in wsdl for you."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Create a CXF server factory bean      */
DECL|method|createServerFactoryBean ()
name|ServerFactoryBean
name|createServerFactoryBean
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getDataFormat
argument_list|()
operator|==
name|DataFormat
operator|.
name|POJO
operator|||
name|getServiceClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// get service class
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|getServiceClass
argument_list|()
argument_list|,
name|CxfConstants
operator|.
name|SERVICE_CLASS
argument_list|)
expr_stmt|;
name|cls
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|getServiceClass
argument_list|()
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create server factory bean
comment|// Shouldn't use CxfEndpointUtils.getServerFactoryBean(cls) as it is for
comment|// CxfSoapComponent
name|ServerFactoryBean
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
name|checkName
argument_list|(
name|portName
argument_list|,
literal|" endpoint/port name"
argument_list|)
expr_stmt|;
name|checkName
argument_list|(
name|serviceName
argument_list|,
literal|" service name"
argument_list|)
expr_stmt|;
name|answer
operator|=
operator|new
name|ServerFactoryBean
argument_list|(
operator|new
name|WSDLServiceFactoryBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CxfEndpointUtils
operator|.
name|hasWebServiceAnnotation
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|answer
operator|=
operator|new
name|JaxWsServerFactoryBean
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|=
operator|new
name|ServerFactoryBean
argument_list|()
expr_stmt|;
block|}
comment|// setup server factory bean
name|setupServerFactoryBean
argument_list|(
name|answer
argument_list|,
name|cls
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getDataFormat ()
specifier|public
name|DataFormat
name|getDataFormat
parameter_list|()
block|{
return|return
name|dataFormat
return|;
block|}
DECL|method|setDataFormat (DataFormat format)
specifier|public
name|void
name|setDataFormat
parameter_list|(
name|DataFormat
name|format
parameter_list|)
block|{
name|dataFormat
operator|=
name|format
expr_stmt|;
block|}
DECL|method|getPublishedEndpointUrl ()
specifier|public
name|String
name|getPublishedEndpointUrl
parameter_list|()
block|{
return|return
name|publishedEndpointUrl
return|;
block|}
DECL|method|setPublishedEndpointUrl (String url)
specifier|public
name|void
name|setPublishedEndpointUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|publishedEndpointUrl
operator|=
name|url
expr_stmt|;
block|}
DECL|method|getWsdlURL ()
specifier|public
name|String
name|getWsdlURL
parameter_list|()
block|{
return|return
name|wsdlURL
return|;
block|}
DECL|method|setWsdlURL (String url)
specifier|public
name|void
name|setWsdlURL
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|wsdlURL
operator|=
name|url
expr_stmt|;
block|}
DECL|method|getServiceClass ()
specifier|public
name|String
name|getServiceClass
parameter_list|()
block|{
return|return
name|serviceClass
return|;
block|}
DECL|method|setServiceClass (String className)
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|serviceClass
operator|=
name|className
expr_stmt|;
block|}
DECL|method|setServiceClass (Object instance)
specifier|public
name|void
name|setServiceClass
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|serviceClass
operator|=
name|ClassHelper
operator|.
name|getRealClass
argument_list|(
name|instance
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
DECL|method|setServiceName (String service)
specifier|public
name|void
name|setServiceName
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|serviceName
operator|=
name|service
expr_stmt|;
block|}
DECL|method|getServiceName ()
specifier|public
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|serviceName
return|;
block|}
DECL|method|getPortName ()
specifier|public
name|String
name|getPortName
parameter_list|()
block|{
return|return
name|portName
return|;
block|}
DECL|method|setPortName (String port)
specifier|public
name|void
name|setPortName
parameter_list|(
name|String
name|port
parameter_list|)
block|{
name|portName
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getDefaultOperationName ()
specifier|public
name|String
name|getDefaultOperationName
parameter_list|()
block|{
return|return
name|defaultOperationName
return|;
block|}
DECL|method|setDefaultOperationName (String name)
specifier|public
name|void
name|setDefaultOperationName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|defaultOperationName
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getDefaultOperationNamespace ()
specifier|public
name|String
name|getDefaultOperationNamespace
parameter_list|()
block|{
return|return
name|defaultOperationNamespace
return|;
block|}
DECL|method|setDefaultOperationNamespace (String namespace)
specifier|public
name|void
name|setDefaultOperationNamespace
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|defaultOperationNamespace
operator|=
name|namespace
expr_stmt|;
block|}
DECL|method|isInOut ()
specifier|public
name|boolean
name|isInOut
parameter_list|()
block|{
return|return
name|inOut
return|;
block|}
DECL|method|setInOut (boolean inOut)
specifier|public
name|void
name|setInOut
parameter_list|(
name|boolean
name|inOut
parameter_list|)
block|{
name|this
operator|.
name|inOut
operator|=
name|inOut
expr_stmt|;
block|}
DECL|method|isWrapped ()
specifier|public
name|boolean
name|isWrapped
parameter_list|()
block|{
return|return
name|isWrapped
return|;
block|}
DECL|method|setWrapped (boolean wrapped)
specifier|public
name|void
name|setWrapped
parameter_list|(
name|boolean
name|wrapped
parameter_list|)
block|{
name|isWrapped
operator|=
name|wrapped
expr_stmt|;
block|}
DECL|method|getWrappedStyle ()
specifier|public
name|Boolean
name|getWrappedStyle
parameter_list|()
block|{
return|return
name|wrappedStyle
return|;
block|}
DECL|method|setWrappedStyle (Boolean wrapped)
specifier|public
name|void
name|setWrappedStyle
parameter_list|(
name|Boolean
name|wrapped
parameter_list|)
block|{
name|wrappedStyle
operator|=
name|wrapped
expr_stmt|;
block|}
DECL|method|setCxfBinding (CxfBinding cxfBinding)
specifier|public
name|void
name|setCxfBinding
parameter_list|(
name|CxfBinding
name|cxfBinding
parameter_list|)
block|{
name|this
operator|.
name|cxfBinding
operator|=
name|cxfBinding
expr_stmt|;
block|}
DECL|method|getCxfBinding ()
specifier|public
name|CxfBinding
name|getCxfBinding
parameter_list|()
block|{
return|return
name|cxfBinding
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
if|if
condition|(
name|cxfBinding
operator|instanceof
name|HeaderFilterStrategyAware
condition|)
block|{
operator|(
operator|(
name|HeaderFilterStrategyAware
operator|)
name|cxfBinding
operator|)
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|headerFilterStrategy
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
DECL|method|setBus (Bus bus)
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
DECL|method|getBus ()
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
name|bus
operator|=
name|doGetBus
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using DefaultBus "
operator|+
name|bus
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|getBusHasBeenCalled
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
operator|&&
name|isSetDefaultBus
condition|)
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set bus "
operator|+
name|bus
operator|+
literal|" as thread default bus"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bus
return|;
block|}
DECL|method|setSetDefaultBus (boolean isSetDefaultBus)
specifier|public
name|void
name|setSetDefaultBus
parameter_list|(
name|boolean
name|isSetDefaultBus
parameter_list|)
block|{
name|this
operator|.
name|isSetDefaultBus
operator|=
name|isSetDefaultBus
expr_stmt|;
block|}
DECL|method|isSetDefaultBus ()
specifier|public
name|boolean
name|isSetDefaultBus
parameter_list|()
block|{
return|return
name|isSetDefaultBus
return|;
block|}
DECL|method|setLoggingFeatureEnabled (boolean loggingFeatureEnabled)
specifier|public
name|void
name|setLoggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|this
operator|.
name|loggingFeatureEnabled
operator|=
name|loggingFeatureEnabled
expr_stmt|;
block|}
DECL|method|isLoggingFeatureEnabled ()
specifier|public
name|boolean
name|isLoggingFeatureEnabled
parameter_list|()
block|{
return|return
name|loggingFeatureEnabled
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|headerFilterStrategy
operator|==
literal|null
condition|)
block|{
name|headerFilterStrategy
operator|=
operator|new
name|CxfHeaderFilterStrategy
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cxfBinding
operator|==
literal|null
condition|)
block|{
name|cxfBinding
operator|=
operator|new
name|DefaultCxfBinding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cxfBinding
operator|instanceof
name|HeaderFilterStrategyAware
condition|)
block|{
operator|(
operator|(
name|HeaderFilterStrategyAware
operator|)
name|cxfBinding
operator|)
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|setAddress (String address)
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
DECL|method|getAddress ()
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
DECL|method|setMtomEnabled (boolean mtomEnabled)
specifier|public
name|void
name|setMtomEnabled
parameter_list|(
name|boolean
name|mtomEnabled
parameter_list|)
block|{
name|this
operator|.
name|mtomEnabled
operator|=
name|mtomEnabled
expr_stmt|;
block|}
DECL|method|isMtomEnabled ()
specifier|public
name|boolean
name|isMtomEnabled
parameter_list|()
block|{
return|return
name|mtomEnabled
return|;
block|}
comment|/**      * We need to override the {@link ClientImpl#setParameters} method      * to insert parameters into CXF Message for {@link DataFormat#PAYLOAD} mode.      */
DECL|class|CamelCxfClientImpl
class|class
name|CamelCxfClientImpl
extends|extends
name|ClientImpl
block|{
DECL|method|CamelCxfClientImpl (Bus bus, Endpoint ep)
specifier|public
name|CamelCxfClientImpl
parameter_list|(
name|Bus
name|bus
parameter_list|,
name|Endpoint
name|ep
parameter_list|)
block|{
name|super
argument_list|(
name|bus
argument_list|,
name|ep
argument_list|)
expr_stmt|;
block|}
DECL|method|getBus ()
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|setParameters (Object[] params, Message message)
specifier|protected
name|void
name|setParameters
parameter_list|(
name|Object
index|[]
name|params
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|Object
name|attachements
init|=
name|message
operator|.
name|get
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_ATTACHMENTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|attachements
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setAttachments
argument_list|(
operator|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
operator|)
name|attachements
argument_list|)
expr_stmt|;
name|message
operator|.
name|remove
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_ATTACHMENTS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DataFormat
operator|.
name|PAYLOAD
operator|==
name|message
operator|.
name|get
argument_list|(
name|DataFormat
operator|.
name|class
argument_list|)
condition|)
block|{
name|CxfPayload
argument_list|<
name|?
argument_list|>
name|payload
init|=
operator|(
name|CxfPayload
argument_list|<
name|?
argument_list|>
operator|)
name|params
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elements
init|=
name|payload
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|message
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|MessageContentsList
name|content
init|=
operator|new
name|MessageContentsList
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|partInfo
range|:
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|elements
operator|.
name|size
argument_list|()
operator|>
name|i
operator|&&
name|partInfo
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|elements
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|content
operator|.
name|put
argument_list|(
name|partInfo
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|payload
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|setParameters
argument_list|(
name|params
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|remove
argument_list|(
name|DataFormat
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

