begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.jaxrs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|NullFaultListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|http
operator|.
name|common
operator|.
name|cookie
operator|.
name|CookieHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|SynchronousDelegateProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategyAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|EndpointHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ModCountCopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|LoggingFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractBasicInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|AbstractJAXRSFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|client
operator|.
name|JAXRSClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|ClassResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|UserResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|logging
operator|.
name|FaultListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The cxfrs component is used for JAX-RS REST services using Apache CXF.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.0.0"
argument_list|,
name|scheme
operator|=
literal|"cxfrs"
argument_list|,
name|title
operator|=
literal|"CXF-RS"
argument_list|,
name|syntax
operator|=
literal|"cxfrs:beanId:address"
argument_list|,
name|consumerClass
operator|=
name|CxfRsConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"rest"
argument_list|,
name|lenientProperties
operator|=
literal|true
argument_list|)
DECL|class|CxfRsEndpoint
specifier|public
class|class
name|CxfRsEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|HeaderFilterStrategyAware
implements|,
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CxfRsEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|bus
specifier|protected
name|Bus
name|bus
decl_stmt|;
DECL|field|interceptorHolder
specifier|private
specifier|final
name|InterceptorHolder
name|interceptorHolder
init|=
operator|new
name|InterceptorHolder
argument_list|()
decl_stmt|;
DECL|field|parameters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
DECL|field|properties
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"To lookup an existing configured CxfRsEndpoint. Must used bean: as prefix."
argument_list|)
DECL|field|beanId
specifier|private
name|String
name|beanId
decl_stmt|;
annotation|@
name|UriPath
DECL|field|address
specifier|private
name|String
name|address
decl_stmt|;
annotation|@
name|UriParam
DECL|field|resourceClasses
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resourceClasses
decl_stmt|;
annotation|@
name|UriParam
DECL|field|modelRef
specifier|private
name|String
name|modelRef
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"Default"
argument_list|)
DECL|field|bindingStyle
specifier|private
name|BindingStyle
name|bindingStyle
init|=
name|BindingStyle
operator|.
name|Default
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|)
DECL|field|publishedEndpointUrl
specifier|private
name|String
name|publishedEndpointUrl
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|binding
specifier|private
name|CxfRsBinding
name|binding
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|javaType
operator|=
literal|"java.lang.String"
argument_list|)
DECL|field|providers
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|providers
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|providersRef
specifier|private
name|String
name|providersRef
decl_stmt|;
annotation|@
name|UriParam
DECL|field|schemaLocations
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|schemaLocations
decl_stmt|;
annotation|@
name|UriParam
DECL|field|features
specifier|private
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|httpClientAPI
specifier|private
name|boolean
name|httpClientAPI
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|)
DECL|field|ignoreDeleteMethodMessageBody
specifier|private
name|boolean
name|ignoreDeleteMethodMessageBody
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|throwExceptionOnFailure
specifier|private
name|boolean
name|throwExceptionOnFailure
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer,advanced"
argument_list|,
name|defaultValue
operator|=
literal|"10"
argument_list|)
DECL|field|maxClientCacheSize
specifier|private
name|int
name|maxClientCacheSize
init|=
literal|10
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|sslContextParameters
specifier|private
name|SSLContextParameters
name|sslContextParameters
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|hostnameVerifier
specifier|private
name|HostnameVerifier
name|hostnameVerifier
decl_stmt|;
annotation|@
name|UriParam
DECL|field|loggingFeatureEnabled
specifier|private
name|boolean
name|loggingFeatureEnabled
decl_stmt|;
annotation|@
name|UriParam
DECL|field|loggingSizeLimit
specifier|private
name|int
name|loggingSizeLimit
decl_stmt|;
annotation|@
name|UriParam
DECL|field|skipFaultLogging
specifier|private
name|boolean
name|skipFaultLogging
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|"30000"
argument_list|)
DECL|field|continuationTimeout
specifier|private
name|long
name|continuationTimeout
init|=
literal|30000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|defaultBus
specifier|private
name|boolean
name|defaultBus
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|performInvocation
specifier|private
name|boolean
name|performInvocation
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|propagateContexts
specifier|private
name|boolean
name|propagateContexts
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|cxfRsEndpointConfigurer
specifier|private
name|CxfRsEndpointConfigurer
name|cxfRsEndpointConfigurer
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"producer"
argument_list|)
DECL|field|cookieHandler
specifier|private
name|CookieHandler
name|cookieHandler
decl_stmt|;
DECL|method|CxfRsEndpoint ()
specifier|public
name|CxfRsEndpoint
parameter_list|()
block|{     }
annotation|@
name|Deprecated
DECL|method|CxfRsEndpoint (String endpointUri, CamelContext camelContext)
specifier|public
name|CxfRsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
DECL|method|CxfRsEndpoint (String endpointUri, Component component)
specifier|public
name|CxfRsEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|setAddress
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isLenientProperties ()
specifier|public
name|boolean
name|isLenientProperties
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|// This method is for CxfRsComponent setting the EndpointUri
DECL|method|updateEndpointUri (String endpointUri)
specifier|protected
name|void
name|updateEndpointUri
parameter_list|(
name|String
name|endpointUri
parameter_list|)
block|{
name|super
operator|.
name|setEndpointUri
argument_list|(
name|endpointUri
argument_list|)
expr_stmt|;
block|}
DECL|method|setParameters (Map<String, String> param)
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
parameter_list|)
block|{
name|parameters
operator|=
name|param
expr_stmt|;
block|}
DECL|method|getParameters ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
comment|/**      * If it is true, the CxfRsProducer will use the HttpClientAPI to invoke the service.      * If it is false, the CxfRsProducer will use the ProxyClientAPI to invoke the service      */
DECL|method|setHttpClientAPI (boolean clientAPI)
specifier|public
name|void
name|setHttpClientAPI
parameter_list|(
name|boolean
name|clientAPI
parameter_list|)
block|{
name|httpClientAPI
operator|=
name|clientAPI
expr_stmt|;
block|}
DECL|method|isHttpClientAPI ()
specifier|public
name|boolean
name|isHttpClientAPI
parameter_list|()
block|{
return|return
name|httpClientAPI
return|;
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
comment|/**      * To use a custom HeaderFilterStrategy to filter header to and from Camel message.      */
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy strategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|strategy
parameter_list|)
block|{
name|headerFilterStrategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|CxfRsConsumer
name|answer
init|=
operator|new
name|CxfRsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|bindingStyle
operator|==
name|BindingStyle
operator|.
name|SimpleConsumer
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The SimpleConsumer Binding Style cannot be used in a camel-cxfrs producer"
argument_list|)
throw|;
block|}
specifier|final
name|CxfRsProducer
name|cxfRsProducer
init|=
operator|new
name|CxfRsProducer
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSynchronous
argument_list|()
condition|)
block|{
return|return
operator|new
name|SynchronousDelegateProducer
argument_list|(
name|cxfRsProducer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cxfRsProducer
return|;
block|}
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * To use a custom CxfBinding to control the binding between Camel Message and CXF Message.      */
DECL|method|setBinding (CxfRsBinding binding)
specifier|public
name|void
name|setBinding
parameter_list|(
name|CxfRsBinding
name|binding
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
block|}
DECL|method|getBinding ()
specifier|public
name|CxfRsBinding
name|getBinding
parameter_list|()
block|{
return|return
name|binding
return|;
block|}
DECL|method|isSkipFaultLogging ()
specifier|public
name|boolean
name|isSkipFaultLogging
parameter_list|()
block|{
return|return
name|skipFaultLogging
return|;
block|}
DECL|method|getChainedCxfRsEndpointConfigurer ()
specifier|public
name|CxfRsEndpointConfigurer
name|getChainedCxfRsEndpointConfigurer
parameter_list|()
block|{
return|return
name|ChainedCxfRsEndpointConfigurer
operator|.
name|create
argument_list|(
name|getNullSafeCxfRsEndpointConfigurer
argument_list|()
argument_list|,
name|SslCxfRsEndpointConfigurer
operator|.
name|create
argument_list|(
name|sslContextParameters
argument_list|,
name|getCamelContext
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
name|HostnameVerifierCxfRsEndpointConfigurer
operator|.
name|create
argument_list|(
name|hostnameVerifier
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This option controls whether the PhaseInterceptorChain skips logging the Fault that it catches.      */
DECL|method|setSkipFaultLogging (boolean skipFaultLogging)
specifier|public
name|void
name|setSkipFaultLogging
parameter_list|(
name|boolean
name|skipFaultLogging
parameter_list|)
block|{
name|this
operator|.
name|skipFaultLogging
operator|=
name|skipFaultLogging
expr_stmt|;
block|}
DECL|method|checkBeanType (Object object, Class<?> clazz)
specifier|protected
name|void
name|checkBeanType
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAssignableFrom
argument_list|(
name|object
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The configure bean is not the instance of "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|setupJAXRSServerFactoryBean (JAXRSServerFactoryBean sfb)
specifier|protected
name|void
name|setupJAXRSServerFactoryBean
parameter_list|(
name|JAXRSServerFactoryBean
name|sfb
parameter_list|)
block|{
comment|// address
if|if
condition|(
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setAddress
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|processResourceModel
argument_list|(
name|sfb
argument_list|)
expr_stmt|;
if|if
condition|(
name|getResourceClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sfb
operator|.
name|setResourceClasses
argument_list|(
name|getResourceClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// setup the resource providers for interfaces
name|List
argument_list|<
name|ClassResourceInfo
argument_list|>
name|cris
init|=
name|sfb
operator|.
name|getServiceFactory
argument_list|()
operator|.
name|getClassResourceInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassResourceInfo
name|cri
range|:
name|cris
control|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
init|=
name|cri
operator|.
name|getServiceClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|serviceClass
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|cri
operator|.
name|setResourceProvider
argument_list|(
operator|new
name|CamelResourceProvider
argument_list|(
name|serviceClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setupCommonFactoryProperties
argument_list|(
name|sfb
argument_list|)
expr_stmt|;
name|sfb
operator|.
name|setStart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getNullSafeCxfRsEndpointConfigurer
argument_list|()
operator|.
name|configure
argument_list|(
name|sfb
argument_list|)
expr_stmt|;
block|}
DECL|method|getNullSafeCxfRsEndpointConfigurer ()
specifier|private
name|CxfRsEndpointConfigurer
name|getNullSafeCxfRsEndpointConfigurer
parameter_list|()
block|{
if|if
condition|(
name|cxfRsEndpointConfigurer
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ChainedCxfRsEndpointConfigurer
operator|.
name|NullCxfRsEndpointConfigurer
argument_list|()
return|;
block|}
return|return
name|cxfRsEndpointConfigurer
return|;
block|}
DECL|method|processResourceModel (JAXRSServerFactoryBean sfb)
specifier|private
name|void
name|processResourceModel
parameter_list|(
name|JAXRSServerFactoryBean
name|sfb
parameter_list|)
block|{
comment|// Currently a CXF model document is the only possible source
comment|// of the model. Other sources will be supported going forward
if|if
condition|(
name|modelRef
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|UserResource
argument_list|>
name|resources
init|=
name|ResourceUtils
operator|.
name|getUserResources
argument_list|(
name|modelRef
argument_list|,
name|sfb
operator|.
name|getBus
argument_list|()
argument_list|)
decl_stmt|;
name|processUserResources
argument_list|(
name|sfb
argument_list|,
name|resources
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Prepare model beans and set them on the factory.      * The model beans can be created from a variety of sources such as      * CXF Model extensions but also other documents (to be supported in the future).      */
DECL|method|processUserResources (JAXRSServerFactoryBean sfb, List<UserResource> resources)
specifier|private
name|void
name|processUserResources
parameter_list|(
name|JAXRSServerFactoryBean
name|sfb
parameter_list|,
name|List
argument_list|<
name|UserResource
argument_list|>
name|resources
parameter_list|)
block|{
for|for
control|(
name|UserResource
name|resource
range|:
name|resources
control|)
block|{
if|if
condition|(
name|resource
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|resource
operator|.
name|setName
argument_list|(
name|DefaultModelResource
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The CXF to Camel exchange binding may need to be customized
comment|// for the operation name, request, response types be derived from
comment|// the model info (when a given model does provide this info) as opposed
comment|// to a matched method which is of no real use with a default handler.
name|sfb
operator|.
name|setModelBeans
argument_list|(
name|resources
argument_list|)
expr_stmt|;
block|}
DECL|method|setupJAXRSClientFactoryBean (JAXRSClientFactoryBean cfb, String address)
specifier|protected
name|void
name|setupJAXRSClientFactoryBean
parameter_list|(
name|JAXRSClientFactoryBean
name|cfb
parameter_list|,
name|String
name|address
parameter_list|)
block|{
comment|// address
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
name|cfb
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modelRef
operator|!=
literal|null
condition|)
block|{
name|cfb
operator|.
name|setModelRef
argument_list|(
name|modelRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getResourceClasses
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getResourceClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cfb
operator|.
name|setResourceClass
argument_list|(
name|getResourceClasses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cfb
operator|.
name|getServiceFactory
argument_list|()
operator|.
name|setResourceClasses
argument_list|(
name|getResourceClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setupCommonFactoryProperties
argument_list|(
name|cfb
argument_list|)
expr_stmt|;
name|cfb
operator|.
name|setThreadSafe
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getNullSafeCxfRsEndpointConfigurer
argument_list|()
operator|.
name|configure
argument_list|(
name|cfb
argument_list|)
expr_stmt|;
block|}
DECL|method|setupCommonFactoryProperties (AbstractJAXRSFactoryBean factory)
specifier|protected
name|void
name|setupCommonFactoryProperties
parameter_list|(
name|AbstractJAXRSFactoryBean
name|factory
parameter_list|)
block|{
comment|// let customer to override the default setting of provider
if|if
condition|(
operator|!
name|getProviders
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|factory
operator|.
name|setProviders
argument_list|(
name|getProviders
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// setup the features
if|if
condition|(
operator|!
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|factory
operator|.
name|getFeatures
argument_list|()
operator|.
name|addAll
argument_list|(
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publishedEndpointUrl
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|setPublishedEndpointUrl
argument_list|(
name|publishedEndpointUrl
argument_list|)
expr_stmt|;
block|}
comment|// we need to avoid flushing the setting from spring or blueprint
if|if
condition|(
operator|!
name|interceptorHolder
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|factory
operator|.
name|setInInterceptors
argument_list|(
name|interceptorHolder
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interceptorHolder
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|factory
operator|.
name|setOutInterceptors
argument_list|(
name|interceptorHolder
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interceptorHolder
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|factory
operator|.
name|setOutFaultInterceptors
argument_list|(
name|interceptorHolder
operator|.
name|getOutFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|interceptorHolder
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|factory
operator|.
name|setInFaultInterceptors
argument_list|(
name|interceptorHolder
operator|.
name|getInFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|factory
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// add to existing properties
name|factory
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|.
name|setProperties
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"JAXRS FactoryBean: {} added properties: {}"
argument_list|,
name|factory
argument_list|,
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLoggingFeatureEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|getLoggingSizeLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|factory
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|(
name|getLoggingSizeLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|LoggingFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|isSkipFaultLogging
argument_list|()
condition|)
block|{
if|if
condition|(
name|factory
operator|.
name|getProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|factory
operator|.
name|setProperties
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|FaultListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|NullFaultListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newJAXRSServerFactoryBean ()
specifier|protected
name|JAXRSServerFactoryBean
name|newJAXRSServerFactoryBean
parameter_list|()
block|{
return|return
operator|new
name|JAXRSServerFactoryBean
argument_list|()
block|{
specifier|protected
name|boolean
name|isValidClassResourceInfo
parameter_list|(
name|ClassResourceInfo
name|cri
parameter_list|)
block|{
comment|// CXF will consider interfaces created for managing model resources
comment|// invalid - however it is fine with Camel processors if no service invocation
comment|// is requested.
return|return
operator|!
name|performInvocation
operator|||
operator|!
name|cri
operator|.
name|getServiceClass
argument_list|()
operator|.
name|isInterface
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|newJAXRSClientFactoryBean ()
specifier|protected
name|JAXRSClientFactoryBean
name|newJAXRSClientFactoryBean
parameter_list|()
block|{
return|return
operator|new
name|JAXRSClientFactoryBean
argument_list|()
return|;
block|}
DECL|method|resolvePropertyPlaceholders (String str)
specifier|protected
name|String
name|resolvePropertyPlaceholders
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|getCamelContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getCamelContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|str
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|str
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|createJAXRSServerFactoryBean ()
specifier|public
name|JAXRSServerFactoryBean
name|createJAXRSServerFactoryBean
parameter_list|()
block|{
name|JAXRSServerFactoryBean
name|answer
init|=
name|newJAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|setupJAXRSServerFactoryBean
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|createJAXRSClientFactoryBean ()
specifier|public
name|JAXRSClientFactoryBean
name|createJAXRSClientFactoryBean
parameter_list|()
block|{
return|return
name|createJAXRSClientFactoryBean
argument_list|(
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createJAXRSClientFactoryBean (String address)
specifier|public
name|JAXRSClientFactoryBean
name|createJAXRSClientFactoryBean
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|JAXRSClientFactoryBean
name|answer
init|=
name|newJAXRSClientFactoryBean
argument_list|()
decl_stmt|;
name|setupJAXRSClientFactoryBean
argument_list|(
name|answer
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|getResourceClasses ()
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getResourceClasses
parameter_list|()
block|{
return|return
name|resourceClasses
return|;
block|}
DECL|method|addResourceClass (Class<?> resourceClass)
specifier|public
name|void
name|addResourceClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|resourceClass
parameter_list|)
block|{
if|if
condition|(
name|resourceClasses
operator|==
literal|null
condition|)
block|{
name|resourceClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|resourceClasses
operator|.
name|add
argument_list|(
name|resourceClass
argument_list|)
expr_stmt|;
block|}
comment|/**      * The resource classes which you want to export as REST service. Multiple classes can be separated by comma.      */
DECL|method|setResourceClasses (List<Class<?>> resourceClasses)
specifier|public
name|void
name|setResourceClasses
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resourceClasses
parameter_list|)
block|{
name|this
operator|.
name|resourceClasses
operator|=
name|resourceClasses
expr_stmt|;
block|}
DECL|method|setResourceClasses (Class<?>.... classes)
specifier|public
name|void
name|setResourceClasses
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|classes
parameter_list|)
block|{
name|setResourceClasses
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|classes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The service publish address.      */
DECL|method|setAddress (String address)
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
comment|/**      * This option is used to specify the model file which is useful for the resource class without annotation.      * When using this option, then the service class can be omitted, to emulate document-only endpoints      */
DECL|method|setModelRef (String ref)
specifier|public
name|void
name|setModelRef
parameter_list|(
name|String
name|ref
parameter_list|)
block|{
name|this
operator|.
name|modelRef
operator|=
name|ref
expr_stmt|;
block|}
DECL|method|getAddress ()
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|resolvePropertyPlaceholders
argument_list|(
name|address
argument_list|)
return|;
block|}
DECL|method|getPublishedEndpointUrl ()
specifier|public
name|String
name|getPublishedEndpointUrl
parameter_list|()
block|{
return|return
name|publishedEndpointUrl
return|;
block|}
comment|/**      * This option can override the endpointUrl that published from the WADL which can be accessed with resource address url plus ?_wadl      */
DECL|method|setPublishedEndpointUrl (String publishedEndpointUrl)
specifier|public
name|void
name|setPublishedEndpointUrl
parameter_list|(
name|String
name|publishedEndpointUrl
parameter_list|)
block|{
name|this
operator|.
name|publishedEndpointUrl
operator|=
name|publishedEndpointUrl
expr_stmt|;
block|}
comment|/**      * This option enables CXF Logging Feature which writes inbound and outbound REST messages to log.      */
DECL|method|isLoggingFeatureEnabled ()
specifier|public
name|boolean
name|isLoggingFeatureEnabled
parameter_list|()
block|{
return|return
name|loggingFeatureEnabled
return|;
block|}
DECL|method|setLoggingFeatureEnabled (boolean loggingFeatureEnabled)
specifier|public
name|void
name|setLoggingFeatureEnabled
parameter_list|(
name|boolean
name|loggingFeatureEnabled
parameter_list|)
block|{
name|this
operator|.
name|loggingFeatureEnabled
operator|=
name|loggingFeatureEnabled
expr_stmt|;
block|}
DECL|method|getLoggingSizeLimit ()
specifier|public
name|int
name|getLoggingSizeLimit
parameter_list|()
block|{
return|return
name|loggingSizeLimit
return|;
block|}
comment|/**      * To limit the total size of number of bytes the logger will output when logging feature has been enabled.      */
DECL|method|setLoggingSizeLimit (int loggingSizeLimit)
specifier|public
name|void
name|setLoggingSizeLimit
parameter_list|(
name|int
name|loggingSizeLimit
parameter_list|)
block|{
name|this
operator|.
name|loggingSizeLimit
operator|=
name|loggingSizeLimit
expr_stmt|;
block|}
DECL|method|isThrowExceptionOnFailure ()
specifier|public
name|boolean
name|isThrowExceptionOnFailure
parameter_list|()
block|{
return|return
name|throwExceptionOnFailure
return|;
block|}
comment|/**      * This option tells the CxfRsProducer to inspect return codes and will generate an Exception if the return code is larger than 207.      */
DECL|method|setThrowExceptionOnFailure (boolean throwExceptionOnFailure)
specifier|public
name|void
name|setThrowExceptionOnFailure
parameter_list|(
name|boolean
name|throwExceptionOnFailure
parameter_list|)
block|{
name|this
operator|.
name|throwExceptionOnFailure
operator|=
name|throwExceptionOnFailure
expr_stmt|;
block|}
comment|/**      * This option allows you to configure the maximum size of the cache.      * The implementation caches CXF clients or ClientFactoryBean in CxfProvider and CxfRsProvider.      */
DECL|method|setMaxClientCacheSize (int maxClientCacheSize)
specifier|public
name|void
name|setMaxClientCacheSize
parameter_list|(
name|int
name|maxClientCacheSize
parameter_list|)
block|{
name|this
operator|.
name|maxClientCacheSize
operator|=
name|maxClientCacheSize
expr_stmt|;
block|}
DECL|method|getMaxClientCacheSize ()
specifier|public
name|int
name|getMaxClientCacheSize
parameter_list|()
block|{
return|return
name|maxClientCacheSize
return|;
block|}
comment|/**      * To use a custom configured CXF Bus.      */
DECL|method|setBus (Bus bus)
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
if|if
condition|(
name|defaultBus
condition|)
block|{
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Set bus {} as thread default bus"
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getBus ()
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
comment|/**      * Will set the default bus when CXF endpoint create a bus by itself      */
DECL|method|setDefaultBus (boolean isSetDefaultBus)
specifier|public
name|void
name|setDefaultBus
parameter_list|(
name|boolean
name|isSetDefaultBus
parameter_list|)
block|{
name|this
operator|.
name|defaultBus
operator|=
name|isSetDefaultBus
expr_stmt|;
block|}
DECL|method|isDefaultBus ()
specifier|public
name|boolean
name|isDefaultBus
parameter_list|()
block|{
return|return
name|defaultBus
return|;
block|}
DECL|method|isIgnoreDeleteMethodMessageBody ()
specifier|public
name|boolean
name|isIgnoreDeleteMethodMessageBody
parameter_list|()
block|{
return|return
name|ignoreDeleteMethodMessageBody
return|;
block|}
comment|/**      * This option is used to tell CxfRsProducer to ignore the message body of the DELETE method when using HTTP API.      */
DECL|method|setIgnoreDeleteMethodMessageBody (boolean ignoreDeleteMethodMessageBody)
specifier|public
name|void
name|setIgnoreDeleteMethodMessageBody
parameter_list|(
name|boolean
name|ignoreDeleteMethodMessageBody
parameter_list|)
block|{
name|this
operator|.
name|ignoreDeleteMethodMessageBody
operator|=
name|ignoreDeleteMethodMessageBody
expr_stmt|;
block|}
DECL|method|getBindingStyle ()
specifier|public
name|BindingStyle
name|getBindingStyle
parameter_list|()
block|{
return|return
name|bindingStyle
return|;
block|}
DECL|method|getProviders ()
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getProviders
parameter_list|()
block|{
return|return
name|providers
return|;
block|}
comment|/**      * Set custom JAX-RS provider(s) list to the CxfRs endpoint.      * You can specify a string with a list of providers to lookup in the registy separated by comma.      */
DECL|method|setProviders (List<?> providers)
specifier|public
name|void
name|setProviders
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providers
operator|.
name|addAll
argument_list|(
name|providers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set custom JAX-RS provider(s) list which is looked up in the registry. Multiple entries can be separated by comma.      */
DECL|method|setProviders (String providers)
specifier|public
name|void
name|setProviders
parameter_list|(
name|String
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providersRef
operator|=
name|providers
expr_stmt|;
block|}
comment|/**      * Set custom JAX-RS provider to the CxfRs endpoint.      */
DECL|method|setProvider (Object provider)
specifier|public
name|void
name|setProvider
parameter_list|(
name|Object
name|provider
parameter_list|)
block|{
name|providers
operator|.
name|add
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the locations of the schema(s) which can be used to validate the incoming XML or JAXB-driven JSON.      */
DECL|method|setSchemaLocation (String schema)
specifier|public
name|void
name|setSchemaLocation
parameter_list|(
name|String
name|schema
parameter_list|)
block|{
name|setSchemaLocations
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the locations of the schema(s) which can be used to validate the incoming XML or JAXB-driven JSON.      */
DECL|method|setSchemaLocations (List<String> schemas)
specifier|public
name|void
name|setSchemaLocations
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|schemas
parameter_list|)
block|{
name|this
operator|.
name|schemaLocations
operator|=
name|schemas
expr_stmt|;
block|}
DECL|method|getSchemaLocations ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSchemaLocations
parameter_list|()
block|{
return|return
name|schemaLocations
return|;
block|}
DECL|method|getOutFaultInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutFaultInterceptors
parameter_list|()
block|{
return|return
name|interceptorHolder
operator|.
name|getOutFaultInterceptors
argument_list|()
return|;
block|}
DECL|method|getInFaultInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInFaultInterceptors
parameter_list|()
block|{
return|return
name|interceptorHolder
operator|.
name|getInFaultInterceptors
argument_list|()
return|;
block|}
DECL|method|getInInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInInterceptors
parameter_list|()
block|{
return|return
name|interceptorHolder
operator|.
name|getInInterceptors
argument_list|()
return|;
block|}
DECL|method|getOutInterceptors ()
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutInterceptors
parameter_list|()
block|{
return|return
name|interceptorHolder
operator|.
name|getOutInterceptors
argument_list|()
return|;
block|}
comment|/**      * Set the inInterceptors to the CxfRs endpoint.      */
DECL|method|setInInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setInInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|interceptorHolder
operator|.
name|setInInterceptors
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the inFaultInterceptors to the CxfRs endpoint.      */
DECL|method|setInFaultInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setInFaultInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|interceptorHolder
operator|.
name|setInFaultInterceptors
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the outInterceptor to the CxfRs endpoint.      */
DECL|method|setOutInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setOutInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|interceptorHolder
operator|.
name|setOutInterceptors
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the outFaultInterceptors to the CxfRs endpoint.      */
DECL|method|setOutFaultInterceptors (List<Interceptor<? extends Message>> interceptors)
specifier|public
name|void
name|setOutFaultInterceptors
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|interceptors
parameter_list|)
block|{
name|interceptorHolder
operator|.
name|setOutFaultInterceptors
argument_list|(
name|interceptors
argument_list|)
expr_stmt|;
block|}
DECL|method|getFeatures ()
specifier|public
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
comment|/**      * Set the feature list to the CxfRs endpoint.      */
DECL|method|setFeatures (List<Feature> features)
specifier|public
name|void
name|setFeatures
parameter_list|(
name|List
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|)
block|{
name|this
operator|.
name|features
operator|=
name|features
expr_stmt|;
block|}
DECL|method|getProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
DECL|method|setProperties (Map<String, Object> properties)
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|properties
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|properties
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Sets how requests and responses will be mapped to/from Camel. Two values are possible:      *<ul>      *<li>SimpleConsumer: This binding style processes request parameters, multiparts, etc. and maps them to IN headers, IN attachments and to the message body.      *                          It aims to eliminate low-level processing of {@link org.apache.cxf.message.MessageContentsList}.      *                          It also also adds more flexibility and simplicity to the response mapping.      *                          Only available for consumers.      *</li>      *<li>Default: The default style. For consumers this passes on a MessageContentsList to the route, requiring low-level processing in the route.      *                   This is the traditional binding style, which simply dumps the {@link org.apache.cxf.message.MessageContentsList} coming in from the CXF stack      *                   onto the IN message body. The user is then responsible for processing it according to the contract defined by the JAX-RS method signature.      *</li>      *<li>Custom: allows you to specify a custom binding through the binding option.</li>      *</ul>      */
DECL|method|setBindingStyle (BindingStyle bindingStyle)
specifier|public
name|void
name|setBindingStyle
parameter_list|(
name|BindingStyle
name|bindingStyle
parameter_list|)
block|{
name|this
operator|.
name|bindingStyle
operator|=
name|bindingStyle
expr_stmt|;
block|}
DECL|method|getBeanId ()
specifier|public
name|String
name|getBeanId
parameter_list|()
block|{
return|return
name|beanId
return|;
block|}
DECL|method|setBeanId (String beanId)
specifier|public
name|void
name|setBeanId
parameter_list|(
name|String
name|beanId
parameter_list|)
block|{
name|this
operator|.
name|beanId
operator|=
name|beanId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|headerFilterStrategy
operator|==
literal|null
condition|)
block|{
name|headerFilterStrategy
operator|=
operator|new
name|CxfRsHeaderFilterStrategy
argument_list|()
expr_stmt|;
block|}
comment|// if the user explicitly selected the Custom binding style, he must provide a binding
if|if
condition|(
name|bindingStyle
operator|==
name|BindingStyle
operator|.
name|Custom
operator|&&
name|binding
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Custom binding style selected, but no binding was supplied"
argument_list|)
throw|;
block|}
comment|// if the user has set a binding, do nothing, just make sure that BindingStyle = Custom for coherency purposes
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|bindingStyle
operator|=
name|BindingStyle
operator|.
name|Custom
expr_stmt|;
block|}
comment|// set the right binding based on the binding style
if|if
condition|(
name|bindingStyle
operator|==
name|BindingStyle
operator|.
name|SimpleConsumer
condition|)
block|{
name|binding
operator|=
operator|new
name|SimpleCxfRsBinding
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bindingStyle
operator|==
name|BindingStyle
operator|.
name|Custom
condition|)
block|{
comment|// do nothing
block|}
else|else
block|{
name|binding
operator|=
operator|new
name|DefaultCxfRsBinding
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|binding
operator|instanceof
name|HeaderFilterStrategyAware
condition|)
block|{
operator|(
operator|(
name|HeaderFilterStrategyAware
operator|)
name|binding
operator|)
operator|.
name|setHeaderFilterStrategy
argument_list|(
name|getHeaderFilterStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|providersRef
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|names
init|=
name|providersRef
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|Object
name|provider
init|=
name|EndpointHelper
operator|.
name|resolveReferenceParameter
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|name
argument_list|,
name|Object
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|setProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// noop
block|}
DECL|method|getContinuationTimeout ()
specifier|public
name|long
name|getContinuationTimeout
parameter_list|()
block|{
return|return
name|continuationTimeout
return|;
block|}
comment|/**      * This option is used to set the CXF continuation timeout which could be used in CxfConsumer by default when the CXF server is using Jetty or Servlet transport.      */
DECL|method|setContinuationTimeout (long continuationTimeout)
specifier|public
name|void
name|setContinuationTimeout
parameter_list|(
name|long
name|continuationTimeout
parameter_list|)
block|{
name|this
operator|.
name|continuationTimeout
operator|=
name|continuationTimeout
expr_stmt|;
block|}
DECL|method|isPerformInvocation ()
specifier|public
name|boolean
name|isPerformInvocation
parameter_list|()
block|{
return|return
name|performInvocation
return|;
block|}
comment|/**      * When the option is true, Camel will perform the invocation of the resource class instance and put the response object into the exchange for further processing.      */
DECL|method|setPerformInvocation (boolean performInvocation)
specifier|public
name|void
name|setPerformInvocation
parameter_list|(
name|boolean
name|performInvocation
parameter_list|)
block|{
name|this
operator|.
name|performInvocation
operator|=
name|performInvocation
expr_stmt|;
block|}
DECL|method|isPropagateContexts ()
specifier|public
name|boolean
name|isPropagateContexts
parameter_list|()
block|{
return|return
name|propagateContexts
return|;
block|}
comment|/**      * When the option is true, JAXRS UriInfo, HttpHeaders, Request and SecurityContext contexts will be available to      * custom CXFRS processors as typed Camel exchange properties.      * These contexts can be used to analyze the current requests using JAX-RS API.      */
DECL|method|setPropagateContexts (boolean propagateContexts)
specifier|public
name|void
name|setPropagateContexts
parameter_list|(
name|boolean
name|propagateContexts
parameter_list|)
block|{
name|this
operator|.
name|propagateContexts
operator|=
name|propagateContexts
expr_stmt|;
block|}
DECL|class|InterceptorHolder
specifier|private
specifier|static
class|class
name|InterceptorHolder
extends|extends
name|AbstractBasicInterceptorProvider
block|{     }
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|sslContextParameters
return|;
block|}
comment|/**      * The Camel SSL setting reference. Use the # notation to reference the SSL Context.      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|this
operator|.
name|sslContextParameters
operator|=
name|sslContextParameters
expr_stmt|;
block|}
DECL|method|getHostnameVerifier ()
specifier|public
name|HostnameVerifier
name|getHostnameVerifier
parameter_list|()
block|{
return|return
name|hostnameVerifier
return|;
block|}
comment|/**      * The hostname verifier to be used. Use the # notation to reference a HostnameVerifier      * from the registry.      */
DECL|method|setHostnameVerifier (HostnameVerifier hostnameVerifier)
specifier|public
name|void
name|setHostnameVerifier
parameter_list|(
name|HostnameVerifier
name|hostnameVerifier
parameter_list|)
block|{
name|this
operator|.
name|hostnameVerifier
operator|=
name|hostnameVerifier
expr_stmt|;
block|}
DECL|method|getCxfRsEndpointConfigurer ()
specifier|public
name|CxfRsEndpointConfigurer
name|getCxfRsEndpointConfigurer
parameter_list|()
block|{
return|return
name|cxfRsEndpointConfigurer
return|;
block|}
comment|/**      * This option could apply the implementation of org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which supports to configure the CXF endpoint      * in  programmatic way. User can configure the CXF server and client by implementing configure{Server/Client} method of CxfEndpointConfigurer.      */
DECL|method|setCxfRsEndpointConfigurer (CxfRsEndpointConfigurer configurer)
specifier|public
name|void
name|setCxfRsEndpointConfigurer
parameter_list|(
name|CxfRsEndpointConfigurer
name|configurer
parameter_list|)
block|{
name|this
operator|.
name|cxfRsEndpointConfigurer
operator|=
name|configurer
expr_stmt|;
block|}
DECL|method|getCookieHandler ()
specifier|public
name|CookieHandler
name|getCookieHandler
parameter_list|()
block|{
return|return
name|cookieHandler
return|;
block|}
comment|/**      * Configure a cookie handler to maintain a HTTP session      */
DECL|method|setCookieHandler (CookieHandler cookieHandler)
specifier|public
name|void
name|setCookieHandler
parameter_list|(
name|CookieHandler
name|cookieHandler
parameter_list|)
block|{
name|this
operator|.
name|cookieHandler
operator|=
name|cookieHandler
expr_stmt|;
block|}
block|}
end_class

end_unit

