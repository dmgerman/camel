begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.jaxrs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|CookieParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|FormParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|HeaderParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|MatrixParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAttachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|InputStreamDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|ext
operator|.
name|multipart
operator|.
name|Multipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|model
operator|.
name|URITemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_comment
comment|/**  * A CXF RS Binding which maps method parameters as Camel IN headers and the payload as the IN message body.  * It replaces the default behaviour of creating a MessageContentsList, which requires the route to process the contents low-level.  *   *<p />  *   * The mapping from CXF to Camel is performed as follows:  *   *<ul>  *<li>JAX-RS Parameter types (@QueryParam, @HeaderParam, @CookieParam, @FormParam, @PathParam, @MatrixParam) are all transferred  *      as IN message headers.</li>  *<li>If a request entity is clearly identified (for example, because it's the only parameter without an annotation), it's   *      set as the IN message body. Otherwise, the original {@link MessageContentsList} is preserved as the message body.</li>  *<li>If Multipart is in use, binary parts are mapped as Camel IN message attachments, while any others are mapped as IN message headers for convenience.  *      These classes are considered binary: Attachment, DataHandler, DataSource, InputStream. Additionally, the original {@link MessageContentsList} is  *      preserved as the message body.</li>  *</ul>  *   * For example, the following JAX-RS method signatures are supported, with the specified outcomes:  *<p />  *   *<b><tt>public Response doAction(BusinessObject request);</tt></b><br />  * Request payload is placed in IN message body, replacing the original {@link MessageContentsList}.  *<p />  *   *<b><tt>public Response doAction(BusinessObject request, @HeaderParam("abcd") String abcd, @QueryParam("defg") String defg);</tt></b><br/>  * Request payload placed in IN message body, replacing the original {@link MessageContentsList}.   * Both request params mapped as IN message headers with names<tt>abcd</tt> and<tt>defg</tt>.  *<p />  *   *<b><tt>public Response doAction(@HeaderParam("abcd") String abcd, @QueryParam("defg") String defg);</tt></b><br/>  * Both request params mapped as IN message headers with names<tt>abcd</tt> and<tt>defg</tt>.   * The original {@link MessageContentsList} is preserved, even though it only contains the 2 parameters.  *<p />  *   *<b><tt>public Response doAction(@Multipart(value="body1", type="application/json") BusinessObject request, @Multipart(value="image",   *          type="image/jpeg") DataHandler image);</tt></b><br/>  * The first parameter is transferred as a POJO in a header named<tt>body1</tt>, while the second parameter gets injected as an    * attachment with name<tt>image</tt>. The MIME type is observed by the CXF stack. The IN message body is the original   * {@link MessageContentsList} handed over from CXF.  *<p />  *   *<b><tt>public Response doAction(InputStream abcd);</tt></b><br/>  * The InputStream is unwrapped from the {@link MessageContentsList} and preserved as the IN message body.  *<p />  *   *<b><tt>public Response doAction(DataHandler abcd);</tt></b><br/>  * The DataHandler is unwrapped from the {@link MessageContentsList} and preserved as the IN message body.  *   */
end_comment

begin_class
DECL|class|SimpleCxfRsBinding
specifier|public
class|class
name|SimpleCxfRsBinding
extends|extends
name|DefaultCxfRsBinding
block|{
comment|/** The JAX-RS annotations to be injected as headers in the IN message */
DECL|field|HEADER_ANNOTATIONS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|HEADER_ANNOTATIONS
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|CookieParam
operator|.
name|class
operator|,
name|FormParam
operator|.
name|class
operator|,
name|PathParam
operator|.
name|class
operator|,
name|HeaderParam
operator|.
name|class
operator|,
name|MatrixParam
operator|.
name|class
operator|,
name|QueryParam
operator|.
name|class
block|}
block|)
end_class

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_decl_stmt
DECL|field|BINARY_ATTACHMENT_TYPES
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|BINARY_ATTACHMENT_TYPES
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Attachment
operator|.
name|class
operator|,
name|DataHandler
operator|.
name|class
operator|,
name|DataSource
operator|.
name|class
operator|,
name|InputStream
operator|.
name|class
operator|,
block|}
end_decl_stmt

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_decl_stmt
DECL|field|NO_PARAMETER_TYPES
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|NO_PARAMETER_TYPES
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|NO_PARAMETERS
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|NO_PARAMETERS
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** Caches the Method to Parameters associations to avoid reflection with every request */
end_comment

begin_decl_stmt
DECL|field|methodSpecCache
specifier|private
name|Map
argument_list|<
name|Method
argument_list|,
name|MethodSpec
argument_list|>
name|methodSpecCache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
DECL|method|populateExchangeFromCxfRsRequest (Exchange cxfExchange, org.apache.camel.Exchange camelExchange, Method method, Object[] paramArray)
specifier|public
name|void
name|populateExchangeFromCxfRsRequest
parameter_list|(
name|Exchange
name|cxfExchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|paramArray
parameter_list|)
block|{
name|super
operator|.
name|populateExchangeFromCxfRsRequest
argument_list|(
name|cxfExchange
argument_list|,
name|camelExchange
argument_list|,
name|method
argument_list|,
name|paramArray
argument_list|)
expr_stmt|;
name|Message
name|in
init|=
name|camelExchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|bindHeadersFromSubresourceLocators
argument_list|(
name|cxfExchange
argument_list|,
name|camelExchange
argument_list|)
expr_stmt|;
name|MethodSpec
name|spec
init|=
name|methodSpecCache
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|spec
operator|==
literal|null
condition|)
block|{
name|spec
operator|=
name|MethodSpec
operator|.
name|fromMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|methodSpecCache
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|spec
argument_list|)
expr_stmt|;
block|}
name|bindParameters
argument_list|(
name|in
argument_list|,
name|paramArray
argument_list|,
name|spec
operator|.
name|paramNames
argument_list|,
name|spec
operator|.
name|numberParameters
argument_list|)
expr_stmt|;
name|bindBody
argument_list|(
name|in
argument_list|,
name|paramArray
argument_list|,
name|spec
operator|.
name|entityIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|spec
operator|.
name|multipart
condition|)
block|{
name|transferMultipartParameters
argument_list|(
name|paramArray
argument_list|,
name|spec
operator|.
name|multipartNames
argument_list|,
name|spec
operator|.
name|multipartTypes
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|populateCxfRsResponseFromExchange (org.apache.camel.Exchange camelExchange, Exchange cxfExchange)
specifier|public
name|Object
name|populateCxfRsResponseFromExchange
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
parameter_list|,
name|Exchange
name|cxfExchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|base
init|=
name|super
operator|.
name|populateCxfRsResponseFromExchange
argument_list|(
name|camelExchange
argument_list|,
name|cxfExchange
argument_list|)
decl_stmt|;
return|return
name|buildResponse
argument_list|(
name|camelExchange
argument_list|,
name|base
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Builds the response for the client.      *<p />      * Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour.      * If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers.      * @param camelExchange      * @param base      * @return      */
end_comment

begin_function
DECL|method|buildResponse (org.apache.camel.Exchange camelExchange, Object base)
specifier|protected
name|Object
name|buildResponse
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
parameter_list|,
name|Object
name|base
parameter_list|)
block|{
name|Message
name|m
init|=
name|camelExchange
operator|.
name|hasOut
argument_list|()
condition|?
name|camelExchange
operator|.
name|getOut
argument_list|()
else|:
name|camelExchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|ResponseBuilder
name|response
decl_stmt|;
comment|// if the body is different to Response, it's an entity; therefore, check
if|if
condition|(
name|base
operator|instanceof
name|Response
condition|)
block|{
name|response
operator|=
name|Response
operator|.
name|fromResponse
argument_list|(
operator|(
name|Response
operator|)
name|base
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|status
init|=
name|m
operator|.
name|getHeader
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|=
name|Response
operator|.
name|status
argument_list|(
name|status
argument_list|)
expr_stmt|;
comment|// avoid using the request MessageContentsList as the entity; it simply doesn't make sense
if|if
condition|(
name|base
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|base
operator|instanceof
name|MessageContentsList
operator|)
condition|)
block|{
name|response
operator|.
name|entity
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Compute which headers to transfer by applying the HeaderFilterStrategy, and transfer them to the JAX-RS Response
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headersToPropagate
init|=
name|filterCamelHeadersForResponseHeaders
argument_list|(
name|m
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|camelExchange
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|headersToPropagate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|response
operator|.
name|header
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Filters the response headers that will be sent back to the client.      *<p />      * The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},       * so we handle this task in this binding.      */
end_comment

begin_function
DECL|method|filterCamelHeadersForResponseHeaders (Map<String, Object> headers, org.apache.camel.Exchange camelExchange)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterCamelHeadersForResponseHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|answer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|getHeaderFilterStrategy
argument_list|()
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|camelExchange
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// skip content-length as the simple binding with Response will set correct content-length based
comment|// on the entity set as the Response
if|if
condition|(
literal|"content-length"
operator|.
name|equalsIgnoreCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|answer
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
end_function

begin_comment
comment|/**      * Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.      */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|bindHeadersFromSubresourceLocators (Exchange cxfExchange, org.apache.camel.Exchange camelExchange)
specifier|protected
name|void
name|bindHeadersFromSubresourceLocators
parameter_list|(
name|Exchange
name|cxfExchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|camelExchange
parameter_list|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pathParams
init|=
operator|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|cxfExchange
operator|.
name|getInMessage
argument_list|()
operator|.
name|get
argument_list|(
name|URITemplate
operator|.
name|TEMPLATE_PARAMETERS
argument_list|)
decl_stmt|;
comment|// return immediately if we have no path parameters
if|if
condition|(
name|pathParams
operator|==
literal|null
operator|||
operator|(
name|pathParams
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|pathParams
operator|.
name|containsKey
argument_list|(
name|URITemplate
operator|.
name|FINAL_MATCH_GROUP
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
name|Message
name|m
init|=
name|camelExchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|pathParams
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// skip over the FINAL_MATCH_GROUP which stores the entire path
if|if
condition|(
name|URITemplate
operator|.
name|FINAL_MATCH_GROUP
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|m
operator|.
name|setHeader
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.      *       * @param in      * @param paramArray      * @param paramNames      * @param numberParameters      */
end_comment

begin_function
DECL|method|bindParameters (Message in, Object[] paramArray, String[] paramNames, int numberParameters)
specifier|protected
name|void
name|bindParameters
parameter_list|(
name|Message
name|in
parameter_list|,
name|Object
index|[]
name|paramArray
parameter_list|,
name|String
index|[]
name|paramNames
parameter_list|,
name|int
name|numberParameters
parameter_list|)
block|{
if|if
condition|(
name|numberParameters
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|paramNames
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|setHeader
argument_list|(
name|paramNames
index|[
name|i
index|]
argument_list|,
name|paramArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Binds the message body.      *       * @param in      * @param paramArray      * @param singleBodyIndex      */
end_comment

begin_function
DECL|method|bindBody (Message in, Object[] paramArray, int singleBodyIndex)
specifier|protected
name|void
name|bindBody
parameter_list|(
name|Message
name|in
parameter_list|,
name|Object
index|[]
name|paramArray
parameter_list|,
name|int
name|singleBodyIndex
parameter_list|)
block|{
if|if
condition|(
name|singleBodyIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
name|in
operator|.
name|setBody
argument_list|(
name|paramArray
index|[
name|singleBodyIndex
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|transferMultipartParameters (Object[] paramArray, String[] multipartNames, String[] multipartTypes, Message in)
specifier|private
name|void
name|transferMultipartParameters
parameter_list|(
name|Object
index|[]
name|paramArray
parameter_list|,
name|String
index|[]
name|multipartNames
parameter_list|,
name|String
index|[]
name|multipartTypes
parameter_list|,
name|Message
name|in
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multipartNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|multipartNames
index|[
name|i
index|]
operator|==
literal|null
operator|||
name|paramArray
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|BINARY_ATTACHMENT_TYPES
operator|.
name|contains
argument_list|(
name|paramArray
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|transferBinaryMultipartParameter
argument_list|(
name|paramArray
index|[
name|i
index|]
argument_list|,
name|multipartNames
index|[
name|i
index|]
argument_list|,
name|multipartTypes
index|[
name|i
index|]
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|.
name|setHeader
argument_list|(
name|multipartNames
index|[
name|i
index|]
argument_list|,
name|paramArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|transferBinaryMultipartParameter (Object toMap, String parameterName, String multipartType, Message in)
specifier|private
name|void
name|transferBinaryMultipartParameter
parameter_list|(
name|Object
name|toMap
parameter_list|,
name|String
name|parameterName
parameter_list|,
name|String
name|multipartType
parameter_list|,
name|Message
name|in
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Attachment
name|dh
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|toMap
operator|instanceof
name|Attachment
condition|)
block|{
name|dh
operator|=
name|createCamelAttachment
argument_list|(
operator|(
name|Attachment
operator|)
name|toMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toMap
operator|instanceof
name|DataSource
condition|)
block|{
name|dh
operator|=
operator|new
name|DefaultAttachment
argument_list|(
operator|(
name|DataSource
operator|)
name|toMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toMap
operator|instanceof
name|DataHandler
condition|)
block|{
name|dh
operator|=
operator|new
name|DefaultAttachment
argument_list|(
operator|(
name|DataHandler
operator|)
name|toMap
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|toMap
operator|instanceof
name|InputStream
condition|)
block|{
name|dh
operator|=
operator|new
name|DefaultAttachment
argument_list|(
operator|new
name|InputStreamDataSource
argument_list|(
operator|(
name|InputStream
operator|)
name|toMap
argument_list|,
name|multipartType
operator|==
literal|null
condition|?
literal|"application/octet-stream"
else|:
name|multipartType
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dh
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|addAttachmentObject
argument_list|(
name|parameterName
argument_list|,
name|dh
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|createCamelAttachment (Attachment attachment)
specifier|private
name|DefaultAttachment
name|createCamelAttachment
parameter_list|(
name|Attachment
name|attachment
parameter_list|)
block|{
name|DefaultAttachment
name|camelAttachment
init|=
operator|new
name|DefaultAttachment
argument_list|(
name|attachment
operator|.
name|getDataHandler
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|attachment
operator|.
name|getHeaders
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|value
range|:
name|attachment
operator|.
name|getHeaderAsList
argument_list|(
name|name
argument_list|)
control|)
block|{
name|camelAttachment
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|camelAttachment
return|;
block|}
end_function

begin_class
DECL|class|MethodSpec
specifier|protected
specifier|static
class|class
name|MethodSpec
block|{
DECL|field|multipart
specifier|private
name|boolean
name|multipart
decl_stmt|;
DECL|field|numberParameters
specifier|private
name|int
name|numberParameters
decl_stmt|;
DECL|field|entityIndex
specifier|private
name|int
name|entityIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|paramNames
specifier|private
name|String
index|[]
name|paramNames
decl_stmt|;
DECL|field|multipartNames
specifier|private
name|String
index|[]
name|multipartNames
decl_stmt|;
DECL|field|multipartTypes
specifier|private
name|String
index|[]
name|multipartTypes
decl_stmt|;
comment|/**          * Processes this method definition and extracts metadata relevant for the binding process.          * @param method The Method to process.          * @return A MethodSpec instance representing the method metadata relevant to the Camel binding process.          */
DECL|method|fromMethod (Method method)
specifier|public
specifier|static
name|MethodSpec
name|fromMethod
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|MethodSpec
name|answer
init|=
operator|new
name|MethodSpec
argument_list|()
decl_stmt|;
name|Annotation
index|[]
index|[]
name|annotations
init|=
name|method
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
name|int
name|paramCount
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
decl_stmt|;
name|answer
operator|.
name|paramNames
operator|=
operator|new
name|String
index|[
name|paramCount
index|]
expr_stmt|;
name|answer
operator|.
name|multipartNames
operator|=
operator|new
name|String
index|[
name|paramCount
index|]
expr_stmt|;
name|answer
operator|.
name|multipartTypes
operator|=
operator|new
name|String
index|[
name|paramCount
index|]
expr_stmt|;
comment|// remember the names of parameters to be bound to headers and/or attachments
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paramCount
condition|;
name|i
operator|++
control|)
block|{
comment|// if the parameter has no annotations, let its array element remain = null
for|for
control|(
name|Annotation
name|a
range|:
name|annotations
index|[
name|i
index|]
control|)
block|{
comment|// am I a header?
if|if
condition|(
name|HEADER_ANNOTATIONS
operator|.
name|contains
argument_list|(
name|a
operator|.
name|annotationType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|answer
operator|.
name|paramNames
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|a
operator|.
name|annotationType
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"value"
argument_list|,
name|NO_PARAMETER_TYPES
argument_list|)
operator|.
name|invoke
argument_list|(
name|a
argument_list|,
name|NO_PARAMETERS
argument_list|)
expr_stmt|;
name|answer
operator|.
name|numberParameters
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{ }
block|}
comment|// am I multipart?
if|if
condition|(
name|Multipart
operator|.
name|class
operator|.
name|equals
argument_list|(
name|a
operator|.
name|annotationType
argument_list|()
argument_list|)
condition|)
block|{
name|Multipart
name|multipart
init|=
operator|(
name|Multipart
operator|)
name|a
decl_stmt|;
name|answer
operator|.
name|multipart
operator|=
literal|true
expr_stmt|;
name|answer
operator|.
name|multipartNames
index|[
name|i
index|]
operator|=
name|multipart
operator|.
name|value
argument_list|()
expr_stmt|;
name|answer
operator|.
name|multipartTypes
index|[
name|i
index|]
operator|=
name|multipart
operator|.
name|type
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// if we are not multipart and the number of detected JAX-RS parameters (query, headers, etc.) is less than the number of method parameters
comment|// there's one parameter that will serve as message body
if|if
condition|(
operator|!
name|answer
operator|.
name|multipart
operator|&&
name|answer
operator|.
name|numberParameters
operator|<
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|answer
operator|.
name|paramNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|answer
operator|.
name|paramNames
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|answer
operator|.
name|entityIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

unit|}
end_unit

