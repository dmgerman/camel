begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
DECL|class|NodeListWrapper
specifier|public
class|class
name|NodeListWrapper
implements|implements
name|NodeList
block|{
DECL|field|elementList
name|List
argument_list|<
name|Element
argument_list|>
name|elementList
decl_stmt|;
DECL|method|NodeListWrapper (List<Element> elementList)
specifier|public
name|NodeListWrapper
parameter_list|(
name|List
argument_list|<
name|Element
argument_list|>
name|elementList
parameter_list|)
block|{
name|this
operator|.
name|elementList
operator|=
name|elementList
expr_stmt|;
block|}
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|elementList
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|item (int index)
specifier|public
name|Node
name|item
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|elementList
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
end_class

end_unit

