begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.interceptors
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|util
operator|.
name|CxfUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|OutgoingChainInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_comment
comment|//closes UnitOfWork in good case
end_comment

begin_class
DECL|class|UnitOfWorkCloserInterceptor
specifier|public
class|class
name|UnitOfWorkCloserInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
DECL|field|handleOneWayMessage
name|boolean
name|handleOneWayMessage
decl_stmt|;
DECL|method|UnitOfWorkCloserInterceptor (String phase, boolean handleOneWayMessage)
specifier|public
name|UnitOfWorkCloserInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|boolean
name|handleOneWayMessage
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
comment|// Just make sure this interceptor is add after the OutgoingChainInterceptor
if|if
condition|(
name|phase
operator|.
name|equals
argument_list|(
name|Phase
operator|.
name|POST_INVOKE
argument_list|)
condition|)
block|{
name|addAfter
argument_list|(
name|OutgoingChainInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|handleOneWayMessage
operator|=
name|handleOneWayMessage
expr_stmt|;
block|}
DECL|method|UnitOfWorkCloserInterceptor ()
specifier|public
name|UnitOfWorkCloserInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|POST_LOGICAL_ENDING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleMessage (Message message)
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
if|if
condition|(
name|handleOneWayMessage
condition|)
block|{
if|if
condition|(
name|isOneWay
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|CxfUtils
operator|.
name|closeCamelUnitOfWork
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Just do the normal process
name|CxfUtils
operator|.
name|closeCamelUnitOfWork
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isOneWay (Message message)
specifier|private
name|boolean
name|isOneWay
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|binding
init|=
name|ex
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|binding
operator|&&
literal|null
operator|!=
name|binding
operator|.
name|getOperationInfo
argument_list|()
operator|&&
name|binding
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

