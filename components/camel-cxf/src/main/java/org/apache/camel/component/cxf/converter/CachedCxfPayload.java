begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|stream
operator|.
name|StreamSourceCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CachedCxfPayload
specifier|public
class|class
name|CachedCxfPayload
parameter_list|<
name|T
parameter_list|>
extends|extends
name|CxfPayload
argument_list|<
name|T
argument_list|>
implements|implements
name|StreamCache
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedCxfPayload
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|xml
specifier|private
specifier|final
name|XmlConverter
name|xml
decl_stmt|;
DECL|method|CachedCxfPayload (CxfPayload<T> orig, Exchange exchange, XmlConverter xml)
specifier|public
name|CachedCxfPayload
parameter_list|(
name|CxfPayload
argument_list|<
name|T
argument_list|>
name|orig
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|XmlConverter
name|xml
parameter_list|)
block|{
name|super
argument_list|(
name|orig
operator|.
name|getHeaders
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Source
argument_list|>
argument_list|(
name|orig
operator|.
name|getBodySources
argument_list|()
argument_list|)
argument_list|,
name|orig
operator|.
name|getNsMap
argument_list|()
argument_list|)
expr_stmt|;
name|ListIterator
argument_list|<
name|Source
argument_list|>
name|li
init|=
name|getBodySources
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|this
operator|.
name|xml
operator|=
name|xml
expr_stmt|;
while|while
condition|(
name|li
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Source
name|source
init|=
name|li
operator|.
name|next
argument_list|()
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
literal|null
decl_stmt|;
comment|// namespace definitions that are on the SOAP envelope can get lost, if this is
comment|// not a DOM (there is special coding on the CXFPayload.getBody().get() method for
comment|// this, that only works on DOM nodes.
comment|// We have to do some delegation on the XMLStreamReader for StAXSource and StaxSource
comment|// that re-injects the missing namespaces into the XMLStreamReader.
comment|// Replace all other Sources that are not DOMSources with DOMSources.
if|if
condition|(
name|source
operator|instanceof
name|StaxSource
condition|)
block|{
name|reader
operator|=
operator|(
operator|(
name|StaxSource
operator|)
name|source
operator|)
operator|.
name|getXMLStreamReader
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StAXSource
condition|)
block|{
name|reader
operator|=
operator|(
operator|(
name|StAXSource
operator|)
name|source
operator|)
operator|.
name|getXMLStreamReader
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsmap
init|=
name|getNsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsmap
operator|==
literal|null
condition|)
block|{
name|nsmap
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
name|source
operator|=
operator|new
name|StAXSource
argument_list|(
operator|new
name|DelegatingXMLStreamReader
argument_list|(
name|reader
argument_list|,
name|nsmap
argument_list|)
argument_list|)
expr_stmt|;
name|StreamSource
name|streamSource
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|StreamSource
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|li
operator|.
name|set
argument_list|(
operator|new
name|StreamSourceCache
argument_list|(
name|streamSource
argument_list|,
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cannot Create StreamSourceCache "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|source
operator|instanceof
name|DOMSource
operator|)
condition|)
block|{
name|Document
name|document
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|exchange
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|li
operator|.
name|set
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|CachedCxfPayload (CachedCxfPayload<T> orig, Exchange exchange)
specifier|private
name|CachedCxfPayload
parameter_list|(
name|CachedCxfPayload
argument_list|<
name|T
argument_list|>
name|orig
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|orig
operator|.
name|getHeaders
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Source
argument_list|>
argument_list|(
name|orig
operator|.
name|getBodySources
argument_list|()
argument_list|)
argument_list|,
name|orig
operator|.
name|getNsMap
argument_list|()
argument_list|)
expr_stmt|;
name|ListIterator
argument_list|<
name|Source
argument_list|>
name|li
init|=
name|getBodySources
argument_list|()
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|this
operator|.
name|xml
operator|=
name|orig
operator|.
name|xml
expr_stmt|;
while|while
condition|(
name|li
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Source
name|source
init|=
name|li
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|StreamCache
condition|)
block|{
name|li
operator|.
name|set
argument_list|(
call|(
name|Source
call|)
argument_list|(
operator|(
operator|(
name|StreamCache
operator|)
name|source
operator|)
argument_list|)
operator|.
name|copy
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
for|for
control|(
name|Source
name|source
range|:
name|getBodySources
argument_list|()
control|)
block|{
if|if
condition|(
name|source
operator|instanceof
name|StreamCache
condition|)
block|{
operator|(
operator|(
name|StreamCache
operator|)
name|source
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|writeTo (OutputStream os)
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no body no write
if|if
condition|(
name|getBodySources
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|Source
name|body
init|=
name|getBodySources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|StreamCache
condition|)
block|{
operator|(
operator|(
name|StreamCache
operator|)
name|body
operator|)
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StreamResult
name|sr
init|=
operator|new
name|StreamResult
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
name|xml
operator|.
name|toResult
argument_list|(
name|body
argument_list|,
name|sr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Transformation failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|inMemory ()
specifier|public
name|boolean
name|inMemory
parameter_list|()
block|{
name|boolean
name|inMemory
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Source
name|source
range|:
name|getBodySources
argument_list|()
control|)
block|{
if|if
condition|(
name|source
operator|instanceof
name|StreamCache
operator|&&
operator|!
operator|(
operator|(
name|StreamCache
operator|)
name|source
operator|)
operator|.
name|inMemory
argument_list|()
condition|)
block|{
name|inMemory
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|inMemory
return|;
block|}
annotation|@
name|Override
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|copy (Exchange exchange)
specifier|public
name|StreamCache
name|copy
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|CachedCxfPayload
argument_list|<
name|T
argument_list|>
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
return|;
block|}
block|}
end_class

end_unit

