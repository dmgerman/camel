begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.interceptors
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_comment
comment|/**  * This is the base class for message interceptors that intercepts  * binding specific headers and message parts as DOM Element.  * Then moves dom elements between header and message part list based on the  * binding operation info provided in the exchange.  */
end_comment

begin_class
DECL|class|AbstractMessageOutInterceptor
specifier|public
specifier|abstract
class|class
name|AbstractMessageOutInterceptor
parameter_list|<
name|T
extends|extends
name|Message
parameter_list|>
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|T
argument_list|>
block|{
DECL|method|AbstractMessageOutInterceptor (String phase)
specifier|public
name|AbstractMessageOutInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
DECL|method|isRequestor (Message message)
specifier|protected
name|boolean
name|isRequestor
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|REQUESTOR_ROLE
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getLogger ()
specifier|protected
specifier|abstract
name|Logger
name|getLogger
parameter_list|()
function_decl|;
DECL|method|createElement (QName elName, List<Element> childEl)
specifier|protected
name|Element
name|createElement
parameter_list|(
name|QName
name|elName
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|childEl
parameter_list|)
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|elName
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|StringBuilder
name|tagName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|tagName
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|tagName
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|tagName
operator|.
name|append
argument_list|(
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|el
init|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|tagName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|elName
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|StringBuilder
name|attrName
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"xmlns"
argument_list|)
decl_stmt|;
name|attrName
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|attrName
operator|.
name|append
argument_list|(
name|elName
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|setAttribute
argument_list|(
name|attrName
operator|.
name|toString
argument_list|()
argument_list|,
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Element
name|part
range|:
name|childEl
control|)
block|{
name|Node
name|adoptedNode
init|=
name|doc
operator|.
name|adoptNode
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|el
operator|.
name|appendChild
argument_list|(
name|adoptedNode
argument_list|)
expr_stmt|;
block|}
return|return
name|el
return|;
block|}
block|}
end_class

end_unit

