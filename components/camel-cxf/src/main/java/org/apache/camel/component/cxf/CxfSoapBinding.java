begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|util
operator|.
name|CxfHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultHeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_class
DECL|class|CxfSoapBinding
specifier|public
specifier|final
class|class
name|CxfSoapBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CxfSoapBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CxfSoapBinding ()
specifier|private
name|CxfSoapBinding
parameter_list|()
block|{      }
comment|/**      * @deprecated  Please use {@link #getCxfInMessage(HeaderFilterStrategy, org.apache.camel.Exchange, boolean)}      */
DECL|method|getCxfInMessage (org.apache.camel.Exchange exchange, boolean isClient)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|getCxfInMessage
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|isClient
parameter_list|)
block|{
return|return
name|CxfSoapBinding
operator|.
name|getCxfInMessage
argument_list|(
operator|new
name|DefaultHeaderFilterStrategy
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|isClient
argument_list|)
return|;
block|}
DECL|method|getCxfInMessage (HeaderFilterStrategy headerFilterStrategy, org.apache.camel.Exchange exchange, boolean isClient)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|getCxfInMessage
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|isClient
parameter_list|)
block|{
name|MessageImpl
name|answer
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|CXF_EXCHANGE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isClient
condition|)
block|{
name|message
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
assert|assert
name|message
operator|!=
literal|null
assert|;
if|if
condition|(
name|cxfExchange
operator|==
literal|null
condition|)
block|{
name|cxfExchange
operator|=
operator|new
name|ExchangeImpl
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|CxfConstants
operator|.
name|CXF_EXCHANGE
argument_list|,
name|cxfExchange
argument_list|)
expr_stmt|;
block|}
name|CxfHeaderHelper
operator|.
name|propagateCamelToCxf
argument_list|(
name|headerFilterStrategy
argument_list|,
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|InputStream
condition|)
block|{
name|answer
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't get right InputStream object here, the message body is "
operator|+
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setExchange
argument_list|(
name|cxfExchange
argument_list|)
expr_stmt|;
name|cxfExchange
operator|.
name|setInMessage
argument_list|(
name|answer
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
comment|/**      * @deprecated Please use {@link #getCxfOutMessage(HeaderFilterStrategy, org.apache.camel.Exchange, boolean)}      */
DECL|method|getCxfOutMessage (org.apache.camel.Exchange exchange, boolean isClient)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|getCxfOutMessage
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|isClient
parameter_list|)
block|{
return|return
name|CxfSoapBinding
operator|.
name|getCxfOutMessage
argument_list|(
operator|new
name|DefaultHeaderFilterStrategy
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|isClient
argument_list|)
return|;
block|}
DECL|method|getCxfOutMessage (HeaderFilterStrategy headerFilterStrategy, org.apache.camel.Exchange exchange, boolean isClient)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|getCxfOutMessage
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|isClient
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|CxfConstants
operator|.
name|CXF_EXCHANGE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|cxfExchange
operator|!=
literal|null
assert|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
name|cxfEndpoint
init|=
name|cxfExchange
operator|.
name|get
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
name|outMessage
init|=
name|cxfEndpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|outMessage
operator|.
name|setExchange
argument_list|(
name|cxfExchange
argument_list|)
expr_stmt|;
name|cxfExchange
operator|.
name|setOutMessage
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isClient
condition|)
block|{
name|message
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|exchange
operator|.
name|getOut
argument_list|()
expr_stmt|;
block|}
name|CxfHeaderHelper
operator|.
name|propagateCamelToCxf
argument_list|(
name|headerFilterStrategy
argument_list|,
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
comment|// send the body back
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|(
name|Source
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|Source
condition|)
block|{
name|outMessage
operator|.
name|setContent
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't get right Source object here, the message body is "
operator|+
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outMessage
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|outMessage
return|;
block|}
comment|/**      * @deprecated Please use {@link CxfHeaderHelper#propagateCxfToCamel(HeaderFilterStrategy, org.apache.cxf.message.Message, Map)}      */
DECL|method|setProtocolHeader (Map<String, Object> headers, Map<String, List<String>> protocolHeader)
specifier|public
specifier|static
name|void
name|setProtocolHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|protocolHeader
parameter_list|)
block|{
if|if
condition|(
name|protocolHeader
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|protocolHeader
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|value
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
name|value
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

