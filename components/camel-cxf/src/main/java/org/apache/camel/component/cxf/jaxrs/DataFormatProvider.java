begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.jaxrs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|InternalServerErrorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ext
operator|.
name|MessageBodyWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|utils
operator|.
name|JAXRSUtils
import|;
end_import

begin_class
DECL|class|DataFormatProvider
specifier|public
class|class
name|DataFormatProvider
parameter_list|<
name|T
parameter_list|>
implements|implements
name|MessageBodyWriter
argument_list|<
name|T
argument_list|>
implements|,
name|MessageBodyReader
argument_list|<
name|T
argument_list|>
block|{
DECL|field|formats
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormat
argument_list|>
name|formats
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|isReadable (Class<?> cls, Type type, Annotation[] anns, MediaType mt)
specifier|public
name|boolean
name|isReadable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|getDataFormat
argument_list|(
name|mt
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|isWriteable (Class<?> cls, Type type, Annotation[] anns, MediaType mt)
specifier|public
name|boolean
name|isWriteable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
name|getDataFormat
argument_list|(
name|mt
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom (Class<T> cls, Type type, Annotation[] anns, MediaType mt, MultivaluedMap<String, String> headers, InputStream is)
specifier|public
name|T
name|readFrom
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|DataFormat
name|format
init|=
name|getValidDataFormat
argument_list|(
name|mt
argument_list|)
decl_stmt|;
try|try
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|T
name|result
init|=
operator|(
name|T
operator|)
name|format
operator|.
name|unmarshal
argument_list|(
literal|null
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSize (T obj, Class<?> cls, Type type, Annotation[] anns, MediaType mt)
specifier|public
name|long
name|getSize
parameter_list|(
name|T
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo (T obj, Class<?> cls, Type type, Annotation[] anns, MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os)
specifier|public
name|void
name|writeTo
parameter_list|(
name|T
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Type
name|type
parameter_list|,
name|Annotation
index|[]
name|anns
parameter_list|,
name|MediaType
name|mt
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|DataFormat
name|format
init|=
name|getValidDataFormat
argument_list|(
name|mt
argument_list|)
decl_stmt|;
try|try
block|{
name|format
operator|.
name|marshal
argument_list|(
literal|null
argument_list|,
name|obj
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|InternalServerErrorException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|setFormat (DataFormat format)
specifier|public
name|void
name|setFormat
parameter_list|(
name|DataFormat
name|format
parameter_list|)
block|{
name|setFormat
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
DECL|method|setFormat (String mediaType, DataFormat format)
specifier|public
name|void
name|setFormat
parameter_list|(
name|String
name|mediaType
parameter_list|,
name|DataFormat
name|format
parameter_list|)
block|{
name|formats
operator|.
name|put
argument_list|(
name|mediaType
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
DECL|method|setFormats (Map<String, DataFormat> formats)
specifier|public
name|void
name|setFormats
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|DataFormat
argument_list|>
name|formats
parameter_list|)
block|{
name|this
operator|.
name|formats
operator|.
name|putAll
argument_list|(
name|formats
argument_list|)
expr_stmt|;
block|}
DECL|method|getValidDataFormat (MediaType mt)
specifier|private
name|DataFormat
name|getValidDataFormat
parameter_list|(
name|MediaType
name|mt
parameter_list|)
block|{
name|DataFormat
name|format
init|=
name|getDataFormat
argument_list|(
name|mt
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InternalServerErrorException
argument_list|()
throw|;
block|}
return|return
name|format
return|;
block|}
DECL|method|getDataFormat (MediaType mt)
specifier|private
name|DataFormat
name|getDataFormat
parameter_list|(
name|MediaType
name|mt
parameter_list|)
block|{
name|String
name|type
init|=
name|JAXRSUtils
operator|.
name|mediaTypeToString
argument_list|(
name|mt
argument_list|)
decl_stmt|;
name|DataFormat
name|format
init|=
name|formats
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
block|{
return|return
name|format
return|;
block|}
name|int
name|subtypeIndex
init|=
name|type
operator|.
name|lastIndexOf
argument_list|(
literal|'+'
argument_list|)
decl_stmt|;
if|if
condition|(
name|subtypeIndex
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// example, application/json+v1, should still be handled by JSON
comment|// handler, etc
name|format
operator|=
name|formats
operator|.
name|get
argument_list|(
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|subtypeIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|==
literal|null
operator|&&
name|formats
operator|.
name|containsKey
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
condition|)
block|{
name|format
operator|=
name|formats
operator|.
name|get
argument_list|(
name|MediaType
operator|.
name|WILDCARD
argument_list|)
expr_stmt|;
block|}
return|return
name|format
return|;
block|}
block|}
end_class

end_unit

