begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.jaxrs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxrs
operator|.
name|JAXRSServerFactoryBean
import|;
end_import

begin_comment
comment|/**  * A Endpoint class that represents a CXF JAX-RS endpoint.  *   * @version $Revision$  */
end_comment

begin_class
DECL|class|CxfJaxrsEndpoint
specifier|public
class|class
name|CxfJaxrsEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|resourceClassnames
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|resourceClassnames
decl_stmt|;
DECL|method|CxfJaxrsEndpoint (String remaining, CxfJaxrsComponent component)
specifier|public
name|CxfJaxrsEndpoint
parameter_list|(
name|String
name|remaining
parameter_list|,
name|CxfJaxrsComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|remaining
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|CxfJaxrsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
comment|/**      * Producer for Jaxrs endpoint is not supported.  This method will throw      * {@link UnsupportedOperationException}.      */
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Producer is not supported"
argument_list|)
throw|;
block|}
comment|/**      * @param resourceClassnames the resourceClassnames to set      */
DECL|method|setResourceClassnames (List<String> resourceClassnames)
specifier|public
name|void
name|setResourceClassnames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|resourceClassnames
parameter_list|)
block|{
name|this
operator|.
name|resourceClassnames
operator|=
name|resourceClassnames
expr_stmt|;
block|}
comment|/**      * @return the resourceClassnames      */
DECL|method|getResourceClassnames ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResourceClassnames
parameter_list|()
block|{
return|return
name|resourceClassnames
return|;
block|}
comment|/**      * @return      */
DECL|method|createServerFactoryBean ()
specifier|public
name|JAXRSServerFactoryBean
name|createServerFactoryBean
parameter_list|()
throws|throws
name|Exception
block|{
name|JAXRSServerFactoryBean
name|answer
init|=
operator|new
name|JAXRSServerFactoryBean
argument_list|()
decl_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|resourceClassnames
argument_list|,
literal|"resourceClassnames is not set"
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setResourceClasses
argument_list|(
name|loadClasses
argument_list|(
name|resourceClassnames
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAddress
argument_list|(
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|loadClasses (List<String> classNames)
specifier|private
name|List
argument_list|<
name|Class
argument_list|>
name|loadClasses
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|classNames
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|List
argument_list|<
name|Class
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|className
range|:
name|classNames
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

