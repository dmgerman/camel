begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|CXFBusFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|CxfInvokeComponent
specifier|public
class|class
name|CxfInvokeComponent
extends|extends
name|DefaultComponent
argument_list|<
name|CxfExchange
argument_list|>
block|{
DECL|field|bus
specifier|private
name|Bus
name|bus
decl_stmt|;
DECL|method|CxfInvokeComponent ()
specifier|public
name|CxfInvokeComponent
parameter_list|()
block|{
name|bus
operator|=
name|CXFBusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
block|}
DECL|method|CxfInvokeComponent (CamelContext context)
specifier|public
name|CxfInvokeComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|bus
operator|=
name|CXFBusFactory
operator|.
name|getDefaultBus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map parameters)
specifier|protected
name|Endpoint
argument_list|<
name|CxfExchange
argument_list|>
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|CxfInvokeEndpoint
argument_list|(
name|getAddress
argument_list|(
name|remaining
argument_list|)
argument_list|,
name|this
argument_list|,
name|getQueryAsProperties
argument_list|(
operator|new
name|URI
argument_list|(
name|remaining
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Read query parameters from uri      *      * @param u      * @return parameter value pairs as properties      */
DECL|method|getQueryAsProperties (URI u)
specifier|protected
name|Properties
name|getQueryAsProperties
parameter_list|(
name|URI
name|u
parameter_list|)
block|{
name|Properties
name|retval
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|parameters
init|=
name|u
operator|.
name|getQuery
argument_list|()
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|s
init|=
name|parameters
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|retval
operator|.
name|put
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|,
name|s
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/**      * Remove query from uri      *      * @param uri      * @return substring before  the "?" character      */
DECL|method|getAddress (String uri)
specifier|protected
name|String
name|getAddress
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|int
name|index
init|=
name|uri
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|-
literal|1
operator|!=
name|index
condition|)
block|{
return|return
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
return|return
name|uri
return|;
block|}
DECL|method|getBus ()
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
block|}
end_class

end_unit

