begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.interceptors
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|interceptor
operator|.
name|SoapHeaderInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_comment
comment|/**  * This interceptor traverses the {@link BindingOperationInfo} and    * invokes the {@link MessagePartInfo#setTypeQName(javax.xml.namespace.QName)} method to set  * the service class to null.  The reason we may want to set the service class to null is   * because CXF will try to use JAXB if the service class is present.  It affects DomSource  * payload to be processed correctly.  *    * @version @Revision: 789534 $  */
end_comment

begin_class
DECL|class|RemoveClassTypeInterceptor
specifier|public
class|class
name|RemoveClassTypeInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
DECL|method|RemoveClassTypeInterceptor ()
specifier|public
name|RemoveClassTypeInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
name|SoapHeaderInterceptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|handleMessage (Message message)
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|BindingOperationInfo
name|bop
init|=
name|exchange
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|bop
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|bop
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
name|bop
operator|=
name|bop
operator|.
name|getWrappedOperation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bop
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getWrappedOperation
argument_list|()
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getWrappedOperation
argument_list|()
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getWrappedOperation
argument_list|()
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getWrappedOperation
argument_list|()
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
name|removePartTypeClass
argument_list|(
name|bop
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removePartTypeClass (BindingMessageInfo bmi)
specifier|protected
name|void
name|removePartTypeClass
parameter_list|(
name|BindingMessageInfo
name|bmi
parameter_list|)
block|{
if|if
condition|(
name|bmi
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|bmi
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|part
operator|.
name|setTypeClass
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removePartTypeClass (MessageInfo msgInfo)
specifier|protected
name|void
name|removePartTypeClass
parameter_list|(
name|MessageInfo
name|msgInfo
parameter_list|)
block|{
if|if
condition|(
name|msgInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|msgInfo
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|part
operator|.
name|setTypeClass
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

