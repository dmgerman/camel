begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|spring
operator|.
name|AbstractBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanDefinitionStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|AbstractBeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_class
DECL|class|AbstractCxfBeanDefinitionParser
specifier|public
specifier|abstract
class|class
name|AbstractCxfBeanDefinitionParser
extends|extends
name|AbstractBeanDefinitionParser
block|{
comment|/**      * Override mapToProperty() to handle the '#' reference notation ourselves.  We put those       * properties with '#' in property map and let component to invoke setProperties() on the      * endpoint.       */
annotation|@
name|Override
DECL|method|mapToProperty (BeanDefinitionBuilder bean, String propertyName, String val)
specifier|protected
name|void
name|mapToProperty
parameter_list|(
name|BeanDefinitionBuilder
name|bean
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|ID_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|StringUtils
operator|.
name|hasText
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|getPropertyMap
argument_list|(
name|bean
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bean
operator|.
name|addPropertyValue
argument_list|(
name|propertyName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doParse (Element element, ParserContext ctx, BeanDefinitionBuilder bean)
specifier|protected
name|void
name|doParse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|ctx
parameter_list|,
name|BeanDefinitionBuilder
name|bean
parameter_list|)
block|{
name|super
operator|.
name|doParse
argument_list|(
name|element
argument_list|,
name|ctx
argument_list|,
name|bean
argument_list|)
expr_stmt|;
name|bean
operator|.
name|setLazyInit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// put the bean id into the property map
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|getPropertyMap
argument_list|(
name|bean
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"beanId"
argument_list|,
name|resolveId
argument_list|(
name|element
argument_list|,
name|bean
operator|.
name|getBeanDefinition
argument_list|()
argument_list|,
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveId (Element elem, AbstractBeanDefinition definition, ParserContext ctx)
specifier|protected
name|String
name|resolveId
parameter_list|(
name|Element
name|elem
parameter_list|,
name|AbstractBeanDefinition
name|definition
parameter_list|,
name|ParserContext
name|ctx
parameter_list|)
throws|throws
name|BeanDefinitionStoreException
block|{
name|String
name|id
init|=
name|super
operator|.
name|resolveId
argument_list|(
name|elem
argument_list|,
name|definition
argument_list|,
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|BeanDefinitionStoreException
argument_list|(
literal|"The bean id is needed."
argument_list|)
throw|;
block|}
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|hasBusProperty ()
specifier|protected
name|boolean
name|hasBusProperty
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getPropertyMap (BeanDefinitionBuilder bean, boolean lazyInstantiation)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getPropertyMap
parameter_list|(
name|BeanDefinitionBuilder
name|bean
parameter_list|,
name|boolean
name|lazyInstantiation
parameter_list|)
block|{
name|PropertyValue
name|propertyValue
init|=
operator|(
name|PropertyValue
operator|)
name|bean
operator|.
name|getBeanDefinition
argument_list|()
operator|.
name|getPropertyValues
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propertyValue
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lazyInstantiation
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|bean
operator|.
name|addPropertyValue
argument_list|(
literal|"properties"
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|map
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|propertyValue
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

