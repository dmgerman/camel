begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.interceptors
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|//import java.util.ResourceBundle;
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|model
operator|.
name|SoapBindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|//import org.apache.cxf.common.i18n.BundleUtils;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_class
DECL|class|SoapMessageInInterceptor
specifier|public
class|class
name|SoapMessageInInterceptor
extends|extends
name|AbstractMessageInInterceptor
argument_list|<
name|SoapMessage
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SoapMessageInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SoapMessageInInterceptor ()
specifier|public
name|SoapMessageInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogger ()
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
DECL|method|isFaultMessage (SoapMessage message)
specifier|protected
name|boolean
name|isFaultMessage
parameter_list|(
name|SoapMessage
name|message
parameter_list|)
block|{
comment|//Fault Processing is Handled in SOAP Binding in the ReadHeadersInterceptor.
return|return
literal|false
return|;
block|}
DECL|method|getBindingOperation (SoapMessage message, Document doc)
specifier|protected
name|BindingOperationInfo
name|getBindingOperation
parameter_list|(
name|SoapMessage
name|message
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|SoapBindingInfo
name|soapBinding
init|=
operator|(
name|SoapBindingInfo
operator|)
name|ex
operator|.
name|get
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Element
name|payloadEl
init|=
operator|(
name|Element
operator|)
name|doc
operator|.
name|getChildNodes
argument_list|()
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QName
name|startQName
init|=
operator|new
name|QName
argument_list|(
name|payloadEl
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|payloadEl
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
comment|// handling xml normal inbound message
name|boolean
name|client
init|=
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BindingOperationInfo
argument_list|>
name|boiList
init|=
operator|new
name|ArrayList
argument_list|<
name|BindingOperationInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|soapBinding
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|String
name|style
init|=
name|soapBinding
operator|.
name|getStyle
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|rootName
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"rpc"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|rootName
operator|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|BindingMessageInfo
name|bmi
init|=
name|client
condition|?
name|boi
operator|.
name|getOutput
argument_list|()
else|:
name|boi
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|bmi
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|MessagePartInfo
argument_list|>
name|bodyParts
init|=
name|bmi
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
if|if
condition|(
name|bodyParts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|MessagePartInfo
name|p
init|=
name|bodyParts
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|rootName
operator|=
name|p
operator|.
name|getConcreteName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|startQName
operator|.
name|equals
argument_list|(
name|rootName
argument_list|)
condition|)
block|{
name|boiList
operator|.
name|add
argument_list|(
name|boi
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|boiList
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mulitple matching BindingOperationIno found in Binding."
argument_list|)
expr_stmt|;
block|}
return|return
name|boiList
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|?
literal|null
else|:
name|boiList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getPartList (SoapMessage inMessage, Element rootNode, BindingMessageInfo bmi)
specifier|protected
name|List
argument_list|<
name|Element
argument_list|>
name|getPartList
parameter_list|(
name|SoapMessage
name|inMessage
parameter_list|,
name|Element
name|rootNode
parameter_list|,
name|BindingMessageInfo
name|bmi
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|partList
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|Exchange
name|ex
init|=
name|inMessage
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|SoapBindingInfo
name|soapBinding
init|=
operator|(
name|SoapBindingInfo
operator|)
name|ex
operator|.
name|get
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|style
init|=
name|soapBinding
operator|.
name|getStyle
argument_list|(
name|bmi
operator|.
name|getBindingOperation
argument_list|()
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"rpc"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
comment|//Remove the operation element.
name|rootNode
operator|=
operator|(
name|Element
operator|)
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|rootNode
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
block|}
name|partList
operator|.
name|add
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
return|return
name|partList
return|;
block|}
DECL|method|getHeader (SoapMessage inMessage)
specifier|protected
name|Element
name|getHeader
parameter_list|(
name|SoapMessage
name|inMessage
parameter_list|)
block|{
comment|// need to find out the soap header information
name|Element
name|element
init|=
literal|null
decl_stmt|;
return|return
name|element
return|;
comment|// return inMessage.getHeaders(Element.class);
block|}
block|}
end_class

end_unit

