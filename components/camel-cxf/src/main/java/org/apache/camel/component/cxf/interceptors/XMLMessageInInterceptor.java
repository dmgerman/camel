begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.interceptors
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|interceptors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|xml
operator|.
name|XMLFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bindings
operator|.
name|xformat
operator|.
name|XMLBindingMessageFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|XMLMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
DECL|class|XMLMessageInInterceptor
specifier|public
class|class
name|XMLMessageInInterceptor
extends|extends
name|AbstractMessageInInterceptor
argument_list|<
name|XMLMessage
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XMLMessageInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|XMLMessageInInterceptor ()
specifier|public
name|XMLMessageInInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogger ()
specifier|protected
name|Logger
name|getLogger
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
DECL|method|isFaultMessage (XMLMessage message)
specifier|protected
name|boolean
name|isFaultMessage
parameter_list|(
name|XMLMessage
name|message
parameter_list|)
block|{
name|XMLStreamReader
name|xsr
init|=
name|message
operator|.
name|getContent
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|isFault
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|StaxUtils
operator|.
name|skipToStartOfElement
argument_list|(
name|xsr
argument_list|)
condition|)
block|{
name|QName
name|startQName
init|=
name|xsr
operator|.
name|getName
argument_list|()
decl_stmt|;
name|isFault
operator|=
name|XMLConstants
operator|.
name|NS_XML_FORMAT
operator|.
name|equals
argument_list|(
name|startQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|XMLFault
operator|.
name|XML_FAULT_ROOT
operator|.
name|equals
argument_list|(
name|startQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|xse
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"STAX_READ_EXC"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|isFault
return|;
block|}
DECL|method|getBindingOperation (XMLMessage message, Document doc)
specifier|protected
name|BindingOperationInfo
name|getBindingOperation
parameter_list|(
name|XMLMessage
name|message
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|Exchange
name|ex
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|BindingInfo
name|binding
init|=
name|ex
operator|.
name|get
argument_list|(
name|BindingInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|Endpoint
name|ep
init|=
name|ex
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|binding
operator|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
expr_stmt|;
block|}
comment|//TODO if binding is null throw exception.
name|Element
name|payloadEl
init|=
operator|(
name|Element
operator|)
name|doc
operator|.
name|getChildNodes
argument_list|()
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QName
name|startQName
init|=
operator|new
name|QName
argument_list|(
name|payloadEl
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|payloadEl
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
comment|// handling xml normal inbound message
name|boolean
name|client
init|=
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BindingOperationInfo
argument_list|>
name|boiList
init|=
operator|new
name|ArrayList
argument_list|<
name|BindingOperationInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|binding
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|BindingMessageInfo
name|bmi
init|=
name|client
condition|?
name|boi
operator|.
name|getOutput
argument_list|()
else|:
name|boi
operator|.
name|getInput
argument_list|()
decl_stmt|;
name|QName
name|rootName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bmi
operator|!=
literal|null
condition|)
block|{
name|XMLBindingMessageFormat
name|msgFormat
init|=
name|bmi
operator|.
name|getExtensor
argument_list|(
name|XMLBindingMessageFormat
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|msgFormat
operator|!=
literal|null
condition|)
block|{
name|rootName
operator|=
name|msgFormat
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|MessagePartInfo
argument_list|>
name|bodyParts
init|=
name|bmi
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
if|if
condition|(
name|bodyParts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|MessagePartInfo
name|p
init|=
name|bodyParts
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|rootName
operator|=
name|p
operator|.
name|getConcreteName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|startQName
operator|.
name|equals
argument_list|(
name|rootName
argument_list|)
condition|)
block|{
name|boiList
operator|.
name|add
argument_list|(
name|boi
argument_list|)
expr_stmt|;
block|}
block|}
name|BindingOperationInfo
name|match
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|boiList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mulitple matching BindingOperationIno found in Binding."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|boiList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|match
operator|=
name|boiList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|match
return|;
block|}
DECL|method|getPartList (XMLMessage inMessage, Element rootNode, BindingMessageInfo bmi)
specifier|protected
name|List
argument_list|<
name|Element
argument_list|>
name|getPartList
parameter_list|(
name|XMLMessage
name|inMessage
parameter_list|,
name|Element
name|rootNode
parameter_list|,
name|BindingMessageInfo
name|bmi
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|partList
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|XMLBindingMessageFormat
name|msgFormat
init|=
name|bmi
operator|.
name|getExtensor
argument_list|(
name|XMLBindingMessageFormat
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|msgFormat
operator|!=
literal|null
condition|)
block|{
name|NodeList
name|nodeList
init|=
name|rootNode
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|partList
operator|.
name|add
argument_list|(
operator|(
name|Element
operator|)
name|nodeList
operator|.
name|item
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|partList
operator|.
name|add
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
block|}
return|return
name|partList
return|;
block|}
DECL|method|getHeader (XMLMessage inMessage)
specifier|protected
name|Element
name|getHeader
parameter_list|(
name|XMLMessage
name|inMessage
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

