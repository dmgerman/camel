begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.blueprint
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfBlueprintEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|Metadata
import|;
end_import

begin_class
DECL|class|EndpointDefinitionParser
specifier|public
class|class
name|EndpointDefinitionParser
extends|extends
name|AbstractBeanDefinitionParser
block|{
DECL|method|parse (Element element, ParserContext context)
specifier|public
name|Metadata
name|parse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|context
parameter_list|)
block|{
name|MutableBeanMetadata
name|endpointConfig
init|=
name|createBeanMetadata
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|CxfBlueprintEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|NamedNodeMap
name|atts
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|bus
init|=
literal|null
decl_stmt|;
name|String
name|address
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|node
init|=
operator|(
name|Attr
operator|)
name|atts
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|node
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|pre
init|=
name|node
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"bus"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|bus
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"address"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|address
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAttribute
argument_list|(
name|pre
argument_list|,
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"endpointName"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"serviceName"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|isPlaceHolder
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|endpointConfig
operator|.
name|addProperty
argument_list|(
name|name
operator|+
literal|"String"
argument_list|,
name|createValue
argument_list|(
name|context
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|q
init|=
name|parseQName
argument_list|(
name|element
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|endpointConfig
operator|.
name|addProperty
argument_list|(
name|name
argument_list|,
name|createValue
argument_list|(
name|context
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"depends-on"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|endpointConfig
operator|.
name|addDependsOn
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
literal|"name"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|endpointConfig
operator|.
name|addProperty
argument_list|(
name|name
argument_list|,
name|createValue
argument_list|(
name|context
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Element
name|elem
init|=
name|DOMUtils
operator|.
name|getFirstElement
argument_list|(
name|element
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|elem
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"properties"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Metadata
name|map
init|=
name|parseMapData
argument_list|(
name|context
argument_list|,
name|endpointConfig
argument_list|,
name|elem
argument_list|)
decl_stmt|;
name|endpointConfig
operator|.
name|addProperty
argument_list|(
name|name
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"binding"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|setFirstChildAsProperty
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|endpointConfig
argument_list|,
literal|"bindingConfig"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"inInterceptors"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"inFaultInterceptors"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"outInterceptors"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"outFaultInterceptors"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"features"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"schemaLocations"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
literal|"handlers"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Metadata
name|list
init|=
name|parseListData
argument_list|(
name|context
argument_list|,
name|endpointConfig
argument_list|,
name|elem
argument_list|)
decl_stmt|;
name|endpointConfig
operator|.
name|addProperty
argument_list|(
name|name
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setFirstChildAsProperty
argument_list|(
name|element
argument_list|,
name|context
argument_list|,
name|endpointConfig
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|elem
operator|=
name|DOMUtils
operator|.
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|bus
argument_list|)
condition|)
block|{
name|bus
operator|=
literal|"cxf"
expr_stmt|;
block|}
comment|//Will create a bus if needed...
name|endpointConfig
operator|.
name|addProperty
argument_list|(
literal|"bus"
argument_list|,
name|getBusRef
argument_list|(
name|context
argument_list|,
name|bus
argument_list|)
argument_list|)
expr_stmt|;
name|endpointConfig
operator|.
name|setDestroyMethod
argument_list|(
literal|"destroy"
argument_list|)
expr_stmt|;
name|endpointConfig
operator|.
name|addArgument
argument_list|(
name|createValue
argument_list|(
name|context
argument_list|,
name|address
argument_list|)
argument_list|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|endpointConfig
operator|.
name|addArgument
argument_list|(
name|createRef
argument_list|(
name|context
argument_list|,
literal|"blueprintBundleContext"
argument_list|)
argument_list|,
name|BundleContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|endpointConfig
return|;
block|}
DECL|method|isPlaceHolder (String value)
specifier|private
specifier|static
name|boolean
name|isPlaceHolder
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
operator|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"${"
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
operator|||
name|value
operator|.
name|startsWith
argument_list|(
literal|"{{"
argument_list|)
operator|&&
name|value
operator|.
name|endsWith
argument_list|(
literal|"}}"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

