begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|soap
operator|.
name|SOAPMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfSpringEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|spring
operator|.
name|CxfEndpointBeanDefinitionParser
operator|.
name|CxfSpringEndpointBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_comment
comment|/**  * The<a href="http://activemq.apache.org/camel/type-converter.html">Type Converters</a>  * for CXF related types' converting .  *  * @version $Revision$  */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|CxfConverter
specifier|public
specifier|final
class|class
name|CxfConverter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CxfConverter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|CxfConverter ()
specifier|private
name|CxfConverter
parameter_list|()
block|{
comment|// Helper class
block|}
annotation|@
name|Converter
DECL|method|toArray (final MessageContentsList list)
specifier|public
specifier|static
name|Object
index|[]
name|toArray
parameter_list|(
specifier|final
name|MessageContentsList
name|list
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The MessageChannel is null"
argument_list|)
throw|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toMessageContentsList (final Object[] array)
specifier|public
specifier|static
name|MessageContentsList
name|toMessageContentsList
parameter_list|(
specifier|final
name|Object
index|[]
name|array
parameter_list|)
block|{
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|MessageContentsList
argument_list|(
name|array
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MessageContentsList
argument_list|()
return|;
block|}
block|}
annotation|@
name|Converter
DECL|method|soapMessageToString (final SOAPMessage soapMessage)
specifier|public
specifier|static
name|String
name|soapMessageToString
parameter_list|(
specifier|final
name|SOAPMessage
name|soapMessage
parameter_list|)
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|soapMessage
operator|.
name|writeTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Get the exception when converting the SOAPMessage into String, the exception is "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toEndpoint (final CxfSpringEndpointBean endpointBean)
specifier|public
specifier|static
name|Endpoint
name|toEndpoint
parameter_list|(
specifier|final
name|CxfSpringEndpointBean
name|endpointBean
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|endpointBean
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The CxfEndpoint instance is null"
argument_list|)
throw|;
block|}
comment|//CamelContext
name|SpringCamelContext
name|context
init|=
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|endpointBean
operator|.
name|getApplicationContext
argument_list|()
argument_list|)
decl_stmt|;
name|Endpoint
name|answer
init|=
operator|new
name|CxfSpringEndpoint
argument_list|(
name|context
argument_list|,
name|endpointBean
argument_list|)
decl_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Converter
DECL|method|toDataFormat (final String name)
specifier|public
specifier|static
name|DataFormat
name|toDataFormat
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|DataFormat
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

