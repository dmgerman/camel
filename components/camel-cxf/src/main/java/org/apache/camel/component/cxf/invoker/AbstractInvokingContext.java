begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.invoker
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|invoker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_comment
comment|/**  * A RoutingContext encapulates specific knowledge about how to route messages of  * a particular data format.  *  */
end_comment

begin_class
DECL|class|AbstractInvokingContext
specifier|public
specifier|abstract
class|class
name|AbstractInvokingContext
implements|implements
name|InvokingContext
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|AbstractInvokingContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * This method is called when an request from a (routing) client is observed      * at the router's transport (inbound to the router from a client).  It will       * return an "in" interceptor chain that will allow the appropriate routing       * interceptor to receive and handle the message.      * @param exchange      * @return in interceptor chain      */
DECL|method|getRequestInInterceptorChain (Exchange exchange)
specifier|public
name|PhaseInterceptorChain
name|getRequestInInterceptorChain
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|getInInterceptorChain
argument_list|(
name|exchange
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getInInterceptorChain (Exchange exchange, boolean isResponse)
specifier|protected
name|PhaseInterceptorChain
name|getInInterceptorChain
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|boolean
name|isResponse
parameter_list|)
block|{
name|Bus
name|bus
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|bus
operator|!=
literal|null
assert|;
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|getInPhases
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isResponse
condition|)
block|{
name|List
argument_list|<
name|Interceptor
argument_list|>
name|routingInterceptors
init|=
name|getRoutingInterceptors
argument_list|()
decl_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|routingInterceptors
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Injected "
operator|+
name|routingInterceptors
argument_list|)
expr_stmt|;
block|}
block|}
comment|// bus
name|List
argument_list|<
name|Interceptor
argument_list|>
name|list
init|=
name|bus
operator|.
name|getInInterceptors
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by bus: "
operator|+
name|list
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// endpoint
name|Endpoint
name|ep
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|list
operator|=
name|ep
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by endpoint: "
operator|+
name|list
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// binding
name|list
operator|=
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by binding: "
operator|+
name|list
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// service
name|list
operator|=
name|ep
operator|.
name|getService
argument_list|()
operator|.
name|getInInterceptors
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Interceptors contributed by service: "
operator|+
name|list
argument_list|)
expr_stmt|;
block|}
name|chain
operator|.
name|add
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|chain
return|;
block|}
comment|/**      * @return routing interceptor(s) specific to the routing context.      */
DECL|method|getRoutingInterceptors ()
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Interceptor
argument_list|>
name|getRoutingInterceptors
parameter_list|()
function_decl|;
comment|/**      * @return "in" phrases from the phase manager specific to the routing context.      */
DECL|method|getInPhases ()
specifier|protected
specifier|abstract
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|getInPhases
parameter_list|()
function_decl|;
comment|/**      * This method is called when a response from a CXF server is observed at the      * router's transport (inbound to the router from a server).  It will return an      * "in" interceptor chain that will allow the response to be returned to the       * involved routing interceptor (with the appropriate interceptors in between).      * @param exchange      * @return in interceptor chain      */
DECL|method|getResponseInInterceptorChain (Exchange exchange)
specifier|public
name|PhaseInterceptorChain
name|getResponseInInterceptorChain
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|getInInterceptorChain
argument_list|(
name|exchange
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|getResponseObject (Message inMessage, Map<String, Object> responseContext, Class <T> clazz)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getResponseObject
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"get the in message is "
operator|+
name|inMessage
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"*** responseContext is"
operator|+
name|responseContext
argument_list|)
expr_stmt|;
name|T
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inMessage
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|responseContext
condition|)
block|{
name|responseContext
operator|.
name|putAll
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"set responseContext to be"
operator|+
name|responseContext
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|inMessage
operator|.
name|getContent
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**      * This method is called to set the fault observers on the endpoint that are specified      * to the phases meaningful to the routing context.      * @param endpointImpl      * @param bus      */
DECL|method|setEndpointFaultObservers (EndpointImpl endpointImpl, Bus bus)
specifier|public
name|void
name|setEndpointFaultObservers
parameter_list|(
name|EndpointImpl
name|endpointImpl
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
comment|// default is no op
block|}
block|}
end_class

end_unit

