begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.invoker
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|invoker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * A RoutingContext encapulates specific knowledge about how to route messages of  * a particular data format.  *  */
end_comment

begin_class
DECL|class|AbstractInvokingContext
specifier|public
specifier|abstract
class|class
name|AbstractInvokingContext
implements|implements
name|InvokingContext
block|{
DECL|method|getLogger ()
specifier|protected
specifier|abstract
name|Logger
name|getLogger
parameter_list|()
function_decl|;
DECL|method|getResponseObject (Message inMessage, Map<String, Object> responseContext, Class <T> clazz)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getResponseObject
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|T
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inMessage
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|null
operator|!=
name|responseContext
condition|)
block|{
name|responseContext
operator|.
name|putAll
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"set responseContext to be"
operator|+
name|responseContext
argument_list|)
expr_stmt|;
block|}
name|retval
operator|=
name|inMessage
operator|.
name|getContent
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
DECL|method|loggerTheMessage (Message message, String messageTile)
specifier|protected
name|void
name|loggerTheMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|messageTile
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|messageTile
operator|+
literal|"\n"
operator|+
literal|"--------------------------------------"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|CachedOutputStream
name|bos
init|=
operator|new
name|CachedOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\nMessage:\n"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|bos
operator|.
name|getOut
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|bos
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"\n--------------------------------------"
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

