begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|invoker
operator|.
name|InvokingContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|invoker
operator|.
name|InvokingContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ChainInitiationObserver
import|;
end_import

begin_class
DECL|class|CxfMessageObserver
specifier|public
class|class
name|CxfMessageObserver
extends|extends
name|ChainInitiationObserver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ChainInitiationObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cxfConsumer
specifier|private
name|CxfConsumer
name|cxfConsumer
decl_stmt|;
DECL|field|dataFormat
specifier|private
name|DataFormat
name|dataFormat
decl_stmt|;
DECL|field|invoker
specifier|private
name|CamelInvoker
name|invoker
decl_stmt|;
DECL|method|CxfMessageObserver (CxfConsumer consumer, Endpoint endpoint, Bus bus, DataFormat dataFormat)
specifier|public
name|CxfMessageObserver
parameter_list|(
name|CxfConsumer
name|consumer
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|Bus
name|bus
parameter_list|,
name|DataFormat
name|dataFormat
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|cxfConsumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|dataFormat
operator|=
name|dataFormat
expr_stmt|;
name|invoker
operator|=
operator|new
name|CamelInvoker
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
DECL|method|setExchangeProperties (Exchange exchange, Message m)
specifier|protected
name|void
name|setExchangeProperties
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Message
name|m
parameter_list|)
block|{
name|super
operator|.
name|setExchangeProperties
argument_list|(
name|exchange
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|CxfConsumer
operator|.
name|class
argument_list|,
name|cxfConsumer
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Bus
operator|.
name|class
argument_list|,
name|bus
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|InvokingContext
operator|.
name|class
argument_list|,
name|InvokingContextFactory
operator|.
name|createContext
argument_list|(
name|dataFormat
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|put
argument_list|(
name|CamelInvoker
operator|.
name|class
argument_list|,
name|invoker
argument_list|)
expr_stmt|;
block|}
DECL|method|onMessage (Message m)
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Observed Client request at router's endpoint.  Request message: "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|endpoint
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|INBOUND_MESSAGE
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|==
literal|null
condition|)
block|{
name|exchange
operator|=
operator|new
name|ExchangeImpl
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|setExchangeProperties
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|InvokingContext
name|invokingContext
init|=
name|exchange
operator|.
name|get
argument_list|(
name|InvokingContext
operator|.
name|class
argument_list|)
decl_stmt|;
assert|assert
name|invokingContext
operator|!=
literal|null
assert|;
name|invokingContext
operator|.
name|setEndpointFaultObservers
argument_list|(
operator|(
name|EndpointImpl
operator|)
name|endpoint
argument_list|,
name|bus
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|finest
argument_list|(
literal|"Build inbound interceptor chain and inject routing interceptor"
argument_list|)
expr_stmt|;
block|}
comment|// now we just support the raw message and the payload message
name|PhaseInterceptorChain
name|chain
init|=
name|invokingContext
operator|.
name|getRequestInInterceptorChain
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|message
operator|.
name|setInterceptorChain
argument_list|(
name|chain
argument_list|)
expr_stmt|;
name|chain
operator|.
name|setFaultObserver
argument_list|(
name|endpoint
operator|.
name|getOutFaultObserver
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

