begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|MockEndpoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|CamelSpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|classes
operator|=
name|CxfComponentEnableMtomTest
operator|.
name|TestConfig
operator|.
name|class
argument_list|)
annotation|@
name|MockEndpoints
DECL|class|CxfComponentEnableMtomTest
specifier|public
class|class
name|CxfComponentEnableMtomTest
block|{
annotation|@
name|Autowired
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
annotation|@
name|Test
DECL|method|testIsMtomEnabled_EnabledThroughBeanSetter ()
specifier|public
name|void
name|testIsMtomEnabled_EnabledThroughBeanSetter
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cxf:bean:mtomByBeanSetter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|CxfEndpoint
condition|)
block|{
name|CxfEndpoint
name|cxfEndpoint
init|=
operator|(
name|CxfEndpoint
operator|)
name|endpoint
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Mtom should be enabled"
argument_list|,
name|cxfEndpoint
operator|.
name|isMtomEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"CXF Endpoint not found"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIsMtomEnabled_EnabledThroughBeanProperties ()
specifier|public
name|void
name|testIsMtomEnabled_EnabledThroughBeanProperties
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cxf:bean:mtomByBeanProperties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|CxfEndpoint
condition|)
block|{
name|CxfEndpoint
name|cxfEndpoint
init|=
operator|(
name|CxfEndpoint
operator|)
name|endpoint
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Mtom should be enabled"
argument_list|,
name|cxfEndpoint
operator|.
name|isMtomEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"CXF Endpoint not found"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIsMtomEnabled_EnabledThroughURIProperties ()
specifier|public
name|void
name|testIsMtomEnabled_EnabledThroughURIProperties
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cxf:bean:mtomByURIProperties?properties.mtom-enabled=true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|CxfEndpoint
condition|)
block|{
name|CxfEndpoint
name|cxfEndpoint
init|=
operator|(
name|CxfEndpoint
operator|)
name|endpoint
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Mtom should be enabled"
argument_list|,
name|cxfEndpoint
operator|.
name|isMtomEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"CXF Endpoint not found"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testIsMtomEnabled_EnabledThroughQueryParameters ()
specifier|public
name|void
name|testIsMtomEnabled_EnabledThroughQueryParameters
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Endpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cxf:bean:mtomByQueryParameters?mtomEnabled=true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|instanceof
name|CxfEndpoint
condition|)
block|{
name|CxfEndpoint
name|cxfEndpoint
init|=
operator|(
name|CxfEndpoint
operator|)
name|endpoint
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Mtom should be enabled"
argument_list|,
name|cxfEndpoint
operator|.
name|isMtomEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"CXF Endpoint not found"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Configuration
DECL|class|TestConfig
specifier|static
class|class
name|TestConfig
block|{
annotation|@
name|Bean
DECL|method|context ()
specifier|public
name|CamelContext
name|context
parameter_list|()
block|{
return|return
operator|new
name|SpringCamelContext
argument_list|()
return|;
block|}
annotation|@
name|Bean
argument_list|(
literal|"mtomByQueryParameters"
argument_list|)
DECL|method|mtomByQueryParameters (CamelContext context)
specifier|public
name|CxfEndpoint
name|mtomByQueryParameters
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|CxfEndpoint
name|endpoint
init|=
operator|new
name|CxfEndpoint
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
annotation|@
name|Bean
argument_list|(
literal|"mtomByURIProperties"
argument_list|)
DECL|method|mtomByURIProperties ()
specifier|public
name|CxfEndpoint
name|mtomByURIProperties
parameter_list|()
block|{
return|return
operator|new
name|CxfEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Bean
argument_list|(
literal|"mtomByBeanProperties"
argument_list|)
DECL|method|mtomByBeanProperties ()
specifier|public
name|CxfEndpoint
name|mtomByBeanProperties
parameter_list|()
block|{
name|CxfEndpoint
name|endpoint
init|=
operator|new
name|CxfEndpoint
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Message
operator|.
name|MTOM_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
annotation|@
name|Bean
argument_list|(
literal|"mtomByBeanSetter"
argument_list|)
DECL|method|mtomByBeanSetter ()
specifier|public
name|CxfEndpoint
name|mtomByBeanSetter
parameter_list|()
block|{
name|CxfEndpoint
name|endpoint
init|=
operator|new
name|CxfEndpoint
argument_list|()
decl_stmt|;
name|endpoint
operator|.
name|setMtomEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
block|}
block|}
end_class

end_unit

