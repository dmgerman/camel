begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.phase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|phase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseManager
import|;
end_import

begin_class
DECL|class|RawMessagePhaseManagerImplTest
specifier|public
class|class
name|RawMessagePhaseManagerImplTest
extends|extends
name|TestCase
block|{
DECL|method|testGetInPhases ()
specifier|public
name|void
name|testGetInPhases
parameter_list|()
throws|throws
name|Exception
block|{
name|PhaseManager
name|pm
init|=
operator|new
name|RawMessagePhaseManagerImpl
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|pl
init|=
name|pm
operator|.
name|getInPhases
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|RECEIVE
argument_list|,
name|pl
operator|.
name|first
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetOutPhases ()
specifier|public
name|void
name|testGetOutPhases
parameter_list|()
throws|throws
name|Exception
block|{
name|PhaseManager
name|pm
init|=
operator|new
name|RawMessagePhaseManagerImpl
argument_list|()
decl_stmt|;
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|pl
init|=
name|pm
operator|.
name|getOutPhases
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|pl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|pl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|phaseArray
decl_stmt|;
name|phaseArray
operator|=
name|pl
operator|.
name|toArray
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND
argument_list|,
operator|(
operator|(
name|Phase
operator|)
name|phaseArray
index|[
literal|0
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|WRITE
argument_list|,
operator|(
operator|(
name|Phase
operator|)
name|phaseArray
index|[
literal|1
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|SEND
argument_list|,
operator|(
operator|(
name|Phase
operator|)
name|phaseArray
index|[
literal|2
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Phase
operator|.
name|PREPARE_SEND_ENDING
argument_list|,
operator|(
operator|(
name|Phase
operator|)
name|phaseArray
index|[
literal|3
index|]
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

