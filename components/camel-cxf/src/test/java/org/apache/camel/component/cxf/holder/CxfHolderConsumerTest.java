begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.holder
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|holder
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CXFTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfHolderConsumerTest
specifier|public
class|class
name|CxfHolderConsumerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|ADDRESS
specifier|protected
specifier|static
specifier|final
name|String
name|ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|CXFTestSupport
operator|.
name|getPort1
argument_list|()
operator|+
literal|"/CxfHolderConsumerTest/test"
decl_stmt|;
DECL|field|CXF_ENDPOINT_URI
specifier|protected
specifier|static
specifier|final
name|String
name|CXF_ENDPOINT_URI
init|=
literal|"cxf://"
operator|+
name|ADDRESS
operator|+
literal|"?serviceClass=org.apache.camel.component.cxf.holder.MyOrderEndpoint"
operator|+
literal|"&loggingFeatureEnabled=true"
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|CXF_ENDPOINT_URI
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|MyProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testInvokingServiceFromCXFClient ()
specifier|public
name|void
name|testInvokingServiceFromCXFClient
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsProxyFactoryBean
name|proxyFactory
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|ClientFactoryBean
name|clientBean
init|=
name|proxyFactory
operator|.
name|getClientFactoryBean
argument_list|()
decl_stmt|;
name|clientBean
operator|.
name|setAddress
argument_list|(
name|ADDRESS
argument_list|)
expr_stmt|;
name|clientBean
operator|.
name|setServiceClass
argument_list|(
name|MyOrderEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|MyOrderEndpoint
name|client
init|=
operator|(
name|MyOrderEndpoint
operator|)
name|proxyFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|strPart
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|strPart
operator|.
name|value
operator|=
literal|"parts"
expr_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|strCustomer
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|strCustomer
operator|.
name|value
operator|=
literal|""
expr_stmt|;
name|String
name|result
init|=
name|client
operator|.
name|myOrder
argument_list|(
name|strPart
argument_list|,
literal|2
argument_list|,
name|strCustomer
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong order result"
argument_list|,
literal|"Ordered ammount 2"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong parts"
argument_list|,
literal|"parts"
argument_list|,
name|strPart
operator|.
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong customer"
argument_list|,
literal|"newCustomer"
argument_list|,
name|strCustomer
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvokingServiceWithSoapHeaderFromCXFClient ()
specifier|public
name|void
name|testInvokingServiceWithSoapHeaderFromCXFClient
parameter_list|()
throws|throws
name|Exception
block|{
name|JaxWsProxyFactoryBean
name|proxyFactory
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|ClientFactoryBean
name|clientBean
init|=
name|proxyFactory
operator|.
name|getClientFactoryBean
argument_list|()
decl_stmt|;
name|clientBean
operator|.
name|setAddress
argument_list|(
name|ADDRESS
argument_list|)
expr_stmt|;
name|clientBean
operator|.
name|setServiceClass
argument_list|(
name|MyOrderEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|MyOrderEndpoint
name|client
init|=
operator|(
name|MyOrderEndpoint
operator|)
name|proxyFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|Holder
argument_list|<
name|String
argument_list|>
name|header
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
name|header
operator|.
name|value
operator|=
literal|"parts"
expr_stmt|;
name|String
name|result
init|=
name|client
operator|.
name|mySecureOrder
argument_list|(
literal|1
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong order result"
argument_list|,
literal|"Ordered ammount 1"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong parts"
argument_list|,
literal|"secureParts"
argument_list|,
name|header
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

