begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.jaxrs
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CXFTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|CxfRsProducerSessionTest
specifier|public
class|class
name|CxfRsProducerSessionTest
extends|extends
name|CamelSpringTestSupport
block|{
DECL|field|port1
specifier|private
specifier|static
name|int
name|port1
init|=
name|CXFTestSupport
operator|.
name|getPort1
argument_list|()
decl_stmt|;
DECL|field|port2
specifier|private
specifier|static
name|int
name|port2
init|=
name|CXFTestSupport
operator|.
name|getPort
argument_list|(
literal|"CxfRsProducerSessionTest.jetty"
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|isCreateCamelContextPerClass ()
specifier|public
name|boolean
name|isCreateCamelContextPerClass
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getPort1 ()
specifier|public
name|int
name|getPort1
parameter_list|()
block|{
return|return
name|port1
return|;
block|}
DECL|method|getPort2 ()
specifier|public
name|int
name|getPort2
parameter_list|()
block|{
return|return
name|port2
return|;
block|}
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducerSession.xml"
argument_list|)
return|;
block|}
DECL|method|setupDestinationURL (Message inMessage)
specifier|protected
name|void
name|setupDestinationURL
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
comment|// do nothing here
block|}
annotation|@
name|Test
DECL|method|testNoSessionProxy ()
specifier|public
name|void
name|testNoSessionProxy
parameter_list|()
block|{
name|String
name|response
init|=
name|sendMessage
argument_list|(
literal|"direct://proxy"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"New New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
name|sendMessage
argument_list|(
literal|"direct://proxy"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExchangeSessionProxy ()
specifier|public
name|void
name|testExchangeSessionProxy
parameter_list|()
block|{
name|String
name|response
init|=
name|sendMessage
argument_list|(
literal|"direct://proxyexchange"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Old New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
name|sendMessage
argument_list|(
literal|"direct://proxyexchange"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Old New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInstanceSession ()
specifier|public
name|void
name|testInstanceSession
parameter_list|()
block|{
name|String
name|response
init|=
name|sendMessage
argument_list|(
literal|"direct://proxyinstance"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Old New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
name|sendMessage
argument_list|(
literal|"direct://proxyinstance"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Old Old World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
comment|// we do the instance tests for proxy and http in one test because order
comment|// matters here
name|response
operator|=
name|sendMessage
argument_list|(
literal|"direct://httpinstance"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Old Old World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoSessionHttp ()
specifier|public
name|void
name|testNoSessionHttp
parameter_list|()
block|{
name|String
name|response
init|=
name|sendMessage
argument_list|(
literal|"direct://http"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"New New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
name|sendMessage
argument_list|(
literal|"direct://http"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"New New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExchangeSessionHttp ()
specifier|public
name|void
name|testExchangeSessionHttp
parameter_list|()
block|{
name|String
name|response
init|=
name|sendMessage
argument_list|(
literal|"direct://httpexchange"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Old New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|response
operator|=
name|sendMessage
argument_list|(
literal|"direct://httpexchange"
argument_list|,
literal|"World"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Old New World"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|sendMessage (String endpoint, String body, Boolean httpApi)
specifier|private
name|Exchange
name|sendMessage
parameter_list|(
name|String
name|endpoint
parameter_list|,
name|String
name|body
parameter_list|,
name|Boolean
name|httpApi
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setPattern
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|Message
name|inMessage
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"echo"
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"POST"
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
literal|"/echoservice/echo"
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_RS_USING_HTTP_API
argument_list|,
name|httpApi
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|CAMEL_CXF_RS_RESPONSE_CLASS
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|inMessage
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|exchange
return|;
block|}
block|}
end_class

end_unit

