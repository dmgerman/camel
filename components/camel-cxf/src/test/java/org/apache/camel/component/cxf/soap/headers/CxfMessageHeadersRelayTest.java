begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.soap.headers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|soap
operator|.
name|headers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|BindingProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|header
operator|.
name|CxfHeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|header
operator|.
name|MessageHeaderFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
operator|.
name|Direction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XMLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|outofband
operator|.
name|header
operator|.
name|OutofBandHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|AbstractJUnit4SpringContextTests
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This test suite verifies message header filter features  *  * @version   */
end_comment

begin_class
annotation|@
name|ContextConfiguration
DECL|class|CxfMessageHeadersRelayTest
specifier|public
class|class
name|CxfMessageHeadersRelayTest
extends|extends
name|AbstractJUnit4SpringContextTests
block|{
annotation|@
name|Autowired
DECL|field|context
specifier|protected
name|CamelContext
name|context
decl_stmt|;
DECL|field|template
specifier|protected
name|ProducerTemplate
name|template
decl_stmt|;
DECL|field|relayEndpoint
specifier|private
name|Endpoint
name|relayEndpoint
decl_stmt|;
DECL|field|noRelayEndpoint
specifier|private
name|Endpoint
name|noRelayEndpoint
decl_stmt|;
DECL|field|relayEndpointWithInsertion
specifier|private
name|Endpoint
name|relayEndpointWithInsertion
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|=
name|context
operator|.
name|createProducerTemplate
argument_list|()
expr_stmt|;
name|relayEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:9091/HeaderService/"
argument_list|,
operator|new
name|HeaderTesterImpl
argument_list|()
argument_list|)
expr_stmt|;
name|noRelayEndpoint
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:7070/HeaderService/"
argument_list|,
operator|new
name|HeaderTesterImpl
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|relayEndpointWithInsertion
operator|=
name|Endpoint
operator|.
name|publish
argument_list|(
literal|"http://localhost:5091/HeaderService/"
argument_list|,
operator|new
name|HeaderTesterWithInsertionImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|relayEndpoint
operator|!=
literal|null
condition|)
block|{
name|relayEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
name|relayEndpoint
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|noRelayEndpoint
operator|!=
literal|null
condition|)
block|{
name|noRelayEndpoint
operator|.
name|stop
argument_list|()
expr_stmt|;
name|noRelayEndpoint
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|relayEndpointWithInsertion
operator|!=
literal|null
condition|)
block|{
name|relayEndpointWithInsertion
operator|.
name|stop
argument_list|()
expr_stmt|;
name|relayEndpointWithInsertion
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|addOutOfBoundHeader (HeaderTester proxy, boolean invalid)
specifier|protected
specifier|static
name|void
name|addOutOfBoundHeader
parameter_list|(
name|HeaderTester
name|proxy
parameter_list|,
name|boolean
name|invalid
parameter_list|)
throws|throws
name|JAXBException
block|{
name|InvocationHandler
name|handler
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|BindingProvider
name|bp
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|handler
operator|instanceof
name|BindingProvider
condition|)
block|{
name|bp
operator|=
operator|(
name|BindingProvider
operator|)
name|handler
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
name|bp
operator|.
name|getRequestContext
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|buildOutOfBandHeaderList
argument_list|(
name|invalid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInHeaderCXFClientRelay ()
specifier|public
name|void
name|testInHeaderCXFClientRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortRelay
argument_list|()
decl_stmt|;
name|InHeader
name|me
init|=
operator|new
name|InHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"CXF user"
argument_list|)
expr_stmt|;
name|InHeaderResponse
name|response
init|=
name|proxy
operator|.
name|inHeader
argument_list|(
name|me
argument_list|,
name|Constants
operator|.
name|IN_HEADER_DATA
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected in band header to propagate but it didn't"
argument_list|,
name|response
operator|.
name|getResponseType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutHeaderCXFClientRelay ()
specifier|public
name|void
name|testOutHeaderCXFClientRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortRelay
argument_list|()
decl_stmt|;
name|OutHeader
name|me
init|=
operator|new
name|OutHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"CXF user"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OutHeaderResponse
argument_list|>
name|result
init|=
operator|new
name|Holder
argument_list|<
name|OutHeaderResponse
argument_list|>
argument_list|(
operator|new
name|OutHeaderResponse
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|header
init|=
operator|new
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
argument_list|(
operator|new
name|SOAPHeaderData
argument_list|()
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|outHeader
argument_list|(
name|me
argument_list|,
name|result
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected in band header to propagate but it didn't"
argument_list|,
name|result
operator|.
name|value
operator|.
name|getResponseType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected in band response header to propagate but it either didn't "
operator|+
literal|" or its contents do not match"
argument_list|,
name|Constants
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|OUT_HEADER_DATA
argument_list|,
name|header
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInOutHeaderCXFClientRelay ()
specifier|public
name|void
name|testInOutHeaderCXFClientRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortRelay
argument_list|()
decl_stmt|;
name|InoutHeader
name|me
init|=
operator|new
name|InoutHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"CXF user"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|header
init|=
operator|new
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
argument_list|(
name|Constants
operator|.
name|IN_OUT_REQUEST_HEADER_DATA
argument_list|)
decl_stmt|;
name|InoutHeaderResponse
name|result
init|=
name|proxy
operator|.
name|inoutHeader
argument_list|(
name|me
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected in band header to propagate but it didn't"
argument_list|,
name|result
operator|.
name|getResponseType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected in band response header to propagate but it either didn't "
operator|+
literal|" or its contents do not match"
argument_list|,
name|Constants
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|IN_OUT_RESPONSE_HEADER_DATA
argument_list|,
name|header
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInOutOfBandHeaderCXFClientRelay ()
specifier|public
name|void
name|testInOutOfBandHeaderCXFClientRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortRelay
argument_list|()
decl_stmt|;
name|addOutOfBoundHeader
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|Me
name|response
init|=
name|proxy
operator|.
name|inOutOfBandHeader
argument_list|(
name|me
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out of band header to propagate but it didn't"
argument_list|,
name|response
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInoutOutOfBandHeaderCXFClientRelay ()
specifier|public
name|void
name|testInoutOutOfBandHeaderCXFClientRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortRelay
argument_list|()
decl_stmt|;
name|addOutOfBoundHeader
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|Me
name|response
init|=
name|proxy
operator|.
name|inoutOutOfBandHeader
argument_list|(
name|me
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out of band header to propagate but it didn't"
argument_list|,
name|response
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|validateReturnedOutOfBandHeader
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInoutOutOfBandHeaderCXFClientRelayWithHeaderInsertion ()
specifier|public
name|void
name|testInoutOutOfBandHeaderCXFClientRelayWithHeaderInsertion
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortRelayWithInsertion
argument_list|()
decl_stmt|;
name|addOutOfBoundHeader
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|Me
name|response
init|=
name|proxy
operator|.
name|inoutOutOfBandHeader
argument_list|(
name|me
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out of band header to propagate but it didn't"
argument_list|,
name|response
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|InvocationHandler
name|handler
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|BindingProvider
name|bp
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|handler
operator|instanceof
name|BindingProvider
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to cast dynamic proxy InocationHandler to BindingProvider type"
argument_list|)
expr_stmt|;
block|}
name|bp
operator|=
operator|(
name|BindingProvider
operator|)
name|handler
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|validateReturnedOutOfBandHeaderWithInsertion
argument_list|(
name|responseContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutOutOfBandHeaderCXFClientRelay ()
specifier|public
name|void
name|testOutOutOfBandHeaderCXFClientRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortRelay
argument_list|()
decl_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|Me
name|response
init|=
name|proxy
operator|.
name|outOutOfBandHeader
argument_list|(
name|me
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out of band header to propagate but it didn't"
argument_list|,
name|response
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|validateReturnedOutOfBandHeader
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInOutOfBandHeaderCXFClientNoRelay ()
specifier|public
name|void
name|testInOutOfBandHeaderCXFClientNoRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortNoRelay
argument_list|()
decl_stmt|;
name|addOutOfBoundHeader
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|Me
name|response
init|=
name|proxy
operator|.
name|inOutOfBandHeader
argument_list|(
name|me
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the in out of band header *not* to propagate but it did"
argument_list|,
name|response
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutOutOfBandHeaderCXFClientNoRelay ()
specifier|public
name|void
name|testOutOutOfBandHeaderCXFClientNoRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortNoRelay
argument_list|()
decl_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|Me
name|response
init|=
name|proxy
operator|.
name|outOutOfBandHeader
argument_list|(
name|me
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out out of band header *not* to propagate but it did"
argument_list|,
name|response
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|validateReturnedOutOfBandHeader
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInoutOutOfBandHeaderCXFClientNoRelay ()
specifier|public
name|void
name|testInoutOutOfBandHeaderCXFClientNoRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortNoRelay
argument_list|()
decl_stmt|;
name|addOutOfBoundHeader
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|Me
name|response
init|=
name|proxy
operator|.
name|inoutOutOfBandHeader
argument_list|(
name|me
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the in out of band header to *not* propagate but it did"
argument_list|,
name|response
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|validateReturnedOutOfBandHeader
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInHeaderCXFClientNoRelay ()
specifier|public
name|void
name|testInHeaderCXFClientNoRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortNoRelay
argument_list|()
decl_stmt|;
name|InHeader
name|me
init|=
operator|new
name|InHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"CXF user"
argument_list|)
expr_stmt|;
name|InHeaderResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|proxy
operator|.
name|inHeader
argument_list|(
name|me
argument_list|,
name|Constants
operator|.
name|IN_HEADER_DATA
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|assertTrue
argument_list|(
literal|"Expected in in band header *not* to propagate but it did"
argument_list|,
name|response
operator|.
name|getResponseType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutHeaderCXFClientNoRelay ()
specifier|public
name|void
name|testOutHeaderCXFClientNoRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortNoRelay
argument_list|()
decl_stmt|;
name|OutHeader
name|me
init|=
operator|new
name|OutHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"CXF user"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|OutHeaderResponse
argument_list|>
name|result
init|=
operator|new
name|Holder
argument_list|<
name|OutHeaderResponse
argument_list|>
argument_list|(
operator|new
name|OutHeaderResponse
argument_list|()
argument_list|)
decl_stmt|;
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|header
init|=
operator|new
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
argument_list|(
operator|new
name|SOAPHeaderData
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|outHeader
argument_list|(
name|me
argument_list|,
name|result
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|assertTrue
argument_list|(
literal|"Ultimate remote HeaderTester.outHeader() destination was not reached"
argument_list|,
name|result
operator|.
name|value
operator|.
name|getResponseType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected in band response header *not* to propagate but it did"
argument_list|,
name|header
operator|.
name|value
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInoutHeaderCXFClientNoRelay ()
specifier|public
name|void
name|testInoutHeaderCXFClientNoRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|HeaderService
name|s
init|=
operator|new
name|HeaderService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"soap_header.wsdl"
argument_list|)
argument_list|,
name|HeaderService
operator|.
name|SERVICE
argument_list|)
decl_stmt|;
name|HeaderTester
name|proxy
init|=
name|s
operator|.
name|getSoapPortNoRelay
argument_list|()
decl_stmt|;
name|InoutHeader
name|me
init|=
operator|new
name|InoutHeader
argument_list|()
decl_stmt|;
name|me
operator|.
name|setRequestType
argument_list|(
literal|"CXF user"
argument_list|)
expr_stmt|;
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|header
init|=
operator|new
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
argument_list|(
name|Constants
operator|.
name|IN_OUT_REQUEST_HEADER_DATA
argument_list|)
decl_stmt|;
name|InoutHeaderResponse
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|proxy
operator|.
name|inoutHeader
argument_list|(
name|me
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|assertTrue
argument_list|(
literal|"Expected in band out header *not* to propagate but it did"
argument_list|,
name|result
operator|.
name|getResponseType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected in band response header *not* to propagate but did"
argument_list|,
name|header
operator|.
name|value
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInoutHeaderCXFClientNoServiceClassNoRelay ()
specifier|public
name|void
name|testInoutHeaderCXFClientNoServiceClassNoRelay
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Fix this test later
name|QName
name|qname
init|=
name|QName
operator|.
name|valueOf
argument_list|(
literal|"{http://apache.org/camel/component/cxf/soap/headers}SOAPHeaderInfo"
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
literal|"cxf:bean:routerNoRelayNoServiceClassEndpoint?headerFilterStrategy=#dropAllMessageHeadersStrategy"
decl_stmt|;
name|String
name|requestHeader
init|=
literal|"<ns2:SOAPHeaderInfo xmlns:ns2=\"http://apache.org/camel/"
operator|+
literal|"component/cxf/soap/headers\"><originator>CxfSoapHeaderRoutePropagationTest.testInOutHeader Requestor"
operator|+
literal|"</originator><message>Invoking CxfSoapHeaderRoutePropagationTest.testInOutHeader() Request"
operator|+
literal|"</message></ns2:SOAPHeaderInfo>"
decl_stmt|;
name|String
name|requestBody
init|=
literal|"<ns2:inoutHeader xmlns:ns2=\"http://apache.org/camel/component/cxf/soap/headers\">"
operator|+
literal|"<requestType>CXF user</requestType></ns2:inoutHeader>"
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|StringReader
argument_list|(
name|requestBody
argument_list|)
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|SoapHeader
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<
name|SoapHeader
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|add
argument_list|(
operator|new
name|SoapHeader
argument_list|(
name|qname
argument_list|,
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|StringReader
argument_list|(
name|requestHeader
argument_list|)
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CxfPayload
argument_list|<
name|SoapHeader
argument_list|>
name|cxfPayload
init|=
operator|new
name|CxfPayload
argument_list|<
name|SoapHeader
argument_list|>
argument_list|(
name|headers
argument_list|,
name|elements
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|request
argument_list|(
name|uri
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|cxfPayload
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"inoutHeader"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|CxfPayload
argument_list|<
name|?
argument_list|>
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|CxfPayload
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|getBody
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|out
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|response
init|=
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?>"
operator|+
literal|"<ns2:inoutHeaderResponse xmlns:ns2=\"http://apache.org/camel/"
operator|+
literal|"component/cxf/soap/headers\"><responseType>pass</responseType>"
operator|+
literal|"</ns2:inoutHeaderResponse>"
decl_stmt|;
name|assertEquals
argument_list|(
name|response
argument_list|,
name|XMLUtils
operator|.
name|toString
argument_list|(
name|out
operator|.
name|getBody
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMessageHeadersRelaysSpringContext ()
specifier|public
name|void
name|testMessageHeadersRelaysSpringContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CxfEndpoint
name|endpoint
init|=
operator|(
name|CxfEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"cxf:bean:serviceExtraRelays?headerFilterStrategy=#customMessageFilterStrategy"
argument_list|)
decl_stmt|;
name|CxfHeaderFilterStrategy
name|strategy
init|=
operator|(
name|CxfHeaderFilterStrategy
operator|)
name|endpoint
operator|.
name|getHeaderFilterStrategy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessageHeaderFilter
argument_list|>
name|filters
init|=
name|strategy
operator|.
name|getMessageHeaderFilters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected number of filters "
argument_list|,
literal|2
argument_list|,
name|filters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MessageHeaderFilter
argument_list|>
name|messageHeaderFilterMap
init|=
name|strategy
operator|.
name|getMessageHeaderFiltersMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
operator|new
name|CustomHeaderFilter
argument_list|()
operator|.
name|getActivationNamespaces
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Expected a filter class for namespace: "
operator|+
name|ns
argument_list|,
name|CustomHeaderFilter
operator|.
name|class
argument_list|,
name|messageHeaderFilterMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInOutOfBandHeaderCamelTemplateDirect ()
specifier|public
name|void
name|testInOutOfBandHeaderCamelTemplateDirect
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestInOutOfBandHeaderCamelTemplate
argument_list|(
literal|"direct:directProducer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutOutOfBandHeaderCamelTemplateDirect ()
specifier|public
name|void
name|testOutOutOfBandHeaderCamelTemplateDirect
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOutOutOfBandHeaderCamelTemplate
argument_list|(
literal|"direct:directProducer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInOutOutOfBandHeaderCamelTemplateDirect ()
specifier|public
name|void
name|testInOutOutOfBandHeaderCamelTemplateDirect
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestInOutOutOfBandHeaderCamelTemplate
argument_list|(
literal|"direct:directProducer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInOutOfBandHeaderCamelTemplateRelay ()
specifier|public
name|void
name|testInOutOfBandHeaderCamelTemplateRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestInOutOfBandHeaderCamelTemplate
argument_list|(
literal|"direct:relayProducer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOutOutOfBandHeaderCamelTemplateRelay ()
specifier|public
name|void
name|testOutOutOfBandHeaderCamelTemplateRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestOutOutOfBandHeaderCamelTemplate
argument_list|(
literal|"direct:relayProducer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInOutOutOfBandHeaderCamelTemplateRelay ()
specifier|public
name|void
name|testInOutOutOfBandHeaderCamelTemplateRelay
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestInOutOutOfBandHeaderCamelTemplate
argument_list|(
literal|"direct:relayProducer"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestInOutOfBandHeaderCamelTemplate (String producerUri)
specifier|protected
name|void
name|doTestInOutOfBandHeaderCamelTemplate
parameter_list|(
name|String
name|producerUri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// START SNIPPET: sending
name|Exchange
name|senderExchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"inOutOfBandHeader"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Header
argument_list|>
name|headers
init|=
name|buildOutOfBandHeaderList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|,
name|requestContext
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|producerUri
argument_list|,
name|senderExchange
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|MessageContentsList
name|result
init|=
operator|(
name|MessageContentsList
operator|)
name|out
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|out
operator|.
name|getHeader
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|responseContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out of band header to propagate but it didn't"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Me
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestOutOutOfBandHeaderCamelTemplate (String producerUri)
specifier|protected
name|void
name|doTestOutOutOfBandHeaderCamelTemplate
parameter_list|(
name|String
name|producerUri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// START SNIPPET: sending
name|Exchange
name|senderExchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"outOutOfBandHeader"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|producerUri
argument_list|,
name|senderExchange
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|MessageContentsList
name|result
init|=
operator|(
name|MessageContentsList
operator|)
name|out
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out of band header to propagate but it didn't"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Me
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|out
operator|.
name|getHeader
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|responseContext
argument_list|)
expr_stmt|;
name|validateReturnedOutOfBandHeader
argument_list|(
name|responseContext
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestInOutOutOfBandHeaderCamelTemplate (String producerUri)
specifier|public
name|void
name|doTestInOutOutOfBandHeaderCamelTemplate
parameter_list|(
name|String
name|producerUri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// START SNIPPET: sending
name|Exchange
name|senderExchange
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|,
name|ExchangePattern
operator|.
name|InOut
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Me
name|me
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|me
operator|.
name|setFirstName
argument_list|(
literal|"john"
argument_list|)
expr_stmt|;
name|me
operator|.
name|setLastName
argument_list|(
literal|"Doh"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
literal|"inoutOutOfBandHeader"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Header
argument_list|>
name|inHeaders
init|=
name|buildOutOfBandHeaderList
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestContext
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|requestContext
operator|.
name|put
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|inHeaders
argument_list|)
expr_stmt|;
name|senderExchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Client
operator|.
name|REQUEST_CONTEXT
argument_list|,
name|requestContext
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
name|producerUri
argument_list|,
name|senderExchange
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|MessageContentsList
name|result
init|=
operator|(
name|MessageContentsList
operator|)
name|out
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected the out of band header to propagate but it didn't"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|Me
operator|)
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Map
operator|)
name|out
operator|.
name|getHeader
argument_list|(
name|Client
operator|.
name|RESPONSE_CONTEXT
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|responseContext
argument_list|)
expr_stmt|;
name|validateReturnedOutOfBandHeader
argument_list|(
name|responseContext
argument_list|)
expr_stmt|;
block|}
DECL|method|validateReturnedOutOfBandHeader (HeaderTester proxy)
specifier|protected
specifier|static
name|void
name|validateReturnedOutOfBandHeader
parameter_list|(
name|HeaderTester
name|proxy
parameter_list|)
block|{
name|validateReturnedOutOfBandHeader
argument_list|(
name|proxy
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|validateReturnedOutOfBandHeader (HeaderTester proxy, boolean expect)
specifier|protected
specifier|static
name|void
name|validateReturnedOutOfBandHeader
parameter_list|(
name|HeaderTester
name|proxy
parameter_list|,
name|boolean
name|expect
parameter_list|)
block|{
name|InvocationHandler
name|handler
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
name|BindingProvider
name|bp
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|handler
operator|instanceof
name|BindingProvider
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to cast dynamic proxy InocationHandler to BindingProvider type"
argument_list|)
expr_stmt|;
block|}
name|bp
operator|=
operator|(
name|BindingProvider
operator|)
name|handler
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
init|=
name|bp
operator|.
name|getResponseContext
argument_list|()
decl_stmt|;
name|validateReturnedOutOfBandHeader
argument_list|(
name|responseContext
argument_list|,
name|expect
argument_list|)
expr_stmt|;
block|}
DECL|method|validateReturnedOutOfBandHeader (Map<String, Object> responseContext)
specifier|protected
specifier|static
name|void
name|validateReturnedOutOfBandHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
parameter_list|)
block|{
name|validateReturnedOutOfBandHeader
argument_list|(
name|responseContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|validateReturnedOutOfBandHeader (Map<String, Object> responseContext, boolean expect)
specifier|protected
specifier|static
name|void
name|validateReturnedOutOfBandHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
parameter_list|,
name|boolean
name|expect
parameter_list|)
block|{
name|OutofBandHeader
name|hdrToTest
init|=
literal|null
decl_stmt|;
name|List
name|oobHdr
init|=
operator|(
name|List
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expect
condition|)
block|{
if|if
condition|(
name|oobHdr
operator|==
literal|null
operator|||
operator|(
name|oobHdr
operator|!=
literal|null
operator|&&
name|oobHdr
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Should have got *no* out-of-band headers, but some were found"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oobHdr
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Should have got List of out-of-band headers"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"HeaderHolder list expected to conain 1 object received "
operator|+
name|oobHdr
operator|.
name|size
argument_list|()
argument_list|,
name|oobHdr
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|oobHdr
operator|!=
literal|null
operator|&
name|oobHdr
operator|instanceof
name|List
condition|)
block|{
name|Iterator
name|iter
init|=
name|oobHdr
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|hdr
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hdr
operator|instanceof
name|Header
condition|)
block|{
name|Header
name|hdr1
init|=
operator|(
name|Header
operator|)
name|hdr
decl_stmt|;
if|if
condition|(
name|hdr1
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Node
condition|)
block|{
try|try
block|{
name|JAXBElement
name|job
init|=
operator|(
name|JAXBElement
operator|)
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|outofband
operator|.
name|header
operator|.
name|ObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|(
name|Node
operator|)
name|hdr1
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
name|hdrToTest
operator|=
operator|(
name|OutofBandHeader
operator|)
name|job
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|assertNotNull
argument_list|(
literal|"out-of-band header should not be null"
argument_list|,
name|hdrToTest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header name testOobReturnHeaderName recevied :"
operator|+
name|hdrToTest
operator|.
name|getName
argument_list|()
argument_list|,
literal|"testOobReturnHeaderName"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header value testOobReturnHeaderValue recevied :"
operator|+
name|hdrToTest
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"testOobReturnHeaderValue"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header attribute testReturnHdrAttribute recevied :"
operator|+
name|hdrToTest
operator|.
name|getHdrAttribute
argument_list|()
argument_list|,
literal|"testReturnHdrAttribute"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|getHdrAttribute
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buildOutOfBandHeaderList (boolean invalid)
specifier|protected
specifier|static
name|List
argument_list|<
name|Header
argument_list|>
name|buildOutOfBandHeaderList
parameter_list|(
name|boolean
name|invalid
parameter_list|)
throws|throws
name|JAXBException
block|{
name|OutofBandHeader
name|ob
init|=
operator|new
name|OutofBandHeader
argument_list|()
decl_stmt|;
name|ob
operator|.
name|setName
argument_list|(
literal|"testOobHeader"
argument_list|)
expr_stmt|;
name|ob
operator|.
name|setValue
argument_list|(
literal|"testOobHeaderValue"
argument_list|)
expr_stmt|;
name|ob
operator|.
name|setHdrAttribute
argument_list|(
name|invalid
condition|?
literal|"dontProcess"
else|:
literal|"testHdrAttribute"
argument_list|)
expr_stmt|;
name|SoapHeader
name|hdr
init|=
operator|new
name|SoapHeader
argument_list|(
operator|new
name|QName
argument_list|(
name|Constants
operator|.
name|TEST_HDR_NS
argument_list|,
name|Constants
operator|.
name|TEST_HDR_REQUEST_ELEM
argument_list|)
argument_list|,
name|ob
argument_list|,
operator|new
name|JAXBDataBinding
argument_list|(
name|ob
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdr
operator|.
name|setMustUnderstand
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Header
argument_list|>
name|headers
init|=
operator|new
name|ArrayList
argument_list|<
name|Header
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|add
argument_list|(
name|hdr
argument_list|)
expr_stmt|;
return|return
name|headers
return|;
block|}
DECL|method|validateReturnedOutOfBandHeaderWithInsertion (Map<String, Object> responseContext, boolean expect)
specifier|protected
specifier|static
name|void
name|validateReturnedOutOfBandHeaderWithInsertion
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|responseContext
parameter_list|,
name|boolean
name|expect
parameter_list|)
block|{
name|List
argument_list|<
name|OutofBandHeader
argument_list|>
name|hdrToTest
init|=
operator|new
name|ArrayList
argument_list|<
name|OutofBandHeader
argument_list|>
argument_list|()
decl_stmt|;
name|List
name|oobHdr
init|=
operator|(
name|List
operator|)
name|responseContext
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expect
condition|)
block|{
if|if
condition|(
name|oobHdr
operator|==
literal|null
operator|||
operator|(
name|oobHdr
operator|!=
literal|null
operator|&&
name|oobHdr
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Should have got *no* out-of-band headers, but some were found"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oobHdr
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Should have got List of out-of-band headers"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"HeaderHolder list expected to conain 2 object received "
operator|+
name|oobHdr
operator|.
name|size
argument_list|()
argument_list|,
name|oobHdr
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|oobHdr
operator|!=
literal|null
operator|&
name|oobHdr
operator|instanceof
name|List
condition|)
block|{
name|Iterator
name|iter
init|=
name|oobHdr
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|hdr
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hdr
operator|instanceof
name|Header
condition|)
block|{
name|Header
name|hdr1
init|=
operator|(
name|Header
operator|)
name|hdr
decl_stmt|;
if|if
condition|(
name|hdr1
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Node
condition|)
block|{
try|try
block|{
name|JAXBElement
name|job
init|=
operator|(
name|JAXBElement
operator|)
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|outofband
operator|.
name|header
operator|.
name|ObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|(
name|Node
operator|)
name|hdr1
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
name|hdrToTest
operator|.
name|add
argument_list|(
operator|(
name|OutofBandHeader
operator|)
name|job
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"out-of-band header should not be null"
argument_list|,
name|hdrToTest
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header name testOobReturnHeaderName recevied :"
operator|+
name|hdrToTest
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"testOobReturnHeaderName"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header value testOobReturnHeaderValue recevied :"
operator|+
name|hdrToTest
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"testOobReturnHeaderValue"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header attribute testReturnHdrAttribute recevied :"
operator|+
name|hdrToTest
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHdrAttribute
argument_list|()
argument_list|,
literal|"testReturnHdrAttribute"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHdrAttribute
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header name New_testOobHeader recevied :"
operator|+
name|hdrToTest
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"New_testOobHeader"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header value New_testOobHeaderValue recevied :"
operator|+
name|hdrToTest
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"New_testOobHeaderValue"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected out-of-band Header attribute testHdrAttribute recevied :"
operator|+
name|hdrToTest
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHdrAttribute
argument_list|()
argument_list|,
literal|"testHdrAttribute"
operator|.
name|equals
argument_list|(
name|hdrToTest
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHdrAttribute
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|InsertRequestOutHeaderProcessor
specifier|public
specifier|static
class|class
name|InsertRequestOutHeaderProcessor
implements|implements
name|Processor
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SoapHeader
argument_list|>
name|soapHeaders
init|=
operator|(
name|List
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
decl_stmt|;
comment|// Insert a new header
name|String
name|xml
init|=
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?><outofbandHeader "
operator|+
literal|"xmlns=\"http://cxf.apache.org/outofband/Header\" hdrAttribute=\"testHdrAttribute\" "
operator|+
literal|"xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">"
operator|+
literal|"<name>New_testOobHeader</name><value>New_testOobHeaderValue</value></outofbandHeader>"
decl_stmt|;
name|SoapHeader
name|newHeader
init|=
operator|new
name|SoapHeader
argument_list|(
name|soapHeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
comment|// make sure direction is IN since it is a request message.
name|newHeader
operator|.
name|setDirection
argument_list|(
name|Direction
operator|.
name|DIRECTION_IN
argument_list|)
expr_stmt|;
comment|//newHeader.setMustUnderstand(false);
name|soapHeaders
operator|.
name|add
argument_list|(
name|newHeader
argument_list|)
expr_stmt|;
block|}
block|}
comment|// START SNIPPET: InsertResponseOutHeaderProcessor
DECL|class|InsertResponseOutHeaderProcessor
specifier|public
specifier|static
class|class
name|InsertResponseOutHeaderProcessor
implements|implements
name|Processor
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SoapHeader
argument_list|>
name|soapHeaders
init|=
operator|(
name|List
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
decl_stmt|;
comment|// Insert a new header
name|String
name|xml
init|=
literal|"<?xml version=\"1.0\" encoding=\"utf-8\"?><outofbandHeader "
operator|+
literal|"xmlns=\"http://cxf.apache.org/outofband/Header\" hdrAttribute=\"testHdrAttribute\" "
operator|+
literal|"xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:mustUnderstand=\"1\">"
operator|+
literal|"<name>New_testOobHeader</name><value>New_testOobHeaderValue</value></outofbandHeader>"
decl_stmt|;
name|SoapHeader
name|newHeader
init|=
operator|new
name|SoapHeader
argument_list|(
name|soapHeaders
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|DOMUtils
operator|.
name|readXml
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
decl_stmt|;
comment|// make sure direction is OUT since it is a response message.
name|newHeader
operator|.
name|setDirection
argument_list|(
name|Direction
operator|.
name|DIRECTION_OUT
argument_list|)
expr_stmt|;
comment|//newHeader.setMustUnderstand(false);
name|soapHeaders
operator|.
name|add
argument_list|(
name|newHeader
argument_list|)
expr_stmt|;
block|}
block|}
comment|// END SNIPPET: InsertResponseOutHeaderProcessor
block|}
end_class

end_unit

