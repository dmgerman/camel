begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.soap.headers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|soap
operator|.
name|headers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|handler
operator|.
name|MessageContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|outofband
operator|.
name|header
operator|.
name|OutofBandHeader
import|;
end_import

begin_class
annotation|@
name|javax
operator|.
name|jws
operator|.
name|WebService
argument_list|(
name|serviceName
operator|=
literal|"HeaderService"
argument_list|,
name|targetNamespace
operator|=
literal|"http://apache.org/camel/cxf/soap/headers"
argument_list|,
name|endpointInterface
operator|=
literal|"org.apache.camel.component.cxf.soap.headers.HeaderTester"
argument_list|)
DECL|class|HeaderTesterImpl
specifier|public
class|class
name|HeaderTesterImpl
implements|implements
name|HeaderTester
block|{
annotation|@
name|Resource
DECL|field|context
specifier|protected
name|WebServiceContext
name|context
decl_stmt|;
DECL|field|relayHeaders
specifier|protected
name|boolean
name|relayHeaders
init|=
literal|true
decl_stmt|;
DECL|method|HeaderTesterImpl ()
specifier|public
name|HeaderTesterImpl
parameter_list|()
block|{     }
DECL|method|HeaderTesterImpl (boolean relayHeaders)
specifier|public
name|HeaderTesterImpl
parameter_list|(
name|boolean
name|relayHeaders
parameter_list|)
block|{
name|this
operator|.
name|relayHeaders
operator|=
name|relayHeaders
expr_stmt|;
block|}
DECL|method|outHeader (OutHeader me, Holder<OutHeaderResponse> theResponse, Holder<SOAPHeaderData> headerInfo)
specifier|public
name|void
name|outHeader
parameter_list|(
name|OutHeader
name|me
parameter_list|,
name|Holder
argument_list|<
name|OutHeaderResponse
argument_list|>
name|theResponse
parameter_list|,
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|headerInfo
parameter_list|)
block|{
try|try
block|{
name|OutHeaderResponse
name|theResponseValue
init|=
operator|new
name|OutHeaderResponse
argument_list|()
decl_stmt|;
name|theResponseValue
operator|.
name|setResponseType
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
name|theResponse
operator|.
name|value
operator|=
name|theResponseValue
expr_stmt|;
name|headerInfo
operator|.
name|value
operator|=
name|Constants
operator|.
name|OUT_HEADER_DATA
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|inHeader (InHeader me, SOAPHeaderData headerInfo)
specifier|public
name|InHeaderResponse
name|inHeader
parameter_list|(
name|InHeader
name|me
parameter_list|,
name|SOAPHeaderData
name|headerInfo
parameter_list|)
block|{
try|try
block|{
name|InHeaderResponse
name|result
init|=
operator|new
name|InHeaderResponse
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|relayHeaders
condition|)
block|{
if|if
condition|(
name|headerInfo
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"fail"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|IN_HEADER_DATA
argument_list|,
name|headerInfo
argument_list|)
condition|)
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"fail"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|inoutHeader (InoutHeader me, Holder<SOAPHeaderData> headerInfo)
specifier|public
name|InoutHeaderResponse
name|inoutHeader
parameter_list|(
name|InoutHeader
name|me
parameter_list|,
name|Holder
argument_list|<
name|SOAPHeaderData
argument_list|>
name|headerInfo
parameter_list|)
block|{
try|try
block|{
name|InoutHeaderResponse
name|result
init|=
operator|new
name|InoutHeaderResponse
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|relayHeaders
condition|)
block|{
if|if
condition|(
name|headerInfo
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"fail"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Constants
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|IN_OUT_REQUEST_HEADER_DATA
argument_list|,
name|headerInfo
operator|.
name|value
argument_list|)
condition|)
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setResponseType
argument_list|(
literal|"fail"
argument_list|)
expr_stmt|;
block|}
name|headerInfo
operator|.
name|value
operator|=
name|Constants
operator|.
name|IN_OUT_RESPONSE_HEADER_DATA
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|inOutOfBandHeader (Me me)
specifier|public
name|Me
name|inOutOfBandHeader
parameter_list|(
name|Me
name|me
parameter_list|)
block|{
try|try
block|{
name|Me
name|result
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
if|if
condition|(
name|validateOutOfBandHander
argument_list|()
condition|)
block|{
name|result
operator|.
name|setFirstName
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setFirstName
argument_list|(
literal|"fail"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|inoutOutOfBandHeader (Me me)
specifier|public
name|Me
name|inoutOutOfBandHeader
parameter_list|(
name|Me
name|me
parameter_list|)
block|{
try|try
block|{
name|Me
name|result
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
if|if
condition|(
name|validateOutOfBandHander
argument_list|()
condition|)
block|{
name|addReplyOutOfBandHeader
argument_list|()
expr_stmt|;
name|result
operator|.
name|setFirstName
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setFirstName
argument_list|(
literal|"fail"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|outOutOfBandHeader (Me me)
specifier|public
name|Me
name|outOutOfBandHeader
parameter_list|(
name|Me
name|me
parameter_list|)
block|{
try|try
block|{
name|Me
name|result
init|=
operator|new
name|Me
argument_list|()
decl_stmt|;
name|result
operator|.
name|setFirstName
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
name|addReplyOutOfBandHeader
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|addReplyOutOfBandHeader ()
specifier|private
name|void
name|addReplyOutOfBandHeader
parameter_list|()
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|MessageContext
name|ctx
init|=
name|context
operator|.
name|getMessageContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|OutofBandHeader
name|ob
init|=
operator|new
name|OutofBandHeader
argument_list|()
decl_stmt|;
name|ob
operator|.
name|setName
argument_list|(
literal|"testOobReturnHeaderName"
argument_list|)
expr_stmt|;
name|ob
operator|.
name|setValue
argument_list|(
literal|"testOobReturnHeaderValue"
argument_list|)
expr_stmt|;
name|ob
operator|.
name|setHdrAttribute
argument_list|(
literal|"testReturnHdrAttribute"
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|OutofBandHeader
argument_list|>
name|job
init|=
operator|new
name|JAXBElement
argument_list|<
name|OutofBandHeader
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
name|Constants
operator|.
name|TEST_HDR_NS
argument_list|,
name|Constants
operator|.
name|TEST_HDR_RESPONSE_ELEM
argument_list|)
argument_list|,
name|OutofBandHeader
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|ob
argument_list|)
decl_stmt|;
name|Header
name|hdr
init|=
operator|new
name|Header
argument_list|(
operator|new
name|QName
argument_list|(
name|Constants
operator|.
name|TEST_HDR_NS
argument_list|,
name|Constants
operator|.
name|TEST_HDR_RESPONSE_ELEM
argument_list|)
argument_list|,
name|job
argument_list|,
operator|new
name|JAXBDataBinding
argument_list|(
name|ob
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Header
argument_list|>
name|hdrList
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
argument_list|)
decl_stmt|;
name|hdrList
operator|.
name|add
argument_list|(
name|hdr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|validateOutOfBandHander ()
specifier|protected
name|boolean
name|validateOutOfBandHander
parameter_list|()
block|{
name|MessageContext
name|ctx
init|=
name|context
operator|==
literal|null
condition|?
literal|null
else|:
name|context
operator|.
name|getMessageContext
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|relayHeaders
condition|)
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
operator|&&
operator|!
name|ctx
operator|.
name|containsKey
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
operator|||
operator|(
name|ctx
operator|.
name|containsKey
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
operator|&&
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
operator|)
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ctx
operator|!=
literal|null
operator|&&
name|ctx
operator|.
name|containsKey
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|oobHdr
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|ctx
operator|.
name|get
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|oobHdr
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|hdr
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|hdr
operator|instanceof
name|Header
operator|&&
operator|(
operator|(
name|Header
operator|)
name|hdr
operator|)
operator|.
name|getObject
argument_list|()
operator|instanceof
name|Node
condition|)
block|{
name|Header
name|hdr1
init|=
operator|(
name|Header
operator|)
name|hdr
decl_stmt|;
try|try
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|job
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|outofband
operator|.
name|header
operator|.
name|ObjectFactory
operator|.
name|class
argument_list|)
operator|.
name|createUnmarshaller
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|(
name|Node
operator|)
name|hdr1
operator|.
name|getObject
argument_list|()
argument_list|)
decl_stmt|;
name|OutofBandHeader
name|ob
init|=
operator|(
name|OutofBandHeader
operator|)
name|job
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"testOobHeader"
operator|.
name|equals
argument_list|(
name|ob
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|"testOobHeaderValue"
operator|.
name|equals
argument_list|(
name|ob
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"testHdrAttribute"
operator|.
name|equals
argument_list|(
name|ob
operator|.
name|getHdrAttribute
argument_list|()
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|//mark it processed
block|}
elseif|else
if|if
condition|(
literal|"dontProcess"
operator|.
name|equals
argument_list|(
name|ob
operator|.
name|getHdrAttribute
argument_list|()
argument_list|)
condition|)
block|{
comment|//we won't remove it so we won't let the runtime know
comment|//it's processed.   It SHOULD throw an exception
comment|//saying the mustunderstand wasn't processed
name|success
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"test failed"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"MessageContext is null or doesnot contain OOBHeaders"
argument_list|)
throw|;
block|}
return|return
name|success
return|;
block|}
block|}
end_class

end_unit

