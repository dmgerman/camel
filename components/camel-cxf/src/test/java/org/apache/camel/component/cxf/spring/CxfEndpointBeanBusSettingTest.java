begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|LoggingInInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|LoggingOutInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfEndpointBeanBusSettingTest
specifier|public
class|class
name|CxfEndpointBeanBusSettingTest
extends|extends
name|AbstractSpringBeanTestSupport
block|{
annotation|@
name|Override
DECL|method|getApplicationContextFiles ()
specifier|protected
name|String
index|[]
name|getApplicationContextFiles
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"org/apache/camel/component/cxf/spring/CxfEndpointBeansBusSetting.xml"
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testBusInjectedBySpring ()
specifier|public
name|void
name|testBusInjectedBySpring
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|camelContext
init|=
operator|(
name|CamelContext
operator|)
name|ctx
operator|.
name|getBean
argument_list|(
literal|"camel"
argument_list|)
decl_stmt|;
name|CxfEndpoint
name|endpoint
init|=
operator|(
name|CxfEndpoint
operator|)
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"cxf:bean:routerEndpoint"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong endpoint uri"
argument_list|,
literal|"cxf://bean:routerEndpoint"
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|Bus
name|cxf1
init|=
name|endpoint
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|cxf1
argument_list|,
name|ctx
operator|.
name|getBean
argument_list|(
literal|"cxf1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cxf1
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cxf1
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|LoggingOutInterceptor
name|log1
init|=
name|getInterceptor
argument_list|(
name|cxf1
operator|.
name|getOutInterceptors
argument_list|()
argument_list|,
name|LoggingOutInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|log1
argument_list|)
expr_stmt|;
name|endpoint
operator|=
operator|(
name|CxfEndpoint
operator|)
name|camelContext
operator|.
name|getEndpoint
argument_list|(
literal|"cxf:bean:serviceEndpoint"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get a wrong endpoint uri"
argument_list|,
literal|"cxf://bean:serviceEndpoint"
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|Bus
name|cxf2
init|=
name|endpoint
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|cxf2
argument_list|,
name|ctx
operator|.
name|getBean
argument_list|(
literal|"cxf2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cxf2
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cxf2
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|LoggingInInterceptor
name|log2
init|=
name|getInterceptor
argument_list|(
name|cxf2
operator|.
name|getInInterceptors
argument_list|()
argument_list|,
name|LoggingInInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|log2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInterceptor (List<Interceptor<? extends Message>> list, Class<T> clz)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|getInterceptor
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|list
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|)
block|{
for|for
control|(
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
name|i
range|:
name|list
control|)
block|{
if|if
condition|(
name|clz
operator|.
name|isInstance
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|i
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

