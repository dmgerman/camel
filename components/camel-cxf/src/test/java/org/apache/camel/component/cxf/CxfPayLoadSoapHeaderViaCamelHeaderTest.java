begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|pizza
operator|.
name|types
operator|.
name|CallerIDHeaderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|headers
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBDataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfPayLoadSoapHeaderViaCamelHeaderTest
specifier|public
class|class
name|CxfPayLoadSoapHeaderViaCamelHeaderTest
extends|extends
name|CxfPayLoadSoapHeaderTestAbstract
block|{
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// START SNIPPET: payload_soap_header_set
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|CallerIDHeaderType
name|callerId
init|=
operator|new
name|CallerIDHeaderType
argument_list|()
decl_stmt|;
name|callerId
operator|.
name|setName
argument_list|(
literal|"Willem"
argument_list|)
expr_stmt|;
name|callerId
operator|.
name|setPhoneNumber
argument_list|(
literal|"108"
argument_list|)
expr_stmt|;
name|SoapHeader
name|soapHeader
init|=
operator|new
name|SoapHeader
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://camel.apache.org/pizza/types"
argument_list|,
literal|"CallerIDHeader"
argument_list|)
argument_list|,
name|callerId
argument_list|,
operator|new
name|JAXBDataBinding
argument_list|(
name|CallerIDHeaderType
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SoapHeader
argument_list|>
name|soapHeaders
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|soapHeaders
operator|.
name|add
argument_list|(
name|soapHeader
argument_list|)
expr_stmt|;
comment|// sets the SOAP header via a camel header
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Header
operator|.
name|HEADER_LIST
argument_list|,
name|soapHeaders
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|to
argument_list|(
name|getServiceEndpointURI
argument_list|()
argument_list|)
comment|//
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: payload_soap_header_set
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateSoapHeaderViaCamelHeaderForSoapRequest ()
specifier|public
name|void
name|testCreateSoapHeaderViaCamelHeaderForSoapRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|body
init|=
literal|"<OrderRequest xmlns=\"http://camel.apache.org/pizza/types\"><Toppings><Topping>topping_value</Topping></Toppings></OrderRequest>"
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sendBody
argument_list|(
literal|"direct:start"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Document
name|message
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|Document
operator|.
name|class
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|message
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|NodeList
name|nodeList
init|=
name|root
operator|.
name|getElementsByTagName
argument_list|(
literal|"MinutesUntilReady"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeList
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|elMinutesUntilReady
init|=
operator|(
name|Element
operator|)
name|nodeList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**          * the phone number 108 which is given in the SOAP header is added to          * 100 which results in 208, see class          * org.apache.camel.component.cxf.PizzaImpl.          */
name|assertEquals
argument_list|(
literal|"208"
argument_list|,
name|elMinutesUntilReady
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

