begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|common
operator|.
name|message
operator|.
name|CxfConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * Unit test for setting arbitrary payload in MESSAGE mode  */
end_comment

begin_class
DECL|class|CxfDispatchMessageTest
specifier|public
class|class
name|CxfDispatchMessageTest
extends|extends
name|CxfDispatchTestSupport
block|{
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/cxf/CxfDispatchMessageBeans.xml"
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testDipatchMessage ()
specifier|public
name|void
name|testDipatchMessage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
literal|"Tila"
decl_stmt|;
name|Exchange
name|exchange
init|=
name|sendJaxWsDispatchMessage
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The request should be handled sucessfully "
argument_list|,
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|response
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The response message must not be null "
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|decodeResponseFromMessage
argument_list|(
name|response
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The response body must match the request "
argument_list|,
name|value
operator|.
name|endsWith
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDipatchMessageOneway ()
specifier|public
name|void
name|testDipatchMessageOneway
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
literal|"Tila"
decl_stmt|;
name|Exchange
name|exchange
init|=
name|sendJaxWsDispatchMessage
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The request should be handled sucessfully "
argument_list|,
name|exchange
operator|.
name|isFailed
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|response
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The response message must not be null "
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"The response body must be null "
argument_list|,
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sendJaxWsDispatchMessage (final String name, final boolean oneway)
specifier|protected
name|Exchange
name|sendJaxWsDispatchMessage
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|oneway
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:producer"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|InputStream
name|request
init|=
name|encodeRequestInMessage
argument_list|(
name|oneway
condition|?
name|MESSAGE_ONEWAY_TEMPLATE
else|:
name|MESSAGE_TEMPLATE
argument_list|,
name|name
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|request
argument_list|,
name|InputStream
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// set the operation for oneway; otherwise use the default operation
if|if
condition|(
name|oneway
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|CxfConstants
operator|.
name|OPERATION_NAME
argument_list|,
name|INVOKE_ONEWAY_NAME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|encodeRequestInMessage (String form, String name, Exchange exchange)
specifier|private
specifier|static
name|InputStream
name|encodeRequestInMessage
parameter_list|(
name|String
name|form
parameter_list|,
name|String
name|name
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|payloadstr
init|=
name|String
operator|.
name|format
argument_list|(
name|form
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|InputStream
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|message
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|payloadstr
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and let it fail
block|}
return|return
name|message
return|;
block|}
DECL|method|decodeResponseFromMessage (InputStream message, Exchange exchange)
specifier|private
name|String
name|decodeResponseFromMessage
parameter_list|(
name|InputStream
name|message
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Document
name|doc
init|=
name|getDocumentBuilderFactory
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|value
operator|=
name|getResponseType
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and let it fail
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

