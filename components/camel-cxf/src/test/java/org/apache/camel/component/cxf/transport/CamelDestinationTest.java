begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.transport
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|spring
operator|.
name|SpringBusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Conduit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ConduitInitiator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MessageObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_class
DECL|class|CamelDestinationTest
specifier|public
class|class
name|CamelDestinationTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|destMessage
specifier|private
name|Message
name|destMessage
decl_stmt|;
DECL|method|waitForReceiveInMessage ()
specifier|private
name|void
name|waitForReceiveInMessage
parameter_list|()
block|{
name|int
name|waitTime
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|inMessage
operator|==
literal|null
operator|&&
name|waitTime
operator|<
literal|3000
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing here
block|}
name|waitTime
operator|=
name|waitTime
operator|+
literal|1000
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Can't receive the Conduit Message in 3 seconds"
argument_list|,
name|inMessage
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForReceiveDestMessage ()
specifier|private
name|void
name|waitForReceiveDestMessage
parameter_list|()
block|{
name|int
name|waitTime
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|destMessage
operator|==
literal|null
operator|&&
name|waitTime
operator|<
literal|3000
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing here
block|}
name|waitTime
operator|=
name|waitTime
operator|+
literal|1000
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Can't receive the Destination message in 3 seconds"
argument_list|,
name|destMessage
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|setupCamelDestination (boolean send)
specifier|public
name|CamelDestination
name|setupCamelDestination
parameter_list|(
name|boolean
name|send
parameter_list|)
throws|throws
name|IOException
block|{
name|ConduitInitiator
name|conduitInitiator
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConduitInitiator
operator|.
name|class
argument_list|)
decl_stmt|;
name|CamelDestination
name|camelDestination
init|=
operator|new
name|CamelDestination
argument_list|(
name|camelContext
argument_list|,
name|bus
argument_list|,
name|conduitInitiator
argument_list|,
name|endpointInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|send
condition|)
block|{
comment|// setMessageObserver
name|observer
operator|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|destMessage
operator|=
name|m
expr_stmt|;
block|}
block|}
expr_stmt|;
name|camelDestination
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
return|return
name|camelDestination
return|;
block|}
DECL|method|testGetConfiguration ()
specifier|public
name|void
name|testGetConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|SpringBusFactory
name|bf
init|=
operator|new
name|SpringBusFactory
argument_list|()
decl_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|bus
operator|=
name|bf
operator|.
name|createBus
argument_list|(
literal|"/wsdl/camel_test_config.xml"
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
name|bus
argument_list|)
expr_stmt|;
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/camel_conf_test"
argument_list|,
literal|"/wsdl/camel_test_no_addr.wsdl"
argument_list|,
literal|"HelloWorldQueueBinMsgService"
argument_list|,
literal|"HelloWorldQueueBinMsgPort"
argument_list|)
expr_stmt|;
name|CamelDestination
name|destination
init|=
name|setupCamelDestination
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/*          * assertEquals("Can't get the right ServerConfig's MessageTimeToLive ",          * 500L, destination.getServerConfig().getMessageTimeToLive());          * assertEquals("Can't get the right Server's MessageSelector",          * "cxf_message_selector",          * destination.getRuntimePolicy().getMessageSelector());          * assertEquals("Can't get the right SessionPoolConfig's LowWaterMark",          * 10, destination.getSessionPool().getLowWaterMark());          * assertEquals("Can't get the right AddressPolicy's          * ConnectionPassword", "testPassword",          * destination.getCamelAddress().getConnectionPassword());          */
name|BusFactory
operator|.
name|setDefaultBus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneWayDestination ()
specifier|public
name|void
name|testOneWayDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|destMessage
operator|=
literal|null
expr_stmt|;
name|inMessage
operator|=
literal|null
expr_stmt|;
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/hello_world_camel"
argument_list|,
literal|"/wsdl/camel_test.wsdl"
argument_list|,
literal|"HWStaticReplyQBinMsgService"
argument_list|,
literal|"HWStaticReplyQBinMsgPort"
argument_list|)
expr_stmt|;
name|CamelConduit
name|conduit
init|=
name|setupCamelConduit
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Message
name|outMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|setupMessageHeader
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|CamelDestination
name|destination
init|=
literal|null
decl_stmt|;
try|try
block|{
name|destination
operator|=
name|setupCamelDestination
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// destination.activate();
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"The CamelDestination activate should not through exception "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|sendoutMessage
argument_list|(
name|conduit
argument_list|,
name|outMessage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// wait for the message to be get from the destination
name|waitForReceiveDestMessage
argument_list|()
expr_stmt|;
comment|// just verify the Destination inMessage
name|assertTrue
argument_list|(
literal|"The destiantion should have got the message "
argument_list|,
name|destMessage
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|verifyReceivedMessage
argument_list|(
name|destMessage
argument_list|)
expr_stmt|;
name|verifyHeaders
argument_list|(
name|destMessage
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
name|destination
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|setupMessageHeader (Message outMessage)
specifier|private
name|void
name|setupMessageHeader
parameter_list|(
name|Message
name|outMessage
parameter_list|)
block|{
comment|/*          * CamelMessageHeadersType header = new CamelMessageHeadersType();          * header.setCamelCorrelationID("Destination test");          * header.setCamelDeliveryMode(3); header.setCamelPriority(1);          * header.setTimeToLive(1000);          * outMessage.put(CamelConstants.Camel_CLIENT_REQUEST_HEADERS, header);          */
block|}
DECL|method|verifyReceivedMessage (Message inMessage)
specifier|private
name|void
name|verifyReceivedMessage
parameter_list|(
name|Message
name|inMessage
parameter_list|)
block|{
name|ByteArrayInputStream
name|bis
init|=
operator|(
name|ByteArrayInputStream
operator|)
name|inMessage
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
name|bytes
index|[]
init|=
operator|new
name|byte
index|[
name|bis
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|bis
operator|.
name|read
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"Read the Destination recieved Message error "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|String
name|reponse
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The reponse date should be equals"
argument_list|,
name|reponse
argument_list|,
literal|"HelloWorld"
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRequestResponseHeaders (Message inMessage, Message outMessage)
specifier|private
name|void
name|verifyRequestResponseHeaders
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
comment|/*          * CamelMessageHeadersType outHeader =          * (CamelMessageHeadersType)outMessage.get(CamelConstants.Camel_CLIENT_REQUEST_HEADERS);          * CamelMessageHeadersType inHeader =          * (CamelMessageHeadersType)inMessage.get(CamelConstants.Camel_CLIENT_RESPONSE_HEADERS);          * verifyJmsHeaderEquality(outHeader, inHeader);          */
block|}
DECL|method|verifyHeaders (Message inMessage, Message outMessage)
specifier|private
name|void
name|verifyHeaders
parameter_list|(
name|Message
name|inMessage
parameter_list|,
name|Message
name|outMessage
parameter_list|)
block|{
comment|/*          * CamelMessageHeadersType outHeader =          * (CamelMessageHeadersType)outMessage.get(CamelConstants.Camel_CLIENT_REQUEST_HEADERS);          * CamelMessageHeadersType inHeader =          * (CamelMessageHeadersType)inMessage.get(CamelConstants.Camel_SERVER_REQUEST_HEADERS);          * verifyJmsHeaderEquality(outHeader, inHeader);          */
block|}
comment|/*      * private void verifyJmsHeaderEquality(CamelMessageHeadersType outHeader,      * CamelMessageHeadersType inHeader) { assertEquals("The inMessage and      * outMessage Camel Header's CorrelationID should be equals",      * outHeader.getCamelCorrelationID(), inHeader.getCamelCorrelationID());      * assertEquals("The inMessage and outMessage Camel Header's CamelPriority      * should be equals", outHeader.getCamelPriority(),      * inHeader.getCamelPriority()); assertEquals("The inMessage and outMessage      * Camel Header's CamelType should be equals", outHeader.getCamelType(),      * inHeader.getCamelType()); }      */
DECL|method|testRoundTripDestination ()
specifier|public
name|void
name|testRoundTripDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|inMessage
operator|=
literal|null
expr_stmt|;
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/hello_world_camel"
argument_list|,
literal|"/wsdl/camel_test.wsdl"
argument_list|,
literal|"HelloWorldService"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
expr_stmt|;
comment|// set up the conduit send to be true
name|CamelConduit
name|conduit
init|=
name|setupCamelConduit
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Message
name|outMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|setupMessageHeader
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
specifier|final
name|CamelDestination
name|destination
init|=
name|setupCamelDestination
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// set up MessageObserver for handlering the conduit message
name|MessageObserver
name|observer
init|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verifyReceivedMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|verifyHeaders
argument_list|(
name|m
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
comment|// setup the message for
name|Conduit
name|backConduit
decl_stmt|;
try|try
block|{
name|backConduit
operator|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|m
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for the message to be got from the conduit
name|Message
name|replyMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|sendoutMessage
argument_list|(
name|backConduit
argument_list|,
name|replyMessage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|destination
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
comment|// set is oneway false for get response from destination
name|sendoutMessage
argument_list|(
name|conduit
argument_list|,
name|outMessage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait for the message to be got from the destination,
comment|// create the thread to handler the Destination incomming message
name|waitForReceiveInMessage
argument_list|()
expr_stmt|;
name|verifyReceivedMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
comment|// wait for a while for the camel session recycling
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|destination
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|testPropertyExclusion ()
specifier|public
name|void
name|testPropertyExclusion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|customPropertyName
init|=
literal|"THIS_PROPERTY_WILL_NOT_BE_AUTO_COPIED"
decl_stmt|;
name|inMessage
operator|=
literal|null
expr_stmt|;
name|setupServiceInfo
argument_list|(
literal|"http://cxf.apache.org/hello_world_camel"
argument_list|,
literal|"/wsdl/camel_test.wsdl"
argument_list|,
literal|"HelloWorldService"
argument_list|,
literal|"HelloWorldPort"
argument_list|)
expr_stmt|;
comment|// set up the conduit send to be true
name|CamelConduit
name|conduit
init|=
name|setupCamelConduit
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Message
name|outMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|setupMessageHeader
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
comment|/*          * CamelPropertyType excludeProp = new CamelPropertyType();          * excludeProp.setName(customPropertyName);          * excludeProp.setValue(customPropertyName); CamelMessageHeadersType          * headers = (CamelMessageHeadersType)          * outMessage.get(CamelConstants.Camel_CLIENT_REQUEST_HEADERS);          * headers.getProperty().add(excludeProp);          */
specifier|final
name|CamelDestination
name|destination
init|=
name|setupCamelDestination
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// set up MessageObserver for handlering the conduit message
name|MessageObserver
name|observer
init|=
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|setInMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|verifyReceivedMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|verifyHeaders
argument_list|(
name|m
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
comment|// setup the message for
name|Conduit
name|backConduit
decl_stmt|;
try|try
block|{
name|backConduit
operator|=
name|destination
operator|.
name|getBackChannel
argument_list|(
name|m
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for the message to be got from the conduit
name|Message
name|replyMessage
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|sendoutMessage
argument_list|(
name|backConduit
argument_list|,
name|replyMessage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|destination
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
comment|// set is oneway false for get response from destination
name|sendoutMessage
argument_list|(
name|conduit
argument_list|,
name|outMessage
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait for the message to be got from the destination,
comment|// create the thread to handler the Destination incomming message
name|waitForReceiveInMessage
argument_list|()
expr_stmt|;
name|verifyReceivedMessage
argument_list|(
name|inMessage
argument_list|)
expr_stmt|;
name|verifyRequestResponseHeaders
argument_list|(
name|inMessage
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
comment|/*          * CamelMessageHeadersType inHeader =          * (CamelMessageHeadersType)inMessage.get(CamelConstants.Camel_CLIENT_RESPONSE_HEADERS);          * assertTrue("property has been excluded",          * inHeader.getProperty().isEmpty());          */
comment|// wait for a while for the camel session recycling
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|destination
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

