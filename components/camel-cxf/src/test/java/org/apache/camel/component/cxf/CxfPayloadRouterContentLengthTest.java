begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|SpringCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|AbstractHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_class
DECL|class|CxfPayloadRouterContentLengthTest
specifier|public
class|class
name|CxfPayloadRouterContentLengthTest
extends|extends
name|CamelTestSupport
block|{
comment|/*      * The response message is generated directly. The issue here is that the      * xsi and xs namespaces are defined on the SOAP envelope but are used      * within the payload. This can cause issues with some type conversions in      * PAYLOAD mode, as the Camel-CXF endpoint will return some kind of window      * within the StAX parsing (and the namespace definitions are outside).      *       * If some CXF implementation bean is used as the service the namespaces      * will be defined within the payload (and everything works fine).      */
DECL|field|RESPONSE_STRING
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE_STRING
init|=
literal|"This is the response string"
decl_stmt|;
DECL|field|RESPONSE_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE_MESSAGE
init|=
literal|"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>"
operator|+
literal|"<ns0:payload xmlns:ns0=\"http://schema.apache.org/test\"><ns0:response>"
operator|+
name|RESPONSE_STRING
operator|+
literal|"</ns0:response></ns0:payload>"
operator|+
literal|"</s:Body></s:Envelope>"
decl_stmt|;
DECL|field|REQUEST_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_MESSAGE
init|=
literal|"<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\"><s:Body>"
operator|+
literal|"<ns0:payload xmlns:ns0=\"http://schema.apache.org/test\"><ns0:request>foo</ns0:request></ns0:payload>"
operator|+
literal|"</s:Body></s:Envelope>"
decl_stmt|;
comment|// The Camel-Test with CXF will re-use jetty instances, so the ports1 to 6 are already blocked
DECL|field|JETTY_PORT
specifier|private
specifier|static
specifier|final
name|int
name|JETTY_PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|applicationContext
specifier|private
name|AbstractXmlApplicationContext
name|applicationContext
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
static|static
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"CXFTestSupport.jettyPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|JETTY_PORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|protected
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|SpringCamelContext
operator|.
name|springCamelContext
argument_list|(
name|applicationContext
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*          * We start a Jetty for the service in order to have better control over          * the response The response must contain only a Content-Type and a          * Content-Length but no other header          */
name|log
operator|.
name|info
argument_list|(
literal|"Starting jetty server at port {}"
argument_list|,
name|JETTY_PORT
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|(
name|JETTY_PORT
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
operator|new
name|AbstractHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|String
name|target
parameter_list|,
name|Request
name|baseRequest
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
comment|// the Content-Length is correct for this response message
name|response
operator|.
name|setContentLength
argument_list|(
name|RESPONSE_MESSAGE
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|baseRequest
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrintWriter
name|pw
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|pw
operator|.
name|write
argument_list|(
name|RESPONSE_MESSAGE
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Do not send a Server header
name|server
operator|.
name|setSendServerVersion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Load the CXF endpoints for the route
name|log
operator|.
name|info
argument_list|(
literal|"Start Routing Scenario at port {}"
argument_list|,
name|CXFTestSupport
operator|.
name|getPort1
argument_list|()
argument_list|)
expr_stmt|;
name|applicationContext
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/cxf/CxfPayloadRouterContentLengthBeans.xml"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created a valid spring context"
argument_list|,
name|applicationContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// close the spring context
name|IOHelper
operator|.
name|close
argument_list|(
name|applicationContext
argument_list|)
expr_stmt|;
comment|// stop the jetty server
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
name|server
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"cxf:bean:proxyEndpoint?dataFormat=PAYLOAD"
argument_list|)
comment|//
operator|.
name|removeHeaders
argument_list|(
literal|".*"
argument_list|)
comment|// call an external Web service in payload mode
operator|.
name|to
argument_list|(
literal|"cxf:bean:serviceEndpoint?dataFormat=PAYLOAD"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testInvokeRouter ()
specifier|public
name|void
name|testInvokeRouter
parameter_list|()
throws|throws
name|IOException
block|{
name|CloseableHttpClient
name|httpclient
init|=
name|HttpClients
operator|.
name|createDefault
argument_list|()
decl_stmt|;
name|long
name|contentLength
init|=
literal|0
decl_stmt|;
name|boolean
name|isChunked
init|=
literal|false
decl_stmt|;
name|String
name|receivedContent
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HttpPost
name|httppost
init|=
operator|new
name|HttpPost
argument_list|(
literal|"http://localhost:"
operator|+
name|CXFTestSupport
operator|.
name|getPort1
argument_list|()
operator|+
literal|"/TEST/PROXY"
argument_list|)
decl_stmt|;
name|StringEntity
name|reqEntity
init|=
operator|new
name|StringEntity
argument_list|(
name|REQUEST_MESSAGE
argument_list|,
name|ContentType
operator|.
name|TEXT_XML
argument_list|)
decl_stmt|;
name|reqEntity
operator|.
name|setChunked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|httppost
operator|.
name|setEntity
argument_list|(
name|reqEntity
argument_list|)
expr_stmt|;
name|CloseableHttpResponse
name|response
init|=
name|httpclient
operator|.
name|execute
argument_list|(
name|httppost
argument_list|)
decl_stmt|;
try|try
block|{
name|HttpEntity
name|respEntity
init|=
name|response
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|contentLength
operator|=
name|respEntity
operator|.
name|getContentLength
argument_list|()
expr_stmt|;
name|isChunked
operator|=
name|respEntity
operator|.
name|isChunked
argument_list|()
expr_stmt|;
name|receivedContent
operator|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|respEntity
argument_list|)
expr_stmt|;
name|EntityUtils
operator|.
name|consume
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|response
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|httpclient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|receivedContent
argument_list|)
expr_stmt|;
comment|// chunked encoding is fine, we don't need to check the content length
if|if
condition|(
operator|!
name|isChunked
condition|)
block|{
name|assertEquals
argument_list|(
name|receivedContent
operator|.
name|length
argument_list|()
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"["
operator|+
name|receivedContent
operator|+
literal|"] does not contain ["
operator|+
name|RESPONSE_STRING
operator|+
literal|"]"
argument_list|,
name|receivedContent
operator|.
name|contains
argument_list|(
name|RESPONSE_STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|// check whether the response was cut off by the client because the
comment|// Content-Length was wrong
name|assertTrue
argument_list|(
literal|"["
operator|+
name|receivedContent
operator|+
literal|"] does not contain the closing Envelope tag."
argument_list|,
name|receivedContent
operator|.
name|matches
argument_list|(
literal|".*\\</.*:Envelope\\>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

