begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|FailoverFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|clustering
operator|.
name|RandomStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ServerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|FailOverFeatureTest
specifier|public
class|class
name|FailOverFeatureTest
block|{
DECL|field|port1
specifier|private
specifier|static
name|int
name|port1
init|=
name|CXFTestSupport
operator|.
name|getPort1
argument_list|()
decl_stmt|;
DECL|field|port2
specifier|private
specifier|static
name|int
name|port2
init|=
name|CXFTestSupport
operator|.
name|getPort2
argument_list|()
decl_stmt|;
DECL|field|port3
specifier|private
specifier|static
name|int
name|port3
init|=
name|CXFTestSupport
operator|.
name|getPort3
argument_list|()
decl_stmt|;
DECL|field|port4
specifier|private
specifier|static
name|int
name|port4
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|SERVICE_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|port1
operator|+
literal|"/FailOverFeatureTest"
decl_stmt|;
DECL|field|PAYLOAD_PROXY_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|PAYLOAD_PROXY_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|port2
operator|+
literal|"/FailOverFeatureTest/proxy"
decl_stmt|;
DECL|field|POJO_PROXY_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|POJO_PROXY_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|port3
operator|+
literal|"/FailOverFeatureTest/proxy"
decl_stmt|;
DECL|field|NONE_EXIST_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|NONE_EXIST_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|port4
operator|+
literal|"/FailOverFeatureTest"
decl_stmt|;
DECL|field|context1
specifier|private
name|DefaultCamelContext
name|context1
decl_stmt|;
DECL|field|context2
specifier|private
name|DefaultCamelContext
name|context2
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
comment|// publish a web-service
name|ServerFactoryBean
name|factory
init|=
operator|new
name|ServerFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setAddress
argument_list|(
name|SERVICE_ADDRESS
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setServiceBean
argument_list|(
operator|new
name|HelloServiceImpl
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPojo ()
specifier|public
name|void
name|testPojo
parameter_list|()
throws|throws
name|Exception
block|{
name|startRoutePojo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|tryFailover
argument_list|(
name|POJO_PROXY_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context2
operator|!=
literal|null
condition|)
block|{
name|context2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPayload ()
specifier|public
name|void
name|testPayload
parameter_list|()
throws|throws
name|Exception
block|{
name|startRoutePayload
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|tryFailover
argument_list|(
name|PAYLOAD_PROXY_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|context1
operator|!=
literal|null
condition|)
block|{
name|context1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startRoutePayload ()
specifier|private
name|void
name|startRoutePayload
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|proxy
init|=
literal|"cxf://"
operator|+
name|PAYLOAD_PROXY_ADDRESS
operator|+
literal|"?wsdlURL="
operator|+
name|SERVICE_ADDRESS
operator|+
literal|"?wsdl"
operator|+
literal|"&dataFormat=PAYLOAD"
decl_stmt|;
comment|// use a non-exists address to trigger fail-over
comment|// another problem is: if synchronous=false fail-over will not happen
name|String
name|real
init|=
literal|"cxf://"
operator|+
name|NONE_EXIST_ADDRESS
operator|+
literal|"?wsdlURL="
operator|+
name|SERVICE_ADDRESS
operator|+
literal|"?wsdl"
operator|+
literal|"&dataFormat=PAYLOAD"
decl_stmt|;
name|context1
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|startRoute
argument_list|(
name|context1
argument_list|,
name|proxy
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|startRoutePojo ()
specifier|private
name|void
name|startRoutePojo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|proxy
init|=
literal|"cxf://"
operator|+
name|POJO_PROXY_ADDRESS
operator|+
literal|"?serviceClass="
operator|+
literal|"org.apache.camel.component.cxf.HelloService"
operator|+
literal|"&dataFormat=POJO"
decl_stmt|;
comment|// use a non-exists address to trigger fail-over
name|String
name|real
init|=
literal|"cxf://"
operator|+
name|NONE_EXIST_ADDRESS
operator|+
literal|"?serviceClass="
operator|+
literal|"org.apache.camel.component.cxf.HelloService"
operator|+
literal|"&dataFormat=POJO"
decl_stmt|;
name|context2
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|startRoute
argument_list|(
name|context2
argument_list|,
name|proxy
argument_list|,
name|real
argument_list|)
expr_stmt|;
block|}
DECL|method|startRoute (DefaultCamelContext ctx, final String proxy, final String real)
specifier|private
name|void
name|startRoute
parameter_list|(
name|DefaultCamelContext
name|ctx
parameter_list|,
specifier|final
name|String
name|proxy
parameter_list|,
specifier|final
name|String
name|real
parameter_list|)
throws|throws
name|Exception
block|{
name|ctx
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|String
name|alt
init|=
name|SERVICE_ADDRESS
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|serviceList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceList
operator|.
name|add
argument_list|(
name|alt
argument_list|)
expr_stmt|;
name|RandomStrategy
name|strategy
init|=
operator|new
name|RandomStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAlternateAddresses
argument_list|(
name|serviceList
argument_list|)
expr_stmt|;
name|FailoverFeature
name|ff
init|=
operator|new
name|FailoverFeature
argument_list|()
decl_stmt|;
name|ff
operator|.
name|setStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|CxfEndpoint
name|endpoint
init|=
call|(
name|CxfEndpoint
call|)
argument_list|(
name|endpoint
argument_list|(
name|real
argument_list|)
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|ff
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|proxy
argument_list|)
operator|.
name|to
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|tryFailover (String url)
specifier|private
name|String
name|tryFailover
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|ClientProxyFactoryBean
name|factory
init|=
operator|new
name|ClientProxyFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setServiceClass
argument_list|(
name|HelloService
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAddress
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|HelloService
name|client
init|=
operator|(
name|HelloService
operator|)
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
return|return
name|client
operator|.
name|sayHello
argument_list|()
return|;
block|}
block|}
end_class

end_unit

