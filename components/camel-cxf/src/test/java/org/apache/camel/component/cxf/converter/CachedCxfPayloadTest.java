begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|NoTypeConversionAvailableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConversionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|CxfPayload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|ExchangeTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CachedCxfPayloadTest
specifier|public
class|class
name|CachedCxfPayloadTest
extends|extends
name|ExchangeTestSupport
block|{
DECL|field|PAYLOAD
specifier|private
specifier|static
specifier|final
name|String
name|PAYLOAD
init|=
literal|"<foo>bar</foo>"
decl_stmt|;
annotation|@
name|Test
DECL|method|testCachedCxfPayloadSAXSource ()
specifier|public
name|void
name|testCachedCxfPayloadSAXSource
parameter_list|()
throws|throws
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
throws|,
name|IOException
block|{
name|SAXSource
name|source
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|SAXSource
operator|.
name|class
argument_list|,
name|PAYLOAD
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCachedCxfPayloadStAXSource ()
specifier|public
name|void
name|testCachedCxfPayloadStAXSource
parameter_list|()
throws|throws
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
throws|,
name|IOException
block|{
name|StAXSource
name|source
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|StAXSource
operator|.
name|class
argument_list|,
name|PAYLOAD
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCachedCxfPayloadStaxSource ()
specifier|public
name|void
name|testCachedCxfPayloadStaxSource
parameter_list|()
throws|throws
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
throws|,
name|IOException
block|{
name|XMLStreamReader
name|streamReader
init|=
name|StaxUtils
operator|.
name|createXMLStreamReader
argument_list|(
operator|new
name|StreamSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|PAYLOAD
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|StaxSource
name|source
init|=
operator|new
name|StaxSource
argument_list|(
name|streamReader
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCachedCxfPayloadDOMSource ()
specifier|public
name|void
name|testCachedCxfPayloadDOMSource
parameter_list|()
throws|throws
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
throws|,
name|IOException
block|{
name|DOMSource
name|source
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|DOMSource
operator|.
name|class
argument_list|,
name|PAYLOAD
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCachedCxfPayloadStreamSource ()
specifier|public
name|void
name|testCachedCxfPayloadStreamSource
parameter_list|()
throws|throws
name|TypeConversionException
throws|,
name|NoTypeConversionAvailableException
throws|,
name|IOException
block|{
name|StreamSource
name|source
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|StreamSource
operator|.
name|class
argument_list|,
name|PAYLOAD
argument_list|)
decl_stmt|;
name|doTest
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|doTest (Object source)
specifier|private
name|void
name|doTest
parameter_list|(
name|Object
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|CxfPayload
argument_list|<
name|?
argument_list|>
name|originalPayload
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|CxfPayload
operator|.
name|class
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|CachedCxfPayload
argument_list|<
name|?
argument_list|>
name|cache
init|=
operator|new
name|CachedCxfPayload
argument_list|(
name|originalPayload
argument_list|,
name|exchange
argument_list|,
operator|new
name|XmlConverter
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|inMemory
argument_list|()
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|cache
operator|.
name|writeTo
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|bos
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|PAYLOAD
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|cache
operator|.
name|reset
argument_list|()
expr_stmt|;
name|CachedCxfPayload
name|clone
init|=
operator|(
name|CachedCxfPayload
operator|)
name|cache
operator|.
name|copy
argument_list|()
decl_stmt|;
name|bos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|clone
operator|.
name|writeTo
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|s
operator|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|bos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PAYLOAD
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|cache
operator|.
name|reset
argument_list|()
expr_stmt|;
name|clone
operator|.
name|reset
argument_list|()
expr_stmt|;
name|s
operator|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PAYLOAD
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|clone
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PAYLOAD
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

