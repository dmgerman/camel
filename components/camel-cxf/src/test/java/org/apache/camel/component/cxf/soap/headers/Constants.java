begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.soap.headers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|soap
operator|.
name|headers
package|;
end_package

begin_class
DECL|class|Constants
specifier|public
specifier|final
class|class
name|Constants
block|{
DECL|field|TEST_HDR_NS
specifier|public
specifier|static
specifier|final
name|String
name|TEST_HDR_NS
init|=
literal|"http://cxf.apache.org/outofband/Header"
decl_stmt|;
DECL|field|TEST_HDR_REQUEST_ELEM
specifier|public
specifier|static
specifier|final
name|String
name|TEST_HDR_REQUEST_ELEM
init|=
literal|"outofbandHeader"
decl_stmt|;
DECL|field|TEST_HDR_RESPONSE_ELEM
specifier|public
specifier|static
specifier|final
name|String
name|TEST_HDR_RESPONSE_ELEM
init|=
literal|"outofbandHeader"
decl_stmt|;
DECL|field|IN_HEADER_DATA
specifier|public
specifier|static
specifier|final
name|SOAPHeaderData
name|IN_HEADER_DATA
init|=
operator|new
name|SOAPHeaderData
argument_list|()
decl_stmt|;
DECL|field|OUT_HEADER_DATA
specifier|public
specifier|static
specifier|final
name|SOAPHeaderData
name|OUT_HEADER_DATA
init|=
operator|new
name|SOAPHeaderData
argument_list|()
decl_stmt|;
DECL|field|IN_OUT_REQUEST_HEADER_DATA
specifier|public
specifier|static
specifier|final
name|SOAPHeaderData
name|IN_OUT_REQUEST_HEADER_DATA
init|=
operator|new
name|SOAPHeaderData
argument_list|()
decl_stmt|;
DECL|field|IN_OUT_RESPONSE_HEADER_DATA
specifier|public
specifier|static
specifier|final
name|SOAPHeaderData
name|IN_OUT_RESPONSE_HEADER_DATA
init|=
operator|new
name|SOAPHeaderData
argument_list|()
decl_stmt|;
static|static
block|{
name|IN_HEADER_DATA
operator|.
name|setOriginator
argument_list|(
literal|"CxfSoapHeaderRoutePropagationTest.testInHeader"
argument_list|)
expr_stmt|;
name|IN_HEADER_DATA
operator|.
name|setMessage
argument_list|(
literal|"Invoking CxfSoapHeaderRoutePropagationTest.testInHeader()"
argument_list|)
expr_stmt|;
name|OUT_HEADER_DATA
operator|.
name|setOriginator
argument_list|(
literal|"CxfSoapHeaderRoutePropagationTest.testOutHeader"
argument_list|)
expr_stmt|;
name|OUT_HEADER_DATA
operator|.
name|setMessage
argument_list|(
literal|"Invoking CxfSoapHeaderRoutePropagationTest.testOutHeader()"
argument_list|)
expr_stmt|;
name|IN_OUT_REQUEST_HEADER_DATA
operator|.
name|setOriginator
argument_list|(
literal|"CxfSoapHeaderRoutePropagationTest.testInOutHeader Requestor"
argument_list|)
expr_stmt|;
name|IN_OUT_REQUEST_HEADER_DATA
operator|.
name|setMessage
argument_list|(
literal|"Invoking CxfSoapHeaderRoutePropagationTest.testInOutHeader() Request"
argument_list|)
expr_stmt|;
name|IN_OUT_RESPONSE_HEADER_DATA
operator|.
name|setOriginator
argument_list|(
literal|"CxfSoapHeaderRoutePropagationTest.testInOutHeader Responser"
argument_list|)
expr_stmt|;
name|IN_OUT_RESPONSE_HEADER_DATA
operator|.
name|setMessage
argument_list|(
literal|"Invoking CxfSoapHeaderRoutePropagationTest.testInOutHeader() Responser"
argument_list|)
expr_stmt|;
block|}
DECL|method|Constants ()
specifier|private
name|Constants
parameter_list|()
block|{     }
DECL|method|equals (SOAPHeaderData lhs, SOAPHeaderData rhs)
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|SOAPHeaderData
name|lhs
parameter_list|,
name|SOAPHeaderData
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|compare
argument_list|(
name|lhs
operator|.
name|getMessage
argument_list|()
argument_list|,
name|rhs
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|compare
argument_list|(
name|lhs
operator|.
name|getOriginator
argument_list|()
argument_list|,
name|rhs
operator|.
name|getOriginator
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|compare (L lhs, R rhs)
specifier|public
specifier|static
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
name|boolean
name|compare
parameter_list|(
name|L
name|lhs
parameter_list|,
name|R
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|lhs
operator|==
name|rhs
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|lhs
operator|==
literal|null
operator|||
name|rhs
operator|==
literal|null
operator|&&
name|lhs
operator|!=
name|rhs
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
return|;
block|}
block|}
end_class

end_unit

