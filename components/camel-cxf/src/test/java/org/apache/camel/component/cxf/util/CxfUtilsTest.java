begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfUtilsTest
specifier|public
class|class
name|CxfUtilsTest
extends|extends
name|Assert
block|{
DECL|field|TEST_XML1
specifier|private
specifier|static
specifier|final
name|String
name|TEST_XML1
init|=
literal|"<root><test1 id=\"1\"><test2 id=\"3\" xmlns=\"http://camel.apache.org/schema/one\">hello</test2></test1></root>"
decl_stmt|;
DECL|field|EXPECTED_STRING1
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_STRING1
init|=
literal|"<test1 id=\"1\"><test2 xmlns=\"http://camel.apache.org/schema/one\" id=\"3\">hello</test2></test1>"
decl_stmt|;
DECL|field|TEST_XML2
specifier|private
specifier|static
specifier|final
name|String
name|TEST_XML2
init|=
literal|"<root xmlns=\"http://camel.apache.org/schema/one\" xmlns:two=\"http://camel.apache.org/schema/two\"><test1 id=\"1\"><two:test2 id=\"3\">hello</two:test2></test1></root>"
decl_stmt|;
DECL|field|EXPECTED_STRING2
specifier|private
specifier|static
specifier|final
name|String
name|EXPECTED_STRING2
init|=
literal|"<test1 xmlns=\"http://camel.apache.org/schema/one\" xmlns:two=\"http://camel.apache.org/schema/two\" id=\"1\"><two:test2 id=\"3\">hello</two:test2></test1>"
decl_stmt|;
annotation|@
name|Test
DECL|method|testXmlToString ()
specifier|public
name|void
name|testXmlToString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Get unexpected String"
argument_list|,
name|EXPECTED_STRING1
argument_list|,
name|getSubElementString
argument_list|(
name|TEST_XML1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Get unexpected String"
argument_list|,
name|EXPECTED_STRING2
argument_list|,
name|getSubElementString
argument_list|(
name|TEST_XML2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getSubElementString (String string)
specifier|private
name|String
name|getSubElementString
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|string
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|XmlConverter
name|converter
init|=
operator|new
name|XmlConverter
argument_list|()
decl_stmt|;
name|Element
name|element
init|=
name|converter
operator|.
name|toDOMElement
argument_list|(
name|converter
operator|.
name|toDOMSource
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|subElement
init|=
operator|(
name|Element
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
return|return
name|CxfUtils
operator|.
name|elementToString
argument_list|(
name|subElement
argument_list|)
return|;
block|}
block|}
end_class

end_unit

