begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_class
DECL|class|CxfRawMessageRouterTest
specifier|public
class|class
name|CxfRawMessageRouterTest
extends|extends
name|CxfSimpleRouterTest
block|{
DECL|field|routerEndpointURI
specifier|private
name|String
name|routerEndpointURI
init|=
literal|"cxf://"
operator|+
name|ROUTER_ADDRESS
operator|+
literal|"?"
operator|+
name|SERVICE_CLASS
operator|+
literal|"&dataFormat=MESSAGE"
decl_stmt|;
DECL|field|serviceEndpointURI
specifier|private
name|String
name|serviceEndpointURI
init|=
literal|"cxf://"
operator|+
name|SERVICE_ADDRESS
operator|+
literal|"?"
operator|+
name|SERVICE_CLASS
operator|+
literal|"&dataFormat=MESSAGE"
decl_stmt|;
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|routerEndpointURI
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:org.apache.camel?level=DEBUG"
argument_list|)
operator|.
name|to
argument_list|(
name|serviceEndpointURI
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|testTheContentType ()
specifier|public
name|void
name|testTheContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|result
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|HelloService
name|client
init|=
name|getCXFClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|echo
argument_list|(
literal|"hello world"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Map
name|context
init|=
operator|(
name|Map
operator|)
name|result
operator|.
name|assertExchangeReceived
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"ResponseContext"
argument_list|)
decl_stmt|;
name|Map
name|protocalHeaders
init|=
operator|(
name|Map
operator|)
name|context
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.message.Message.PROTOCOL_HEADERS"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should get the content type"
argument_list|,
name|protocalHeaders
operator|.
name|get
argument_list|(
literal|"content-type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"[text/xml; charset=utf-8]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should get the response code "
argument_list|,
name|context
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.message.Message.RESPONSE_CODE"
argument_list|)
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// get the content type directly from the message header
name|assertEquals
argument_list|(
literal|"Should get the content type"
argument_list|,
name|result
operator|.
name|assertExchangeReceived
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"content-type"
argument_list|)
argument_list|,
literal|"text/xml; charset=utf-8"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

