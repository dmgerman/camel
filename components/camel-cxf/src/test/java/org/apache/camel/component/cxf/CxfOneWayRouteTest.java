begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hello_world_soap_http
operator|.
name|Greeter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * Tests a cxf routing scenario from an oneway cxf EP to a file EP to not forward the old input  * back to the oneway cxf EP.  */
end_comment

begin_class
DECL|class|CxfOneWayRouteTest
specifier|public
class|class
name|CxfOneWayRouteTest
extends|extends
name|CamelSpringTestSupport
block|{
DECL|field|SERVICE_NAME
specifier|private
specifier|static
specifier|final
name|QName
name|SERVICE_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SOAPService"
argument_list|)
decl_stmt|;
DECL|field|PORT_NAME
specifier|private
specifier|static
specifier|final
name|QName
name|PORT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://apache.org/hello_world_soap_http"
argument_list|,
literal|"SoapPort"
argument_list|)
decl_stmt|;
DECL|field|ROUTER_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|ROUTER_ADDRESS
init|=
literal|"http://localhost:"
operator|+
name|CXFTestSupport
operator|.
name|getPort1
argument_list|()
operator|+
literal|"/CxfOneWayRouteTest/router"
decl_stmt|;
DECL|field|bindingException
specifier|private
specifier|static
name|Exception
name|bindingException
decl_stmt|;
DECL|field|bindingDone
specifier|private
specifier|static
name|boolean
name|bindingDone
decl_stmt|;
DECL|field|onCompeletedCalled
specifier|private
specifier|static
name|boolean
name|onCompeletedCalled
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|bindingException
operator|=
literal|null
expr_stmt|;
name|bindingDone
operator|=
literal|false
expr_stmt|;
name|onCompeletedCalled
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
comment|// we can put the http conduit configuration here
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/component/cxf/CxfOneWayRouteBeans.xml"
argument_list|)
return|;
block|}
DECL|method|getCXFClient ()
specifier|protected
name|Greeter
name|getCXFClient
parameter_list|()
throws|throws
name|Exception
block|{
name|Service
name|service
init|=
name|Service
operator|.
name|create
argument_list|(
name|SERVICE_NAME
argument_list|)
decl_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|PORT_NAME
argument_list|,
literal|"http://schemas.xmlsoap.org/soap/"
argument_list|,
name|ROUTER_ADDRESS
argument_list|)
expr_stmt|;
name|Greeter
name|greeter
init|=
name|service
operator|.
name|getPort
argument_list|(
name|PORT_NAME
argument_list|,
name|Greeter
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|greeter
return|;
block|}
annotation|@
name|Test
DECL|method|testInvokingOneWayServiceFromCXFClient ()
specifier|public
name|void
name|testInvokingOneWayServiceFromCXFClient
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedFileExists
argument_list|(
literal|"target/camel-file/cxf-oneway-route"
argument_list|)
expr_stmt|;
name|Greeter
name|client
init|=
name|getCXFClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|greetMeOneWay
argument_list|(
literal|"lemac"
argument_list|)
expr_stmt|;
comment|// may need to wait until the oneway call completes
name|long
name|waitUntil
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
while|while
condition|(
operator|!
name|bindingDone
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|waitUntil
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"UnitOfWork done should be called"
argument_list|,
name|onCompeletedCalled
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"exception occured: "
operator|+
name|bindingException
argument_list|,
name|bindingException
argument_list|)
expr_stmt|;
block|}
DECL|class|TestProcessor
specifier|public
specifier|static
class|class
name|TestProcessor
implements|implements
name|Processor
block|{
DECL|field|MAGIC
specifier|static
specifier|final
name|byte
index|[]
name|MAGIC
init|=
block|{
operator|(
name|byte
operator|)
literal|0xca
block|,
literal|0x3e
block|,
literal|0x1e
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// just check the MEP here
name|assertEquals
argument_list|(
literal|"Don't get the right MEP"
argument_list|,
name|ExchangePattern
operator|.
name|InOnly
argument_list|,
name|exchange
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
comment|// adding some binary segment
name|String
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|MAGIC
argument_list|)
expr_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// add compliation
name|exchange
operator|.
name|getUnitOfWork
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|onCompeletedCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestCxfBinding
specifier|public
specifier|static
class|class
name|TestCxfBinding
extends|extends
name|DefaultCxfBinding
block|{
annotation|@
name|Override
DECL|method|populateCxfResponseFromExchange (Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange)
specifier|public
name|void
name|populateCxfResponseFromExchange
parameter_list|(
name|Exchange
name|camelExchange
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
name|cxfExchange
parameter_list|)
block|{
try|try
block|{
name|super
operator|.
name|populateCxfResponseFromExchange
argument_list|(
name|camelExchange
argument_list|,
name|cxfExchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|bindingException
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|bindingDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

