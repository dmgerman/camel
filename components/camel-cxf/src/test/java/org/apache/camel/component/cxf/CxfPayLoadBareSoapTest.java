begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxws
operator|.
name|JaxWsProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfPayLoadBareSoapTest
specifier|public
class|class
name|CxfPayLoadBareSoapTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|PORT
specifier|private
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|()
decl_stmt|;
DECL|field|ORIGINAL_URL
specifier|private
specifier|static
specifier|final
name|String
name|ORIGINAL_URL
init|=
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%s/original/Service"
argument_list|,
name|PORT
argument_list|)
decl_stmt|;
DECL|field|PROXY_URL
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_URL
init|=
name|String
operator|.
name|format
argument_list|(
literal|"http://localhost:%s/proxy/Service"
argument_list|,
name|PORT
argument_list|)
decl_stmt|;
DECL|field|IMPLEMENTATION
specifier|private
specifier|static
specifier|final
name|BareSoapServiceImpl
name|IMPLEMENTATION
init|=
operator|new
name|BareSoapServiceImpl
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startService ()
specifier|public
specifier|static
name|void
name|startService
parameter_list|()
block|{
name|Endpoint
operator|.
name|publish
argument_list|(
name|ORIGINAL_URL
argument_list|,
name|IMPLEMENTATION
argument_list|)
expr_stmt|;
block|}
DECL|method|getRouterEndpointURI ()
specifier|protected
name|String
name|getRouterEndpointURI
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"cxf:%s?dataFormat=PAYLOAD&wsdlURL=classpath:bare.wsdl"
argument_list|,
name|PROXY_URL
argument_list|)
return|;
block|}
DECL|method|getServiceEndpointURI ()
specifier|protected
name|String
name|getServiceEndpointURI
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"cxf:%s?dataFormat=PAYLOAD&wsdlURL=classpath:bare.wsdl"
argument_list|,
name|ORIGINAL_URL
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|getRouterEndpointURI
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|getServiceEndpointURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testInvokeProxyService ()
specifier|public
name|void
name|testInvokeProxyService
parameter_list|()
block|{
name|JaxWsProxyFactoryBean
name|factory
init|=
operator|new
name|JaxWsProxyFactoryBean
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setServiceClass
argument_list|(
name|BareSoapService
operator|.
name|class
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAddress
argument_list|(
name|PROXY_URL
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setBus
argument_list|(
name|BusFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|createBus
argument_list|()
argument_list|)
expr_stmt|;
name|BareSoapService
name|client
init|=
operator|(
name|BareSoapService
operator|)
name|factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|client
operator|.
name|doSomething
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Proxied service should have been invoked once"
argument_list|,
literal|1
argument_list|,
name|IMPLEMENTATION
operator|.
name|invocations
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|WebService
annotation|@
name|SOAPBinding
argument_list|(
name|parameterStyle
operator|=
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|BARE
argument_list|)
DECL|interface|BareSoapService
specifier|public
interface|interface
name|BareSoapService
block|{
DECL|method|doSomething ()
name|void
name|doSomething
parameter_list|()
function_decl|;
block|}
DECL|class|BareSoapServiceImpl
specifier|public
specifier|static
class|class
name|BareSoapServiceImpl
implements|implements
name|BareSoapService
block|{
DECL|field|invocations
specifier|private
name|AtomicInteger
name|invocations
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|doSomething ()
specifier|public
name|void
name|doSomething
parameter_list|()
block|{
name|invocations
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

