begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cxf
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cxf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|xml
operator|.
name|XPathBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|jaxp
operator|.
name|XmlConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|frontend
operator|.
name|ClientProxyFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CxfConsumerPayloadXPathClientServerTest
specifier|public
class|class
name|CxfConsumerPayloadXPathClientServerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|ECHO_RESPONSE
specifier|private
specifier|static
specifier|final
name|String
name|ECHO_RESPONSE
init|=
literal|"<ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">"
operator|+
literal|"<return xmlns=\"http://cxf.component.camel.apache.org/\">echo Hello World!</return>"
operator|+
literal|"</ns1:echoResponse>"
decl_stmt|;
DECL|field|simpleEndpointAddress
specifier|protected
specifier|final
name|String
name|simpleEndpointAddress
init|=
literal|"http://localhost:"
operator|+
name|CXFTestSupport
operator|.
name|getPort1
argument_list|()
operator|+
literal|"/"
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"/test"
decl_stmt|;
DECL|field|simpleEndpointURI
specifier|protected
specifier|final
name|String
name|simpleEndpointURI
init|=
literal|"cxf://"
operator|+
name|simpleEndpointAddress
operator|+
literal|"?serviceClass=org.apache.camel.component.cxf.HelloService"
decl_stmt|;
DECL|field|testMessage
specifier|private
name|String
name|testMessage
decl_stmt|;
DECL|field|receivedMessageCxfPayloadApplyingXPath
specifier|private
name|String
name|receivedMessageCxfPayloadApplyingXPath
decl_stmt|;
DECL|field|receivedMessageByDom
specifier|private
name|String
name|receivedMessageByDom
decl_stmt|;
DECL|field|receivedMessageStringApplyingXPath
specifier|private
name|String
name|receivedMessageStringApplyingXPath
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
name|simpleEndpointURI
operator|+
literal|"&dataFormat=PAYLOAD"
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:info"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|request
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|assertIsInstanceOf
argument_list|(
name|CxfPayload
operator|.
name|class
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|//attempt 1) applying XPath to exchange.getIn().getBody()
name|receivedMessageCxfPayloadApplyingXPath
operator|=
name|XPathBuilder
operator|.
name|xpath
argument_list|(
literal|"//*[name()='arg0']/text()"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//attempt 2) in stead of XPATH, browse the DOM-tree
name|CxfPayload
argument_list|<
name|SoapHeader
argument_list|>
name|payload
init|=
operator|(
name|CxfPayload
argument_list|<
name|SoapHeader
argument_list|>
operator|)
name|request
decl_stmt|;
name|Element
name|el
init|=
name|payload
operator|.
name|getBody
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|el2
init|=
operator|(
name|Element
operator|)
name|el
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|Text
name|textnode
init|=
operator|(
name|Text
operator|)
name|el2
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|receivedMessageByDom
operator|=
name|textnode
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
name|textnode
operator|=
operator|(
name|Text
operator|)
name|textnode
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
while|while
condition|(
name|textnode
operator|!=
literal|null
condition|)
block|{
comment|//the textnode appears to have siblings!
name|receivedMessageByDom
operator|=
name|receivedMessageByDom
operator|+
name|textnode
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
name|textnode
operator|=
operator|(
name|Text
operator|)
name|textnode
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
comment|//attempt 3) apply XPATH after converting CxfPayload to String
name|request
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertIsInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|receivedMessageStringApplyingXPath
operator|=
name|XPathBuilder
operator|.
name|xpath
argument_list|(
literal|"//*[name()='arg0']/text()"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|request
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//build some dummy response
name|XmlConverter
name|converter
init|=
operator|new
name|XmlConverter
argument_list|()
decl_stmt|;
name|Document
name|outDocument
init|=
name|converter
operator|.
name|toDOMDocument
argument_list|(
name|ECHO_RESPONSE
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Source
argument_list|>
name|outElements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|outElements
operator|.
name|add
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|outDocument
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// set the payload header with null
name|CxfPayload
argument_list|<
name|SoapHeader
argument_list|>
name|responsePayload
init|=
operator|new
name|CxfPayload
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|outElements
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|responsePayload
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|buildTestMessage (int size)
specifier|private
name|void
name|buildTestMessage
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|testMessage
operator|=
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"x"
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMessageWithIncreasingSize ()
specifier|public
name|void
name|testMessageWithIncreasingSize
parameter_list|()
throws|throws
name|Exception
block|{
name|execTest
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|execTest
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|execTest
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|execTest
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|execTest
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|execTest
argument_list|(
literal|100000
argument_list|)
expr_stmt|;
block|}
DECL|method|execTest (int size)
specifier|private
name|void
name|execTest
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|buildTestMessage
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|ClientProxyFactoryBean
name|proxyFactory
init|=
operator|new
name|ClientProxyFactoryBean
argument_list|()
decl_stmt|;
name|ClientFactoryBean
name|clientBean
init|=
name|proxyFactory
operator|.
name|getClientFactoryBean
argument_list|()
decl_stmt|;
name|clientBean
operator|.
name|setAddress
argument_list|(
name|simpleEndpointAddress
argument_list|)
expr_stmt|;
name|clientBean
operator|.
name|setServiceClass
argument_list|(
name|HelloService
operator|.
name|class
argument_list|)
expr_stmt|;
name|clientBean
operator|.
name|setBus
argument_list|(
name|BusFactory
operator|.
name|getDefaultBus
argument_list|()
argument_list|)
expr_stmt|;
name|HelloService
name|client
init|=
operator|(
name|HelloService
operator|)
name|proxyFactory
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|client
operator|.
name|echo
argument_list|(
name|testMessage
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"We should get the echo string result from router"
argument_list|,
literal|"echo Hello World!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//check received requests
name|assertEquals
argument_list|(
literal|"Lengths of testMessage and receiveMessage should be equal (conversion body to String),"
argument_list|,
name|testMessage
operator|.
name|length
argument_list|()
argument_list|,
name|receivedMessageStringApplyingXPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lengths of receivedMessageByDom and receivedMessageCxfPayloadApplyingXPath should be equal"
argument_list|,
name|receivedMessageCxfPayloadApplyingXPath
operator|.
name|length
argument_list|()
argument_list|,
name|receivedMessageByDom
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lengths of testMessage and receiveMessage should be equal (body is CxfPayload),"
argument_list|,
name|testMessage
operator|.
name|length
argument_list|()
argument_list|,
name|receivedMessageCxfPayloadApplyingXPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

