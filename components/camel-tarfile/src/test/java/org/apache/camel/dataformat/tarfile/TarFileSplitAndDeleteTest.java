begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.tarfile
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|tarfile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|NotifyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TarFileSplitAndDeleteTest
specifier|public
class|class
name|TarFileSplitAndDeleteTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteDirectory
argument_list|(
literal|"target/testDeleteTarFileWhenUnmarshalWithDataFormat"
argument_list|)
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/testDeleteTarFileWhenUnmarshalWithSplitter"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteTarFileWhenUnmarshalWithDataFormat ()
specifier|public
name|void
name|testDeleteTarFileWhenUnmarshalWithDataFormat
parameter_list|()
throws|throws
name|Exception
block|{
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|from
argument_list|(
literal|"file://target/"
operator|+
literal|"testDeleteTarFileWhenUnmarshalWithDataFormat"
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|tarFile
init|=
name|createTarFile
argument_list|(
literal|"testDeleteTarFileWhenUnmarshalWithDataFormat"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|notify
operator|.
name|matchesMockWaitTime
argument_list|()
expr_stmt|;
comment|// the original file should have been deleted
name|assertFalse
argument_list|(
literal|"File should been deleted"
argument_list|,
operator|new
name|File
argument_list|(
name|tarFile
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteTarFileWhenUnmarshalWithSplitter ()
specifier|public
name|void
name|testDeleteTarFileWhenUnmarshalWithSplitter
parameter_list|()
throws|throws
name|Exception
block|{
name|NotifyBuilder
name|notify
init|=
operator|new
name|NotifyBuilder
argument_list|(
name|context
argument_list|)
operator|.
name|from
argument_list|(
literal|"file://target/"
operator|+
literal|"testDeleteTarFileWhenUnmarshalWithSplitter"
argument_list|)
operator|.
name|whenDone
argument_list|(
literal|1
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:end"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|tarFile
init|=
name|createTarFile
argument_list|(
literal|"testDeleteTarFileWhenUnmarshalWithSplitter"
argument_list|)
decl_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|notify
operator|.
name|matchesMockWaitTime
argument_list|()
expr_stmt|;
comment|// the original file should have been deleted,
name|assertFalse
argument_list|(
literal|"File should been deleted"
argument_list|,
operator|new
name|File
argument_list|(
name|tarFile
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RoutesBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|TarFileDataFormat
name|dataFormat
init|=
operator|new
name|TarFileDataFormat
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|setUsingIterator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"file://target/testDeleteTarFileWhenUnmarshalWithDataFormat?delete=true"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|dataFormat
argument_list|)
operator|.
name|split
argument_list|(
name|bodyAs
argument_list|(
name|Iterator
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|streaming
argument_list|()
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"file://target/testDeleteTarFileWhenUnmarshalWithSplitter?delete=true"
argument_list|)
operator|.
name|split
argument_list|(
operator|new
name|TarSplitter
argument_list|()
argument_list|)
operator|.
name|streaming
argument_list|()
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:end"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createTarFile (String folder)
specifier|private
name|String
name|createTarFile
parameter_list|(
name|String
name|folder
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|source
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/test/resources/data/tarfile3.tar"
argument_list|)
decl_stmt|;
name|Path
name|target
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
name|folder
operator|+
name|File
operator|.
name|separator
operator|+
literal|"data.tar"
argument_list|)
decl_stmt|;
name|target
operator|.
name|toFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Path
name|copy
init|=
name|Files
operator|.
name|copy
argument_list|(
name|source
argument_list|,
name|target
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
decl_stmt|;
return|return
name|copy
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

