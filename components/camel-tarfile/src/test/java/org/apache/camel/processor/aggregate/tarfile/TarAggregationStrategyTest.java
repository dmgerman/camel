begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate.tarfile
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|tarfile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TarAggregationStrategyTest
specifier|public
class|class
name|TarAggregationStrategyTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|EXPECTED_NO_FILES
specifier|private
specifier|static
specifier|final
name|int
name|EXPECTED_NO_FILES
init|=
literal|3
decl_stmt|;
DECL|field|tar
specifier|private
name|TarAggregationStrategy
name|tar
init|=
operator|new
name|TarAggregationStrategy
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tar
operator|.
name|setParentDir
argument_list|(
literal|"target/temp"
argument_list|)
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/temp"
argument_list|)
expr_stmt|;
name|deleteDirectory
argument_list|(
literal|"target/out"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitter ()
specifier|public
name|void
name|testSplitter
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:aggregateToTarEntry"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedHeaderReceived
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
literal|"target/out"
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|files
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be a file in target/out directory"
argument_list|,
name|files
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|File
name|resultFile
init|=
name|files
index|[
literal|0
index|]
decl_stmt|;
name|TarArchiveInputStream
name|tin
init|=
operator|new
name|TarArchiveInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|resultFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|fileCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TarArchiveEntry
name|te
init|=
name|tin
operator|.
name|getNextTarEntry
argument_list|()
init|;
name|te
operator|!=
literal|null
condition|;
name|te
operator|=
name|tin
operator|.
name|getNextTarEntry
argument_list|()
control|)
block|{
name|fileCount
operator|=
name|fileCount
operator|+
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Tar file should contains "
operator|+
name|TarAggregationStrategyTest
operator|.
name|EXPECTED_NO_FILES
operator|+
literal|" files"
argument_list|,
name|TarAggregationStrategyTest
operator|.
name|EXPECTED_NO_FILES
argument_list|,
name|fileCount
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|tin
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Untar file and Split it according to FileEntry
name|from
argument_list|(
literal|"file:src/test/resources/org/apache/camel/aggregate/tarfile/data?consumer.delay=1000&noop=true"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
name|constant
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
operator|.
name|aggregate
argument_list|(
name|tar
argument_list|)
operator|.
name|constant
argument_list|(
literal|true
argument_list|)
operator|.
name|completionFromBatchConsumer
argument_list|()
operator|.
name|eagerCheckCompletion
argument_list|()
operator|.
name|to
argument_list|(
literal|"file:target/out"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:aggregateToTarEntry"
argument_list|)
operator|.
name|log
argument_list|(
literal|"Done processing tar file: ${header.CamelFileName}"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

