begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.tarfile
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|tarfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveOutputStream
import|;
end_import

begin_class
DECL|class|TarUtils
specifier|final
class|class
name|TarUtils
block|{
DECL|field|TEXT
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"The Masque of Queen Bersabe (excerpt) \n"
operator|+
literal|"by: Algernon Charles Swinburne \n\n"
operator|+
literal|"My lips kissed dumb the word of Ah \n"
operator|+
literal|"Sighed on strange lips grown sick thereby. \n"
operator|+
literal|"God wrought to me my royal bed; \n"
operator|+
literal|"The inner work thereof was red, \n"
operator|+
literal|"The outer work was ivory. \n"
operator|+
literal|"My mouth's heat was the heat of flame \n"
operator|+
literal|"For lust towards the kings that came \n"
operator|+
literal|"With horsemen riding royally."
decl_stmt|;
DECL|method|TarUtils ()
specifier|private
name|TarUtils
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
DECL|method|getTaredText (String entryName)
specifier|static
name|byte
index|[]
name|getTaredText
parameter_list|(
name|String
name|entryName
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|TEXT
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|TarArchiveOutputStream
name|tos
init|=
operator|new
name|TarArchiveOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
try|try
block|{
name|TarArchiveEntry
name|entry
init|=
operator|new
name|TarArchiveEntry
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setSize
argument_list|(
name|bais
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|tos
operator|.
name|putArchiveEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|bais
argument_list|,
name|tos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tos
operator|.
name|closeArchiveEntry
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|bais
argument_list|,
name|tos
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|getBytes (File file)
specifier|static
name|byte
index|[]
name|getBytes
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|IOHelper
operator|.
name|copy
argument_list|(
name|fis
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|fis
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

