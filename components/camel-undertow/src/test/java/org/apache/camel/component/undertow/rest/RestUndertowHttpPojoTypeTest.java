begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow.rest
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|BaseUndertowTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestBindingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|VerbDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|RestUndertowHttpPojoTypeTest
specifier|public
class|class
name|RestUndertowHttpPojoTypeTest
extends|extends
name|BaseUndertowTest
block|{
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testUndertowPojoTypeValidateModel ()
specifier|public
name|void
name|testUndertowPojoTypeValidateModel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Wasn't clear if there's a way to put this test into camel-core just to test the model
comment|// perhaps without starting the Camel Context?
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|restDefinitions
init|=
name|context
argument_list|()
operator|.
name|getRestDefinitions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|restDefinitions
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|restDefinitions
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|RestDefinition
name|restDefinition
init|=
name|restDefinitions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|VerbDefinition
argument_list|>
name|verbs
init|=
name|restDefinition
operator|.
name|getVerbs
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|verbs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|VerbDefinition
argument_list|>
name|mapVerb
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|verbs
operator|.
name|forEach
argument_list|(
name|verb
lambda|->
name|mapVerb
operator|.
name|put
argument_list|(
name|verb
operator|.
name|getId
argument_list|()
argument_list|,
name|verb
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|mapVerb
operator|.
name|get
argument_list|(
literal|"getUsers"
argument_list|)
operator|.
name|getOutType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|mapVerb
operator|.
name|get
argument_list|(
literal|"getUsersList"
argument_list|)
operator|.
name|getOutType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserPojo
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|mapVerb
operator|.
name|get
argument_list|(
literal|"getUser"
argument_list|)
operator|.
name|getOutType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserPojo
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|mapVerb
operator|.
name|get
argument_list|(
literal|"putUser"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|mapVerb
operator|.
name|get
argument_list|(
literal|"putUsers"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|mapVerb
operator|.
name|get
argument_list|(
literal|"putUsersList"
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUndertowPojoTypeGetUsers ()
specifier|public
name|void
name|testUndertowPojoTypeGetUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|outExchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"undertow:http://localhost:{{port}}/users"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outExchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"application/json"
argument_list|,
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|UserPojo
index|[]
name|users
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|out
argument_list|,
name|UserPojo
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|users
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scott"
argument_list|,
name|users
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Claus"
argument_list|,
name|users
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUndertowPojoTypePutUser ()
specifier|public
name|void
name|testUndertowPojoTypePutUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|outExchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"undertow:http://localhost:{{port}}/users/1"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|UserPojo
name|user
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outExchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUndertowPojoTypePutUserFail ()
specifier|public
name|void
name|testUndertowPojoTypePutUserFail
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:putUser"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Exchange
name|outExchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"undertow:http://localhost:{{port}}/users/1"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|CountryPojo
name|country
init|=
operator|new
name|CountryPojo
argument_list|()
decl_stmt|;
name|country
operator|.
name|setIso
argument_list|(
literal|"US"
argument_list|)
expr_stmt|;
name|country
operator|.
name|setCountry
argument_list|(
literal|"United States"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|country
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outExchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUndertowPojoTypePutUsers ()
specifier|public
name|void
name|testUndertowPojoTypePutUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|UserPojo
name|user1
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user1
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user1
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|UserPojo
name|user2
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user2
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|user2
operator|.
name|setName
argument_list|(
literal|"Claus"
argument_list|)
expr_stmt|;
specifier|final
name|UserPojo
index|[]
name|users
init|=
operator|new
name|UserPojo
index|[]
block|{
name|user1
block|,
name|user2
block|}
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:putUsers"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|Exchange
name|outExchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"undertow:http://localhost:{{port}}/users"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|users
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outExchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|mock
operator|.
name|assertExchangeReceived
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UserPojo
index|[]
name|receivedUsers
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|receivedUsers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user1
operator|.
name|getName
argument_list|()
argument_list|,
name|receivedUsers
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user2
operator|.
name|getName
argument_list|()
argument_list|,
name|receivedUsers
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUndertowPojoTypePutUsersFail ()
specifier|public
name|void
name|testUndertowPojoTypePutUsersFail
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:putUsers"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Exchange
name|outExchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"undertow:http://localhost:{{port}}/users"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|UserPojo
name|user
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outExchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUndertowPojoTypePutUsersList ()
specifier|public
name|void
name|testUndertowPojoTypePutUsersList
parameter_list|()
throws|throws
name|Exception
block|{
name|UserPojo
name|user1
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user1
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user1
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|UserPojo
name|user2
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user2
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|user2
operator|.
name|setName
argument_list|(
literal|"Claus"
argument_list|)
expr_stmt|;
specifier|final
name|UserPojo
index|[]
name|users
init|=
operator|new
name|UserPojo
index|[]
block|{
name|user1
block|,
name|user2
block|}
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:putUsersList"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|Exchange
name|outExchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"undertow:http://localhost:{{port}}/users/list"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|users
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outExchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|mock
operator|.
name|assertExchangeReceived
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UserPojo
index|[]
name|receivedUsers
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|receivedUsers
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user1
operator|.
name|getName
argument_list|()
argument_list|,
name|receivedUsers
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user2
operator|.
name|getName
argument_list|()
argument_list|,
name|receivedUsers
index|[
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUndertowPojoTypePutUsersListFail ()
specifier|public
name|void
name|testUndertowPojoTypePutUsersListFail
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:putUsersList"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Exchange
name|outExchange
init|=
name|template
operator|.
name|request
argument_list|(
literal|"undertow:http://localhost:{{port}}/users/list"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
literal|"PUT"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|ACCEPT_CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|UserPojo
name|user
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|outExchange
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|outExchange
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|constant
argument_list|(
literal|400
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|constant
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
operator|.
name|setBody
argument_list|()
operator|.
name|simple
argument_list|(
literal|"${exchange.message}"
argument_list|)
expr_stmt|;
comment|// configure to use undertow on localhost with the given port
name|restConfiguration
argument_list|()
operator|.
name|component
argument_list|(
literal|"undertow"
argument_list|)
operator|.
name|host
argument_list|(
literal|"localhost"
argument_list|)
operator|.
name|port
argument_list|(
name|getPort
argument_list|()
argument_list|)
operator|.
name|bindingMode
argument_list|(
name|RestBindingMode
operator|.
name|json
argument_list|)
expr_stmt|;
comment|// use the rest DSL to define the rest services
name|rest
argument_list|()
operator|.
name|get
argument_list|(
literal|"/users"
argument_list|)
operator|.
name|id
argument_list|(
literal|"getUsers"
argument_list|)
operator|.
name|outType
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|route
argument_list|()
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|UserPojo
name|user1
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user1
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user1
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|UserPojo
name|user2
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user2
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|user2
operator|.
name|setName
argument_list|(
literal|"Claus"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|UserPojo
index|[]
block|{
name|user1
block|,
name|user2
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|endRest
argument_list|()
operator|.
name|get
argument_list|(
literal|"/users/list"
argument_list|)
operator|.
name|id
argument_list|(
literal|"getUsersList"
argument_list|)
operator|.
name|outTypeList
argument_list|(
name|UserPojo
operator|.
name|class
argument_list|)
operator|.
name|route
argument_list|()
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|UserPojo
name|user1
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user1
operator|.
name|setId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|user1
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|UserPojo
name|user2
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user2
operator|.
name|setId
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|user2
operator|.
name|setName
argument_list|(
literal|"Claus"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|UserPojo
index|[]
block|{
name|user1
block|,
name|user2
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|endRest
argument_list|()
operator|.
name|get
argument_list|(
literal|"/users/{id}"
argument_list|)
operator|.
name|id
argument_list|(
literal|"getUser"
argument_list|)
operator|.
name|outType
argument_list|(
name|UserPojo
operator|.
name|class
argument_list|)
operator|.
name|route
argument_list|()
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|UserPojo
name|user1
init|=
operator|new
name|UserPojo
argument_list|()
decl_stmt|;
name|user1
operator|.
name|setId
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"id"
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|user1
operator|.
name|setName
argument_list|(
literal|"Scott"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|user1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|endRest
argument_list|()
operator|.
name|put
argument_list|(
literal|"/users/{id}"
argument_list|)
operator|.
name|id
argument_list|(
literal|"putUser"
argument_list|)
operator|.
name|type
argument_list|(
name|UserPojo
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:putUser"
argument_list|)
operator|.
name|put
argument_list|(
literal|"/users"
argument_list|)
operator|.
name|id
argument_list|(
literal|"putUsers"
argument_list|)
operator|.
name|type
argument_list|(
name|UserPojo
index|[]
operator|.
expr|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:putUsers"
argument_list|)
operator|.
name|put
argument_list|(
literal|"/users/list"
argument_list|)
operator|.
name|id
argument_list|(
literal|"putUsersList"
argument_list|)
operator|.
name|typeList
argument_list|(
name|UserPojo
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:putUsersList"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

