begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow.ws
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|ws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|BaseUndertowTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowConstants
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|AsyncHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|DefaultAsyncHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|ws
operator|.
name|WebSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|ws
operator|.
name|WebSocketListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|ws
operator|.
name|WebSocketUpgradeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|UndertowWsConsumerRouteTest
specifier|public
class|class
name|UndertowWsConsumerRouteTest
extends|extends
name|BaseUndertowTest
block|{
DECL|field|CONNECTED_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|CONNECTED_PREFIX
init|=
literal|"connected "
decl_stmt|;
DECL|field|BROADCAST_MESSAGE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|BROADCAST_MESSAGE_PREFIX
init|=
literal|"broadcast "
decl_stmt|;
annotation|@
name|Test
DECL|method|wsClientSingleText ()
specifier|public
name|void
name|wsClientSingleText
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncHttpClient
name|c
init|=
operator|new
name|DefaultAsyncHttpClient
argument_list|()
decl_stmt|;
name|WebSocket
name|websocket
init|=
name|c
operator|.
name|prepareGet
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app1"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|WebSocketUpgradeHandler
operator|.
name|Builder
argument_list|()
operator|.
name|addWebSocketListener
argument_list|(
operator|new
name|WebSocketListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onTextFrame
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|finalFragment
parameter_list|,
name|int
name|rsv
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"got message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|reason
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result1"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|websocket
operator|.
name|sendTextFrame
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|result
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|websocket
operator|.
name|sendCloseFrame
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wsClientSingleTextStreaming ()
specifier|public
name|void
name|wsClientSingleTextStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncHttpClient
name|c
init|=
operator|new
name|DefaultAsyncHttpClient
argument_list|()
decl_stmt|;
name|WebSocket
name|websocket
init|=
name|c
operator|.
name|prepareGet
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app2"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|WebSocketUpgradeHandler
operator|.
name|Builder
argument_list|()
operator|.
name|addWebSocketListener
argument_list|(
operator|new
name|WebSocketListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onTextFrame
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|finalFragment
parameter_list|,
name|int
name|rsv
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"got message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|reason
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result2"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|websocket
operator|.
name|sendTextFrame
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|result
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getReceivedExchanges
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exchanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
name|result
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"body is "
operator|+
name|body
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|body
operator|instanceof
name|Reader
argument_list|)
expr_stmt|;
name|Reader
name|r
init|=
operator|(
name|Reader
operator|)
name|body
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test"
argument_list|,
name|IOConverter
operator|.
name|toString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|websocket
operator|.
name|sendCloseFrame
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wsClientSingleBytes ()
specifier|public
name|void
name|wsClientSingleBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncHttpClient
name|c
init|=
operator|new
name|DefaultAsyncHttpClient
argument_list|()
decl_stmt|;
name|WebSocket
name|websocket
init|=
name|c
operator|.
name|prepareGet
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app1"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|WebSocketUpgradeHandler
operator|.
name|Builder
argument_list|()
operator|.
name|addWebSocketListener
argument_list|(
operator|new
name|WebSocketListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|reason
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBinaryFrame
parameter_list|(
name|byte
index|[]
name|message
parameter_list|,
name|boolean
name|finalFragment
parameter_list|,
name|int
name|rsv
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"got byte[] message"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|testmessage
init|=
literal|"Test"
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedBodiesReceived
argument_list|(
name|testmessage
argument_list|)
expr_stmt|;
name|websocket
operator|.
name|sendBinaryFrame
argument_list|(
name|testmessage
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|websocket
operator|.
name|sendCloseFrame
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wsClientSingleBytesStreaming ()
specifier|public
name|void
name|wsClientSingleBytesStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncHttpClient
name|c
init|=
operator|new
name|DefaultAsyncHttpClient
argument_list|()
decl_stmt|;
name|WebSocket
name|websocket
init|=
name|c
operator|.
name|prepareGet
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app2"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|WebSocketUpgradeHandler
operator|.
name|Builder
argument_list|()
operator|.
name|addWebSocketListener
argument_list|(
operator|new
name|WebSocketListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBinaryFrame
parameter_list|(
name|byte
index|[]
name|message
parameter_list|,
name|boolean
name|finalFragment
parameter_list|,
name|int
name|rsv
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"got message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|reason
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result2"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|testmessage
init|=
literal|"Test"
operator|.
name|getBytes
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
name|websocket
operator|.
name|sendBinaryFrame
argument_list|(
name|testmessage
argument_list|)
expr_stmt|;
name|result
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getReceivedExchanges
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|exchanges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|body
init|=
name|result
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"body is "
operator|+
name|body
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|body
operator|instanceof
name|InputStream
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
operator|(
name|InputStream
operator|)
name|body
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|testmessage
argument_list|,
name|IOConverter
operator|.
name|toBytes
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|websocket
operator|.
name|sendCloseFrame
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|wsClientMultipleText ()
specifier|public
name|void
name|wsClientMultipleText
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncHttpClient
name|c1
init|=
operator|new
name|DefaultAsyncHttpClient
argument_list|()
decl_stmt|;
name|WebSocket
name|websocket1
init|=
name|c1
operator|.
name|prepareGet
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app1"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|WebSocketUpgradeHandler
operator|.
name|Builder
argument_list|()
operator|.
name|addWebSocketListener
argument_list|(
operator|new
name|WebSocketListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onTextFrame
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|finalFragment
parameter_list|,
name|int
name|rsv
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"got message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|reason
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|AsyncHttpClient
name|c2
init|=
operator|new
name|DefaultAsyncHttpClient
argument_list|()
decl_stmt|;
name|WebSocket
name|websocket2
init|=
name|c2
operator|.
name|prepareGet
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app1"
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|WebSocketUpgradeHandler
operator|.
name|Builder
argument_list|()
operator|.
name|addWebSocketListener
argument_list|(
operator|new
name|WebSocketListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onTextFrame
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|finalFragment
parameter_list|,
name|int
name|rsv
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"got message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|WebSocket
name|webSocket
parameter_list|,
name|int
name|code
parameter_list|,
name|String
name|reason
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result1"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|websocket1
operator|.
name|sendTextFrame
argument_list|(
literal|"Test1"
argument_list|)
expr_stmt|;
name|websocket2
operator|.
name|sendTextFrame
argument_list|(
literal|"Test2"
argument_list|)
expr_stmt|;
name|result
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|result
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getReceivedExchanges
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|actual
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|actual
operator|.
name|add
argument_list|(
name|exchanges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|.
name|add
argument_list|(
name|exchanges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Test1"
argument_list|,
literal|"Test2"
argument_list|)
argument_list|)
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|websocket1
operator|.
name|sendCloseFrame
argument_list|()
expr_stmt|;
name|websocket2
operator|.
name|sendCloseFrame
argument_list|()
expr_stmt|;
name|c1
operator|.
name|close
argument_list|()
expr_stmt|;
name|c2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|echo ()
specifier|public
name|void
name|echo
parameter_list|()
throws|throws
name|Exception
block|{
name|TestClient
name|wsclient1
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app3"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|wsclient1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient1
operator|.
name|sendTextMessage
argument_list|(
literal|"Test1"
argument_list|)
expr_stmt|;
name|wsclient1
operator|.
name|sendTextMessage
argument_list|(
literal|"Test2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wsclient1
operator|.
name|await
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Test1"
argument_list|,
literal|"Test2"
argument_list|)
argument_list|,
name|wsclient1
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|wsclient1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|echoMulti ()
specifier|public
name|void
name|echoMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|TestClient
name|wsclient1
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app3"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TestClient
name|wsclient2
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app3"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|wsclient1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient1
operator|.
name|sendTextMessage
argument_list|(
literal|"Gambas"
argument_list|)
expr_stmt|;
name|wsclient2
operator|.
name|sendTextMessage
argument_list|(
literal|"Calamares"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wsclient1
operator|.
name|await
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wsclient2
operator|.
name|await
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Gambas"
argument_list|)
argument_list|,
name|wsclient1
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Calamares"
argument_list|)
argument_list|,
name|wsclient2
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|wsclient1
operator|.
name|close
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sendToAll ()
specifier|public
name|void
name|sendToAll
parameter_list|()
throws|throws
name|Exception
block|{
name|TestClient
name|wsclient1
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app4"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TestClient
name|wsclient2
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app4"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|wsclient1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient1
operator|.
name|sendTextMessage
argument_list|(
literal|"Gambas"
argument_list|)
expr_stmt|;
name|wsclient2
operator|.
name|sendTextMessage
argument_list|(
literal|"Calamares"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wsclient1
operator|.
name|await
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wsclient2
operator|.
name|await
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|received1
init|=
name|wsclient1
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|received1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|received1
operator|.
name|contains
argument_list|(
literal|"Gambas"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|received1
operator|.
name|contains
argument_list|(
literal|"Calamares"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|received2
init|=
name|wsclient2
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|received2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|received2
operator|.
name|contains
argument_list|(
literal|"Gambas"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|received2
operator|.
name|contains
argument_list|(
literal|"Calamares"
argument_list|)
argument_list|)
expr_stmt|;
name|wsclient1
operator|.
name|close
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|fireWebSocketChannelEvents ()
specifier|public
name|void
name|fireWebSocketChannelEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|result
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result5"
argument_list|)
decl_stmt|;
name|result
operator|.
name|expectedMessageCount
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|TestClient
name|wsclient1
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app5"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|TestClient
name|wsclient2
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app5"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|wsclient1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient1
operator|.
name|sendTextMessage
argument_list|(
literal|"Gambas"
argument_list|)
expr_stmt|;
name|wsclient2
operator|.
name|sendTextMessage
argument_list|(
literal|"Calamares"
argument_list|)
expr_stmt|;
name|wsclient1
operator|.
name|close
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|.
name|await
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|result
operator|.
name|getReceivedExchanges
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|connections
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|key
init|=
operator|(
name|String
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|messages
init|=
name|connections
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|messages
operator|==
literal|null
condition|)
block|{
name|messages
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|connections
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|messages
argument_list|)
expr_stmt|;
block|}
name|String
name|body
init|=
name|in
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|messages
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messages
operator|.
name|add
argument_list|(
name|in
operator|.
name|getHeader
argument_list|(
name|UndertowConstants
operator|.
name|EVENT_TYPE_ENUM
argument_list|,
name|EventType
operator|.
name|class
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|expected1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|EventType
operator|.
name|ONOPEN
operator|.
name|name
argument_list|()
argument_list|,
literal|"Gambas"
argument_list|,
name|EventType
operator|.
name|ONCLOSE
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|expected2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|EventType
operator|.
name|ONOPEN
operator|.
name|name
argument_list|()
argument_list|,
literal|"Calamares"
argument_list|,
name|EventType
operator|.
name|ONCLOSE
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|connections
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|it
init|=
name|connections
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|actual1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"actual "
operator|+
name|actual1
argument_list|,
name|actual1
operator|.
name|equals
argument_list|(
name|expected1
argument_list|)
operator|||
name|actual1
operator|.
name|equals
argument_list|(
name|expected2
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|actual2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"actual "
operator|+
name|actual2
argument_list|,
name|actual2
operator|.
name|equals
argument_list|(
name|expected1
argument_list|)
operator|||
name|actual2
operator|.
name|equals
argument_list|(
name|expected2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|connectionKeyList ()
specifier|public
name|void
name|connectionKeyList
parameter_list|()
throws|throws
name|Exception
block|{
name|TestClient
name|wsclient1
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app6"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TestClient
name|wsclient2
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app6"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TestClient
name|wsclient3
init|=
operator|new
name|TestClient
argument_list|(
literal|"ws://localhost:"
operator|+
name|getPort
argument_list|()
operator|+
literal|"/app6"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|wsclient1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient3
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsclient1
operator|.
name|await
argument_list|(
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|String
name|connectionKey1
init|=
name|assertConnected
argument_list|(
name|wsclient1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|connectionKey1
argument_list|)
expr_stmt|;
name|wsclient2
operator|.
name|await
argument_list|(
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|String
name|connectionKey2
init|=
name|assertConnected
argument_list|(
name|wsclient2
argument_list|)
decl_stmt|;
name|wsclient3
operator|.
name|await
argument_list|(
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|String
name|connectionKey3
init|=
name|assertConnected
argument_list|(
name|wsclient3
argument_list|)
decl_stmt|;
name|wsclient1
operator|.
name|reset
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|wsclient2
operator|.
name|reset
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|wsclient3
operator|.
name|reset
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|broadcastMsg
init|=
name|BROADCAST_MESSAGE_PREFIX
operator|+
name|connectionKey2
operator|+
literal|" "
operator|+
name|connectionKey3
decl_stmt|;
name|wsclient1
operator|.
name|sendTextMessage
argument_list|(
name|broadcastMsg
argument_list|)
expr_stmt|;
comment|// this one should go to wsclient2 and wsclient3
name|wsclient1
operator|.
name|sendTextMessage
argument_list|(
literal|"private"
argument_list|)
expr_stmt|;
comment|// this one should go to wsclient1 only
name|wsclient2
operator|.
name|await
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|broadcastMsg
argument_list|,
name|wsclient2
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|wsclient3
operator|.
name|await
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|broadcastMsg
argument_list|,
name|wsclient3
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|wsclient1
operator|.
name|await
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"private"
argument_list|,
name|wsclient1
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|wsclient1
operator|.
name|close
argument_list|()
expr_stmt|;
name|wsclient2
operator|.
name|close
argument_list|()
expr_stmt|;
name|wsclient3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|assertConnected (TestClient wsclient1)
specifier|private
name|String
name|assertConnected
parameter_list|(
name|TestClient
name|wsclient1
parameter_list|)
block|{
specifier|final
name|String
name|msg0
init|=
name|wsclient1
operator|.
name|getReceived
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"'"
operator|+
name|msg0
operator|+
literal|"' should start with '"
operator|+
name|CONNECTED_PREFIX
operator|+
literal|"'"
argument_list|,
name|msg0
operator|.
name|startsWith
argument_list|(
name|CONNECTED_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|msg0
operator|.
name|substring
argument_list|(
name|CONNECTED_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
specifier|final
name|int
name|port
init|=
name|getPort
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app1"
argument_list|)
operator|.
name|log
argument_list|(
literal|">>> Message received from WebSocket Client : ${body}"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result1"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app2?useStreaming=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result2"
argument_list|)
expr_stmt|;
comment|/* echo */
name|from
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app3"
argument_list|)
operator|.
name|to
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app3"
argument_list|)
expr_stmt|;
comment|/* sendToAll */
name|from
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app4"
argument_list|)
comment|//
operator|.
name|to
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app4?sendToAll=true"
argument_list|)
expr_stmt|;
comment|/* fireWebSocketChannelEvents */
name|from
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app5?fireWebSocketChannelEvents=true"
argument_list|)
comment|//
operator|.
name|to
argument_list|(
literal|"mock:result5"
argument_list|)
comment|//
operator|.
name|to
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app5"
argument_list|)
expr_stmt|;
comment|/* fireWebSocketChannelEvents */
name|from
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app6?fireWebSocketChannelEvents=true"
argument_list|)
comment|//
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|connectionKeys
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|String
name|connectionKey
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|EventType
name|eventType
init|=
name|in
operator|.
name|getHeader
argument_list|(
name|UndertowConstants
operator|.
name|EVENT_TYPE_ENUM
argument_list|,
name|EventType
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
name|in
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventType
operator|==
name|EventType
operator|.
name|ONOPEN
condition|)
block|{
name|connectionKeys
operator|.
name|add
argument_list|(
name|connectionKey
argument_list|)
expr_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|CONNECTED_PREFIX
operator|+
name|connectionKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eventType
operator|==
name|EventType
operator|.
name|ONCLOSE
condition|)
block|{
name|connectionKeys
operator|.
name|remove
argument_list|(
name|connectionKey
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|body
operator|.
name|startsWith
argument_list|(
name|BROADCAST_MESSAGE_PREFIX
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|body
operator|.
name|substring
argument_list|(
name|BROADCAST_MESSAGE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY_LIST
argument_list|,
name|keys
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
comment|//
operator|.
name|to
argument_list|(
literal|"undertow:ws://localhost:"
operator|+
name|port
operator|+
literal|"/app6"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

