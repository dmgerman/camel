begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PipedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|UndertowHttpStreamingTest
specifier|public
class|class
name|UndertowHttpStreamingTest
extends|extends
name|BaseUndertowTest
block|{
DECL|field|LINE
specifier|private
specifier|static
specifier|final
name|String
name|LINE
init|=
name|String
operator|.
name|join
argument_list|(
literal|""
argument_list|,
name|Collections
operator|.
name|nCopies
argument_list|(
literal|100
argument_list|,
literal|"0123456789"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|COUNT
specifier|private
specifier|static
specifier|final
name|long
name|COUNT
init|=
literal|1000
decl_stmt|;
comment|// approx. 1MB
annotation|@
name|Test
DECL|method|testTwoWayStreaming ()
specifier|public
name|void
name|testTwoWayStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expectedLength
init|=
name|LINE
operator|.
name|length
argument_list|()
operator|*
name|COUNT
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:length"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
name|expectedLength
argument_list|)
expr_stmt|;
name|Exchange
name|response
init|=
name|template
operator|.
name|send
argument_list|(
literal|"undertow:http://localhost:{{port}}?useStreaming=true"
argument_list|,
name|e
lambda|->
name|produceStream
argument_list|(
name|e
argument_list|)
argument_list|)
decl_stmt|;
name|consumeStream
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|response
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneWayStreaming ()
specifier|public
name|void
name|testOneWayStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|expectedLength
init|=
name|LINE
operator|.
name|length
argument_list|()
operator|*
name|COUNT
decl_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:length"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|Exchange
name|response
init|=
name|template
operator|.
name|send
argument_list|(
literal|"undertow:http://localhost:{{port}}?useStreaming=true"
argument_list|,
name|e
lambda|->
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello Camel!"
argument_list|)
argument_list|)
decl_stmt|;
name|consumeStream
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|response
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|produceStream (Exchange exchange)
specifier|private
specifier|static
name|void
name|produceStream
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
name|PipedOutputStream
name|out
init|=
operator|new
name|PipedOutputStream
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
operator|new
name|PipedInputStream
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
init|;
name|BufferedWriter
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|osw
argument_list|)
init|)
block|{
name|LongStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|COUNT
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|LINE
argument_list|)
expr_stmt|;
name|writer
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|consumeStream (Exchange exchange)
specifier|private
specifier|static
name|void
name|consumeStream
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
init|;
name|BufferedReader
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
init|)
block|{
name|long
name|length
init|=
name|reader
operator|.
name|lines
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|summingLong
argument_list|(
name|String
operator|::
name|length
argument_list|)
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"undertow:http://localhost:{{port}}?useStreaming=true"
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
name|consumeStream
argument_list|(
name|e
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:length"
argument_list|)
operator|.
name|process
argument_list|(
name|e
lambda|->
name|produceStream
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

