begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|handlers
operator|.
name|RedirectHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CamelRootHandlerTest
specifier|public
class|class
name|CamelRootHandlerTest
block|{
DECL|field|DEFAULT_HANDLER
specifier|private
specifier|static
specifier|final
name|HttpHandler
name|DEFAULT_HANDLER
init|=
operator|new
name|NotFoundHandler
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|httpAndWsUnssupportedForTheSamePath ()
specifier|public
name|void
name|httpAndWsUnssupportedForTheSamePath
parameter_list|()
block|{
specifier|final
name|CamelRootHandler
name|root
init|=
operator|new
name|CamelRootHandler
argument_list|(
name|DEFAULT_HANDLER
argument_list|)
decl_stmt|;
specifier|final
name|RedirectHandler
name|httpHandler
init|=
operator|new
name|RedirectHandler
argument_list|(
literal|"http://whereever"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|add
argument_list|(
literal|"/app1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|httpHandler
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|add
argument_list|(
literal|"/app1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|new
name|CamelWebSocketHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|IllegalArgumentException
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
name|root
operator|.
name|remove
argument_list|(
literal|"/app1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/* now the other way round: register wsHandler and try to register httpHandler for the same path */
name|root
operator|.
name|add
argument_list|(
literal|"/app2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|new
name|CamelWebSocketHandler
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|root
operator|.
name|add
argument_list|(
literal|"/app2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|httpHandler
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|IllegalArgumentException
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|expected
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
DECL|method|countWsHandlerInstances ()
specifier|public
name|void
name|countWsHandlerInstances
parameter_list|()
block|{
specifier|final
name|CamelRootHandler
name|root
init|=
operator|new
name|CamelRootHandler
argument_list|(
name|DEFAULT_HANDLER
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|add
argument_list|(
literal|"/app1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|new
name|CamelWebSocketHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/* registering twice must work */
name|root
operator|.
name|add
argument_list|(
literal|"/app1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
operator|new
name|CamelWebSocketHandler
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|/* we have to remove twice for the root to become empty */
name|root
operator|.
name|remove
argument_list|(
literal|"/app1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|remove
argument_list|(
literal|"/app1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|root
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

