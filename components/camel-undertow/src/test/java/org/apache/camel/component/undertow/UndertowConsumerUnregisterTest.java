begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|UndertowConsumerUnregisterTest
specifier|public
class|class
name|UndertowConsumerUnregisterTest
extends|extends
name|BaseUndertowTest
block|{
annotation|@
name|Test
DECL|method|testUnregisterUndertowConsumersForPort ()
specifier|public
name|void
name|testUnregisterUndertowConsumersForPort
parameter_list|()
throws|throws
name|Exception
block|{
name|UndertowComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"undertow"
argument_list|,
name|UndertowComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|UndertowConsumer
name|consumerFoo
init|=
operator|(
name|UndertowConsumer
operator|)
name|context
operator|.
name|getRoute
argument_list|(
literal|"route-foo"
argument_list|)
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
name|UndertowConsumer
name|consumerBar
init|=
operator|(
name|UndertowConsumer
operator|)
name|context
operator|.
name|getRoute
argument_list|(
literal|"route-bar"
argument_list|)
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
name|component
operator|.
name|unregisterConsumer
argument_list|(
name|consumerFoo
argument_list|)
expr_stmt|;
name|component
operator|.
name|unregisterConsumer
argument_list|(
name|consumerBar
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"undertow:http://localhost:{{port}}/foo"
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception when connecting to undertow endpoint"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
comment|// Expected because unregistering all consumers should shut down the Undertow server
name|assertTrue
argument_list|(
name|e
operator|.
name|getExchange
argument_list|()
operator|.
name|getException
argument_list|()
operator|instanceof
name|ConnectException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"undertow:http://localhost:{{port}}/foo"
argument_list|)
operator|.
name|id
argument_list|(
literal|"route-foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:foo"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"undertow:http://localhost:{{port}}/bar"
argument_list|)
operator|.
name|id
argument_list|(
literal|"route-bar"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:bar"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

