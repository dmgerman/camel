begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|HttpString
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|Methods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_comment
comment|/**  * Helper class for useful methods used all over the component  */
end_comment

begin_class
DECL|class|UndertowHelper
specifier|public
specifier|final
class|class
name|UndertowHelper
block|{
DECL|method|UndertowHelper ()
specifier|private
name|UndertowHelper
parameter_list|()
block|{     }
comment|/**      * Creates the URL to invoke.      *      * @param exchange the exchange      * @param endpoint the endpoint      * @return the URL to invoke      */
DECL|method|createURL (Exchange exchange, UndertowEndpoint endpoint)
specifier|public
specifier|static
name|String
name|createURL
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|UndertowEndpoint
name|endpoint
parameter_list|)
block|{
comment|// rest producer may provide an override url to be used which we should discard if using (hence the remove)
name|String
name|uri
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
name|endpoint
operator|.
name|getHttpURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
comment|// resolve placeholders in uri
try|try
block|{
name|uri
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"Cannot resolve property placeholders with uri: "
operator|+
name|uri
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// append HTTP_PATH to HTTP_URI if it is provided in the header
name|String
name|path
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// NOW the HTTP_PATH is just related path, we don't need to trim it
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// make sure that there is exactly one "/" between HTTP_URI and
comment|// HTTP_PATH
if|if
condition|(
operator|!
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|+
literal|"/"
expr_stmt|;
block|}
name|uri
operator|=
name|uri
operator|.
name|concat
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ensure uri is encoded to be valid
name|uri
operator|=
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
name|uri
return|;
block|}
comment|/**      * Creates the URI to invoke.      *      * @param exchange the exchange      * @param url      the url to invoke      * @param endpoint the endpoint      * @return the URI to invoke      */
DECL|method|createURI (Exchange exchange, String url, UndertowEndpoint endpoint)
specifier|public
specifier|static
name|URI
name|createURI
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|url
parameter_list|,
name|UndertowEndpoint
name|endpoint
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// rest producer may provide an override query string to be used which we should discard if using (hence the remove)
name|String
name|queryString
init|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|Exchange
operator|.
name|REST_HTTP_QUERY
argument_list|)
decl_stmt|;
comment|// is a query string provided in the endpoint URI or in a header (header overrules endpoint)
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
name|queryString
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
name|queryString
operator|=
name|endpoint
operator|.
name|getHttpURI
argument_list|()
operator|.
name|getRawQuery
argument_list|()
expr_stmt|;
block|}
comment|// We should user the query string from the HTTP_URI header
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
name|queryString
operator|=
name|uri
operator|.
name|getRawQuery
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|)
block|{
comment|// need to encode query string
name|queryString
operator|=
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
name|uri
operator|=
name|URISupport
operator|.
name|createURIWithQuery
argument_list|(
name|uri
argument_list|,
name|queryString
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
DECL|method|appendHeader (Map<String, Object> headers, String key, Object value)
specifier|public
specifier|static
name|void
name|appendHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Object
name|existing
init|=
name|headers
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|existing
operator|instanceof
name|List
condition|)
block|{
name|list
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|existing
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|existing
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
name|list
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates the HttpMethod to use to call the remote server, often either its GET or POST.      */
DECL|method|createMethod (Exchange exchange, UndertowEndpoint endpoint, boolean hasPayload)
specifier|public
specifier|static
name|HttpString
name|createMethod
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|UndertowEndpoint
name|endpoint
parameter_list|,
name|boolean
name|hasPayload
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// is a query string provided in the endpoint URI or in a header (header
comment|// overrules endpoint)
name|String
name|queryString
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// We need also check the HTTP_URI header query part
name|String
name|uriString
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// resolve placeholders in uriString
try|try
block|{
name|uriString
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uriString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeExchangeException
argument_list|(
literal|"Cannot resolve property placeholders with uri: "
operator|+
name|uriString
argument_list|,
name|exchange
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|uriString
operator|!=
literal|null
condition|)
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|uriString
argument_list|)
decl_stmt|;
name|queryString
operator|=
name|uri
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|queryString
operator|==
literal|null
condition|)
block|{
name|queryString
operator|=
name|endpoint
operator|.
name|getHttpURI
argument_list|()
operator|.
name|getRawQuery
argument_list|()
expr_stmt|;
block|}
comment|// compute what method to use either GET or POST
name|HttpString
name|answer
decl_stmt|;
name|String
name|m
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
comment|// always use what end-user provides in a header
comment|// must be in upper case
name|m
operator|=
name|m
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
name|answer
operator|=
operator|new
name|HttpString
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queryString
operator|!=
literal|null
condition|)
block|{
comment|// if a query string is provided then use GET
name|answer
operator|=
name|Methods
operator|.
name|GET
expr_stmt|;
block|}
else|else
block|{
comment|// fallback to POST if we have payload, otherwise GET
name|answer
operator|=
name|hasPayload
condition|?
name|Methods
operator|.
name|POST
else|:
name|Methods
operator|.
name|GET
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

