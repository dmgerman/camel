begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpServerExchange
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|MimeMappings
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|StatusCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|ExchangeHeaders
import|;
end_import

begin_comment
comment|/**  * A HttpHandler build a mapping between HTTP methods and handlers and dispatch requests along the map.  */
end_comment

begin_class
DECL|class|CamelMethodHandler
specifier|public
class|class
name|CamelMethodHandler
implements|implements
name|HttpHandler
block|{
comment|/**      * A key to use for handlers with no method specified      */
DECL|field|DEFAULT_HANDLER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HANDLER_KEY
init|=
literal|""
decl_stmt|;
DECL|field|DEFAULT_METHODS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_METHODS
decl_stmt|;
static|static
block|{
name|DEFAULT_METHODS
operator|=
operator|new
name|String
index|[]
block|{
name|DEFAULT_HANDLER_KEY
block|}
expr_stmt|;
block|}
DECL|field|methodMap
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MethodEntry
argument_list|>
name|methodMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|handlerString
specifier|private
name|String
name|handlerString
decl_stmt|;
DECL|method|CamelMethodHandler ()
name|CamelMethodHandler
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|handleRequest (HttpServerExchange exchange)
specifier|public
name|void
name|handleRequest
parameter_list|(
name|HttpServerExchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|HttpHandler
name|handler
init|=
literal|null
decl_stmt|;
comment|/* No need to lock methodMap for read access in this method */
name|MethodEntry
name|entry
init|=
name|methodMap
operator|.
name|get
argument_list|(
name|exchange
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
operator|(
name|handler
operator|=
name|entry
operator|.
name|handler
operator|)
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleRequest
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|=
name|methodMap
operator|.
name|get
argument_list|(
name|DEFAULT_HANDLER_KEY
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
operator|(
name|handler
operator|=
name|entry
operator|.
name|handler
operator|)
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handleRequest
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|setStatusCode
argument_list|(
name|StatusCodes
operator|.
name|METHOD_NOT_ALLOWED
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|ExchangeHeaders
operator|.
name|CONTENT_TYPE
argument_list|,
name|MimeMappings
operator|.
name|DEFAULT_MIME_MAPPINGS
operator|.
name|get
argument_list|(
literal|"txt"
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|ExchangeHeaders
operator|.
name|CONTENT_LENGTH
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|endExchange
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|add (String methods, HttpHandler handler)
specifier|public
name|HttpHandler
name|add
parameter_list|(
name|String
name|methods
parameter_list|,
name|HttpHandler
name|handler
parameter_list|)
block|{
name|HttpHandler
name|result
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|methodMap
init|)
block|{
comment|// we lock on methodMap to get a reliable sum of refCounts in remove(String)
for|for
control|(
name|String
name|method
range|:
name|splitMethods
argument_list|(
name|methods
argument_list|)
control|)
block|{
name|MethodEntry
name|en
init|=
name|methodMap
operator|.
name|computeIfAbsent
argument_list|(
name|method
argument_list|,
name|m
lambda|->
operator|new
name|MethodEntry
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|en
operator|.
name|addRef
argument_list|(
name|handler
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|handlerString
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|remove (String methods)
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|methods
parameter_list|)
block|{
name|boolean
name|result
decl_stmt|;
synchronized|synchronized
init|(
name|methodMap
init|)
block|{
comment|// we lock on methodMap to get a reliable sum of refCounts
for|for
control|(
name|String
name|method
range|:
name|splitMethods
argument_list|(
name|methods
argument_list|)
control|)
block|{
specifier|final
name|MethodEntry
name|en
init|=
name|methodMap
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|en
operator|!=
literal|null
condition|)
block|{
name|en
operator|.
name|removeRef
argument_list|()
expr_stmt|;
block|}
block|}
name|result
operator|=
name|methodMap
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|en
lambda|->
name|en
operator|.
name|refCount
argument_list|)
operator|.
name|sum
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
name|handlerString
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|handlerString
operator|==
literal|null
condition|)
block|{
name|handlerString
operator|=
literal|"CamelMethodHandler["
operator|+
name|methodMap
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|handlerString
return|;
block|}
DECL|method|splitMethods (String methods)
specifier|private
name|String
index|[]
name|splitMethods
parameter_list|(
name|String
name|methods
parameter_list|)
block|{
name|String
index|[]
name|result
init|=
name|methods
operator|!=
literal|null
condition|?
name|methods
operator|.
name|split
argument_list|(
literal|","
argument_list|)
else|:
name|DEFAULT_METHODS
decl_stmt|;
return|return
name|result
operator|.
name|length
operator|==
literal|0
condition|?
name|DEFAULT_METHODS
else|:
name|result
return|;
block|}
DECL|class|MethodEntry
specifier|static
class|class
name|MethodEntry
block|{
comment|/**          * The number of references pointing to {@link #handler}          */
DECL|field|refCount
specifier|private
name|int
name|refCount
decl_stmt|;
DECL|field|handler
specifier|private
name|HttpHandler
name|handler
decl_stmt|;
DECL|method|MethodEntry ()
name|MethodEntry
parameter_list|()
block|{         }
DECL|method|addRef (HttpHandler handler, String method)
specifier|public
name|HttpHandler
name|addRef
parameter_list|(
name|HttpHandler
name|handler
parameter_list|,
name|String
name|method
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|handler
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|refCount
operator|++
expr_stmt|;
return|return
name|handler
return|;
block|}
elseif|else
if|if
condition|(
literal|"OPTIONS"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|||
name|CamelWebSocketHandler
operator|.
name|class
operator|==
name|this
operator|.
name|handler
operator|.
name|getClass
argument_list|()
operator|&&
name|CamelWebSocketHandler
operator|.
name|class
operator|==
name|handler
operator|.
name|getClass
argument_list|()
condition|)
block|{
name|refCount
operator|++
expr_stmt|;
return|return
name|this
operator|.
name|handler
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Duplicate handler for %s method: '%s', '%s'"
argument_list|,
name|method
argument_list|,
name|this
operator|.
name|handler
argument_list|,
name|handler
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|removeRef ()
specifier|public
name|void
name|removeRef
parameter_list|()
block|{
if|if
condition|(
operator|--
name|refCount
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|handler
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|handler
operator|==
literal|null
condition|?
literal|"null"
else|:
name|handler
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

