begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_comment
comment|/**  * The key to identify an Undertow host.  */
end_comment

begin_class
DECL|class|UndertowHostKey
specifier|public
specifier|final
class|class
name|UndertowHostKey
block|{
DECL|field|host
specifier|private
specifier|final
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
comment|// SSLContext should not be part of the equals/hashCode contract
DECL|field|sslContext
specifier|private
specifier|final
name|SSLContext
name|sslContext
decl_stmt|;
DECL|method|UndertowHostKey (String host, int port, SSLContext ssl)
specifier|public
name|UndertowHostKey
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|SSLContext
name|ssl
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|sslContext
operator|=
name|ssl
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|getSslContext ()
specifier|public
name|SSLContext
name|getSslContext
parameter_list|()
block|{
return|return
name|sslContext
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object target)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|target
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|target
operator|instanceof
name|UndertowHostKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|UndertowHostKey
name|targetKey
init|=
operator|(
name|UndertowHostKey
operator|)
name|target
decl_stmt|;
name|boolean
name|answer
init|=
literal|true
decl_stmt|;
return|return
name|answer
operator|&&
name|this
operator|.
name|host
operator|!=
literal|null
operator|&&
name|targetKey
operator|.
name|host
operator|!=
literal|null
operator|&&
name|this
operator|.
name|host
operator|.
name|equals
argument_list|(
name|targetKey
operator|.
name|host
argument_list|)
operator|&&
name|this
operator|.
name|port
operator|==
name|targetKey
operator|.
name|port
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|answer
init|=
name|host
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|answer
operator|=
name|answer
operator|*
literal|31
operator|+
name|Integer
operator|.
name|hashCode
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

