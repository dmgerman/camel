begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientCallback
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientConnection
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientExchange
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|UndertowClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|connector
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|DefaultByteBufferPool
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|HttpString
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|Methods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|DefaultComponentVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|verifier
operator|.
name|ResultErrorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|AbstractIoFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|IoFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|OptionMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|Xnio
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|XnioWorker
import|;
end_import

begin_class
DECL|class|UndertowComponentVerifier
specifier|public
specifier|final
class|class
name|UndertowComponentVerifier
extends|extends
name|DefaultComponentVerifier
block|{
DECL|field|component
specifier|private
specifier|final
name|UndertowComponent
name|component
decl_stmt|;
DECL|method|UndertowComponentVerifier (UndertowComponent component)
specifier|public
name|UndertowComponentVerifier
parameter_list|(
name|UndertowComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
literal|"undertow"
argument_list|,
name|component
operator|.
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|component
operator|=
name|component
expr_stmt|;
block|}
comment|// *********************************
comment|// Parameters validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyParameters (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// Default is success
specifier|final
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|PARAMETERS
argument_list|)
decl_stmt|;
comment|// Make a copy to avoid clashing with parent validation
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|verifyParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
comment|// Check if validation is rest-related
specifier|final
name|boolean
name|isRest
init|=
name|verifyParams
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"rest."
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRest
condition|)
block|{
name|String
name|httpUri
init|=
name|getOption
argument_list|(
name|verifyParams
argument_list|,
literal|"rest.host"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|getOption
argument_list|(
name|verifyParams
argument_list|,
literal|"rest.path"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|map
argument_list|(
name|FileUtil
operator|::
name|stripLeadingSeparator
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|httpUri
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|httpUri
operator|=
name|httpUri
operator|+
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
name|verifyParams
operator|.
name|put
argument_list|(
literal|"httpURI"
argument_list|,
name|httpUri
argument_list|)
expr_stmt|;
comment|// Cleanup parameters map from rest related stuffs
name|verifyParams
operator|.
name|entrySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"rest."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Validate using the catalog
name|super
operator|.
name|verifyParametersAgainstCatalog
argument_list|(
name|builder
argument_list|,
name|verifyParams
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Connectivity validation
comment|// *********************************
annotation|@
name|Override
DECL|method|verifyConnectivity (Map<String, Object> parameters)
specifier|protected
name|Result
name|verifyConnectivity
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// Default is success
specifier|final
name|ResultBuilder
name|builder
init|=
name|ResultBuilder
operator|.
name|withStatusAndScope
argument_list|(
name|Result
operator|.
name|Status
operator|.
name|OK
argument_list|,
name|Scope
operator|.
name|CONNECTIVITY
argument_list|)
decl_stmt|;
comment|// Make a copy to avoid clashing with parent validation
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|verifyParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|parameters
argument_list|)
decl_stmt|;
comment|// Check if validation is rest-related
specifier|final
name|boolean
name|isRest
init|=
name|verifyParams
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"rest."
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|httpUri
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|httpMethod
decl_stmt|;
if|if
condition|(
name|isRest
condition|)
block|{
comment|// We are doing rest endpoint validation but as today the endpoint
comment|// can't do any param substitution so the validation is performed
comment|// against the http uri
name|httpUri
operator|=
name|getOption
argument_list|(
name|verifyParams
argument_list|,
literal|"rest.host"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|httpMethod
operator|=
name|getOption
argument_list|(
name|verifyParams
argument_list|,
literal|"rest.method"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|getOption
argument_list|(
name|verifyParams
argument_list|,
literal|"rest.path"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|map
argument_list|(
name|FileUtil
operator|::
name|stripLeadingSeparator
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|httpUri
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|httpUri
operator|=
name|httpUri
operator|+
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
name|verifyParams
operator|.
name|put
argument_list|(
literal|"httpURI"
argument_list|,
name|httpUri
argument_list|)
expr_stmt|;
comment|// Cleanup parameters from rest related stuffs
name|verifyParams
operator|.
name|entrySet
argument_list|()
operator|.
name|removeIf
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"rest."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|httpUri
operator|=
name|getOption
argument_list|(
name|verifyParams
argument_list|,
literal|"httpURI"
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|httpMethod
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
comment|// Check whether the http uri is null or empty
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|httpUri
argument_list|)
condition|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withMissingOption
argument_list|(
literal|"httpURI"
argument_list|)
operator|.
name|detail
argument_list|(
literal|"rest"
argument_list|,
name|isRest
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// lack of httpURI is a blocking issue so no need to go further
comment|// with the validation
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
try|try
block|{
specifier|final
name|UndertowClientWrapper
name|wrapper
init|=
operator|new
name|UndertowClientWrapper
argument_list|()
decl_stmt|;
specifier|final
name|ClientResponse
name|response
init|=
name|wrapper
operator|.
name|send
argument_list|(
name|httpUri
argument_list|,
name|httpMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|int
name|code
init|=
name|response
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|401
condition|)
block|{
comment|// Unauthorized, add authUsername and authPassword to the list
comment|// of parameters in error
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withHttpCode
argument_list|(
name|code
argument_list|)
operator|.
name|description
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|>=
literal|300
operator|&&
name|code
operator|<
literal|400
condition|)
block|{
comment|// redirect
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withHttpCode
argument_list|(
name|code
argument_list|)
operator|.
name|description
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|parameterKey
argument_list|(
literal|"httpURI"
argument_list|)
operator|.
name|detail
argument_list|(
name|VerificationError
operator|.
name|HttpAttribute
operator|.
name|HTTP_REDIRECT
argument_list|,
parameter_list|()
lambda|->
name|Optional
operator|.
name|ofNullable
argument_list|(
name|response
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Headers
operator|.
name|LOCATION
argument_list|)
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|code
operator|>=
literal|400
condition|)
block|{
comment|// generic http error
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withHttpCode
argument_list|(
name|code
argument_list|)
operator|.
name|description
argument_list|(
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|builder
operator|.
name|error
argument_list|(
name|ResultErrorBuilder
operator|.
name|withException
argument_list|(
name|e
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|// *********************************
comment|// Helpers
comment|// *********************************
DECL|class|UndertowClientWrapper
specifier|private
specifier|final
class|class
name|UndertowClientWrapper
block|{
DECL|field|worker
specifier|private
specifier|final
name|XnioWorker
name|worker
decl_stmt|;
DECL|field|pool
specifier|private
specifier|final
name|ByteBufferPool
name|pool
decl_stmt|;
DECL|field|client
specifier|private
name|UndertowClient
name|client
decl_stmt|;
DECL|method|UndertowClientWrapper ()
specifier|private
name|UndertowClientWrapper
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|this
operator|.
name|worker
operator|=
name|Xnio
operator|.
name|getInstance
argument_list|()
operator|.
name|createWorker
argument_list|(
name|OptionMap
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|this
operator|.
name|pool
operator|=
operator|new
name|DefaultByteBufferPool
argument_list|(
literal|true
argument_list|,
literal|17
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|UndertowClient
operator|.
name|getInstance
argument_list|(
name|getCamelContext
argument_list|()
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|send (String httpUri, Optional<String> httpMethod)
specifier|public
name|ClientResponse
name|send
parameter_list|(
name|String
name|httpUri
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|httpMethod
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|UnsafeUriCharactersEncoder
operator|.
name|encodeHttpURI
argument_list|(
name|httpUri
argument_list|)
argument_list|)
decl_stmt|;
name|HttpString
name|method
init|=
name|httpMethod
operator|.
name|map
argument_list|(
name|Methods
operator|::
name|fromString
argument_list|)
operator|.
name|orElse
argument_list|(
name|Methods
operator|.
name|GET
argument_list|)
decl_stmt|;
name|ClientRequest
name|request
init|=
operator|new
name|ClientRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPath
argument_list|(
name|URISupport
operator|.
name|pathAndQueryOf
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|IoFuture
argument_list|<
name|ClientConnection
argument_list|>
name|connectFuture
init|=
name|client
operator|.
name|connect
argument_list|(
name|uri
argument_list|,
name|worker
argument_list|,
name|pool
argument_list|,
name|OptionMap
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|UndertowClientResponseFuture
name|responseFuture
init|=
operator|new
name|UndertowClientResponseFuture
argument_list|()
decl_stmt|;
name|connectFuture
operator|.
name|get
argument_list|()
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|,
name|responseFuture
argument_list|)
expr_stmt|;
comment|// We should set a timeout
return|return
name|responseFuture
operator|.
name|get
argument_list|()
operator|.
name|getResponse
argument_list|()
return|;
block|}
block|}
DECL|class|UndertowClientResponseFuture
specifier|private
specifier|static
specifier|final
class|class
name|UndertowClientResponseFuture
extends|extends
name|AbstractIoFuture
argument_list|<
name|ClientExchange
argument_list|>
implements|implements
name|ClientCallback
argument_list|<
name|ClientExchange
argument_list|>
block|{
annotation|@
name|Override
DECL|method|completed (ClientExchange result)
specifier|public
name|void
name|completed
parameter_list|(
name|ClientExchange
name|result
parameter_list|)
block|{
name|result
operator|.
name|setResponseListener
argument_list|(
operator|new
name|ClientCallback
argument_list|<
name|ClientExchange
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|ClientExchange
name|result
parameter_list|)
block|{
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|failed (IOException e)
specifier|public
name|void
name|failed
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

