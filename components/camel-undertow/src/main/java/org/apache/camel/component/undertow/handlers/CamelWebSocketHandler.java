begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow.handlers
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|handlers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|Handlers
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpServerExchange
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|WebSocketConnectionCallback
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|WebSocketProtocolHandshakeHandler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|core
operator|.
name|AbstractReceiveListener
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|core
operator|.
name|BufferedBinaryMessage
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|core
operator|.
name|BufferedTextMessage
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|core
operator|.
name|WebSocketChannel
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|core
operator|.
name|WebSockets
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|websockets
operator|.
name|spi
operator|.
name|WebSocketHttpExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowConstants
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
operator|.
name|UndertowProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|ChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|Pooled
import|;
end_import

begin_comment
comment|/**  * An {@link HttpHandler} that delegates to {@link WebSocketProtocolHandshakeHandler} and provides some wiring to  * connect {@link UndertowConsumer} with {@link UndertowProducer}.  */
end_comment

begin_class
DECL|class|CamelWebSocketHandler
specifier|public
class|class
name|CamelWebSocketHandler
implements|implements
name|HttpHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelWebSocketHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|UndertowWebSocketConnectionCallback
name|callback
decl_stmt|;
DECL|field|consumer
specifier|private
name|UndertowConsumer
name|consumer
decl_stmt|;
DECL|field|consumerLock
specifier|private
specifier|final
name|Object
name|consumerLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|WebSocketProtocolHandshakeHandler
name|delegate
decl_stmt|;
DECL|field|closeListener
specifier|private
specifier|final
name|ChannelListener
argument_list|<
name|WebSocketChannel
argument_list|>
name|closeListener
decl_stmt|;
DECL|field|receiveListener
specifier|private
specifier|final
name|UndertowReceiveListener
name|receiveListener
decl_stmt|;
DECL|method|CamelWebSocketHandler ()
specifier|public
name|CamelWebSocketHandler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|receiveListener
operator|=
operator|new
name|UndertowReceiveListener
argument_list|()
expr_stmt|;
name|this
operator|.
name|callback
operator|=
operator|new
name|UndertowWebSocketConnectionCallback
argument_list|()
expr_stmt|;
name|this
operator|.
name|closeListener
operator|=
operator|new
name|ChannelListener
argument_list|<
name|WebSocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handleEvent
parameter_list|(
name|WebSocketChannel
name|channel
parameter_list|)
block|{
name|sendEventNotificationIfNeeded
argument_list|(
operator|(
name|String
operator|)
name|channel
operator|.
name|getAttribute
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
argument_list|)
argument_list|,
name|EventType
operator|.
name|ONCLOSE
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|Handlers
operator|.
name|websocket
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send the given {@code message} to the given {@code channel} and report the outcome to the given {@code callback}      * within the given {@code timeoutMillis}.      *      * @param channel      *            the channel to sent the {@code message} to      * @param message      *            the message to send      * @param callback      *            where to report the outcome      * @param timeoutMillis      *            the timeout in milliseconds      * @throws IOException      */
DECL|method|send (WebSocketChannel channel, Object message, ExtendedWebSocketCallback callback, long timeoutMillis)
specifier|private
specifier|static
name|void
name|send
parameter_list|(
name|WebSocketChannel
name|channel
parameter_list|,
name|Object
name|message
parameter_list|,
name|ExtendedWebSocketCallback
name|callback
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|channel
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
name|message
operator|instanceof
name|String
condition|)
block|{
name|WebSockets
operator|.
name|sendText
argument_list|(
operator|(
name|String
operator|)
name|message
argument_list|,
name|channel
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|message
argument_list|)
decl_stmt|;
name|WebSockets
operator|.
name|sendBinary
argument_list|(
name|buffer
argument_list|,
name|channel
argument_list|,
name|callback
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|Reader
condition|)
block|{
name|Reader
name|r
init|=
operator|(
name|Reader
operator|)
name|message
decl_stmt|;
name|WebSockets
operator|.
name|sendText
argument_list|(
name|IOConverter
operator|.
name|toString
argument_list|(
name|r
argument_list|)
argument_list|,
name|channel
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|InputStream
condition|)
block|{
name|InputStream
name|in
init|=
operator|(
name|InputStream
operator|)
name|message
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|IOConverter
operator|.
name|toBytes
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|WebSockets
operator|.
name|sendBinary
argument_list|(
name|buffer
argument_list|,
name|channel
argument_list|,
name|callback
argument_list|,
name|timeoutMillis
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Unexpected type of message "
operator|+
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"; expected String, byte[], "
operator|+
name|Reader
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" or "
operator|+
name|InputStream
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|callback
operator|.
name|closedBeforeSent
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|handleRequest (HttpServerExchange exchange)
specifier|public
name|void
name|handleRequest
parameter_list|(
name|HttpServerExchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|delegate
operator|.
name|handleRequest
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send the given {@code message} to one or more channels selected using the given {@code peerFilter} within the      * given {@code timeout} and report the outcome to the given {@code camelExchange} and {@code camelCallback}.      *      * @param peerFilter      *            a {@link Predicate} to apply to the set of peers obtained via {@link #delegate}'s      *            {@link WebSocketProtocolHandshakeHandler#getPeerConnections()}      * @param message      *            the message to send      * @param camelExchange to notify about the outcome      * @param camelCallback to notify about the outcome      * @param timeout      *            in milliseconds      * @return {@code true} if the execution finished synchronously or {@code false} otherwise      * @throws IOException      */
DECL|method|send (Predicate<WebSocketChannel> peerFilter, Object message, final int timeout, final Exchange camelExchange, final AsyncCallback camelCallback)
specifier|public
name|boolean
name|send
parameter_list|(
name|Predicate
argument_list|<
name|WebSocketChannel
argument_list|>
name|peerFilter
parameter_list|,
name|Object
name|message
parameter_list|,
specifier|final
name|int
name|timeout
parameter_list|,
specifier|final
name|Exchange
name|camelExchange
parameter_list|,
specifier|final
name|AsyncCallback
name|camelCallback
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|WebSocketChannel
argument_list|>
name|targetPeers
init|=
name|delegate
operator|.
name|getPeerConnections
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|peerFilter
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetPeers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|camelCallback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|/* There are some peers to send the message to */
name|MultiCallback
name|wsCallback
init|=
operator|new
name|MultiCallback
argument_list|(
name|targetPeers
argument_list|,
name|camelCallback
argument_list|,
name|camelExchange
argument_list|)
decl_stmt|;
for|for
control|(
name|WebSocketChannel
name|peer
range|:
name|targetPeers
control|)
block|{
name|send
argument_list|(
name|peer
argument_list|,
name|message
argument_list|,
name|wsCallback
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @param consumer the {@link UndertowConsumer} to set      */
DECL|method|setConsumer (UndertowConsumer consumer)
specifier|public
name|void
name|setConsumer
parameter_list|(
name|UndertowConsumer
name|consumer
parameter_list|)
block|{
synchronized|synchronized
init|(
name|consumerLock
init|)
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
operator|&&
name|this
operator|.
name|consumer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot call "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".setConsumer(UndertowConsumer) with a non-null consumer before unsetting it via setConsumer(null)"
argument_list|)
throw|;
block|}
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
block|}
DECL|method|sendEventNotificationIfNeeded (String connectionKey, EventType eventType)
name|void
name|sendEventNotificationIfNeeded
parameter_list|(
name|String
name|connectionKey
parameter_list|,
name|EventType
name|eventType
parameter_list|)
block|{
synchronized|synchronized
init|(
name|consumerLock
init|)
block|{
synchronized|synchronized
init|(
name|consumerLock
init|)
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|isFireWebSocketChannelEvents
argument_list|()
condition|)
block|{
name|consumer
operator|.
name|sendEventNotification
argument_list|(
name|connectionKey
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No consumer to handle a peer {} event type {}"
argument_list|,
name|connectionKey
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * A {@link ExtendedWebSocketCallback} able to track sending one message to multiple peers.      */
DECL|class|MultiCallback
specifier|static
class|class
name|MultiCallback
implements|implements
name|ExtendedWebSocketCallback
block|{
DECL|field|camelCallback
specifier|private
specifier|final
name|AsyncCallback
name|camelCallback
decl_stmt|;
DECL|field|camelExchange
specifier|private
specifier|final
name|Exchange
name|camelExchange
decl_stmt|;
DECL|field|errors
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|errors
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**          * Initially, this set contains all peers where we plan to send the message. Then the peers are removed one by          * one as we are notified via {@link #complete(WebSocketChannel, Void)} or          * {@link #onError(WebSocketChannel, Void, Throwable)}. This set being empty signals that all peers have          * finished sending the message.          */
DECL|field|peers
specifier|private
specifier|final
name|Set
argument_list|<
name|WebSocketChannel
argument_list|>
name|peers
decl_stmt|;
DECL|method|MultiCallback (Collection<WebSocketChannel> peers, AsyncCallback camelCallback, Exchange camelExchange)
specifier|public
name|MultiCallback
parameter_list|(
name|Collection
argument_list|<
name|WebSocketChannel
argument_list|>
name|peers
parameter_list|,
name|AsyncCallback
name|camelCallback
parameter_list|,
name|Exchange
name|camelExchange
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|camelCallback
operator|=
name|camelCallback
expr_stmt|;
name|this
operator|.
name|camelExchange
operator|=
name|camelExchange
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|this
operator|.
name|peers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|peers
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|closedBeforeSent (WebSocketChannel channel)
specifier|public
name|void
name|closedBeforeSent
parameter_list|(
name|WebSocketChannel
name|channel
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|peers
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
if|if
condition|(
name|peers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|complete (WebSocketChannel channel, Void context)
specifier|public
name|void
name|complete
parameter_list|(
name|WebSocketChannel
name|channel
parameter_list|,
name|Void
name|context
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|peers
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
if|if
condition|(
name|peers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**          * {@link #finish()} should be called only inside a<code>synchronized(lock) { ... }</code> block to prevent          * concurrent access to {@link #errors}.          */
DECL|method|finish ()
specifier|private
name|void
name|finish
parameter_list|()
block|{
if|if
condition|(
name|errors
operator|!=
literal|null
operator|&&
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|en
init|=
name|errors
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"Delivery to the WebSocket peer "
operator|+
name|en
operator|.
name|getKey
argument_list|()
operator|+
literal|" channels has failed"
decl_stmt|;
name|camelExchange
operator|.
name|setException
argument_list|(
operator|new
name|CamelExchangeException
argument_list|(
name|msg
argument_list|,
name|camelExchange
argument_list|,
name|en
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Delivery to the following WebSocket peer channels has failed: "
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Throwable
argument_list|>
name|en
range|:
name|errors
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"\n    "
argument_list|)
operator|.
name|append
argument_list|(
name|en
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|en
operator|.
name|getValue
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|camelExchange
operator|.
name|setException
argument_list|(
operator|new
name|CamelExchangeException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|camelExchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|camelCallback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onError (WebSocketChannel channel, Void context, Throwable throwable)
specifier|public
name|void
name|onError
parameter_list|(
name|WebSocketChannel
name|channel
parameter_list|,
name|Void
name|context
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|peers
operator|.
name|remove
argument_list|(
name|channel
argument_list|)
expr_stmt|;
specifier|final
name|String
name|connectionKey
init|=
operator|(
name|String
operator|)
name|channel
operator|.
name|getAttribute
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
operator|+
literal|" attribute not found on "
operator|+
name|WebSocketChannel
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|channel
argument_list|)
throw|;
block|}
if|if
condition|(
name|errors
operator|==
literal|null
condition|)
block|{
name|errors
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|errors
operator|.
name|put
argument_list|(
name|connectionKey
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
if|if
condition|(
name|peers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * A {@link ChannelListener} that forwards the messages received over the WebSocket to      * {@link CamelWebSocketHandler#consumer}.      */
DECL|class|UndertowReceiveListener
class|class
name|UndertowReceiveListener
extends|extends
name|AbstractReceiveListener
block|{
DECL|method|onFullBinaryMessage (final WebSocketChannel channel, BufferedBinaryMessage message)
specifier|protected
name|void
name|onFullBinaryMessage
parameter_list|(
specifier|final
name|WebSocketChannel
name|channel
parameter_list|,
name|BufferedBinaryMessage
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"onFullBinaryMessage()"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|connectionKey
init|=
operator|(
name|String
operator|)
name|channel
operator|.
name|getAttribute
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
operator|+
literal|" attribute not found on "
operator|+
name|WebSocketChannel
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|channel
argument_list|)
throw|;
block|}
specifier|final
name|Pooled
argument_list|<
name|ByteBuffer
index|[]
argument_list|>
name|data
init|=
name|message
operator|.
name|getData
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|ByteBuffer
index|[]
name|buffers
init|=
name|data
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|buffers
control|)
block|{
name|len
operator|+=
name|buffer
operator|.
name|remaining
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|buffers
control|)
block|{
name|int
name|increment
init|=
name|buffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|increment
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|increment
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|consumerLock
init|)
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|outMsg
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|isUseStreaming
argument_list|()
condition|?
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
else|:
name|bytes
decl_stmt|;
name|consumer
operator|.
name|sendMessage
argument_list|(
name|connectionKey
argument_list|,
name|outMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No consumer to handle message received: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|data
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onFullTextMessage (WebSocketChannel channel, BufferedTextMessage message)
specifier|protected
name|void
name|onFullTextMessage
parameter_list|(
name|WebSocketChannel
name|channel
parameter_list|,
name|BufferedTextMessage
name|message
parameter_list|)
block|{
specifier|final
name|String
name|text
init|=
name|message
operator|.
name|getData
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"onFullTextMessage(): {}"
argument_list|,
name|text
argument_list|)
expr_stmt|;
specifier|final
name|String
name|connectionKey
init|=
operator|(
name|String
operator|)
name|channel
operator|.
name|getAttribute
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
operator|+
literal|" attribute not found on "
operator|+
name|WebSocketChannel
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" "
operator|+
name|channel
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|consumerLock
init|)
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|outMsg
init|=
name|consumer
operator|.
name|getEndpoint
argument_list|()
operator|.
name|isUseStreaming
argument_list|()
condition|?
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
else|:
name|text
decl_stmt|;
name|consumer
operator|.
name|sendMessage
argument_list|(
name|connectionKey
argument_list|,
name|outMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No consumer to handle message received: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Sets the {@link UndertowReceiveListener} to the given channel on connect.      */
DECL|class|UndertowWebSocketConnectionCallback
class|class
name|UndertowWebSocketConnectionCallback
implements|implements
name|WebSocketConnectionCallback
block|{
DECL|method|UndertowWebSocketConnectionCallback ()
specifier|public
name|UndertowWebSocketConnectionCallback
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onConnect (WebSocketHttpExchange exchange, WebSocketChannel channel)
specifier|public
name|void
name|onConnect
parameter_list|(
name|WebSocketHttpExchange
name|exchange
parameter_list|,
name|WebSocketChannel
name|channel
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"onConnect {}"
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
specifier|final
name|String
name|connectionKey
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|channel
operator|.
name|setAttribute
argument_list|(
name|UndertowConstants
operator|.
name|CONNECTION_KEY
argument_list|,
name|connectionKey
argument_list|)
expr_stmt|;
name|channel
operator|.
name|getReceiveSetter
argument_list|()
operator|.
name|set
argument_list|(
name|receiveListener
argument_list|)
expr_stmt|;
name|channel
operator|.
name|addCloseTask
argument_list|(
name|closeListener
argument_list|)
expr_stmt|;
name|sendEventNotificationIfNeeded
argument_list|(
name|connectionKey
argument_list|,
name|EventType
operator|.
name|ONOPEN
argument_list|)
expr_stmt|;
name|channel
operator|.
name|resumeReceives
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

