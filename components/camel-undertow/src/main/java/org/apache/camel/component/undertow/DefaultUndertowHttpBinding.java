begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.undertow
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|undertow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientExchange
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientRequest
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|server
operator|.
name|HttpServerExchange
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|HttpString
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|Methods
import|;
end_import

begin_import
import|import
name|io
operator|.
name|undertow
operator|.
name|util
operator|.
name|MimeMappings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|http
operator|.
name|HttpHeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|HeaderFilterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|MessageHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xnio
operator|.
name|Pooled
import|;
end_import

begin_comment
comment|/**  * DefaultUndertowHttpBinding represent binding used by default, if user doesn't provide any.  * By default {@link HttpHeaderFilterStrategy} is also used.  *  */
end_comment

begin_class
DECL|class|DefaultUndertowHttpBinding
specifier|public
class|class
name|DefaultUndertowHttpBinding
implements|implements
name|UndertowHttpBinding
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultUndertowHttpBinding
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//use default filter strategy from Camel HTTP
DECL|field|headerFilterStrategy
specifier|private
name|HeaderFilterStrategy
name|headerFilterStrategy
decl_stmt|;
DECL|method|DefaultUndertowHttpBinding ()
specifier|public
name|DefaultUndertowHttpBinding
parameter_list|()
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
operator|new
name|HttpHeaderFilterStrategy
argument_list|()
expr_stmt|;
block|}
DECL|method|DefaultUndertowHttpBinding (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|DefaultUndertowHttpBinding
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
DECL|method|getHeaderFilterStrategy ()
specifier|public
name|HeaderFilterStrategy
name|getHeaderFilterStrategy
parameter_list|()
block|{
return|return
name|headerFilterStrategy
return|;
block|}
DECL|method|setHeaderFilterStrategy (HeaderFilterStrategy headerFilterStrategy)
specifier|public
name|void
name|setHeaderFilterStrategy
parameter_list|(
name|HeaderFilterStrategy
name|headerFilterStrategy
parameter_list|)
block|{
name|this
operator|.
name|headerFilterStrategy
operator|=
name|headerFilterStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toCamelMessage (HttpServerExchange httpExchange, Exchange exchange)
specifier|public
name|Message
name|toCamelMessage
parameter_list|(
name|HttpServerExchange
name|httpExchange
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|result
init|=
operator|new
name|DefaultMessage
argument_list|()
decl_stmt|;
name|populateCamelHeaders
argument_list|(
name|httpExchange
argument_list|,
name|result
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
comment|//extract body if the method is allowed to have one
comment|//body is extracted as byte[] then auto TypeConverter kicks in
if|if
condition|(
name|Methods
operator|.
name|POST
operator|.
name|equals
argument_list|(
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
argument_list|)
operator|||
name|Methods
operator|.
name|PUT
operator|.
name|equals
argument_list|(
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
argument_list|)
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|readRequestBody
argument_list|(
name|httpExchange
argument_list|)
decl_stmt|;
name|result
operator|.
name|setBody
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|toCamelMessage (ClientExchange clientExchange, Exchange exchange)
specifier|public
name|Message
name|toCamelMessage
parameter_list|(
name|ClientExchange
name|clientExchange
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|result
init|=
operator|new
name|DefaultMessage
argument_list|()
decl_stmt|;
comment|//retrieve response headers
name|populateCamelHeaders
argument_list|(
name|clientExchange
operator|.
name|getResponse
argument_list|()
argument_list|,
name|result
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
name|result
operator|.
name|setBody
argument_list|(
name|readResponseBody
argument_list|(
name|clientExchange
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|populateCamelHeaders (HttpServerExchange httpExchange, Map<String, Object> headersMap, Exchange exchange)
specifier|public
name|void
name|populateCamelHeaders
parameter_list|(
name|HttpServerExchange
name|httpExchange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headersMap
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"populateCamelHeaders: {}"
argument_list|)
expr_stmt|;
comment|// NOTE: these headers is applied using the same logic as camel-http/camel-jetty to be consistent
name|headersMap
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// strip query parameters from the uri
name|headersMap
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URL
argument_list|,
name|httpExchange
operator|.
name|getRequestURL
argument_list|()
argument_list|)
expr_stmt|;
comment|// uri is without the host and port
name|headersMap
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_URI
argument_list|,
name|httpExchange
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|headersMap
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_QUERY
argument_list|,
name|httpExchange
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|headersMap
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_RAW_QUERY
argument_list|,
name|httpExchange
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|httpExchange
operator|.
name|getRequestPath
argument_list|()
decl_stmt|;
name|headersMap
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_PATH
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Method {}"
argument_list|,
name|httpExchange
operator|.
name|getRequestMethod
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Uri {}"
argument_list|,
name|httpExchange
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HttpString
name|name
range|:
name|httpExchange
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
comment|// mapping the content-type
comment|//String name = httpName.toString();
if|if
condition|(
name|name
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|ExchangeHeaders
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|equals
argument_list|(
literal|"authorization"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|httpExchange
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// store a special header that this request was authenticated using HTTP Basic
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Basic"
argument_list|)
condition|)
block|{
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|Exchange
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Basic"
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|UndertowUtils
operator|.
name|appendHeader
argument_list|(
name|headersMap
argument_list|,
name|Exchange
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Basic"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add the headers one by one, and use the header filter strategy
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|httpExchange
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-header: {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|UndertowUtils
operator|.
name|appendHeader
argument_list|(
name|headersMap
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//process uri parameters as headers
name|Map
argument_list|<
name|String
argument_list|,
name|Deque
argument_list|<
name|String
argument_list|>
argument_list|>
name|pathParameters
init|=
name|httpExchange
operator|.
name|getQueryParameters
argument_list|()
decl_stmt|;
comment|//continue if the map is not empty, otherwise there are no params
if|if
condition|(
operator|!
name|pathParameters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Deque
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|pathParameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|values
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"URI-Parameter: {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|UndertowUtils
operator|.
name|appendHeader
argument_list|(
name|headersMap
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|populateCamelHeaders (ClientResponse response, Map<String, Object> headersMap, Exchange exchange)
specifier|public
name|void
name|populateCamelHeaders
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headersMap
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"populateCamelHeaders: {}"
argument_list|)
expr_stmt|;
name|headersMap
operator|.
name|put
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|response
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HttpString
name|name
range|:
name|response
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|getHeaderNames
argument_list|()
control|)
block|{
comment|// mapping the content-type
comment|//String name = httpName.toString();
if|if
condition|(
name|name
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|equals
argument_list|(
literal|"content-type"
argument_list|)
condition|)
block|{
name|name
operator|=
name|ExchangeHeaders
operator|.
name|CONTENT_TYPE
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
operator|.
name|equals
argument_list|(
literal|"authorization"
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|response
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// store a special header that this request was authenticated using HTTP Basic
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Basic"
argument_list|)
condition|)
block|{
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|Exchange
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Basic"
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|UndertowUtils
operator|.
name|appendHeader
argument_list|(
name|headersMap
argument_list|,
name|Exchange
operator|.
name|AUTHENTICATION
argument_list|,
literal|"Basic"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add the headers one by one, and use the header filter strategy
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|response
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-header: {}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToExternalHeaders
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|,
name|exchange
argument_list|)
condition|)
block|{
name|UndertowUtils
operator|.
name|appendHeader
argument_list|(
name|headersMap
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|toHttpResponse (HttpServerExchange httpExchange, Message message)
specifier|public
name|Object
name|toHttpResponse
parameter_list|(
name|HttpServerExchange
name|httpExchange
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|boolean
name|failed
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|isFailed
argument_list|()
decl_stmt|;
name|int
name|defaultCode
init|=
name|failed
condition|?
literal|500
else|:
literal|200
decl_stmt|;
name|int
name|code
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_RESPONSE_CODE
argument_list|,
name|defaultCode
argument_list|,
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|httpExchange
operator|.
name|setResponseCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|TypeConverter
name|tc
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|//copy headers from Message to Response
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// use an iterator as there can be multiple values. (must not use a delimiter)
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|headerValue
init|=
name|tc
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|!=
literal|null
operator|&&
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Header: {}={}"
argument_list|,
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
name|httpExchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|HttpString
argument_list|(
name|key
argument_list|)
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Exception
name|exception
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|httpExchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Headers
operator|.
name|CONTENT_TYPE
argument_list|,
name|MimeMappings
operator|.
name|DEFAULT_MIME_MAPPINGS
operator|.
name|get
argument_list|(
literal|"txt"
argument_list|)
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|String
name|exceptionMessage
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ExchangeHelper
operator|.
name|setFailureHandled
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exceptionMessage
return|;
block|}
comment|// set the content type in the response.
name|String
name|contentType
init|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|// set content-type
name|httpExchange
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Headers
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Type: {}"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
return|return
name|message
operator|.
name|getBody
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toHttpRequest (ClientRequest clientRequest, Message message)
specifier|public
name|Object
name|toHttpRequest
parameter_list|(
name|ClientRequest
name|clientRequest
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|Object
name|body
init|=
name|message
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|String
name|method
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|HTTP_METHOD
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
comment|//fallback if method is not defined, check the body
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|clientRequest
operator|.
name|setMethod
argument_list|(
name|Methods
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clientRequest
operator|.
name|setMethod
argument_list|(
name|Methods
operator|.
name|POST
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//method set, use it
name|clientRequest
operator|.
name|setMethod
argument_list|(
operator|new
name|HttpString
argument_list|(
name|method
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// set the content type in the response.
name|String
name|contentType
init|=
name|MessageHelper
operator|.
name|getContentType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|// set content-type
name|clientRequest
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Headers
operator|.
name|CONTENT_TYPE
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Content-Type: {}"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
name|TypeConverter
name|tc
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
decl_stmt|;
comment|//copy headers from Message to Request
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// use an iterator as there can be multiple values. (must not use a delimiter)
specifier|final
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|headerValue
init|=
name|tc
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerValue
operator|!=
literal|null
operator|&&
name|headerFilterStrategy
operator|!=
literal|null
operator|&&
operator|!
name|headerFilterStrategy
operator|.
name|applyFilterToCamelHeaders
argument_list|(
name|key
argument_list|,
name|headerValue
argument_list|,
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"HTTP-Header: {}={}"
argument_list|,
name|key
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
name|clientRequest
operator|.
name|getRequestHeaders
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|HttpString
argument_list|(
name|key
argument_list|)
argument_list|,
name|headerValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|body
return|;
block|}
DECL|method|readRequestBody (HttpServerExchange httpExchange)
specifier|private
name|byte
index|[]
name|readRequestBody
parameter_list|(
name|HttpServerExchange
name|httpExchange
parameter_list|)
throws|throws
name|IOException
block|{
name|Pooled
argument_list|<
name|ByteBuffer
argument_list|>
name|pooledByteBuffer
init|=
name|httpExchange
operator|.
name|getConnection
argument_list|()
operator|.
name|getBufferPool
argument_list|()
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|ByteBuffer
name|byteBuffer
init|=
name|pooledByteBuffer
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|httpExchange
operator|.
name|getRequestChannel
argument_list|()
operator|.
name|read
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|byteBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|byteBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|pos
index|]
decl_stmt|;
name|byteBuffer
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pooledByteBuffer
operator|.
name|free
argument_list|()
expr_stmt|;
return|return
name|bytes
return|;
block|}
DECL|method|readResponseBody (ClientExchange httpExchange)
specifier|private
name|byte
index|[]
name|readResponseBody
parameter_list|(
name|ClientExchange
name|httpExchange
parameter_list|)
throws|throws
name|IOException
block|{
name|Pooled
argument_list|<
name|ByteBuffer
argument_list|>
name|pooledByteBuffer
init|=
name|httpExchange
operator|.
name|getConnection
argument_list|()
operator|.
name|getBufferPool
argument_list|()
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|ByteBuffer
name|byteBuffer
init|=
name|pooledByteBuffer
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|httpExchange
operator|.
name|getResponseChannel
argument_list|()
operator|.
name|read
argument_list|(
name|byteBuffer
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|byteBuffer
operator|.
name|position
argument_list|()
decl_stmt|;
name|byteBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|pos
index|]
decl_stmt|;
name|byteBuffer
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|byteBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pooledByteBuffer
operator|.
name|free
argument_list|()
expr_stmt|;
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

