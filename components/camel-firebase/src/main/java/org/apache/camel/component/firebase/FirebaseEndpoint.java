begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.firebase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|FirebaseApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * The Google FirebaseÂ component enables you to save and modify data in a Google Firebase database  * via the {@link FirebaseProducer} class.  * Furthermore it allows you to consume and process all child events mapped to a specific Firebase reference  * via the {@link FirebaseConsumer} class.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"firebase"
argument_list|,
name|title
operator|=
literal|"Firebase"
argument_list|,
name|syntax
operator|=
literal|"firebase:databaseUrl"
argument_list|,
name|consumerClass
operator|=
name|FirebaseConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"cloud,messaging"
argument_list|)
DECL|class|FirebaseEndpoint
specifier|public
class|class
name|FirebaseEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|firebaseConfig
specifier|private
specifier|final
name|FirebaseConfig
name|firebaseConfig
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"The Firebase database URL. Always uses https"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|databaseUrl
specifier|private
name|String
name|databaseUrl
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"The path in the database tree where the key value pairs are to be stored"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|rootReference
specifier|private
name|String
name|rootReference
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"The path to the JSON file which provided the keys used to connect to Firebase. #"
operator|+
literal|"This file is typically generated when you create the database"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|serviceAccountFile
specifier|private
name|String
name|serviceAccountFile
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"firebaseKey"
argument_list|,
name|description
operator|=
literal|"The Camel exchange header name in which "
operator|+
literal|"the Firebase key is specified. Only needed in case you are saving or updating data"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"false"
argument_list|)
DECL|field|keyName
specifier|private
name|String
name|keyName
init|=
literal|"firebaseKey"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|defaultValue
operator|=
literal|"reply"
argument_list|,
name|description
operator|=
literal|"If true, the save or update request (set value in Firebase terms) "
operator|+
literal|"is fired and the reply will be ignored, else the routing thread will wait and the reply will be saved in the exchange message"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"false"
argument_list|)
DECL|field|reply
specifier|private
name|boolean
name|reply
decl_stmt|;
DECL|method|FirebaseEndpoint (String uri, FirebaseComponent firebaseComponent, FirebaseConfig firebaseConfig)
specifier|public
name|FirebaseEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|FirebaseComponent
name|firebaseComponent
parameter_list|,
name|FirebaseConfig
name|firebaseConfig
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|firebaseComponent
argument_list|)
expr_stmt|;
name|this
operator|.
name|firebaseConfig
operator|=
name|firebaseConfig
expr_stmt|;
name|this
operator|.
name|setRootReference
argument_list|(
name|firebaseConfig
operator|.
name|getRootReference
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setServiceAccountFile
argument_list|(
name|firebaseConfig
operator|.
name|getServiceAccountFile
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|databaseUrl
operator|=
name|firebaseConfig
operator|.
name|getDatabaseUrl
argument_list|()
expr_stmt|;
specifier|final
name|String
name|keyName
init|=
name|firebaseConfig
operator|.
name|getKeyName
argument_list|()
decl_stmt|;
name|this
operator|.
name|setReply
argument_list|(
name|firebaseConfig
operator|.
name|isAsync
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|setKeyName
argument_list|(
name|keyName
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|FirebaseProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FirebaseConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getRootReference ()
specifier|public
name|String
name|getRootReference
parameter_list|()
block|{
return|return
name|rootReference
return|;
block|}
DECL|method|setRootReference (String rootReference)
specifier|public
name|void
name|setRootReference
parameter_list|(
name|String
name|rootReference
parameter_list|)
block|{
name|this
operator|.
name|rootReference
operator|=
name|rootReference
expr_stmt|;
block|}
DECL|method|getServiceAccountFile ()
specifier|public
name|String
name|getServiceAccountFile
parameter_list|()
block|{
return|return
name|serviceAccountFile
return|;
block|}
DECL|method|setServiceAccountFile (String serviceAccountFile)
specifier|public
name|void
name|setServiceAccountFile
parameter_list|(
name|String
name|serviceAccountFile
parameter_list|)
block|{
name|this
operator|.
name|serviceAccountFile
operator|=
name|serviceAccountFile
expr_stmt|;
block|}
DECL|method|getFirebaseConfig ()
specifier|public
name|FirebaseConfig
name|getFirebaseConfig
parameter_list|()
block|{
return|return
name|firebaseConfig
return|;
block|}
DECL|method|getKeyName ()
specifier|public
name|String
name|getKeyName
parameter_list|()
block|{
return|return
name|keyName
return|;
block|}
DECL|method|setKeyName (String keyName)
specifier|public
name|void
name|setKeyName
parameter_list|(
name|String
name|keyName
parameter_list|)
block|{
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
block|}
DECL|method|isReply ()
specifier|public
name|boolean
name|isReply
parameter_list|()
block|{
return|return
name|reply
return|;
block|}
DECL|method|setReply (boolean reply)
specifier|public
name|void
name|setReply
parameter_list|(
name|boolean
name|reply
parameter_list|)
block|{
name|this
operator|.
name|reply
operator|=
name|reply
expr_stmt|;
block|}
DECL|method|getFirebaseApp ()
specifier|public
name|FirebaseApp
name|getFirebaseApp
parameter_list|()
block|{
return|return
name|firebaseConfig
operator|.
name|getFirebaseApp
argument_list|()
return|;
block|}
DECL|method|getDatabaseUrl ()
specifier|public
name|String
name|getDatabaseUrl
parameter_list|()
block|{
return|return
name|databaseUrl
return|;
block|}
block|}
end_class

end_unit

