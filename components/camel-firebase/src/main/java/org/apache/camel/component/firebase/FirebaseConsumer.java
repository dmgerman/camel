begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.firebase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|database
operator|.
name|ChildEventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|database
operator|.
name|DataSnapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|database
operator|.
name|DatabaseError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|database
operator|.
name|FirebaseDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
operator|.
name|data
operator|.
name|FirebaseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
operator|.
name|data
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
operator|.
name|exception
operator|.
name|FirebaseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_comment
comment|/**  * Listens to child events of the root reference and forwards the incoming message on the route.  */
end_comment

begin_class
DECL|class|FirebaseConsumer
specifier|public
class|class
name|FirebaseConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|firebaseConfig
specifier|private
specifier|final
name|FirebaseConfig
name|firebaseConfig
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|FirebaseEndpoint
name|endpoint
decl_stmt|;
DECL|method|FirebaseConsumer (FirebaseEndpoint endpoint, Processor processor)
specifier|public
name|FirebaseConsumer
parameter_list|(
name|FirebaseEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|firebaseConfig
operator|=
name|endpoint
operator|.
name|getFirebaseConfig
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FirebaseDatabase
operator|.
name|getInstance
argument_list|(
name|endpoint
operator|.
name|getFirebaseApp
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|(
name|firebaseConfig
operator|.
name|getRootReference
argument_list|()
argument_list|)
operator|.
name|addChildEventListener
argument_list|(
operator|new
name|ChildEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChildAdded
parameter_list|(
name|DataSnapshot
name|dataSnapshot
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|forwardMessage
argument_list|(
operator|new
name|FirebaseMessage
operator|.
name|Builder
argument_list|(
name|Operation
operator|.
name|CHILD_ADD
argument_list|,
name|dataSnapshot
argument_list|)
operator|.
name|setPreviousChildName
argument_list|(
name|s
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onChildChanged
parameter_list|(
name|DataSnapshot
name|dataSnapshot
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|forwardMessage
argument_list|(
operator|new
name|FirebaseMessage
operator|.
name|Builder
argument_list|(
name|Operation
operator|.
name|CHILD_CHANGED
argument_list|,
name|dataSnapshot
argument_list|)
operator|.
name|setPreviousChildName
argument_list|(
name|s
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onChildRemoved
parameter_list|(
name|DataSnapshot
name|dataSnapshot
parameter_list|)
block|{
name|forwardMessage
argument_list|(
operator|new
name|FirebaseMessage
operator|.
name|Builder
argument_list|(
name|Operation
operator|.
name|CHILD_REMOVED
argument_list|,
name|dataSnapshot
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onChildMoved
parameter_list|(
name|DataSnapshot
name|dataSnapshot
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|forwardMessage
argument_list|(
operator|new
name|FirebaseMessage
operator|.
name|Builder
argument_list|(
name|Operation
operator|.
name|CHILD_MOVED
argument_list|,
name|dataSnapshot
argument_list|)
operator|.
name|setPreviousChildName
argument_list|(
name|s
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCancelled
parameter_list|(
name|DatabaseError
name|databaseError
parameter_list|)
block|{
name|forwardMessage
argument_list|(
operator|new
name|FirebaseMessage
operator|.
name|Builder
argument_list|(
name|Operation
operator|.
name|CANCELLED
argument_list|)
operator|.
name|setDatabaseError
argument_list|(
name|databaseError
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|forwardMessage (FirebaseMessage o)
specifier|private
name|void
name|forwardMessage
parameter_list|(
name|FirebaseMessage
name|o
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|o
argument_list|)
expr_stmt|;
try|try
block|{
comment|// send message to next processor in the route
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FirebaseException
argument_list|(
literal|"Message forwarding failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// log exception if an exception occurred and was not handled
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

