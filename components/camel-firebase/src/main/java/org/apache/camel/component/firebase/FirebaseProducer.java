begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.firebase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|database
operator|.
name|DatabaseError
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|database
operator|.
name|DatabaseReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|firebase
operator|.
name|database
operator|.
name|FirebaseDatabase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
operator|.
name|exception
operator|.
name|DatabaseErrorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The producer, which can be used to set a value for a specific key in Firebase.  */
end_comment

begin_class
DECL|class|FirebaseProducer
specifier|public
class|class
name|FirebaseProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FirebaseProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rootReference
specifier|private
specifier|final
name|String
name|rootReference
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|FirebaseEndpoint
name|endpoint
decl_stmt|;
DECL|method|FirebaseProducer (FirebaseEndpoint endpoint)
specifier|public
name|FirebaseProducer
parameter_list|(
name|FirebaseEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|rootReference
operator|=
name|endpoint
operator|.
name|getRootReference
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
specifier|final
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
specifier|final
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|String
name|firebaseKey
init|=
operator|(
name|String
operator|)
name|in
operator|.
name|getHeader
argument_list|(
name|endpoint
operator|.
name|getKeyName
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
name|in
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|DatabaseReference
name|ref
init|=
name|FirebaseDatabase
operator|.
name|getInstance
argument_list|(
name|endpoint
operator|.
name|getFirebaseApp
argument_list|()
argument_list|)
operator|.
name|getReference
argument_list|(
name|rootReference
argument_list|)
operator|.
name|child
argument_list|(
name|firebaseKey
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|reply
init|=
name|endpoint
operator|.
name|isReply
argument_list|()
decl_stmt|;
name|out
operator|.
name|setHeaders
argument_list|(
name|in
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
comment|// Wait for reply
name|processReply
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|value
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Fire and forget
name|ref
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|setBody
argument_list|(
name|in
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|reply
return|;
block|}
DECL|method|processReply (Exchange exchange, AsyncCallback callback, Object value, DatabaseReference ref)
specifier|private
name|void
name|processReply
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|,
name|Object
name|value
parameter_list|,
name|DatabaseReference
name|ref
parameter_list|)
block|{
name|ref
operator|.
name|setValue
argument_list|(
name|value
argument_list|,
parameter_list|(
name|DatabaseError
name|databaseError
parameter_list|,
name|DatabaseReference
name|databaseReference
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|databaseError
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|DatabaseErrorException
argument_list|(
name|databaseError
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|databaseReference
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

