begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.firebase.provider
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|firebase
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_comment
comment|/**  * Copies a test file to a folder to test routes.  */
end_comment

begin_class
DECL|class|SampleInputProvider
specifier|public
class|class
name|SampleInputProvider
block|{
DECL|field|targetFolder
specifier|private
specifier|final
name|Path
name|targetFolder
decl_stmt|;
DECL|method|SampleInputProvider ()
specifier|public
name|SampleInputProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|targetFolder
operator|=
name|Paths
operator|.
name|get
argument_list|(
literal|"src/data"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|targetFolder
argument_list|)
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|targetFolder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|copySampleFile ()
specifier|public
name|void
name|copySampleFile
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
specifier|final
name|String
name|name
init|=
literal|"sample_message.txt"
decl_stmt|;
name|URL
name|url
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|url
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
specifier|final
name|URI
name|uri
init|=
name|url
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|Path
name|sourceFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|sourceFile
argument_list|,
name|targetFolder
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
DECL|method|getTargetFolder ()
specifier|public
name|Path
name|getTargetFolder
parameter_list|()
block|{
return|return
name|targetFolder
return|;
block|}
DECL|method|createDeleteKey ()
specifier|public
specifier|static
name|String
name|createDeleteKey
parameter_list|()
block|{
return|return
literal|"second king of Saxony"
return|;
block|}
block|}
end_class

end_unit

