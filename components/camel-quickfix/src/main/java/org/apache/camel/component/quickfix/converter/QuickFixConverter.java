begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfix.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfix
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfix
operator|.
name|QuickfixApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|IOConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|InvalidMessage
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * @author Anton Arhipov  */
end_comment

begin_class
annotation|@
name|Converter
DECL|class|QuickFixConverter
specifier|public
specifier|final
class|class
name|QuickFixConverter
block|{
DECL|field|BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BUFFER_SIZE
init|=
literal|8192
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QuickFixConverter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|QuickFixConverter ()
specifier|private
name|QuickFixConverter
parameter_list|()
block|{
comment|// helper class
block|}
annotation|@
name|Converter
DECL|method|convert (InputStream in, Exchange exchange)
specifier|public
specifier|static
name|Message
name|convert
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidMessage
block|{
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|BUFFER_SIZE
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|count
decl_stmt|;
name|count
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|!=
operator|-
literal|1
condition|)
block|{
name|baos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|String
name|str
init|=
literal|null
decl_stmt|;
name|String
name|charsetName
init|=
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|charsetName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|str
operator|=
name|baos
operator|.
name|toString
argument_list|(
name|charsetName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot convert the byte[] into String with the charset: "
operator|+
name|charsetName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|str
operator|=
name|baos
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// using the default encoding
name|str
operator|=
name|baos
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|Message
argument_list|(
name|str
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toInputStream (Message message)
specifier|public
specifier|static
name|InputStream
name|toInputStream
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|IOConverter
operator|.
name|toInputStream
argument_list|(
name|toString
argument_list|(
name|message
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Converter
DECL|method|toString (Message message)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

