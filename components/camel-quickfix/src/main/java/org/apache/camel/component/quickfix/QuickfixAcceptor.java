begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfix
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|ConfigError
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|DefaultMessageFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|MessageStoreFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionSettings
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SocketAcceptor
import|;
end_import

begin_comment
comment|/**  * QuickfixAcceptor is the endpoint for QuickFIX/J's server instance, e.g. FIX  * client. The class is referenced in  * META-INF/services/org/apache/camel/quickfix-server  */
end_comment

begin_class
DECL|class|QuickfixAcceptor
specifier|public
class|class
name|QuickfixAcceptor
extends|extends
name|DefaultComponent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QuickfixAcceptorEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|createEndpoint (String uri, String remaining, Map parameters)
specifier|protected
name|QuickfixEndpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|QuickfixAcceptorEndpoint
argument_list|(
name|uri
argument_list|,
name|getCamelContext
argument_list|()
argument_list|,
name|remaining
argument_list|)
return|;
block|}
DECL|class|QuickfixAcceptorEndpoint
class|class
name|QuickfixAcceptorEndpoint
extends|extends
name|QuickfixEndpoint
block|{
DECL|field|acceptor
specifier|private
comment|/* Threaded */
name|SocketAcceptor
name|acceptor
decl_stmt|;
DECL|method|QuickfixAcceptorEndpoint (String uri, CamelContext context, String configuration)
specifier|public
name|QuickfixAcceptorEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|CamelContext
name|context
parameter_list|,
name|String
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|context
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|start (Application application, MessageStoreFactory storeFactory, SessionSettings settings, LogFactory logFactory)
specifier|protected
name|void
name|start
parameter_list|(
name|Application
name|application
parameter_list|,
name|MessageStoreFactory
name|storeFactory
parameter_list|,
name|SessionSettings
name|settings
parameter_list|,
name|LogFactory
name|logFactory
parameter_list|)
throws|throws
name|ConfigError
block|{
comment|// To avoid this exception in OSGi platform
comment|// java.lang.NoClassDefFoundError: quickfix/fix41/MessageFactory
name|ClassLoader
name|ccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|acceptor
operator|=
operator|new
name|SocketAcceptor
argument_list|(
name|application
argument_list|,
name|storeFactory
argument_list|,
name|settings
argument_list|,
name|logFactory
argument_list|,
operator|new
name|DefaultMessageFactory
argument_list|()
argument_list|)
expr_stmt|;
name|acceptor
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Start the accetpor endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|ccl
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|acceptor
operator|!=
literal|null
condition|)
block|{
name|acceptor
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stop the accetpor endpoint"
argument_list|)
expr_stmt|;
block|}
name|acceptor
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

