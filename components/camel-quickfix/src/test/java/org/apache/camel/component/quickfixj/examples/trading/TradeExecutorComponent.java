begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfixj.examples.trading
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|examples
operator|.
name|trading
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|QuickfixjEventCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|converter
operator|.
name|QuickfixjConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|SenderCompID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|SenderLocationID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|SenderSubID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|TargetCompID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|TargetLocationID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|TargetSubID
import|;
end_import

begin_comment
comment|/**  * Adapts the TradeExecutor for use as a Camel endpoint.  *   * @see TradeExecutor  */
end_comment

begin_class
DECL|class|TradeExecutorComponent
specifier|public
class|class
name|TradeExecutorComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TradeExecutorComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoints
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TradeExecutorEndpoint
argument_list|>
name|endpoints
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TradeExecutorEndpoint
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
DECL|method|TradeExecutorComponent ()
specifier|public
name|TradeExecutorComponent
parameter_list|()
block|{
name|this
argument_list|(
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|TradeExecutorThreadFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TradeExecutorThreadFactory
specifier|private
specifier|static
class|class
name|TradeExecutorThreadFactory
implements|implements
name|ThreadFactory
block|{
DECL|method|newThread (Runnable r)
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"Trade Executor"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
DECL|method|TradeExecutorComponent (Executor executor)
specifier|public
name|TradeExecutorComponent
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|endpoints
init|)
block|{
name|Endpoint
name|endpoint
init|=
name|endpoints
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
name|endpoint
operator|=
operator|new
name|TradeExecutorEndpoint
argument_list|(
name|uri
argument_list|,
operator|new
name|TradeExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|endpoints
operator|.
name|put
argument_list|(
name|uri
argument_list|,
operator|(
name|TradeExecutorEndpoint
operator|)
name|endpoint
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created trade executor: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|endpoint
return|;
block|}
block|}
DECL|class|TradeExecutorEndpoint
specifier|private
class|class
name|TradeExecutorEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|tradeExecutor
specifier|private
specifier|final
name|TradeExecutor
name|tradeExecutor
decl_stmt|;
DECL|field|processors
specifier|private
name|List
argument_list|<
name|Processor
argument_list|>
name|processors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Processor
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TradeExecutorEndpoint (String uri, TradeExecutor tradeExecutor)
specifier|public
name|TradeExecutorEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|TradeExecutor
name|tradeExecutor
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|TradeExecutorComponent
operator|.
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|tradeExecutor
operator|=
name|tradeExecutor
expr_stmt|;
name|tradeExecutor
operator|.
name|addListener
argument_list|(
operator|new
name|QuickfixjMessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|SessionID
name|sessionID
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Inject session ID into message so produce will know where to send it
name|Header
name|header
init|=
name|message
operator|.
name|getHeader
argument_list|()
decl_stmt|;
name|setOptionalField
argument_list|(
name|header
argument_list|,
name|sessionID
argument_list|,
name|SenderCompID
operator|.
name|FIELD
argument_list|,
name|sessionID
operator|.
name|getTargetCompID
argument_list|()
argument_list|)
expr_stmt|;
name|setOptionalField
argument_list|(
name|header
argument_list|,
name|sessionID
argument_list|,
name|SenderSubID
operator|.
name|FIELD
argument_list|,
name|sessionID
operator|.
name|getTargetSubID
argument_list|()
argument_list|)
expr_stmt|;
name|setOptionalField
argument_list|(
name|header
argument_list|,
name|sessionID
argument_list|,
name|SenderLocationID
operator|.
name|FIELD
argument_list|,
name|sessionID
operator|.
name|getTargetLocationID
argument_list|()
argument_list|)
expr_stmt|;
name|setOptionalField
argument_list|(
name|header
argument_list|,
name|sessionID
argument_list|,
name|TargetCompID
operator|.
name|FIELD
argument_list|,
name|sessionID
operator|.
name|getSenderCompID
argument_list|()
argument_list|)
expr_stmt|;
name|setOptionalField
argument_list|(
name|header
argument_list|,
name|sessionID
argument_list|,
name|TargetSubID
operator|.
name|FIELD
argument_list|,
name|sessionID
operator|.
name|getSenderSubID
argument_list|()
argument_list|)
expr_stmt|;
name|setOptionalField
argument_list|(
name|header
argument_list|,
name|sessionID
argument_list|,
name|TargetLocationID
operator|.
name|FIELD
argument_list|,
name|sessionID
operator|.
name|getSenderLocationID
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|QuickfixjConverters
operator|.
name|toExchange
argument_list|(
name|TradeExecutorEndpoint
operator|.
name|this
argument_list|,
name|sessionID
argument_list|,
name|message
argument_list|,
name|QuickfixjEventCategory
operator|.
name|AppMessageReceived
argument_list|)
decl_stmt|;
for|for
control|(
name|Processor
name|processor
range|:
name|processors
control|)
block|{
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setOptionalField
parameter_list|(
name|Header
name|header
parameter_list|,
name|SessionID
name|sessionID
parameter_list|,
name|int
name|tag
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|header
operator|.
name|setString
argument_list|(
name|tag
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultProducer
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|tradeExecutor
operator|.
name|execute
argument_list|(
name|ExchangeHelper
operator|.
name|getMandatoryInBody
argument_list|(
name|exchange
argument_list|,
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error during trade execution"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|DefaultConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|processors
operator|.
name|add
argument_list|(
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|processors
operator|.
name|remove
argument_list|(
name|getProcessor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

