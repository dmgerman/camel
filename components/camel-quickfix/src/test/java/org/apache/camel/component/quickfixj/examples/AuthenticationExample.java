begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfixj.examples
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|PredicateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|QuickfixjEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|QuickfixjEventCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|examples
operator|.
name|util
operator|.
name|CountDownLatchDecrementer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldNotFound
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|RejectLogon
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|MsgType
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|RawData
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|RawDataLength
import|;
end_import

begin_comment
comment|/**  * This example demonstrates several features of the QuickFIX/J component. It uses  * QFJ session events to synchronize application behavior (e.g., Session logon).  */
end_comment

begin_class
DECL|class|AuthenticationExample
specifier|public
class|class
name|AuthenticationExample
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AuthenticationExample
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|AuthenticationExample
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|logoutLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RouteBuilder
name|routes
init|=
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Modify the outgoing logon message to add a password
comment|// The modified message will be sent from the FIX engine when the message exchange completes
name|from
argument_list|(
literal|"quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET"
argument_list|)
operator|.
name|filter
argument_list|(
name|PredicateBuilder
operator|.
name|and
argument_list|(
name|header
argument_list|(
name|QuickfixjEndpoint
operator|.
name|EVENT_CATEGORY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AdminMessageSent
argument_list|)
argument_list|,
name|header
argument_list|(
name|QuickfixjEndpoint
operator|.
name|MESSAGE_TYPE_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MsgType
operator|.
name|LOGON
argument_list|)
argument_list|)
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|CredentialInjector
argument_list|(
literal|"PASSWORD"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Release latch when the trader received a logout message
name|from
argument_list|(
literal|"quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:TRADER->MARKET"
argument_list|)
operator|.
name|filter
argument_list|(
name|header
argument_list|(
name|QuickfixjEndpoint
operator|.
name|EVENT_CATEGORY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|QuickfixjEventCategory
operator|.
name|SessionLogoff
argument_list|)
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|CountDownLatchDecrementer
argument_list|(
literal|"logout"
argument_list|,
name|logoutLatch
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reject all logons on market side
comment|// Demonstrates how to validate logons
name|from
argument_list|(
literal|"quickfix:examples/inprocess.cfg?sessionID=FIX.4.2:MARKET->TRADER"
argument_list|)
operator|.
name|filter
argument_list|(
name|PredicateBuilder
operator|.
name|and
argument_list|(
name|header
argument_list|(
name|QuickfixjEndpoint
operator|.
name|EVENT_CATEGORY_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AdminMessageReceived
argument_list|)
argument_list|,
name|header
argument_list|(
name|QuickfixjEndpoint
operator|.
name|MESSAGE_TYPE_KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|MsgType
operator|.
name|LOGON
argument_list|)
argument_list|)
argument_list|)
operator|.
name|bean
argument_list|(
operator|new
name|LogonAuthenticator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
name|routes
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Camel context"
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|logoutLatch
operator|.
name|await
argument_list|(
literal|5L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Logout was not received"
argument_list|)
throw|;
block|}
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Example complete"
argument_list|)
expr_stmt|;
block|}
DECL|class|LogonAuthenticator
specifier|public
specifier|static
class|class
name|LogonAuthenticator
block|{
DECL|method|authenticate (Exchange exchange)
specifier|public
name|void
name|authenticate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|RejectLogon
throws|,
name|CamelExchangeException
throws|,
name|FieldNotFound
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Acceptor is rejecting logon for "
operator|+
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|QuickfixjEndpoint
operator|.
name|SESSION_ID_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isSetField
argument_list|(
name|RawData
operator|.
name|FIELD
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Invalid password: "
operator|+
name|message
operator|.
name|getString
argument_list|(
name|RawData
operator|.
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|RejectLogon
argument_list|(
literal|"Rejecting logon for test purposes"
argument_list|)
throw|;
block|}
block|}
DECL|class|CredentialInjector
specifier|public
specifier|static
class|class
name|CredentialInjector
block|{
DECL|field|password
specifier|private
specifier|final
name|String
name|password
decl_stmt|;
DECL|method|CredentialInjector (String password)
specifier|public
name|CredentialInjector
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|inject (Exchange exchange)
specifier|public
name|void
name|inject
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|CamelExchangeException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Injecting password into outgoing logon message"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|setString
argument_list|(
name|RawData
operator|.
name|FIELD
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|message
operator|.
name|setInt
argument_list|(
name|RawDataLength
operator|.
name|FIELD
argument_list|,
name|password
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

