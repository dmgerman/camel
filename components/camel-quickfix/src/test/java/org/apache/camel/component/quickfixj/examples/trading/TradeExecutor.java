begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfixj.examples.trading
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|examples
operator|.
name|trading
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|ConfigError
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|DataDictionary
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|DataDictionaryProvider
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldConvertError
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldNotFound
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FixVersions
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|IncorrectTagValue
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|LogUtil
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionNotFound
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|UnsupportedMessageType
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|ApplVerID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|AvgPx
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|CumQty
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|ExecID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|ExecTransType
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|ExecType
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|LastPx
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|LastQty
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|LastShares
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|LeavesQty
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|OrdStatus
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|OrdType
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|OrderID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|OrderQty
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|Price
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|Symbol
import|;
end_import

begin_comment
comment|/**  * Trade executor based on QFJ example "executor" (No Camel dependencies)  */
end_comment

begin_class
DECL|class|TradeExecutor
specifier|public
class|class
name|TradeExecutor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TradeExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|alwaysFillLimitOrders
specifier|private
name|boolean
name|alwaysFillLimitOrders
decl_stmt|;
DECL|field|validOrderTypes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|validOrderTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|marketQuoteProvider
specifier|private
name|MarketQuoteProvider
name|marketQuoteProvider
decl_stmt|;
DECL|field|listeners
specifier|private
name|List
argument_list|<
name|QuickfixjMessageListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|orderID
specifier|private
name|int
name|orderID
decl_stmt|;
DECL|field|execID
specifier|private
name|int
name|execID
decl_stmt|;
DECL|method|TradeExecutor ()
specifier|public
name|TradeExecutor
parameter_list|()
throws|throws
name|ConfigError
throws|,
name|FieldConvertError
block|{
name|setAlwaysFillLimitOrders
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|validOrderTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|validOrderTypes
operator|.
name|add
argument_list|(
name|OrdType
operator|.
name|LIMIT
operator|+
literal|""
argument_list|)
expr_stmt|;
name|validOrderTypes
operator|.
name|add
argument_list|(
name|OrdType
operator|.
name|MARKET
operator|+
literal|""
argument_list|)
expr_stmt|;
name|setValidOrderTypes
argument_list|(
name|validOrderTypes
argument_list|)
expr_stmt|;
name|setMarketQuoteProvider
argument_list|(
operator|new
name|DefaultMarketQuoteProvider
argument_list|(
literal|10.00
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setAlwaysFillLimitOrders (boolean alwaysFillLimitOrders)
specifier|public
name|void
name|setAlwaysFillLimitOrders
parameter_list|(
name|boolean
name|alwaysFillLimitOrders
parameter_list|)
block|{
name|this
operator|.
name|alwaysFillLimitOrders
operator|=
name|alwaysFillLimitOrders
expr_stmt|;
block|}
DECL|method|setMarketQuoteProvider (MarketQuoteProvider marketQuoteProvider)
specifier|public
name|void
name|setMarketQuoteProvider
parameter_list|(
name|MarketQuoteProvider
name|marketQuoteProvider
parameter_list|)
block|{
name|this
operator|.
name|marketQuoteProvider
operator|=
name|marketQuoteProvider
expr_stmt|;
block|}
DECL|method|setValidOrderTypes (String validOrderTypes)
specifier|public
name|void
name|setValidOrderTypes
parameter_list|(
name|String
name|validOrderTypes
parameter_list|)
block|{
name|setValidOrderTypes
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|validOrderTypes
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setValidOrderTypes (Set<String> validOrderTypes)
specifier|public
name|void
name|setValidOrderTypes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|validOrderTypes
parameter_list|)
block|{
name|this
operator|.
name|validOrderTypes
operator|=
name|validOrderTypes
expr_stmt|;
block|}
DECL|method|addListener (QuickfixjMessageListener listener)
specifier|public
name|void
name|addListener
parameter_list|(
name|QuickfixjMessageListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeListener (QuickfixjMessageListener listener)
specifier|public
name|void
name|removeListener
parameter_list|(
name|QuickfixjMessageListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|execute (final Message message)
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|UnsupportedMessageType
throws|,
name|IncorrectTagValue
block|{
specifier|final
name|SessionID
name|sessionID
init|=
name|MessageUtils
operator|.
name|getSessionID
argument_list|(
name|message
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|quickfix
operator|.
name|fix40
operator|.
name|NewOrderSingle
condition|)
block|{
name|onMessage
argument_list|(
operator|(
name|quickfix
operator|.
name|fix40
operator|.
name|NewOrderSingle
operator|)
name|message
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|quickfix
operator|.
name|fix41
operator|.
name|NewOrderSingle
condition|)
block|{
name|onMessage
argument_list|(
operator|(
name|quickfix
operator|.
name|fix41
operator|.
name|NewOrderSingle
operator|)
name|message
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|quickfix
operator|.
name|fix42
operator|.
name|NewOrderSingle
condition|)
block|{
name|onMessage
argument_list|(
operator|(
name|quickfix
operator|.
name|fix42
operator|.
name|NewOrderSingle
operator|)
name|message
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|quickfix
operator|.
name|fix43
operator|.
name|NewOrderSingle
condition|)
block|{
name|onMessage
argument_list|(
operator|(
name|quickfix
operator|.
name|fix43
operator|.
name|NewOrderSingle
operator|)
name|message
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|quickfix
operator|.
name|fix44
operator|.
name|NewOrderSingle
condition|)
block|{
name|onMessage
argument_list|(
operator|(
name|quickfix
operator|.
name|fix44
operator|.
name|NewOrderSingle
operator|)
name|message
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|quickfix
operator|.
name|fix50
operator|.
name|NewOrderSingle
condition|)
block|{
name|onMessage
argument_list|(
operator|(
name|quickfix
operator|.
name|fix50
operator|.
name|NewOrderSingle
operator|)
name|message
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error submitting execution task"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMessage (quickfix.fix40.NewOrderSingle order, SessionID sessionID)
specifier|private
name|void
name|onMessage
parameter_list|(
name|quickfix
operator|.
name|fix40
operator|.
name|NewOrderSingle
name|order
parameter_list|,
name|SessionID
name|sessionID
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|UnsupportedMessageType
throws|,
name|IncorrectTagValue
block|{
try|try
block|{
name|validateOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|OrderQty
name|orderQty
init|=
name|order
operator|.
name|getOrderQty
argument_list|()
decl_stmt|;
name|Price
name|price
init|=
name|getPrice
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|quickfix
operator|.
name|fix40
operator|.
name|ExecutionReport
name|accept
init|=
operator|new
name|quickfix
operator|.
name|fix40
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecTransType
argument_list|(
name|ExecTransType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|NEW
argument_list|)
argument_list|,
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
name|orderQty
argument_list|,
operator|new
name|LastShares
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|LastPx
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOrderExecutable
argument_list|(
name|order
argument_list|,
name|price
argument_list|)
condition|)
block|{
name|quickfix
operator|.
name|fix40
operator|.
name|ExecutionReport
name|fill
init|=
operator|new
name|quickfix
operator|.
name|fix40
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecTransType
argument_list|(
name|ExecTransType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|FILLED
argument_list|)
argument_list|,
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
name|orderQty
argument_list|,
operator|new
name|LastShares
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|LastPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|fill
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|fill
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isOrderExecutable (Message order, Price price)
specifier|private
name|boolean
name|isOrderExecutable
parameter_list|(
name|Message
name|order
parameter_list|,
name|Price
name|price
parameter_list|)
throws|throws
name|FieldNotFound
block|{
if|if
condition|(
name|order
operator|.
name|getChar
argument_list|(
name|OrdType
operator|.
name|FIELD
argument_list|)
operator|==
name|OrdType
operator|.
name|LIMIT
condition|)
block|{
name|BigDecimal
name|limitPrice
init|=
operator|new
name|BigDecimal
argument_list|(
name|order
operator|.
name|getString
argument_list|(
name|Price
operator|.
name|FIELD
argument_list|)
argument_list|)
decl_stmt|;
name|char
name|side
init|=
name|order
operator|.
name|getChar
argument_list|(
name|Side
operator|.
name|FIELD
argument_list|)
decl_stmt|;
name|BigDecimal
name|thePrice
init|=
operator|new
name|BigDecimal
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|side
operator|==
name|Side
operator|.
name|BUY
operator|&&
name|thePrice
operator|.
name|compareTo
argument_list|(
name|limitPrice
argument_list|)
operator|<=
literal|0
operator|)
operator|||
operator|(
operator|(
name|side
operator|==
name|Side
operator|.
name|SELL
operator|||
name|side
operator|==
name|Side
operator|.
name|SELL_SHORT
operator|)
operator|&&
name|thePrice
operator|.
name|compareTo
argument_list|(
name|limitPrice
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|getPrice (Message message)
specifier|private
name|Price
name|getPrice
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|FieldNotFound
block|{
name|Price
name|price
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getChar
argument_list|(
name|OrdType
operator|.
name|FIELD
argument_list|)
operator|==
name|OrdType
operator|.
name|LIMIT
operator|&&
name|alwaysFillLimitOrders
condition|)
block|{
name|price
operator|=
operator|new
name|Price
argument_list|(
name|message
operator|.
name|getDouble
argument_list|(
name|Price
operator|.
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|marketQuoteProvider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No market data provider specified for market order"
argument_list|)
throw|;
block|}
name|char
name|side
init|=
name|message
operator|.
name|getChar
argument_list|(
name|Side
operator|.
name|FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|side
operator|==
name|Side
operator|.
name|BUY
condition|)
block|{
name|price
operator|=
operator|new
name|Price
argument_list|(
name|marketQuoteProvider
operator|.
name|getAsk
argument_list|(
name|message
operator|.
name|getString
argument_list|(
name|Symbol
operator|.
name|FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|side
operator|==
name|Side
operator|.
name|SELL
operator|||
name|side
operator|==
name|Side
operator|.
name|SELL_SHORT
condition|)
block|{
name|price
operator|=
operator|new
name|Price
argument_list|(
name|marketQuoteProvider
operator|.
name|getBid
argument_list|(
name|message
operator|.
name|getString
argument_list|(
name|Symbol
operator|.
name|FIELD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid order side: "
operator|+
name|side
argument_list|)
throw|;
block|}
block|}
return|return
name|price
return|;
block|}
DECL|method|sendMessage (SessionID sessionID, Message message)
specifier|private
name|void
name|sendMessage
parameter_list|(
name|SessionID
name|sessionID
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|Session
name|session
init|=
name|Session
operator|.
name|lookupSession
argument_list|(
name|sessionID
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SessionNotFound
argument_list|(
name|sessionID
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|DataDictionaryProvider
name|provider
init|=
name|session
operator|.
name|getDataDictionaryProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ApplVerID
name|applVerID
init|=
name|getApplVerID
argument_list|(
name|session
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|DataDictionary
name|appDataDictionary
init|=
name|provider
operator|.
name|getApplicationDataDictionary
argument_list|(
name|applVerID
argument_list|)
decl_stmt|;
name|appDataDictionary
operator|.
name|validate
argument_list|(
name|message
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
literal|"Outgoing message failed validation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|QuickfixjMessageListener
name|listener
range|:
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|onMessage
argument_list|(
name|sessionID
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
literal|"Error while dispatching message"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SessionNotFound
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getApplVerID (Session session, Message message)
specifier|private
name|ApplVerID
name|getApplVerID
parameter_list|(
name|Session
name|session
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|String
name|beginString
init|=
name|session
operator|.
name|getSessionID
argument_list|()
operator|.
name|getBeginString
argument_list|()
decl_stmt|;
if|if
condition|(
name|FixVersions
operator|.
name|BEGINSTRING_FIXT11
operator|.
name|equals
argument_list|(
name|beginString
argument_list|)
condition|)
block|{
return|return
operator|new
name|ApplVerID
argument_list|(
name|ApplVerID
operator|.
name|FIX50
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|MessageUtils
operator|.
name|toApplVerID
argument_list|(
name|beginString
argument_list|)
return|;
block|}
block|}
DECL|method|onMessage (quickfix.fix41.NewOrderSingle order, SessionID sessionID)
specifier|private
name|void
name|onMessage
parameter_list|(
name|quickfix
operator|.
name|fix41
operator|.
name|NewOrderSingle
name|order
parameter_list|,
name|SessionID
name|sessionID
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|UnsupportedMessageType
throws|,
name|IncorrectTagValue
block|{
try|try
block|{
name|validateOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|OrderQty
name|orderQty
init|=
name|order
operator|.
name|getOrderQty
argument_list|()
decl_stmt|;
name|Price
name|price
init|=
name|getPrice
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|quickfix
operator|.
name|fix41
operator|.
name|ExecutionReport
name|accept
init|=
operator|new
name|quickfix
operator|.
name|fix41
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecTransType
argument_list|(
name|ExecTransType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|NEW
argument_list|)
argument_list|,
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
name|orderQty
argument_list|,
operator|new
name|LastShares
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|LastPx
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|LeavesQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOrderExecutable
argument_list|(
name|order
argument_list|,
name|price
argument_list|)
condition|)
block|{
name|quickfix
operator|.
name|fix41
operator|.
name|ExecutionReport
name|executionReport
init|=
operator|new
name|quickfix
operator|.
name|fix41
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecTransType
argument_list|(
name|ExecTransType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|FILL
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|FILLED
argument_list|)
argument_list|,
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
name|orderQty
argument_list|,
operator|new
name|LastShares
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|LastPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|LeavesQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|executionReport
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMessage (quickfix.fix42.NewOrderSingle order, SessionID sessionID)
specifier|private
name|void
name|onMessage
parameter_list|(
name|quickfix
operator|.
name|fix42
operator|.
name|NewOrderSingle
name|order
parameter_list|,
name|SessionID
name|sessionID
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|UnsupportedMessageType
throws|,
name|IncorrectTagValue
block|{
try|try
block|{
name|validateOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|OrderQty
name|orderQty
init|=
name|order
operator|.
name|getOrderQty
argument_list|()
decl_stmt|;
name|Price
name|price
init|=
name|getPrice
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|quickfix
operator|.
name|fix42
operator|.
name|ExecutionReport
name|accept
init|=
operator|new
name|quickfix
operator|.
name|fix42
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecTransType
argument_list|(
name|ExecTransType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|NEW
argument_list|)
argument_list|,
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOrderExecutable
argument_list|(
name|order
argument_list|,
name|price
argument_list|)
condition|)
block|{
name|quickfix
operator|.
name|fix42
operator|.
name|ExecutionReport
name|executionReport
init|=
operator|new
name|quickfix
operator|.
name|fix42
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecTransType
argument_list|(
name|ExecTransType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|FILL
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|FILLED
argument_list|)
argument_list|,
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|orderQty
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastShares
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|executionReport
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateOrder (Message order)
specifier|private
name|void
name|validateOrder
parameter_list|(
name|Message
name|order
parameter_list|)
throws|throws
name|IncorrectTagValue
throws|,
name|FieldNotFound
block|{
name|OrdType
name|ordType
init|=
operator|new
name|OrdType
argument_list|(
name|order
operator|.
name|getChar
argument_list|(
name|OrdType
operator|.
name|FIELD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|validOrderTypes
operator|.
name|contains
argument_list|(
name|Character
operator|.
name|toString
argument_list|(
name|ordType
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Order type not in ValidOrderTypes setting"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IncorrectTagValue
argument_list|(
name|ordType
operator|.
name|getField
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|ordType
operator|.
name|getValue
argument_list|()
operator|==
name|OrdType
operator|.
name|MARKET
operator|&&
name|marketQuoteProvider
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"DefaultMarketPrice setting not specified for market order"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IncorrectTagValue
argument_list|(
name|ordType
operator|.
name|getField
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|onMessage (quickfix.fix43.NewOrderSingle order, SessionID sessionID)
specifier|private
name|void
name|onMessage
parameter_list|(
name|quickfix
operator|.
name|fix43
operator|.
name|NewOrderSingle
name|order
parameter_list|,
name|SessionID
name|sessionID
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|UnsupportedMessageType
throws|,
name|IncorrectTagValue
block|{
try|try
block|{
name|validateOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|OrderQty
name|orderQty
init|=
name|order
operator|.
name|getOrderQty
argument_list|()
decl_stmt|;
name|Price
name|price
init|=
name|getPrice
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|quickfix
operator|.
name|fix43
operator|.
name|ExecutionReport
name|accept
init|=
operator|new
name|quickfix
operator|.
name|fix43
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|NEW
argument_list|)
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
name|order
operator|.
name|getOrderQty
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOrderExecutable
argument_list|(
name|order
argument_list|,
name|price
argument_list|)
condition|)
block|{
name|quickfix
operator|.
name|fix43
operator|.
name|ExecutionReport
name|executionReport
init|=
operator|new
name|quickfix
operator|.
name|fix43
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|FILL
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|FILLED
argument_list|)
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|orderQty
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|executionReport
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMessage (quickfix.fix44.NewOrderSingle order, SessionID sessionID)
specifier|private
name|void
name|onMessage
parameter_list|(
name|quickfix
operator|.
name|fix44
operator|.
name|NewOrderSingle
name|order
parameter_list|,
name|SessionID
name|sessionID
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|UnsupportedMessageType
throws|,
name|IncorrectTagValue
block|{
try|try
block|{
name|validateOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|OrderQty
name|orderQty
init|=
name|order
operator|.
name|getOrderQty
argument_list|()
decl_stmt|;
name|Price
name|price
init|=
name|getPrice
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|quickfix
operator|.
name|fix44
operator|.
name|ExecutionReport
name|accept
init|=
operator|new
name|quickfix
operator|.
name|fix44
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|NEW
argument_list|)
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
name|order
operator|.
name|getOrderQty
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOrderExecutable
argument_list|(
name|order
argument_list|,
name|price
argument_list|)
condition|)
block|{
name|quickfix
operator|.
name|fix44
operator|.
name|ExecutionReport
name|executionReport
init|=
operator|new
name|quickfix
operator|.
name|fix44
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|FILL
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|FILLED
argument_list|)
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AvgPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|orderQty
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|executionReport
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onMessage (quickfix.fix50.NewOrderSingle order, SessionID sessionID)
specifier|private
name|void
name|onMessage
parameter_list|(
name|quickfix
operator|.
name|fix50
operator|.
name|NewOrderSingle
name|order
parameter_list|,
name|SessionID
name|sessionID
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|UnsupportedMessageType
throws|,
name|IncorrectTagValue
block|{
try|try
block|{
name|validateOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|OrderQty
name|orderQty
init|=
name|order
operator|.
name|getOrderQty
argument_list|()
decl_stmt|;
name|Price
name|price
init|=
name|getPrice
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|quickfix
operator|.
name|fix50
operator|.
name|ExecutionReport
name|accept
init|=
operator|new
name|quickfix
operator|.
name|fix50
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|NEW
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|NEW
argument_list|)
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
name|order
operator|.
name|getOrderQty
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|accept
operator|.
name|set
argument_list|(
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOrderExecutable
argument_list|(
name|order
argument_list|,
name|price
argument_list|)
condition|)
block|{
name|quickfix
operator|.
name|fix50
operator|.
name|ExecutionReport
name|executionReport
init|=
operator|new
name|quickfix
operator|.
name|fix50
operator|.
name|ExecutionReport
argument_list|(
name|genOrderID
argument_list|()
argument_list|,
name|genExecID
argument_list|()
argument_list|,
operator|new
name|ExecType
argument_list|(
name|ExecType
operator|.
name|FILL
argument_list|)
argument_list|,
operator|new
name|OrdStatus
argument_list|(
name|OrdStatus
operator|.
name|FILLED
argument_list|)
argument_list|,
name|order
operator|.
name|getSide
argument_list|()
argument_list|,
operator|new
name|LeavesQty
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|CumQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getClOrdID
argument_list|()
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|order
operator|.
name|getSymbol
argument_list|()
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
name|orderQty
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastQty
argument_list|(
name|orderQty
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|LastPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|executionReport
operator|.
name|set
argument_list|(
operator|new
name|AvgPx
argument_list|(
name|price
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|sessionID
argument_list|,
name|executionReport
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LogUtil
operator|.
name|logThrowable
argument_list|(
name|sessionID
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|genOrderID ()
specifier|public
name|OrderID
name|genOrderID
parameter_list|()
block|{
return|return
operator|new
name|OrderID
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|++
name|orderID
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|genExecID ()
specifier|public
name|ExecID
name|genExecID
parameter_list|()
block|{
return|return
operator|new
name|ExecID
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|++
name|execID
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|class|DefaultMarketQuoteProvider
specifier|private
specifier|static
class|class
name|DefaultMarketQuoteProvider
implements|implements
name|MarketQuoteProvider
block|{
DECL|field|defaultMarketPrice
specifier|private
name|double
name|defaultMarketPrice
decl_stmt|;
DECL|method|DefaultMarketQuoteProvider (double defaultMarketPrice)
name|DefaultMarketQuoteProvider
parameter_list|(
name|double
name|defaultMarketPrice
parameter_list|)
block|{
name|this
operator|.
name|defaultMarketPrice
operator|=
name|defaultMarketPrice
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAsk (String symbol)
specifier|public
name|double
name|getAsk
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
return|return
name|defaultMarketPrice
return|;
block|}
annotation|@
name|Override
DECL|method|getBid (String symbol)
specifier|public
name|double
name|getBid
parameter_list|(
name|String
name|symbol
parameter_list|)
block|{
return|return
name|defaultMarketPrice
return|;
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

