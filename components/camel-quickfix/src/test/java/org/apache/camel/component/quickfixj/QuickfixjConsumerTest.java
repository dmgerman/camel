begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfixj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|StatefulService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FixVersions
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|BeginString
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|SenderCompID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|TargetCompID
import|;
end_import

begin_class
DECL|class|QuickfixjConsumerTest
specifier|public
class|class
name|QuickfixjConsumerTest
block|{
DECL|field|mockExchange
specifier|private
name|Exchange
name|mockExchange
decl_stmt|;
DECL|field|mockProcessor
specifier|private
name|Processor
name|mockProcessor
decl_stmt|;
DECL|field|mockEndpoint
specifier|private
name|Endpoint
name|mockEndpoint
decl_stmt|;
DECL|field|inboundFixMessage
specifier|private
name|Message
name|inboundFixMessage
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|mockExchange
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|mockCamelMessage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCamelMessage
argument_list|)
expr_stmt|;
name|inboundFixMessage
operator|=
operator|new
name|Message
argument_list|()
expr_stmt|;
name|inboundFixMessage
operator|.
name|getHeader
argument_list|()
operator|.
name|setString
argument_list|(
name|BeginString
operator|.
name|FIELD
argument_list|,
name|FixVersions
operator|.
name|BEGINSTRING_FIX44
argument_list|)
expr_stmt|;
name|inboundFixMessage
operator|.
name|getHeader
argument_list|()
operator|.
name|setString
argument_list|(
name|SenderCompID
operator|.
name|FIELD
argument_list|,
literal|"SENDER"
argument_list|)
expr_stmt|;
name|inboundFixMessage
operator|.
name|getHeader
argument_list|()
operator|.
name|setString
argument_list|(
name|TargetCompID
operator|.
name|FIELD
argument_list|,
literal|"TARGET"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockCamelMessage
operator|.
name|getBody
argument_list|(
name|quickfix
operator|.
name|Message
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|inboundFixMessage
argument_list|)
expr_stmt|;
name|mockProcessor
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Processor
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockEndpoint
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockEndpoint
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processExchangeOnlyWhenStarted ()
specifier|public
name|void
name|processExchangeOnlyWhenStarted
parameter_list|()
throws|throws
name|Exception
block|{
name|QuickfixjConsumer
name|consumer
init|=
operator|new
name|QuickfixjConsumer
argument_list|(
name|mockEndpoint
argument_list|,
name|mockProcessor
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
literal|"Consumer should not be automatically started"
argument_list|,
operator|(
operator|(
name|StatefulService
operator|)
name|consumer
operator|)
operator|.
name|isStarted
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|onExchange
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
comment|// No expected interaction with processor since component is not started
name|Mockito
operator|.
name|verifyZeroInteractions
argument_list|(
name|mockProcessor
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertThat
argument_list|(
operator|(
operator|(
name|StatefulService
operator|)
name|consumer
operator|)
operator|.
name|isStarted
argument_list|()
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|onExchange
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
comment|// Second message should be processed
name|Mockito
operator|.
name|verify
argument_list|(
name|mockProcessor
argument_list|)
operator|.
name|process
argument_list|(
name|Matchers
operator|.
name|isA
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setExceptionOnExchange ()
specifier|public
name|void
name|setExceptionOnExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|QuickfixjConsumer
name|consumer
init|=
operator|new
name|QuickfixjConsumer
argument_list|(
name|mockEndpoint
argument_list|,
name|mockProcessor
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|Throwable
name|exception
init|=
operator|new
name|Exception
argument_list|(
literal|"Throwable for test"
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
name|exception
argument_list|)
operator|.
name|when
argument_list|(
name|mockProcessor
argument_list|)
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
comment|// Simulate a message from the FIX engine
name|consumer
operator|.
name|onExchange
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockExchange
argument_list|)
operator|.
name|setException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|setExceptionOnInOutExchange ()
specifier|public
name|void
name|setExceptionOnInOutExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|mockCamelOutMessage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|mockCamelInMessage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|SessionID
name|mockSessionId
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SessionID
operator|.
name|class
argument_list|)
decl_stmt|;
name|QuickfixjConsumer
name|consumer
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|QuickfixjConsumer
argument_list|(
name|mockEndpoint
argument_list|,
name|mockProcessor
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|when
argument_list|(
name|consumer
argument_list|)
operator|.
name|getSession
argument_list|(
name|mockSessionId
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getPattern
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|hasOut
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getOut
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCamelOutMessage
argument_list|)
expr_stmt|;
name|Message
name|outboundFixMessage
init|=
operator|new
name|Message
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockCamelOutMessage
operator|.
name|getBody
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|outboundFixMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCamelInMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockCamelInMessage
operator|.
name|getHeader
argument_list|(
literal|"SessionID"
argument_list|,
name|SessionID
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSessionId
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Simulate a message from the FIX engine
name|consumer
operator|.
name|onExchange
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockExchange
argument_list|)
operator|.
name|setException
argument_list|(
name|Mockito
operator|.
name|isA
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processInOutExchange ()
specifier|public
name|void
name|processInOutExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|mockCamelOutMessage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|mockCamelInMessage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|SessionID
name|mockSessionId
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SessionID
operator|.
name|class
argument_list|)
decl_stmt|;
name|Session
name|mockSession
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Session
operator|.
name|class
argument_list|)
decl_stmt|;
name|QuickfixjConsumer
name|consumer
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|QuickfixjConsumer
argument_list|(
name|mockEndpoint
argument_list|,
name|mockProcessor
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockSession
argument_list|)
operator|.
name|when
argument_list|(
name|consumer
argument_list|)
operator|.
name|getSession
argument_list|(
name|mockSessionId
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|mockSession
argument_list|)
operator|.
name|send
argument_list|(
name|Mockito
operator|.
name|isA
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getPattern
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ExchangePattern
operator|.
name|InOut
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|hasOut
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getOut
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCamelOutMessage
argument_list|)
expr_stmt|;
name|Message
name|outboundFixMessage
init|=
operator|new
name|Message
argument_list|()
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockCamelOutMessage
operator|.
name|getBody
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|outboundFixMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCamelInMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockCamelInMessage
operator|.
name|getHeader
argument_list|(
literal|"SessionID"
argument_list|,
name|SessionID
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockSessionId
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|onExchange
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockExchange
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|setException
argument_list|(
name|Mockito
operator|.
name|isA
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockSession
argument_list|)
operator|.
name|send
argument_list|(
name|outboundFixMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

