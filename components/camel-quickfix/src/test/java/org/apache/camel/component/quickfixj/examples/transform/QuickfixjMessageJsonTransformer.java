begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfixj.examples.transform
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
operator|.
name|examples
operator|.
name|transform
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|ConfigError
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|DataDictionary
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldMap
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldNotFound
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionID
import|;
end_import

begin_class
DECL|class|QuickfixjMessageJsonTransformer
specifier|public
class|class
name|QuickfixjMessageJsonTransformer
block|{
DECL|method|transform (Message message)
specifier|public
name|String
name|transform
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|FieldNotFound
throws|,
name|ConfigError
block|{
name|SessionID
name|sessionID
init|=
name|MessageUtils
operator|.
name|getSessionID
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|lookupSession
argument_list|(
name|sessionID
argument_list|)
decl_stmt|;
name|DataDictionary
name|dataDictionary
init|=
name|session
operator|.
name|getDataDictionary
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataDictionary
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No Data Dictionary. Exchange must reference an existing session"
argument_list|)
throw|;
block|}
return|return
name|transform
argument_list|(
name|message
argument_list|,
name|dataDictionary
argument_list|)
return|;
block|}
DECL|method|transform (Message message, DataDictionary dataDictionary)
specifier|public
name|String
name|transform
parameter_list|(
name|Message
name|message
parameter_list|,
name|DataDictionary
name|dataDictionary
parameter_list|)
block|{
return|return
name|transform
argument_list|(
name|message
argument_list|,
literal|""
argument_list|,
name|dataDictionary
argument_list|)
return|;
block|}
DECL|method|transform (Message message, String indent, DataDictionary dd)
specifier|public
name|String
name|transform
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|indent
parameter_list|,
name|DataDictionary
name|dd
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"message\": "
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|String
name|contentIndent
init|=
name|indent
operator|+
literal|"  "
decl_stmt|;
name|transform
argument_list|(
literal|"header"
argument_list|,
name|message
operator|.
name|getHeader
argument_list|()
argument_list|,
name|sb
argument_list|,
name|contentIndent
argument_list|,
name|dd
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|transform
argument_list|(
literal|"body"
argument_list|,
name|message
argument_list|,
name|sb
argument_list|,
name|contentIndent
argument_list|,
name|dd
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|transform
argument_list|(
literal|"trailer"
argument_list|,
name|message
operator|.
name|getTrailer
argument_list|()
argument_list|,
name|sb
argument_list|,
name|contentIndent
argument_list|,
name|dd
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|transform (String name, FieldMap fieldMap, StringBuilder sb, String indent, DataDictionary dd)
specifier|private
name|void
name|transform
parameter_list|(
name|String
name|name
parameter_list|,
name|FieldMap
name|fieldMap
parameter_list|,
name|StringBuilder
name|sb
parameter_list|,
name|String
name|indent
parameter_list|,
name|DataDictionary
name|dd
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\": {\n"
argument_list|)
expr_stmt|;
name|int
name|fieldCount
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Field
argument_list|<
name|?
argument_list|>
argument_list|>
name|fieldIterator
init|=
name|fieldMap
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|fieldIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|fieldCount
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|Field
argument_list|<
name|?
argument_list|>
name|field
init|=
name|fieldIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"  \""
argument_list|)
operator|.
name|append
argument_list|(
name|dd
operator|.
name|getFieldName
argument_list|(
name|field
operator|.
name|getField
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\": "
argument_list|)
expr_stmt|;
if|if
condition|(
name|dd
operator|.
name|hasFieldValue
argument_list|(
name|field
operator|.
name|getField
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|tag
init|=
name|field
operator|.
name|getField
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[ \""
argument_list|)
operator|.
name|append
argument_list|(
name|field
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\", \""
argument_list|)
operator|.
name|append
argument_list|(
name|dd
operator|.
name|getValueName
argument_list|(
name|tag
argument_list|,
name|field
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" ]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FieldType
name|fieldType
init|=
name|dd
operator|.
name|getFieldType
argument_list|(
name|field
operator|.
name|getField
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|fieldType
operator|.
name|getJavaType
argument_list|()
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|field
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|field
operator|.
name|getObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
name|fieldCount
operator|++
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|groupKeys
init|=
name|fieldMap
operator|.
name|groupKeyIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|groupKeys
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|groupTag
init|=
name|groupKeys
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|fieldMap
operator|.
name|getGroups
argument_list|(
name|groupTag
argument_list|)
control|)
block|{
name|String
name|groupName
init|=
name|dd
operator|.
name|getFieldName
argument_list|(
name|groupTag
argument_list|)
decl_stmt|;
name|transform
argument_list|(
name|groupName
argument_list|,
name|group
argument_list|,
name|sb
argument_list|,
name|indent
operator|+
literal|"  "
argument_list|,
name|dd
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

