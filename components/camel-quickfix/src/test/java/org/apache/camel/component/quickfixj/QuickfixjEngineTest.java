begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfixj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|common
operator|.
name|TransportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Acceptor
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|ConfigError
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|DefaultMessageFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldConvertError
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FieldNotFound
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FileLogFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FileStoreFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FixVersions
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Initiator
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|JdbcLogFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|JdbcSetting
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|JdbcStoreFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|MemoryStoreFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|MessageFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|MessageStoreFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SLF4JLogFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|ScreenLogFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionNotFound
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionSettings
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SleepycatStoreFactory
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SocketAcceptor
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SocketInitiator
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|ThreadedSocketAcceptor
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|ThreadedSocketInitiator
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|MsgType
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|fix42
operator|.
name|Email
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
operator|.
name|equal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|QuickfixjEngineTest
specifier|public
class|class
name|QuickfixjEngineTest
extends|extends
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|TestSupport
block|{
DECL|field|settingsFile
specifier|private
name|File
name|settingsFile
decl_stmt|;
DECL|field|contextClassLoader
specifier|private
name|ClassLoader
name|contextClassLoader
decl_stmt|;
DECL|field|settings
specifier|private
name|SessionSettings
name|settings
decl_stmt|;
DECL|field|sessionID
specifier|private
name|SessionID
name|sessionID
decl_stmt|;
DECL|field|tempdir
specifier|private
name|File
name|tempdir
decl_stmt|;
DECL|field|quickfixjEngine
specifier|private
name|QuickfixjEngine
name|quickfixjEngine
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|settingsFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"quickfixj_test_"
argument_list|,
literal|".cfg"
argument_list|)
expr_stmt|;
name|tempdir
operator|=
name|settingsFile
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[]
block|{
name|tempdir
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
decl_stmt|;
name|contextClassLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
name|ClassLoader
name|testClassLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
argument_list|,
name|contextClassLoader
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|testClassLoader
argument_list|)
expr_stmt|;
name|sessionID
operator|=
operator|new
name|SessionID
argument_list|(
name|FixVersions
operator|.
name|BEGINSTRING_FIX44
argument_list|,
literal|"FOO"
argument_list|,
literal|"BAR"
argument_list|)
expr_stmt|;
name|settings
operator|=
operator|new
name|SessionSettings
argument_list|()
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|Acceptor
operator|.
name|SETTING_SOCKET_ACCEPT_PROTOCOL
argument_list|,
name|TransportType
operator|.
name|VM_PIPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|Initiator
operator|.
name|SETTING_SOCKET_CONNECT_PROTOCOL
argument_list|,
name|TransportType
operator|.
name|VM_PIPE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setBool
argument_list|(
name|Session
operator|.
name|SETTING_USE_DATA_DICTIONARY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setBool
argument_list|(
name|QuickfixjEngine
operator|.
name|SETTING_USE_JMX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TestSupport
operator|.
name|setSessionID
argument_list|(
name|settings
argument_list|,
name|sessionID
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
if|if
condition|(
name|quickfixjEngine
operator|!=
literal|null
condition|)
block|{
name|quickfixjEngine
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|missingSettingsResource ()
specifier|public
name|void
name|missingSettingsResource
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
literal|"bogus.cfg"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultInitiator ()
specifier|public
name|void
name|defaultInitiator
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|SocketInitiator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertDefaultConfiguration
argument_list|(
name|quickfixjEngine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|threadPerSessionInitiator ()
specifier|public
name|void
name|threadPerSessionInitiator
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|QuickfixjEngine
operator|.
name|SETTING_THREAD_MODEL
argument_list|,
name|QuickfixjEngine
operator|.
name|ThreadModel
operator|.
name|ThreadPerSession
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ThreadedSocketInitiator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertDefaultConfiguration
argument_list|(
name|quickfixjEngine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|defaultAcceptor ()
specifier|public
name|void
name|defaultAcceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|ACCEPTOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setLong
argument_list|(
name|sessionID
argument_list|,
name|Acceptor
operator|.
name|SETTING_SOCKET_ACCEPT_PORT
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|SocketAcceptor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultConfiguration
argument_list|(
name|quickfixjEngine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|threadPerSessionAcceptor ()
specifier|public
name|void
name|threadPerSessionAcceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|QuickfixjEngine
operator|.
name|SETTING_THREAD_MODEL
argument_list|,
name|QuickfixjEngine
operator|.
name|ThreadModel
operator|.
name|ThreadPerSession
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|ACCEPTOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setLong
argument_list|(
name|sessionID
argument_list|,
name|Acceptor
operator|.
name|SETTING_SOCKET_ACCEPT_PORT
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ThreadedSocketAcceptor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertDefaultConfiguration
argument_list|(
name|quickfixjEngine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|minimalInitiatorAndAcceptor ()
specifier|public
name|void
name|minimalInitiatorAndAcceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|ACCEPTOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setLong
argument_list|(
name|sessionID
argument_list|,
name|Acceptor
operator|.
name|SETTING_SOCKET_ACCEPT_PORT
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|SessionID
name|initiatorSessionID
init|=
operator|new
name|SessionID
argument_list|(
name|FixVersions
operator|.
name|BEGINSTRING_FIX44
argument_list|,
literal|"FARGLE"
argument_list|,
literal|"BARGLE"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|initiatorSessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|TestSupport
operator|.
name|setSessionID
argument_list|(
name|settings
argument_list|,
name|initiatorSessionID
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertDefaultConfiguration
argument_list|(
name|quickfixjEngine
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inferFileStore ()
specifier|public
name|void
name|inferFileStore
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|FileStoreFactory
operator|.
name|SETTING_FILE_STORE_PATH
argument_list|,
name|tempdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getUri
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"quickfix:test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FileStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ScreenLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// NOTE This is a little strange. If the JDBC driver is set and no log settings are found,
comment|// then we use JDBC for both the message store and the log.
annotation|@
name|Test
DECL|method|inferJdbcStoreAndLog ()
specifier|public
name|void
name|inferJdbcStoreAndLog
parameter_list|()
throws|throws
name|Exception
block|{
comment|// If there is a setting of the LOG_EVENT_TABLE, we should create a jdbcLogFactory for it
name|settings
operator|.
name|setString
argument_list|(
name|JdbcSetting
operator|.
name|SETTING_JDBC_DRIVER
argument_list|,
literal|"driver"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|JdbcSetting
operator|.
name|SETTING_LOG_EVENT_TABLE
argument_list|,
literal|"table"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|JdbcStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|JdbcLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inferJdbcStoreViaJNDI ()
specifier|public
name|void
name|inferJdbcStoreViaJNDI
parameter_list|()
throws|throws
name|Exception
block|{
comment|// If there is a setting of the LOG_EVENT_TABLE, we should create a jdbcLogFactory for it
name|settings
operator|.
name|setString
argument_list|(
name|JdbcSetting
operator|.
name|SETTING_JDBC_DS_NAME
argument_list|,
literal|"ds_name"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|JdbcSetting
operator|.
name|SETTING_LOG_EVENT_TABLE
argument_list|,
literal|"table"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|JdbcStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|JdbcLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ambiguousMessageStore ()
specifier|public
name|void
name|ambiguousMessageStore
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|FileStoreFactory
operator|.
name|SETTING_FILE_STORE_PATH
argument_list|,
name|tempdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|JdbcSetting
operator|.
name|SETTING_JDBC_DRIVER
argument_list|,
literal|"driver"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|doAmbiguityTest
argument_list|(
literal|"Ambiguous message store"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inferJdbcStoreWithInferredLog ()
specifier|public
name|void
name|inferJdbcStoreWithInferredLog
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|JdbcSetting
operator|.
name|SETTING_JDBC_DRIVER
argument_list|,
literal|"driver"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setBool
argument_list|(
name|ScreenLogFactory
operator|.
name|SETTING_LOG_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|JdbcStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ScreenLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inferSleepycatStore ()
specifier|public
name|void
name|inferSleepycatStore
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|SleepycatStoreFactory
operator|.
name|SETTING_SLEEPYCAT_DATABASE_DIR
argument_list|,
name|tempdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|SleepycatStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ScreenLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inferFileLog ()
specifier|public
name|void
name|inferFileLog
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|FileLogFactory
operator|.
name|SETTING_FILE_LOG_PATH
argument_list|,
name|tempdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MemoryStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|FileLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|inferSlf4jLog ()
specifier|public
name|void
name|inferSlf4jLog
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|SLF4JLogFactory
operator|.
name|SETTING_EVENT_CATEGORY
argument_list|,
literal|"Events"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getInitiator
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getAcceptor
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MemoryStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|SLF4JLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ambiguousLog ()
specifier|public
name|void
name|ambiguousLog
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|FileLogFactory
operator|.
name|SETTING_FILE_LOG_PATH
argument_list|,
name|tempdir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setBool
argument_list|(
name|ScreenLogFactory
operator|.
name|SETTING_LOG_EVENTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|doAmbiguityTest
argument_list|(
literal|"Ambiguous log"
argument_list|)
expr_stmt|;
block|}
DECL|method|doAmbiguityTest (String exceptionText)
specifier|private
name|void
name|doAmbiguityTest
parameter_list|(
name|String
name|exceptionText
parameter_list|)
throws|throws
name|FieldConvertError
throws|,
name|IOException
throws|,
name|JMException
block|{
try|try
block|{
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception, but none raised"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigError
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exceptionText
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|useExplicitComponentImplementations ()
specifier|public
name|void
name|useExplicitComponentImplementations
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setString
argument_list|(
name|SLF4JLogFactory
operator|.
name|SETTING_EVENT_CATEGORY
argument_list|,
literal|"Events"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|MessageStoreFactory
name|messageStoreFactory
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MessageStoreFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|LogFactory
name|logFactory
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|LogFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|MessageFactory
name|messageFactory
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MessageFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|,
name|messageStoreFactory
argument_list|,
name|logFactory
argument_list|,
name|messageFactory
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|is
argument_list|(
name|messageStoreFactory
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|is
argument_list|(
name|logFactory
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|is
argument_list|(
name|messageFactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|enableJmxForInitiator ()
specifier|public
name|void
name|enableJmxForInitiator
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setBool
argument_list|(
name|QuickfixjEngine
operator|.
name|SETTING_USE_JMX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|INITIATOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setLong
argument_list|(
name|sessionID
argument_list|,
name|Initiator
operator|.
name|SETTING_SOCKET_CONNECT_PORT
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|.
name|start
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbeanServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|n
init|=
name|mbeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.quickfixj:type=Connector,role=Initiator,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"QFJ mbean not registered"
argument_list|,
name|n
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|enableJmxForAcceptor ()
specifier|public
name|void
name|enableJmxForAcceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|settings
operator|.
name|setBool
argument_list|(
name|QuickfixjEngine
operator|.
name|SETTING_USE_JMX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setString
argument_list|(
name|sessionID
argument_list|,
name|SessionFactory
operator|.
name|SETTING_CONNECTION_TYPE
argument_list|,
name|SessionFactory
operator|.
name|ACCEPTOR_CONNECTION_TYPE
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setLong
argument_list|(
name|sessionID
argument_list|,
name|Acceptor
operator|.
name|SETTING_SOCKET_ACCEPT_PORT
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|writeSettings
argument_list|()
expr_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
name|settingsFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|.
name|start
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbeanServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|n
init|=
name|mbeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.quickfixj:type=Connector,role=Acceptor,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"QFJ mbean not registered"
argument_list|,
name|n
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|sessionEvents ()
specifier|public
name|void
name|sessionEvents
parameter_list|()
throws|throws
name|Exception
block|{
name|SessionID
name|acceptorSessionID
init|=
operator|new
name|SessionID
argument_list|(
name|FixVersions
operator|.
name|BEGINSTRING_FIX42
argument_list|,
literal|"MARKET"
argument_list|,
literal|"TRADER"
argument_list|)
decl_stmt|;
name|SessionID
name|initiatorSessionID
init|=
operator|new
name|SessionID
argument_list|(
name|FixVersions
operator|.
name|BEGINSTRING_FIX42
argument_list|,
literal|"TRADER"
argument_list|,
literal|"MARKET"
argument_list|)
decl_stmt|;
name|quickfixjEngine
operator|=
operator|new
name|QuickfixjEngine
argument_list|(
literal|"quickfix:test"
argument_list|,
literal|"examples/inprocess.cfg"
argument_list|)
expr_stmt|;
name|doLogonEventsTest
argument_list|(
name|acceptorSessionID
argument_list|,
name|initiatorSessionID
argument_list|,
name|quickfixjEngine
argument_list|)
expr_stmt|;
name|doApplicationMessageEventsTest
argument_list|(
name|acceptorSessionID
argument_list|,
name|initiatorSessionID
argument_list|,
name|quickfixjEngine
argument_list|)
expr_stmt|;
name|doLogoffEventsTest
argument_list|(
name|acceptorSessionID
argument_list|,
name|initiatorSessionID
argument_list|,
name|quickfixjEngine
argument_list|)
expr_stmt|;
block|}
DECL|method|doLogonEventsTest (SessionID acceptorSessionID, SessionID initiatorSessionID, QuickfixjEngine quickfixjEngine)
specifier|private
name|void
name|doLogonEventsTest
parameter_list|(
name|SessionID
name|acceptorSessionID
parameter_list|,
name|SessionID
name|initiatorSessionID
parameter_list|,
name|QuickfixjEngine
name|quickfixjEngine
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|EventRecord
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|EventRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|logonLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QuickfixjEventListener
name|logonListener
init|=
operator|new
name|QuickfixjEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onEvent
parameter_list|(
name|QuickfixjEventCategory
name|eventCategory
parameter_list|,
name|SessionID
name|sessionID
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|events
operator|.
name|add
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|eventCategory
argument_list|,
name|sessionID
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventCategory
operator|==
name|QuickfixjEventCategory
operator|.
name|SessionLogon
condition|)
block|{
name|logonLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|quickfixjEngine
operator|.
name|addEventListener
argument_list|(
name|logonListener
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Logons not completed"
argument_list|,
name|logonLatch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|.
name|removeEventListener
argument_list|(
name|logonListener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
comment|// The session events will arrive out of order as the event callbacks happen in the context of different threads so that the asserts
comment|// below must cater for that, that's do not assert on the order of the arrived events but just do assert on their existence. for this
comment|// to work we have've defined a relaxed comparison about the messages being sent, see the EventRecord.equals() method
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|SessionCreated
argument_list|,
name|acceptorSessionID
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|SessionCreated
argument_list|,
name|initiatorSessionID
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AdminMessageSent
argument_list|,
name|initiatorSessionID
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AdminMessageReceived
argument_list|,
name|acceptorSessionID
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AdminMessageSent
argument_list|,
name|acceptorSessionID
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AdminMessageReceived
argument_list|,
name|initiatorSessionID
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|SessionLogon
argument_list|,
name|initiatorSessionID
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|SessionLogon
argument_list|,
name|acceptorSessionID
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doApplicationMessageEventsTest (SessionID acceptorSessionID, SessionID initiatorSessionID, QuickfixjEngine quickfixjEngine)
specifier|private
name|void
name|doApplicationMessageEventsTest
parameter_list|(
name|SessionID
name|acceptorSessionID
parameter_list|,
name|SessionID
name|initiatorSessionID
parameter_list|,
name|QuickfixjEngine
name|quickfixjEngine
parameter_list|)
throws|throws
name|SessionNotFound
throws|,
name|InterruptedException
throws|,
name|FieldNotFound
block|{
specifier|final
name|List
argument_list|<
name|EventRecord
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|EventRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|messageLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QuickfixjEventListener
name|messageListener
init|=
operator|new
name|QuickfixjEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onEvent
parameter_list|(
name|QuickfixjEventCategory
name|eventCategory
parameter_list|,
name|SessionID
name|sessionID
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|EventRecord
name|event
init|=
operator|new
name|EventRecord
argument_list|(
name|eventCategory
argument_list|,
name|sessionID
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventCategory
operator|==
name|QuickfixjEventCategory
operator|.
name|AppMessageReceived
condition|)
block|{
name|messageLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|quickfixjEngine
operator|.
name|addEventListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
name|Email
name|email
init|=
name|TestSupport
operator|.
name|createEmailMessage
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|Session
operator|.
name|sendToTarget
argument_list|(
name|email
argument_list|,
name|initiatorSessionID
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Application message not received"
argument_list|,
name|messageLatch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|.
name|removeEventListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|EventRecord
name|sendEvent
init|=
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AppMessageSent
argument_list|,
name|initiatorSessionID
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
name|sendEvent
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|sendEventIndex
init|=
name|events
operator|.
name|indexOf
argument_list|(
name|sendEvent
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
name|sendEventIndex
argument_list|)
operator|.
name|message
operator|.
name|getHeader
argument_list|()
operator|.
name|getString
argument_list|(
name|MsgType
operator|.
name|FIELD
argument_list|)
argument_list|,
name|is
argument_list|(
name|MsgType
operator|.
name|EMAIL
argument_list|)
argument_list|)
expr_stmt|;
name|EventRecord
name|receiveEvent
init|=
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|AppMessageReceived
argument_list|,
name|acceptorSessionID
argument_list|,
operator|new
name|Message
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
name|receiveEvent
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|receiveEventIndex
init|=
name|events
operator|.
name|indexOf
argument_list|(
name|receiveEvent
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|get
argument_list|(
name|receiveEventIndex
argument_list|)
operator|.
name|message
operator|.
name|getHeader
argument_list|()
operator|.
name|getString
argument_list|(
name|MsgType
operator|.
name|FIELD
argument_list|)
argument_list|,
name|is
argument_list|(
name|MsgType
operator|.
name|EMAIL
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doLogoffEventsTest (SessionID acceptorSessionID, SessionID initiatorSessionID, QuickfixjEngine quickfixjEngine)
specifier|private
name|void
name|doLogoffEventsTest
parameter_list|(
name|SessionID
name|acceptorSessionID
parameter_list|,
name|SessionID
name|initiatorSessionID
parameter_list|,
name|QuickfixjEngine
name|quickfixjEngine
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|EventRecord
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|EventRecord
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|logoffLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QuickfixjEventListener
name|logoffListener
init|=
operator|new
name|QuickfixjEventListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onEvent
parameter_list|(
name|QuickfixjEventCategory
name|eventCategory
parameter_list|,
name|SessionID
name|sessionID
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|EventRecord
name|event
init|=
operator|new
name|EventRecord
argument_list|(
name|eventCategory
argument_list|,
name|sessionID
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventCategory
operator|==
name|QuickfixjEventCategory
operator|.
name|SessionLogoff
condition|)
block|{
name|logoffLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|quickfixjEngine
operator|.
name|addEventListener
argument_list|(
name|logoffListener
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Logoffs not received"
argument_list|,
name|logoffLatch
operator|.
name|await
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|.
name|removeEventListener
argument_list|(
name|logoffListener
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|events
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|SessionLogoff
argument_list|,
name|acceptorSessionID
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|events
operator|.
name|contains
argument_list|(
operator|new
name|EventRecord
argument_list|(
name|QuickfixjEventCategory
operator|.
name|SessionLogoff
argument_list|,
name|initiatorSessionID
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|EventRecord
specifier|private
specifier|static
class|class
name|EventRecord
block|{
DECL|field|eventCategory
specifier|final
name|QuickfixjEventCategory
name|eventCategory
decl_stmt|;
DECL|field|sessionID
specifier|final
name|SessionID
name|sessionID
decl_stmt|;
DECL|field|message
specifier|final
name|Message
name|message
decl_stmt|;
DECL|method|EventRecord (QuickfixjEventCategory eventCategory, SessionID sessionID, Message message)
specifier|public
name|EventRecord
parameter_list|(
name|QuickfixjEventCategory
name|eventCategory
parameter_list|,
name|SessionID
name|sessionID
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|eventCategory
operator|=
name|eventCategory
expr_stmt|;
name|this
operator|.
name|sessionID
operator|=
name|sessionID
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|eventCategory
operator|==
literal|null
condition|?
literal|0
else|:
name|eventCategory
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|sessionID
operator|==
literal|null
condition|?
literal|0
else|:
name|sessionID
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
name|message
operator|==
literal|null
condition|?
literal|1231
else|:
literal|1237
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|EventRecord
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|EventRecord
name|other
init|=
operator|(
name|EventRecord
operator|)
name|obj
decl_stmt|;
name|boolean
name|answer
init|=
name|equal
argument_list|(
name|eventCategory
argument_list|,
name|other
operator|.
name|eventCategory
argument_list|)
operator|&&
name|equal
argument_list|(
name|sessionID
argument_list|,
name|other
operator|.
name|sessionID
argument_list|)
decl_stmt|;
comment|// we do just require a "relaxed" comparison of the messages, that's they should both be either null or both not null.
comment|// this is required so that we can properly assert on the events being fired
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|answer
operator|&=
name|other
operator|.
name|message
operator|==
literal|null
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|&=
name|other
operator|.
name|message
operator|!=
literal|null
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"EventRecord [eventCategory="
operator|+
name|eventCategory
operator|+
literal|", sessionID="
operator|+
name|sessionID
operator|+
literal|", message="
operator|+
name|message
operator|+
literal|"]"
return|;
block|}
block|}
DECL|method|assertDefaultConfiguration (QuickfixjEngine quickfixjEngine)
specifier|private
name|void
name|assertDefaultConfiguration
parameter_list|(
name|QuickfixjEngine
name|quickfixjEngine
parameter_list|)
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageStoreFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|MemoryStoreFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getLogFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|ScreenLogFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|quickfixjEngine
operator|.
name|getMessageFactory
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DefaultMessageFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|MBeanServer
name|mbeanServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|names
init|=
name|mbeanServer
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.quickfixj:*"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"QFJ Connector/Initiator mbeans should not have been registered"
argument_list|,
name|names
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSettings ()
specifier|private
name|void
name|writeSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|TestSupport
operator|.
name|writeSettings
argument_list|(
name|settings
argument_list|,
name|settingsFile
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

