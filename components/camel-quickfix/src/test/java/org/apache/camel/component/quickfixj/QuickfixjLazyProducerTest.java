begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.quickfixj
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|quickfixj
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|util
operator|.
name|ReflectionTestUtils
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|FixVersions
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|SessionID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|BeginString
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|SenderCompID
import|;
end_import

begin_import
import|import
name|quickfix
operator|.
name|field
operator|.
name|TargetCompID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
literal|"Fails on CI server sometimes"
argument_list|)
DECL|class|QuickfixjLazyProducerTest
specifier|public
class|class
name|QuickfixjLazyProducerTest
block|{
DECL|field|mockExchange
specifier|private
name|Exchange
name|mockExchange
decl_stmt|;
DECL|field|endpoint
specifier|private
name|QuickfixjEndpoint
name|endpoint
decl_stmt|;
DECL|field|mockCamelMessage
specifier|private
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
name|mockCamelMessage
decl_stmt|;
DECL|field|producer
specifier|private
name|QuickfixjProducer
name|producer
decl_stmt|;
DECL|field|sessionID
specifier|private
name|SessionID
name|sessionID
decl_stmt|;
DECL|field|inboundFixMessage
specifier|private
name|Message
name|inboundFixMessage
decl_stmt|;
DECL|field|quickfixjEngine
specifier|private
name|QuickfixjEngine
name|quickfixjEngine
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|mockExchange
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
expr_stmt|;
name|mockCamelMessage
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getIn
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockCamelMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockExchange
operator|.
name|getPattern
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
expr_stmt|;
name|quickfixjEngine
operator|=
name|TestSupport
operator|.
name|createEngine
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|endpoint
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|QuickfixjEndpoint
argument_list|(
name|quickfixjEngine
argument_list|,
literal|""
argument_list|,
operator|new
name|QuickfixjComponent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inboundFixMessage
operator|=
operator|new
name|Message
argument_list|()
expr_stmt|;
name|inboundFixMessage
operator|.
name|getHeader
argument_list|()
operator|.
name|setString
argument_list|(
name|BeginString
operator|.
name|FIELD
argument_list|,
name|FixVersions
operator|.
name|BEGINSTRING_FIX44
argument_list|)
expr_stmt|;
name|inboundFixMessage
operator|.
name|getHeader
argument_list|()
operator|.
name|setString
argument_list|(
name|SenderCompID
operator|.
name|FIELD
argument_list|,
literal|"SENDER"
argument_list|)
expr_stmt|;
name|inboundFixMessage
operator|.
name|getHeader
argument_list|()
operator|.
name|setString
argument_list|(
name|TargetCompID
operator|.
name|FIELD
argument_list|,
literal|"TARGET"
argument_list|)
expr_stmt|;
name|sessionID
operator|=
name|MessageUtils
operator|.
name|getSessionID
argument_list|(
name|inboundFixMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockCamelMessage
operator|.
name|getBody
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|inboundFixMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|endpoint
operator|.
name|getSessionID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sessionID
argument_list|)
expr_stmt|;
name|producer
operator|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|QuickfixjProducer
argument_list|(
name|endpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|processWithLazyEngine ()
specifier|public
name|void
name|processWithLazyEngine
parameter_list|()
throws|throws
name|Exception
block|{
name|QuickfixjEngine
name|engine
init|=
operator|(
name|QuickfixjEngine
operator|)
name|ReflectionTestUtils
operator|.
name|getField
argument_list|(
name|endpoint
argument_list|,
literal|"engine"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|isInitialized
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|isStarted
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//        Session mockSession = Mockito.spy(TestSupport.createSession(sessionID));
comment|//        Mockito.doReturn(mockSession).when(producer).getSession(MessageUtils.getSessionID(inboundFixMessage));
comment|//        Mockito.doReturn(true).when(mockSession).send(Matchers.isA(Message.class));
name|producer
operator|.
name|process
argument_list|(
name|mockExchange
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|isInitialized
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|engine
operator|.
name|isStarted
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|//        Mockito.verify(mockExchange, Mockito.never()).setException(Matchers.isA(IllegalStateException.class));
comment|//        Mockito.verify(mockSession).send(inboundFixMessage);
block|}
block|}
end_class

end_unit

