begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|BaseCacheTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CacheRoutesManagementTest
specifier|public
class|class
name|CacheRoutesManagementTest
extends|extends
name|BaseCacheTest
block|{
DECL|field|CACHE_URI
specifier|private
specifier|static
specifier|final
name|String
name|CACHE_URI
init|=
literal|"cache:foo?cacheManagerFactory=#cacheManagerFactory"
decl_stmt|;
DECL|field|ROUTE1_ID
specifier|private
specifier|static
specifier|final
name|String
name|ROUTE1_ID
init|=
literal|"TEST_ROUTE_1"
decl_stmt|;
DECL|field|ROUTE2_ID
specifier|private
specifier|static
specifier|final
name|String
name|ROUTE2_ID
init|=
literal|"TEST_ROUTE_2"
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
name|CACHE_URI
argument_list|)
DECL|field|cacheEndpoint
specifier|protected
name|CacheEndpoint
name|cacheEndpoint
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:route1"
argument_list|)
DECL|field|producerTemplate1
specifier|protected
name|ProducerTemplate
name|producerTemplate1
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:route2"
argument_list|)
DECL|field|producerTemplate2
specifier|protected
name|ProducerTemplate
name|producerTemplate2
decl_stmt|;
DECL|field|cmfRef
specifier|private
name|TestingCacheManagerFactory
name|cmfRef
init|=
operator|new
name|TestingCacheManagerFactory
argument_list|()
decl_stmt|;
DECL|field|templateProcessor
specifier|private
name|Processor
name|templateProcessor
init|=
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|jndi
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|jndi
operator|.
name|bind
argument_list|(
literal|"cacheManagerFactory"
argument_list|,
name|cmfRef
argument_list|)
expr_stmt|;
return|return
name|jndi
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|public
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:add1"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_ADD
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|CACHE_URI
argument_list|)
operator|.
name|setId
argument_list|(
name|ROUTE1_ID
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:add2"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_ADD
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
name|CACHE_URI
argument_list|)
operator|.
name|setId
argument_list|(
name|ROUTE2_ID
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testConfig ()
specifier|public
name|void
name|testConfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|//do some routes
name|producerTemplate1
operator|.
name|send
argument_list|(
name|templateProcessor
argument_list|)
expr_stmt|;
name|producerTemplate2
operator|.
name|send
argument_list|(
name|templateProcessor
argument_list|)
expr_stmt|;
comment|// Now do some routes to let endpoints be initialized
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:add1"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:add2"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
comment|//Now should not be null
name|CacheManager
name|cacheManager
init|=
name|cmfRef
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"CacheManager initialized"
argument_list|,
name|cacheManager
argument_list|)
expr_stmt|;
name|Cache
name|cache
init|=
name|cmfRef
operator|.
name|getCacheManager
argument_list|()
operator|.
name|getCache
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
comment|// Is cache alive
name|assertEquals
argument_list|(
literal|"Is cache still alive"
argument_list|,
name|Status
operator|.
name|STATUS_ALIVE
argument_list|,
name|cache
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|stopRoute
argument_list|(
name|ROUTE1_ID
argument_list|)
expr_stmt|;
comment|// Is cache still alive?
name|assertEquals
argument_list|(
literal|"Is cache still alive"
argument_list|,
name|Status
operator|.
name|STATUS_ALIVE
argument_list|,
name|cache
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Was the cache shutdowned with context?
name|assertEquals
argument_list|(
literal|"Is cache still alive"
argument_list|,
name|Status
operator|.
name|STATUS_SHUTDOWN
argument_list|,
name|cache
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestingCacheManagerFactory
specifier|public
class|class
name|TestingCacheManagerFactory
extends|extends
name|CacheManagerFactory
block|{
comment|//Only for testing purpose, normally not needed
DECL|field|cacheManager
specifier|private
name|CacheManager
name|cacheManager
decl_stmt|;
annotation|@
name|Override
DECL|method|createCacheManagerInstance ()
specifier|protected
specifier|synchronized
name|CacheManager
name|createCacheManagerInstance
parameter_list|()
block|{
comment|//Singleton- only for testing purpose, normally not needed
if|if
condition|(
name|cacheManager
operator|==
literal|null
condition|)
block|{
name|cacheManager
operator|=
name|CacheManager
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
return|return
name|cacheManager
return|;
block|}
DECL|method|getCacheManager ()
specifier|public
name|CacheManager
name|getCacheManager
parameter_list|()
block|{
return|return
name|cacheManager
return|;
block|}
block|}
block|}
end_class

end_unit

