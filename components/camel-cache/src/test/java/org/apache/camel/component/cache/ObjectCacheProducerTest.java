begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ObjectCacheProducerTest
specifier|public
class|class
name|ObjectCacheProducerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:ObjectCacheProducerTest.result"
argument_list|)
DECL|field|resultEndpoint
specifier|protected
name|MockEndpoint
name|resultEndpoint
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:ObjectCacheProducerTest.cacheException"
argument_list|)
DECL|field|cacheExceptionEndpoint
specifier|protected
name|MockEndpoint
name|cacheExceptionEndpoint
decl_stmt|;
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Test storing 3 elements into object cache then retrieving them back.      * We allow cache to store maximum of 2 values to check that overflow to disk not happened (it is not      * allowed in ehcache object cache (not serializable cache)).      *      * @throws Exception      * @see net.sf.ehcache.Element for information about object cache operations in ehcache      */
annotation|@
name|Test
DECL|method|testAddingMultipleDataInCacheAndGettingBack ()
specifier|public
name|void
name|testAddingMultipleDataInCacheAndGettingBack
parameter_list|()
throws|throws
name|Exception
block|{
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:LOGGER"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:ObjectCacheProducerTest.cacheException"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:a"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_ADD
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"Ralph_Waldo_Emerson"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:aGet"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_GET
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"Ralph_Waldo_Emerson"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
name|CacheConstants
operator|.
name|CACHE_ELEMENT_WAS_FOUND
argument_list|)
operator|.
name|isNotNull
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:ObjectCacheProducerTest.result"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"direct:b"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_ADD
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"Ralph_Waldo_Emerson_2"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:bGet"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_GET
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"Ralph_Waldo_Emerson_2"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
name|CacheConstants
operator|.
name|CACHE_ELEMENT_WAS_FOUND
argument_list|)
operator|.
name|isNotNull
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:ObjectCacheProducerTest.result"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"direct:c"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_ADD
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"Ralph_Waldo_Emerson_3"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:cGet"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION
argument_list|,
name|constant
argument_list|(
name|CacheConstants
operator|.
name|CACHE_OPERATION_GET
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
name|CacheConstants
operator|.
name|CACHE_KEY
argument_list|,
name|constant
argument_list|(
literal|"Ralph_Waldo_Emerson_3"
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false&maxElementsInMemory=2"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|(
name|header
argument_list|(
name|CacheConstants
operator|.
name|CACHE_ELEMENT_WAS_FOUND
argument_list|)
operator|.
name|isNotNull
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:ObjectCacheProducerTest.result"
argument_list|)
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|setTracing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cacheExceptionEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"------------Beginning CacheProducer Add and Get Test---------------"
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Putting data into cache"
argument_list|)
expr_stmt|;
name|sendNonSerializedData
argument_list|(
literal|"direct:a"
argument_list|,
name|newPoetry
argument_list|(
literal|"Ralph Waldo Emerson"
argument_list|,
literal|"Brahma"
argument_list|)
argument_list|)
expr_stmt|;
name|sendNonSerializedData
argument_list|(
literal|"direct:b"
argument_list|,
name|newPoetry
argument_list|(
literal|"Ralph Waldo Emerson"
argument_list|,
literal|"The Rhodora"
argument_list|)
argument_list|)
expr_stmt|;
name|sendNonSerializedData
argument_list|(
literal|"direct:c"
argument_list|,
name|newPoetry
argument_list|(
literal|"Ralph Waldo Emerson"
argument_list|,
literal|"Concord Hymn"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Retrieving data from cache"
argument_list|)
expr_stmt|;
name|sendEmptyBody
argument_list|(
literal|"direct:aGet"
argument_list|)
expr_stmt|;
name|sendEmptyBody
argument_list|(
literal|"direct:bGet"
argument_list|)
expr_stmt|;
name|sendEmptyBody
argument_list|(
literal|"direct:cGet"
argument_list|)
expr_stmt|;
name|cacheExceptionEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|sendNonSerializedData (String endpoint, final PoetryNotSerializable notSerializable)
specifier|private
name|void
name|sendNonSerializedData
parameter_list|(
name|String
name|endpoint
parameter_list|,
specifier|final
name|PoetryNotSerializable
name|notSerializable
parameter_list|)
throws|throws
name|Exception
block|{
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set the property of the charset encoding
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|notSerializable
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|sendEmptyBody (String endpoint)
specifier|private
name|void
name|sendEmptyBody
parameter_list|(
name|String
name|endpoint
parameter_list|)
block|{
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|newPoetry (String poet, String poem)
specifier|private
name|PoetryNotSerializable
name|newPoetry
parameter_list|(
name|String
name|poet
parameter_list|,
name|String
name|poem
parameter_list|)
block|{
name|PoetryNotSerializable
name|poetry
init|=
operator|new
name|PoetryNotSerializable
argument_list|()
decl_stmt|;
name|poetry
operator|.
name|setPoet
argument_list|(
name|poet
argument_list|)
expr_stmt|;
name|poetry
operator|.
name|setPoem
argument_list|(
name|poem
argument_list|)
expr_stmt|;
return|return
name|poetry
return|;
block|}
block|}
end_class

end_unit

