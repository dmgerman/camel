begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|CacheConfigurationTest
specifier|public
class|class
name|CacheConfigurationTest
block|{
annotation|@
name|Test
DECL|method|doURICheck ()
specifier|public
name|void
name|doURICheck
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|CacheComponent
name|component
init|=
operator|new
name|CacheComponent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|CacheEndpoint
name|endpoint1
init|=
operator|(
name|CacheEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"cache://myname1?diskPersistent=true"
argument_list|)
decl_stmt|;
name|CacheEndpoint
name|endpoint2
init|=
operator|(
name|CacheEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"cache://myname2?diskPersistent=false"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Endpoint1 cache name is myname1"
argument_list|,
literal|"myname1"
operator|.
name|equals
argument_list|(
name|endpoint1
operator|.
name|getConfig
argument_list|()
operator|.
name|getCacheName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Endpoint2 cache name is myname2"
argument_list|,
literal|"myname2"
operator|.
name|equals
argument_list|(
name|endpoint2
operator|.
name|getConfig
argument_list|()
operator|.
name|getCacheName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Endpoint1 is true"
argument_list|,
name|endpoint1
operator|.
name|getConfig
argument_list|()
operator|.
name|isDiskPersistent
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Endpoint2 is false"
argument_list|,
operator|!
name|endpoint2
operator|.
name|getConfig
argument_list|()
operator|.
name|isDiskPersistent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

