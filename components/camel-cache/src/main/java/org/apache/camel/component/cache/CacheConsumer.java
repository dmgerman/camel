begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|Ehcache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CacheConsumer
specifier|public
class|class
name|CacheConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CacheConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cacheEventListener
specifier|private
name|CacheEventListener
name|cacheEventListener
decl_stmt|;
DECL|field|cache
specifier|private
name|Ehcache
name|cache
decl_stmt|;
DECL|method|CacheConsumer (Endpoint endpoint, Processor processor, CacheConfiguration config)
specifier|public
name|CacheConsumer
parameter_list|(
name|Endpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|CacheConfiguration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|createConsumerCacheConnection
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"initialize the cache"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// unregisty the listenser when the consumer is stopped
name|cache
operator|.
name|getCacheEventNotificationService
argument_list|()
operator|.
name|unregisterListener
argument_list|(
name|cacheEventListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|CacheEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|CacheEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
DECL|method|createConsumerCacheConnection ()
specifier|protected
name|void
name|createConsumerCacheConnection
parameter_list|()
block|{
name|cacheEventListener
operator|=
operator|new
name|CacheEventListener
argument_list|()
expr_stmt|;
name|cacheEventListener
operator|.
name|setCacheConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|cache
operator|=
name|getEndpoint
argument_list|()
operator|.
name|initializeCache
argument_list|()
expr_stmt|;
comment|// registry the CacheEventListener directly
name|cache
operator|.
name|getCacheEventNotificationService
argument_list|()
operator|.
name|registerListener
argument_list|(
name|cacheEventListener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

