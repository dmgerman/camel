begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|event
operator|.
name|CacheEventListener
import|;
end_import

begin_class
DECL|class|CacheEventListenerRegistry
specifier|public
class|class
name|CacheEventListenerRegistry
block|{
DECL|field|eventListeners
specifier|private
name|List
argument_list|<
name|CacheEventListener
argument_list|>
name|eventListeners
decl_stmt|;
DECL|method|CacheEventListenerRegistry ()
specifier|public
name|CacheEventListenerRegistry
parameter_list|()
block|{     }
DECL|method|CacheEventListenerRegistry (List<CacheEventListener> eventListeners)
specifier|public
name|CacheEventListenerRegistry
parameter_list|(
name|List
argument_list|<
name|CacheEventListener
argument_list|>
name|eventListeners
parameter_list|)
block|{
name|this
operator|.
name|eventListeners
operator|=
name|eventListeners
expr_stmt|;
block|}
DECL|method|addCacheEventListener (CacheEventListener listener)
specifier|public
name|void
name|addCacheEventListener
parameter_list|(
name|CacheEventListener
name|listener
parameter_list|)
block|{
name|getEventListeners
argument_list|()
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|getEventListeners ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|CacheEventListener
argument_list|>
name|getEventListeners
parameter_list|()
block|{
if|if
condition|(
name|eventListeners
operator|==
literal|null
condition|)
block|{
name|eventListeners
operator|=
operator|new
name|ArrayList
argument_list|<
name|CacheEventListener
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|eventListeners
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|eventListeners
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

