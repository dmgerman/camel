begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * A utility class for ehcache  */
end_comment

begin_class
DECL|class|EHCacheUtil
specifier|final
class|class
name|EHCacheUtil
block|{
DECL|field|useCreateNewMethod
specifier|private
specifier|static
name|boolean
name|useCreateNewMethod
decl_stmt|;
static|static
block|{
comment|// to support ehcache's version range given in camel-cache (e.g., ehcache 2.5.1, 2.7.2, etc),
comment|// if method newInstance is found, use the newInstance methods; otherwise use the old create methods.
comment|// no reflection used for the actual call as the code is compiled against the newer ehcache.
try|try
block|{
name|CacheManager
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"newInstance"
argument_list|,
operator|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|useCreateNewMethod
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
DECL|method|EHCacheUtil ()
specifier|private
name|EHCacheUtil
parameter_list|()
block|{
comment|//
block|}
DECL|method|createCacheManager ()
specifier|static
name|CacheManager
name|createCacheManager
parameter_list|()
throws|throws
name|CacheException
block|{
if|if
condition|(
name|useCreateNewMethod
condition|)
block|{
return|return
name|CacheManager
operator|.
name|newInstance
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|CacheManager
operator|.
name|create
argument_list|()
return|;
block|}
block|}
DECL|method|createCacheManager (String configurationFileName)
specifier|static
name|CacheManager
name|createCacheManager
parameter_list|(
name|String
name|configurationFileName
parameter_list|)
throws|throws
name|CacheException
block|{
if|if
condition|(
name|useCreateNewMethod
condition|)
block|{
return|return
name|CacheManager
operator|.
name|newInstance
argument_list|(
name|configurationFileName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CacheManager
operator|.
name|create
argument_list|(
name|configurationFileName
argument_list|)
return|;
block|}
block|}
DECL|method|createCacheManager (URL configurationFileURL)
specifier|static
name|CacheManager
name|createCacheManager
parameter_list|(
name|URL
name|configurationFileURL
parameter_list|)
throws|throws
name|CacheException
block|{
if|if
condition|(
name|useCreateNewMethod
condition|)
block|{
return|return
name|CacheManager
operator|.
name|newInstance
argument_list|(
name|configurationFileURL
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CacheManager
operator|.
name|create
argument_list|(
name|configurationFileURL
argument_list|)
return|;
block|}
block|}
DECL|method|createCacheManager (InputStream inputStream)
specifier|static
name|CacheManager
name|createCacheManager
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|CacheException
block|{
if|if
condition|(
name|useCreateNewMethod
condition|)
block|{
return|return
name|CacheManager
operator|.
name|newInstance
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CacheManager
operator|.
name|create
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
block|}
DECL|method|createCacheManager (Configuration conf)
specifier|static
name|CacheManager
name|createCacheManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|CacheException
block|{
if|if
condition|(
name|useCreateNewMethod
condition|)
block|{
return|return
name|CacheManager
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CacheManager
operator|.
name|create
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

