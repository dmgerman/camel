begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cache
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|ehcache
operator|.
name|store
operator|.
name|MemoryStoreEvictionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_class
DECL|class|CacheComponent
specifier|public
class|class
name|CacheComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|configuration
specifier|private
name|CacheConfiguration
name|configuration
decl_stmt|;
DECL|field|cacheManagerFactory
specifier|private
name|CacheManagerFactory
name|cacheManagerFactory
decl_stmt|;
DECL|field|configurationFile
specifier|private
name|String
name|configurationFile
decl_stmt|;
DECL|method|CacheComponent ()
specifier|public
name|CacheComponent
parameter_list|()
block|{
name|super
argument_list|(
name|CacheEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|CacheConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|CacheComponent (CamelContext context)
specifier|public
name|CacheComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|CacheEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|CacheConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|createEndpoint (String uri, String remaining, Map parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
comment|// must use copy as each endpoint can have different options
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|configuration
argument_list|,
literal|"configuration"
argument_list|)
expr_stmt|;
name|CacheConfiguration
name|config
init|=
name|configuration
operator|.
name|copy
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCacheName
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
name|CacheEndpoint
name|cacheEndpoint
init|=
operator|new
name|CacheEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|,
name|cacheManagerFactory
argument_list|)
decl_stmt|;
name|setProperties
argument_list|(
name|cacheEndpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|cacheEndpoint
return|;
block|}
DECL|method|getCacheManagerFactory ()
specifier|public
name|CacheManagerFactory
name|getCacheManagerFactory
parameter_list|()
block|{
return|return
name|cacheManagerFactory
return|;
block|}
comment|/**      * To use the given CacheManagerFactory for creating the CacheManager.      *<p/>      * By default the DefaultCacheManagerFactory is used.      */
DECL|method|setCacheManagerFactory (CacheManagerFactory cacheManagerFactory)
specifier|public
name|void
name|setCacheManagerFactory
parameter_list|(
name|CacheManagerFactory
name|cacheManagerFactory
parameter_list|)
block|{
name|this
operator|.
name|cacheManagerFactory
operator|=
name|cacheManagerFactory
expr_stmt|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|CacheConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|/**      * Sets the Cache configuration. Properties of the shared configuration can also be set individually.      *      * @param configuration the configuration to use by default for endpoints      */
DECL|method|setConfiguration (CacheConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|CacheConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfigurationFile ()
specifier|public
name|String
name|getConfigurationFile
parameter_list|()
block|{
return|return
name|configurationFile
return|;
block|}
comment|/**      * Sets the location of the<tt>ehcache.xml</tt> file to load from classpath or file system.      *<p/>      * By default the file is loaded from<tt>classpath:ehcache.xml</tt>      */
DECL|method|setConfigurationFile (String configurationFile)
specifier|public
name|void
name|setConfigurationFile
parameter_list|(
name|String
name|configurationFile
parameter_list|)
block|{
name|this
operator|.
name|configurationFile
operator|=
name|configurationFile
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheManagerFactory
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configurationFile
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|configurationFile
argument_list|)
decl_stmt|;
name|cacheManagerFactory
operator|=
operator|new
name|DefaultCacheManagerFactory
argument_list|(
name|is
argument_list|,
name|configurationFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cacheManagerFactory
operator|=
operator|new
name|DefaultCacheManagerFactory
argument_list|()
expr_stmt|;
block|}
block|}
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|cacheManagerFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|cacheManagerFactory
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getCacheName ()
specifier|public
name|String
name|getCacheName
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getCacheName
argument_list|()
return|;
block|}
comment|/**      * Name of the cache      * @param cacheName      */
DECL|method|setCacheName (String cacheName)
specifier|public
name|void
name|setCacheName
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
name|configuration
operator|.
name|setCacheName
argument_list|(
name|cacheName
argument_list|)
expr_stmt|;
block|}
DECL|method|getMaxElementsInMemory ()
specifier|public
name|int
name|getMaxElementsInMemory
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getMaxElementsInMemory
argument_list|()
return|;
block|}
comment|/**      * The number of elements that may be stored in the defined cache in memory.      * @param maxElementsInMemory      */
DECL|method|setMaxElementsInMemory (int maxElementsInMemory)
specifier|public
name|void
name|setMaxElementsInMemory
parameter_list|(
name|int
name|maxElementsInMemory
parameter_list|)
block|{
name|configuration
operator|.
name|setMaxElementsInMemory
argument_list|(
name|maxElementsInMemory
argument_list|)
expr_stmt|;
block|}
DECL|method|getMemoryStoreEvictionPolicy ()
specifier|public
name|MemoryStoreEvictionPolicy
name|getMemoryStoreEvictionPolicy
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getMemoryStoreEvictionPolicy
argument_list|()
return|;
block|}
comment|/**      * Which eviction strategy to use when maximum number of elements in memory is reached. The strategy defines      * which elements to be removed.      *<ul>      *<li>LRU - Lest Recently Used</li>      *<li>LFU - Lest Frequently Used</li>      *<li>FIFO - First In First Out</li>      *</ul>      * @param memoryStoreEvictionPolicy      */
DECL|method|setMemoryStoreEvictionPolicy (MemoryStoreEvictionPolicy memoryStoreEvictionPolicy)
specifier|public
name|void
name|setMemoryStoreEvictionPolicy
parameter_list|(
name|MemoryStoreEvictionPolicy
name|memoryStoreEvictionPolicy
parameter_list|)
block|{
name|configuration
operator|.
name|setMemoryStoreEvictionPolicy
argument_list|(
name|memoryStoreEvictionPolicy
argument_list|)
expr_stmt|;
block|}
DECL|method|isOverflowToDisk ()
specifier|public
name|boolean
name|isOverflowToDisk
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isOverflowToDisk
argument_list|()
return|;
block|}
comment|/**      * Specifies whether cache may overflow to disk      * @param overflowToDisk      */
DECL|method|setOverflowToDisk (boolean overflowToDisk)
specifier|public
name|void
name|setOverflowToDisk
parameter_list|(
name|boolean
name|overflowToDisk
parameter_list|)
block|{
name|configuration
operator|.
name|setOverflowToDisk
argument_list|(
name|overflowToDisk
argument_list|)
expr_stmt|;
block|}
DECL|method|isEternal ()
specifier|public
name|boolean
name|isEternal
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isEternal
argument_list|()
return|;
block|}
comment|/**      * Sets whether elements are eternal. If eternal, timeouts are ignored and the element never expires.      * @param eternal      */
DECL|method|setEternal (boolean eternal)
specifier|public
name|void
name|setEternal
parameter_list|(
name|boolean
name|eternal
parameter_list|)
block|{
name|configuration
operator|.
name|setEternal
argument_list|(
name|eternal
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeToLiveSeconds ()
specifier|public
name|long
name|getTimeToLiveSeconds
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getTimeToLiveSeconds
argument_list|()
return|;
block|}
comment|/**      * The maximum time between creation time and when an element expires. Is used only if the element is not eternal      * @param timeToLiveSeconds      */
DECL|method|setTimeToLiveSeconds (long timeToLiveSeconds)
specifier|public
name|void
name|setTimeToLiveSeconds
parameter_list|(
name|long
name|timeToLiveSeconds
parameter_list|)
block|{
name|configuration
operator|.
name|setTimeToLiveSeconds
argument_list|(
name|timeToLiveSeconds
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimeToIdleSeconds ()
specifier|public
name|long
name|getTimeToIdleSeconds
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getTimeToIdleSeconds
argument_list|()
return|;
block|}
comment|/**      * The maximum amount of time between accesses before an element expires      * @param timeToIdleSeconds      */
DECL|method|setTimeToIdleSeconds (long timeToIdleSeconds)
specifier|public
name|void
name|setTimeToIdleSeconds
parameter_list|(
name|long
name|timeToIdleSeconds
parameter_list|)
block|{
name|configuration
operator|.
name|setTimeToIdleSeconds
argument_list|(
name|timeToIdleSeconds
argument_list|)
expr_stmt|;
block|}
DECL|method|isDiskPersistent ()
specifier|public
name|boolean
name|isDiskPersistent
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isDiskPersistent
argument_list|()
return|;
block|}
comment|/**      * Whether the disk store persists between restarts of the application.      * @param diskPersistent      */
DECL|method|setDiskPersistent (boolean diskPersistent)
specifier|public
name|void
name|setDiskPersistent
parameter_list|(
name|boolean
name|diskPersistent
parameter_list|)
block|{
name|configuration
operator|.
name|setDiskPersistent
argument_list|(
name|diskPersistent
argument_list|)
expr_stmt|;
block|}
DECL|method|getDiskExpiryThreadIntervalSeconds ()
specifier|public
name|long
name|getDiskExpiryThreadIntervalSeconds
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getDiskExpiryThreadIntervalSeconds
argument_list|()
return|;
block|}
comment|/**      * The number of seconds between runs of the disk expiry thread.      * @param diskExpiryThreadIntervalSeconds      */
DECL|method|setDiskExpiryThreadIntervalSeconds (long diskExpiryThreadIntervalSeconds)
specifier|public
name|void
name|setDiskExpiryThreadIntervalSeconds
parameter_list|(
name|long
name|diskExpiryThreadIntervalSeconds
parameter_list|)
block|{
name|configuration
operator|.
name|setDiskExpiryThreadIntervalSeconds
argument_list|(
name|diskExpiryThreadIntervalSeconds
argument_list|)
expr_stmt|;
block|}
comment|/**      * To configure event listeners using the CacheEventListenerRegistry      * @param eventListenerRegistry      */
DECL|method|setEventListenerRegistry (CacheEventListenerRegistry eventListenerRegistry)
specifier|public
name|void
name|setEventListenerRegistry
parameter_list|(
name|CacheEventListenerRegistry
name|eventListenerRegistry
parameter_list|)
block|{
name|configuration
operator|.
name|setEventListenerRegistry
argument_list|(
name|eventListenerRegistry
argument_list|)
expr_stmt|;
block|}
DECL|method|getEventListenerRegistry ()
specifier|public
name|CacheEventListenerRegistry
name|getEventListenerRegistry
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getEventListenerRegistry
argument_list|()
return|;
block|}
comment|/**      * To configure cache loader using the CacheLoaderRegistry      * @param cacheLoaderRegistry      */
DECL|method|setCacheLoaderRegistry (CacheLoaderRegistry cacheLoaderRegistry)
specifier|public
name|void
name|setCacheLoaderRegistry
parameter_list|(
name|CacheLoaderRegistry
name|cacheLoaderRegistry
parameter_list|)
block|{
name|configuration
operator|.
name|setCacheLoaderRegistry
argument_list|(
name|cacheLoaderRegistry
argument_list|)
expr_stmt|;
block|}
DECL|method|getCacheLoaderRegistry ()
specifier|public
name|CacheLoaderRegistry
name|getCacheLoaderRegistry
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getCacheLoaderRegistry
argument_list|()
return|;
block|}
DECL|method|isObjectCache ()
specifier|public
name|boolean
name|isObjectCache
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|isObjectCache
argument_list|()
return|;
block|}
comment|/**      * Whether to turn on allowing to store non serializable objects in the cache.      * If this option is enabled then overflow to disk cannot be enabled as well.      * @param objectCache      */
DECL|method|setObjectCache (boolean objectCache)
specifier|public
name|void
name|setObjectCache
parameter_list|(
name|boolean
name|objectCache
parameter_list|)
block|{
name|configuration
operator|.
name|setObjectCache
argument_list|(
name|objectCache
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

