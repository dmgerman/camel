begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.rmi
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|rmi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|LocateRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|RmiIllegalArgumentExceptionTest
specifier|public
class|class
name|RmiIllegalArgumentExceptionTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|created
specifier|private
specifier|static
name|boolean
name|created
decl_stmt|;
DECL|method|getPort ()
specifier|protected
name|int
name|getPort
parameter_list|()
block|{
return|return
literal|37545
return|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|classPathHasSpaces
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|created
condition|)
block|{
name|LocateRegistry
operator|.
name|createRegistry
argument_list|(
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|created
operator|=
literal|true
expr_stmt|;
block|}
name|JndiRegistry
name|context
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|context
operator|.
name|bind
argument_list|(
literal|"echo"
argument_list|,
operator|new
name|EchoService
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Test
DECL|method|tesIllegal ()
specifier|public
name|void
name|tesIllegal
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|classPathHasSpaces
argument_list|()
condition|)
block|{
return|return;
block|}
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:echo"
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertIsInstanceOf
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
comment|// wrapped far down
name|IllegalArgumentException
name|iae
init|=
name|assertIsInstanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Illegal"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup the jmi server endpoint
name|RmiEndpoint
name|echo
init|=
operator|(
name|RmiEndpoint
operator|)
name|endpoint
argument_list|(
literal|"rmi://localhost:37545/echo"
argument_list|)
decl_stmt|;
name|echo
operator|.
name|setRemoteInterfaces
argument_list|(
name|IEcho
operator|.
name|class
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|echo
argument_list|)
operator|.
name|to
argument_list|(
literal|"bean:echo"
argument_list|)
expr_stmt|;
comment|// and our route where we call the server
name|from
argument_list|(
literal|"direct:echo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"rmi://localhost:37545/echo?method=foo"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|classPathHasSpaces ()
specifier|private
name|boolean
name|classPathHasSpaces
parameter_list|()
block|{
name|ClassLoader
name|cl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|instanceof
name|URLClassLoader
condition|)
block|{
name|URLClassLoader
name|ucl
init|=
operator|(
name|URLClassLoader
operator|)
name|cl
decl_stmt|;
name|URL
index|[]
name|urls
init|=
name|ucl
operator|.
name|getURLs
argument_list|()
decl_stmt|;
for|for
control|(
name|URL
name|url
range|:
name|urls
control|)
block|{
if|if
condition|(
name|url
operator|.
name|getPath
argument_list|()
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"======================================================================="
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|" TEST Skipped: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"   Your probably on windows.  We detected that the classpath"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"   has a space in it.  Try running maven with the following option: "
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"   -Dmaven.repo.local=C:\\DOCUME~1\\userid\\.m2\\repository"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"======================================================================="
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

