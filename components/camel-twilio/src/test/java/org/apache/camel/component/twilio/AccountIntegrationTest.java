begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twilio
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twilio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twilio
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|twilio
operator|.
name|rest
operator|.
name|api
operator|.
name|v2010
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twilio
operator|.
name|internal
operator|.
name|AccountApiMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twilio
operator|.
name|internal
operator|.
name|TwilioApiCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test class for {@link com.twilio.rest.api.v2010.Account} APIs.  */
end_comment

begin_class
DECL|class|AccountIntegrationTest
specifier|public
class|class
name|AccountIntegrationTest
extends|extends
name|AbstractTwilioTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccountIntegrationTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PATH_PREFIX
init|=
name|TwilioApiCollection
operator|.
name|getCollection
argument_list|()
operator|.
name|getApiName
argument_list|(
name|AccountApiMethod
operator|.
name|class
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testFetcher ()
specifier|public
name|void
name|testFetcher
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Account
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://FETCHER"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"fetcher result not null"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"fetcher result sid not null"
argument_list|,
name|result
operator|.
name|getSid
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetcher: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFetcherWithPathSid ()
specifier|public
name|void
name|testFetcherWithPathSid
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Account
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://FETCHER"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|(
literal|"CamelTwilioPathSid"
argument_list|,
operator|(
operator|(
name|TwilioComponent
operator|)
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|"twilio"
argument_list|)
operator|)
operator|.
name|getAccountSid
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"fetcher result not null"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"fetcher result sid not null"
argument_list|,
name|result
operator|.
name|getSid
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"fetcher: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReader ()
specifier|public
name|void
name|testReader
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ResourceSet
argument_list|<
name|Account
argument_list|>
name|result
init|=
name|requestBody
argument_list|(
literal|"direct://READER"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"reader result not null"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|forEach
argument_list|(
name|account
lambda|->
block|{
name|assertNotNull
argument_list|(
literal|"reader result account not null"
argument_list|,
name|account
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"reader: "
operator|+
name|account
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReaderWithStatusActive ()
specifier|public
name|void
name|testReaderWithStatusActive
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ResourceSet
argument_list|<
name|Account
argument_list|>
name|result
init|=
name|requestBodyAndHeaders
argument_list|(
literal|"direct://READER"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|(
literal|"CamelTwilioStatus"
argument_list|,
literal|"active"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"reader result not null"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|forEach
argument_list|(
name|account
lambda|->
block|{
name|assertEquals
argument_list|(
literal|"reader result account active"
argument_list|,
name|Account
operator|.
name|Status
operator|.
name|ACTIVE
argument_list|,
name|account
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"reader: "
operator|+
name|account
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|headers (String name, Object value)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|headers
return|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// test route for fetcher
name|from
argument_list|(
literal|"direct://FETCHER"
argument_list|)
operator|.
name|to
argument_list|(
literal|"twilio://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/fetch"
argument_list|)
expr_stmt|;
comment|// test route for reader
name|from
argument_list|(
literal|"direct://READER"
argument_list|)
operator|.
name|to
argument_list|(
literal|"twilio://"
operator|+
name|PATH_PREFIX
operator|+
literal|"/read"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

