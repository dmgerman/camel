begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.corda
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|corda
package|;
end_package

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|contracts
operator|.
name|ContractState
import|;
end_import

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|flows
operator|.
name|FlowLogic
import|;
end_import

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|node
operator|.
name|services
operator|.
name|vault
operator|.
name|PageSpecification
import|;
end_import

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|node
operator|.
name|services
operator|.
name|vault
operator|.
name|QueryCriteria
import|;
end_import

begin_import
import|import
name|net
operator|.
name|corda
operator|.
name|core
operator|.
name|node
operator|.
name|services
operator|.
name|vault
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_class
annotation|@
name|UriParams
DECL|class|CordaConfiguration
specifier|public
class|class
name|CordaConfiguration
implements|implements
name|Cloneable
block|{
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|operation
specifier|private
name|String
name|operation
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|UriParam
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|processSnapshot
specifier|private
name|boolean
name|processSnapshot
init|=
literal|true
decl_stmt|;
DECL|field|flowLociClass
specifier|private
name|Class
argument_list|<
name|FlowLogic
argument_list|<
name|?
argument_list|>
argument_list|>
name|flowLociClass
decl_stmt|;
DECL|field|arguments
specifier|private
name|Object
index|[]
name|arguments
decl_stmt|;
DECL|field|contractStateClass
specifier|private
name|Class
argument_list|<
name|ContractState
argument_list|>
name|contractStateClass
decl_stmt|;
DECL|field|queryCriteria
specifier|private
name|QueryCriteria
name|queryCriteria
decl_stmt|;
DECL|field|pageSpecification
specifier|private
name|PageSpecification
name|pageSpecification
decl_stmt|;
DECL|field|sort
specifier|private
name|Sort
name|sort
decl_stmt|;
DECL|method|getOperation ()
specifier|public
name|String
name|getOperation
parameter_list|()
block|{
return|return
name|operation
return|;
block|}
DECL|method|setOperation (String operation)
specifier|public
name|void
name|setOperation
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|isProcessSnapshot ()
specifier|public
name|boolean
name|isProcessSnapshot
parameter_list|()
block|{
return|return
name|processSnapshot
return|;
block|}
DECL|method|setProcessSnapshot (boolean processSnapshot)
specifier|public
name|void
name|setProcessSnapshot
parameter_list|(
name|boolean
name|processSnapshot
parameter_list|)
block|{
name|this
operator|.
name|processSnapshot
operator|=
name|processSnapshot
expr_stmt|;
block|}
DECL|method|getFlowLociClass ()
specifier|public
name|Class
argument_list|<
name|FlowLogic
argument_list|<
name|?
argument_list|>
argument_list|>
name|getFlowLociClass
parameter_list|()
block|{
return|return
name|flowLociClass
return|;
block|}
DECL|method|setFlowLociClass (Class<FlowLogic<?>> flowLociClass)
specifier|public
name|void
name|setFlowLociClass
parameter_list|(
name|Class
argument_list|<
name|FlowLogic
argument_list|<
name|?
argument_list|>
argument_list|>
name|flowLociClass
parameter_list|)
block|{
name|this
operator|.
name|flowLociClass
operator|=
name|flowLociClass
expr_stmt|;
block|}
DECL|method|getArguments ()
specifier|public
name|Object
index|[]
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
DECL|method|setArguments (Object[] arguments)
specifier|public
name|void
name|setArguments
parameter_list|(
name|Object
index|[]
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
block|}
DECL|method|getContractStateClass ()
specifier|public
name|Class
argument_list|<
name|ContractState
argument_list|>
name|getContractStateClass
parameter_list|()
block|{
return|return
name|contractStateClass
return|;
block|}
DECL|method|setContractStateClass (Class<ContractState> contractStateClass)
specifier|public
name|void
name|setContractStateClass
parameter_list|(
name|Class
argument_list|<
name|ContractState
argument_list|>
name|contractStateClass
parameter_list|)
block|{
name|this
operator|.
name|contractStateClass
operator|=
name|contractStateClass
expr_stmt|;
block|}
DECL|method|getQueryCriteria ()
specifier|public
name|QueryCriteria
name|getQueryCriteria
parameter_list|()
block|{
return|return
name|queryCriteria
return|;
block|}
DECL|method|setQueryCriteria (QueryCriteria queryCriteria)
specifier|public
name|void
name|setQueryCriteria
parameter_list|(
name|QueryCriteria
name|queryCriteria
parameter_list|)
block|{
name|this
operator|.
name|queryCriteria
operator|=
name|queryCriteria
expr_stmt|;
block|}
DECL|method|getPageSpecification ()
specifier|public
name|PageSpecification
name|getPageSpecification
parameter_list|()
block|{
return|return
name|pageSpecification
return|;
block|}
DECL|method|setPageSpecification (PageSpecification pageSpecification)
specifier|public
name|void
name|setPageSpecification
parameter_list|(
name|PageSpecification
name|pageSpecification
parameter_list|)
block|{
name|this
operator|.
name|pageSpecification
operator|=
name|pageSpecification
expr_stmt|;
block|}
DECL|method|getSort ()
specifier|public
name|Sort
name|getSort
parameter_list|()
block|{
return|return
name|sort
return|;
block|}
DECL|method|setSort (Sort sort)
specifier|public
name|void
name|setSort
parameter_list|(
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|CordaConfiguration
name|copy
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|CordaConfiguration
operator|)
name|super
operator|.
name|clone
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CloneNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

