begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|ComparisonTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|DateTerm
import|;
end_import

begin_comment
comment|/**  * A {@link javax.mail.search.SearchTerm} that is based on  * {@link DateTerm} that compares with current date (eg now).  *<p/>  * This allows to compare with a dynamic derived value.  */
end_comment

begin_class
DECL|class|NowSearchTerm
specifier|public
class|class
name|NowSearchTerm
extends|extends
name|ComparisonTerm
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|comparison
specifier|private
specifier|final
name|int
name|comparison
decl_stmt|;
DECL|field|sentDate
specifier|private
specifier|final
name|boolean
name|sentDate
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
comment|/**      * Constructor      *      * @param comparison the comparison operator      * @param sentDate<tt>true</tt> for using sent date,<tt>false</tt> for using received date.      * @param offset an optional offset as delta from now, can be a positive or negative value, for example      *               to say within last 24 hours.      * @see ComparisonTerm      */
DECL|method|NowSearchTerm (int comparison, boolean sentDate, long offset)
specifier|public
name|NowSearchTerm
parameter_list|(
name|int
name|comparison
parameter_list|,
name|boolean
name|sentDate
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|this
operator|.
name|comparison
operator|=
name|comparison
expr_stmt|;
name|this
operator|.
name|sentDate
operator|=
name|sentDate
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
DECL|method|getDate ()
specifier|private
name|Date
name|getDate
parameter_list|()
block|{
name|long
name|now
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
operator|new
name|Date
argument_list|(
name|now
operator|+
name|offset
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|match (Message msg)
specifier|public
name|boolean
name|match
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
name|Date
name|d
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sentDate
condition|)
block|{
name|d
operator|=
name|msg
operator|.
name|getSentDate
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
name|msg
operator|.
name|getReceivedDate
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|match
argument_list|(
name|d
argument_list|,
name|getDate
argument_list|()
argument_list|,
name|comparison
argument_list|)
return|;
block|}
DECL|method|match (Date d1, Date d2, int comparison)
specifier|private
specifier|static
name|boolean
name|match
parameter_list|(
name|Date
name|d1
parameter_list|,
name|Date
name|d2
parameter_list|,
name|int
name|comparison
parameter_list|)
block|{
switch|switch
condition|(
name|comparison
condition|)
block|{
case|case
name|LE
case|:
return|return
name|d1
operator|.
name|before
argument_list|(
name|d2
argument_list|)
operator|||
name|d1
operator|.
name|equals
argument_list|(
name|d2
argument_list|)
return|;
case|case
name|LT
case|:
return|return
name|d1
operator|.
name|before
argument_list|(
name|d2
argument_list|)
return|;
case|case
name|EQ
case|:
return|return
name|d1
operator|.
name|equals
argument_list|(
name|d2
argument_list|)
return|;
case|case
name|NE
case|:
return|return
operator|!
name|d1
operator|.
name|equals
argument_list|(
name|d2
argument_list|)
return|;
case|case
name|GT
case|:
return|return
name|d1
operator|.
name|after
argument_list|(
name|d2
argument_list|)
return|;
case|case
name|GE
case|:
return|return
name|d1
operator|.
name|after
argument_list|(
name|d2
argument_list|)
operator|||
name|d1
operator|.
name|equals
argument_list|(
name|d2
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NowSearchTerm
name|that
init|=
operator|(
name|NowSearchTerm
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|sentDate
operator|!=
name|that
operator|.
name|sentDate
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|comparison
return|;
block|}
block|}
end_class

end_unit

