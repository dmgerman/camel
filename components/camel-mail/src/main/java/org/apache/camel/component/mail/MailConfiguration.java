begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|mail
operator|.
name|javamail
operator|.
name|JavaMailSenderImpl
import|;
end_import

begin_comment
comment|/**  * Represents the configuration data for communicating over email  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|MailConfiguration
specifier|public
class|class
name|MailConfiguration
block|{
DECL|field|DEFAULT_FOLDER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FOLDER_NAME
init|=
literal|"INBOX"
decl_stmt|;
DECL|field|DEFAULT_FROM
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FROM
init|=
literal|"camel@localhost"
decl_stmt|;
DECL|field|DEFAULT_CONNECTION_TIMEOUT
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CONNECTION_TIMEOUT
init|=
literal|30000L
decl_stmt|;
DECL|field|javaMailProperties
specifier|private
name|Properties
name|javaMailProperties
decl_stmt|;
DECL|field|protocol
specifier|private
name|String
name|protocol
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
DECL|field|session
specifier|private
name|Session
name|session
decl_stmt|;
DECL|field|defaultEncoding
specifier|private
name|String
name|defaultEncoding
decl_stmt|;
DECL|field|from
specifier|private
name|String
name|from
init|=
name|DEFAULT_FROM
decl_stmt|;
DECL|field|folderName
specifier|private
name|String
name|folderName
init|=
name|DEFAULT_FOLDER_NAME
decl_stmt|;
DECL|field|deleteProcessedMessages
specifier|private
name|boolean
name|deleteProcessedMessages
init|=
literal|true
decl_stmt|;
DECL|field|ignoreUriScheme
specifier|private
name|boolean
name|ignoreUriScheme
decl_stmt|;
DECL|field|processOnlyUnseenMessages
specifier|private
name|boolean
name|processOnlyUnseenMessages
decl_stmt|;
DECL|field|recipients
specifier|private
name|Map
argument_list|<
name|Message
operator|.
name|RecipientType
argument_list|,
name|String
argument_list|>
name|recipients
init|=
operator|new
name|HashMap
argument_list|<
name|Message
operator|.
name|RecipientType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|fetchSize
specifier|private
name|int
name|fetchSize
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|debugMode
specifier|private
name|boolean
name|debugMode
decl_stmt|;
DECL|field|connectionTimeout
specifier|private
name|long
name|connectionTimeout
init|=
name|DEFAULT_CONNECTION_TIMEOUT
decl_stmt|;
DECL|method|MailConfiguration ()
specifier|public
name|MailConfiguration
parameter_list|()
block|{     }
DECL|method|configure (URI uri)
specifier|public
name|void
name|configure
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|String
name|value
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|setHost
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isIgnoreUriScheme
argument_list|()
condition|)
block|{
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|!=
literal|null
condition|)
block|{
name|setProtocol
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|userInfo
init|=
name|uri
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|userInfo
operator|!=
literal|null
condition|)
block|{
name|setUsername
argument_list|(
name|userInfo
argument_list|)
expr_stmt|;
comment|// set default destination to userInfo@host for backwards compatibility
comment|// can be overridden by URI parameters
name|String
name|address
init|=
name|userInfo
operator|+
literal|"@"
operator|+
name|host
decl_stmt|;
name|recipients
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// resolve default port if no port number was provided
name|setPort
argument_list|(
name|MailUtils
operator|.
name|getDefaultPortForProtocol
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createJavaMailSender ()
specifier|protected
name|JavaMailSenderImpl
name|createJavaMailSender
parameter_list|()
block|{
name|JavaMailSenderImpl
name|answer
init|=
operator|new
name|JavaMailSenderImpl
argument_list|()
decl_stmt|;
comment|// sets the debug mode of the underlying mail framework
name|answer
operator|.
name|getSession
argument_list|()
operator|.
name|setDebug
argument_list|(
name|debugMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaMailProperties
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setJavaMailProperties
argument_list|(
name|javaMailProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set default properties if none provided
name|answer
operator|.
name|setJavaMailProperties
argument_list|(
name|createJavaMailProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultEncoding
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setDefaultEncoding
argument_list|(
name|defaultEncoding
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|answer
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|protocol
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|answer
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|createJavaMailProperties ()
specifier|private
name|Properties
name|createJavaMailProperties
parameter_list|()
block|{
comment|// clone the system properties
name|Properties
name|properties
init|=
operator|(
name|Properties
operator|)
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail."
operator|+
name|protocol
operator|+
literal|".connectiontimeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail."
operator|+
name|protocol
operator|+
literal|".timeout"
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail."
operator|+
name|protocol
operator|+
literal|".host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail."
operator|+
name|protocol
operator|+
literal|".port"
argument_list|,
literal|""
operator|+
name|port
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail."
operator|+
name|protocol
operator|+
literal|".user"
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail."
operator|+
name|protocol
operator|+
literal|".rsetbeforequit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail."
operator|+
name|protocol
operator|+
literal|".auth"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail.transport.protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail.store.protocol"
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail.host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail.user"
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getDefaultEncoding ()
specifier|public
name|String
name|getDefaultEncoding
parameter_list|()
block|{
return|return
name|defaultEncoding
return|;
block|}
DECL|method|setDefaultEncoding (String defaultEncoding)
specifier|public
name|void
name|setDefaultEncoding
parameter_list|(
name|String
name|defaultEncoding
parameter_list|)
block|{
name|this
operator|.
name|defaultEncoding
operator|=
name|defaultEncoding
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getJavaMailProperties ()
specifier|public
name|Properties
name|getJavaMailProperties
parameter_list|()
block|{
return|return
name|javaMailProperties
return|;
block|}
DECL|method|setJavaMailProperties (Properties javaMailProperties)
specifier|public
name|void
name|setJavaMailProperties
parameter_list|(
name|Properties
name|javaMailProperties
parameter_list|)
block|{
name|this
operator|.
name|javaMailProperties
operator|=
name|javaMailProperties
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
DECL|method|getSession ()
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
DECL|method|setSession (Session session)
specifier|public
name|void
name|setSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
if|if
condition|(
operator|!
name|recipients
operator|.
name|containsKey
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
condition|)
block|{
comment|// set default destination to username@host for backwards compatibility
comment|// can be overridden by URI parameters
name|String
name|address
init|=
name|username
operator|+
literal|"@"
operator|+
name|host
decl_stmt|;
name|recipients
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the destination (recipient<tt>To</tt> email address).      *      * @deprecated use {@link #getRecipients()}      */
DECL|method|getDestination ()
specifier|public
name|String
name|getDestination
parameter_list|()
block|{
comment|// for backwards compatibility
return|return
name|recipients
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
return|;
block|}
comment|/**      * Sets the destination (recipient<tt>To</tt> email address).      *      * @deprecated use {@link #setTo(String)}      */
DECL|method|setDestination (String destination)
specifier|public
name|void
name|setDestination
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
comment|// for backwards compatibility
name|recipients
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
DECL|method|getFrom ()
specifier|public
name|String
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
DECL|method|setFrom (String from)
specifier|public
name|void
name|setFrom
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
block|}
DECL|method|isDeleteProcessedMessages ()
specifier|public
name|boolean
name|isDeleteProcessedMessages
parameter_list|()
block|{
return|return
name|deleteProcessedMessages
return|;
block|}
DECL|method|setDeleteProcessedMessages (boolean deleteProcessedMessages)
specifier|public
name|void
name|setDeleteProcessedMessages
parameter_list|(
name|boolean
name|deleteProcessedMessages
parameter_list|)
block|{
name|this
operator|.
name|deleteProcessedMessages
operator|=
name|deleteProcessedMessages
expr_stmt|;
block|}
DECL|method|getFolderName ()
specifier|public
name|String
name|getFolderName
parameter_list|()
block|{
return|return
name|folderName
return|;
block|}
DECL|method|setFolderName (String folderName)
specifier|public
name|void
name|setFolderName
parameter_list|(
name|String
name|folderName
parameter_list|)
block|{
name|this
operator|.
name|folderName
operator|=
name|folderName
expr_stmt|;
block|}
DECL|method|isIgnoreUriScheme ()
specifier|public
name|boolean
name|isIgnoreUriScheme
parameter_list|()
block|{
return|return
name|ignoreUriScheme
return|;
block|}
DECL|method|setIgnoreUriScheme (boolean ignoreUriScheme)
specifier|public
name|void
name|setIgnoreUriScheme
parameter_list|(
name|boolean
name|ignoreUriScheme
parameter_list|)
block|{
name|this
operator|.
name|ignoreUriScheme
operator|=
name|ignoreUriScheme
expr_stmt|;
block|}
DECL|method|isProcessOnlyUnseenMessages ()
specifier|public
name|boolean
name|isProcessOnlyUnseenMessages
parameter_list|()
block|{
return|return
name|processOnlyUnseenMessages
return|;
block|}
DECL|method|setProcessOnlyUnseenMessages (boolean processOnlyUnseenMessages)
specifier|public
name|void
name|setProcessOnlyUnseenMessages
parameter_list|(
name|boolean
name|processOnlyUnseenMessages
parameter_list|)
block|{
name|this
operator|.
name|processOnlyUnseenMessages
operator|=
name|processOnlyUnseenMessages
expr_stmt|;
block|}
comment|/**      * Sets the<tt>To</tt> email address. Separate multiple email addresses with comma.      */
DECL|method|setTo (String address)
specifier|public
name|void
name|setTo
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|recipients
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the<tt>CC</tt> email address. Separate multiple email addresses with comma.      */
DECL|method|setCC (String address)
specifier|public
name|void
name|setCC
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|recipients
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|CC
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the<tt>BCC</tt> email address. Separate multiple email addresses with comma.      */
DECL|method|setBCC (String address)
specifier|public
name|void
name|setBCC
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|recipients
operator|.
name|put
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|BCC
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
DECL|method|getRecipients ()
specifier|public
name|Map
argument_list|<
name|Message
operator|.
name|RecipientType
argument_list|,
name|String
argument_list|>
name|getRecipients
parameter_list|()
block|{
return|return
name|recipients
return|;
block|}
DECL|method|getFetchSize ()
specifier|public
name|int
name|getFetchSize
parameter_list|()
block|{
return|return
name|fetchSize
return|;
block|}
DECL|method|setFetchSize (int fetchSize)
specifier|public
name|void
name|setFetchSize
parameter_list|(
name|int
name|fetchSize
parameter_list|)
block|{
name|this
operator|.
name|fetchSize
operator|=
name|fetchSize
expr_stmt|;
block|}
DECL|method|isDebugMode ()
specifier|public
name|boolean
name|isDebugMode
parameter_list|()
block|{
return|return
name|debugMode
return|;
block|}
DECL|method|setDebugMode (boolean debugMode)
specifier|public
name|void
name|setDebugMode
parameter_list|(
name|boolean
name|debugMode
parameter_list|)
block|{
name|this
operator|.
name|debugMode
operator|=
name|debugMode
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|long
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
DECL|method|setConnectionTimeout (long connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|long
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
block|}
end_class

end_unit

