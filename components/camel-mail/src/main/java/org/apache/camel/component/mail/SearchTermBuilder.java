begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Flags
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|AndTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|BodyTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|ComparisonTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|FlagTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|FromStringTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|HeaderTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|NotTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|OrTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|ReceivedDateTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|RecipientStringTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SearchTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SentDateTerm
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SubjectTerm
import|;
end_import

begin_comment
comment|/**  * A builder to build compound {@link SearchTerm}s.  */
end_comment

begin_class
DECL|class|SearchTermBuilder
specifier|public
class|class
name|SearchTermBuilder
block|{
DECL|field|term
specifier|private
name|SearchTerm
name|term
decl_stmt|;
DECL|enum|Op
specifier|public
enum|enum
name|Op
block|{
DECL|enumConstant|and
DECL|enumConstant|or
DECL|enumConstant|not
name|and
block|,
name|or
block|,
name|not
block|;     }
DECL|enum|Comparison
specifier|public
enum|enum
name|Comparison
block|{
DECL|enumConstant|LE
DECL|enumConstant|LT
DECL|enumConstant|EQ
DECL|enumConstant|NE
DECL|enumConstant|GT
DECL|enumConstant|GE
name|LE
block|,
name|LT
block|,
name|EQ
block|,
name|NE
block|,
name|GT
block|,
name|GE
block|;
DECL|method|asNum ()
name|int
name|asNum
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|LE
case|:
return|return
name|ComparisonTerm
operator|.
name|LE
return|;
case|case
name|LT
case|:
return|return
name|ComparisonTerm
operator|.
name|LT
return|;
case|case
name|EQ
case|:
return|return
name|ComparisonTerm
operator|.
name|EQ
return|;
case|case
name|NE
case|:
return|return
name|ComparisonTerm
operator|.
name|NE
return|;
case|case
name|GT
case|:
return|return
name|ComparisonTerm
operator|.
name|GT
return|;
case|case
name|GE
case|:
return|return
name|ComparisonTerm
operator|.
name|GE
return|;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown comparison "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|build ()
specifier|public
name|SearchTerm
name|build
parameter_list|()
block|{
return|return
name|term
return|;
block|}
DECL|method|unseen ()
specifier|public
name|SearchTermBuilder
name|unseen
parameter_list|()
block|{
return|return
name|unseen
argument_list|(
name|Op
operator|.
name|and
argument_list|)
return|;
block|}
DECL|method|unseen (Op op)
specifier|public
name|SearchTermBuilder
name|unseen
parameter_list|(
name|Op
name|op
parameter_list|)
block|{
name|SearchTerm
name|st
init|=
operator|new
name|FlagTerm
argument_list|(
operator|new
name|Flags
argument_list|(
name|Flags
operator|.
name|Flag
operator|.
name|SEEN
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|header (String headerName, String pattern)
specifier|public
name|SearchTermBuilder
name|header
parameter_list|(
name|String
name|headerName
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
return|return
name|header
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|headerName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
DECL|method|header (Op op, String headerName, String pattern)
specifier|public
name|SearchTermBuilder
name|header
parameter_list|(
name|Op
name|op
parameter_list|,
name|String
name|headerName
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|SearchTerm
name|st
init|=
operator|new
name|HeaderTerm
argument_list|(
name|headerName
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|subject (String pattern)
specifier|public
name|SearchTermBuilder
name|subject
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|subject
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|pattern
argument_list|)
return|;
block|}
DECL|method|subject (Op op, String pattern)
specifier|public
name|SearchTermBuilder
name|subject
parameter_list|(
name|Op
name|op
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|SearchTerm
name|st
init|=
operator|new
name|SubjectTerm
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|body (String pattern)
specifier|public
name|SearchTermBuilder
name|body
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|body
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|pattern
argument_list|)
return|;
block|}
DECL|method|body (Op op, String pattern)
specifier|public
name|SearchTermBuilder
name|body
parameter_list|(
name|Op
name|op
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|SearchTerm
name|st
init|=
operator|new
name|BodyTerm
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|from (String pattern)
specifier|public
name|SearchTermBuilder
name|from
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
return|return
name|from
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|pattern
argument_list|)
return|;
block|}
DECL|method|from (Op op, String pattern)
specifier|public
name|SearchTermBuilder
name|from
parameter_list|(
name|Op
name|op
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|SearchTerm
name|st
init|=
operator|new
name|FromStringTerm
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|recipient (Message.RecipientType type, String pattern)
specifier|public
name|SearchTermBuilder
name|recipient
parameter_list|(
name|Message
operator|.
name|RecipientType
name|type
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
return|return
name|recipient
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|type
argument_list|,
name|pattern
argument_list|)
return|;
block|}
DECL|method|recipient (Op op, Message.RecipientType type, String pattern)
specifier|public
name|SearchTermBuilder
name|recipient
parameter_list|(
name|Op
name|op
parameter_list|,
name|Message
operator|.
name|RecipientType
name|type
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|SearchTerm
name|st
init|=
operator|new
name|RecipientStringTerm
argument_list|(
name|type
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|flag (Flags flags, boolean set)
specifier|public
name|SearchTermBuilder
name|flag
parameter_list|(
name|Flags
name|flags
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
return|return
name|flag
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|flags
argument_list|,
name|set
argument_list|)
return|;
block|}
DECL|method|flag (Op op, Flags flags, boolean set)
specifier|public
name|SearchTermBuilder
name|flag
parameter_list|(
name|Op
name|op
parameter_list|,
name|Flags
name|flags
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
name|SearchTerm
name|st
init|=
operator|new
name|FlagTerm
argument_list|(
name|flags
argument_list|,
name|set
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|sent (Comparison comparison, Date date)
specifier|public
name|SearchTermBuilder
name|sent
parameter_list|(
name|Comparison
name|comparison
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
return|return
name|sent
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|comparison
argument_list|,
name|date
argument_list|)
return|;
block|}
DECL|method|sent (Op op, Comparison comparison, Date date)
specifier|public
name|SearchTermBuilder
name|sent
parameter_list|(
name|Op
name|op
parameter_list|,
name|Comparison
name|comparison
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|SentDateTerm
name|st
init|=
operator|new
name|SentDateTerm
argument_list|(
name|comparison
operator|.
name|asNum
argument_list|()
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|received (Comparison comparison, Date date)
specifier|public
name|SearchTermBuilder
name|received
parameter_list|(
name|Comparison
name|comparison
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
return|return
name|received
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|comparison
argument_list|,
name|date
argument_list|)
return|;
block|}
DECL|method|received (Op op, Comparison comparison, Date date)
specifier|public
name|SearchTermBuilder
name|received
parameter_list|(
name|Op
name|op
parameter_list|,
name|Comparison
name|comparison
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
name|ReceivedDateTerm
name|st
init|=
operator|new
name|ReceivedDateTerm
argument_list|(
name|comparison
operator|.
name|asNum
argument_list|()
argument_list|,
name|date
argument_list|)
decl_stmt|;
name|addTerm
argument_list|(
name|op
argument_list|,
name|st
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|and (SearchTerm term)
specifier|public
name|SearchTermBuilder
name|and
parameter_list|(
name|SearchTerm
name|term
parameter_list|)
block|{
name|addTerm
argument_list|(
name|Op
operator|.
name|and
argument_list|,
name|term
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|or (SearchTerm term)
specifier|public
name|SearchTermBuilder
name|or
parameter_list|(
name|SearchTerm
name|term
parameter_list|)
block|{
name|addTerm
argument_list|(
name|Op
operator|.
name|or
argument_list|,
name|term
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|not (SearchTerm term)
specifier|public
name|SearchTermBuilder
name|not
parameter_list|(
name|SearchTerm
name|term
parameter_list|)
block|{
name|addTerm
argument_list|(
name|Op
operator|.
name|not
argument_list|,
name|term
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addTerm (Op op, SearchTerm newTerm)
specifier|private
name|void
name|addTerm
parameter_list|(
name|Op
name|op
parameter_list|,
name|SearchTerm
name|newTerm
parameter_list|)
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|term
operator|=
name|newTerm
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Op
operator|.
name|and
condition|)
block|{
name|term
operator|=
operator|new
name|AndTerm
argument_list|(
name|term
argument_list|,
name|newTerm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|op
operator|==
name|Op
operator|.
name|or
condition|)
block|{
name|term
operator|=
operator|new
name|OrTerm
argument_list|(
name|term
argument_list|,
name|newTerm
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// need to and the existing with the not
name|term
operator|=
operator|new
name|AndTerm
argument_list|(
name|term
argument_list|,
operator|new
name|NotTerm
argument_list|(
name|newTerm
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

