begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DefaultMailUidGenerator
specifier|public
class|class
name|DefaultMailUidGenerator
implements|implements
name|MailUidGenerator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultMailUidGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|generateUuid (MailEndpoint mailEndpoint, Message message)
specifier|public
name|String
name|generateUuid
parameter_list|(
name|MailEndpoint
name|mailEndpoint
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|String
name|answer
init|=
name|generateMessageIdHeader
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|generateMessageHash
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// fallback and use message number
if|if
condition|(
name|answer
operator|==
literal|null
operator|||
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|answer
argument_list|)
condition|)
block|{
name|answer
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|message
operator|.
name|getMessageNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
DECL|method|generateMessageIdHeader (Message message)
specifier|private
name|String
name|generateMessageIdHeader
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"generateMessageIdHeader for msg: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// there should be a Message-ID header with the UID
try|try
block|{
name|String
name|values
index|[]
init|=
name|message
operator|.
name|getHeader
argument_list|(
literal|"Message-ID"
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
name|uid
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Message-ID header found: {}"
argument_list|,
name|uid
argument_list|)
expr_stmt|;
return|return
name|uid
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot read headers from mail message. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|generateMessageHash (Message message)
specifier|public
name|String
name|generateMessageHash
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"generateMessageHash for msg: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|String
name|uid
init|=
literal|null
decl_stmt|;
comment|// create an UID based on message headers on the message, that ought to be unique
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|Enumeration
argument_list|<
name|?
argument_list|>
name|it
init|=
name|message
operator|.
name|getAllHeaders
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Header
name|header
init|=
operator|(
name|Header
operator|)
name|it
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Generating UID from the following:\n {}"
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|uid
operator|=
name|UUID
operator|.
name|nameUUIDFromBytes
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MessagingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot read headers from mail message. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|uid
return|;
block|}
block|}
end_class

end_unit

