begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SearchTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|UriEndpointComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|jsse
operator|.
name|SSLContextParameters
import|;
end_import

begin_comment
comment|/**  * Component for JavaMail.  *  * @version  */
end_comment

begin_class
DECL|class|MailComponent
specifier|public
class|class
name|MailComponent
extends|extends
name|UriEndpointComponent
block|{
DECL|field|configuration
specifier|private
name|MailConfiguration
name|configuration
decl_stmt|;
DECL|field|contentTypeResolver
specifier|private
name|ContentTypeResolver
name|contentTypeResolver
decl_stmt|;
DECL|method|MailComponent ()
specifier|public
name|MailComponent
parameter_list|()
block|{
name|super
argument_list|(
name|MailEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|MailComponent (MailConfiguration configuration)
specifier|public
name|MailComponent
parameter_list|(
name|MailConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|MailEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|MailComponent (CamelContext context)
specifier|public
name|MailComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|MailEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|url
init|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
comment|// must use copy as each endpoint can have different options
name|MailConfiguration
name|config
init|=
name|getConfiguration
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// only configure if we have a url with a known protocol
name|config
operator|.
name|configure
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|configureAdditionalJavaMailProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|MailEndpoint
name|endpoint
init|=
operator|new
name|MailEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setContentTypeResolver
argument_list|(
name|contentTypeResolver
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|sstParams
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"searchTerm."
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sstParams
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// use SimpleSearchTerm as POJO to store the configuration and then convert that to the actual SearchTerm
name|SimpleSearchTerm
name|sst
init|=
operator|new
name|SimpleSearchTerm
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|sst
argument_list|,
name|sstParams
argument_list|)
expr_stmt|;
name|SearchTerm
name|st
init|=
name|MailConverters
operator|.
name|toSearchTerm
argument_list|(
name|sst
argument_list|,
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|setSearchTerm
argument_list|(
name|st
argument_list|)
expr_stmt|;
block|}
comment|// sanity check that we know the mail server
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|config
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"host"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notEmpty
argument_list|(
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|,
literal|"protocol"
argument_list|)
expr_stmt|;
return|return
name|endpoint
return|;
block|}
DECL|method|configureAdditionalJavaMailProperties (MailConfiguration config, Map<String, Object> parameters)
specifier|private
name|void
name|configureAdditionalJavaMailProperties
parameter_list|(
name|MailConfiguration
name|config
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// we cannot remove while iterating, as we will get a modification exception
name|Set
argument_list|<
name|Object
argument_list|>
name|toRemove
init|=
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"mail."
argument_list|)
condition|)
block|{
name|config
operator|.
name|getAdditionalJavaMailProperties
argument_list|()
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Object
name|key
range|:
name|toRemove
control|)
block|{
name|parameters
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getConfiguration ()
specifier|public
name|MailConfiguration
name|getConfiguration
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|configuration
operator|=
operator|new
name|MailConfiguration
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
comment|/**      * Sets the Mail configuration. Properties of the shared configuration can also be set individually.      *      * @param configuration the configuration to use by default for endpoints      */
DECL|method|setConfiguration (MailConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|MailConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
DECL|method|getContentTypeResolver ()
specifier|public
name|ContentTypeResolver
name|getContentTypeResolver
parameter_list|()
block|{
return|return
name|contentTypeResolver
return|;
block|}
comment|/**      * Resolver to determine Content-Type for file attachments.      */
DECL|method|setContentTypeResolver (ContentTypeResolver contentTypeResolver)
specifier|public
name|void
name|setContentTypeResolver
parameter_list|(
name|ContentTypeResolver
name|contentTypeResolver
parameter_list|)
block|{
name|this
operator|.
name|contentTypeResolver
operator|=
name|contentTypeResolver
expr_stmt|;
block|}
comment|/**      * Is the used protocol to be secure or not      */
DECL|method|isSecureProtocol ()
specifier|public
name|boolean
name|isSecureProtocol
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isSecureProtocol
argument_list|()
return|;
block|}
DECL|method|isStartTlsEnabled ()
specifier|public
name|boolean
name|isStartTlsEnabled
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isStartTlsEnabled
argument_list|()
return|;
block|}
DECL|method|getMailStoreLogInformation ()
specifier|public
name|String
name|getMailStoreLogInformation
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getMailStoreLogInformation
argument_list|()
return|;
block|}
DECL|method|getJavaMailSender ()
specifier|public
name|JavaMailSender
name|getJavaMailSender
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getJavaMailSender
argument_list|()
return|;
block|}
comment|/**      * To use a custom {@link JavaMailSender} for sending emails.      * @param javaMailSender      */
DECL|method|setJavaMailSender (JavaMailSender javaMailSender)
specifier|public
name|void
name|setJavaMailSender
parameter_list|(
name|JavaMailSender
name|javaMailSender
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setJavaMailSender
argument_list|(
name|javaMailSender
argument_list|)
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
return|;
block|}
comment|/**      * The mail server host name      * @param host      */
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
DECL|method|getJavaMailProperties ()
specifier|public
name|Properties
name|getJavaMailProperties
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getJavaMailProperties
argument_list|()
return|;
block|}
comment|/**      * Sets the java mail options. Will clear any default properties and only use the properties      * provided for this method.      * @param javaMailProperties      */
DECL|method|setJavaMailProperties (Properties javaMailProperties)
specifier|public
name|void
name|setJavaMailProperties
parameter_list|(
name|Properties
name|javaMailProperties
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setJavaMailProperties
argument_list|(
name|javaMailProperties
argument_list|)
expr_stmt|;
block|}
DECL|method|getAdditionalJavaMailProperties ()
specifier|public
name|Properties
name|getAdditionalJavaMailProperties
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getAdditionalJavaMailProperties
argument_list|()
return|;
block|}
comment|/**      * Sets additional java mail properties, that will append/override any default properties      * that is set based on all the other options. This is useful if you need to add some      * special options but want to keep the others as is.      * @param additionalJavaMailProperties      */
DECL|method|setAdditionalJavaMailProperties (Properties additionalJavaMailProperties)
specifier|public
name|void
name|setAdditionalJavaMailProperties
parameter_list|(
name|Properties
name|additionalJavaMailProperties
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAdditionalJavaMailProperties
argument_list|(
name|additionalJavaMailProperties
argument_list|)
expr_stmt|;
block|}
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
return|;
block|}
comment|/**      * The password for login      * @param password      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
DECL|method|getSubject ()
specifier|public
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getSubject
argument_list|()
return|;
block|}
comment|/**      * The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option.      * @param subject      */
DECL|method|setSubject (String subject)
specifier|public
name|void
name|setSubject
parameter_list|(
name|String
name|subject
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setSubject
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**      * The port number of the mail server      * @param port      */
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|getProtocol ()
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getProtocol
argument_list|()
return|;
block|}
comment|/**      * The protocol for communicating with the mail server      * @param protocol      */
DECL|method|setProtocol (String protocol)
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
DECL|method|getSession ()
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getSession
argument_list|()
return|;
block|}
comment|/**      * Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where      * mail sessions are created and managed by some other resource, such as a JavaEE container.      * If this is not specified, Camel automatically creates the mail session for you.      * @param session      */
DECL|method|setSession (Session session)
specifier|public
name|void
name|setSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
return|;
block|}
comment|/**      * The username for login      * @param username      */
DECL|method|setUsername (String username)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
DECL|method|getFrom ()
specifier|public
name|String
name|getFrom
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getFrom
argument_list|()
return|;
block|}
comment|/**      * The from email address      * @param from      */
DECL|method|setFrom (String from)
specifier|public
name|void
name|setFrom
parameter_list|(
name|String
name|from
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setFrom
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
DECL|method|isDelete ()
specifier|public
name|boolean
name|isDelete
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isDelete
argument_list|()
return|;
block|}
comment|/**      * Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message.      * If false, the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a      * header with the key delete to determine if the mail should be deleted or not.      * @param delete      */
DECL|method|setDelete (boolean delete)
specifier|public
name|void
name|setDelete
parameter_list|(
name|boolean
name|delete
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
DECL|method|isMapMailMessage ()
specifier|public
name|boolean
name|isMapMailMessage
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isMapMailMessage
argument_list|()
return|;
block|}
comment|/**      * Specifies whether Camel should map the received mail message to Camel body/headers.      * If set to true, the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers.      * If this option is set to false then the IN message contains a raw javax.mail.Message.      * You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class).      * @param mapMailMessage      */
DECL|method|setMapMailMessage (boolean mapMailMessage)
specifier|public
name|void
name|setMapMailMessage
parameter_list|(
name|boolean
name|mapMailMessage
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setMapMailMessage
argument_list|(
name|mapMailMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|getFolderName ()
specifier|public
name|String
name|getFolderName
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getFolderName
argument_list|()
return|;
block|}
comment|/**      * The folder to poll.      * @param folderName      */
DECL|method|setFolderName (String folderName)
specifier|public
name|void
name|setFolderName
parameter_list|(
name|String
name|folderName
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setFolderName
argument_list|(
name|folderName
argument_list|)
expr_stmt|;
block|}
DECL|method|isIgnoreUriScheme ()
specifier|public
name|boolean
name|isIgnoreUriScheme
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isIgnoreUriScheme
argument_list|()
return|;
block|}
comment|/**      * Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported      * then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.      * @param ignoreUriScheme      */
DECL|method|setIgnoreUriScheme (boolean ignoreUriScheme)
specifier|public
name|void
name|setIgnoreUriScheme
parameter_list|(
name|boolean
name|ignoreUriScheme
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setIgnoreUriScheme
argument_list|(
name|ignoreUriScheme
argument_list|)
expr_stmt|;
block|}
DECL|method|isUnseen ()
specifier|public
name|boolean
name|isUnseen
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isUnseen
argument_list|()
return|;
block|}
comment|/**      * Whether to limit by unseen mails only.      * @param unseen      */
DECL|method|setUnseen (boolean unseen)
specifier|public
name|void
name|setUnseen
parameter_list|(
name|boolean
name|unseen
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setUnseen
argument_list|(
name|unseen
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the<tt>To</tt> email address. Separate multiple email addresses with comma.      * @param address      */
DECL|method|setTo (String address)
specifier|public
name|void
name|setTo
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setTo
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
DECL|method|getTo ()
specifier|public
name|String
name|getTo
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getTo
argument_list|()
return|;
block|}
comment|/**      * Sets the<tt>CC</tt> email address. Separate multiple email addresses with comma.      * @param address      */
DECL|method|setCc (String address)
specifier|public
name|void
name|setCc
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setCc
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
DECL|method|getCc ()
specifier|public
name|String
name|getCc
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getCc
argument_list|()
return|;
block|}
comment|/**      * Sets the<tt>BCC</tt> email address. Separate multiple email addresses with comma.      * @param address      */
DECL|method|setBcc (String address)
specifier|public
name|void
name|setBcc
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setBcc
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
DECL|method|getBcc ()
specifier|public
name|String
name|getBcc
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getBcc
argument_list|()
return|;
block|}
DECL|method|getRecipients ()
specifier|public
name|Map
argument_list|<
name|Message
operator|.
name|RecipientType
argument_list|,
name|String
argument_list|>
name|getRecipients
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getRecipients
argument_list|()
return|;
block|}
DECL|method|getReplyTo ()
specifier|public
name|String
name|getReplyTo
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getReplyTo
argument_list|()
return|;
block|}
comment|/**      * The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma.      * @param replyTo      */
DECL|method|setReplyTo (String replyTo)
specifier|public
name|void
name|setReplyTo
parameter_list|(
name|String
name|replyTo
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
block|}
DECL|method|getFetchSize ()
specifier|public
name|int
name|getFetchSize
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getFetchSize
argument_list|()
return|;
block|}
comment|/**      * Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server,      * if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed.      * Setting the value to 0 is a special corner case, where Camel will not consume any messages at all.      * @param fetchSize      */
DECL|method|setFetchSize (int fetchSize)
specifier|public
name|void
name|setFetchSize
parameter_list|(
name|int
name|fetchSize
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setFetchSize
argument_list|(
name|fetchSize
argument_list|)
expr_stmt|;
block|}
DECL|method|isDebugMode ()
specifier|public
name|boolean
name|isDebugMode
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isDebugMode
argument_list|()
return|;
block|}
comment|/**      * Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default.      * @param debugMode      */
DECL|method|setDebugMode (boolean debugMode)
specifier|public
name|void
name|setDebugMode
parameter_list|(
name|boolean
name|debugMode
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDebugMode
argument_list|(
name|debugMode
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|long
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getConnectionTimeout
argument_list|()
return|;
block|}
comment|/**      * The connection timeout in milliseconds.      * @param connectionTimeout      */
DECL|method|setConnectionTimeout (int connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|isDummyTrustManager ()
specifier|public
name|boolean
name|isDummyTrustManager
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isDummyTrustManager
argument_list|()
return|;
block|}
comment|/**      * To use a dummy security setting for trusting all certificates. Should only be used for development mode, and not production.      * @param dummyTrustManager      */
DECL|method|setDummyTrustManager (boolean dummyTrustManager)
specifier|public
name|void
name|setDummyTrustManager
parameter_list|(
name|boolean
name|dummyTrustManager
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDummyTrustManager
argument_list|(
name|dummyTrustManager
argument_list|)
expr_stmt|;
block|}
DECL|method|getContentType ()
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getContentType
argument_list|()
return|;
block|}
comment|/**      * The mail message content type. Use text/html for HTML mails.      * @param contentType      */
DECL|method|setContentType (String contentType)
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
DECL|method|getAlternativeBodyHeader ()
specifier|public
name|String
name|getAlternativeBodyHeader
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getAlternativeBodyHeader
argument_list|()
return|;
block|}
comment|/**      * Specifies the key to an IN message header that contains an alternative email body.      * For example, if you send emails in text/html format and want to provide an alternative mail body for      * non-HTML email clients, set the alternative mail body with this key as a header.      * @param alternativeBodyHeader      */
DECL|method|setAlternativeBodyHeader (String alternativeBodyHeader)
specifier|public
name|void
name|setAlternativeBodyHeader
parameter_list|(
name|String
name|alternativeBodyHeader
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAlternativeBodyHeader
argument_list|(
name|alternativeBodyHeader
argument_list|)
expr_stmt|;
block|}
DECL|method|isUseInlineAttachments ()
specifier|public
name|boolean
name|isUseInlineAttachments
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isUseInlineAttachments
argument_list|()
return|;
block|}
comment|/**      * Whether to use disposition inline or attachment.      * @param useInlineAttachments      */
DECL|method|setUseInlineAttachments (boolean useInlineAttachments)
specifier|public
name|void
name|setUseInlineAttachments
parameter_list|(
name|boolean
name|useInlineAttachments
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setUseInlineAttachments
argument_list|(
name|useInlineAttachments
argument_list|)
expr_stmt|;
block|}
DECL|method|isIgnoreUnsupportedCharset ()
specifier|public
name|boolean
name|isIgnoreUnsupportedCharset
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isIgnoreUnsupportedCharset
argument_list|()
return|;
block|}
comment|/**      * Option to let Camel ignore unsupported charset in the local JVM when sending mails.      * If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset)      * is removed from the content-type and it relies on the platform default instead.      * @param ignoreUnsupportedCharset      */
DECL|method|setIgnoreUnsupportedCharset (boolean ignoreUnsupportedCharset)
specifier|public
name|void
name|setIgnoreUnsupportedCharset
parameter_list|(
name|boolean
name|ignoreUnsupportedCharset
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setIgnoreUnsupportedCharset
argument_list|(
name|ignoreUnsupportedCharset
argument_list|)
expr_stmt|;
block|}
DECL|method|isDisconnect ()
specifier|public
name|boolean
name|isDisconnect
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isDisconnect
argument_list|()
return|;
block|}
comment|/**      * Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll.      * @param disconnect      */
DECL|method|setDisconnect (boolean disconnect)
specifier|public
name|void
name|setDisconnect
parameter_list|(
name|boolean
name|disconnect
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setDisconnect
argument_list|(
name|disconnect
argument_list|)
expr_stmt|;
block|}
DECL|method|isCloseFolder ()
specifier|public
name|boolean
name|isCloseFolder
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isCloseFolder
argument_list|()
return|;
block|}
comment|/**      * Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well,      * then the consumer keep the folder open between polls.      * @param closeFolder      */
DECL|method|setCloseFolder (boolean closeFolder)
specifier|public
name|void
name|setCloseFolder
parameter_list|(
name|boolean
name|closeFolder
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setCloseFolder
argument_list|(
name|closeFolder
argument_list|)
expr_stmt|;
block|}
DECL|method|getSslContextParameters ()
specifier|public
name|SSLContextParameters
name|getSslContextParameters
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getSslContextParameters
argument_list|()
return|;
block|}
comment|/**      * To configure security using SSLContextParameters.      * @param sslContextParameters      */
DECL|method|setSslContextParameters (SSLContextParameters sslContextParameters)
specifier|public
name|void
name|setSslContextParameters
parameter_list|(
name|SSLContextParameters
name|sslContextParameters
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setSslContextParameters
argument_list|(
name|sslContextParameters
argument_list|)
expr_stmt|;
block|}
DECL|method|getCopyTo ()
specifier|public
name|String
name|getCopyTo
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getCopyTo
argument_list|()
return|;
block|}
comment|/**      * After processing a mail message, it can be copied to a mail folder with the given name.      * You can override this configuration value, with a header with the key copyTo, allowing you to copy messages      * to folder names configured at runtime.      * @param copyTo      */
DECL|method|setCopyTo (String copyTo)
specifier|public
name|void
name|setCopyTo
parameter_list|(
name|String
name|copyTo
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setCopyTo
argument_list|(
name|copyTo
argument_list|)
expr_stmt|;
block|}
DECL|method|isPeek ()
specifier|public
name|boolean
name|isPeek
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isPeek
argument_list|()
return|;
block|}
comment|/**      * Will mark the javax.mail.Message as peeked before processing the mail message.      * This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on      * the mail server, which allows us to rollback the mail message if there is an error processing in Camel.      * @param peek      */
DECL|method|setPeek (boolean peek)
specifier|public
name|void
name|setPeek
parameter_list|(
name|boolean
name|peek
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setPeek
argument_list|(
name|peek
argument_list|)
expr_stmt|;
block|}
DECL|method|isSkipFailedMessage ()
specifier|public
name|boolean
name|isSkipFailedMessage
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isSkipFailedMessage
argument_list|()
return|;
block|}
comment|/**      * If the mail consumer cannot retrieve a given mail message, then this option allows to skip      * the message and move on to retrieve the next mail message.      *<p/>      * The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.      * @param skipFailedMessage      */
DECL|method|setSkipFailedMessage (boolean skipFailedMessage)
specifier|public
name|void
name|setSkipFailedMessage
parameter_list|(
name|boolean
name|skipFailedMessage
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setSkipFailedMessage
argument_list|(
name|skipFailedMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|isHandleFailedMessage ()
specifier|public
name|boolean
name|isHandleFailedMessage
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|isHandleFailedMessage
argument_list|()
return|;
block|}
comment|/**      * If the mail consumer cannot retrieve a given mail message, then this option allows to handle      * the caused exception by the consumer's error handler. By enable the bridge error handler on the consumer,      * then the Camel routing error handler can handle the exception instead.      *<p/>      * The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.      * @param handleFailedMessage      */
DECL|method|setHandleFailedMessage (boolean handleFailedMessage)
specifier|public
name|void
name|setHandleFailedMessage
parameter_list|(
name|boolean
name|handleFailedMessage
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setHandleFailedMessage
argument_list|(
name|handleFailedMessage
argument_list|)
expr_stmt|;
block|}
DECL|method|getAttachmentsContentTransferEncodingResolver ()
specifier|public
name|AttachmentsContentTransferEncodingResolver
name|getAttachmentsContentTransferEncodingResolver
parameter_list|()
block|{
return|return
name|getConfiguration
argument_list|()
operator|.
name|getAttachmentsContentTransferEncodingResolver
argument_list|()
return|;
block|}
comment|/**      * To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments.      * @param attachmentsContentTransferEncodingResolver      */
DECL|method|setAttachmentsContentTransferEncodingResolver (AttachmentsContentTransferEncodingResolver attachmentsContentTransferEncodingResolver)
specifier|public
name|void
name|setAttachmentsContentTransferEncodingResolver
parameter_list|(
name|AttachmentsContentTransferEncodingResolver
name|attachmentsContentTransferEncodingResolver
parameter_list|)
block|{
name|getConfiguration
argument_list|()
operator|.
name|setAttachmentsContentTransferEncodingResolver
argument_list|(
name|attachmentsContentTransferEncodingResolver
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

