begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|pollconsumer
operator|.
name|quartz2
operator|.
name|QuartzScheduledPollConsumerScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MailComponentTest
specifier|public
class|class
name|MailComponentTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testMailEndpointsAreConfiguredProperlyWhenUsingSmtp ()
specifier|public
name|void
name|testMailEndpointsAreConfiguredProperlyWhenUsingSmtp
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://james@myhost:25/subject"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"smtp"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|25
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMailEndpointsAreConfiguredProperlyWhenUsingImap ()
specifier|public
name|void
name|testMailEndpointsAreConfiguredProperlyWhenUsingImap
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"imap://james@myhost:143/subject"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"imap"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|143
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMailEndpointsAreConfiguredProperlyWhenUsingPop ()
specifier|public
name|void
name|testMailEndpointsAreConfiguredProperlyWhenUsingPop
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"pop3://james@myhost:110/subject"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"pop3"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|110
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSMTPConfiguration ()
specifier|public
name|void
name|testDefaultSMTPConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://james@myhost?password=secret"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"smtp"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
name|MailUtils
operator|.
name|DEFAULT_PORT_SMTP
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from"
argument_list|,
literal|"camel@localhost"
argument_list|,
name|config
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
literal|"secret"
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isIgnoreUriScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
operator|-
literal|1
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contentType"
argument_list|,
literal|"text/plain"
argument_list|,
name|config
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unseen"
argument_list|,
literal|true
argument_list|,
name|config
operator|.
name|isUnseen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MailConstants
operator|.
name|MAIL_DEFAULT_CONNECTION_TIMEOUT
argument_list|,
name|config
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isSecureProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smtp://myhost:25, folder=INBOX"
argument_list|,
name|config
operator|.
name|getMailStoreLogInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultSMTPSConfiguration ()
specifier|public
name|void
name|testDefaultSMTPSConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtps://james@myhost?password=secret"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"smtps"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
name|MailUtils
operator|.
name|DEFAULT_PORT_SMTPS
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from"
argument_list|,
literal|"camel@localhost"
argument_list|,
name|config
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
literal|"secret"
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isIgnoreUriScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
operator|-
literal|1
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contentType"
argument_list|,
literal|"text/plain"
argument_list|,
name|config
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unseen"
argument_list|,
literal|true
argument_list|,
name|config
operator|.
name|isUnseen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MailConstants
operator|.
name|MAIL_DEFAULT_CONNECTION_TIMEOUT
argument_list|,
name|config
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|config
operator|.
name|isSecureProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smtps://myhost:465 (SSL enabled), folder=INBOX"
argument_list|,
name|config
operator|.
name|getMailStoreLogInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDebugMode ()
specifier|public
name|void
name|testDebugMode
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://james@myhost?password=secret&debugMode=true"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConnectionTimeout ()
specifier|public
name|void
name|testConnectionTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://james@myhost?password=secret&connectionTimeout=2500"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2500
argument_list|,
name|config
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDummyTrustManager ()
specifier|public
name|void
name|testDummyTrustManager
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://james@myhost?password=secret&dummyTrustManager=true"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|config
operator|.
name|isDummyTrustManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isSecureProtocol
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDummyTrustManagerSecure ()
specifier|public
name|void
name|testDummyTrustManagerSecure
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtps://james@myhost?password=secret&dummyTrustManager=true"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|config
operator|.
name|isDummyTrustManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|config
operator|.
name|isSecureProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"smtps://myhost:465 (SSL enabled using DummyTrustManager), folder=INBOX"
argument_list|,
name|config
operator|.
name|getMailStoreLogInformation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultPOP3Configuration ()
specifier|public
name|void
name|testDefaultPOP3Configuration
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"pop3://james@myhost?password=secret"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"pop3"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
name|MailUtils
operator|.
name|DEFAULT_PORT_POP3
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from"
argument_list|,
literal|"camel@localhost"
argument_list|,
name|config
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
literal|"secret"
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isIgnoreUriScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
operator|-
literal|1
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contentType"
argument_list|,
literal|"text/plain"
argument_list|,
name|config
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unseen"
argument_list|,
literal|true
argument_list|,
name|config
operator|.
name|isUnseen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultIMAPConfiguration ()
specifier|public
name|void
name|testDefaultIMAPConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"imap://james@myhost?password=secret"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"imap"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
name|MailUtils
operator|.
name|DEFAULT_PORT_IMAP
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from"
argument_list|,
literal|"camel@localhost"
argument_list|,
name|config
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
literal|"secret"
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isIgnoreUriScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
operator|-
literal|1
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contentType"
argument_list|,
literal|"text/plain"
argument_list|,
name|config
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unseen"
argument_list|,
literal|true
argument_list|,
name|config
operator|.
name|isUnseen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testManyConfigurations ()
specifier|public
name|void
name|testManyConfigurations
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://james@myhost:30/subject?password=secret"
operator|+
literal|"&from=me@camelriders.org&delete=true&folderName=riders"
operator|+
literal|"&contentType=text/html&unseen=false"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"smtp"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|30
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"riders"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from"
argument_list|,
literal|"me@camelriders.org"
argument_list|,
name|config
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
literal|"secret"
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|config
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isIgnoreUriScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
operator|-
literal|1
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unseen"
argument_list|,
literal|false
argument_list|,
name|config
operator|.
name|isUnseen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"contentType"
argument_list|,
literal|"text/html"
argument_list|,
name|config
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTo ()
specifier|public
name|void
name|testTo
parameter_list|()
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://james@myhost:25/?password=secret&to=someone@outthere.com&folderName=XXX"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"smtp"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|25
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"someone@outthere.com"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"XXX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from"
argument_list|,
literal|"camel@localhost"
argument_list|,
name|config
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
literal|"secret"
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isIgnoreUriScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
operator|-
literal|1
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoUserInfoButUsername ()
specifier|public
name|void
name|testNoUserInfoButUsername
parameter_list|()
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://myhost:25/?password=secret&username=james"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"smtp"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|25
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"from"
argument_list|,
literal|"camel@localhost"
argument_list|,
name|config
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"password"
argument_list|,
literal|"secret"
argument_list|,
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isIgnoreUriScheme
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
operator|-
literal|1
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMailEndpointsWithFetchSize ()
specifier|public
name|void
name|testMailEndpointsWithFetchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"pop3://james@myhost?fetchSize=5"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"pop3"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|110
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getUsername()"
argument_list|,
literal|"james"
argument_list|,
name|config
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getRecipients().get(Message.RecipientType.TO)"
argument_list|,
literal|"james@myhost"
argument_list|,
name|config
operator|.
name|getRecipients
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"folder"
argument_list|,
literal|"INBOX"
argument_list|,
name|config
operator|.
name|getFolderName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fetchSize"
argument_list|,
literal|5
argument_list|,
name|config
operator|.
name|getFetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSMTPEndpointWithSubjectOption ()
specifier|public
name|void
name|testSMTPEndpointWithSubjectOption
parameter_list|()
throws|throws
name|Exception
block|{
name|MailEndpoint
name|endpoint
init|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"smtp://myhost:25?subject=hello"
argument_list|)
decl_stmt|;
name|MailConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getProtocol()"
argument_list|,
literal|"smtp"
argument_list|,
name|config
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getHost()"
argument_list|,
literal|"myhost"
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getPort()"
argument_list|,
literal|25
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getSubject()"
argument_list|,
literal|"hello"
argument_list|,
name|config
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|config
operator|.
name|isDebugMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveMandatoryEndpoint (String uri)
specifier|protected
name|MailEndpoint
name|resolveMandatoryEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|super
operator|.
name|resolveMandatoryEndpoint
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|MailEndpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testMailComponentCtr ()
specifier|public
name|void
name|testMailComponentCtr
parameter_list|()
throws|throws
name|Exception
block|{
name|MailComponent
name|comp
init|=
operator|new
name|MailComponent
argument_list|()
decl_stmt|;
name|comp
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|comp
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comp
operator|.
name|getContentTypeResolver
argument_list|()
argument_list|)
expr_stmt|;
name|MailEndpoint
name|endpoint
init|=
operator|(
name|MailEndpoint
operator|)
name|comp
operator|.
name|createEndpoint
argument_list|(
literal|"smtp://myhost:25/?password=secret&username=james"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
comment|// should be a copy of the configuration
name|assertNotSame
argument_list|(
name|comp
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMailComponentCtrCamelContext ()
specifier|public
name|void
name|testMailComponentCtrCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|MailComponent
name|comp
init|=
operator|new
name|MailComponent
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|comp
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comp
operator|.
name|getContentTypeResolver
argument_list|()
argument_list|)
expr_stmt|;
name|MailEndpoint
name|endpoint
init|=
operator|(
name|MailEndpoint
operator|)
name|comp
operator|.
name|createEndpoint
argument_list|(
literal|"smtp://myhost:25/?password=secret&username=james"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
comment|// should be a copy of the configuration
name|assertNotSame
argument_list|(
name|comp
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMailComponentCtrConfig ()
specifier|public
name|void
name|testMailComponentCtrConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|MailConfiguration
name|config
init|=
operator|new
name|MailConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setUsername
argument_list|(
literal|"james"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setPassword
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|MailComponent
name|comp
init|=
operator|new
name|MailComponent
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|config
argument_list|,
name|comp
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comp
operator|.
name|getContentTypeResolver
argument_list|()
argument_list|)
expr_stmt|;
name|MailEndpoint
name|endpoint
init|=
operator|(
name|MailEndpoint
operator|)
name|comp
operator|.
name|createEndpoint
argument_list|(
literal|"smtp://myhost/"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"james"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"secret"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myhost"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMailComponentWithQuartzScheduler ()
specifier|public
name|void
name|testMailComponentWithQuartzScheduler
parameter_list|()
throws|throws
name|Exception
block|{
name|MailConfiguration
name|config
init|=
operator|new
name|MailConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setUsername
argument_list|(
literal|"james"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setPassword
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|MailComponent
name|comp
init|=
operator|new
name|MailComponent
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|config
argument_list|,
name|comp
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|comp
operator|.
name|getContentTypeResolver
argument_list|()
argument_list|)
expr_stmt|;
name|MailEndpoint
name|endpoint
init|=
operator|(
name|MailEndpoint
operator|)
name|comp
operator|.
name|createEndpoint
argument_list|(
literal|"imap://myhost?scheduler=quartz2&scheduler.cron=0%2F5+*+0-23+%3F+*+*+*&scheduler.timeZone=Europe%2FBerlin"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"james"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"secret"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myhost"
argument_list|,
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Scheduler not set"
argument_list|,
name|endpoint
operator|.
name|getScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong scheduler class"
argument_list|,
name|endpoint
operator|.
name|getScheduler
argument_list|()
operator|instanceof
name|QuartzScheduledPollConsumerScheduler
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

