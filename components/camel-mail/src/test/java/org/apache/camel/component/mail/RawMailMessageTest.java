begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Folder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jvnet
operator|.
name|mock_javamail
operator|.
name|Mailbox
import|;
end_import

begin_comment
comment|/**  * Unit test for Mail using camel headers to set recipient subject.  */
end_comment

begin_class
DECL|class|RawMailMessageTest
specifier|public
class|class
name|RawMailMessageTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Mailbox
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|prepareMailbox
argument_list|(
literal|"jonesPop3"
argument_list|,
literal|"pop3"
argument_list|)
expr_stmt|;
name|prepareMailbox
argument_list|(
literal|"jonesRawPop3"
argument_list|,
literal|"pop3"
argument_list|)
expr_stmt|;
name|prepareMailbox
argument_list|(
literal|"jonesImap"
argument_list|,
literal|"imap"
argument_list|)
expr_stmt|;
name|prepareMailbox
argument_list|(
literal|"jonesRawImap"
argument_list|,
literal|"imap"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRawJavaMailMessage ()
specifier|public
name|void
name|testGetRawJavaMailMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|Mailbox
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"To"
argument_list|,
literal|"davsclaus@apache.org"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"From"
argument_list|,
literal|"jstrachan@apache.org"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Subject"
argument_list|,
literal|"Camel rocks"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"Hello Claus.\nYes it does.\n\nRegards James."
decl_stmt|;
name|getMockEndpoint
argument_list|(
literal|"mock:mail"
argument_list|)
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"smtp://davsclaus@apache.org"
argument_list|,
name|body
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:mail"
argument_list|)
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// START SNIPPET: e1
comment|// get access to the raw javax.mail.Message as shown below
name|Message
name|javaMailMessage
init|=
name|exchange
operator|.
name|getIn
argument_list|(
name|MailMessage
operator|.
name|class
argument_list|)
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|javaMailMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Camel rocks"
argument_list|,
name|javaMailMessage
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e1
block|}
annotation|@
name|Test
DECL|method|testRawMessageConsumerPop3 ()
specifier|public
name|void
name|testRawMessageConsumerPop3
parameter_list|()
throws|throws
name|Exception
block|{
name|testRawMessageConsumer
argument_list|(
literal|"Pop3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRawMessageConsumerImap ()
specifier|public
name|void
name|testRawMessageConsumerImap
parameter_list|()
throws|throws
name|Exception
block|{
name|testRawMessageConsumer
argument_list|(
literal|"Imap"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRawMessageConsumer (String type)
specifier|private
name|void
name|testRawMessageConsumer
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Mailbox
name|mailboxRaw
init|=
name|Mailbox
operator|.
name|get
argument_list|(
literal|"jonesRaw"
operator|+
name|type
operator|+
literal|"@localhost"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mailboxRaw
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock://rawMessage"
operator|+
name|type
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodyReceived
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|Message
name|mailMessage
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"mail subject should not be null"
argument_list|,
name|mailMessage
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mail subject should be hurz"
argument_list|,
literal|"hurz"
argument_list|,
name|mailMessage
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|headers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNormalMessageConsumerPop3 ()
specifier|public
name|void
name|testNormalMessageConsumerPop3
parameter_list|()
throws|throws
name|Exception
block|{
name|testNormalMessageConsumer
argument_list|(
literal|"Pop3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNormalMessageConsumerImap ()
specifier|public
name|void
name|testNormalMessageConsumerImap
parameter_list|()
throws|throws
name|Exception
block|{
name|testNormalMessageConsumer
argument_list|(
literal|"Imap"
argument_list|)
expr_stmt|;
block|}
DECL|method|testNormalMessageConsumer (String type)
specifier|private
name|void
name|testNormalMessageConsumer
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Mailbox
name|mailbox
init|=
name|Mailbox
operator|.
name|get
argument_list|(
literal|"jones"
operator|+
name|type
operator|+
literal|"@localhost"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mailbox
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock://normalMessage"
operator|+
name|type
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodyReceived
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
name|String
name|body
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|MimeMessage
name|mm
init|=
operator|new
name|MimeMessage
argument_list|(
literal|null
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
name|body
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|subject
init|=
name|mm
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"mail subject should not be available"
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|headers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareMailbox (String user, String type)
specifier|private
name|void
name|prepareMailbox
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
comment|// connect to mailbox
name|JavaMailSender
name|sender
init|=
operator|new
name|DefaultJavaMailSender
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
name|sender
operator|.
name|getSession
argument_list|()
operator|.
name|getStore
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|store
operator|.
name|connect
argument_list|(
literal|"localhost"
argument_list|,
literal|25
argument_list|,
name|user
argument_list|,
literal|"secret"
argument_list|)
expr_stmt|;
name|Folder
name|folder
init|=
name|store
operator|.
name|getFolder
argument_list|(
literal|"INBOX"
argument_list|)
decl_stmt|;
name|folder
operator|.
name|open
argument_list|(
name|Folder
operator|.
name|READ_WRITE
argument_list|)
expr_stmt|;
name|folder
operator|.
name|expunge
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/SignedMailTestCaseHurz.elm"
argument_list|)
decl_stmt|;
name|Message
name|hurzMsg
init|=
operator|new
name|MimeMessage
argument_list|(
name|sender
operator|.
name|getSession
argument_list|()
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|Message
index|[]
name|messages
init|=
operator|new
name|Message
index|[]
block|{
name|hurzMsg
block|}
decl_stmt|;
comment|// insert one signed message
name|folder
operator|.
name|appendMessages
argument_list|(
name|messages
argument_list|)
expr_stmt|;
name|folder
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"pop3://davsclaus@apache.org"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:mail"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"pop3://jonesRawPop3@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true&mapMailMessage=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock://rawMessagePop3"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"imap://jonesRawImap@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true&mapMailMessage=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock://rawMessageImap"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"pop3://jonesPop3@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock://normalMessagePop3"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"imap://jonesImap@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&delete=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock://normalMessageImap"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

