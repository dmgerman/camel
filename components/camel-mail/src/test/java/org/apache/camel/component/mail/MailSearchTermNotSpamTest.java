begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|search
operator|.
name|SearchTerm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jvnet
operator|.
name|mock_javamail
operator|.
name|Mailbox
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
operator|.
name|SearchTermBuilder
operator|.
name|Op
import|;
end_import

begin_class
DECL|class|MailSearchTermNotSpamTest
specifier|public
class|class
name|MailSearchTermNotSpamTest
extends|extends
name|MailSearchTermTest
block|{
annotation|@
name|Override
DECL|method|createSearchTerm ()
specifier|protected
name|SearchTerm
name|createSearchTerm
parameter_list|()
block|{
comment|// we just want the unseen mails which is not spam
name|SearchTermBuilder
name|build
init|=
operator|new
name|SearchTermBuilder
argument_list|()
decl_stmt|;
name|build
operator|.
name|unseen
argument_list|()
operator|.
name|body
argument_list|(
name|Op
operator|.
name|not
argument_list|,
literal|"Spam"
argument_list|)
operator|.
name|subject
argument_list|(
name|Op
operator|.
name|not
argument_list|,
literal|"Spam"
argument_list|)
expr_stmt|;
return|return
name|build
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testSearchTerm ()
specifier|public
name|void
name|testSearchTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|Mailbox
name|mailbox
init|=
name|Mailbox
operator|.
name|get
argument_list|(
literal|"bill@localhost"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|mailbox
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedBodiesReceivedInAnyOrder
argument_list|(
literal|"I like riding the Camel"
argument_list|,
literal|"Ordering Camel in Action"
argument_list|,
literal|"Ordering ActiveMQ in Action"
argument_list|,
literal|"We meet at 7pm the usual place"
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

