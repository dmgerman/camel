begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Multipart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeBodyPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMultipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|MailBindingAttachmentFileTest
specifier|public
class|class
name|MailBindingAttachmentFileTest
block|{
annotation|@
name|Parameter
DECL|field|name
specifier|public
name|String
name|name
decl_stmt|;
DECL|field|binding
specifier|private
specifier|final
name|MailBinding
name|binding
init|=
operator|new
name|MailBinding
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|shouldSanitizeAttachmentFileNames ()
specifier|public
name|void
name|shouldSanitizeAttachmentFileNames
parameter_list|()
throws|throws
name|MessagingException
throws|,
name|IOException
block|{
specifier|final
name|Session
name|session
init|=
name|Session
operator|.
name|getInstance
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Message
name|message
init|=
operator|new
name|MimeMessage
argument_list|(
name|session
argument_list|)
decl_stmt|;
specifier|final
name|Multipart
name|multipart
init|=
operator|new
name|MimeMultipart
argument_list|()
decl_stmt|;
specifier|final
name|MimeBodyPart
name|part
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|part
operator|.
name|attachFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|multipart
operator|.
name|addBodyPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|multipart
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Attachment
argument_list|>
name|attachments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|binding
operator|.
name|extractAttachmentsFromMail
argument_list|(
name|message
argument_list|,
name|attachments
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|attachments
argument_list|)
operator|.
name|containsKey
argument_list|(
literal|"file.txt"
argument_list|)
expr_stmt|;
specifier|final
name|Attachment
name|attachment
init|=
name|attachments
operator|.
name|get
argument_list|(
literal|"file.txt"
argument_list|)
decl_stmt|;
specifier|final
name|DataHandler
name|dataHandler
init|=
name|attachment
operator|.
name|getDataHandler
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|dataHandler
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"file.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|fileNames ()
specifier|public
specifier|static
name|Iterable
argument_list|<
name|String
argument_list|>
name|fileNames
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"file.txt"
argument_list|,
literal|"../file.txt"
argument_list|,
literal|"..\\file.txt"
argument_list|,
literal|"/absolute/file.txt"
argument_list|,
literal|"c:\\absolute\\file.txt"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

