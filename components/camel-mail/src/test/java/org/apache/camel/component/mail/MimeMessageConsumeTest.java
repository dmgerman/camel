begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|URLDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|BodyPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|MessagingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Multipart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeBodyPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMultipart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|MimeMessageConsumeTest
specifier|public
class|class
name|MimeMessageConsumeTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|body
specifier|private
name|String
name|body
init|=
literal|"hello world!"
decl_stmt|;
DECL|method|testSendAndReceiveMails ()
specifier|public
name|void
name|testSendAndReceiveMails
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|resultEndpoint
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|resultEndpoint
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail.smtp.host"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getDefaultInstance
argument_list|(
name|properties
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MimeMessage
name|message
init|=
operator|new
name|MimeMessage
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|populateMimeMessageBody
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|setRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
literal|"james@localhost"
argument_list|)
expr_stmt|;
name|Transport
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// lets test the receive worked
name|resultEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|Exchange
name|exchange
init|=
name|resultEndpoint
operator|.
name|getReceivedExchanges
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mail body"
argument_list|,
name|body
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"attachments got lost"
argument_list|,
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|keyIt
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachmentNames
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DataHandler
name|dh
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachment
argument_list|(
name|keyIt
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Found attachment: "
operator|+
name|dh
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Lets encode a multipart mime message      */
DECL|method|populateMimeMessageBody (MimeMessage message)
specifier|protected
name|void
name|populateMimeMessageBody
parameter_list|(
name|MimeMessage
name|message
parameter_list|)
throws|throws
name|MessagingException
block|{
name|MimeBodyPart
name|plainPart
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|plainPart
operator|.
name|setText
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|MimeBodyPart
name|htmlPart
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|htmlPart
operator|.
name|setText
argument_list|(
literal|"<html><body>"
operator|+
name|body
operator|+
literal|"</body></html>"
argument_list|)
expr_stmt|;
name|Multipart
name|alt
init|=
operator|new
name|MimeMultipart
argument_list|(
literal|"alternative"
argument_list|)
decl_stmt|;
name|alt
operator|.
name|addBodyPart
argument_list|(
name|plainPart
argument_list|)
expr_stmt|;
name|alt
operator|.
name|addBodyPart
argument_list|(
name|htmlPart
argument_list|)
expr_stmt|;
name|Multipart
name|mixed
init|=
operator|new
name|MimeMultipart
argument_list|(
literal|"mixed"
argument_list|)
decl_stmt|;
name|MimeBodyPart
name|wrap
init|=
operator|new
name|MimeBodyPart
argument_list|()
decl_stmt|;
name|wrap
operator|.
name|setContent
argument_list|(
name|alt
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|addBodyPart
argument_list|(
name|wrap
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|addBodyPart
argument_list|(
name|plainPart
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|addBodyPart
argument_list|(
name|htmlPart
argument_list|)
expr_stmt|;
name|DataSource
name|ds
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/log4j.properties"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|ds
operator|=
operator|new
name|FileDataSource
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
name|ds
operator|=
operator|new
name|URLDataSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/log4j.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DataHandler
name|dh
init|=
operator|new
name|DataHandler
argument_list|(
name|ds
argument_list|)
decl_stmt|;
name|BodyPart
name|attachmentBodyPart
init|=
literal|null
decl_stmt|;
comment|// Create another body part
name|attachmentBodyPart
operator|=
operator|new
name|MimeBodyPart
argument_list|()
expr_stmt|;
comment|// Set the data handler to the attachment
name|attachmentBodyPart
operator|.
name|setDataHandler
argument_list|(
name|dh
argument_list|)
expr_stmt|;
comment|// Set the filename
name|attachmentBodyPart
operator|.
name|setFileName
argument_list|(
name|dh
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set Disposition
name|attachmentBodyPart
operator|.
name|setDisposition
argument_list|(
name|Part
operator|.
name|ATTACHMENT
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|addBodyPart
argument_list|(
name|plainPart
argument_list|)
expr_stmt|;
name|mixed
operator|.
name|addBodyPart
argument_list|(
name|htmlPart
argument_list|)
expr_stmt|;
comment|// Add attachmentBodyPart to multipart
name|mixed
operator|.
name|addBodyPart
argument_list|(
name|attachmentBodyPart
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|mixed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"smtp://james@localhost"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

