begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.mime.multipart
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|mime
operator|.
name|multipart
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|util
operator|.
name|ByteArrayDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsCollectionContaining
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|StringStartsWith
operator|.
name|startsWith
import|;
end_import

begin_class
DECL|class|MimeMultipartDataFormatTest
specifier|public
class|class
name|MimeMultipartDataFormatTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|in
specifier|private
name|Message
name|in
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|in
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithTextAttachments ()
specifier|public
name|void
name|roundtripWithTextAttachments
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|attContentType
init|=
literal|"text/plain"
decl_stmt|;
name|String
name|attText
init|=
literal|"Attachment Text"
decl_stmt|;
name|String
name|attFileName
init|=
literal|"Attachment File Name"
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain;charset=iso8859-1;other-parameter=true"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
name|addAttachment
argument_list|(
name|attContentType
argument_list|,
name|attText
argument_list|,
name|attFileName
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtrip"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF8"
argument_list|,
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|getAttachmentNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getAttachmentNames
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|attFileName
argument_list|)
argument_list|)
expr_stmt|;
name|DataHandler
name|dh
init|=
name|out
operator|.
name|getAttachment
argument_list|(
name|attFileName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dh
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attContentType
argument_list|,
name|dh
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|dh
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attText
argument_list|,
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithTextAttachmentsHeadersInline ()
specifier|public
name|void
name|roundtripWithTextAttachmentsHeadersInline
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|attContentType
init|=
literal|"text/plain"
decl_stmt|;
name|String
name|attText
init|=
literal|"Attachment Text"
decl_stmt|;
name|String
name|attFileName
init|=
literal|"Attachment File Name"
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain;charset=iso8859-1;other-parameter=true"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
name|addAttachment
argument_list|(
name|attContentType
argument_list|,
name|attText
argument_list|,
name|attFileName
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtripinlineheaders"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF8"
argument_list|,
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|getAttachmentNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getAttachmentNames
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|attFileName
argument_list|)
argument_list|)
expr_stmt|;
name|DataHandler
name|dh
init|=
name|out
operator|.
name|getAttachment
argument_list|(
name|attFileName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dh
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attContentType
argument_list|,
name|dh
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|dh
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attText
argument_list|,
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithTextAttachmentsAndSpecialCharacters ()
specifier|public
name|void
name|roundtripWithTextAttachmentsAndSpecialCharacters
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|attContentType
init|=
literal|"text/plain"
decl_stmt|;
name|String
name|attText
init|=
literal|"Attachment Text with special characters: \u00A9"
decl_stmt|;
name|String
name|attFileName
init|=
literal|"Attachment File Name with special characters: \u00A9"
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text with special characters: \u00A9"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
name|addAttachment
argument_list|(
name|attContentType
argument_list|,
name|attText
argument_list|,
name|attFileName
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtrip"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text with special characters: \u00A9"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF8"
argument_list|,
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|getAttachmentNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getAttachmentNames
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|attFileName
argument_list|)
argument_list|)
expr_stmt|;
name|DataHandler
name|dh
init|=
name|out
operator|.
name|getAttachment
argument_list|(
name|attFileName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dh
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attContentType
argument_list|,
name|dh
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|dh
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attText
argument_list|,
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithTextAttachmentsAndBinaryContent ()
specifier|public
name|void
name|roundtripWithTextAttachmentsAndBinaryContent
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|attContentType
init|=
literal|"text/plain"
decl_stmt|;
name|String
name|attText
init|=
literal|"Attachment Text"
decl_stmt|;
name|String
name|attFileName
init|=
literal|"Attachment File Name"
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"text/plain;charset=iso8859-1;other-parameter=true"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|,
literal|"UTF8"
argument_list|)
expr_stmt|;
name|addAttachment
argument_list|(
name|attContentType
argument_list|,
name|attText
argument_list|,
name|attFileName
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtripbinarycontent"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|startsWith
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UTF8"
argument_list|,
name|out
operator|.
name|getHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|getAttachmentNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getAttachmentNames
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|attFileName
argument_list|)
argument_list|)
expr_stmt|;
name|DataHandler
name|dh
init|=
name|out
operator|.
name|getAttachment
argument_list|(
name|attFileName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dh
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attContentType
argument_list|,
name|dh
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|dh
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attText
argument_list|,
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithBinaryAttachments ()
specifier|public
name|void
name|roundtripWithBinaryAttachments
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|attContentType
init|=
literal|"application/binary"
decl_stmt|;
name|byte
index|[]
name|attText
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|}
decl_stmt|;
name|String
name|attFileName
init|=
literal|"Attachment File Name"
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|DataSource
name|ds
init|=
operator|new
name|ByteArrayDataSource
argument_list|(
name|attText
argument_list|,
name|attContentType
argument_list|)
decl_stmt|;
name|in
operator|.
name|addAttachment
argument_list|(
name|attFileName
argument_list|,
operator|new
name|DataHandler
argument_list|(
name|ds
argument_list|)
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtrip"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|getAttachmentNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getAttachmentNames
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|attFileName
argument_list|)
argument_list|)
expr_stmt|;
name|DataHandler
name|dh
init|=
name|out
operator|.
name|getAttachment
argument_list|(
name|attFileName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dh
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attContentType
argument_list|,
name|dh
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|dh
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|attText
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithBinaryAttachmentsAndBinaryContent ()
specifier|public
name|void
name|roundtripWithBinaryAttachmentsAndBinaryContent
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|attContentType
init|=
literal|"application/binary"
decl_stmt|;
name|byte
index|[]
name|attText
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|}
decl_stmt|;
name|String
name|attFileName
init|=
literal|"Attachment File Name"
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|DataSource
name|ds
init|=
operator|new
name|ByteArrayDataSource
argument_list|(
name|attText
argument_list|,
name|attContentType
argument_list|)
decl_stmt|;
name|in
operator|.
name|addAttachment
argument_list|(
name|attFileName
argument_list|,
operator|new
name|DataHandler
argument_list|(
name|ds
argument_list|)
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtripbinarycontent"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|out
operator|.
name|getAttachmentNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|out
operator|.
name|getAttachmentNames
argument_list|()
argument_list|,
name|hasItem
argument_list|(
name|attFileName
argument_list|)
argument_list|)
expr_stmt|;
name|DataHandler
name|dh
init|=
name|out
operator|.
name|getAttachment
argument_list|(
name|attFileName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dh
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attContentType
argument_list|,
name|dh
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|dh
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|IOHelper
operator|.
name|copyAndCloseInput
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|attText
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithoutAttachments ()
specifier|public
name|void
name|roundtripWithoutAttachments
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtrip"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithoutAttachmentsToMultipart ()
specifier|public
name|void
name|roundtripWithoutAttachmentsToMultipart
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtripmultipart"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithoutAttachmentsAndContentType ()
specifier|public
name|void
name|roundtripWithoutAttachmentsAndContentType
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtrip"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|roundtripWithoutAttachmentsAndInvalidContentType ()
specifier|public
name|void
name|roundtripWithoutAttachmentsAndInvalidContentType
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text?plain"
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:roundtrip"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|Message
name|out
init|=
name|result
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Body text"
argument_list|,
name|out
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|out
operator|.
name|hasAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|marhsalOnlyMixed ()
specifier|public
name|void
name|marhsalOnlyMixed
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|addAttachment
argument_list|(
literal|"application/octet-stream"
argument_list|,
literal|"foobar"
argument_list|,
literal|"attachment.bin"
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:marshalonlymixed"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|startsWith
argument_list|(
literal|"multipart/mixed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|marhsalOnlyRelated ()
specifier|public
name|void
name|marhsalOnlyRelated
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|setBody
argument_list|(
literal|"Body text"
argument_list|)
expr_stmt|;
name|in
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|addAttachment
argument_list|(
literal|"application/octet-stream"
argument_list|,
literal|"foobar"
argument_list|,
literal|"attachment.bin"
argument_list|)
expr_stmt|;
name|Exchange
name|result
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:marshalonlyrelated"
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|startsWith
argument_list|(
literal|"multipart/related"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addAttachment (String attContentType, String attText, String attFileName)
specifier|private
name|void
name|addAttachment
parameter_list|(
name|String
name|attContentType
parameter_list|,
name|String
name|attText
parameter_list|,
name|String
name|attFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|DataSource
name|ds
init|=
operator|new
name|ByteArrayDataSource
argument_list|(
name|attText
argument_list|,
name|attContentType
argument_list|)
decl_stmt|;
name|in
operator|.
name|addAttachment
argument_list|(
name|attFileName
argument_list|,
operator|new
name|DataHandler
argument_list|(
name|ds
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:roundtrip"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|()
operator|.
name|to
argument_list|(
literal|"log:mime?showHeaders=true"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"direct:roundtripmultipart"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:mime?showHeaders=true"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|()
expr_stmt|;
name|from
argument_list|(
literal|"direct:roundtripinlineheaders"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:mime?showHeaders=true"
argument_list|)
operator|.
name|unmarshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:roundtripbinarycontent"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|to
argument_list|(
literal|"log:mime?showHeaders=true"
argument_list|)
operator|.
name|to
argument_list|(
literal|"dataformat:mime-multipart:unmarshal"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshalonlyrelated"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|(
literal|"related"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:marshalonlymixed"
argument_list|)
operator|.
name|marshal
argument_list|()
operator|.
name|mimeMultipart
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

