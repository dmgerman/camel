begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail.security
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  DummyTrustManager that accepts any given certificate -<b>NOT SECURE</b>.  */
end_comment

begin_class
DECL|class|DummyTrustManager
specifier|public
class|class
name|DummyTrustManager
implements|implements
name|X509TrustManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DummyTrustManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|checkClientTrusted (X509Certificate[] chain, String authType)
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|X509Certificate
index|[]
name|chain
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|CertificateException
block|{
comment|// everything is trusted
name|logCertificateChain
argument_list|(
literal|"Client"
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
DECL|method|checkServerTrusted (X509Certificate[] chain, String authType)
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|X509Certificate
index|[]
name|chain
parameter_list|,
name|String
name|authType
parameter_list|)
throws|throws
name|CertificateException
block|{
comment|// everything is trusted
name|logCertificateChain
argument_list|(
literal|"Server"
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
DECL|method|getAcceptedIssuers ()
specifier|public
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
comment|// everything is trusted
return|return
operator|new
name|X509Certificate
index|[
literal|0
index|]
return|;
block|}
DECL|method|logCertificateChain (String type, X509Certificate[] chain)
specifier|private
specifier|static
name|void
name|logCertificateChain
parameter_list|(
name|String
name|type
parameter_list|,
name|X509Certificate
index|[]
name|chain
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|X509Certificate
name|certificate
range|:
name|chain
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} certificate is trusted: {}"
argument_list|,
name|type
argument_list|,
name|certificate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

