begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.mail
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mail
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|InternetAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|mail
operator|.
name|internet
operator|.
name|MimeMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ContextTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|MailMessageTest
specifier|public
class|class
name|MailMessageTest
extends|extends
name|ContextTestSupport
block|{
DECL|field|mailSession
specifier|private
name|Session
name|mailSession
decl_stmt|;
DECL|field|mimeMessage
specifier|private
name|MimeMessage
name|mimeMessage
decl_stmt|;
DECL|field|endpoint
specifier|private
name|MailEndpoint
name|endpoint
decl_stmt|;
DECL|field|body
specifier|private
name|String
name|body
init|=
literal|"Hello World!"
decl_stmt|;
DECL|method|testMailMessageHandlesMultipleHeaders ()
specifier|public
name|void
name|testMailMessageHandlesMultipleHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|mimeMessage
operator|.
name|setRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|Address
index|[]
block|{
operator|new
name|InternetAddress
argument_list|(
literal|"foo@localhost"
argument_list|)
block|,
operator|new
name|InternetAddress
argument_list|(
literal|"bar@localhost"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|MailExchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|mimeMessage
argument_list|)
decl_stmt|;
name|MailMessage
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mail body"
argument_list|,
name|body
argument_list|,
name|in
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|to
init|=
name|in
operator|.
name|getHeader
argument_list|(
literal|"TO"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"should have 2 receivers"
argument_list|,
literal|"foo@localhost, bar@localhost"
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
DECL|method|testMailMessageHandlesSingleHeader ()
specifier|public
name|void
name|testMailMessageHandlesSingleHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|mimeMessage
operator|.
name|setRecipients
argument_list|(
name|Message
operator|.
name|RecipientType
operator|.
name|TO
argument_list|,
operator|new
name|Address
index|[]
block|{
operator|new
name|InternetAddress
argument_list|(
literal|"frank@localhost"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|MailExchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|mimeMessage
argument_list|)
decl_stmt|;
name|MailMessage
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Object
name|header
init|=
name|in
operator|.
name|getHeader
argument_list|(
literal|"TO"
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|assertIsInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|header
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
literal|"frank@localhost"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"body"
argument_list|,
name|body
argument_list|,
name|in
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|endpoint
operator|=
name|resolveMandatoryEndpoint
argument_list|(
literal|"pop3://someone@myhost:30/subject"
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"mail.smtp.host"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|mailSession
operator|=
name|Session
operator|.
name|getInstance
argument_list|(
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mimeMessage
operator|=
operator|new
name|MimeMessage
argument_list|(
name|mailSession
argument_list|)
expr_stmt|;
name|mimeMessage
operator|.
name|setText
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resolveMandatoryEndpoint (String uri)
specifier|protected
name|MailEndpoint
name|resolveMandatoryEndpoint
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|Endpoint
name|endpoint
init|=
name|super
operator|.
name|resolveMandatoryEndpoint
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
name|assertIsInstanceOf
argument_list|(
name|MailEndpoint
operator|.
name|class
argument_list|,
name|endpoint
argument_list|)
return|;
block|}
block|}
end_class

end_unit

