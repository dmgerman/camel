begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.couchdb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|couchdb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lightcouch
operator|.
name|CouchDbClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lightcouch
operator|.
name|Response
import|;
end_import

begin_class
DECL|class|CouchDbConsumerIntegrationTest
specifier|public
class|class
name|CouchDbConsumerIntegrationTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"couchdb:http://localhost:5984/camelcouchdb?deletes=false"
argument_list|)
DECL|field|from
specifier|private
name|Endpoint
name|from
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:result"
argument_list|)
DECL|field|to
specifier|private
name|MockEndpoint
name|to
decl_stmt|;
DECL|field|client
specifier|private
name|CouchDbClient
name|client
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|client
operator|=
operator|new
name|CouchDbClient
argument_list|(
literal|"camelcouchdb"
argument_list|,
literal|true
argument_list|,
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|5984
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|from
argument_list|)
operator|.
name|to
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testInsertsOnly ()
specifier|public
name|void
name|testInsertsOnly
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|to
operator|.
name|expectedHeaderReceived
argument_list|(
name|CouchDbConstants
operator|.
name|HEADER_METHOD
argument_list|,
literal|"UPDATE"
argument_list|)
expr_stmt|;
name|to
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JsonElement
name|obj
init|=
operator|new
name|Gson
argument_list|()
operator|.
name|toJsonTree
argument_list|(
literal|"{ \"randomString\" : \""
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|+
literal|"\" }"
argument_list|)
decl_stmt|;
name|Response
name|resp
init|=
name|client
operator|.
name|save
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|client
operator|.
name|remove
argument_list|(
name|resp
operator|.
name|getId
argument_list|()
argument_list|,
name|resp
operator|.
name|getRev
argument_list|()
argument_list|)
expr_stmt|;
name|to
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMessages ()
specifier|public
name|void
name|testMessages
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|messageCount
init|=
literal|100
decl_stmt|;
name|to
operator|.
name|expectedMessageCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
comment|// insert json manually into couch, camel will
comment|// then pick that up and send to mock endpoint
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|messageCount
condition|;
name|k
operator|++
control|)
block|{
name|JsonElement
name|obj
init|=
operator|new
name|Gson
argument_list|()
operator|.
name|toJsonTree
argument_list|(
literal|"{ \"randomString\" : \""
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|+
literal|"\" }"
argument_list|)
decl_stmt|;
name|client
operator|.
name|save
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|to
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

