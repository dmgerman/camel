begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.couchdb
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|couchdb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lightcouch
operator|.
name|Changes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lightcouch
operator|.
name|ChangesResult
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lightcouch
operator|.
name|CouchDbContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|lightcouch
operator|.
name|CouchDbInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
operator|.
name|initMocks
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|CouchDbChangesetTrackerTest
specifier|public
class|class
name|CouchDbChangesetTrackerTest
block|{
annotation|@
name|Mock
DECL|field|changes
specifier|private
name|Changes
name|changes
decl_stmt|;
annotation|@
name|Mock
DECL|field|client
specifier|private
name|CouchDbClientWrapper
name|client
decl_stmt|;
annotation|@
name|Mock
DECL|field|endpoint
specifier|private
name|CouchDbEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|Mock
DECL|field|consumer
specifier|private
name|CouchDbConsumer
name|consumer
decl_stmt|;
annotation|@
name|Mock
DECL|field|context
specifier|private
name|CouchDbContext
name|context
decl_stmt|;
annotation|@
name|Mock
DECL|field|info
specifier|private
name|CouchDbInfo
name|info
decl_stmt|;
annotation|@
name|Mock
DECL|field|row3
specifier|private
name|Row
name|row3
decl_stmt|;
annotation|@
name|Mock
DECL|field|row2
specifier|private
name|Row
name|row2
decl_stmt|;
annotation|@
name|Mock
DECL|field|row1
specifier|private
name|Row
name|row1
decl_stmt|;
annotation|@
name|Mock
DECL|field|exchange1
specifier|private
name|Exchange
name|exchange1
decl_stmt|;
annotation|@
name|Mock
DECL|field|exchange2
specifier|private
name|Exchange
name|exchange2
decl_stmt|;
annotation|@
name|Mock
DECL|field|exchange3
specifier|private
name|Exchange
name|exchange3
decl_stmt|;
annotation|@
name|Mock
DECL|field|processor
specifier|private
name|Processor
name|processor
decl_stmt|;
DECL|field|tracker
specifier|private
name|CouchDbChangesetTracker
name|tracker
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|isDeletes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|isUpdates
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|context
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|info
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getUpdateSeq
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|changes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|changes
operator|.
name|continuousChanges
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|changes
operator|.
name|includeDocs
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|changes
operator|.
name|since
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|changes
operator|.
name|heartBeat
argument_list|(
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|changes
operator|.
name|style
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|changes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row1
operator|.
name|getSeq
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"seq1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row2
operator|.
name|getSeq
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"seq2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row3
operator|.
name|getSeq
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"seq3"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"id1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row2
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"id2"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|row3
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"id3"
argument_list|)
expr_stmt|;
name|tracker
operator|=
operator|new
name|CouchDbChangesetTracker
argument_list|(
name|endpoint
argument_list|,
name|consumer
argument_list|,
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExchangeCreatedWithCorrectProperties ()
specifier|public
name|void
name|testExchangeCreatedWithCorrectProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|changes
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|changes
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|row1
argument_list|,
name|row2
argument_list|,
name|row3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createExchange
argument_list|(
literal|"seq1"
argument_list|,
literal|"id1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchange1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createExchange
argument_list|(
literal|"seq2"
argument_list|,
literal|"id2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchange2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|endpoint
operator|.
name|createExchange
argument_list|(
literal|"seq3"
argument_list|,
literal|"id3"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exchange3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|consumer
operator|.
name|getProcessor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|endpoint
argument_list|)
operator|.
name|createExchange
argument_list|(
literal|"seq1"
argument_list|,
literal|"id1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|process
argument_list|(
name|exchange1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|endpoint
argument_list|)
operator|.
name|createExchange
argument_list|(
literal|"seq2"
argument_list|,
literal|"id2"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|process
argument_list|(
name|exchange2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|endpoint
argument_list|)
operator|.
name|createExchange
argument_list|(
literal|"seq3"
argument_list|,
literal|"id3"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|process
argument_list|(
name|exchange3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProcessorInvoked ()
specifier|public
name|void
name|testProcessorInvoked
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|changes
operator|.
name|hasNext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|changes
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|consumer
operator|.
name|getProcessor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|processor
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|endpoint
argument_list|)
operator|.
name|createExchange
argument_list|(
literal|"seq1"
argument_list|,
literal|"id1"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|processor
argument_list|)
operator|.
name|process
argument_list|(
name|any
argument_list|(
name|Exchange
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

