begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jackson.converter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jackson
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|module
operator|.
name|jaxb
operator|.
name|JaxbAnnotationModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|FallbackConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jackson
operator|.
name|JacksonConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|TypeConverterRegistry
import|;
end_import

begin_comment
comment|/**  * Jackson {@link org.apache.camel.TypeConverter} that allows converting json to/from POJOs and other types.  *<br/>  * This implementation uses a {@link FallbackConverter}.  *<p/>  * The converter is disabled by default. To enable then set the property  * {@link JacksonConstants#ENABLE_TYPE_CONVERTER} to<tt>true</tt> on {@link CamelContext#getProperties()}.  *<br/>  * The option {@link JacksonConstants#TYPE_CONVERTER_TO_POJO} can be used to allow converting to POJO types. By  * default the converter only attempts to convert to primitive types such as String and numbers. To convert to any kind, then  * enable this by setting {@link JacksonConstants#TYPE_CONVERTER_TO_POJO} to<tt>true</tt> on {@link CamelContext#getProperties()}.  */
end_comment

begin_class
DECL|class|JacksonTypeConverters
specifier|public
specifier|final
class|class
name|JacksonTypeConverters
block|{
DECL|field|defaultMapper
specifier|private
specifier|final
name|ObjectMapper
name|defaultMapper
decl_stmt|;
DECL|field|init
specifier|private
name|boolean
name|init
decl_stmt|;
DECL|field|enabled
specifier|private
name|boolean
name|enabled
decl_stmt|;
DECL|field|toPojo
specifier|private
name|boolean
name|toPojo
decl_stmt|;
DECL|method|JacksonTypeConverters ()
specifier|public
name|JacksonTypeConverters
parameter_list|()
block|{
name|defaultMapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
comment|// Enables JAXB processing so we can easily convert JAXB annotated pojos also
name|JaxbAnnotationModule
name|module
init|=
operator|new
name|JaxbAnnotationModule
argument_list|()
decl_stmt|;
name|defaultMapper
operator|.
name|registerModule
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FallbackConverter
DECL|method|convertTo (Class<T> type, Exchange exchange, Object value, TypeConverterRegistry registry)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|convertTo
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|Exchange
name|exchange
parameter_list|,
name|Object
name|value
parameter_list|,
name|TypeConverterRegistry
name|registry
parameter_list|)
throws|throws
name|Exception
block|{
comment|// only do this if enabled (disabled by default)
if|if
condition|(
operator|!
name|init
operator|&&
name|exchange
operator|!=
literal|null
condition|)
block|{
comment|// init to see if this is enabled
name|String
name|text
init|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|JacksonConstants
operator|.
name|ENABLE_TYPE_CONVERTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|enabled
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
comment|// pojoOnly is enabled by default
name|text
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|JacksonConstants
operator|.
name|TYPE_CONVERTER_TO_POJO
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|text
operator|=
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|toPojo
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|init
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|toPojo
operator|&&
name|isNotPojoType
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|ObjectMapper
name|mapper
init|=
name|resolveObjectMapper
argument_list|(
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
argument_list|)
decl_stmt|;
comment|// favor use write/read operations as they are higher level than the convertValue
comment|// if we want to convert to a String or byte[] then use write operation
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|String
name|out
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|out
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|byte
index|[]
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|byte
index|[]
name|out
init|=
name|mapper
operator|.
name|writeValueAsBytes
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|out
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mapper
operator|.
name|canSerialize
argument_list|(
name|type
argument_list|)
condition|)
block|{
comment|// if the source value type is readable by the mapper then use its read operation
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|byte
index|[]
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|File
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|File
operator|)
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|InputStream
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|InputStream
operator|)
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Reader
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|mapper
operator|.
name|readValue
argument_list|(
operator|(
name|Reader
operator|)
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
comment|// fallback to generic convert value
return|return
name|mapper
operator|.
name|convertValue
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
comment|// Just return null to let other fallback converter to do the job
return|return
literal|null
return|;
block|}
comment|/**      * Whether the type is NOT a pojo type but only a set of simple types such as String and numbers.      */
DECL|method|isNotPojoType (Class<?> type)
specifier|private
specifier|static
name|boolean
name|isNotPojoType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|boolean
name|isString
init|=
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|boolean
name|isNumber
init|=
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|int
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|long
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|short
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|char
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|float
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
operator|||
name|double
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|isString
operator|||
name|isNumber
return|;
block|}
DECL|method|resolveObjectMapper (Registry registry)
specifier|private
name|ObjectMapper
name|resolveObjectMapper
parameter_list|(
name|Registry
name|registry
parameter_list|)
block|{
name|Set
argument_list|<
name|ObjectMapper
argument_list|>
name|mappers
init|=
name|registry
operator|.
name|findByType
argument_list|(
name|ObjectMapper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|mappers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
return|return
name|defaultMapper
return|;
block|}
block|}
end_class

end_unit

