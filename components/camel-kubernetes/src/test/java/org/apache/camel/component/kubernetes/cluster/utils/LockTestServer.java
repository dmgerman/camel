begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.cluster.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cluster
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|ConfigMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|PodBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|PodListBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|server
operator|.
name|mock
operator|.
name|KubernetesMockServer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|mockwebserver
operator|.
name|utils
operator|.
name|ResponseProvider
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|mockwebserver
operator|.
name|RecordedRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Test server to interact with Kubernetes for locking on a ConfigMap.  */
end_comment

begin_class
DECL|class|LockTestServer
specifier|public
class|class
name|LockTestServer
extends|extends
name|KubernetesMockServer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LockTestServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|refuseRequests
specifier|private
name|boolean
name|refuseRequests
decl_stmt|;
DECL|field|delayRequests
specifier|private
name|Long
name|delayRequests
decl_stmt|;
DECL|field|pods
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|pods
decl_stmt|;
DECL|method|LockTestServer (ConfigMapLockSimulator lockSimulator)
specifier|public
name|LockTestServer
parameter_list|(
name|ConfigMapLockSimulator
name|lockSimulator
parameter_list|)
block|{
name|this
argument_list|(
name|lockSimulator
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|LockTestServer (ConfigMapLockSimulator lockSimulator, Collection<String> initialPods)
specifier|public
name|LockTestServer
parameter_list|(
name|ConfigMapLockSimulator
name|lockSimulator
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|initialPods
parameter_list|)
block|{
name|this
operator|.
name|pods
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|initialPods
argument_list|)
expr_stmt|;
name|expect
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|withPath
argument_list|(
literal|"/api/v1/namespaces/test/configmaps/"
operator|+
name|lockSimulator
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
operator|.
name|andReply
argument_list|(
operator|new
name|ResponseProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|responseCode
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Headers
name|headers
init|=
operator|new
name|Headers
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|responseCode
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getBody
parameter_list|(
name|RecordedRequest
name|recordedRequest
parameter_list|)
block|{
name|delayIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
name|refuseRequests
condition|)
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|500
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
name|ConfigMap
name|map
init|=
name|lockSimulator
operator|.
name|getConfigMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|200
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
else|else
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|404
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Headers
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeaders
parameter_list|(
name|Headers
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|always
argument_list|()
expr_stmt|;
name|expect
argument_list|()
operator|.
name|post
argument_list|()
operator|.
name|withPath
argument_list|(
literal|"/api/v1/namespaces/test/configmaps"
argument_list|)
operator|.
name|andReply
argument_list|(
operator|new
name|ResponseProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|responseCode
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Headers
name|headers
init|=
operator|new
name|Headers
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|responseCode
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getBody
parameter_list|(
name|RecordedRequest
name|recordedRequest
parameter_list|)
block|{
name|delayIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
name|refuseRequests
condition|)
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|500
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
name|ConfigMap
name|map
init|=
name|convert
argument_list|(
name|recordedRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
operator|||
name|map
operator|.
name|getMetadata
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|lockSimulator
operator|.
name|getConfigMapName
argument_list|()
operator|.
name|equals
argument_list|(
name|map
operator|.
name|getMetadata
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal configMap received"
argument_list|)
throw|;
block|}
name|boolean
name|done
init|=
name|lockSimulator
operator|.
name|setConfigMap
argument_list|(
name|map
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|done
condition|)
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|201
argument_list|)
expr_stmt|;
return|return
name|lockSimulator
operator|.
name|getConfigMap
argument_list|()
return|;
block|}
else|else
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|500
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Headers
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeaders
parameter_list|(
name|Headers
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|always
argument_list|()
expr_stmt|;
name|expect
argument_list|()
operator|.
name|put
argument_list|()
operator|.
name|withPath
argument_list|(
literal|"/api/v1/namespaces/test/configmaps/"
operator|+
name|lockSimulator
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
operator|.
name|andReply
argument_list|(
operator|new
name|ResponseProvider
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|responseCode
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Headers
name|headers
init|=
operator|new
name|Headers
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|responseCode
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getBody
parameter_list|(
name|RecordedRequest
name|recordedRequest
parameter_list|)
block|{
name|delayIfNecessary
argument_list|()
expr_stmt|;
if|if
condition|(
name|refuseRequests
condition|)
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|500
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
name|ConfigMap
name|map
init|=
name|convert
argument_list|(
name|recordedRequest
argument_list|)
decl_stmt|;
name|boolean
name|done
init|=
name|lockSimulator
operator|.
name|setConfigMap
argument_list|(
name|map
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|done
condition|)
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|200
argument_list|)
expr_stmt|;
return|return
name|lockSimulator
operator|.
name|getConfigMap
argument_list|()
return|;
block|}
else|else
block|{
name|responseCode
operator|.
name|set
argument_list|(
literal|409
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Headers
name|getHeaders
parameter_list|()
block|{
return|return
name|headers
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeaders
parameter_list|(
name|Headers
name|headers
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|always
argument_list|()
expr_stmt|;
comment|// Other resources
name|expect
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|withPath
argument_list|(
literal|"/api/v1/namespaces/test/pods"
argument_list|)
operator|.
name|andReply
argument_list|(
literal|200
argument_list|,
name|request
lambda|->
operator|new
name|PodListBuilder
argument_list|()
operator|.
name|withNewMetadata
argument_list|()
operator|.
name|withResourceVersion
argument_list|(
literal|"1"
argument_list|)
operator|.
name|and
argument_list|()
operator|.
name|withItems
argument_list|(
name|getCurrentPods
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|name
lambda|->
operator|new
name|PodBuilder
argument_list|()
operator|.
name|withNewMetadata
argument_list|()
operator|.
name|withName
argument_list|(
name|name
argument_list|)
operator|.
name|and
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|always
argument_list|()
expr_stmt|;
block|}
DECL|method|isRefuseRequests ()
specifier|public
name|boolean
name|isRefuseRequests
parameter_list|()
block|{
return|return
name|refuseRequests
return|;
block|}
DECL|method|setRefuseRequests (boolean refuseRequests)
specifier|public
name|void
name|setRefuseRequests
parameter_list|(
name|boolean
name|refuseRequests
parameter_list|)
block|{
name|this
operator|.
name|refuseRequests
operator|=
name|refuseRequests
expr_stmt|;
block|}
DECL|method|getCurrentPods ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|String
argument_list|>
name|getCurrentPods
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|this
operator|.
name|pods
argument_list|)
return|;
block|}
DECL|method|removePod (String pod)
specifier|public
specifier|synchronized
name|void
name|removePod
parameter_list|(
name|String
name|pod
parameter_list|)
block|{
name|this
operator|.
name|pods
operator|.
name|remove
argument_list|(
name|pod
argument_list|)
expr_stmt|;
block|}
DECL|method|addPod (String pod)
specifier|public
specifier|synchronized
name|void
name|addPod
parameter_list|(
name|String
name|pod
parameter_list|)
block|{
name|this
operator|.
name|pods
operator|.
name|add
argument_list|(
name|pod
argument_list|)
expr_stmt|;
block|}
DECL|method|getDelayRequests ()
specifier|public
name|Long
name|getDelayRequests
parameter_list|()
block|{
return|return
name|delayRequests
return|;
block|}
DECL|method|setDelayRequests (Long delayRequests)
specifier|public
name|void
name|setDelayRequests
parameter_list|(
name|Long
name|delayRequests
parameter_list|)
block|{
name|this
operator|.
name|delayRequests
operator|=
name|delayRequests
expr_stmt|;
block|}
DECL|method|delayIfNecessary ()
specifier|private
name|void
name|delayIfNecessary
parameter_list|()
block|{
if|if
condition|(
name|delayRequests
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delayRequests
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|convert (RecordedRequest request)
specifier|private
name|ConfigMap
name|convert
parameter_list|(
name|RecordedRequest
name|request
parameter_list|)
block|{
try|try
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|request
operator|.
name|getBody
argument_list|()
operator|.
name|readByteArray
argument_list|()
argument_list|,
name|ConfigMap
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Erroneous data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

