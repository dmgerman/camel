begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.cluster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cluster
operator|.
name|lock
operator|.
name|KubernetesClusterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cluster
operator|.
name|lock
operator|.
name|TimedLeaderNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test the behavior of the timed notifier.  */
end_comment

begin_class
DECL|class|TimedLeaderNotifierTest
specifier|public
class|class
name|TimedLeaderNotifierTest
block|{
DECL|field|context
specifier|private
name|CamelContext
name|context
decl_stmt|;
DECL|field|notifier
specifier|private
name|TimedLeaderNotifier
name|notifier
decl_stmt|;
DECL|field|currentLeader
specifier|private
specifier|volatile
name|Optional
argument_list|<
name|String
argument_list|>
name|currentLeader
decl_stmt|;
DECL|field|currentMembers
specifier|private
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|currentMembers
decl_stmt|;
annotation|@
name|Before
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|notifier
operator|=
operator|new
name|TimedLeaderNotifier
argument_list|(
name|context
argument_list|,
name|e
lambda|->
block|{
if|if
condition|(
name|e
operator|instanceof
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterLeaderChangedEvent
condition|)
block|{
name|currentLeader
operator|=
operator|(
operator|(
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterLeaderChangedEvent
operator|)
name|e
operator|)
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterMemberListChangedEvent
condition|)
block|{
name|currentMembers
operator|=
operator|(
operator|(
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterMemberListChangedEvent
operator|)
name|e
operator|)
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|notifier
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|notifier
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleCalls ()
specifier|public
name|void
name|testMultipleCalls
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|50L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"two"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|50L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"three"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|5000L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"three"
argument_list|)
argument_list|,
name|currentLeader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|members
argument_list|,
name|currentMembers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpiration ()
specifier|public
name|void
name|testExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|50L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"two"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|50L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|160
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|currentLeader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|members
argument_list|,
name|currentMembers
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"three"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|5000L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"three"
argument_list|)
argument_list|,
name|currentLeader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|members
argument_list|,
name|currentMembers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMemberChanging ()
specifier|public
name|void
name|testMemberChanging
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members1
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|members2
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|)
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|50L
argument_list|,
name|members1
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"two"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|5000L
argument_list|,
name|members2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"two"
argument_list|)
argument_list|,
name|currentLeader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|members2
argument_list|,
name|currentMembers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOldData ()
specifier|public
name|void
name|testOldData
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1000L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"two"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1000
argument_list|,
literal|900L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|currentLeader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewLeaderEmpty ()
specifier|public
name|void
name|testNewLeaderEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|members
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"one"
argument_list|,
literal|"two"
argument_list|,
literal|"three"
argument_list|)
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
literal|"one"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1000L
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|refreshLeadership
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|members
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|currentLeader
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

