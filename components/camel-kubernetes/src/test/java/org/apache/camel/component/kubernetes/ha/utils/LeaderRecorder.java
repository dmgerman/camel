begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.ha.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|ha
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ha
operator|.
name|CamelClusterView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Records leadership changes and allow to do assertions.  */
end_comment

begin_class
DECL|class|LeaderRecorder
specifier|public
class|class
name|LeaderRecorder
implements|implements
name|CamelClusterEventListener
operator|.
name|Leadership
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LeaderRecorder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|leaderships
specifier|private
name|List
argument_list|<
name|LeadershipInfo
argument_list|>
name|leaderships
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|leadershipChanged (CamelClusterView view, Optional<CamelClusterMember> leader)
specifier|public
name|void
name|leadershipChanged
parameter_list|(
name|CamelClusterView
name|view
parameter_list|,
name|Optional
argument_list|<
name|CamelClusterMember
argument_list|>
name|leader
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cluster view {} - leader changed to: {}"
argument_list|,
name|view
operator|.
name|getLocalMember
argument_list|()
argument_list|,
name|leader
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaderships
operator|.
name|add
argument_list|(
operator|new
name|LeadershipInfo
argument_list|(
name|leader
operator|.
name|map
argument_list|(
name|CamelClusterMember
operator|::
name|getId
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getLeadershipInfo ()
specifier|public
name|List
argument_list|<
name|LeadershipInfo
argument_list|>
name|getLeadershipInfo
parameter_list|()
block|{
return|return
name|leaderships
return|;
block|}
DECL|method|waitForAnyLeader (long time, TimeUnit unit)
specifier|public
name|void
name|waitForAnyLeader
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|waitForLeader
argument_list|(
name|leader
lambda|->
name|leader
operator|!=
literal|null
argument_list|,
name|time
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForALeaderChange (long time, TimeUnit unit)
specifier|public
name|void
name|waitForALeaderChange
parameter_list|(
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|String
name|current
init|=
name|getCurrentLeader
argument_list|()
decl_stmt|;
name|waitForLeader
argument_list|(
name|leader
lambda|->
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|current
argument_list|,
name|leader
argument_list|)
argument_list|,
name|time
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForANewLeader (String current, long time, TimeUnit unit)
specifier|public
name|void
name|waitForANewLeader
parameter_list|(
name|String
name|current
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|waitForLeader
argument_list|(
name|leader
lambda|->
name|leader
operator|!=
literal|null
operator|&&
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|current
argument_list|,
name|leader
argument_list|)
argument_list|,
name|time
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForLeader (Predicate<String> as, long time, TimeUnit unit)
specifier|public
name|void
name|waitForLeader
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|as
parameter_list|,
name|long
name|time
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|as
operator|.
name|test
argument_list|(
name|getCurrentLeader
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|time
argument_list|,
name|unit
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Timeout while waiting for condition"
argument_list|)
expr_stmt|;
block|}
name|doWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doWait (long millis)
specifier|private
name|void
name|doWait
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getCurrentLeader ()
specifier|public
name|String
name|getCurrentLeader
parameter_list|()
block|{
if|if
condition|(
name|leaderships
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|leaderships
operator|.
name|get
argument_list|(
name|leaderships
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getLeader
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getLastTimeOf (Predicate<String> p)
specifier|public
name|Long
name|getLastTimeOf
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|p
parameter_list|)
block|{
name|List
argument_list|<
name|LeadershipInfo
argument_list|>
name|lst
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|leaderships
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|lst
argument_list|)
expr_stmt|;
for|for
control|(
name|LeadershipInfo
name|info
range|:
name|lst
control|)
block|{
if|if
condition|(
name|p
operator|.
name|test
argument_list|(
name|info
operator|.
name|getLeader
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|info
operator|.
name|getChangeTimestamp
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|LeadershipInfo
specifier|public
specifier|static
class|class
name|LeadershipInfo
block|{
DECL|field|leader
specifier|private
name|String
name|leader
decl_stmt|;
DECL|field|changeTimestamp
specifier|private
name|long
name|changeTimestamp
decl_stmt|;
DECL|method|LeadershipInfo (String leader, long changeTimestamp)
specifier|public
name|LeadershipInfo
parameter_list|(
name|String
name|leader
parameter_list|,
name|long
name|changeTimestamp
parameter_list|)
block|{
name|this
operator|.
name|leader
operator|=
name|leader
expr_stmt|;
name|this
operator|.
name|changeTimestamp
operator|=
name|changeTimestamp
expr_stmt|;
block|}
DECL|method|getLeader ()
specifier|public
name|String
name|getLeader
parameter_list|()
block|{
return|return
name|leader
return|;
block|}
DECL|method|getChangeTimestamp ()
specifier|public
name|long
name|getChangeTimestamp
parameter_list|()
block|{
return|return
name|changeTimestamp
return|;
block|}
block|}
block|}
end_class

end_unit

