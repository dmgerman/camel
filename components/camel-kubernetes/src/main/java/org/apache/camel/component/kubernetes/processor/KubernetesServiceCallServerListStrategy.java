begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|EndpointAddress
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|EndpointPort
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|AutoAdaptableKubernetesClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|KubernetesConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|remote
operator|.
name|DefaultServiceCallServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|remote
operator|.
name|DefaultServiceCallServerListStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Discovers where services are running on which servers in Kubernetes.  */
end_comment

begin_class
DECL|class|KubernetesServiceCallServerListStrategy
specifier|public
specifier|abstract
class|class
name|KubernetesServiceCallServerListStrategy
extends|extends
name|DefaultServiceCallServerListStrategy
argument_list|<
name|ServiceCallServer
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KubernetesServiceCallServerListStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FIRST
specifier|private
specifier|static
specifier|final
name|int
name|FIRST
init|=
literal|0
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|KubernetesConfiguration
name|configuration
decl_stmt|;
DECL|field|namespace
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
DECL|field|portName
specifier|private
specifier|final
name|String
name|portName
decl_stmt|;
DECL|field|client
specifier|private
name|AutoAdaptableKubernetesClient
name|client
decl_stmt|;
DECL|method|KubernetesServiceCallServerListStrategy (KubernetesConfiguration configuration)
specifier|public
name|KubernetesServiceCallServerListStrategy
parameter_list|(
name|KubernetesConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|configuration
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
condition|?
name|configuration
operator|.
name|getNamespace
argument_list|()
else|:
name|System
operator|.
name|getenv
argument_list|(
literal|"KUBERNETES_NAMESPACE"
argument_list|)
expr_stmt|;
name|this
operator|.
name|portName
operator|=
name|configuration
operator|.
name|getPortName
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"KubernetesServiceDiscovery"
return|;
block|}
DECL|method|newServer (EndpointAddress address, EndpointPort port)
specifier|protected
name|ServiceCallServer
name|newServer
parameter_list|(
name|EndpointAddress
name|address
parameter_list|,
name|EndpointPort
name|port
parameter_list|)
block|{
return|return
operator|new
name|DefaultServiceCallServer
argument_list|(
name|address
operator|.
name|getIp
argument_list|()
argument_list|,
name|port
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getConfiguration ()
specifier|protected
name|KubernetesConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|this
operator|.
name|configuration
return|;
block|}
DECL|method|getNamespace ()
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
DECL|method|getPortName ()
specifier|public
name|String
name|getPortName
parameter_list|()
block|{
return|return
name|portName
return|;
block|}
block|}
end_class

end_unit

