begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.cluster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|KubernetesConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cluster
operator|.
name|lock
operator|.
name|KubernetesLockConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|cluster
operator|.
name|AbstractCamelClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * A Kubernetes based cluster service leveraging Kubernetes optimistic locks on resources (specifically ConfigMaps).  */
end_comment

begin_class
DECL|class|KubernetesClusterService
specifier|public
class|class
name|KubernetesClusterService
extends|extends
name|AbstractCamelClusterService
argument_list|<
name|KubernetesClusterView
argument_list|>
block|{
DECL|field|configuration
specifier|private
name|KubernetesConfiguration
name|configuration
decl_stmt|;
DECL|field|lockConfiguration
specifier|private
name|KubernetesLockConfiguration
name|lockConfiguration
decl_stmt|;
DECL|method|KubernetesClusterService ()
specifier|public
name|KubernetesClusterService
parameter_list|()
block|{
name|this
operator|.
name|configuration
operator|=
operator|new
name|KubernetesConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|lockConfiguration
operator|=
operator|new
name|KubernetesLockConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|KubernetesClusterService (KubernetesConfiguration configuration)
specifier|public
name|KubernetesClusterService
parameter_list|(
name|KubernetesConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
name|this
operator|.
name|lockConfiguration
operator|=
operator|new
name|KubernetesLockConfiguration
argument_list|()
expr_stmt|;
block|}
DECL|method|KubernetesClusterService (CamelContext camelContext, KubernetesConfiguration configuration)
specifier|public
name|KubernetesClusterService
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|KubernetesConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|camelContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
operator|.
name|copy
argument_list|()
expr_stmt|;
name|this
operator|.
name|lockConfiguration
operator|=
operator|new
name|KubernetesLockConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createView (String namespace)
specifier|protected
name|KubernetesClusterView
name|createView
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|Exception
block|{
name|KubernetesLockConfiguration
name|lockConfig
init|=
name|lockConfigWithGroupNameAndDefaults
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|KubernetesConfiguration
name|config
init|=
name|setConfigDefaults
argument_list|(
name|this
operator|.
name|configuration
operator|.
name|copy
argument_list|()
argument_list|,
name|lockConfig
argument_list|)
decl_stmt|;
return|return
operator|new
name|KubernetesClusterView
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|this
argument_list|,
name|config
argument_list|,
name|lockConfig
argument_list|)
return|;
block|}
DECL|method|setConfigDefaults (KubernetesConfiguration configuration, KubernetesLockConfiguration lockConfiguration)
specifier|protected
name|KubernetesConfiguration
name|setConfigDefaults
parameter_list|(
name|KubernetesConfiguration
name|configuration
parameter_list|,
name|KubernetesLockConfiguration
name|lockConfiguration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|.
name|getConnectionTimeout
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Set the connection timeout to be much lower than the renewal deadline,
comment|// to avoid losing the leadership in case of stale connections
name|int
name|timeout
init|=
call|(
name|int
call|)
argument_list|(
name|lockConfiguration
operator|.
name|getRenewDeadlineMillis
argument_list|()
operator|/
literal|3
argument_list|)
decl_stmt|;
name|timeout
operator|=
name|Math
operator|.
name|max
argument_list|(
name|timeout
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|Math
operator|.
name|min
argument_list|(
name|timeout
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setConnectionTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
DECL|method|lockConfigWithGroupNameAndDefaults (String groupName)
specifier|protected
name|KubernetesLockConfiguration
name|lockConfigWithGroupNameAndDefaults
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|KubernetesLockConfiguration
name|config
init|=
name|this
operator|.
name|lockConfiguration
operator|.
name|copy
argument_list|()
decl_stmt|;
name|config
operator|.
name|setGroupName
argument_list|(
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|groupName
argument_list|,
literal|"groupName"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Determine the pod name if not provided
if|if
condition|(
name|config
operator|.
name|getPodName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|config
operator|.
name|setPodName
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"HOSTNAME"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getPodName
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|config
operator|.
name|setPodName
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Unable to determine pod name"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|config
operator|.
name|getConfigMapName
argument_list|()
argument_list|,
literal|"configMapName"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|config
operator|.
name|getClusterLabels
argument_list|()
argument_list|,
literal|"clusterLabels"
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getJitterFactor
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"jitterFactor must be>= 1 (found: "
operator|+
name|config
operator|.
name|getJitterFactor
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getRetryPeriodMillis
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"retryPeriodMillis must be> 0 (found: "
operator|+
name|config
operator|.
name|getRetryPeriodMillis
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getRenewDeadlineMillis
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"renewDeadlineMillis must be> 0 (found: "
operator|+
name|config
operator|.
name|getRenewDeadlineMillis
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getLeaseDurationMillis
argument_list|()
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"leaseDurationMillis must be> 0 (found: "
operator|+
name|config
operator|.
name|getLeaseDurationMillis
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getLeaseDurationMillis
argument_list|()
operator|<=
name|config
operator|.
name|getRenewDeadlineMillis
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"leaseDurationMillis must be greater than renewDeadlineMillis "
operator|+
literal|"("
operator|+
name|config
operator|.
name|getLeaseDurationMillis
argument_list|()
operator|+
literal|" is not greater than "
operator|+
name|config
operator|.
name|getRenewDeadlineMillis
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
if|if
condition|(
name|config
operator|.
name|getRenewDeadlineMillis
argument_list|()
operator|<=
name|config
operator|.
name|getJitterFactor
argument_list|()
operator|*
name|config
operator|.
name|getRetryPeriodMillis
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"renewDeadlineMillis must be greater than jitterFactor*retryPeriodMillis "
operator|+
literal|"("
operator|+
name|config
operator|.
name|getRenewDeadlineMillis
argument_list|()
operator|+
literal|" is not greater than "
operator|+
name|config
operator|.
name|getJitterFactor
argument_list|()
operator|+
literal|"*"
operator|+
name|config
operator|.
name|getRetryPeriodMillis
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|config
return|;
block|}
DECL|method|getMasterUrl ()
specifier|public
name|String
name|getMasterUrl
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getMasterUrl
argument_list|()
return|;
block|}
comment|/**      * Set the URL of the Kubernetes master (read from Kubernetes client properties by default).      */
DECL|method|setMasterUrl (String masterUrl)
specifier|public
name|void
name|setMasterUrl
parameter_list|(
name|String
name|masterUrl
parameter_list|)
block|{
name|configuration
operator|.
name|setMasterUrl
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|getConnectionTimeoutMillis ()
specifier|public
name|Integer
name|getConnectionTimeoutMillis
parameter_list|()
block|{
return|return
name|configuration
operator|.
name|getConnectionTimeout
argument_list|()
return|;
block|}
comment|/**      * Connection timeout in milliseconds to use when making requests to the Kubernetes API server.      */
DECL|method|setConnectionTimeoutMillis (Integer connectionTimeout)
specifier|public
name|void
name|setConnectionTimeoutMillis
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|configuration
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|getKubernetesNamespace ()
specifier|public
name|String
name|getKubernetesNamespace
parameter_list|()
block|{
return|return
name|this
operator|.
name|lockConfiguration
operator|.
name|getKubernetesResourcesNamespace
argument_list|()
return|;
block|}
comment|/**      * Set the name of the Kubernetes namespace containing the pods and the configmap (autodetected by default)      */
DECL|method|setKubernetesNamespace (String kubernetesNamespace)
specifier|public
name|void
name|setKubernetesNamespace
parameter_list|(
name|String
name|kubernetesNamespace
parameter_list|)
block|{
name|this
operator|.
name|lockConfiguration
operator|.
name|setKubernetesResourcesNamespace
argument_list|(
name|kubernetesNamespace
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigMapName ()
specifier|public
name|String
name|getConfigMapName
parameter_list|()
block|{
return|return
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
return|;
block|}
comment|/**      * Set the name of the ConfigMap used to do optimistic locking (defaults to 'leaders').      */
DECL|method|setConfigMapName (String configMapName)
specifier|public
name|void
name|setConfigMapName
parameter_list|(
name|String
name|configMapName
parameter_list|)
block|{
name|this
operator|.
name|lockConfiguration
operator|.
name|setConfigMapName
argument_list|(
name|configMapName
argument_list|)
expr_stmt|;
block|}
DECL|method|getPodName ()
specifier|public
name|String
name|getPodName
parameter_list|()
block|{
return|return
name|this
operator|.
name|lockConfiguration
operator|.
name|getPodName
argument_list|()
return|;
block|}
comment|/**      * Set the name of the current pod (autodetected from container host name by default).      */
DECL|method|setPodName (String podName)
specifier|public
name|void
name|setPodName
parameter_list|(
name|String
name|podName
parameter_list|)
block|{
name|this
operator|.
name|lockConfiguration
operator|.
name|setPodName
argument_list|(
name|podName
argument_list|)
expr_stmt|;
block|}
DECL|method|getClusterLabels ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getClusterLabels
parameter_list|()
block|{
return|return
name|lockConfiguration
operator|.
name|getClusterLabels
argument_list|()
return|;
block|}
comment|/**      * Set the labels used to identify the pods composing the cluster.      */
DECL|method|setClusterLabels (Map<String, String> clusterLabels)
specifier|public
name|void
name|setClusterLabels
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|clusterLabels
parameter_list|)
block|{
name|lockConfiguration
operator|.
name|setClusterLabels
argument_list|(
name|clusterLabels
argument_list|)
expr_stmt|;
block|}
DECL|method|addToClusterLabels (String key, String value)
specifier|public
name|void
name|addToClusterLabels
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|lockConfiguration
operator|.
name|addToClusterLabels
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|getJitterFactor ()
specifier|public
name|double
name|getJitterFactor
parameter_list|()
block|{
return|return
name|lockConfiguration
operator|.
name|getJitterFactor
argument_list|()
return|;
block|}
comment|/**      * A jitter factor to apply in order to prevent all pods to call Kubernetes APIs in the same instant.      */
DECL|method|setJitterFactor (double jitterFactor)
specifier|public
name|void
name|setJitterFactor
parameter_list|(
name|double
name|jitterFactor
parameter_list|)
block|{
name|lockConfiguration
operator|.
name|setJitterFactor
argument_list|(
name|jitterFactor
argument_list|)
expr_stmt|;
block|}
DECL|method|getLeaseDurationMillis ()
specifier|public
name|long
name|getLeaseDurationMillis
parameter_list|()
block|{
return|return
name|lockConfiguration
operator|.
name|getLeaseDurationMillis
argument_list|()
return|;
block|}
comment|/**      * The default duration of the lease for the current leader.      */
DECL|method|setLeaseDurationMillis (long leaseDurationMillis)
specifier|public
name|void
name|setLeaseDurationMillis
parameter_list|(
name|long
name|leaseDurationMillis
parameter_list|)
block|{
name|lockConfiguration
operator|.
name|setLeaseDurationMillis
argument_list|(
name|leaseDurationMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|getRenewDeadlineMillis ()
specifier|public
name|long
name|getRenewDeadlineMillis
parameter_list|()
block|{
return|return
name|lockConfiguration
operator|.
name|getRenewDeadlineMillis
argument_list|()
return|;
block|}
comment|/**      * The deadline after which the leader must stop its services because it may have lost the leadership.      */
DECL|method|setRenewDeadlineMillis (long renewDeadlineMillis)
specifier|public
name|void
name|setRenewDeadlineMillis
parameter_list|(
name|long
name|renewDeadlineMillis
parameter_list|)
block|{
name|lockConfiguration
operator|.
name|setRenewDeadlineMillis
argument_list|(
name|renewDeadlineMillis
argument_list|)
expr_stmt|;
block|}
DECL|method|getRetryPeriodMillis ()
specifier|public
name|long
name|getRetryPeriodMillis
parameter_list|()
block|{
return|return
name|lockConfiguration
operator|.
name|getRetryPeriodMillis
argument_list|()
return|;
block|}
comment|/**      * The time between two subsequent attempts to check and acquire the leadership.      * It is randomized using the jitter factor.      */
DECL|method|setRetryPeriodMillis (long retryPeriodMillis)
specifier|public
name|void
name|setRetryPeriodMillis
parameter_list|(
name|long
name|retryPeriodMillis
parameter_list|)
block|{
name|lockConfiguration
operator|.
name|setRetryPeriodMillis
argument_list|(
name|retryPeriodMillis
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

