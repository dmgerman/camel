begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExpressionAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|KubernetesDnsServiceCallExpression
specifier|public
class|class
name|KubernetesDnsServiceCallExpression
extends|extends
name|ExpressionAdapter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KubernetesDnsServiceCallExpression
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|namespace
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
DECL|field|scheme
specifier|private
specifier|final
name|String
name|scheme
decl_stmt|;
DECL|field|contextPath
specifier|private
specifier|final
name|String
name|contextPath
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|field|dnsDomain
specifier|private
specifier|final
name|String
name|dnsDomain
decl_stmt|;
DECL|method|KubernetesDnsServiceCallExpression (String name, String namespace, String scheme, String contextPath, String uri, String dnsDomain)
specifier|public
name|KubernetesDnsServiceCallExpression
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|scheme
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|dnsDomain
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
name|this
operator|.
name|contextPath
operator|=
name|contextPath
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|dnsDomain
operator|=
name|dnsDomain
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
return|return
name|buildCamelEndpointUri
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|uri
argument_list|,
name|contextPath
argument_list|,
name|scheme
argument_list|,
name|dnsDomain
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|buildCamelEndpointUri (String name, String namespace, String uri, String contextPath, String scheme, String dnsDomain)
specifier|protected
specifier|static
name|String
name|buildCamelEndpointUri
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|String
name|scheme
parameter_list|,
name|String
name|dnsDomain
parameter_list|)
block|{
comment|// build basic uri if none provided
name|String
name|answer
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
comment|// use http by default if no scheme has been configured
name|scheme
operator|=
literal|"http"
expr_stmt|;
block|}
name|answer
operator|=
name|scheme
operator|+
literal|"://"
operator|+
name|asKubernetesDnsServicePart
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|dnsDomain
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextPath
operator|!=
literal|null
condition|)
block|{
name|answer
operator|+=
literal|"/"
operator|+
name|contextPath
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// we have existing uri, then replace the serviceName with name.namespace.svc.dnsDomain
if|if
condition|(
name|answer
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|answer
operator|=
name|answer
operator|.
name|replaceFirst
argument_list|(
name|name
argument_list|,
name|asKubernetesDnsServicePart
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|dnsDomain
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Camel endpoint uri: {} for calling service: {}"
argument_list|,
name|answer
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|asKubernetesDnsServicePart (String name, String namespace, String dnsDomain)
specifier|protected
specifier|static
name|String
name|asKubernetesDnsServicePart
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|dnsDomain
parameter_list|)
block|{
return|return
name|name
operator|+
literal|"."
operator|+
name|namespace
operator|+
literal|".svc."
operator|+
name|dnsDomain
return|;
block|}
block|}
end_class

end_unit

