begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|KubernetesConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|remote
operator|.
name|KubernetesConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|remote
operator|.
name|ServiceCallConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|remote
operator|.
name|ServiceCallDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServerListStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_comment
comment|/**  * {@link ProcessorFactory} that creates the Kubernetes implementation of the ServiceCall EIP.  */
end_comment

begin_class
DECL|class|KubernetesProcessorFactory
specifier|public
class|class
name|KubernetesProcessorFactory
implements|implements
name|ProcessorFactory
block|{
annotation|@
name|Override
DECL|method|createChildProcessor (RouteContext routeContext, ProcessorDefinition<?> definition, boolean mandatory)
specifier|public
name|Processor
name|createChildProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|Exception
block|{
comment|// not in use
return|return
literal|null
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createProcessor (RouteContext routeContext, ProcessorDefinition<?> definition)
specifier|public
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ProcessorDefinition
argument_list|<
name|?
argument_list|>
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|definition
operator|instanceof
name|ServiceCallDefinition
condition|)
block|{
name|ServiceCallDefinition
name|sc
init|=
operator|(
name|ServiceCallDefinition
operator|)
name|definition
decl_stmt|;
name|String
name|name
init|=
name|sc
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|sc
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|ExchangePattern
name|mep
init|=
name|sc
operator|.
name|getPattern
argument_list|()
decl_stmt|;
name|KubernetesConfigurationDefinition
name|config
init|=
operator|(
name|KubernetesConfigurationDefinition
operator|)
name|sc
operator|.
name|getServiceCallConfiguration
argument_list|()
decl_stmt|;
name|KubernetesConfigurationDefinition
name|configRef
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sc
operator|.
name|getServiceCallConfigurationRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// lookup in registry first
name|configRef
operator|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|sc
operator|.
name|getServiceCallConfigurationRef
argument_list|()
argument_list|,
name|KubernetesConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|configRef
operator|==
literal|null
condition|)
block|{
comment|// and fallback as service configuration
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getServiceCallConfiguration
argument_list|(
name|sc
operator|.
name|getServiceCallConfigurationRef
argument_list|()
argument_list|,
name|KubernetesConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if no configuration explicit configured then use default
if|if
condition|(
name|config
operator|==
literal|null
operator|&&
name|configRef
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getServiceCallConfiguration
argument_list|(
literal|null
argument_list|,
name|KubernetesConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// if no default then try to find if there configuration in the registry of the given type
name|Set
argument_list|<
name|KubernetesConfigurationDefinition
argument_list|>
name|set
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|KubernetesConfigurationDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|config
operator|=
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|config
operator|==
literal|null
operator|&&
name|configRef
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The ServiceCall: "
operator|+
name|definition
operator|+
literal|" must be configured before it can be used."
argument_list|)
throw|;
block|}
comment|// extract the properties from the configuration from the model
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|configRef
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|configRef
argument_list|,
name|parameters
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|config
argument_list|,
name|parameters
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// and set them on the kubernetes configuration class
name|KubernetesConfiguration
name|kc
init|=
operator|new
name|KubernetesConfiguration
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|kc
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
comment|// use namespace from config
name|String
name|namespace
init|=
name|kc
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
comment|// lookup the load balancer to use (configured on EIP takes precedence vs configured on configuration)
name|ServiceCallLoadBalancer
name|lb
init|=
name|configureLoadBalancer
argument_list|(
name|routeContext
argument_list|,
name|sc
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|configureLoadBalancer
argument_list|(
name|routeContext
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|configureLoadBalancer
argument_list|(
name|routeContext
argument_list|,
name|configRef
argument_list|)
expr_stmt|;
block|}
comment|// lookup the server list strategy to use (configured on EIP takes precedence vs configured on configuration)
name|ServiceCallServerListStrategy
name|sl
init|=
name|configureServerListStrategy
argument_list|(
name|routeContext
argument_list|,
name|sc
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|sl
operator|=
name|configureServerListStrategy
argument_list|(
name|routeContext
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sl
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|sl
operator|=
name|configureServerListStrategy
argument_list|(
name|routeContext
argument_list|,
name|configRef
argument_list|)
expr_stmt|;
block|}
name|String
name|lookup
init|=
name|config
operator|!=
literal|null
condition|?
name|config
operator|.
name|getLookup
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|lookup
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|lookup
operator|=
name|configRef
operator|.
name|getLookup
argument_list|()
expr_stmt|;
block|}
comment|// the component is used to configure what the default scheme to use (eg camel component name)
name|String
name|component
init|=
name|config
operator|!=
literal|null
condition|?
name|config
operator|.
name|getComponent
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|component
operator|=
name|configRef
operator|.
name|getComponent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"client"
operator|.
name|equals
argument_list|(
name|lookup
argument_list|)
condition|)
block|{
name|KubernetesClientServiceCallProcessor
name|processor
init|=
operator|new
name|KubernetesClientServiceCallProcessor
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|component
argument_list|,
name|uri
argument_list|,
name|mep
argument_list|,
name|kc
argument_list|)
decl_stmt|;
name|processor
operator|.
name|setLoadBalancer
argument_list|(
name|lb
argument_list|)
expr_stmt|;
name|processor
operator|.
name|setServerListStrategy
argument_list|(
name|sl
argument_list|)
expr_stmt|;
return|return
name|processor
return|;
block|}
elseif|else
if|if
condition|(
literal|"dns"
operator|.
name|equals
argument_list|(
name|lookup
argument_list|)
condition|)
block|{
name|String
name|dnsDomain
init|=
name|config
operator|!=
literal|null
condition|?
name|config
operator|.
name|getDnsDomain
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|dnsDomain
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|dnsDomain
operator|=
name|configRef
operator|.
name|getDnsDomain
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|KubernetesDnsServiceCallProcessor
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|component
argument_list|,
name|uri
argument_list|,
name|mep
argument_list|,
name|dnsDomain
argument_list|)
return|;
block|}
else|else
block|{
comment|// environment is default
return|return
operator|new
name|KubernetesEnvironmentServiceCallProcessor
argument_list|(
name|name
argument_list|,
name|namespace
argument_list|,
name|component
argument_list|,
name|uri
argument_list|,
name|mep
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|configureLoadBalancer (RouteContext routeContext, ServiceCallDefinition sd)
specifier|private
name|ServiceCallLoadBalancer
name|configureLoadBalancer
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ServiceCallDefinition
name|sd
parameter_list|)
block|{
name|ServiceCallLoadBalancer
name|lb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|sd
operator|.
name|getLoadBalancer
argument_list|()
expr_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|sd
operator|.
name|getLoadBalancerRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|sd
operator|.
name|getLoadBalancerRef
argument_list|()
decl_stmt|;
comment|// special for ref is referring to built-in
if|if
condition|(
literal|"random"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|lb
operator|=
operator|new
name|RandomLoadBalancer
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"roundrobin"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|lb
operator|=
operator|new
name|RoundRobinBalancer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lb
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|ref
argument_list|,
name|ServiceCallLoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|lb
return|;
block|}
DECL|method|configureLoadBalancer (RouteContext routeContext, ServiceCallConfigurationDefinition config)
specifier|private
name|ServiceCallLoadBalancer
name|configureLoadBalancer
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|)
block|{
name|ServiceCallLoadBalancer
name|lb
init|=
name|config
operator|.
name|getLoadBalancer
argument_list|()
decl_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|config
operator|.
name|getLoadBalancerRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|config
operator|.
name|getLoadBalancerRef
argument_list|()
decl_stmt|;
comment|// special for ref is referring to built-in
if|if
condition|(
literal|"random"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|lb
operator|=
operator|new
name|RandomLoadBalancer
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"roundrobin"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|lb
operator|=
operator|new
name|RoundRobinBalancer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|lb
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|ref
argument_list|,
name|ServiceCallLoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lb
return|;
block|}
DECL|method|configureServerListStrategy (RouteContext routeContext, ServiceCallDefinition sd)
specifier|private
name|ServiceCallServerListStrategy
name|configureServerListStrategy
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ServiceCallDefinition
name|sd
parameter_list|)
block|{
name|ServiceCallServerListStrategy
name|lb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sd
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|sd
operator|.
name|getServerListStrategy
argument_list|()
expr_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|sd
operator|.
name|getServerListStrategyRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|sd
operator|.
name|getServerListStrategyRef
argument_list|()
argument_list|,
name|ServiceCallServerListStrategy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lb
return|;
block|}
DECL|method|configureServerListStrategy (RouteContext routeContext, ServiceCallConfigurationDefinition config)
specifier|private
name|ServiceCallServerListStrategy
name|configureServerListStrategy
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|)
block|{
name|ServiceCallServerListStrategy
name|lb
init|=
name|config
operator|.
name|getServerListStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|config
operator|.
name|getServerListStrategyRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|config
operator|.
name|getServerListStrategyRef
argument_list|()
decl_stmt|;
name|lb
operator|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|routeContext
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|ref
argument_list|,
name|ServiceCallServerListStrategy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|lb
return|;
block|}
block|}
end_class

end_unit

