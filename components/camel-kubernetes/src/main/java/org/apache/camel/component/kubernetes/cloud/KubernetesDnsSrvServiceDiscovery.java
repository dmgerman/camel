begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|InitialDirContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|KubernetesConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Discovers where services are running on which servers in Kubernetes.  */
end_comment

begin_class
DECL|class|KubernetesDnsSrvServiceDiscovery
specifier|public
class|class
name|KubernetesDnsSrvServiceDiscovery
extends|extends
name|KubernetesServiceDiscovery
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
decl_stmt|;
DECL|field|ATTRIBUTE_IDS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ATTRIBUTE_IDS
decl_stmt|;
DECL|field|ENV
specifier|private
specifier|static
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ENV
decl_stmt|;
static|static
block|{
name|LOGGER
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KubernetesDnsSrvServiceDiscovery
operator|.
name|class
argument_list|)
expr_stmt|;
name|ATTRIBUTE_IDS
operator|=
operator|new
name|String
index|[]
block|{
literal|"SRV"
block|}
expr_stmt|;
name|ENV
operator|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
expr_stmt|;
name|ENV
operator|.
name|put
argument_list|(
literal|"java.naming.factory.initial"
argument_list|,
literal|"com.sun.jndi.dns.DnsContextFactory"
argument_list|)
expr_stmt|;
name|ENV
operator|.
name|put
argument_list|(
literal|"java.naming.provider.url"
argument_list|,
literal|"dns:"
argument_list|)
expr_stmt|;
block|}
DECL|field|namespace
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
DECL|field|portName
specifier|private
specifier|final
name|String
name|portName
decl_stmt|;
DECL|field|portProtocol
specifier|private
specifier|final
name|String
name|portProtocol
decl_stmt|;
DECL|field|zone
specifier|private
specifier|final
name|String
name|zone
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
decl_stmt|;
DECL|method|KubernetesDnsSrvServiceDiscovery (KubernetesConfiguration configuration)
specifier|public
name|KubernetesDnsSrvServiceDiscovery
parameter_list|(
name|KubernetesConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|configuration
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
condition|?
name|configuration
operator|.
name|getNamespace
argument_list|()
else|:
name|System
operator|.
name|getenv
argument_list|(
literal|"KUBERNETES_NAMESPACE"
argument_list|)
expr_stmt|;
name|this
operator|.
name|portName
operator|=
name|configuration
operator|.
name|getPortName
argument_list|()
expr_stmt|;
name|this
operator|.
name|portProtocol
operator|=
name|configuration
operator|.
name|getPortProtocol
argument_list|()
expr_stmt|;
name|this
operator|.
name|zone
operator|=
name|configuration
operator|.
name|getDnsDomain
argument_list|()
expr_stmt|;
comment|// validation
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|namespace
argument_list|,
literal|"Namespace"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|portName
argument_list|,
literal|"Port Name"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|portProtocol
argument_list|,
literal|"Port Protocol"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|zone
argument_list|,
literal|"DNS Domain"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Compute the query string to lookup SRV records.      * https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#supported-dns-schema      * https://github.com/kubernetes/dns/blob/master/docs/specification.md      *      * @param serviceName the service name      * @return the query      */
DECL|method|computeQueryString (String serviceName)
specifier|protected
name|String
name|computeQueryString
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
comment|// _<port_name>._<port_proto>.<serviceName>.<namespace>.svc.<zone>.
return|return
name|String
operator|.
name|format
argument_list|(
literal|"_%s._%s.%s.%s.svc.%s"
argument_list|,
name|this
operator|.
name|portName
argument_list|,
name|this
operator|.
name|portProtocol
argument_list|,
name|serviceName
argument_list|,
name|this
operator|.
name|namespace
argument_list|,
name|this
operator|.
name|zone
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getServices (String name)
specifier|public
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|getServices
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|query
init|=
name|cache
operator|.
name|computeIfAbsent
argument_list|(
name|name
argument_list|,
name|this
operator|::
name|computeQueryString
argument_list|)
decl_stmt|;
specifier|final
name|DirContext
name|ctx
init|=
operator|new
name|InitialDirContext
argument_list|(
name|ENV
argument_list|)
decl_stmt|;
specifier|final
name|NamingEnumeration
argument_list|<
name|?
argument_list|>
name|resolved
init|=
name|ctx
operator|.
name|getAttributes
argument_list|(
name|query
argument_list|,
name|ATTRIBUTE_IDS
argument_list|)
operator|.
name|get
argument_list|(
literal|"srv"
argument_list|)
operator|.
name|getAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolved
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ServiceDefinition
argument_list|>
name|servers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|resolved
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|String
name|record
init|=
operator|(
name|String
operator|)
name|resolved
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|items
init|=
name|record
operator|.
name|split
argument_list|(
literal|" "
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|items
index|[
literal|3
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|port
init|=
name|items
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|host
argument_list|)
operator|||
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|port
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Found service address {}:{} for query: {}"
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|servers
operator|.
name|add
argument_list|(
operator|new
name|DefaultServiceDefinition
argument_list|(
name|name
argument_list|,
name|host
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|servers
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Could not find any service for name={}, query={}"
argument_list|,
name|name
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not resolve services via DNSSRV"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"KubernetesDnsSrvServiceDiscovery{"
operator|+
literal|"namespace='"
operator|+
name|namespace
operator|+
literal|'\''
operator|+
literal|", portName='"
operator|+
name|portName
operator|+
literal|'\''
operator|+
literal|", portProtocol='"
operator|+
name|portProtocol
operator|+
literal|'\''
operator|+
literal|", zone='"
operator|+
name|zone
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

