begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.ha.lock
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|ha
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|ConfigMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|ConfigMapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utilities for managing ConfigMaps that contain lock information.  */
end_comment

begin_class
DECL|class|ConfigMapLockUtils
specifier|public
specifier|final
class|class
name|ConfigMapLockUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigMapLockUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DATE_TIME_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|DATE_TIME_FORMAT
init|=
literal|"yyyy-MM-dd'T'HH:mm:ssX"
decl_stmt|;
DECL|field|LEADER_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LEADER_PREFIX
init|=
literal|"leader.pod."
decl_stmt|;
DECL|field|LOCAL_TIMESTAMP_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|LOCAL_TIMESTAMP_PREFIX
init|=
literal|"leader.local.timestamp."
decl_stmt|;
DECL|method|ConfigMapLockUtils ()
specifier|private
name|ConfigMapLockUtils
parameter_list|()
block|{     }
DECL|method|createNewConfigMap (String configMapName, LeaderInfo leaderInfo)
specifier|public
specifier|static
name|ConfigMap
name|createNewConfigMap
parameter_list|(
name|String
name|configMapName
parameter_list|,
name|LeaderInfo
name|leaderInfo
parameter_list|)
block|{
return|return
operator|new
name|ConfigMapBuilder
argument_list|()
operator|.
name|withNewMetadata
argument_list|()
operator|.
name|withName
argument_list|(
name|configMapName
argument_list|)
operator|.
name|addToLabels
argument_list|(
literal|"provider"
argument_list|,
literal|"camel"
argument_list|)
operator|.
name|addToLabels
argument_list|(
literal|"kind"
argument_list|,
literal|"locks"
argument_list|)
operator|.
name|endMetadata
argument_list|()
operator|.
name|addToData
argument_list|(
name|LEADER_PREFIX
operator|+
name|leaderInfo
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|leaderInfo
operator|.
name|getLeader
argument_list|()
argument_list|)
operator|.
name|addToData
argument_list|(
name|LOCAL_TIMESTAMP_PREFIX
operator|+
name|leaderInfo
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|formatDate
argument_list|(
name|leaderInfo
operator|.
name|getLocalTimestamp
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getConfigMapWithNewLeader (ConfigMap configMap, LeaderInfo leaderInfo)
specifier|public
specifier|static
name|ConfigMap
name|getConfigMapWithNewLeader
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|,
name|LeaderInfo
name|leaderInfo
parameter_list|)
block|{
return|return
operator|new
name|ConfigMapBuilder
argument_list|(
name|configMap
argument_list|)
operator|.
name|addToData
argument_list|(
name|LEADER_PREFIX
operator|+
name|leaderInfo
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|leaderInfo
operator|.
name|getLeader
argument_list|()
argument_list|)
operator|.
name|addToData
argument_list|(
name|LOCAL_TIMESTAMP_PREFIX
operator|+
name|leaderInfo
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|formatDate
argument_list|(
name|leaderInfo
operator|.
name|getLocalTimestamp
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getLeaderInfo (ConfigMap configMap, Set<String> members, String group)
specifier|public
specifier|static
name|LeaderInfo
name|getLeaderInfo
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|members
parameter_list|,
name|String
name|group
parameter_list|)
block|{
return|return
operator|new
name|LeaderInfo
argument_list|(
name|group
argument_list|,
name|getLeader
argument_list|(
name|configMap
argument_list|,
name|group
argument_list|)
argument_list|,
name|getLocalTimestamp
argument_list|(
name|configMap
argument_list|,
name|group
argument_list|)
argument_list|,
name|members
argument_list|)
return|;
block|}
DECL|method|getLeader (ConfigMap configMap, String group)
specifier|private
specifier|static
name|String
name|getLeader
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|,
name|String
name|group
parameter_list|)
block|{
return|return
name|getConfigMapValue
argument_list|(
name|configMap
argument_list|,
name|LEADER_PREFIX
operator|+
name|group
argument_list|)
return|;
block|}
DECL|method|formatDate (Date date)
specifier|private
specifier|static
name|String
name|formatDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_TIME_FORMAT
argument_list|)
operator|.
name|format
argument_list|(
name|date
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to format date '"
operator|+
name|date
operator|+
literal|"' using format "
operator|+
name|DATE_TIME_FORMAT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getLocalTimestamp (ConfigMap configMap, String group)
specifier|private
specifier|static
name|Date
name|getLocalTimestamp
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|String
name|timestamp
init|=
name|getConfigMapValue
argument_list|(
name|configMap
argument_list|,
name|LOCAL_TIMESTAMP_PREFIX
operator|+
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
name|DATE_TIME_FORMAT
argument_list|)
operator|.
name|parse
argument_list|(
name|timestamp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to parse time string '"
operator|+
name|timestamp
operator|+
literal|"' using format "
operator|+
name|DATE_TIME_FORMAT
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getConfigMapValue (ConfigMap configMap, String key)
specifier|private
specifier|static
name|String
name|getConfigMapValue
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|configMap
operator|==
literal|null
operator|||
name|configMap
operator|.
name|getData
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|configMap
operator|.
name|getData
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

