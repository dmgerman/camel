begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|ConfigBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|DefaultKubernetesClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|KubernetesClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|consumer
operator|.
name|KubernetesNamespacesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|consumer
operator|.
name|KubernetesNodesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|consumer
operator|.
name|KubernetesPodsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|consumer
operator|.
name|KubernetesReplicationControllersConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|consumer
operator|.
name|KubernetesServicesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesBuildConfigsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesBuildsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesConfigMapsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesNamespacesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesNodesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesPersistentVolumesClaimsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesPersistentVolumesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesPodsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesReplicationControllersProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesResourcesQuotaProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesSecretsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesServiceAccountsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|producer
operator|.
name|KubernetesServicesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The kubernetes component allows to work with Kubernetes PaaS.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.17.0"
argument_list|,
name|scheme
operator|=
literal|"kubernetes"
argument_list|,
name|title
operator|=
literal|"Kubernetes"
argument_list|,
name|syntax
operator|=
literal|"kubernetes:masterUrl"
argument_list|,
name|label
operator|=
literal|"container,cloud,paas"
argument_list|)
DECL|class|KubernetesEndpoint
specifier|public
class|class
name|KubernetesEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KubernetesEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|KubernetesConfiguration
name|configuration
decl_stmt|;
DECL|field|client
specifier|private
specifier|transient
name|KubernetesClient
name|client
decl_stmt|;
DECL|method|KubernetesEndpoint (String uri, KubernetesComponent component, KubernetesConfiguration config)
specifier|public
name|KubernetesEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|KubernetesComponent
name|component
parameter_list|,
name|KubernetesConfiguration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|configuration
operator|.
name|getCategory
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A producer category must be specified"
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|category
init|=
name|configuration
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|KubernetesCategory
operator|.
name|NAMESPACES
case|:
return|return
operator|new
name|KubernetesNamespacesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SERVICES
case|:
return|return
operator|new
name|KubernetesServicesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|REPLICATION_CONTROLLERS
case|:
return|return
operator|new
name|KubernetesReplicationControllersProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|PODS
case|:
return|return
operator|new
name|KubernetesPodsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|PERSISTENT_VOLUMES
case|:
return|return
operator|new
name|KubernetesPersistentVolumesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|PERSISTENT_VOLUMES_CLAIMS
case|:
return|return
operator|new
name|KubernetesPersistentVolumesClaimsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SECRETS
case|:
return|return
operator|new
name|KubernetesSecretsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|RESOURCES_QUOTA
case|:
return|return
operator|new
name|KubernetesResourcesQuotaProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SERVICE_ACCOUNTS
case|:
return|return
operator|new
name|KubernetesServiceAccountsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|NODES
case|:
return|return
operator|new
name|KubernetesNodesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|CONFIGMAPS
case|:
return|return
operator|new
name|KubernetesConfigMapsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|BUILDS
case|:
return|return
operator|new
name|KubernetesBuildsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|BUILD_CONFIGS
case|:
return|return
operator|new
name|KubernetesBuildConfigsProducer
argument_list|(
name|this
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The "
operator|+
name|category
operator|+
literal|" producer category doesn't exist"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|configuration
operator|.
name|getCategory
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A consumer category must be specified"
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|category
init|=
name|configuration
operator|.
name|getCategory
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|KubernetesCategory
operator|.
name|PODS
case|:
return|return
operator|new
name|KubernetesPodsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SERVICES
case|:
return|return
operator|new
name|KubernetesServicesConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|REPLICATION_CONTROLLERS
case|:
return|return
operator|new
name|KubernetesReplicationControllersConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|NAMESPACES
case|:
return|return
operator|new
name|KubernetesNamespacesConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|NODES
case|:
return|return
operator|new
name|KubernetesNodesConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The "
operator|+
name|category
operator|+
literal|" consumer category doesn't exist"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|client
operator|=
name|configuration
operator|.
name|getKubernetesClient
argument_list|()
operator|!=
literal|null
condition|?
name|configuration
operator|.
name|getKubernetesClient
argument_list|()
else|:
name|createKubernetesClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createExecutor ()
specifier|public
name|ExecutorService
name|createExecutor
parameter_list|()
block|{
return|return
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newFixedThreadPool
argument_list|(
name|this
argument_list|,
literal|"KubernetesConsumer"
argument_list|,
name|configuration
operator|.
name|getPoolSize
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getKubernetesClient ()
specifier|public
name|KubernetesClient
name|getKubernetesClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**      * The kubernetes Configuration      */
DECL|method|getKubernetesConfiguration ()
specifier|public
name|KubernetesConfiguration
name|getKubernetesConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|createKubernetesClient ()
specifier|private
name|KubernetesClient
name|createKubernetesClient
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create Kubernetes client with the following Configuration: "
operator|+
name|configuration
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigBuilder
name|builder
init|=
operator|new
name|ConfigBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|withMasterUrl
argument_list|(
name|configuration
operator|.
name|getMasterUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|)
operator|&&
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|configuration
operator|.
name|getOauthToken
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withUsername
argument_list|(
name|configuration
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|withPassword
argument_list|(
name|configuration
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getOauthToken
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withOauthToken
argument_list|(
name|configuration
operator|.
name|getOauthToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getCaCertData
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withCaCertData
argument_list|(
name|configuration
operator|.
name|getCaCertData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getCaCertFile
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withCaCertFile
argument_list|(
name|configuration
operator|.
name|getCaCertFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getClientCertData
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withClientCertData
argument_list|(
name|configuration
operator|.
name|getClientCertData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getClientCertFile
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withClientCertFile
argument_list|(
name|configuration
operator|.
name|getClientCertFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getApiVersion
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withApiVersion
argument_list|(
name|configuration
operator|.
name|getApiVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getClientKeyAlgo
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withClientKeyAlgo
argument_list|(
name|configuration
operator|.
name|getClientKeyAlgo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getClientKeyData
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withClientKeyData
argument_list|(
name|configuration
operator|.
name|getClientKeyData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getClientKeyFile
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withClientKeyFile
argument_list|(
name|configuration
operator|.
name|getClientKeyFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getClientKeyPassphrase
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withClientKeyPassphrase
argument_list|(
name|configuration
operator|.
name|getClientKeyPassphrase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getTrustCerts
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|withTrustCerts
argument_list|(
name|configuration
operator|.
name|getTrustCerts
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Config
name|conf
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|DefaultKubernetesClient
argument_list|(
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

