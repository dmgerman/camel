begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|config_maps
operator|.
name|KubernetesConfigMapsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|namespaces
operator|.
name|KubernetesNamespacesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|namespaces
operator|.
name|KubernetesNamespacesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|nodes
operator|.
name|KubernetesNodesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|nodes
operator|.
name|KubernetesNodesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|persistent_volumes
operator|.
name|KubernetesPersistentVolumesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|persistent_volumes_claims
operator|.
name|KubernetesPersistentVolumesClaimsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|pods
operator|.
name|KubernetesPodsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|pods
operator|.
name|KubernetesPodsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|replication_controllers
operator|.
name|KubernetesReplicationControllersConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|replication_controllers
operator|.
name|KubernetesReplicationControllersProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|resources_quota
operator|.
name|KubernetesResourcesQuotaProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|secrets
operator|.
name|KubernetesSecretsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|service_accounts
operator|.
name|KubernetesServiceAccountsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|services
operator|.
name|KubernetesServicesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|services
operator|.
name|KubernetesServicesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openshift
operator|.
name|build_configs
operator|.
name|OpenshiftBuildConfigsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|openshift
operator|.
name|builds
operator|.
name|OpenshiftBuildsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Use splitted kubernetes components instead of this composite component.  * @deprecated  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.17.0"
argument_list|,
name|scheme
operator|=
literal|"kubernetes"
argument_list|,
name|title
operator|=
literal|"Kubernetes"
argument_list|,
name|syntax
operator|=
literal|"kubernetes:masterUrl"
argument_list|,
name|label
operator|=
literal|"container,cloud,paas"
argument_list|)
DECL|class|KubernetesEndpoint
specifier|public
class|class
name|KubernetesEndpoint
extends|extends
name|AbstractKubernetesEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KubernetesEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|enums
operator|=
literal|"namespaces,services,replicationControllers,pods,persistentVolumes,persistentVolumesClaims,secrets,resourcesQuota,serviceAccounts,nodes,configMaps,builds,buildConfigs"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|category
specifier|private
name|String
name|category
decl_stmt|;
DECL|method|KubernetesEndpoint (String uri, KubernetesComponent component, KubernetesConfiguration config)
specifier|public
name|KubernetesEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|KubernetesComponent
name|component
parameter_list|,
name|KubernetesConfiguration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|category
operator|=
name|config
operator|.
name|getCategory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|category
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A producer category must be specified"
argument_list|)
throw|;
block|}
else|else
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|KubernetesCategory
operator|.
name|NAMESPACES
case|:
return|return
operator|new
name|KubernetesNamespacesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SERVICES
case|:
return|return
operator|new
name|KubernetesServicesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|REPLICATION_CONTROLLERS
case|:
return|return
operator|new
name|KubernetesReplicationControllersProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|PODS
case|:
return|return
operator|new
name|KubernetesPodsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|PERSISTENT_VOLUMES
case|:
return|return
operator|new
name|KubernetesPersistentVolumesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|PERSISTENT_VOLUMES_CLAIMS
case|:
return|return
operator|new
name|KubernetesPersistentVolumesClaimsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SECRETS
case|:
return|return
operator|new
name|KubernetesSecretsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|RESOURCES_QUOTA
case|:
return|return
operator|new
name|KubernetesResourcesQuotaProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SERVICE_ACCOUNTS
case|:
return|return
operator|new
name|KubernetesServiceAccountsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|NODES
case|:
return|return
operator|new
name|KubernetesNodesProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|CONFIGMAPS
case|:
return|return
operator|new
name|KubernetesConfigMapsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|BUILDS
case|:
return|return
operator|new
name|OpenshiftBuildsProducer
argument_list|(
name|this
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|BUILD_CONFIGS
case|:
return|return
operator|new
name|OpenshiftBuildConfigsProducer
argument_list|(
name|this
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The "
operator|+
name|category
operator|+
literal|" producer category doesn't exist"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|category
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A consumer category must be specified"
argument_list|)
throw|;
block|}
else|else
block|{
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|KubernetesCategory
operator|.
name|PODS
case|:
return|return
operator|new
name|KubernetesPodsConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|SERVICES
case|:
return|return
operator|new
name|KubernetesServicesConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|REPLICATION_CONTROLLERS
case|:
return|return
operator|new
name|KubernetesReplicationControllersConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|NAMESPACES
case|:
return|return
operator|new
name|KubernetesNamespacesConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
case|case
name|KubernetesCategory
operator|.
name|NODES
case|:
return|return
operator|new
name|KubernetesNodesConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The "
operator|+
name|category
operator|+
literal|" consumer category doesn't exist"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Kubernetes Producer and Consumer category      */
DECL|method|getCategory ()
specifier|public
name|String
name|getCategory
parameter_list|()
block|{
return|return
name|category
return|;
block|}
DECL|method|setCategory (String category)
specifier|public
name|void
name|setCategory
parameter_list|(
name|String
name|category
parameter_list|)
block|{
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
block|}
block|}
end_class

end_unit

