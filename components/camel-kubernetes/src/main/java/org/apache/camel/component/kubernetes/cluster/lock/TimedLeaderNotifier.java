begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.cluster.lock
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|cluster
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Receives information about the current leader and handles expiration  * automatically.  */
end_comment

begin_class
DECL|class|TimedLeaderNotifier
specifier|public
class|class
name|TimedLeaderNotifier
implements|implements
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimedLeaderNotifier
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FIXED_DELAY
specifier|private
specifier|static
specifier|final
name|long
name|FIXED_DELAY
init|=
literal|10
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|handler
specifier|private
name|KubernetesClusterEventHandler
name|handler
decl_stmt|;
DECL|field|lock
specifier|private
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|executor
specifier|private
name|ScheduledExecutorService
name|executor
decl_stmt|;
DECL|field|lastCommunicatedLeader
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|lastCommunicatedLeader
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|lastCommunicatedMembers
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|lastCommunicatedMembers
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
DECL|field|currentLeader
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|currentLeader
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|currentMembers
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|currentMembers
decl_stmt|;
DECL|field|timestamp
specifier|private
name|Long
name|timestamp
decl_stmt|;
DECL|field|lease
specifier|private
name|Long
name|lease
decl_stmt|;
DECL|field|changeCounter
specifier|private
name|long
name|changeCounter
decl_stmt|;
DECL|method|TimedLeaderNotifier (CamelContext camelContext, KubernetesClusterEventHandler handler)
specifier|public
name|TimedLeaderNotifier
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|KubernetesClusterEventHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|camelContext
argument_list|,
literal|"Camel context must be present"
argument_list|)
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|handler
argument_list|,
literal|"Handler must be present"
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshLeadership (Optional<String> leader, Long timestamp, Long lease, Set<String> members)
specifier|public
name|void
name|refreshLeadership
parameter_list|(
name|Optional
argument_list|<
name|String
argument_list|>
name|leader
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|Long
name|lease
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|members
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|leader
argument_list|,
literal|"leader must be non null (use Optional.empty)"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|members
argument_list|,
literal|"members must be non null (use empty set)"
argument_list|)
expr_stmt|;
name|long
name|version
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentLeader
operator|=
name|leader
expr_stmt|;
name|this
operator|.
name|currentMembers
operator|=
name|members
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|lease
operator|=
name|lease
expr_stmt|;
name|version
operator|=
operator|++
name|changeCounter
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updated leader to {} at version version {}"
argument_list|,
name|leader
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|checkAndNotify
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|leader
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
name|Math
operator|.
name|max
argument_list|(
name|timestamp
operator|+
name|lease
operator|+
name|FIXED_DELAY
operator|-
name|time
argument_list|,
name|FIXED_DELAY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting expiration in {} millis for version {}"
argument_list|,
name|delay
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|.
name|schedule
argument_list|(
parameter_list|()
lambda|->
name|expiration
argument_list|(
name|version
argument_list|)
argument_list|,
name|delay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|executor
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|executor
operator|=
name|camelContext
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"CamelKubernetesLeaderNotifier"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|executor
operator|!=
literal|null
condition|)
block|{
name|ScheduledExecutorService
name|executor
init|=
name|this
operator|.
name|executor
decl_stmt|;
name|this
operator|.
name|executor
operator|=
literal|null
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
try|try
block|{
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
DECL|method|expiration (long version)
specifier|private
name|void
name|expiration
parameter_list|(
name|long
name|version
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|this
operator|.
name|changeCounter
condition|)
block|{
return|return;
block|}
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|<
name|this
operator|.
name|timestamp
operator|+
name|this
operator|.
name|lease
condition|)
block|{
name|long
name|delay
init|=
name|this
operator|.
name|timestamp
operator|+
name|this
operator|.
name|lease
operator|-
name|time
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delaying expiration by {} millis at version version {}"
argument_list|,
name|delay
operator|+
name|FIXED_DELAY
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|.
name|schedule
argument_list|(
parameter_list|()
lambda|->
name|expiration
argument_list|(
name|version
argument_list|)
argument_list|,
name|delay
operator|+
name|FIXED_DELAY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|checkAndNotify
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAndNotify (long version)
specifier|private
name|void
name|checkAndNotify
parameter_list|(
name|long
name|version
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|leader
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|members
decl_stmt|;
try|try
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|!=
name|this
operator|.
name|changeCounter
condition|)
block|{
return|return;
block|}
name|leader
operator|=
name|this
operator|.
name|currentLeader
expr_stmt|;
name|members
operator|=
name|this
operator|.
name|currentMembers
expr_stmt|;
if|if
condition|(
name|leader
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|>=
name|this
operator|.
name|timestamp
operator|+
name|this
operator|.
name|lease
condition|)
block|{
name|leader
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|newLeader
init|=
name|leader
decl_stmt|;
if|if
condition|(
operator|!
name|newLeader
operator|.
name|equals
argument_list|(
name|lastCommunicatedLeader
argument_list|)
condition|)
block|{
name|lastCommunicatedLeader
operator|=
name|newLeader
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The cluster has a new leader: {}"
argument_list|,
name|newLeader
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|onKubernetesClusterEvent
argument_list|(
operator|new
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterLeaderChangedEvent
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getData
parameter_list|()
block|{
return|return
name|newLeader
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while communicating the new leader to the handler"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|newMembers
init|=
name|members
decl_stmt|;
if|if
condition|(
operator|!
name|newMembers
operator|.
name|equals
argument_list|(
name|lastCommunicatedMembers
argument_list|)
condition|)
block|{
name|lastCommunicatedMembers
operator|=
name|newMembers
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The list of cluster members has changed: {}"
argument_list|,
name|newMembers
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|onKubernetesClusterEvent
argument_list|(
operator|new
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterMemberListChangedEvent
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getData
parameter_list|()
block|{
return|return
name|newMembers
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while communicating the cluster members to the handler"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

