begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.ha.lock
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|ha
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|ConfigMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|KubernetesClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|KubernetesClientException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|Watch
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Monitors continuously the configmap to detect changes in leadership.  * It calls the callback eventHandlers only when the leader changes w.r.t. the previous invocation.  */
end_comment

begin_class
DECL|class|KubernetesLeaderMonitor
class|class
name|KubernetesLeaderMonitor
implements|implements
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KubernetesLeaderMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serializedExecutor
specifier|private
name|ScheduledExecutorService
name|serializedExecutor
decl_stmt|;
DECL|field|kubernetesClient
specifier|private
name|KubernetesClient
name|kubernetesClient
decl_stmt|;
DECL|field|lockConfiguration
specifier|private
name|KubernetesLockConfiguration
name|lockConfiguration
decl_stmt|;
DECL|field|eventHandlers
specifier|private
name|List
argument_list|<
name|KubernetesClusterEventHandler
argument_list|>
name|eventHandlers
decl_stmt|;
DECL|field|watch
specifier|private
name|Watch
name|watch
decl_stmt|;
DECL|field|terminated
specifier|private
name|boolean
name|terminated
decl_stmt|;
DECL|field|refreshing
specifier|private
name|boolean
name|refreshing
decl_stmt|;
DECL|field|latestConfigMap
specifier|private
name|ConfigMap
name|latestConfigMap
decl_stmt|;
DECL|method|KubernetesLeaderMonitor (ScheduledExecutorService serializedExecutor, KubernetesClient kubernetesClient, KubernetesLockConfiguration lockConfiguration)
specifier|public
name|KubernetesLeaderMonitor
parameter_list|(
name|ScheduledExecutorService
name|serializedExecutor
parameter_list|,
name|KubernetesClient
name|kubernetesClient
parameter_list|,
name|KubernetesLockConfiguration
name|lockConfiguration
parameter_list|)
block|{
name|this
operator|.
name|serializedExecutor
operator|=
name|serializedExecutor
expr_stmt|;
name|this
operator|.
name|kubernetesClient
operator|=
name|kubernetesClient
expr_stmt|;
name|this
operator|.
name|lockConfiguration
operator|=
name|lockConfiguration
expr_stmt|;
name|this
operator|.
name|eventHandlers
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|addClusterEventHandler (KubernetesClusterEventHandler leaderEventHandler)
specifier|public
name|void
name|addClusterEventHandler
parameter_list|(
name|KubernetesClusterEventHandler
name|leaderEventHandler
parameter_list|)
block|{
name|this
operator|.
name|eventHandlers
operator|.
name|add
argument_list|(
name|leaderEventHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|terminated
operator|=
literal|false
expr_stmt|;
name|serializedExecutor
operator|.
name|execute
argument_list|(
name|this
operator|::
name|startWatch
argument_list|)
expr_stmt|;
name|serializedExecutor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|doPoll
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|recreationDelay
init|=
name|lockConfiguration
operator|.
name|getWatchRefreshIntervalSecondsOrDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|recreationDelay
operator|>
literal|0
condition|)
block|{
name|serializedExecutor
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|this
operator|::
name|refresh
argument_list|,
name|recreationDelay
argument_list|,
name|recreationDelay
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|terminated
operator|=
literal|true
expr_stmt|;
name|Watch
name|watch
init|=
name|this
operator|.
name|watch
decl_stmt|;
if|if
condition|(
name|watch
operator|!=
literal|null
condition|)
block|{
name|watch
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|serializedExecutor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
operator|!
name|terminated
condition|)
block|{
name|refreshing
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|doPoll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Watch
name|w
init|=
name|this
operator|.
name|watch
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
comment|// It will be recreated
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|refreshing
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|startWatch ()
specifier|private
name|void
name|startWatch
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting ConfigMap watcher for monitoring the current leader"
argument_list|)
expr_stmt|;
name|this
operator|.
name|watch
operator|=
name|kubernetesClient
operator|.
name|configMaps
argument_list|()
operator|.
name|inNamespace
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getKubernetesResourcesNamespaceOrDefault
argument_list|(
name|kubernetesClient
argument_list|)
argument_list|)
operator|.
name|withName
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
operator|.
name|watch
argument_list|(
operator|new
name|Watcher
argument_list|<
name|ConfigMap
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|eventReceived
parameter_list|(
name|Action
name|action
parameter_list|,
name|ConfigMap
name|configMap
parameter_list|)
block|{
switch|switch
condition|(
name|action
condition|)
block|{
case|case
name|MODIFIED
case|:
case|case
name|DELETED
case|:
case|case
name|ADDED
case|:
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received update from watch on ConfigMap {}"
argument_list|,
name|configMap
argument_list|)
expr_stmt|;
name|serializedExecutor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|checkAndNotify
argument_list|(
name|configMap
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|KubernetesClientException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|terminated
condition|)
block|{
name|KubernetesLeaderMonitor
operator|.
name|this
operator|.
name|watch
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|refreshing
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Refreshing ConfigMap watcher..."
argument_list|)
expr_stmt|;
name|serializedExecutor
operator|.
name|execute
argument_list|(
name|KubernetesLeaderMonitor
operator|.
name|this
operator|::
name|startWatch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ConfigMap watcher has been closed unexpectedly. Recreating it in 1 second..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|serializedExecutor
operator|.
name|schedule
argument_list|(
name|KubernetesLeaderMonitor
operator|.
name|this
operator|::
name|startWatch
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to watch for configmap changes. Retrying in 5 seconds..."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while trying to watch the configmap"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|this
operator|.
name|serializedExecutor
operator|.
name|schedule
argument_list|(
name|this
operator|::
name|startWatch
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doPoll (boolean retry)
specifier|private
name|void
name|doPoll
parameter_list|(
name|boolean
name|retry
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting poll to get configmap {}"
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigMap
name|configMap
decl_stmt|;
try|try
block|{
name|configMap
operator|=
name|pollConfigMap
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|retry
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ConfigMap poll failed. Retrying in 5 seconds..."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|this
operator|.
name|serializedExecutor
operator|.
name|schedule
argument_list|(
parameter_list|()
lambda|->
name|doPoll
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ConfigMap poll failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|checkAndNotify
argument_list|(
name|configMap
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAndNotify (ConfigMap candidateConfigMap)
specifier|private
name|void
name|checkAndNotify
parameter_list|(
name|ConfigMap
name|candidateConfigMap
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking configMap {}"
argument_list|,
name|candidateConfigMap
argument_list|)
expr_stmt|;
name|ConfigMap
name|newConfigMap
init|=
name|newest
argument_list|(
name|this
operator|.
name|latestConfigMap
argument_list|,
name|candidateConfigMap
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|leader
init|=
name|extractLeader
argument_list|(
name|newConfigMap
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|oldLeader
init|=
name|extractLeader
argument_list|(
name|this
operator|.
name|latestConfigMap
argument_list|)
decl_stmt|;
name|this
operator|.
name|latestConfigMap
operator|=
name|newConfigMap
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The new leader is {}. Old leader was {}"
argument_list|,
name|leader
argument_list|,
name|oldLeader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|leader
operator|.
name|equals
argument_list|(
name|oldLeader
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Notifying the new leader to all eventHandlers"
argument_list|)
expr_stmt|;
for|for
control|(
name|KubernetesClusterEventHandler
name|eventHandler
range|:
name|eventHandlers
control|)
block|{
name|eventHandler
operator|.
name|onKubernetesClusterEvent
argument_list|(
call|(
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterLeaderChangedEvent
call|)
argument_list|()
operator|->
name|leader
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Leader has not changed"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|pollConfigMap ()
specifier|private
name|ConfigMap
name|pollConfigMap
parameter_list|()
block|{
return|return
name|kubernetesClient
operator|.
name|configMaps
argument_list|()
operator|.
name|inNamespace
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getKubernetesResourcesNamespaceOrDefault
argument_list|(
name|kubernetesClient
argument_list|)
argument_list|)
operator|.
name|withName
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|extractLeader (ConfigMap configMap)
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|extractLeader
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|leader
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
if|if
condition|(
name|configMap
operator|!=
literal|null
operator|&&
name|configMap
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|leader
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|configMap
operator|.
name|getData
argument_list|()
operator|.
name|get
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|leader
return|;
block|}
DECL|method|newest (ConfigMap configMap1, ConfigMap configMap2)
specifier|private
name|ConfigMap
name|newest
parameter_list|(
name|ConfigMap
name|configMap1
parameter_list|,
name|ConfigMap
name|configMap2
parameter_list|)
block|{
name|ConfigMap
name|newest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configMap1
operator|!=
literal|null
operator|&&
name|configMap2
operator|==
literal|null
condition|)
block|{
name|newest
operator|=
name|configMap1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configMap1
operator|==
literal|null
operator|&&
name|configMap2
operator|!=
literal|null
condition|)
block|{
name|newest
operator|=
name|configMap2
expr_stmt|;
block|}
if|if
condition|(
name|newest
operator|==
literal|null
condition|)
block|{
name|String
name|rv1
init|=
name|extractResourceVersion
argument_list|(
name|configMap1
argument_list|)
decl_stmt|;
name|String
name|rv2
init|=
name|extractResourceVersion
argument_list|(
name|configMap2
argument_list|)
decl_stmt|;
name|newest
operator|=
name|newest
argument_list|(
name|configMap1
argument_list|,
name|configMap2
argument_list|,
name|rv1
argument_list|,
name|rv2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newest
operator|==
literal|null
condition|)
block|{
name|String
name|ct1
init|=
name|extractCreationTimestamp
argument_list|(
name|configMap1
argument_list|)
decl_stmt|;
name|String
name|ct2
init|=
name|extractCreationTimestamp
argument_list|(
name|configMap2
argument_list|)
decl_stmt|;
comment|// timestamps are string-comparable
name|newest
operator|=
name|newest
argument_list|(
name|configMap1
argument_list|,
name|configMap2
argument_list|,
name|ct1
argument_list|,
name|ct2
argument_list|)
expr_stmt|;
block|}
return|return
name|newest
return|;
block|}
DECL|method|newest (ConfigMap configMap1, ConfigMap configMap2, T cmp1, T cmp2)
specifier|private
parameter_list|<
name|T
extends|extends
name|Comparable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|ConfigMap
name|newest
parameter_list|(
name|ConfigMap
name|configMap1
parameter_list|,
name|ConfigMap
name|configMap2
parameter_list|,
name|T
name|cmp1
parameter_list|,
name|T
name|cmp2
parameter_list|)
block|{
if|if
condition|(
name|cmp1
operator|!=
literal|null
operator|&&
name|cmp2
operator|!=
literal|null
condition|)
block|{
name|int
name|comp
init|=
name|cmp1
operator|.
name|compareTo
argument_list|(
name|cmp2
argument_list|)
decl_stmt|;
if|if
condition|(
name|comp
operator|>
literal|0
condition|)
block|{
return|return
name|configMap1
return|;
block|}
else|else
block|{
return|return
name|configMap2
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|extractResourceVersion (ConfigMap configMap)
specifier|private
name|String
name|extractResourceVersion
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|)
block|{
if|if
condition|(
name|configMap
operator|!=
literal|null
operator|&&
name|configMap
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|configMap
operator|.
name|getMetadata
argument_list|()
operator|.
name|getResourceVersion
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|extractCreationTimestamp (ConfigMap configMap)
specifier|private
name|String
name|extractCreationTimestamp
parameter_list|(
name|ConfigMap
name|configMap
parameter_list|)
block|{
if|if
condition|(
name|configMap
operator|!=
literal|null
operator|&&
name|configMap
operator|.
name|getMetadata
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|configMap
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreationTimestamp
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

