begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.kubernetes.ha.lock
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|kubernetes
operator|.
name|ha
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|ConfigMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|api
operator|.
name|model
operator|.
name|ConfigMapBuilder
import|;
end_import

begin_import
import|import
name|io
operator|.
name|fabric8
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|KubernetesClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Start the monitors and participate to leader election when no active leaders are present.  * It communicates changes in leadership and cluster members to the given event handler.  */
end_comment

begin_class
DECL|class|KubernetesLeadershipController
specifier|public
class|class
name|KubernetesLeadershipController
implements|implements
name|Service
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KubernetesLeadershipController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|kubernetesClient
specifier|private
name|KubernetesClient
name|kubernetesClient
decl_stmt|;
DECL|field|lockConfiguration
specifier|private
name|KubernetesLockConfiguration
name|lockConfiguration
decl_stmt|;
DECL|field|executor
specifier|private
name|ScheduledExecutorService
name|executor
decl_stmt|;
DECL|field|leaderMonitor
specifier|private
name|KubernetesLeaderMonitor
name|leaderMonitor
decl_stmt|;
DECL|field|membersMonitor
specifier|private
name|KubernetesMembersMonitor
name|membersMonitor
decl_stmt|;
DECL|field|currentLeader
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|currentLeader
decl_stmt|;
DECL|field|currentMembers
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|currentMembers
decl_stmt|;
DECL|field|eventHandler
specifier|private
name|KubernetesClusterEventHandler
name|eventHandler
decl_stmt|;
DECL|method|KubernetesLeadershipController (KubernetesClient kubernetesClient, KubernetesLockConfiguration lockConfiguration, KubernetesClusterEventHandler eventHandler)
specifier|public
name|KubernetesLeadershipController
parameter_list|(
name|KubernetesClient
name|kubernetesClient
parameter_list|,
name|KubernetesLockConfiguration
name|lockConfiguration
parameter_list|,
name|KubernetesClusterEventHandler
name|eventHandler
parameter_list|)
block|{
name|this
operator|.
name|kubernetesClient
operator|=
name|kubernetesClient
expr_stmt|;
name|this
operator|.
name|lockConfiguration
operator|=
name|lockConfiguration
expr_stmt|;
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
name|this
operator|.
name|currentLeader
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentMembers
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|executor
operator|==
literal|null
condition|)
block|{
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
comment|// No concurrency
name|leaderMonitor
operator|=
operator|new
name|KubernetesLeaderMonitor
argument_list|(
name|this
operator|.
name|executor
argument_list|,
name|this
operator|.
name|kubernetesClient
argument_list|,
name|this
operator|.
name|lockConfiguration
argument_list|)
expr_stmt|;
name|membersMonitor
operator|=
operator|new
name|KubernetesMembersMonitor
argument_list|(
name|this
operator|.
name|executor
argument_list|,
name|this
operator|.
name|kubernetesClient
argument_list|,
name|this
operator|.
name|lockConfiguration
argument_list|)
expr_stmt|;
name|leaderMonitor
operator|.
name|addClusterEventHandler
argument_list|(
name|e
lambda|->
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|onLeaderChanged
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventHandler
operator|!=
literal|null
condition|)
block|{
name|leaderMonitor
operator|.
name|addClusterEventHandler
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
block|}
name|membersMonitor
operator|.
name|addClusterEventHandler
argument_list|(
name|e
lambda|->
name|executor
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
name|onMembersChanged
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventHandler
operator|!=
literal|null
condition|)
block|{
name|membersMonitor
operator|.
name|addClusterEventHandler
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
block|}
comment|// Start all services
name|leaderMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|membersMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Fire a new election if possible
name|executor
operator|.
name|execute
argument_list|(
name|this
operator|::
name|runLeaderElection
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|membersMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|leaderMonitor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|membersMonitor
operator|=
literal|null
expr_stmt|;
name|leaderMonitor
operator|=
literal|null
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|onLeaderChanged (KubernetesClusterEvent e)
specifier|private
name|void
name|onLeaderChanged
parameter_list|(
name|KubernetesClusterEvent
name|e
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|newLeader
init|=
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterLeaderChangedEvent
operator|.
name|class
operator|.
name|cast
argument_list|(
name|e
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newLeader
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|this
operator|::
name|tryLeaderElection
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|currentLeader
operator|=
name|newLeader
expr_stmt|;
block|}
DECL|method|onMembersChanged (KubernetesClusterEvent e)
specifier|private
name|void
name|onMembersChanged
parameter_list|(
name|KubernetesClusterEvent
name|e
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newMembers
init|=
name|KubernetesClusterEvent
operator|.
name|KubernetesClusterMemberListChangedEvent
operator|.
name|class
operator|.
name|cast
argument_list|(
name|e
argument_list|)
operator|.
name|getData
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentLeader
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// Check if the current leader is still present in the list
if|if
condition|(
operator|!
name|newMembers
operator|.
name|contains
argument_list|(
name|currentLeader
operator|.
name|get
argument_list|()
argument_list|)
operator|&&
name|currentMembers
operator|.
name|contains
argument_list|(
name|currentLeader
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|this
operator|::
name|runLeaderElection
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|currentMembers
operator|=
name|newMembers
expr_stmt|;
block|}
DECL|method|runLeaderElection ()
specifier|private
name|void
name|runLeaderElection
parameter_list|()
block|{
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
try|try
block|{
name|finished
operator|=
name|tryLeaderElection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while trying to acquire the leadership"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|finished
condition|)
block|{
name|executor
operator|.
name|schedule
argument_list|(
name|this
operator|::
name|runLeaderElection
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|tryLeaderElection ()
specifier|private
name|boolean
name|tryLeaderElection
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting leader election"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currentMembers
operator|.
name|contains
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getPodName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"The current pod ({}) is not in the list of participating pods {}. Cannot participate to the election"
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getPodName
argument_list|()
argument_list|,
name|currentMembers
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|ConfigMap
name|configMap
init|=
name|kubernetesClient
operator|.
name|configMaps
argument_list|()
operator|.
name|inNamespace
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getKubernetesResourcesNamespaceOrDefault
argument_list|(
name|kubernetesClient
argument_list|)
argument_list|)
operator|.
name|withName
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|configMap
operator|==
literal|null
condition|)
block|{
comment|// No configmap created so far
name|LOG
operator|.
name|info
argument_list|(
literal|"Lock configmap is not present in the Kubernetes namespace. A new ConfigMap will be created"
argument_list|)
expr_stmt|;
name|ConfigMap
name|newConfigMap
init|=
operator|new
name|ConfigMapBuilder
argument_list|()
operator|.
name|withNewMetadata
argument_list|()
operator|.
name|withName
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
operator|.
name|addToLabels
argument_list|(
literal|"provider"
argument_list|,
literal|"camel"
argument_list|)
operator|.
name|addToLabels
argument_list|(
literal|"kind"
argument_list|,
literal|"locks"
argument_list|)
operator|.
name|endMetadata
argument_list|()
operator|.
name|addToData
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getPodName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|kubernetesClient
operator|.
name|configMaps
argument_list|()
operator|.
name|inNamespace
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getKubernetesResourcesNamespaceOrDefault
argument_list|(
name|kubernetesClient
argument_list|)
argument_list|)
operator|.
name|create
argument_list|(
name|newConfigMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Suppress exception
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to create the ConfigMap, it may have been created by other cluster members concurrently. If the problem persists, check if the service account has the right "
operator|+
literal|"permissions to create it"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception while trying to create the ConfigMap"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Lock configmap already present in the Kubernetes namespace. Checking..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|leaders
init|=
name|configMap
operator|.
name|getData
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|oldLeader
init|=
name|leaders
operator|!=
literal|null
condition|?
name|Optional
operator|.
name|ofNullable
argument_list|(
name|leaders
operator|.
name|get
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|)
argument_list|)
else|:
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
name|boolean
name|noLeaderPresent
init|=
operator|!
name|oldLeader
operator|.
name|isPresent
argument_list|()
operator|||
operator|!
name|currentMembers
operator|.
name|contains
argument_list|(
name|oldLeader
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|alreadyLeader
init|=
name|oldLeader
operator|.
name|isPresent
argument_list|()
operator|&&
name|oldLeader
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getPodName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|noLeaderPresent
operator|&&
operator|!
name|alreadyLeader
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to acquire the lock in configmap={}, key={}"
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigMap
name|newConfigMap
init|=
operator|new
name|ConfigMapBuilder
argument_list|(
name|configMap
argument_list|)
operator|.
name|addToData
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getPodName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|kubernetesClient
operator|.
name|configMaps
argument_list|()
operator|.
name|inNamespace
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getKubernetesResourcesNamespaceOrDefault
argument_list|(
name|kubernetesClient
argument_list|)
argument_list|)
operator|.
name|withName
argument_list|(
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|)
operator|.
name|lockResourceVersion
argument_list|(
name|configMap
operator|.
name|getMetadata
argument_list|()
operator|.
name|getResourceVersion
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
name|newConfigMap
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Lock acquired for configmap={}, key={}"
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|noLeaderPresent
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"A leader is already present for configmap={}, key={}: {}"
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|oldLeader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"This pod ({}) is already the leader for configmap={}, key={}"
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getPodName
argument_list|()
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getConfigMapName
argument_list|()
argument_list|,
name|this
operator|.
name|lockConfiguration
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

