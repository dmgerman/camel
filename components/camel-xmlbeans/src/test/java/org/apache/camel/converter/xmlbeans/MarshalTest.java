begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.converter.xmlbeans
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|converter
operator|.
name|xmlbeans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|samples
operator|.
name|services
operator|.
name|xsd
operator|.
name|BuyStocksDocument
import|;
end_import

begin_import
import|import
name|samples
operator|.
name|services
operator|.
name|xsd
operator|.
name|BuyStocksDocument
operator|.
name|BuyStocks
import|;
end_import

begin_import
import|import
name|samples
operator|.
name|services
operator|.
name|xsd
operator|.
name|Order
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|MarshalTest
specifier|public
class|class
name|MarshalTest
block|{
DECL|field|dataFormat
specifier|private
name|XmlBeansDataFormat
name|dataFormat
decl_stmt|;
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|dataFormat
operator|=
operator|new
name|XmlBeansDataFormat
argument_list|()
expr_stmt|;
name|this
operator|.
name|exchange
operator|=
operator|new
name|DefaultExchange
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|marshal ()
specifier|public
name|void
name|marshal
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|marshal
argument_list|(
name|exchange
argument_list|,
name|createBuyStocksDocument
argument_list|()
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|assertBuyStocksXml
argument_list|(
operator|new
name|String
argument_list|(
name|outputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|marshalConcurrent ()
specifier|public
name|void
name|marshalConcurrent
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|outputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|dataFormat
operator|.
name|marshal
argument_list|(
name|exchange
argument_list|,
name|createBuyStocksDocument
argument_list|()
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|assertBuyStocksXml
argument_list|(
operator|new
name|String
argument_list|(
name|outputStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// make sure all results are checked and right
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBuyStocksXml (String result)
specifier|private
name|void
name|assertBuyStocksXml
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<xsd:buyStocks xmlns:xsd=\"http://services.samples/xsd\">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<order>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<symbol>IBM</symbol>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<buyerID>cmueller</buyerID>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"<price>140.34</price>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"volume>2000</volume>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"</order>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|contains
argument_list|(
literal|"</xsd:buyStocks>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createBuyStocksDocument ()
specifier|private
name|BuyStocksDocument
name|createBuyStocksDocument
parameter_list|()
block|{
name|BuyStocksDocument
name|document
init|=
name|BuyStocksDocument
operator|.
name|Factory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|BuyStocks
name|payload
init|=
name|document
operator|.
name|addNewBuyStocks
argument_list|()
decl_stmt|;
name|Order
name|order
init|=
name|payload
operator|.
name|addNewOrder
argument_list|()
decl_stmt|;
name|order
operator|.
name|setSymbol
argument_list|(
literal|"IBM"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setBuyerID
argument_list|(
literal|"cmueller"
argument_list|)
expr_stmt|;
name|order
operator|.
name|setPrice
argument_list|(
literal|140.34
argument_list|)
expr_stmt|;
name|order
operator|.
name|setVolume
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
return|return
name|document
return|;
block|}
block|}
end_class

end_unit

