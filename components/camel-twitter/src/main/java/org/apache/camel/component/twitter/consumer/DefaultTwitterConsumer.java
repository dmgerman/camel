begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|AbstractTwitterEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|streaming
operator|.
name|AbstractStreamingConsumerHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_comment
comment|/**  * Provides a scheduled polling consumer as well as event based consumer for streaming.  */
end_comment

begin_class
DECL|class|DefaultTwitterConsumer
specifier|public
class|class
name|DefaultTwitterConsumer
extends|extends
name|ScheduledPollConsumer
implements|implements
name|TwitterEventListener
block|{
DECL|field|DEFAULT_CONSUMER_DELAY
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CONSUMER_DELAY
init|=
literal|30
operator|*
literal|1000L
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|AbstractTwitterEndpoint
name|endpoint
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|AbstractTwitterConsumerHandler
name|handler
decl_stmt|;
DECL|method|DefaultTwitterConsumer (AbstractTwitterEndpoint endpoint, Processor processor, AbstractTwitterConsumerHandler handler)
specifier|public
name|DefaultTwitterConsumer
parameter_list|(
name|AbstractTwitterEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|AbstractTwitterConsumerHandler
name|handler
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|setDelay
argument_list|(
name|DEFAULT_CONSUMER_DELAY
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|AbstractTwitterEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|AbstractTwitterEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|endpoint
operator|.
name|getEndpointType
argument_list|()
condition|)
block|{
case|case
name|POLLING
case|:
if|if
condition|(
name|handler
operator|instanceof
name|AbstractStreamingConsumerHandler
condition|)
block|{
operator|(
operator|(
name|AbstractStreamingConsumerHandler
operator|)
name|handler
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|EVENT
case|:
if|if
condition|(
name|handler
operator|instanceof
name|AbstractStreamingConsumerHandler
condition|)
block|{
operator|(
operator|(
name|AbstractStreamingConsumerHandler
operator|)
name|handler
operator|)
operator|.
name|setEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AbstractStreamingConsumerHandler
operator|)
name|handler
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|handler
operator|.
name|directConsume
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exchanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|endpoint
operator|.
name|getEndpointType
argument_list|()
condition|)
block|{
case|case
name|POLLING
case|:
if|if
condition|(
name|handler
operator|instanceof
name|AbstractStreamingConsumerHandler
condition|)
block|{
operator|(
operator|(
name|AbstractStreamingConsumerHandler
operator|)
name|handler
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|EVENT
case|:
if|if
condition|(
name|handler
operator|instanceof
name|AbstractStreamingConsumerHandler
condition|)
block|{
operator|(
operator|(
name|AbstractStreamingConsumerHandler
operator|)
name|handler
operator|)
operator|.
name|removeEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AbstractStreamingConsumerHandler
operator|)
name|handler
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|handler
operator|.
name|pollConsume
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|index
operator|<
name|exchanges
operator|.
name|size
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchanges
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|onEvent (Exchange exchange)
specifier|public
name|void
name|onEvent
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isRunAllowed
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"Error processing exchange on status update"
argument_list|,
name|exchange
argument_list|,
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

