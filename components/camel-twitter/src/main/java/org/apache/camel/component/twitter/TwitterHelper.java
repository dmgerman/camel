begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|TwitterConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|directmessage
operator|.
name|DirectMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|search
operator|.
name|SearchConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|streaming
operator|.
name|FilterStreamingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|streaming
operator|.
name|SampleStreamingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|streaming
operator|.
name|UserStreamingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|timeline
operator|.
name|HomeConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|timeline
operator|.
name|MentionsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|timeline
operator|.
name|RetweetsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|timeline
operator|.
name|UserConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|data
operator|.
name|ConsumerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|data
operator|.
name|StreamingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|data
operator|.
name|TimelineType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|producer
operator|.
name|DirectMessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|producer
operator|.
name|SearchProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|producer
operator|.
name|TwitterProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|producer
operator|.
name|UserProducer
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|User
import|;
end_import

begin_class
DECL|class|TwitterHelper
specifier|public
specifier|final
class|class
name|TwitterHelper
block|{
DECL|field|TWITTER_SCHEMA_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TWITTER_SCHEMA_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"twitter:(//)*"
argument_list|)
decl_stmt|;
DECL|field|TWITTER_OPTIONS_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|TWITTER_OPTIONS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\?.*"
argument_list|)
decl_stmt|;
DECL|method|TwitterHelper ()
specifier|private
name|TwitterHelper
parameter_list|()
block|{     }
DECL|method|setUserHeader (Exchange exchange, User user)
specifier|public
specifier|static
name|void
name|setUserHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|setUserHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|setUserHeader (Message message, User user)
specifier|public
specifier|static
name|void
name|setUserHeader
parameter_list|(
name|Message
name|message
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|setUserHeader (Exchange exchange, int index, User user, String role)
specifier|public
specifier|static
name|void
name|setUserHeader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|int
name|index
parameter_list|,
name|User
name|user
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|setUserHeader
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|index
argument_list|,
name|user
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
DECL|method|setUserHeader (Message message, int index, User user, String role)
specifier|public
specifier|static
name|void
name|setUserHeader
parameter_list|(
name|Message
name|message
parameter_list|,
name|int
name|index
parameter_list|,
name|User
name|user
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_USER
operator|+
name|index
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_USER_ROLE
operator|+
name|index
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
DECL|method|createConsumer (TwitterEndpoint te, String uri)
specifier|public
specifier|static
name|TwitterConsumer
name|createConsumer
parameter_list|(
name|TwitterEndpoint
name|te
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
index|[]
name|uriSplit
init|=
name|splitUri
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|ConsumerType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
case|case
name|DIRECTMESSAGE
case|:
return|return
operator|new
name|DirectMessageConsumer
argument_list|(
name|te
argument_list|)
return|;
case|case
name|SEARCH
case|:
name|boolean
name|hasNoKeywords
init|=
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getKeywords
argument_list|()
operator|==
literal|null
operator|||
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getKeywords
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasNoKeywords
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type set to SEARCH but no keywords were provided."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|SearchConsumer
argument_list|(
name|te
argument_list|)
return|;
block|}
case|case
name|STREAMING
case|:
switch|switch
condition|(
name|StreamingType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
case|case
name|SAMPLE
case|:
return|return
operator|new
name|SampleStreamingConsumer
argument_list|(
name|te
argument_list|)
return|;
case|case
name|FILTER
case|:
return|return
operator|new
name|FilterStreamingConsumer
argument_list|(
name|te
argument_list|)
return|;
case|case
name|USER
case|:
return|return
operator|new
name|UserStreamingConsumer
argument_list|(
name|te
argument_list|)
return|;
default|default:
break|break;
block|}
break|break;
case|case
name|TIMELINE
case|:
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|1
condition|)
block|{
switch|switch
condition|(
name|TimelineType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
case|case
name|HOME
case|:
return|return
operator|new
name|HomeConsumer
argument_list|(
name|te
argument_list|)
return|;
case|case
name|MENTIONS
case|:
return|return
operator|new
name|MentionsConsumer
argument_list|(
name|te
argument_list|)
return|;
case|case
name|RETWEETSOFME
case|:
return|return
operator|new
name|RetweetsConsumer
argument_list|(
name|te
argument_list|)
return|;
case|case
name|USER
case|:
if|if
condition|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getUser
argument_list|()
operator|==
literal|null
operator|||
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Fetch type set to USER TIMELINE but no user was set."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|UserConsumer
argument_list|(
name|te
argument_list|)
return|;
block|}
default|default:
break|break;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any consumer with uri "
operator|+
name|uri
operator|+
literal|". A consumer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
DECL|method|createProducer (TwitterEndpoint te, String uri)
specifier|public
specifier|static
name|TwitterProducer
name|createProducer
parameter_list|(
name|TwitterEndpoint
name|te
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|String
index|[]
name|uriSplit
init|=
name|splitUri
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|0
condition|)
block|{
switch|switch
condition|(
name|ConsumerType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
case|case
name|DIRECTMESSAGE
case|:
if|if
condition|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getUser
argument_list|()
operator|==
literal|null
operator|||
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Producer type set to DIRECT MESSAGE but no recipient user was set."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|DirectMessageProducer
argument_list|(
name|te
argument_list|)
return|;
block|}
case|case
name|TIMELINE
case|:
if|if
condition|(
name|uriSplit
operator|.
name|length
operator|>
literal|1
condition|)
block|{
switch|switch
condition|(
name|TimelineType
operator|.
name|fromUri
argument_list|(
name|uriSplit
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
case|case
name|USER
case|:
return|return
operator|new
name|UserProducer
argument_list|(
name|te
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
break|break;
case|case
name|SEARCH
case|:
return|return
operator|new
name|SearchProducer
argument_list|(
name|te
argument_list|)
return|;
default|default:
break|break;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any producer with uri "
operator|+
name|uri
operator|+
literal|". A producer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
DECL|method|splitUri (String uri)
specifier|private
specifier|static
name|String
index|[]
name|splitUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|uri
operator|=
name|TWITTER_SCHEMA_PATTERN
operator|.
name|matcher
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|uri
operator|=
name|TWITTER_OPTIONS_PATTERN
operator|.
name|matcher
argument_list|(
name|uri
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|uri
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
return|;
block|}
DECL|method|enumFromString (T[] values, String uri, T defaultValue)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|enumFromString
parameter_list|(
name|T
index|[]
name|values
parameter_list|,
name|String
name|uri
parameter_list|,
name|T
name|defaultValue
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|values
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|values
index|[
name|i
index|]
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
name|values
index|[
name|i
index|]
return|;
block|}
block|}
return|return
name|defaultValue
return|;
block|}
block|}
end_class

end_unit

