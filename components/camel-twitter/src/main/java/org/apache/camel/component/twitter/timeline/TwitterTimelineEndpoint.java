begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|AbstractTwitterEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|TwitterConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|TwitterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|AbstractTwitterConsumerHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|data
operator|.
name|TimelineType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_comment
comment|/**  * The Twitter Timeline component consumes twitter timeline or update the status of specific user.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.10.0"
argument_list|,
name|scheme
operator|=
literal|"twitter-timeline"
argument_list|,
name|title
operator|=
literal|"Twitter Timeline"
argument_list|,
name|syntax
operator|=
literal|"twitter-timeline:timelineType"
argument_list|,
name|consumerClass
operator|=
name|AbstractStatusConsumerHandler
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"api,social"
argument_list|)
DECL|class|TwitterTimelineEndpoint
specifier|public
class|class
name|TwitterTimelineEndpoint
extends|extends
name|AbstractTwitterEndpoint
block|{
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"The timeline type to produce/consume."
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|timelineType
specifier|private
name|TimelineType
name|timelineType
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"The username when using timelineType=user"
argument_list|)
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|method|TwitterTimelineEndpoint (String uri, String remaining, String user, TwitterTimelineComponent component, TwitterConfiguration properties)
specifier|public
name|TwitterTimelineEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|String
name|user
parameter_list|,
name|TwitterTimelineComponent
name|component
parameter_list|,
name|TwitterConfiguration
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|remaining
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"The timeline type must be specified for '%s'"
argument_list|,
name|uri
argument_list|)
argument_list|)
throw|;
block|}
name|this
operator|.
name|timelineType
operator|=
name|component
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|TimelineType
operator|.
name|class
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
switch|switch
condition|(
name|timelineType
condition|)
block|{
case|case
name|USER
case|:
return|return
operator|new
name|UserProducer
argument_list|(
name|this
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any producer with uri "
operator|+
name|getEndpointUri
argument_list|()
operator|+
literal|". A producer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|AbstractTwitterConsumerHandler
name|handler
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|timelineType
condition|)
block|{
case|case
name|HOME
case|:
name|handler
operator|=
operator|new
name|HomeConsumerHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|MENTIONS
case|:
name|handler
operator|=
operator|new
name|MentionsConsumerHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|RETWEETSOFME
case|:
name|handler
operator|=
operator|new
name|RetweetsConsumerHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
name|USER
case|:
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Fetch type set to USER TIMELINE but no user was set."
argument_list|)
throw|;
block|}
else|else
block|{
name|handler
operator|=
operator|new
name|UserConsumerHandler
argument_list|(
name|this
argument_list|,
name|user
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
return|return
name|TwitterHelper
operator|.
name|createConsumer
argument_list|(
name|processor
argument_list|,
name|this
argument_list|,
name|handler
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot create any consumer with uri "
operator|+
name|getEndpointUri
argument_list|()
operator|+
literal|". A consumer type was not provided (or an incorrect pairing was used)."
argument_list|)
throw|;
block|}
DECL|method|getTimelineType ()
specifier|public
name|TimelineType
name|getTimelineType
parameter_list|()
block|{
return|return
name|timelineType
return|;
block|}
block|}
end_class

end_unit

