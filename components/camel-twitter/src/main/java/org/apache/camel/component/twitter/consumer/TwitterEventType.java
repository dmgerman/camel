begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.consumer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|TwitterConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|TwitterEndpoint
import|;
end_import

begin_enum
DECL|enum|TwitterEventType
specifier|public
enum|enum
name|TwitterEventType
block|{
DECL|enumConstant|STATUS
name|STATUS
block|,
DECL|enumConstant|DIRECT_MESSAGE
name|DIRECT_MESSAGE
block|,
DECL|enumConstant|FAVORITE
name|FAVORITE
block|,
DECL|enumConstant|UNFAVORITE
name|UNFAVORITE
block|,
DECL|enumConstant|FOLLOW
name|FOLLOW
block|,
DECL|enumConstant|UNFOLLOW
name|UNFOLLOW
block|,
DECL|enumConstant|USERLIST_MEMBER_ADDITION
name|USERLIST_MEMBER_ADDITION
block|,
DECL|enumConstant|USERLIST_MEMBER_DELETION
name|USERLIST_MEMBER_DELETION
block|,
DECL|enumConstant|USERLIST_SUBSCRIPTION
name|USERLIST_SUBSCRIPTION
block|,
DECL|enumConstant|USERLIST_UNSUBSCRIPTION
name|USERLIST_UNSUBSCRIPTION
block|,
DECL|enumConstant|USERLIST_CREATION
name|USERLIST_CREATION
block|,
DECL|enumConstant|USERLIST_UPDATE
name|USERLIST_UPDATE
block|,
DECL|enumConstant|USERLIST_DELETETION
name|USERLIST_DELETETION
block|,
DECL|enumConstant|USER_PROFILE_UPDATE
name|USER_PROFILE_UPDATE
block|,
DECL|enumConstant|USER_SUSPENSION
name|USER_SUSPENSION
block|,
DECL|enumConstant|USER_DELETION
name|USER_DELETION
block|,
DECL|enumConstant|BLOCK
name|BLOCK
block|,
DECL|enumConstant|UNBLOCK
name|UNBLOCK
block|,
DECL|enumConstant|RETWEETED_RETWEET
name|RETWEETED_RETWEET
block|,
DECL|enumConstant|FAVORITED_RETWEET
name|FAVORITED_RETWEET
block|,
DECL|enumConstant|QUOTED_TWEET
name|QUOTED_TWEET
block|;
DECL|method|createExchange (TwitterEndpoint endpoint)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|TwitterEndpoint
name|endpoint
parameter_list|)
block|{
return|return
name|createExchange
argument_list|(
name|endpoint
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createExchange (TwitterEndpoint endpoint, T body)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Exchange
name|createExchange
parameter_list|(
name|TwitterEndpoint
name|endpoint
parameter_list|,
name|T
name|body
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_EVENT_TYPE
argument_list|,
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
DECL|method|createExchangeList (TwitterEndpoint endpoint, List<T> bodyList)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Exchange
argument_list|>
name|createExchangeList
parameter_list|(
name|TwitterEndpoint
name|endpoint
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|bodyList
parameter_list|)
block|{
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|bodyList
operator|!=
literal|null
operator|&&
operator|!
name|bodyList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|exchanges
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bodyList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bodyList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exchanges
operator|.
name|add
argument_list|(
name|createExchange
argument_list|(
name|endpoint
argument_list|,
name|bodyList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exchanges
return|;
block|}
block|}
end_enum

end_unit

