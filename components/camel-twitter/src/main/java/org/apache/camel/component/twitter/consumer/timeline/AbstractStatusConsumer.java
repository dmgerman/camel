begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.consumer.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|TwitterEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|TwitterConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|TwitterEventType
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|TwitterException
import|;
end_import

begin_comment
comment|/**  * Consumes the user's home timeline.  */
end_comment

begin_class
DECL|class|AbstractStatusConsumer
specifier|abstract
class|class
name|AbstractStatusConsumer
extends|extends
name|TwitterConsumer
block|{
DECL|method|AbstractStatusConsumer (TwitterEndpoint endpoint)
name|AbstractStatusConsumer
parameter_list|(
name|TwitterEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|pollConsume ()
specifier|public
name|List
argument_list|<
name|Exchange
argument_list|>
name|pollConsume
parameter_list|()
throws|throws
name|TwitterException
block|{
name|List
argument_list|<
name|Status
argument_list|>
name|statusList
init|=
name|doPoll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|statusList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|setLastIdIfGreater
argument_list|(
name|statusList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|TwitterEventType
operator|.
name|STATUS
operator|.
name|createExchangeList
argument_list|(
name|endpoint
argument_list|,
name|statusList
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|directConsume ()
specifier|public
name|List
argument_list|<
name|Exchange
argument_list|>
name|directConsume
parameter_list|()
throws|throws
name|TwitterException
block|{
return|return
name|TwitterEventType
operator|.
name|STATUS
operator|.
name|createExchangeList
argument_list|(
name|endpoint
argument_list|,
name|doDirect
argument_list|()
argument_list|)
return|;
block|}
DECL|method|doPoll ()
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Status
argument_list|>
name|doPoll
parameter_list|()
throws|throws
name|TwitterException
function_decl|;
DECL|method|doDirect ()
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Status
argument_list|>
name|doDirect
parameter_list|()
throws|throws
name|TwitterException
function_decl|;
block|}
end_class

end_unit

