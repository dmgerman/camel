begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|extension
operator|.
name|ComponentVerifierExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * Base Twitter component  */
end_comment

begin_class
DECL|class|AbstractTwitterComponent
specifier|public
specifier|abstract
class|class
name|AbstractTwitterComponent
extends|extends
name|DefaultComponent
block|{
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|consumerKey
specifier|private
name|String
name|consumerKey
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|consumerSecret
specifier|private
name|String
name|consumerSecret
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|accessToken
specifier|private
name|String
name|accessToken
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|accessTokenSecret
specifier|private
name|String
name|accessTokenSecret
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyHost
specifier|private
name|String
name|httpProxyHost
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyUser
specifier|private
name|String
name|httpProxyUser
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyPassword
specifier|private
name|String
name|httpProxyPassword
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"proxy"
argument_list|)
DECL|field|httpProxyPort
specifier|private
name|Integer
name|httpProxyPort
decl_stmt|;
DECL|method|AbstractTwitterComponent (String componentVerifierScheme)
specifier|protected
name|AbstractTwitterComponent
parameter_list|(
name|String
name|componentVerifierScheme
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|componentVerifierScheme
argument_list|)
expr_stmt|;
block|}
DECL|method|AbstractTwitterComponent (CamelContext context, String componentVerifierScheme)
specifier|protected
name|AbstractTwitterComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|String
name|componentVerifierScheme
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|registerExtension
argument_list|(
parameter_list|()
lambda|->
operator|new
name|TwitterComponentVerifierExtension
argument_list|(
name|componentVerifierScheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|TwitterConfiguration
name|properties
init|=
operator|new
name|TwitterConfiguration
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setConsumerKey
argument_list|(
name|consumerKey
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setConsumerSecret
argument_list|(
name|consumerSecret
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setAccessToken
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setAccessTokenSecret
argument_list|(
name|accessTokenSecret
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setHttpProxyHost
argument_list|(
name|httpProxyHost
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setHttpProxyUser
argument_list|(
name|httpProxyUser
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setHttpProxyPassword
argument_list|(
name|httpProxyPassword
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpProxyPort
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setHttpProxyPort
argument_list|(
name|httpProxyPort
argument_list|)
expr_stmt|;
block|}
comment|// and then override from parameters
name|setProperties
argument_list|(
name|properties
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
name|doCreateEndpoint
argument_list|(
name|properties
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
return|;
block|}
DECL|method|doCreateEndpoint (TwitterConfiguration properties, String uri, String remaining, Map<String, Object> parameters)
specifier|protected
specifier|abstract
name|Endpoint
name|doCreateEndpoint
parameter_list|(
name|TwitterConfiguration
name|properties
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|getAccessToken ()
specifier|public
name|String
name|getAccessToken
parameter_list|()
block|{
return|return
name|accessToken
return|;
block|}
comment|/**      * The access token      */
DECL|method|setAccessToken (String accessToken)
specifier|public
name|void
name|setAccessToken
parameter_list|(
name|String
name|accessToken
parameter_list|)
block|{
name|this
operator|.
name|accessToken
operator|=
name|accessToken
expr_stmt|;
block|}
DECL|method|getAccessTokenSecret ()
specifier|public
name|String
name|getAccessTokenSecret
parameter_list|()
block|{
return|return
name|accessTokenSecret
return|;
block|}
comment|/**      * The access token secret      */
DECL|method|setAccessTokenSecret (String accessTokenSecret)
specifier|public
name|void
name|setAccessTokenSecret
parameter_list|(
name|String
name|accessTokenSecret
parameter_list|)
block|{
name|this
operator|.
name|accessTokenSecret
operator|=
name|accessTokenSecret
expr_stmt|;
block|}
DECL|method|getConsumerKey ()
specifier|public
name|String
name|getConsumerKey
parameter_list|()
block|{
return|return
name|consumerKey
return|;
block|}
comment|/**      * The consumer key      */
DECL|method|setConsumerKey (String consumerKey)
specifier|public
name|void
name|setConsumerKey
parameter_list|(
name|String
name|consumerKey
parameter_list|)
block|{
name|this
operator|.
name|consumerKey
operator|=
name|consumerKey
expr_stmt|;
block|}
DECL|method|getConsumerSecret ()
specifier|public
name|String
name|getConsumerSecret
parameter_list|()
block|{
return|return
name|consumerSecret
return|;
block|}
comment|/**      * The consumer secret      */
DECL|method|setConsumerSecret (String consumerSecret)
specifier|public
name|void
name|setConsumerSecret
parameter_list|(
name|String
name|consumerSecret
parameter_list|)
block|{
name|this
operator|.
name|consumerSecret
operator|=
name|consumerSecret
expr_stmt|;
block|}
comment|/**      * The http proxy host which can be used for the camel-twitter.      */
DECL|method|setHttpProxyHost (String httpProxyHost)
specifier|public
name|void
name|setHttpProxyHost
parameter_list|(
name|String
name|httpProxyHost
parameter_list|)
block|{
name|this
operator|.
name|httpProxyHost
operator|=
name|httpProxyHost
expr_stmt|;
block|}
DECL|method|getHttpProxyHost ()
specifier|public
name|String
name|getHttpProxyHost
parameter_list|()
block|{
return|return
name|httpProxyHost
return|;
block|}
comment|/**      * The http proxy user which can be used for the camel-twitter.      */
DECL|method|setHttpProxyUser (String httpProxyUser)
specifier|public
name|void
name|setHttpProxyUser
parameter_list|(
name|String
name|httpProxyUser
parameter_list|)
block|{
name|this
operator|.
name|httpProxyUser
operator|=
name|httpProxyUser
expr_stmt|;
block|}
DECL|method|getHttpProxyUser ()
specifier|public
name|String
name|getHttpProxyUser
parameter_list|()
block|{
return|return
name|httpProxyUser
return|;
block|}
comment|/**      * The http proxy password which can be used for the camel-twitter.      */
DECL|method|setHttpProxyPassword (String httpProxyPassword)
specifier|public
name|void
name|setHttpProxyPassword
parameter_list|(
name|String
name|httpProxyPassword
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPassword
operator|=
name|httpProxyPassword
expr_stmt|;
block|}
DECL|method|getHttpProxyPassword ()
specifier|public
name|String
name|getHttpProxyPassword
parameter_list|()
block|{
return|return
name|httpProxyPassword
return|;
block|}
comment|/**      * The http proxy port which can be used for the camel-twitter.      */
DECL|method|setHttpProxyPort (int httpProxyPort)
specifier|public
name|void
name|setHttpProxyPort
parameter_list|(
name|int
name|httpProxyPort
parameter_list|)
block|{
name|this
operator|.
name|httpProxyPort
operator|=
name|httpProxyPort
expr_stmt|;
block|}
DECL|method|getHttpProxyPort ()
specifier|public
name|Integer
name|getHttpProxyPort
parameter_list|()
block|{
return|return
name|httpProxyPort
return|;
block|}
comment|/**      * Get a verifier for the component.      */
DECL|method|getVerifier ()
specifier|public
name|ComponentVerifierExtension
name|getVerifier
parameter_list|()
block|{
return|return
parameter_list|(
name|scope
parameter_list|,
name|parameters
parameter_list|)
lambda|->
name|getExtension
argument_list|(
name|ComponentVerifierExtension
operator|.
name|class
argument_list|)
operator|.
name|orElseThrow
argument_list|(
name|UnsupportedOperationException
operator|::
operator|new
argument_list|)
operator|.
name|verify
argument_list|(
name|scope
argument_list|,
name|parameters
argument_list|)
return|;
block|}
block|}
end_class

end_unit

