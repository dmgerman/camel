begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.consumer.search
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|TwitterEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|consumer
operator|.
name|Twitter4JConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|QueryResult
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Twitter
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|TwitterException
import|;
end_import

begin_comment
comment|/**  * Consumes search requests  */
end_comment

begin_class
DECL|class|SearchConsumer
specifier|public
class|class
name|SearchConsumer
extends|extends
name|Twitter4JConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SearchConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SearchConsumer (TwitterEndpoint te)
specifier|public
name|SearchConsumer
parameter_list|(
name|TwitterEndpoint
name|te
parameter_list|)
block|{
name|super
argument_list|(
name|te
argument_list|)
expr_stmt|;
block|}
DECL|method|pollConsume ()
specifier|public
name|List
argument_list|<
name|Status
argument_list|>
name|pollConsume
parameter_list|()
throws|throws
name|TwitterException
block|{
name|String
name|keywords
init|=
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getKeywords
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|Query
argument_list|(
name|keywords
argument_list|)
decl_stmt|;
if|if
condition|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|isFilterOld
argument_list|()
condition|)
block|{
name|query
operator|.
name|setSinceId
argument_list|(
name|lastId
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Searching twitter with keywords: {}"
argument_list|,
name|keywords
argument_list|)
expr_stmt|;
return|return
name|search
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|directConsume ()
specifier|public
name|List
argument_list|<
name|Status
argument_list|>
name|directConsume
parameter_list|()
throws|throws
name|TwitterException
block|{
name|String
name|keywords
init|=
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getKeywords
argument_list|()
decl_stmt|;
if|if
condition|(
name|keywords
operator|==
literal|null
operator|||
name|keywords
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Query
name|query
init|=
operator|new
name|Query
argument_list|(
name|keywords
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Searching twitter with keywords: {}"
argument_list|,
name|keywords
argument_list|)
expr_stmt|;
return|return
name|search
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|search (Query query)
specifier|private
name|List
argument_list|<
name|Status
argument_list|>
name|search
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|TwitterException
block|{
name|Integer
name|numberOfPages
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getLang
argument_list|()
argument_list|)
condition|)
block|{
name|query
operator|.
name|setLang
argument_list|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getLang
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
condition|)
block|{
name|query
operator|.
name|setCount
argument_list|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getNumberOfPages
argument_list|()
argument_list|)
condition|)
block|{
name|numberOfPages
operator|=
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getNumberOfPages
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Searching with {} pages."
argument_list|,
name|numberOfPages
argument_list|)
expr_stmt|;
name|Twitter
name|twitter
init|=
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|getTwitter
argument_list|()
decl_stmt|;
name|QueryResult
name|qr
init|=
name|twitter
operator|.
name|search
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Status
argument_list|>
name|tweets
init|=
name|qr
operator|.
name|getTweets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numberOfPages
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|qr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
name|qr
operator|=
name|twitter
operator|.
name|search
argument_list|(
name|qr
operator|.
name|nextQuery
argument_list|()
argument_list|)
expr_stmt|;
name|tweets
operator|.
name|addAll
argument_list|(
name|qr
operator|.
name|getTweets
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|te
operator|.
name|getProperties
argument_list|()
operator|.
name|isFilterOld
argument_list|()
condition|)
block|{
for|for
control|(
name|Status
name|t
range|:
name|tweets
control|)
block|{
name|checkLastId
argument_list|(
name|t
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tweets
return|;
block|}
block|}
end_class

end_unit

