begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Status
import|;
end_import

begin_comment
comment|/**  * To sort tweets.  */
end_comment

begin_class
DECL|class|TwitterSorter
specifier|public
specifier|final
class|class
name|TwitterSorter
block|{
DECL|method|TwitterSorter ()
specifier|private
name|TwitterSorter
parameter_list|()
block|{     }
comment|/**      * Sorts the tweets by {@link Status#getId()}.      */
DECL|method|sortByStatusId (List<Exchange> exchanges)
specifier|public
specifier|static
name|List
argument_list|<
name|Exchange
argument_list|>
name|sortByStatusId
parameter_list|(
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
parameter_list|)
block|{
return|return
name|exchanges
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|(
parameter_list|(
name|e1
parameter_list|,
name|e2
parameter_list|)
lambda|->
block|{
name|Object
name|b1
init|=
name|e1
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|Object
name|b2
init|=
name|e2
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|b1
operator|instanceof
name|Status
operator|&&
name|b2
operator|instanceof
name|Status
condition|)
block|{
name|Status
name|s1
init|=
operator|(
name|Status
operator|)
name|b1
decl_stmt|;
name|Status
name|s2
init|=
operator|(
name|Status
operator|)
name|b2
decl_stmt|;
return|return
name|Long
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

