begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|DirectMessage
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Trend
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|Trends
import|;
end_import

begin_import
import|import
name|twitter4j
operator|.
name|UserList
import|;
end_import

begin_comment
comment|/**  * Utility for converting between Twitter4J and camel-twitter data layers.  */
end_comment

begin_class
annotation|@
name|Converter
argument_list|(
name|loader
operator|=
literal|true
argument_list|)
DECL|class|TwitterConverter
specifier|public
specifier|final
class|class
name|TwitterConverter
block|{
DECL|method|TwitterConverter ()
specifier|private
name|TwitterConverter
parameter_list|()
block|{
comment|// Helper class
block|}
annotation|@
name|Converter
DECL|method|toString (Status status)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Status
name|status
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|status
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|status
operator|.
name|getUser
argument_list|()
operator|.
name|getScreenName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
operator|.
name|append
argument_list|(
name|status
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toString (DirectMessage dm)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|DirectMessage
name|dm
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|dm
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|dm
operator|.
name|getSenderId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
operator|.
name|append
argument_list|(
name|dm
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toString (Trend trend)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Trend
name|trend
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
name|trend
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toString (Trends trends)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Trends
name|trends
parameter_list|)
throws|throws
name|ParseException
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"("
operator|+
name|trends
operator|.
name|getTrendAt
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|") "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Trend
name|trend
range|:
name|trends
operator|.
name|getTrends
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|trend
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Converter
DECL|method|toString (UserList userList)
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|UserList
name|userList
parameter_list|)
throws|throws
name|ParseException
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|userList
operator|.
name|getCreatedAt
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|userList
operator|.
name|getUser
argument_list|()
operator|.
name|getScreenName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
operator|.
name|append
argument_list|(
name|userList
operator|.
name|getFullName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|append
argument_list|(
name|userList
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

