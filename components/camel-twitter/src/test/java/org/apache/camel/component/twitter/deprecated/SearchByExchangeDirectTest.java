begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.twitter.deprecated
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|deprecated
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|CamelTwitterTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|twitter
operator|.
name|TwitterConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|Deprecated
DECL|class|SearchByExchangeDirectTest
specifier|public
class|class
name|SearchByExchangeDirectTest
extends|extends
name|CamelTwitterTestSupport
block|{
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:start"
argument_list|)
DECL|field|template
specifier|protected
name|ProducerTemplate
name|template
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:header"
argument_list|)
DECL|field|templateHeader
specifier|protected
name|ProducerTemplate
name|templateHeader
decl_stmt|;
annotation|@
name|Produce
argument_list|(
name|uri
operator|=
literal|"direct:double"
argument_list|)
DECL|field|templateDouble
specifier|protected
name|ProducerTemplate
name|templateDouble
decl_stmt|;
annotation|@
name|Test
DECL|method|testSearchTimelineWithStaticQuery ()
specifier|public
name|void
name|testSearchTimelineWithStaticQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|tweets
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|e
range|:
name|tweets
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Tweet: "
operator|+
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSearchTimelineWithDynamicQuery ()
specifier|public
name|void
name|testSearchTimelineWithDynamicQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|templateHeader
operator|.
name|sendBodyAndHeader
argument_list|(
literal|null
argument_list|,
name|TwitterConstants
operator|.
name|TWITTER_KEYWORDS
argument_list|,
literal|"java"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|tweets
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|e
range|:
name|tweets
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Tweet: "
operator|+
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSearchTimelineWithDynamicQuerySinceId ()
specifier|public
name|void
name|testSearchTimelineWithDynamicQuerySinceId
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_KEYWORDS
argument_list|,
literal|"java"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_SINCEID
argument_list|,
operator|new
name|Long
argument_list|(
literal|258347905419730944L
argument_list|)
argument_list|)
expr_stmt|;
name|templateHeader
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|tweets
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|e
range|:
name|tweets
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Tweet: "
operator|+
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSearchTimelineWithDynamicQuerySinceIdAndMaxId ()
specifier|public
name|void
name|testSearchTimelineWithDynamicQuerySinceIdAndMaxId
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_KEYWORDS
argument_list|,
literal|"java"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_SINCEID
argument_list|,
operator|new
name|Long
argument_list|(
literal|258347905419730944L
argument_list|)
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|TwitterConstants
operator|.
name|TWITTER_MAXID
argument_list|,
operator|new
name|Long
argument_list|(
literal|258348815243960320L
argument_list|)
argument_list|)
expr_stmt|;
name|templateHeader
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleSearchKeepingOld ()
specifier|public
name|void
name|testDoubleSearchKeepingOld
parameter_list|()
throws|throws
name|Exception
block|{
name|templateDouble
operator|.
name|sendBodyAndHeader
argument_list|(
literal|null
argument_list|,
name|TwitterConstants
operator|.
name|TWITTER_KEYWORDS
argument_list|,
literal|"java"
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:result"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMinimumMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|tweets
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|e
range|:
name|tweets
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Tweet: "
operator|+
name|e
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// calls the same query again, expecting to receive the same amount of
comment|// tweets, because we told this route to not filter old(consumed) tweets
name|int
name|total
init|=
name|mock
operator|.
name|getReceivedCounter
argument_list|()
decl_stmt|;
name|templateDouble
operator|.
name|sendBodyAndHeader
argument_list|(
literal|null
argument_list|,
name|TwitterConstants
operator|.
name|TWITTER_KEYWORDS
argument_list|,
literal|"java"
argument_list|)
expr_stmt|;
comment|// due race condition
name|assertTrue
argument_list|(
name|mock
operator|.
name|getReceivedCounter
argument_list|()
operator|>=
name|total
argument_list|)
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"twitter://search?%s&keywords=java"
argument_list|,
name|getUriTokens
argument_list|()
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:header"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"twitter://search?%s"
argument_list|,
name|getUriTokens
argument_list|()
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:double"
argument_list|)
operator|.
name|toF
argument_list|(
literal|"twitter://search?filterOld=false&%s"
argument_list|,
name|getUriTokens
argument_list|()
argument_list|)
operator|.
name|split
argument_list|()
operator|.
name|body
argument_list|()
operator|.
name|to
argument_list|(
literal|"mock:result"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

