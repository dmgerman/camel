begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RollbackExchangeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledBatchPollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|dao
operator|.
name|DataAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|PreparedStatementCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|namedparam
operator|.
name|NamedParameterJdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|namedparam
operator|.
name|SqlParameterSource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|support
operator|.
name|JdbcUtils
operator|.
name|closeResultSet
import|;
end_import

begin_class
DECL|class|SqlConsumer
specifier|public
class|class
name|SqlConsumer
extends|extends
name|ScheduledBatchPollingConsumer
block|{
DECL|field|query
specifier|private
specifier|final
name|String
name|query
decl_stmt|;
DECL|field|resolvedQuery
specifier|private
name|String
name|resolvedQuery
decl_stmt|;
DECL|field|jdbcTemplate
specifier|private
specifier|final
name|JdbcTemplate
name|jdbcTemplate
decl_stmt|;
DECL|field|namedJdbcTemplate
specifier|private
specifier|final
name|NamedParameterJdbcTemplate
name|namedJdbcTemplate
decl_stmt|;
DECL|field|parameterSource
specifier|private
specifier|final
name|SqlParameterSource
name|parameterSource
decl_stmt|;
DECL|field|sqlPrepareStatementStrategy
specifier|private
specifier|final
name|SqlPrepareStatementStrategy
name|sqlPrepareStatementStrategy
decl_stmt|;
DECL|field|sqlProcessingStrategy
specifier|private
specifier|final
name|SqlProcessingStrategy
name|sqlProcessingStrategy
decl_stmt|;
DECL|field|onConsume
specifier|private
name|String
name|onConsume
decl_stmt|;
DECL|field|onConsumeFailed
specifier|private
name|String
name|onConsumeFailed
decl_stmt|;
DECL|field|onConsumeBatchComplete
specifier|private
name|String
name|onConsumeBatchComplete
decl_stmt|;
DECL|field|useIterator
specifier|private
name|boolean
name|useIterator
init|=
literal|true
decl_stmt|;
DECL|field|routeEmptyResultSet
specifier|private
name|boolean
name|routeEmptyResultSet
decl_stmt|;
DECL|field|expectedUpdateCount
specifier|private
name|int
name|expectedUpdateCount
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|breakBatchOnConsumeFail
specifier|private
name|boolean
name|breakBatchOnConsumeFail
decl_stmt|;
DECL|field|parametersCount
specifier|private
name|int
name|parametersCount
decl_stmt|;
DECL|field|alwaysPopulateStatement
specifier|private
name|boolean
name|alwaysPopulateStatement
decl_stmt|;
DECL|class|DataHolder
specifier|private
specifier|static
specifier|final
class|class
name|DataHolder
block|{
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|data
specifier|private
name|Object
name|data
decl_stmt|;
DECL|method|DataHolder ()
specifier|private
name|DataHolder
parameter_list|()
block|{         }
block|}
DECL|method|SqlConsumer (DefaultSqlEndpoint endpoint, Processor processor, JdbcTemplate jdbcTemplate, String query, SqlPrepareStatementStrategy sqlPrepareStatementStrategy, SqlProcessingStrategy sqlProcessingStrategy)
specifier|public
name|SqlConsumer
parameter_list|(
name|DefaultSqlEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|JdbcTemplate
name|jdbcTemplate
parameter_list|,
name|String
name|query
parameter_list|,
name|SqlPrepareStatementStrategy
name|sqlPrepareStatementStrategy
parameter_list|,
name|SqlProcessingStrategy
name|sqlProcessingStrategy
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|jdbcTemplate
operator|=
name|jdbcTemplate
expr_stmt|;
name|this
operator|.
name|namedJdbcTemplate
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|parameterSource
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|sqlPrepareStatementStrategy
operator|=
name|sqlPrepareStatementStrategy
expr_stmt|;
name|this
operator|.
name|sqlProcessingStrategy
operator|=
name|sqlProcessingStrategy
expr_stmt|;
block|}
DECL|method|SqlConsumer (DefaultSqlEndpoint endpoint, Processor processor, NamedParameterJdbcTemplate namedJdbcTemplate, String query, SqlParameterSource parameterSource, SqlPrepareStatementStrategy sqlPrepareStatementStrategy, SqlProcessingStrategy sqlProcessingStrategy)
specifier|public
name|SqlConsumer
parameter_list|(
name|DefaultSqlEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|NamedParameterJdbcTemplate
name|namedJdbcTemplate
parameter_list|,
name|String
name|query
parameter_list|,
name|SqlParameterSource
name|parameterSource
parameter_list|,
name|SqlPrepareStatementStrategy
name|sqlPrepareStatementStrategy
parameter_list|,
name|SqlProcessingStrategy
name|sqlProcessingStrategy
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|jdbcTemplate
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|namedJdbcTemplate
operator|=
name|namedJdbcTemplate
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
name|this
operator|.
name|parameterSource
operator|=
name|parameterSource
expr_stmt|;
name|this
operator|.
name|sqlPrepareStatementStrategy
operator|=
name|sqlPrepareStatementStrategy
expr_stmt|;
name|this
operator|.
name|sqlProcessingStrategy
operator|=
name|sqlProcessingStrategy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|DefaultSqlEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|DefaultSqlEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|String
name|placeholder
init|=
name|getEndpoint
argument_list|()
operator|.
name|isUsePlaceholder
argument_list|()
condition|?
name|getEndpoint
argument_list|()
operator|.
name|getPlaceholder
argument_list|()
else|:
literal|null
decl_stmt|;
name|resolvedQuery
operator|=
name|SqlHelper
operator|.
name|resolveQuery
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|query
argument_list|,
name|placeholder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
comment|// must reset for each poll
name|shutdownRunningTask
operator|=
literal|null
expr_stmt|;
name|pendingExchanges
operator|=
literal|0
expr_stmt|;
specifier|final
name|Exchange
name|dummy
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|()
decl_stmt|;
specifier|final
name|String
name|preparedQuery
init|=
name|sqlPrepareStatementStrategy
operator|.
name|prepareQuery
argument_list|(
name|resolvedQuery
argument_list|,
name|getEndpoint
argument_list|()
operator|.
name|isAllowNamedParameters
argument_list|()
argument_list|,
name|dummy
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"poll: {}"
argument_list|,
name|preparedQuery
argument_list|)
expr_stmt|;
specifier|final
name|PreparedStatementCallback
argument_list|<
name|Integer
argument_list|>
name|callback
init|=
operator|new
name|PreparedStatementCallback
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|doInPreparedStatement
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|)
throws|throws
name|SQLException
throws|,
name|DataAccessException
block|{
name|Queue
argument_list|<
name|DataHolder
argument_list|>
name|answer
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|expected
init|=
name|parametersCount
operator|>
literal|0
condition|?
name|parametersCount
else|:
name|ps
operator|.
name|getParameterMetaData
argument_list|()
operator|.
name|getParameterCount
argument_list|()
decl_stmt|;
comment|// only populate if really needed
if|if
condition|(
name|alwaysPopulateStatement
operator|||
name|expected
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|sqlPrepareStatementStrategy
operator|.
name|createPopulateIterator
argument_list|(
name|resolvedQuery
argument_list|,
name|preparedQuery
argument_list|,
name|expected
argument_list|,
name|dummy
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sqlPrepareStatementStrategy
operator|.
name|populateStatement
argument_list|(
name|ps
argument_list|,
name|i
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Executing query: {}"
argument_list|,
name|preparedQuery
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|SqlOutputType
name|outputType
init|=
name|getEndpoint
argument_list|()
operator|.
name|getOutputType
argument_list|()
decl_stmt|;
name|boolean
name|closeEager
init|=
literal|true
decl_stmt|;
try|try
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Got result list from query: {}, outputType={}"
argument_list|,
name|rs
argument_list|,
name|outputType
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputType
operator|==
name|SqlOutputType
operator|.
name|StreamList
condition|)
block|{
name|ResultSetIterator
name|data
init|=
name|getEndpoint
argument_list|()
operator|.
name|queryForStreamList
argument_list|(
name|ps
operator|.
name|getConnection
argument_list|()
argument_list|,
name|ps
argument_list|,
name|rs
argument_list|)
decl_stmt|;
comment|// only process if we have data
if|if
condition|(
name|data
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|addListToQueue
argument_list|(
name|data
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|closeEager
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|outputType
operator|==
name|SqlOutputType
operator|.
name|SelectList
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|data
init|=
name|getEndpoint
argument_list|()
operator|.
name|queryForList
argument_list|(
name|rs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|addListToQueue
argument_list|(
name|data
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outputType
operator|==
name|SqlOutputType
operator|.
name|SelectOne
condition|)
block|{
name|Object
name|data
init|=
name|getEndpoint
argument_list|()
operator|.
name|queryForObject
argument_list|(
name|rs
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|addListToQueue
argument_list|(
name|data
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid outputType="
operator|+
name|outputType
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|closeEager
condition|)
block|{
name|closeResultSet
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
comment|// process all the exchanges in this batch
try|try
block|{
if|if
condition|(
name|answer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no data
return|return
literal|0
return|;
block|}
else|else
block|{
name|int
name|rows
init|=
name|processBatch
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
name|answer
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|rows
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|RuntimeCamelException
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeResultSet
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Integer
name|messagePolled
decl_stmt|;
if|if
condition|(
name|namedJdbcTemplate
operator|!=
literal|null
condition|)
block|{
name|messagePolled
operator|=
name|namedJdbcTemplate
operator|.
name|execute
argument_list|(
name|preparedQuery
argument_list|,
name|parameterSource
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messagePolled
operator|=
name|jdbcTemplate
operator|.
name|execute
argument_list|(
name|preparedQuery
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
return|return
name|messagePolled
return|;
block|}
DECL|method|addListToQueue (Object data, Queue<DataHolder> answer)
specifier|private
name|void
name|addListToQueue
parameter_list|(
name|Object
name|data
parameter_list|,
name|Queue
argument_list|<
name|DataHolder
argument_list|>
name|answer
parameter_list|)
block|{
if|if
condition|(
name|data
operator|instanceof
name|List
condition|)
block|{
comment|// create a list of exchange objects with the data
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
operator|)
name|data
decl_stmt|;
if|if
condition|(
name|useIterator
condition|)
block|{
for|for
control|(
name|Object
name|item
range|:
name|list
control|)
block|{
name|addItemToQueue
argument_list|(
name|item
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
operator|||
name|routeEmptyResultSet
condition|)
block|{
name|addItemToQueue
argument_list|(
name|list
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// create single object as data
name|addItemToQueue
argument_list|(
name|data
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addItemToQueue (Object item, Queue<DataHolder> answer)
specifier|private
name|void
name|addItemToQueue
parameter_list|(
name|Object
name|item
parameter_list|,
name|Queue
argument_list|<
name|DataHolder
argument_list|>
name|answer
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|createExchange
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|DataHolder
name|holder
init|=
operator|new
name|DataHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|holder
operator|.
name|data
operator|=
name|item
expr_stmt|;
name|answer
operator|.
name|add
argument_list|(
name|holder
argument_list|)
expr_stmt|;
block|}
DECL|method|createExchange (Object data)
specifier|protected
name|Exchange
name|createExchange
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|getEndpoint
argument_list|()
operator|.
name|createExchange
argument_list|(
name|ExchangePattern
operator|.
name|InOnly
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|getOutputHeader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setHeader
argument_list|(
name|getEndpoint
argument_list|()
operator|.
name|getOutputHeader
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|setBody
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
DECL|method|processBatch (Queue<Object> exchanges)
specifier|public
name|int
name|processBatch
parameter_list|(
name|Queue
argument_list|<
name|Object
argument_list|>
name|exchanges
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|total
init|=
name|exchanges
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxMessagesPerPoll
operator|>
literal|0
operator|&&
name|total
operator|==
name|maxMessagesPerPoll
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Maximum messages to poll is {} and there were exactly {} messages in this poll."
argument_list|,
name|maxMessagesPerPoll
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|total
operator|&&
name|isBatchAllowed
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
comment|// only loop if we are started (allowed to run)
name|DataHolder
name|holder
init|=
name|ObjectHelper
operator|.
name|cast
argument_list|(
name|DataHolder
operator|.
name|class
argument_list|,
name|exchanges
operator|.
name|poll
argument_list|()
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|holder
operator|.
name|exchange
decl_stmt|;
name|Object
name|data
init|=
name|holder
operator|.
name|data
decl_stmt|;
comment|// add current index and total as properties
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|BATCH_INDEX
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|BATCH_SIZE
argument_list|,
name|total
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|BATCH_COMPLETE
argument_list|,
name|index
operator|==
name|total
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// update pending number of exchanges
name|pendingExchanges
operator|=
name|total
operator|-
name|index
operator|-
literal|1
expr_stmt|;
comment|// process the current exchange
try|try
block|{
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getEndpoint
argument_list|()
operator|.
name|isTransacted
argument_list|()
operator|&&
name|exchange
operator|.
name|isFailed
argument_list|()
condition|)
block|{
comment|// break out as we are transacted and should rollback
name|Exception
name|cause
init|=
name|exchange
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
throw|throw
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RollbackExchangeException
argument_list|(
literal|"Rollback transaction due error processing exchange"
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
block|}
comment|// pick the on consume to use
name|String
name|sql
init|=
name|exchange
operator|.
name|isFailed
argument_list|()
condition|?
name|onConsumeFailed
else|:
name|onConsume
decl_stmt|;
try|try
block|{
comment|// we can only run on consume if there was data
if|if
condition|(
name|data
operator|!=
literal|null
operator|&&
name|sql
operator|!=
literal|null
condition|)
block|{
name|int
name|updateCount
decl_stmt|;
if|if
condition|(
name|namedJdbcTemplate
operator|!=
literal|null
operator|&&
name|sqlProcessingStrategy
operator|instanceof
name|SqlNamedProcessingStrategy
condition|)
block|{
name|SqlNamedProcessingStrategy
name|namedProcessingStrategy
init|=
operator|(
name|SqlNamedProcessingStrategy
operator|)
name|sqlProcessingStrategy
decl_stmt|;
name|updateCount
operator|=
name|namedProcessingStrategy
operator|.
name|commit
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|data
argument_list|,
name|namedJdbcTemplate
argument_list|,
name|parameterSource
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateCount
operator|=
name|sqlProcessingStrategy
operator|.
name|commit
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|data
argument_list|,
name|jdbcTemplate
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expectedUpdateCount
operator|>
operator|-
literal|1
operator|&&
name|updateCount
operator|!=
name|expectedUpdateCount
condition|)
block|{
name|String
name|msg
init|=
literal|"Expected update count "
operator|+
name|expectedUpdateCount
operator|+
literal|" but was "
operator|+
name|updateCount
operator|+
literal|" executing query: "
operator|+
name|sql
decl_stmt|;
throw|throw
operator|new
name|SQLException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|breakBatchOnConsumeFail
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|handleException
argument_list|(
literal|"Error executing onConsume/onConsumeFailed query "
operator|+
name|sql
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
if|if
condition|(
name|onConsumeBatchComplete
operator|!=
literal|null
condition|)
block|{
name|int
name|updateCount
decl_stmt|;
if|if
condition|(
name|namedJdbcTemplate
operator|!=
literal|null
operator|&&
name|sqlProcessingStrategy
operator|instanceof
name|SqlNamedProcessingStrategy
condition|)
block|{
name|SqlNamedProcessingStrategy
name|namedProcessingStrategy
init|=
operator|(
name|SqlNamedProcessingStrategy
operator|)
name|sqlProcessingStrategy
decl_stmt|;
name|updateCount
operator|=
name|namedProcessingStrategy
operator|.
name|commitBatchComplete
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|namedJdbcTemplate
argument_list|,
name|parameterSource
argument_list|,
name|onConsumeBatchComplete
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateCount
operator|=
name|sqlProcessingStrategy
operator|.
name|commitBatchComplete
argument_list|(
name|getEndpoint
argument_list|()
argument_list|,
name|jdbcTemplate
argument_list|,
name|onConsumeBatchComplete
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"onConsumeBatchComplete update count {}"
argument_list|,
name|updateCount
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|breakBatchOnConsumeFail
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|handleException
argument_list|(
literal|"Error executing onConsumeBatchComplete query "
operator|+
name|onConsumeBatchComplete
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
DECL|method|getOnConsume ()
specifier|public
name|String
name|getOnConsume
parameter_list|()
block|{
return|return
name|onConsume
return|;
block|}
comment|/**      * Sets a SQL to execute when the row has been successfully processed.      */
DECL|method|setOnConsume (String onConsume)
specifier|public
name|void
name|setOnConsume
parameter_list|(
name|String
name|onConsume
parameter_list|)
block|{
name|this
operator|.
name|onConsume
operator|=
name|onConsume
expr_stmt|;
block|}
DECL|method|getOnConsumeFailed ()
specifier|public
name|String
name|getOnConsumeFailed
parameter_list|()
block|{
return|return
name|onConsumeFailed
return|;
block|}
comment|/**      * Sets a SQL to execute when the row failed being processed.      */
DECL|method|setOnConsumeFailed (String onConsumeFailed)
specifier|public
name|void
name|setOnConsumeFailed
parameter_list|(
name|String
name|onConsumeFailed
parameter_list|)
block|{
name|this
operator|.
name|onConsumeFailed
operator|=
name|onConsumeFailed
expr_stmt|;
block|}
DECL|method|getOnConsumeBatchComplete ()
specifier|public
name|String
name|getOnConsumeBatchComplete
parameter_list|()
block|{
return|return
name|onConsumeBatchComplete
return|;
block|}
DECL|method|setOnConsumeBatchComplete (String onConsumeBatchComplete)
specifier|public
name|void
name|setOnConsumeBatchComplete
parameter_list|(
name|String
name|onConsumeBatchComplete
parameter_list|)
block|{
name|this
operator|.
name|onConsumeBatchComplete
operator|=
name|onConsumeBatchComplete
expr_stmt|;
block|}
DECL|method|isUseIterator ()
specifier|public
name|boolean
name|isUseIterator
parameter_list|()
block|{
return|return
name|useIterator
return|;
block|}
comment|/**      * Sets how resultset should be delivered to route.      * Indicates delivery as either a list or individual object.      * defaults to true.      */
DECL|method|setUseIterator (boolean useIterator)
specifier|public
name|void
name|setUseIterator
parameter_list|(
name|boolean
name|useIterator
parameter_list|)
block|{
name|this
operator|.
name|useIterator
operator|=
name|useIterator
expr_stmt|;
block|}
DECL|method|isRouteEmptyResultSet ()
specifier|public
name|boolean
name|isRouteEmptyResultSet
parameter_list|()
block|{
return|return
name|routeEmptyResultSet
return|;
block|}
comment|/**      * Sets whether empty resultset should be allowed to be sent to the next hop.      * defaults to false. So the empty resultset will be filtered out.      */
DECL|method|setRouteEmptyResultSet (boolean routeEmptyResultSet)
specifier|public
name|void
name|setRouteEmptyResultSet
parameter_list|(
name|boolean
name|routeEmptyResultSet
parameter_list|)
block|{
name|this
operator|.
name|routeEmptyResultSet
operator|=
name|routeEmptyResultSet
expr_stmt|;
block|}
DECL|method|getExpectedUpdateCount ()
specifier|public
name|int
name|getExpectedUpdateCount
parameter_list|()
block|{
return|return
name|expectedUpdateCount
return|;
block|}
comment|/**      * Sets an expected update count to validate when using onConsume.      */
DECL|method|setExpectedUpdateCount (int expectedUpdateCount)
specifier|public
name|void
name|setExpectedUpdateCount
parameter_list|(
name|int
name|expectedUpdateCount
parameter_list|)
block|{
name|this
operator|.
name|expectedUpdateCount
operator|=
name|expectedUpdateCount
expr_stmt|;
block|}
DECL|method|isBreakBatchOnConsumeFail ()
specifier|public
name|boolean
name|isBreakBatchOnConsumeFail
parameter_list|()
block|{
return|return
name|breakBatchOnConsumeFail
return|;
block|}
comment|/**      * Sets whether to break batch if onConsume failed.      */
DECL|method|setBreakBatchOnConsumeFail (boolean breakBatchOnConsumeFail)
specifier|public
name|void
name|setBreakBatchOnConsumeFail
parameter_list|(
name|boolean
name|breakBatchOnConsumeFail
parameter_list|)
block|{
name|this
operator|.
name|breakBatchOnConsumeFail
operator|=
name|breakBatchOnConsumeFail
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setMaxMessagesPerPoll (int maxMessagesPerPoll)
specifier|public
name|void
name|setMaxMessagesPerPoll
parameter_list|(
name|int
name|maxMessagesPerPoll
parameter_list|)
block|{
name|super
operator|.
name|setMaxMessagesPerPoll
argument_list|(
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
if|if
condition|(
name|jdbcTemplate
operator|!=
literal|null
condition|)
block|{
name|jdbcTemplate
operator|.
name|setMaxRows
argument_list|(
name|maxMessagesPerPoll
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setParametersCount (int parametersCount)
specifier|public
name|void
name|setParametersCount
parameter_list|(
name|int
name|parametersCount
parameter_list|)
block|{
name|this
operator|.
name|parametersCount
operator|=
name|parametersCount
expr_stmt|;
block|}
DECL|method|setAlwaysPopulateStatement (boolean alwaysPopulateStatement)
specifier|public
name|void
name|setAlwaysPopulateStatement
parameter_list|(
name|boolean
name|alwaysPopulateStatement
parameter_list|)
block|{
name|this
operator|.
name|alwaysPopulateStatement
operator|=
name|alwaysPopulateStatement
expr_stmt|;
block|}
block|}
end_class

end_unit

