begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sql.stored
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
operator|.
name|InputParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|CallableStatementCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|CallableStatementCreatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|SqlParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|StatementCreatorUtils
import|;
end_import

begin_class
DECL|class|BatchCallableStatementCreatorFactory
specifier|public
class|class
name|BatchCallableStatementCreatorFactory
block|{
DECL|field|callableStatementCreatorFactory
specifier|final
name|CallableStatementCreatorFactory
name|callableStatementCreatorFactory
decl_stmt|;
DECL|field|sqlParameterList
specifier|final
name|List
argument_list|<
name|SqlParameter
argument_list|>
name|sqlParameterList
decl_stmt|;
DECL|field|template
specifier|final
name|Template
name|template
decl_stmt|;
DECL|method|BatchCallableStatementCreatorFactory (Template template)
specifier|public
name|BatchCallableStatementCreatorFactory
parameter_list|(
name|Template
name|template
parameter_list|)
block|{
name|this
operator|.
name|template
operator|=
name|template
expr_stmt|;
name|this
operator|.
name|sqlParameterList
operator|=
name|createParams
argument_list|()
expr_stmt|;
name|this
operator|.
name|callableStatementCreatorFactory
operator|=
operator|new
name|CallableStatementCreatorFactory
argument_list|(
name|formatSql
argument_list|()
argument_list|,
name|createParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addParameter (CallableStatement callableStatement, Map batchRow)
specifier|public
name|void
name|addParameter
parameter_list|(
name|CallableStatement
name|callableStatement
parameter_list|,
name|Map
name|batchRow
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|SqlParameter
name|parameter
range|:
name|getSqlParameterList
argument_list|()
control|)
block|{
name|StatementCreatorUtils
operator|.
name|setParameterValue
argument_list|(
name|callableStatement
argument_list|,
name|i
argument_list|,
name|parameter
argument_list|,
name|batchRow
operator|.
name|get
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
DECL|method|formatSql ()
specifier|private
name|String
name|formatSql
parameter_list|()
block|{
return|return
literal|"{call "
operator|+
name|this
operator|.
name|template
operator|.
name|getProcedureName
argument_list|()
operator|+
literal|"("
operator|+
name|repeatParameter
argument_list|(
name|this
operator|.
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|+
literal|")}"
return|;
block|}
DECL|method|repeatParameter (int size)
specifier|private
name|String
name|repeatParameter
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|size
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createParams ()
specifier|private
name|List
argument_list|<
name|SqlParameter
argument_list|>
name|createParams
parameter_list|()
block|{
name|List
argument_list|<
name|SqlParameter
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|parameter
range|:
name|template
operator|.
name|getParameterList
argument_list|()
control|)
block|{
if|if
condition|(
name|parameter
operator|instanceof
name|InputParameter
condition|)
block|{
name|InputParameter
name|inputParameter
init|=
operator|(
name|InputParameter
operator|)
name|parameter
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|SqlParameter
argument_list|(
name|inputParameter
operator|.
name|getName
argument_list|()
argument_list|,
name|inputParameter
operator|.
name|getSqlType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Only IN parameters supported by batch!"
argument_list|)
throw|;
block|}
block|}
return|return
name|params
return|;
block|}
DECL|method|newCallableStatementCreator (Map params)
specifier|public
name|CallableStatementCreator
name|newCallableStatementCreator
parameter_list|(
name|Map
name|params
parameter_list|)
block|{
return|return
name|this
operator|.
name|callableStatementCreatorFactory
operator|.
name|newCallableStatementCreator
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|method|getSqlParameterList ()
specifier|public
name|List
argument_list|<
name|SqlParameter
argument_list|>
name|getSqlParameterList
parameter_list|()
block|{
return|return
name|sqlParameterList
return|;
block|}
DECL|method|getTemplate ()
specifier|public
name|Template
name|getTemplate
parameter_list|()
block|{
return|return
name|template
return|;
block|}
block|}
end_class

end_unit

