begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|PreparedStatementCallback
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|DefaultSqlProcessingStrategy
specifier|public
class|class
name|DefaultSqlProcessingStrategy
implements|implements
name|SqlProcessingStrategy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSqlProcessingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|commit (SqlEndpoint endpoint, final Exchange exchange, Object data, JdbcTemplate jdbcTemplate, final String query)
specifier|public
name|void
name|commit
parameter_list|(
name|SqlEndpoint
name|endpoint
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|Object
name|data
parameter_list|,
name|JdbcTemplate
name|jdbcTemplate
parameter_list|,
specifier|final
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|jdbcTemplate
operator|.
name|execute
argument_list|(
name|query
argument_list|,
operator|new
name|PreparedStatementCallback
argument_list|<
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|doInPreparedStatement
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|expected
init|=
name|ps
operator|.
name|getParameterMetaData
argument_list|()
operator|.
name|getParameterCount
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
init|=
name|createIterator
argument_list|(
name|exchange
argument_list|,
name|query
argument_list|,
name|expected
argument_list|)
decl_stmt|;
if|if
condition|(
name|iterator
operator|!=
literal|null
condition|)
block|{
name|populateStatement
argument_list|(
name|ps
argument_list|,
name|iterator
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Execute query {}"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|ps
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
empty_stmt|;
block|}
block|)
function|;
block|}
end_class

begin_function
DECL|method|createIterator (Exchange exchange, final String query, final int expectedParams)
specifier|private
name|Iterator
argument_list|<
name|?
argument_list|>
name|createIterator
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|int
name|expectedParams
parameter_list|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// TODO: support named parameters
comment|/*         if (body instanceof Map) {             final Map map = (Map) body;             return new Iterator() {                  private int current;                  @Override                 public boolean hasNext() {                     return current< expectedParams;                 }                  @Override                 public Object next() {                     current++;                     // TODO: Fix me                     return map.get("ID");                 }                  @Override                 public void remove() {                     // noop                 }             };         }*/
comment|// else force as iterator based
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Iterator
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|iterator
return|;
block|}
end_function

begin_function
DECL|method|populateStatement (PreparedStatement ps, Iterator<?> iterator, int expectedParams)
specifier|private
name|void
name|populateStatement
parameter_list|(
name|PreparedStatement
name|ps
parameter_list|,
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
parameter_list|,
name|int
name|expectedParams
parameter_list|)
throws|throws
name|SQLException
block|{
name|int
name|argNumber
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|expectedParams
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|iterator
operator|!=
literal|null
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|value
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Setting parameter #{} with value: {}"
argument_list|,
name|argNumber
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setObject
argument_list|(
name|argNumber
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|argNumber
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|argNumber
operator|-
literal|1
operator|!=
name|expectedParams
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Number of parameters mismatch. Expected: "
operator|+
name|expectedParams
operator|+
literal|", was:"
operator|+
operator|(
name|argNumber
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

