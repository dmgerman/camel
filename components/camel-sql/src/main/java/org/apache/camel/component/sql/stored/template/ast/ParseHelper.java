begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sql.stored.template.ast
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|generated
operator|.
name|SSPTParserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|generated
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
DECL|class|ParseHelper
specifier|public
specifier|final
class|class
name|ParseHelper
block|{
DECL|method|ParseHelper ()
specifier|private
name|ParseHelper
parameter_list|()
block|{     }
DECL|method|parseSqlType (Token sqlTypeToken, ClassResolver classResolver)
specifier|public
specifier|static
name|int
name|parseSqlType
parameter_list|(
name|Token
name|sqlTypeToken
parameter_list|,
name|ClassResolver
name|classResolver
parameter_list|)
block|{
name|String
name|sqlType
init|=
name|sqlTypeToken
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//if number then use it(probably Vendor spesific SQL-type)
if|if
condition|(
name|sqlTypeToken
operator|.
name|kind
operator|==
name|SSPTParserConstants
operator|.
name|NUMBER
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|sqlType
argument_list|)
return|;
block|}
comment|//if contains .
if|if
condition|(
name|sqlType
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|String
name|className
decl_stmt|;
name|String
name|fieldName
decl_stmt|;
try|try
block|{
name|className
operator|=
name|sqlType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sqlType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|fieldName
operator|=
name|sqlType
operator|.
name|substring
argument_list|(
name|sqlType
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ParseRuntimeException
argument_list|(
literal|"Failed to parse class.field:"
operator|+
name|sqlType
argument_list|)
throw|;
block|}
try|try
block|{
name|Class
name|clazz
init|=
name|classResolver
operator|.
name|resolveMandatoryClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
return|return
name|getFieldInt
argument_list|(
name|clazz
argument_list|,
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseRuntimeException
argument_list|(
literal|"Class for "
operator|+
name|className
operator|+
literal|" not found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|//Loop-up from "Standard" types
return|return
name|getFieldInt
argument_list|(
name|Types
operator|.
name|class
argument_list|,
name|sqlType
argument_list|)
return|;
block|}
DECL|method|parseScale (Token token)
specifier|public
specifier|static
name|Integer
name|parseScale
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
try|try
block|{
name|String
name|str
init|=
name|token
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ParseRuntimeException
argument_list|(
literal|"Failed to parse scale from token:"
operator|+
name|token
operator|.
name|toString
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|getFieldInt (Class clazz, String sqlType)
specifier|private
specifier|static
name|int
name|getFieldInt
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|sqlType
parameter_list|)
block|{
name|Field
name|field
init|=
name|ReflectionUtils
operator|.
name|findField
argument_list|(
name|clazz
argument_list|,
name|sqlType
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ParseRuntimeException
argument_list|(
literal|"Field "
operator|+
name|sqlType
operator|+
literal|" not found from "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|field
operator|.
name|getInt
argument_list|(
name|Types
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ParseRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|removeQuotes (String token)
specifier|public
specifier|static
name|String
name|removeQuotes
parameter_list|(
name|String
name|token
parameter_list|)
block|{
try|try
block|{
return|return
name|StringHelper
operator|.
name|removeLeadingAndEndingQuotes
argument_list|(
name|token
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ParseRuntimeException
argument_list|(
literal|"Failed to remove quotes from token:"
operator|+
name|token
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

