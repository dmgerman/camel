begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sql
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|sspt
operator|.
name|ProducerSSPTHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|UnsafeUriCharactersEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_comment
comment|/**  * The sql component can be used to perform SQL query to a database.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"sql"
argument_list|,
name|title
operator|=
literal|"SQL"
argument_list|,
name|syntax
operator|=
literal|"sql:query"
argument_list|,
name|consumerClass
operator|=
name|SqlConsumer
operator|.
name|class
argument_list|,
name|label
operator|=
literal|"database,sql"
argument_list|)
DECL|class|SqlEndpoint
specifier|public
class|class
name|SqlEndpoint
extends|extends
name|DefaultSqlEndpoint
block|{
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"Sets the SQL query to perform"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|"true"
argument_list|)
DECL|field|query
specifier|private
name|String
name|query
decl_stmt|;
DECL|method|SqlEndpoint ()
specifier|public
name|SqlEndpoint
parameter_list|()
block|{     }
DECL|method|SqlEndpoint (String uri, Component component, JdbcTemplate jdbcTemplate, String query)
specifier|public
name|SqlEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|,
name|JdbcTemplate
name|jdbcTemplate
parameter_list|,
name|String
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|jdbcTemplate
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|SqlPrepareStatementStrategy
name|prepareStrategy
init|=
name|getPrepareStatementStrategy
argument_list|()
operator|!=
literal|null
condition|?
name|getPrepareStatementStrategy
argument_list|()
else|:
operator|new
name|DefaultSqlPrepareStatementStrategy
argument_list|(
name|getSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|SqlProcessingStrategy
name|proStrategy
init|=
name|getProcessingStrategy
argument_list|()
operator|!=
literal|null
condition|?
name|getProcessingStrategy
argument_list|()
else|:
operator|new
name|DefaultSqlProcessingStrategy
argument_list|(
name|prepareStrategy
argument_list|)
decl_stmt|;
name|SqlConsumer
name|consumer
init|=
operator|new
name|SqlConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|getJdbcTemplate
argument_list|()
argument_list|,
name|query
argument_list|,
name|prepareStrategy
argument_list|,
name|proStrategy
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMaxMessagesPerPoll
argument_list|(
name|getMaxMessagesPerPoll
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setOnConsume
argument_list|(
name|getOnConsume
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setOnConsumeFailed
argument_list|(
name|getOnConsumeFailed
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setOnConsumeBatchComplete
argument_list|(
name|getOnConsumeBatchComplete
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setBreakBatchOnConsumeFail
argument_list|(
name|isBreakBatchOnConsumeFail
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setExpectedUpdateCount
argument_list|(
name|getExpectedUpdateCount
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setUseIterator
argument_list|(
name|isUseIterator
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setRouteEmptyResultSet
argument_list|(
name|isRouteEmptyResultSet
argument_list|()
argument_list|)
expr_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
name|SqlPrepareStatementStrategy
name|prepareStrategy
init|=
name|getPrepareStatementStrategy
argument_list|()
operator|!=
literal|null
condition|?
name|getPrepareStatementStrategy
argument_list|()
else|:
operator|new
name|DefaultSqlPrepareStatementStrategy
argument_list|(
name|getSeparator
argument_list|()
argument_list|)
decl_stmt|;
name|ProducerSSPTHelper
name|producerSSPTHelper
init|=
operator|new
name|ProducerSSPTHelper
argument_list|(
name|getJdbcTemplate
argument_list|()
operator|.
name|getDataSource
argument_list|()
argument_list|)
decl_stmt|;
name|SqlProducer
name|result
init|=
operator|new
name|SqlProducer
argument_list|(
name|this
argument_list|,
name|query
argument_list|,
name|getJdbcTemplate
argument_list|()
argument_list|,
name|prepareStrategy
argument_list|,
name|isBatch
argument_list|()
argument_list|,
name|isAlwaysPopulateStatement
argument_list|()
argument_list|,
name|isUseMessageBodyForSql
argument_list|()
argument_list|,
name|producerSSPTHelper
argument_list|)
decl_stmt|;
name|result
operator|.
name|setParametersCount
argument_list|(
name|getParametersCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
comment|// Make sure it's properly encoded
return|return
literal|"sql:"
operator|+
name|UnsafeUriCharactersEncoder
operator|.
name|encode
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|getQuery ()
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
comment|/**      * Sets the SQL query to perform      */
DECL|method|setQuery (String query)
specifier|public
name|void
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
block|}
end_class

end_unit

