begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|dao
operator|.
name|DataIntegrityViolationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_comment
comment|/**  * PostgreSQL specific {@link JdbcAggregationRepository} that deals with SQL Violation Exceptions  * using special {@code INSERT INTO .. ON CONFLICT DO NOTHING} claues.  */
end_comment

begin_class
DECL|class|PostgresAggregationRepository
specifier|public
class|class
name|PostgresAggregationRepository
extends|extends
name|JdbcAggregationRepository
block|{
comment|/**      * Creates an aggregation repository      */
DECL|method|PostgresAggregationRepository ()
specifier|public
name|PostgresAggregationRepository
parameter_list|()
block|{     }
comment|/**      * Creates an aggregation repository with the three mandatory parameters      */
DECL|method|PostgresAggregationRepository (PlatformTransactionManager transactionManager, String repositoryName, DataSource dataSource)
specifier|public
name|PostgresAggregationRepository
parameter_list|(
name|PlatformTransactionManager
name|transactionManager
parameter_list|,
name|String
name|repositoryName
parameter_list|,
name|DataSource
name|dataSource
parameter_list|)
block|{
name|super
argument_list|(
name|transactionManager
argument_list|,
name|repositoryName
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Inserts a new record into the given repository table      *      * @param camelContext   the current CamelContext      * @param correlationId  the correlation key      * @param exchange       the aggregated exchange      * @param repositoryName The name of the table      */
DECL|method|insert (final CamelContext camelContext, final String correlationId, final Exchange exchange, String repositoryName)
specifier|protected
name|void
name|insert
parameter_list|(
specifier|final
name|CamelContext
name|camelContext
parameter_list|,
specifier|final
name|String
name|correlationId
parameter_list|,
specifier|final
name|Exchange
name|exchange
parameter_list|,
name|String
name|repositoryName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// The default totalParameterIndex is 2 for ID and Exchange. Depending on logic this will be increased
name|int
name|totalParameterIndex
init|=
literal|2
decl_stmt|;
name|StringBuilder
name|queryBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"INSERT INTO "
argument_list|)
operator|.
name|append
argument_list|(
name|repositoryName
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|EXCHANGE
argument_list|)
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStoreBodyAsText
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|BODY
argument_list|)
expr_stmt|;
name|totalParameterIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|hasHeadersToStoreAsText
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|headerName
range|:
name|getHeadersToStoreAsText
argument_list|()
control|)
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|headerName
argument_list|)
expr_stmt|;
name|totalParameterIndex
operator|++
expr_stmt|;
block|}
block|}
name|queryBuilder
operator|.
name|append
argument_list|(
literal|") VALUES ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalParameterIndex
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"?, "
argument_list|)
expr_stmt|;
block|}
name|queryBuilder
operator|.
name|append
argument_list|(
literal|"?)"
argument_list|)
expr_stmt|;
name|queryBuilder
operator|.
name|append
argument_list|(
literal|" ON CONFLICT DO NOTHING"
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
name|queryBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|updateCount
init|=
name|insertAndUpdateHelper
argument_list|(
name|camelContext
argument_list|,
name|correlationId
argument_list|,
name|exchange
argument_list|,
name|sql
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateCount
operator|==
literal|0
operator|&&
name|getRepositoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|repositoryName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|DataIntegrityViolationException
argument_list|(
literal|"No row was inserted due to data violation"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

