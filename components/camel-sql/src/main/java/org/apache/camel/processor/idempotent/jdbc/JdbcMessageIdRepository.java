begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.idempotent.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link AbstractJdbcMessageIdRepository}  */
end_comment

begin_class
DECL|class|JdbcMessageIdRepository
specifier|public
class|class
name|JdbcMessageIdRepository
extends|extends
name|AbstractJdbcMessageIdRepository
argument_list|<
name|String
argument_list|>
block|{
DECL|field|QUERY_STRING
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_STRING
init|=
literal|"SELECT COUNT(*) FROM CAMEL_MESSAGEPROCESSED WHERE processorName = ? AND messageId = ?"
decl_stmt|;
DECL|field|INSERT_STRING
specifier|public
specifier|static
specifier|final
name|String
name|INSERT_STRING
init|=
literal|"INSERT INTO CAMEL_MESSAGEPROCESSED (processorName, messageId, createdAt) VALUES (?, ?, ?)"
decl_stmt|;
DECL|field|DELETE_STRING
specifier|public
specifier|static
specifier|final
name|String
name|DELETE_STRING
init|=
literal|"DELETE FROM CAMEL_MESSAGEPROCESSED WHERE processorName = ? AND messageId = ?"
decl_stmt|;
DECL|method|JdbcMessageIdRepository ()
specifier|public
name|JdbcMessageIdRepository
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|JdbcMessageIdRepository (DataSource dataSource, String processorName)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|processorName
parameter_list|)
block|{
name|super
argument_list|(
name|dataSource
argument_list|,
name|processorName
argument_list|)
expr_stmt|;
block|}
DECL|method|JdbcMessageIdRepository (DataSource dataSource, TransactionTemplate transactionTemplate, String processorName)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|TransactionTemplate
name|transactionTemplate
parameter_list|,
name|String
name|processorName
parameter_list|)
block|{
name|super
argument_list|(
name|dataSource
argument_list|,
name|transactionTemplate
argument_list|,
name|processorName
argument_list|)
expr_stmt|;
block|}
DECL|method|JdbcMessageIdRepository (JdbcTemplate jdbcTemplate, TransactionTemplate transactionTemplate)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|JdbcTemplate
name|jdbcTemplate
parameter_list|,
name|TransactionTemplate
name|transactionTemplate
parameter_list|)
block|{
name|super
argument_list|(
name|jdbcTemplate
argument_list|,
name|transactionTemplate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|queryForInt (String key)
specifier|protected
name|int
name|queryForInt
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|jdbcTemplate
operator|.
name|queryForInt
argument_list|(
name|QUERY_STRING
argument_list|,
name|processorName
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|insert (String key)
specifier|protected
name|int
name|insert
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|jdbcTemplate
operator|.
name|update
argument_list|(
name|INSERT_STRING
argument_list|,
name|processorName
argument_list|,
name|key
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (String key)
specifier|protected
name|int
name|delete
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|jdbcTemplate
operator|.
name|update
argument_list|(
name|DELETE_STRING
argument_list|,
name|processorName
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

