begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.idempotent.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|dao
operator|.
name|DataAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link AbstractJdbcMessageIdRepository}  */
end_comment

begin_class
DECL|class|JdbcMessageIdRepository
specifier|public
class|class
name|JdbcMessageIdRepository
extends|extends
name|AbstractJdbcMessageIdRepository
block|{
DECL|field|createTableIfNotExists
specifier|private
name|boolean
name|createTableIfNotExists
init|=
literal|true
decl_stmt|;
DECL|field|tableExistsString
specifier|private
name|String
name|tableExistsString
init|=
literal|"SELECT 1 FROM CAMEL_MESSAGEPROCESSED WHERE 1 = 0"
decl_stmt|;
DECL|field|createString
specifier|private
name|String
name|createString
init|=
literal|"CREATE TABLE CAMEL_MESSAGEPROCESSED (processorName VARCHAR(255), messageId VARCHAR(100), createdAt TIMESTAMP)"
decl_stmt|;
DECL|field|queryString
specifier|private
name|String
name|queryString
init|=
literal|"SELECT COUNT(*) FROM CAMEL_MESSAGEPROCESSED WHERE processorName = ? AND messageId = ?"
decl_stmt|;
DECL|field|insertString
specifier|private
name|String
name|insertString
init|=
literal|"INSERT INTO CAMEL_MESSAGEPROCESSED (processorName, messageId, createdAt) VALUES (?, ?, ?)"
decl_stmt|;
DECL|field|deleteString
specifier|private
name|String
name|deleteString
init|=
literal|"DELETE FROM CAMEL_MESSAGEPROCESSED WHERE processorName = ? AND messageId = ?"
decl_stmt|;
DECL|field|clearString
specifier|private
name|String
name|clearString
init|=
literal|"DELETE FROM CAMEL_MESSAGEPROCESSED WHERE processorName = ?"
decl_stmt|;
DECL|method|JdbcMessageIdRepository ()
specifier|public
name|JdbcMessageIdRepository
parameter_list|()
block|{     }
DECL|method|JdbcMessageIdRepository (DataSource dataSource, String processorName)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|processorName
parameter_list|)
block|{
name|super
argument_list|(
name|dataSource
argument_list|,
name|processorName
argument_list|)
expr_stmt|;
block|}
DECL|method|JdbcMessageIdRepository (DataSource dataSource, TransactionTemplate transactionTemplate, String processorName)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|TransactionTemplate
name|transactionTemplate
parameter_list|,
name|String
name|processorName
parameter_list|)
block|{
name|super
argument_list|(
name|dataSource
argument_list|,
name|transactionTemplate
argument_list|,
name|processorName
argument_list|)
expr_stmt|;
block|}
DECL|method|JdbcMessageIdRepository (JdbcTemplate jdbcTemplate, TransactionTemplate transactionTemplate)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|JdbcTemplate
name|jdbcTemplate
parameter_list|,
name|TransactionTemplate
name|transactionTemplate
parameter_list|)
block|{
name|super
argument_list|(
name|jdbcTemplate
argument_list|,
name|transactionTemplate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
try|try
block|{
comment|// we will receive an exception if the table doesn't exists or we cannot access it
name|jdbcTemplate
operator|.
name|execute
argument_list|(
name|getTableExistsString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Expected table for JdbcMessageIdRepository exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataAccessException
name|e
parameter_list|)
block|{
if|if
condition|(
name|createTableIfNotExists
condition|)
block|{
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"creating table for JdbcMessageIdRepository because it doesn't exist..."
argument_list|)
expr_stmt|;
name|jdbcTemplate
operator|.
name|execute
argument_list|(
name|getCreateString
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"table created with query '{}'"
argument_list|,
name|getCreateString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DataAccessException
name|dae
parameter_list|)
block|{
comment|// we will fail if we cannot create it
name|log
operator|.
name|error
argument_list|(
literal|"Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again."
argument_list|,
name|getCreateString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|dae
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|queryForInt (String key)
specifier|protected
name|int
name|queryForInt
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|jdbcTemplate
operator|.
name|queryForObject
argument_list|(
name|getQueryString
argument_list|()
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|processorName
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|insert (String key)
specifier|protected
name|int
name|insert
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|jdbcTemplate
operator|.
name|update
argument_list|(
name|getInsertString
argument_list|()
argument_list|,
name|processorName
argument_list|,
name|key
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (String key)
specifier|protected
name|int
name|delete
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|jdbcTemplate
operator|.
name|update
argument_list|(
name|getDeleteString
argument_list|()
argument_list|,
name|processorName
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete ()
specifier|protected
name|int
name|delete
parameter_list|()
block|{
return|return
name|jdbcTemplate
operator|.
name|update
argument_list|(
name|getClearString
argument_list|()
argument_list|,
name|processorName
argument_list|)
return|;
block|}
DECL|method|isCreateTableIfNotExists ()
specifier|public
name|boolean
name|isCreateTableIfNotExists
parameter_list|()
block|{
return|return
name|createTableIfNotExists
return|;
block|}
DECL|method|setCreateTableIfNotExists (boolean createTableIfNotExists)
specifier|public
name|void
name|setCreateTableIfNotExists
parameter_list|(
name|boolean
name|createTableIfNotExists
parameter_list|)
block|{
name|this
operator|.
name|createTableIfNotExists
operator|=
name|createTableIfNotExists
expr_stmt|;
block|}
DECL|method|getTableExistsString ()
specifier|public
name|String
name|getTableExistsString
parameter_list|()
block|{
return|return
name|tableExistsString
return|;
block|}
DECL|method|setTableExistsString (String tableExistsString)
specifier|public
name|void
name|setTableExistsString
parameter_list|(
name|String
name|tableExistsString
parameter_list|)
block|{
name|this
operator|.
name|tableExistsString
operator|=
name|tableExistsString
expr_stmt|;
block|}
DECL|method|getCreateString ()
specifier|public
name|String
name|getCreateString
parameter_list|()
block|{
return|return
name|createString
return|;
block|}
DECL|method|setCreateString (String createString)
specifier|public
name|void
name|setCreateString
parameter_list|(
name|String
name|createString
parameter_list|)
block|{
name|this
operator|.
name|createString
operator|=
name|createString
expr_stmt|;
block|}
DECL|method|getQueryString ()
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|queryString
return|;
block|}
DECL|method|setQueryString (String queryString)
specifier|public
name|void
name|setQueryString
parameter_list|(
name|String
name|queryString
parameter_list|)
block|{
name|this
operator|.
name|queryString
operator|=
name|queryString
expr_stmt|;
block|}
DECL|method|getInsertString ()
specifier|public
name|String
name|getInsertString
parameter_list|()
block|{
return|return
name|insertString
return|;
block|}
DECL|method|setInsertString (String insertString)
specifier|public
name|void
name|setInsertString
parameter_list|(
name|String
name|insertString
parameter_list|)
block|{
name|this
operator|.
name|insertString
operator|=
name|insertString
expr_stmt|;
block|}
DECL|method|getDeleteString ()
specifier|public
name|String
name|getDeleteString
parameter_list|()
block|{
return|return
name|deleteString
return|;
block|}
DECL|method|setDeleteString (String deleteString)
specifier|public
name|void
name|setDeleteString
parameter_list|(
name|String
name|deleteString
parameter_list|)
block|{
name|this
operator|.
name|deleteString
operator|=
name|deleteString
expr_stmt|;
block|}
DECL|method|getClearString ()
specifier|public
name|String
name|getClearString
parameter_list|()
block|{
return|return
name|clearString
return|;
block|}
DECL|method|setClearString (String clearString)
specifier|public
name|void
name|setClearString
parameter_list|(
name|String
name|clearString
parameter_list|)
block|{
name|this
operator|.
name|clearString
operator|=
name|clearString
expr_stmt|;
block|}
block|}
end_class

end_unit

