begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.idempotent.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|idempotent
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|core
operator|.
name|JdbcTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jdbc
operator|.
name|datasource
operator|.
name|DataSourceTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"JDBC based message id repository"
argument_list|)
DECL|class|JdbcMessageIdRepository
specifier|public
class|class
name|JdbcMessageIdRepository
extends|extends
name|ServiceSupport
implements|implements
name|IdempotentRepository
argument_list|<
name|String
argument_list|>
block|{
DECL|field|QUERY_STRING
specifier|protected
specifier|static
specifier|final
name|String
name|QUERY_STRING
init|=
literal|"SELECT COUNT(*) FROM CAMEL_MESSAGEPROCESSED WHERE processorName = ? AND messageId = ?"
decl_stmt|;
DECL|field|INSERT_STRING
specifier|protected
specifier|static
specifier|final
name|String
name|INSERT_STRING
init|=
literal|"INSERT INTO CAMEL_MESSAGEPROCESSED (processorName, messageId, createdAt) VALUES (?, ?, ?)"
decl_stmt|;
DECL|field|DELETE_STRING
specifier|protected
specifier|static
specifier|final
name|String
name|DELETE_STRING
init|=
literal|"DELETE FROM CAMEL_MESSAGEPROCESSED WHERE processorName = ? AND messageId = ?"
decl_stmt|;
DECL|field|jdbcTemplate
specifier|private
specifier|final
name|JdbcTemplate
name|jdbcTemplate
decl_stmt|;
DECL|field|processorName
specifier|private
specifier|final
name|String
name|processorName
decl_stmt|;
DECL|field|transactionTemplate
specifier|private
specifier|final
name|TransactionTemplate
name|transactionTemplate
decl_stmt|;
DECL|method|JdbcMessageIdRepository (DataSource dataSource, String processorName)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|processorName
parameter_list|)
block|{
name|this
argument_list|(
name|dataSource
argument_list|,
name|createTransactionTemplate
argument_list|(
name|dataSource
argument_list|)
argument_list|,
name|processorName
argument_list|)
expr_stmt|;
block|}
DECL|method|JdbcMessageIdRepository (DataSource dataSource, TransactionTemplate transactionTemplate, String processorName)
specifier|public
name|JdbcMessageIdRepository
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|TransactionTemplate
name|transactionTemplate
parameter_list|,
name|String
name|processorName
parameter_list|)
block|{
name|this
operator|.
name|jdbcTemplate
operator|=
operator|new
name|JdbcTemplate
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|this
operator|.
name|jdbcTemplate
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|processorName
operator|=
name|processorName
expr_stmt|;
name|this
operator|.
name|transactionTemplate
operator|=
name|transactionTemplate
expr_stmt|;
block|}
DECL|method|jpaMessageIdRepository (DataSource dataSource, String processorName)
specifier|public
specifier|static
name|JdbcMessageIdRepository
name|jpaMessageIdRepository
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|processorName
parameter_list|)
block|{
return|return
operator|new
name|JdbcMessageIdRepository
argument_list|(
name|dataSource
argument_list|,
name|processorName
argument_list|)
return|;
block|}
DECL|method|createTransactionTemplate (DataSource dataSource)
specifier|private
specifier|static
name|TransactionTemplate
name|createTransactionTemplate
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|TransactionTemplate
name|transactionTemplate
init|=
operator|new
name|TransactionTemplate
argument_list|()
decl_stmt|;
name|transactionTemplate
operator|.
name|setTransactionManager
argument_list|(
operator|new
name|DataSourceTransactionManager
argument_list|(
name|dataSource
argument_list|)
argument_list|)
expr_stmt|;
name|transactionTemplate
operator|.
name|setPropagationBehavior
argument_list|(
name|TransactionDefinition
operator|.
name|PROPAGATION_REQUIRED
argument_list|)
expr_stmt|;
return|return
name|transactionTemplate
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Adds the key to the store"
argument_list|)
DECL|method|add (final String messageId)
specifier|public
name|boolean
name|add
parameter_list|(
specifier|final
name|String
name|messageId
parameter_list|)
block|{
comment|// Run this in single transaction.
name|Boolean
name|rc
init|=
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
name|int
name|count
init|=
name|jdbcTemplate
operator|.
name|queryForInt
argument_list|(
name|QUERY_STRING
argument_list|,
name|processorName
argument_list|,
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|jdbcTemplate
operator|.
name|update
argument_list|(
name|INSERT_STRING
argument_list|,
name|processorName
argument_list|,
name|messageId
argument_list|,
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|rc
operator|.
name|booleanValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Does the store contain the given key"
argument_list|)
DECL|method|contains (final String messageId)
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|String
name|messageId
parameter_list|)
block|{
comment|// Run this in single transaction.
name|Boolean
name|rc
init|=
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
name|int
name|count
init|=
name|jdbcTemplate
operator|.
name|queryForInt
argument_list|(
name|QUERY_STRING
argument_list|,
name|processorName
argument_list|,
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|rc
operator|.
name|booleanValue
argument_list|()
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Remove the key from the store"
argument_list|)
DECL|method|remove (final String messageId)
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|String
name|messageId
parameter_list|)
block|{
name|Boolean
name|rc
init|=
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
name|int
name|updateCount
init|=
name|jdbcTemplate
operator|.
name|update
argument_list|(
name|DELETE_STRING
argument_list|,
name|processorName
argument_list|,
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateCount
operator|==
literal|0
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|rc
operator|.
name|booleanValue
argument_list|()
return|;
block|}
DECL|method|confirm (String s)
specifier|public
name|boolean
name|confirm
parameter_list|(
name|String
name|s
parameter_list|)
block|{
comment|// noop
return|return
literal|true
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The processor name"
argument_list|)
DECL|method|getProcessorName ()
specifier|public
name|String
name|getProcessorName
parameter_list|()
block|{
return|return
name|processorName
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{     }
block|}
end_class

end_unit

