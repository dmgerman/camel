begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.processor.aggregate.jdbc
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|aggregate
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JdbcGrowIssueTest
specifier|public
class|class
name|JdbcGrowIssueTest
extends|extends
name|AbstractJdbcAggregationTestSupport
block|{
DECL|field|SIZE
specifier|private
specifier|static
specifier|final
name|int
name|SIZE
init|=
literal|1024
decl_stmt|;
annotation|@
name|Test
DECL|method|testGrowIssue ()
specifier|public
name|void
name|testGrowIssue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// a 1kb string for testing
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|SIZE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
block|}
name|Exchange
name|item
init|=
operator|new
name|DefaultExchange
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|item
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// the key
specifier|final
name|String
name|key
init|=
literal|"foo"
decl_stmt|;
comment|// we update using the same key, which means we should be able to do this within the file size limit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SIZE
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Updating "
operator|+
name|i
argument_list|)
expr_stmt|;
name|repo
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|key
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
comment|// get the last
name|Exchange
name|data
init|=
name|repo
operator|.
name|get
argument_list|(
name|context
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should start with 'XXX'"
argument_list|,
name|data
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"XXX"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|data
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Length should be 1024, was "
operator|+
name|length
argument_list|,
literal|1024
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

