begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.sql.stored
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|TemplateParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
operator|.
name|InOutParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
operator|.
name|InParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
operator|.
name|OutParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
operator|.
name|ParseRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|sql
operator|.
name|stored
operator|.
name|template
operator|.
name|ast
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ParserTest
specifier|public
class|class
name|ParserTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|parser
name|TemplateParser
name|parser
decl_stmt|;
annotation|@
name|Override
DECL|method|startCamelContext ()
specifier|protected
name|void
name|startCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|startCamelContext
argument_list|()
expr_stmt|;
name|parser
operator|=
operator|new
name|TemplateParser
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldParseOk ()
specifier|public
name|void
name|shouldParseOk
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"addnumbers(INTEGER ${header.header1},VARCHAR ${exchangeProperty.property1},"
operator|+
literal|"BIGINT ${header.header2},INOUT INTEGER ${header.header3} inout1,OUT INTEGER out1)"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"addnumbers"
argument_list|,
name|template
operator|.
name|getProcedureName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithBody
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"header1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"property1"
argument_list|,
literal|"constant string"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"header2"
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"header3"
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|InParameter
name|param1
init|=
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"_0"
argument_list|,
name|param1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|param1
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|param1
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|InParameter
name|param2
init|=
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"_1"
argument_list|,
name|param2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Types
operator|.
name|VARCHAR
argument_list|,
name|param2
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"constant string"
argument_list|,
name|param2
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|InParameter
name|param3
init|=
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"_2"
argument_list|,
name|param3
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Types
operator|.
name|BIGINT
argument_list|,
name|param3
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|2L
argument_list|)
argument_list|,
name|param3
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|InOutParameter
name|inOutNode
init|=
operator|(
name|InOutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|inOutNode
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"inout1"
argument_list|,
name|inOutNode
operator|.
name|getOutValueMapKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|3L
argument_list|)
argument_list|,
name|inOutNode
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|OutParameter
name|outNode
init|=
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Types
operator|.
name|INTEGER
argument_list|,
name|outNode
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"out1"
argument_list|,
name|outNode
operator|.
name|getOutValueMapKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseRuntimeException
operator|.
name|class
argument_list|)
DECL|method|noOutputParameterShouldFail ()
specifier|public
name|void
name|noOutputParameterShouldFail
parameter_list|()
block|{
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2"
operator|+
literal|"(INTEGER VALUE1 ${header.v1},INTEGER VALUE2 ${header.v2})"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseRuntimeException
operator|.
name|class
argument_list|)
DECL|method|unexistingTypeShouldFail ()
specifier|public
name|void
name|unexistingTypeShouldFail
parameter_list|()
block|{
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2"
operator|+
literal|"(XML VALUE1 ${header.v1},OUT INTEGER VALUE2 ${header.v2})"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nestedSimpleExpression ()
specifier|public
name|void
name|nestedSimpleExpression
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
name|createExchangeWithBody
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2(INTEGER ${header.foo},INTEGER ${header.bar})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|vendorSpecificPositiveSqlType ()
specifier|public
name|void
name|vendorSpecificPositiveSqlType
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2(1342 ${header.foo})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1342
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|vendorSpecificNegativeSqlType ()
specifier|public
name|void
name|vendorSpecificNegativeSqlType
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2(-1342 ${header.foo})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1342
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|colonInSimple ()
specifier|public
name|void
name|colonInSimple
parameter_list|()
block|{
name|PropertiesComponent
name|pc
init|=
operator|(
name|PropertiesComponent
operator|)
name|context
operator|.
name|getComponent
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setLocation
argument_list|(
literal|"classpath:jndi.properties"
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithBody
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2(-1342 ${properties:java.naming.factory.initial})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.camel.support.jndi.CamelInitialContextFactory"
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|colonInLocation ()
specifier|public
name|void
name|colonInLocation
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2(-1342 :#a:)"
argument_list|)
decl_stmt|;
name|Exchange
name|exchange
init|=
name|createExchangeWithBody
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Map
name|container
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|container
operator|.
name|put
argument_list|(
literal|"a:"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
name|exchange
argument_list|,
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|vendorSpecificPositiveSqlTypeOut ()
specifier|public
name|void
name|vendorSpecificPositiveSqlTypeOut
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2(OUT 1342 h1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1342
argument_list|,
operator|(
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|vendorSpecificNegativeSqlTypeOut ()
specifier|public
name|void
name|vendorSpecificNegativeSqlTypeOut
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2(OUT -1342 h1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1342
argument_list|,
operator|(
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nableIssueSyntax ()
specifier|public
name|void
name|nableIssueSyntax
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"P_STR_IN"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"IBS.\"Z$IMS_INTERFACE_WS\".TEST_STR(VARCHAR :#P_STR_IN,OUT VARCHAR P_STR_OUT)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getValueExtractor
argument_list|()
operator|.
name|eval
argument_list|(
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"IBS.\"Z$IMS_INTERFACE_WS\".TEST_STR"
argument_list|,
name|template
operator|.
name|getProcedureName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ParseRuntimeException
operator|.
name|class
argument_list|)
DECL|method|unmappedTypeShouldFaild ()
specifier|public
name|void
name|unmappedTypeShouldFaild
parameter_list|()
block|{
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"ADDNUMBERS2"
operator|+
literal|"(OTHER VALUE1 ${header.v1},INTEGER VALUE2 ${header.v2})"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParameterNameGiven ()
specifier|public
name|void
name|testParameterNameGiven
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO('p_instance_id' INTEGER ${header.foo})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p_instance_id"
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParameterVendor ()
specifier|public
name|void
name|testParameterVendor
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO('p_instance_id' org.apache.camel.component.sql.stored.CustomType.INTEGER ${header.foo})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParameterVendorType ()
specifier|public
name|void
name|testParameterVendorType
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO('p_instance_id' 2 ${header.foo})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParameterTypeName ()
specifier|public
name|void
name|testParameterTypeName
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO('p_instance_1' 1 'p_1' ${header.foo1},"
operator|+
literal|"INOUT 2 'p_2' ${header.foo2} p_out)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"p_1"
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p_2"
argument_list|,
operator|(
operator|(
name|InOutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParameterVendorTypeNegativ ()
specifier|public
name|void
name|testParameterVendorTypeNegativ
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO('p_instance_id' -2 ${header.foo})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOracleTypesOut ()
specifier|public
name|void
name|testOracleTypesOut
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO(OUT 1 p_error_cd)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOracleTypesOutParameterVendor ()
specifier|public
name|void
name|testOracleTypesOutParameterVendor
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO(OUT org.apache.camel.component.sql.stored.CustomType.INTEGER p_error_cd)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSqlType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOracleTypesOutParameterVendorWithScale ()
specifier|public
name|void
name|testOracleTypesOutParameterVendorWithScale
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO(OUT org.apache.camel.component.sql.stored.CustomType.INTEGER(11) p_error_cd)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|11
argument_list|)
argument_list|,
operator|(
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOracleTypesOutParameterVendorWithTypeName ()
specifier|public
name|void
name|testOracleTypesOutParameterVendorWithTypeName
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO(OUT org.apache.camel.component.sql.stored.CustomType.INTEGER 'mytype' p_error_cd)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"mytype"
argument_list|,
operator|(
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p_error_cd"
argument_list|,
operator|(
operator|(
name|OutParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOutValueMapKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOracleTypesNumeric ()
specifier|public
name|void
name|testOracleTypesNumeric
parameter_list|()
block|{
name|Template
name|template
init|=
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"FOO('p_error_cd' org.apache.camel.component.sql.stored.CustomType.INTEGER(10) ${header.foo})"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|(
operator|(
name|InParameter
operator|)
name|template
operator|.
name|getParameterList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|examplesSyntaxTest ()
specifier|public
name|void
name|examplesSyntaxTest
parameter_list|()
block|{
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"SUBNUMBERS(INTEGER ${headers.num1},INTEGER ${headers.num2},OUT INTEGER resultofsub)"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"MYFUNC('param1' java.sql.Types.INTEGER(10) ${header.srcValue})"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"MYFUNC('param1' 100 'mytypename' ${header.srcValue})"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"MYFUNC(OUT java.sql.Types.DECIMAL(10) outheader1)"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parseTemplate
argument_list|(
literal|"MYFUNC(OUT java.sql.Types.NUMERIC(10) 'mytype' outheader1)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

