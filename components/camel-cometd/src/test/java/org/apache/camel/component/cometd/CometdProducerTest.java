begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cometd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cometd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cometd
operator|.
name|CometdProducer
operator|.
name|ProducerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|server
operator|.
name|LocalSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|server
operator|.
name|BayeuxServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|CometdProducerTest
specifier|public
class|class
name|CometdProducerTest
block|{
DECL|field|testObj
specifier|private
name|CometdProducer
name|testObj
decl_stmt|;
annotation|@
name|Mock
DECL|field|endpoint
specifier|private
name|CometdEndpoint
name|endpoint
decl_stmt|;
annotation|@
name|Mock
DECL|field|bayeuxServerImpl
specifier|private
name|BayeuxServerImpl
name|bayeuxServerImpl
decl_stmt|;
annotation|@
name|Mock
DECL|field|localSession
specifier|private
name|LocalSession
name|localSession
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|when
argument_list|(
name|bayeuxServerImpl
operator|.
name|newLocalSession
argument_list|(
name|ArgumentMatchers
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localSession
argument_list|)
expr_stmt|;
name|testObj
operator|=
operator|new
name|CometdProducer
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|testObj
operator|.
name|setBayeux
argument_list|(
name|bayeuxServerImpl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartDoesNotCreateNewProducerService ()
specifier|public
name|void
name|testStartDoesNotCreateNewProducerService
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup
name|testObj
operator|.
name|start
argument_list|()
expr_stmt|;
name|ProducerService
name|expectedService
init|=
name|testObj
operator|.
name|getProducerService
argument_list|()
decl_stmt|;
name|testObj
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// act
name|ProducerService
name|result
init|=
name|testObj
operator|.
name|getProducerService
argument_list|()
decl_stmt|;
comment|// assert
name|assertEquals
argument_list|(
name|expectedService
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

