begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cometd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cometd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|server
operator|.
name|AbstractBayeux
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|server
operator|.
name|continuation
operator|.
name|ContinuationCometdServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSocketConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Component for Jetty Cometd  *   * @version   */
end_comment

begin_class
DECL|class|CometdComponent
specifier|public
class|class
name|CometdComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CometdComponent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connectors
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
name|connectors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectorRef
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|field|sslKeyPassword
specifier|private
name|String
name|sslKeyPassword
decl_stmt|;
DECL|field|sslPassword
specifier|private
name|String
name|sslPassword
decl_stmt|;
DECL|field|sslKeystore
specifier|private
name|String
name|sslKeystore
decl_stmt|;
DECL|field|sslSocketConnector
specifier|private
name|SslSocketConnector
name|sslSocketConnector
decl_stmt|;
DECL|class|ConnectorRef
class|class
name|ConnectorRef
block|{
DECL|field|connector
name|Connector
name|connector
decl_stmt|;
DECL|field|servlet
name|ContinuationCometdServlet
name|servlet
decl_stmt|;
DECL|field|refCount
name|int
name|refCount
decl_stmt|;
DECL|method|ConnectorRef (Connector connector, ContinuationCometdServlet servlet)
specifier|public
name|ConnectorRef
parameter_list|(
name|Connector
name|connector
parameter_list|,
name|ContinuationCometdServlet
name|servlet
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|servlet
operator|=
name|servlet
expr_stmt|;
name|increment
argument_list|()
expr_stmt|;
block|}
DECL|method|increment ()
specifier|public
name|int
name|increment
parameter_list|()
block|{
return|return
operator|++
name|refCount
return|;
block|}
DECL|method|decrement ()
specifier|public
name|int
name|decrement
parameter_list|()
block|{
return|return
operator|--
name|refCount
return|;
block|}
block|}
DECL|method|CometdComponent ()
specifier|public
name|CometdComponent
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|setProperties
argument_list|(
name|this
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
return|return
operator|new
name|CometdEndpoint
argument_list|(
name|this
argument_list|,
name|uri
argument_list|,
name|remaining
argument_list|,
name|parameters
argument_list|)
return|;
block|}
comment|/**      * Connects the URL specified on the endpoint to the specified processor.      */
DECL|method|connect (CometdProducerConsumer prodcon)
specifier|public
name|void
name|connect
parameter_list|(
name|CometdProducerConsumer
name|prodcon
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure that there is a connector for the requested endpoint.
name|CometdEndpoint
name|endpoint
init|=
operator|(
name|CometdEndpoint
operator|)
name|prodcon
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|endpoint
operator|.
name|getProtocol
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|connectors
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|connectors
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|==
literal|null
condition|)
block|{
name|Connector
name|connector
decl_stmt|;
if|if
condition|(
literal|"cometds"
operator|.
name|equals
argument_list|(
name|endpoint
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|connector
operator|=
name|getSslSocketConnector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|=
operator|new
name|SelectChannelConnector
argument_list|()
expr_stmt|;
block|}
name|connector
operator|.
name|setPort
argument_list|(
name|endpoint
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
name|endpoint
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"localhost"
operator|.
name|equalsIgnoreCase
argument_list|(
name|endpoint
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"You use localhost interface! It means that no external connections will be available."
operator|+
literal|" Don't you want to use 0.0.0.0 instead (all network interfaces)?"
argument_list|)
expr_stmt|;
block|}
name|getServer
argument_list|()
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|ContinuationCometdServlet
name|servlet
init|=
name|createServletForConnector
argument_list|(
name|connector
argument_list|,
name|endpoint
argument_list|)
decl_stmt|;
name|connectorRef
operator|=
operator|new
name|ConnectorRef
argument_list|(
name|connector
argument_list|,
name|servlet
argument_list|)
expr_stmt|;
name|getServer
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectors
operator|.
name|put
argument_list|(
name|connectorKey
argument_list|,
name|connectorRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectorRef
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|AbstractBayeux
name|bayeux
init|=
name|connectorRef
operator|.
name|servlet
operator|.
name|getBayeux
argument_list|()
decl_stmt|;
name|bayeux
operator|.
name|setJSONCommented
argument_list|(
name|endpoint
operator|.
name|isJsonCommented
argument_list|()
argument_list|)
expr_stmt|;
name|prodcon
operator|.
name|setBayeux
argument_list|(
name|bayeux
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Disconnects the URL specified on the endpoint from the specified      * processor.      */
DECL|method|disconnect (CometdProducerConsumer prodcon)
specifier|public
name|void
name|disconnect
parameter_list|(
name|CometdProducerConsumer
name|prodcon
parameter_list|)
throws|throws
name|Exception
block|{
name|CometdEndpoint
name|endpoint
init|=
name|prodcon
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
name|String
name|connectorKey
init|=
name|endpoint
operator|.
name|getProtocol
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getUri
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|endpoint
operator|.
name|getPort
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|connectors
init|)
block|{
name|ConnectorRef
name|connectorRef
init|=
name|connectors
operator|.
name|get
argument_list|(
name|connectorKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectorRef
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connectorRef
operator|.
name|decrement
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getServer
argument_list|()
operator|.
name|removeConnector
argument_list|(
name|connectorRef
operator|.
name|connector
argument_list|)
expr_stmt|;
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connectors
operator|.
name|remove
argument_list|(
name|connectorKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createServletForConnector (Connector connector, CometdEndpoint endpoint)
specifier|protected
name|ContinuationCometdServlet
name|createServletForConnector
parameter_list|(
name|Connector
name|connector
parameter_list|,
name|CometdEndpoint
name|endpoint
parameter_list|)
throws|throws
name|Exception
block|{
name|ContinuationCometdServlet
name|servlet
init|=
operator|new
name|ContinuationCometdServlet
argument_list|()
decl_stmt|;
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|server
argument_list|,
literal|"/"
argument_list|,
name|ServletContextHandler
operator|.
name|NO_SECURITY
operator||
name|ServletContextHandler
operator|.
name|NO_SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|setConnectorNames
argument_list|(
operator|new
name|String
index|[]
block|{
name|connector
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|setServlet
argument_list|(
name|servlet
argument_list|)
expr_stmt|;
comment|// Use baseResource to pass as a parameter the url
comment|// pointing to by example classpath:webapp
if|if
condition|(
name|endpoint
operator|.
name|getBaseResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|resources
init|=
name|endpoint
operator|.
name|getBaseResource
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|">>> Protocol found :"
operator|+
name|resources
index|[
literal|0
index|]
operator|+
literal|", and resource : "
operator|+
name|resources
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|resources
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|context
operator|.
name|setBaseResource
argument_list|(
name|Resource
operator|.
name|newResource
argument_list|(
name|resources
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resources
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"classpath"
argument_list|)
condition|)
block|{
comment|// Create a URL handler using classpath protocol
name|URL
name|url
init|=
name|this
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getClassResolver
argument_list|()
operator|.
name|loadResourceAsURL
argument_list|(
name|resources
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|context
operator|.
name|setBaseResource
argument_list|(
name|Resource
operator|.
name|newResource
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
literal|"/cometd/*"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addServlet
argument_list|(
literal|"org.eclipse.jetty.servlet.DefaultServlet"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"timeout"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|endpoint
operator|.
name|getTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"interval"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|endpoint
operator|.
name|getInterval
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"maxInterval"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|endpoint
operator|.
name|getMaxInterval
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"multiFrameInterval"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|endpoint
operator|.
name|getMultiFrameInterval
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"JSONCommented"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|endpoint
operator|.
name|isJsonCommented
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameter
argument_list|(
literal|"logLevel"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|endpoint
operator|.
name|getLogLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|servlet
return|;
block|}
DECL|method|getSslSocketConnector ()
specifier|public
specifier|synchronized
name|SslSocketConnector
name|getSslSocketConnector
parameter_list|()
block|{
if|if
condition|(
name|sslSocketConnector
operator|==
literal|null
condition|)
block|{
name|sslSocketConnector
operator|=
operator|new
name|SslSocketConnector
argument_list|()
expr_stmt|;
comment|// with default null values, jetty ssl system properties
comment|// and console will be read by jetty implementation
name|sslSocketConnector
operator|.
name|setPassword
argument_list|(
name|sslPassword
argument_list|)
expr_stmt|;
name|sslSocketConnector
operator|.
name|setKeyPassword
argument_list|(
name|sslKeyPassword
argument_list|)
expr_stmt|;
if|if
condition|(
name|sslKeystore
operator|!=
literal|null
condition|)
block|{
name|sslSocketConnector
operator|.
name|setKeystore
argument_list|(
name|sslKeystore
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sslSocketConnector
return|;
block|}
DECL|method|getServer ()
specifier|public
name|Server
name|getServer
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|server
operator|=
name|createServer
argument_list|()
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
DECL|method|setServer (Server server)
specifier|public
name|void
name|setServer
parameter_list|(
name|Server
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
DECL|method|getSslKeyPassword ()
specifier|public
name|String
name|getSslKeyPassword
parameter_list|()
block|{
return|return
name|sslKeyPassword
return|;
block|}
DECL|method|getSslPassword ()
specifier|public
name|String
name|getSslPassword
parameter_list|()
block|{
return|return
name|sslPassword
return|;
block|}
DECL|method|getSslKeystore ()
specifier|public
name|String
name|getSslKeystore
parameter_list|()
block|{
return|return
name|sslKeystore
return|;
block|}
DECL|method|setSslKeyPassword (String sslKeyPassword)
specifier|public
name|void
name|setSslKeyPassword
parameter_list|(
name|String
name|sslKeyPassword
parameter_list|)
block|{
name|this
operator|.
name|sslKeyPassword
operator|=
name|sslKeyPassword
expr_stmt|;
block|}
DECL|method|setSslPassword (String sslPassword)
specifier|public
name|void
name|setSslPassword
parameter_list|(
name|String
name|sslPassword
parameter_list|)
block|{
name|this
operator|.
name|sslPassword
operator|=
name|sslPassword
expr_stmt|;
block|}
DECL|method|setSslKeystore (String sslKeystore)
specifier|public
name|void
name|setSslKeystore
parameter_list|(
name|String
name|sslKeystore
parameter_list|)
block|{
name|this
operator|.
name|sslKeystore
operator|=
name|sslKeystore
expr_stmt|;
block|}
DECL|method|createServer ()
specifier|protected
name|Server
name|createServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Server
name|server
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|ContextHandlerCollection
name|collection
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|server
operator|.
name|setHandler
argument_list|(
name|collection
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ConnectorRef
name|connectorRef
range|:
name|connectors
operator|.
name|values
argument_list|()
control|)
block|{
name|connectorRef
operator|.
name|connector
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|connectors
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

