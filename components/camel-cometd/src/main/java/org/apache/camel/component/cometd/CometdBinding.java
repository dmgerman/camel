begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.cometd
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|cometd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|server
operator|.
name|ServerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|server
operator|.
name|ServerMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|bayeux
operator|.
name|server
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cometd
operator|.
name|server
operator|.
name|BayeuxServerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Strategy used to convert between a Camel {@link Exchange} and  * to and from a Cometd messages  */
end_comment

begin_class
DECL|class|CometdBinding
specifier|public
class|class
name|CometdBinding
block|{
DECL|field|HEADERS_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|HEADERS_FIELD
init|=
literal|"CamelHeaders"
decl_stmt|;
DECL|field|COMETD_CLIENT_ID_HEADER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMETD_CLIENT_ID_HEADER_NAME
init|=
literal|"CometdClientId"
decl_stmt|;
DECL|field|COMETD_SUBSCRIPTION_HEADER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMETD_SUBSCRIPTION_HEADER_NAME
init|=
literal|"subscription"
decl_stmt|;
DECL|field|COMETD_SESSION_ATTR_HEADER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMETD_SESSION_ATTR_HEADER_NAME
init|=
literal|"CometdSessionAttr"
decl_stmt|;
DECL|field|IMPROPER_SESSTION_ATTRIBUTE_TYPE_MESSAGE
specifier|private
specifier|static
specifier|final
name|String
name|IMPROPER_SESSTION_ATTRIBUTE_TYPE_MESSAGE
init|=
literal|"Sesstion attribute %s has a value of %s which cannot be included as at header because it is not an int, string, or long."
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CometdBinding
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|bayeux
specifier|private
specifier|final
name|BayeuxServerImpl
name|bayeux
decl_stmt|;
DECL|field|enableSessionHeader
specifier|private
name|boolean
name|enableSessionHeader
decl_stmt|;
DECL|method|CometdBinding (BayeuxServerImpl bayeux)
specifier|public
name|CometdBinding
parameter_list|(
name|BayeuxServerImpl
name|bayeux
parameter_list|)
block|{
name|this
argument_list|(
name|bayeux
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|CometdBinding (BayeuxServerImpl bayeux, boolean enableSessionHeader)
specifier|public
name|CometdBinding
parameter_list|(
name|BayeuxServerImpl
name|bayeux
parameter_list|,
name|boolean
name|enableSessionHeader
parameter_list|)
block|{
name|this
operator|.
name|bayeux
operator|=
name|bayeux
expr_stmt|;
name|this
operator|.
name|enableSessionHeader
operator|=
name|enableSessionHeader
expr_stmt|;
block|}
DECL|method|createCometdMessage (ServerChannel channel, ServerSession serverSession, Message camelMessage)
specifier|public
name|ServerMessage
operator|.
name|Mutable
name|createCometdMessage
parameter_list|(
name|ServerChannel
name|channel
parameter_list|,
name|ServerSession
name|serverSession
parameter_list|,
name|Message
name|camelMessage
parameter_list|)
block|{
name|ServerMessage
operator|.
name|Mutable
name|mutable
init|=
name|bayeux
operator|.
name|newMessage
argument_list|()
decl_stmt|;
name|mutable
operator|.
name|setChannel
argument_list|(
name|channel
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverSession
operator|!=
literal|null
condition|)
block|{
name|mutable
operator|.
name|setClientId
argument_list|(
name|serverSession
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addHeadersToMessage
argument_list|(
name|mutable
argument_list|,
name|camelMessage
argument_list|)
expr_stmt|;
name|mutable
operator|.
name|setData
argument_list|(
name|camelMessage
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mutable
return|;
block|}
DECL|method|createCamelMessage (ServerSession remote, ServerMessage cometdMessage, Object data)
specifier|public
name|Message
name|createCamelMessage
parameter_list|(
name|ServerSession
name|remote
parameter_list|,
name|ServerMessage
name|cometdMessage
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|cometdMessage
operator|!=
literal|null
condition|)
block|{
name|data
operator|=
name|cometdMessage
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
name|Message
name|message
init|=
operator|new
name|DefaultMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeaders
argument_list|(
name|getHeadersFromMessage
argument_list|(
name|cometdMessage
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setHeader
argument_list|(
name|COMETD_CLIENT_ID_HEADER_NAME
argument_list|,
name|remote
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cometdMessage
operator|.
name|get
argument_list|(
name|COMETD_SUBSCRIPTION_HEADER_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|COMETD_SUBSCRIPTION_HEADER_NAME
argument_list|,
name|cometdMessage
operator|.
name|get
argument_list|(
name|COMETD_SUBSCRIPTION_HEADER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enableSessionHeader
condition|)
block|{
name|addSessionAttributesToMessageHeaders
argument_list|(
name|remote
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
DECL|method|addSessionAttributesToMessageHeaders (ServerSession remote, Message message)
specifier|private
name|void
name|addSessionAttributesToMessageHeaders
parameter_list|(
name|ServerSession
name|remote
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|attributeNames
init|=
name|remote
operator|.
name|getAttributeNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attributeName
range|:
name|attributeNames
control|)
block|{
name|Object
name|attribute
init|=
name|remote
operator|.
name|getAttribute
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|instanceof
name|Integer
operator|||
name|attribute
operator|instanceof
name|String
operator|||
name|attribute
operator|instanceof
name|Long
operator|||
name|attribute
operator|instanceof
name|Double
operator|||
name|attribute
operator|instanceof
name|Boolean
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|attributeName
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Do we need to support other type of session objects ?
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|IMPROPER_SESSTION_ATTRIBUTE_TYPE_MESSAGE
argument_list|,
name|attributeName
argument_list|,
name|attribute
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addHeadersToMessage (ServerMessage.Mutable cometdMessage, Message camelMessage)
specifier|public
name|void
name|addHeadersToMessage
parameter_list|(
name|ServerMessage
operator|.
name|Mutable
name|cometdMessage
parameter_list|,
name|Message
name|camelMessage
parameter_list|)
block|{
if|if
condition|(
name|camelMessage
operator|.
name|hasHeaders
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ext
init|=
name|cometdMessage
operator|.
name|getExt
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ext
operator|.
name|put
argument_list|(
name|HEADERS_FIELD
argument_list|,
name|filterHeaders
argument_list|(
name|camelMessage
operator|.
name|getHeaders
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO: do something in the style of JMS where they have header Strategies?
DECL|method|filterHeaders (Map<String, Object> headers)
specifier|private
name|Object
name|filterHeaders
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getHeadersFromMessage (ServerMessage message)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHeadersFromMessage
parameter_list|(
name|ServerMessage
name|message
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ext
init|=
name|message
operator|.
name|getExt
argument_list|()
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
operator|&&
name|ext
operator|.
name|containsKey
argument_list|(
name|HEADERS_FIELD
argument_list|)
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ext
operator|.
name|get
argument_list|(
name|HEADERS_FIELD
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

