begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.solr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|ConcurrentUpdateSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import

begin_comment
comment|/**  * Represents a Solr endpoint.  */
end_comment

begin_class
DECL|class|SolrEndpoint
specifier|public
class|class
name|SolrEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|requestHandler
specifier|private
name|String
name|requestHandler
decl_stmt|;
DECL|field|url
specifier|private
name|String
name|url
decl_stmt|;
DECL|field|streamingQueueSize
specifier|private
name|int
name|streamingQueueSize
init|=
name|SolrConstants
operator|.
name|DEFUALT_STREAMING_QUEUE_SIZE
decl_stmt|;
DECL|field|streamingThreadCount
specifier|private
name|int
name|streamingThreadCount
init|=
name|SolrConstants
operator|.
name|DEFAULT_STREAMING_THREAD_COUNT
decl_stmt|;
DECL|field|maxRetries
specifier|private
name|Integer
name|maxRetries
decl_stmt|;
DECL|field|soTimeout
specifier|private
name|Integer
name|soTimeout
decl_stmt|;
DECL|field|connectionTimeout
specifier|private
name|Integer
name|connectionTimeout
decl_stmt|;
DECL|field|defaultMaxConnectionsPerHost
specifier|private
name|Integer
name|defaultMaxConnectionsPerHost
decl_stmt|;
DECL|field|maxTotalConnections
specifier|private
name|Integer
name|maxTotalConnections
decl_stmt|;
DECL|field|followRedirects
specifier|private
name|Boolean
name|followRedirects
decl_stmt|;
DECL|field|allowCompression
specifier|private
name|Boolean
name|allowCompression
decl_stmt|;
DECL|field|scheme
specifier|private
name|String
name|scheme
init|=
literal|"http://"
decl_stmt|;
DECL|field|zkHost
specifier|private
name|String
name|zkHost
init|=
literal|null
decl_stmt|;
DECL|field|collection
specifier|private
name|String
name|collection
init|=
literal|null
decl_stmt|;
DECL|method|SolrEndpoint (String endpointUri, SolrComponent component, String address)
specifier|public
name|SolrEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|SolrComponent
name|component
parameter_list|,
name|String
name|address
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpointUri
operator|.
name|startsWith
argument_list|(
literal|"solrs"
argument_list|)
condition|)
block|{
name|scheme
operator|=
literal|"https://"
expr_stmt|;
block|}
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|scheme
operator|+
name|address
argument_list|)
decl_stmt|;
name|this
operator|.
name|url
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|createSolrServer ()
specifier|private
name|SolrServer
name|createSolrServer
parameter_list|()
block|{
name|SolrServer
name|server
init|=
literal|null
decl_stmt|;
name|String
name|zkHost
init|=
name|this
operator|.
name|getZkHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
name|server
operator|=
operator|new
name|HttpSolrServer
argument_list|(
name|this
operator|.
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CloudSolrServer
name|cServer
init|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkHost
argument_list|)
decl_stmt|;
name|cServer
operator|.
name|setDefaultCollection
argument_list|(
name|this
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|=
name|cServer
expr_stmt|;
block|}
return|return
name|server
return|;
block|}
DECL|method|setZkHost (String zkHost)
specifier|public
name|void
name|setZkHost
parameter_list|(
name|String
name|zkHost
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|String
name|decoded
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|zkHost
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|this
operator|.
name|zkHost
operator|=
name|decoded
expr_stmt|;
block|}
DECL|method|getZkHost ()
specifier|public
name|String
name|getZkHost
parameter_list|()
block|{
return|return
name|this
operator|.
name|zkHost
return|;
block|}
DECL|method|setCollection (String collection)
specifier|public
name|void
name|setCollection
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
DECL|method|getCollection ()
specifier|public
name|String
name|getCollection
parameter_list|()
block|{
return|return
name|this
operator|.
name|collection
return|;
block|}
annotation|@
name|Override
DECL|method|getComponent ()
specifier|public
name|SolrComponent
name|getComponent
parameter_list|()
block|{
return|return
operator|(
name|SolrComponent
operator|)
name|super
operator|.
name|getComponent
argument_list|()
return|;
block|}
DECL|method|getCloudServer ()
specifier|private
name|CloudSolrServer
name|getCloudServer
parameter_list|()
block|{
name|CloudSolrServer
name|rVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getZkHost
argument_list|()
operator|!=
literal|null
operator|&&
name|this
operator|.
name|getCollection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rVal
operator|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkHost
argument_list|)
expr_stmt|;
name|rVal
operator|.
name|setDefaultCollection
argument_list|(
name|this
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rVal
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do we have servers?
name|SolrComponent
operator|.
name|SolrServerReference
name|ref
init|=
name|getComponent
argument_list|()
operator|.
name|getSolrServers
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
comment|// no then create new servers
name|ref
operator|=
operator|new
name|SolrComponent
operator|.
name|SolrServerReference
argument_list|()
expr_stmt|;
name|CloudSolrServer
name|cloudServer
init|=
name|getCloudServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|cloudServer
operator|==
literal|null
condition|)
block|{
name|HttpSolrServer
name|solrServer
init|=
operator|new
name|HttpSolrServer
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|ConcurrentUpdateSolrServer
name|solrStreamingServer
init|=
operator|new
name|ConcurrentUpdateSolrServer
argument_list|(
name|url
argument_list|,
name|streamingQueueSize
argument_list|,
name|streamingThreadCount
argument_list|)
decl_stmt|;
comment|// set the properties on the solr server
if|if
condition|(
name|maxRetries
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|setMaxRetries
argument_list|(
name|maxRetries
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|soTimeout
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|setSoTimeout
argument_list|(
name|soTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectionTimeout
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultMaxConnectionsPerHost
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
name|defaultMaxConnectionsPerHost
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxTotalConnections
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|setMaxTotalConnections
argument_list|(
name|maxTotalConnections
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|followRedirects
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|setFollowRedirects
argument_list|(
name|followRedirects
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allowCompression
operator|!=
literal|null
condition|)
block|{
name|solrServer
operator|.
name|setAllowCompression
argument_list|(
name|allowCompression
argument_list|)
expr_stmt|;
block|}
name|ref
operator|.
name|setSolrServer
argument_list|(
name|solrServer
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setUpdateSolrServer
argument_list|(
name|solrStreamingServer
argument_list|)
expr_stmt|;
block|}
name|ref
operator|.
name|setCloudSolrServer
argument_list|(
name|cloudServer
argument_list|)
expr_stmt|;
name|getComponent
argument_list|()
operator|.
name|addSolrServers
argument_list|(
name|this
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
name|ref
operator|.
name|addReference
argument_list|()
expr_stmt|;
return|return
operator|new
name|SolrProducer
argument_list|(
name|this
argument_list|,
name|ref
operator|.
name|getSolrServer
argument_list|()
argument_list|,
name|ref
operator|.
name|getUpdateSolrServer
argument_list|()
argument_list|,
name|ref
operator|.
name|getCloudSolrServer
argument_list|()
argument_list|)
return|;
block|}
DECL|method|onProducerShutdown (SolrProducer producer)
specifier|protected
name|void
name|onProducerShutdown
parameter_list|(
name|SolrProducer
name|producer
parameter_list|)
block|{
name|SolrComponent
operator|.
name|SolrServerReference
name|ref
init|=
name|getComponent
argument_list|()
operator|.
name|getSolrServers
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|int
name|counter
init|=
name|ref
operator|.
name|decReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|counter
operator|<=
literal|0
condition|)
block|{
name|getComponent
argument_list|()
operator|.
name|shutdownServers
argument_list|(
name|ref
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Consumer not supported for Solr endpoint."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|setRequestHandler (String requestHandler)
specifier|public
name|void
name|setRequestHandler
parameter_list|(
name|String
name|requestHandler
parameter_list|)
block|{
name|this
operator|.
name|requestHandler
operator|=
name|requestHandler
expr_stmt|;
block|}
DECL|method|getRequestHandler ()
specifier|public
name|String
name|getRequestHandler
parameter_list|()
block|{
return|return
name|requestHandler
return|;
block|}
DECL|method|getStreamingThreadCount ()
specifier|public
name|int
name|getStreamingThreadCount
parameter_list|()
block|{
return|return
name|streamingThreadCount
return|;
block|}
DECL|method|setStreamingThreadCount (int streamingThreadCount)
specifier|public
name|void
name|setStreamingThreadCount
parameter_list|(
name|int
name|streamingThreadCount
parameter_list|)
block|{
name|this
operator|.
name|streamingThreadCount
operator|=
name|streamingThreadCount
expr_stmt|;
block|}
DECL|method|getStreamingQueueSize ()
specifier|public
name|int
name|getStreamingQueueSize
parameter_list|()
block|{
return|return
name|streamingQueueSize
return|;
block|}
DECL|method|setStreamingQueueSize (int streamingQueueSize)
specifier|public
name|void
name|setStreamingQueueSize
parameter_list|(
name|int
name|streamingQueueSize
parameter_list|)
block|{
name|this
operator|.
name|streamingQueueSize
operator|=
name|streamingQueueSize
expr_stmt|;
block|}
DECL|method|getMaxRetries ()
specifier|public
name|Integer
name|getMaxRetries
parameter_list|()
block|{
return|return
name|maxRetries
return|;
block|}
DECL|method|setMaxRetries (Integer maxRetries)
specifier|public
name|void
name|setMaxRetries
parameter_list|(
name|Integer
name|maxRetries
parameter_list|)
block|{
name|this
operator|.
name|maxRetries
operator|=
name|maxRetries
expr_stmt|;
block|}
DECL|method|getSoTimeout ()
specifier|public
name|Integer
name|getSoTimeout
parameter_list|()
block|{
return|return
name|soTimeout
return|;
block|}
DECL|method|setSoTimeout (Integer soTimeout)
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|Integer
name|soTimeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|soTimeout
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|Integer
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
DECL|method|setConnectionTimeout (Integer connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getDefaultMaxConnectionsPerHost ()
specifier|public
name|Integer
name|getDefaultMaxConnectionsPerHost
parameter_list|()
block|{
return|return
name|defaultMaxConnectionsPerHost
return|;
block|}
DECL|method|setDefaultMaxConnectionsPerHost (Integer defaultMaxConnectionsPerHost)
specifier|public
name|void
name|setDefaultMaxConnectionsPerHost
parameter_list|(
name|Integer
name|defaultMaxConnectionsPerHost
parameter_list|)
block|{
name|this
operator|.
name|defaultMaxConnectionsPerHost
operator|=
name|defaultMaxConnectionsPerHost
expr_stmt|;
block|}
DECL|method|getMaxTotalConnections ()
specifier|public
name|Integer
name|getMaxTotalConnections
parameter_list|()
block|{
return|return
name|maxTotalConnections
return|;
block|}
DECL|method|setMaxTotalConnections (Integer maxTotalConnections)
specifier|public
name|void
name|setMaxTotalConnections
parameter_list|(
name|Integer
name|maxTotalConnections
parameter_list|)
block|{
name|this
operator|.
name|maxTotalConnections
operator|=
name|maxTotalConnections
expr_stmt|;
block|}
DECL|method|getFollowRedirects ()
specifier|public
name|Boolean
name|getFollowRedirects
parameter_list|()
block|{
return|return
name|followRedirects
return|;
block|}
DECL|method|setFollowRedirects (Boolean followRedirects)
specifier|public
name|void
name|setFollowRedirects
parameter_list|(
name|Boolean
name|followRedirects
parameter_list|)
block|{
name|this
operator|.
name|followRedirects
operator|=
name|followRedirects
expr_stmt|;
block|}
DECL|method|getAllowCompression ()
specifier|public
name|Boolean
name|getAllowCompression
parameter_list|()
block|{
return|return
name|allowCompression
return|;
block|}
DECL|method|setAllowCompression (Boolean allowCompression)
specifier|public
name|void
name|setAllowCompression
parameter_list|(
name|Boolean
name|allowCompression
parameter_list|)
block|{
name|this
operator|.
name|allowCompression
operator|=
name|allowCompression
expr_stmt|;
block|}
block|}
end_class

end_unit

