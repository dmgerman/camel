begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.solr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|StreamingUpdateSolrServer
import|;
end_import

begin_comment
comment|/**  * Represents a Solr endpoint.  */
end_comment

begin_class
DECL|class|SolrEndpoint
specifier|public
class|class
name|SolrEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|solrServer
specifier|private
name|CommonsHttpSolrServer
name|solrServer
decl_stmt|;
DECL|field|streamingSolrServer
specifier|private
name|CommonsHttpSolrServer
name|streamingSolrServer
decl_stmt|;
DECL|field|requestHandler
specifier|private
name|String
name|requestHandler
decl_stmt|;
DECL|field|streamingThreadCount
specifier|private
name|int
name|streamingThreadCount
decl_stmt|;
DECL|field|streamingQueueSize
specifier|private
name|int
name|streamingQueueSize
decl_stmt|;
DECL|method|SolrEndpoint (String endpointUri, SolrComponent component, String address, Map<String, Object> parameters)
specifier|public
name|SolrEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|SolrComponent
name|component
parameter_list|,
name|String
name|address
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|solrServer
operator|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
literal|"http://"
operator|+
name|address
argument_list|)
expr_stmt|;
name|streamingQueueSize
operator|=
name|getIntFromString
argument_list|(
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|SolrConstants
operator|.
name|PARAM_STREAMING_QUEUE_SIZE
argument_list|)
argument_list|,
name|SolrConstants
operator|.
name|DEFUALT_STREAMING_QUEUE_SIZE
argument_list|)
expr_stmt|;
name|streamingThreadCount
operator|=
name|getIntFromString
argument_list|(
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|SolrConstants
operator|.
name|PARAM_STREAMING_THREAD_COUNT
argument_list|)
argument_list|,
name|SolrConstants
operator|.
name|DEFAULT_STREAMING_THREAD_COUNT
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|=
operator|new
name|StreamingUpdateSolrServer
argument_list|(
literal|"http://"
operator|+
name|address
argument_list|,
name|streamingQueueSize
argument_list|,
name|streamingThreadCount
argument_list|)
expr_stmt|;
block|}
DECL|method|getIntFromString (String value, int defaultValue)
specifier|public
specifier|static
name|int
name|getIntFromString
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
return|return
name|defaultValue
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|SolrProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Consumer not supported for Solr endpoint."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getSolrServer ()
specifier|public
name|CommonsHttpSolrServer
name|getSolrServer
parameter_list|()
block|{
return|return
name|solrServer
return|;
block|}
DECL|method|getStreamingSolrServer ()
specifier|public
name|CommonsHttpSolrServer
name|getStreamingSolrServer
parameter_list|()
block|{
return|return
name|streamingSolrServer
return|;
block|}
DECL|method|setStreamingSolrServer (CommonsHttpSolrServer streamingSolrServer)
specifier|public
name|void
name|setStreamingSolrServer
parameter_list|(
name|CommonsHttpSolrServer
name|streamingSolrServer
parameter_list|)
block|{
name|this
operator|.
name|streamingSolrServer
operator|=
name|streamingSolrServer
expr_stmt|;
block|}
DECL|method|setMaxRetries (int maxRetries)
specifier|public
name|void
name|setMaxRetries
parameter_list|(
name|int
name|maxRetries
parameter_list|)
block|{
name|solrServer
operator|.
name|setMaxRetries
argument_list|(
name|maxRetries
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|.
name|setMaxRetries
argument_list|(
name|maxRetries
argument_list|)
expr_stmt|;
block|}
DECL|method|setSoTimeout (int soTimeout)
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|soTimeout
parameter_list|)
block|{
name|solrServer
operator|.
name|setSoTimeout
argument_list|(
name|soTimeout
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|.
name|setSoTimeout
argument_list|(
name|soTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|setConnectionTimeout (int connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|solrServer
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|.
name|setConnectionTimeout
argument_list|(
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultMaxConnectionsPerHost (int defaultMaxConnectionsPerHost)
specifier|public
name|void
name|setDefaultMaxConnectionsPerHost
parameter_list|(
name|int
name|defaultMaxConnectionsPerHost
parameter_list|)
block|{
name|solrServer
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
name|defaultMaxConnectionsPerHost
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|.
name|setDefaultMaxConnectionsPerHost
argument_list|(
name|defaultMaxConnectionsPerHost
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaxTotalConnections (int maxTotalConnections)
specifier|public
name|void
name|setMaxTotalConnections
parameter_list|(
name|int
name|maxTotalConnections
parameter_list|)
block|{
name|solrServer
operator|.
name|setMaxTotalConnections
argument_list|(
name|maxTotalConnections
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|.
name|setMaxTotalConnections
argument_list|(
name|maxTotalConnections
argument_list|)
expr_stmt|;
block|}
DECL|method|setFollowRedirects (boolean followRedirects)
specifier|public
name|void
name|setFollowRedirects
parameter_list|(
name|boolean
name|followRedirects
parameter_list|)
block|{
name|solrServer
operator|.
name|setFollowRedirects
argument_list|(
name|followRedirects
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|.
name|setFollowRedirects
argument_list|(
name|followRedirects
argument_list|)
expr_stmt|;
block|}
DECL|method|setAllowCompression (boolean allowCompression)
specifier|public
name|void
name|setAllowCompression
parameter_list|(
name|boolean
name|allowCompression
parameter_list|)
block|{
name|solrServer
operator|.
name|setAllowCompression
argument_list|(
name|allowCompression
argument_list|)
expr_stmt|;
name|streamingSolrServer
operator|.
name|setAllowCompression
argument_list|(
name|allowCompression
argument_list|)
expr_stmt|;
block|}
DECL|method|setRequestHandler (String requestHandler)
specifier|public
name|void
name|setRequestHandler
parameter_list|(
name|String
name|requestHandler
parameter_list|)
block|{
name|this
operator|.
name|requestHandler
operator|=
name|requestHandler
expr_stmt|;
block|}
DECL|method|getRequestHandler ()
specifier|public
name|String
name|getRequestHandler
parameter_list|()
block|{
return|return
name|requestHandler
return|;
block|}
DECL|method|getStreamingThreadCount ()
specifier|public
name|int
name|getStreamingThreadCount
parameter_list|()
block|{
return|return
name|streamingThreadCount
return|;
block|}
DECL|method|setStreamingThreadCount (int streamingThreadCount)
specifier|public
name|void
name|setStreamingThreadCount
parameter_list|(
name|int
name|streamingThreadCount
parameter_list|)
block|{
name|this
operator|.
name|streamingThreadCount
operator|=
name|streamingThreadCount
expr_stmt|;
block|}
DECL|method|getStreamingQueueSize ()
specifier|public
name|int
name|getStreamingQueueSize
parameter_list|()
block|{
return|return
name|streamingQueueSize
return|;
block|}
DECL|method|setStreamingQueueSize (int streamingQueueSize)
specifier|public
name|void
name|setStreamingQueueSize
parameter_list|(
name|int
name|streamingQueueSize
parameter_list|)
block|{
name|this
operator|.
name|streamingQueueSize
operator|=
name|streamingQueueSize
expr_stmt|;
block|}
block|}
end_class

end_unit

