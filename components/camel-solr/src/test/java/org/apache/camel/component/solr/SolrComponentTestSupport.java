begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.solr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|AvailablePortFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CommonsHttpSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
DECL|class|SolrComponentTestSupport
specifier|public
class|class
name|SolrComponentTestSupport
extends|extends
name|CamelTestSupport
block|{
DECL|field|PORT
specifier|public
specifier|static
specifier|final
name|int
name|PORT
init|=
name|AvailablePortFinder
operator|.
name|getNextAvailable
argument_list|(
literal|8899
argument_list|)
decl_stmt|;
DECL|field|SOLR_ROUTE_URI
specifier|public
specifier|static
specifier|final
name|String
name|SOLR_ROUTE_URI
init|=
literal|"solr://localhost:"
operator|+
name|PORT
operator|+
literal|"/solr"
decl_stmt|;
DECL|field|TEST_ID
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_ID
init|=
literal|"1234"
decl_stmt|;
DECL|field|solrRunner
specifier|protected
specifier|static
name|JettySolrRunner
name|solrRunner
decl_stmt|;
DECL|field|solrServer
specifier|protected
specifier|static
name|CommonsHttpSolrServer
name|solrServer
decl_stmt|;
DECL|method|solrInsertTestEntry ()
specifier|protected
name|void
name|solrInsertTestEntry
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|SolrConstants
operator|.
name|OPERATION
argument_list|,
name|SolrConstants
operator|.
name|OPERATION_INSERT
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"SolrField.id"
argument_list|,
name|TEST_ID
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
DECL|method|solrCommit ()
specifier|protected
name|void
name|solrCommit
parameter_list|()
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|SolrConstants
operator|.
name|OPERATION
argument_list|,
name|SolrConstants
operator|.
name|OPERATION_COMMIT
argument_list|)
expr_stmt|;
block|}
DECL|method|executeSolrQuery (String query)
specifier|protected
name|QueryResponse
name|executeSolrQuery
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|SolrServerException
block|{
name|SolrQuery
name|solrQuery
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|solrQuery
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
return|return
name|solrServer
operator|.
name|query
argument_list|(
name|solrQuery
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set appropriate paths for Solr to use.
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.solr.home"
argument_list|,
literal|"src/test/resources/solr"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.data.dir"
argument_list|,
literal|"target/test-classes/solr/data"
argument_list|)
expr_stmt|;
comment|// Instruct Solr to keep the index in memory, for faster testing.
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.RAMDirectoryFactory"
argument_list|)
expr_stmt|;
comment|// Start a Solr instance.
name|solrRunner
operator|=
operator|new
name|JettySolrRunner
argument_list|(
literal|"/solr"
argument_list|,
name|PORT
argument_list|)
expr_stmt|;
name|solrRunner
operator|.
name|start
argument_list|()
expr_stmt|;
name|solrServer
operator|=
operator|new
name|CommonsHttpSolrServer
argument_list|(
literal|"http://localhost:"
operator|+
name|PORT
operator|+
literal|"/solr"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|solrRunner
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
name|SOLR_ROUTE_URI
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Before
DECL|method|clearIndex ()
specifier|public
name|void
name|clearIndex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clear the Solr index.
name|solrServer
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|solrServer
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

