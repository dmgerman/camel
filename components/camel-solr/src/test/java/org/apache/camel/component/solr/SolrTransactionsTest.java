begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.solr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|matchers
operator|.
name|ThrowableMessageMatcher
operator|.
name|hasMessage
import|;
end_import

begin_class
DECL|class|SolrTransactionsTest
specifier|public
class|class
name|SolrTransactionsTest
extends|extends
name|SolrComponentTestSupport
block|{
annotation|@
name|Rule
DECL|field|thrown
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|field|solrServerType
specifier|private
name|SolrFixtures
operator|.
name|TestServerType
name|solrServerType
decl_stmt|;
DECL|method|SolrTransactionsTest (SolrFixtures.TestServerType solrServerType)
specifier|public
name|SolrTransactionsTest
parameter_list|(
name|SolrFixtures
operator|.
name|TestServerType
name|solrServerType
parameter_list|)
block|{
name|super
argument_list|(
name|solrServerType
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrServerType
operator|=
name|solrServerType
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCommit ()
specifier|public
name|void
name|testCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|//insert and verify
name|solrInsertTestEntry
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of entries found"
argument_list|,
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
literal|"id:"
operator|+
name|TEST_ID
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//commit
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|SolrConstants
operator|.
name|OPERATION
argument_list|,
name|SolrConstants
operator|.
name|OPERATION_COMMIT
argument_list|)
expr_stmt|;
comment|//verify exists after commit
name|assertEquals
argument_list|(
literal|"wrong number of entries found"
argument_list|,
literal|1
argument_list|,
name|executeSolrQuery
argument_list|(
literal|"id:"
operator|+
name|TEST_ID
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRollback ()
specifier|public
name|void
name|testRollback
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|SolrFixtures
operator|.
name|TestServerType
operator|.
name|USE_CLOUD
operator|==
name|this
operator|.
name|solrServerType
condition|)
block|{
comment|// Twisting expectations in this case as rollback is currently no
comment|// more supported in SolrCloud mode. See SOLR-4895
name|thrown
operator|.
name|expect
argument_list|(
name|CamelExecutionException
operator|.
name|class
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedMessagePart
init|=
literal|"Rollback is currently not supported in SolrCloud mode. (SOLR-4895)"
decl_stmt|;
name|thrown
operator|.
name|expectCause
argument_list|(
name|allOf
argument_list|(
name|isA
argument_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
operator|.
name|class
argument_list|)
argument_list|,
name|hasMessage
argument_list|(
name|containsString
argument_list|(
name|expectedMessagePart
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//insert and verify
name|solrInsertTestEntry
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of entries found"
argument_list|,
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
literal|"id:"
operator|+
name|TEST_ID
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//rollback
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|SolrConstants
operator|.
name|OPERATION
argument_list|,
name|SolrConstants
operator|.
name|OPERATION_ROLLBACK
argument_list|)
expr_stmt|;
comment|//verify after rollback
name|assertEquals
argument_list|(
literal|"wrong number of entries found"
argument_list|,
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
literal|"id:"
operator|+
name|TEST_ID
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//commit
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|SolrConstants
operator|.
name|OPERATION
argument_list|,
name|SolrConstants
operator|.
name|OPERATION_COMMIT
argument_list|)
expr_stmt|;
comment|//verify after commit (again)
name|assertEquals
argument_list|(
literal|"wrong number of entries found"
argument_list|,
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
literal|"id:"
operator|+
name|TEST_ID
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOptimize ()
specifier|public
name|void
name|testOptimize
parameter_list|()
throws|throws
name|Exception
block|{
comment|//insert and verify
name|solrInsertTestEntry
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of entries found"
argument_list|,
literal|0
argument_list|,
name|executeSolrQuery
argument_list|(
literal|"id:"
operator|+
name|TEST_ID
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|//optimize
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|SolrConstants
operator|.
name|OPERATION
argument_list|,
name|SolrConstants
operator|.
name|OPERATION_OPTIMIZE
argument_list|)
expr_stmt|;
comment|//verify exists after optimize
name|assertEquals
argument_list|(
literal|"wrong number of entries found"
argument_list|,
literal|1
argument_list|,
name|executeSolrQuery
argument_list|(
literal|"id:"
operator|+
name|TEST_ID
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

