begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.camel.component.solr
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractZkTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkTestServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrDispatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_class
DECL|class|SolrCloudFixture
specifier|public
class|class
name|SolrCloudFixture
block|{
DECL|field|testDir
name|File
name|testDir
decl_stmt|;
DECL|field|zkServer
name|ZkTestServer
name|zkServer
decl_stmt|;
DECL|field|jetty1
name|JettySolrRunner
name|jetty1
decl_stmt|;
DECL|field|nodeCnt
name|AtomicInteger
name|nodeCnt
decl_stmt|;
DECL|field|solrClient
name|CloudSolrServer
name|solrClient
init|=
literal|null
decl_stmt|;
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SolrCloudFixture
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// /** create indexes in this directory, optimally use a subdir, named after
comment|// the test */
comment|/** 	 * Create indexes in this directory, optimally use a subdir, named after the 	 * test 	 */
DECL|field|TEMP_DIR
specifier|public
specifier|static
specifier|final
name|File
name|TEMP_DIR
decl_stmt|;
static|static
block|{
name|String
name|s
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tempDir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"To run tests, you need to define system property 'tempDir' or 'java.io.tmpdir'."
argument_list|)
throw|;
name|TEMP_DIR
operator|=
operator|new
name|File
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|TEMP_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
DECL|method|putConfig (String confName, SolrZkClient zkClient, File solrhome, final String name)
specifier|public
specifier|static
name|void
name|putConfig
parameter_list|(
name|String
name|confName
parameter_list|,
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|solrhome
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|putConfig
argument_list|(
name|confName
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|putConfig (String confName, SolrZkClient zkClient, File solrhome, final String srcName, String destName)
specifier|public
specifier|static
name|void
name|putConfig
parameter_list|(
name|String
name|confName
parameter_list|,
name|SolrZkClient
name|zkClient
parameter_list|,
name|File
name|solrhome
parameter_list|,
specifier|final
name|String
name|srcName
parameter_list|,
name|String
name|destName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|solrhome
argument_list|,
literal|"collection1"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
operator|+
name|File
operator|.
name|separator
operator|+
name|srcName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"zk skipping "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" because it doesn't exist"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|destPath
init|=
literal|"/configs/"
operator|+
name|confName
operator|+
literal|"/"
operator|+
name|destName
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"zk put "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" to "
operator|+
name|destPath
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|destPath
argument_list|,
name|file
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// static to share with distrib test
DECL|method|buildZooKeeper (String zkHost, String zkAddress, File solrhome, String config, String schema)
specifier|public
name|void
name|buildZooKeeper
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|zkAddress
parameter_list|,
name|File
name|solrhome
parameter_list|,
name|String
name|config
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|zkHost
argument_list|,
literal|60000
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/solr"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkAddress
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"configName"
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
specifier|final
name|ZkNodeProps
name|zkProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/collection1"
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|zkProps
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/collection1/shards"
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/control_collection"
argument_list|,
name|ZkStateReader
operator|.
name|toJSON
argument_list|(
name|zkProps
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/collections/control_collection/shards"
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// for now, always upload the config and schema to the canonical names
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
name|config
argument_list|,
literal|"solrconfig.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
name|schema
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"stopwords.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"stopwords_en.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"protwords.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"currency.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"enumsConfig.xml"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"open-exchange-rates.json"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"mapping-ISOLatin1Accent.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"old_synonyms.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"synonyms.txt"
argument_list|)
expr_stmt|;
name|putConfig
argument_list|(
literal|"conf1"
argument_list|,
name|zkClient
argument_list|,
name|solrhome
argument_list|,
literal|"elevate.xml"
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createJetty (File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, boolean explicitCoreNodeName)
specifier|public
name|JettySolrRunner
name|createJetty
parameter_list|(
name|File
name|solrHome
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|shardList
parameter_list|,
name|String
name|solrConfigOverride
parameter_list|,
name|String
name|schemaOverride
parameter_list|,
name|boolean
name|explicitCoreNodeName
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|stopAtShutdown
init|=
literal|true
decl_stmt|;
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"/solr"
argument_list|,
literal|0
argument_list|,
name|solrConfigOverride
argument_list|,
name|schemaOverride
argument_list|,
name|stopAtShutdown
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jetty
operator|.
name|setShards
argument_list|(
name|shardList
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|explicitCoreNodeName
condition|)
block|{
name|jetty
operator|.
name|setCoreNodeName
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|nodeCnt
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Test SolrCloud Jetty started at: "
operator|+
name|jetty
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jetty
return|;
block|}
DECL|method|SolrCloudFixture (String solrHome)
specifier|public
name|SolrCloudFixture
parameter_list|(
name|String
name|solrHome
parameter_list|)
throws|throws
name|Exception
block|{
name|nodeCnt
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|testDir
operator|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|testDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|String
name|zkDir
init|=
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"zookeeper/server1/data"
decl_stmt|;
name|zkServer
operator|=
operator|new
name|ZkTestServer
argument_list|(
name|zkDir
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|run
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solrcloud.skip.autorecovery"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"zkHost"
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"jetty.port"
argument_list|,
literal|"0000"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop1"
argument_list|,
literal|"propone"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.test.sys.prop2"
argument_list|,
literal|"proptwo"
argument_list|)
expr_stmt|;
name|File
name|solrHomeFile
init|=
operator|new
name|File
argument_list|(
name|solrHome
argument_list|)
decl_stmt|;
name|buildZooKeeper
argument_list|(
name|zkServer
operator|.
name|getZkHost
argument_list|()
argument_list|,
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|solrHomeFile
argument_list|,
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|int
name|aShard
init|=
name|nodeCnt
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|shardName
init|=
literal|"shard"
operator|+
name|aShard
decl_stmt|;
name|jetty1
operator|=
name|createJetty
argument_list|(
name|solrHomeFile
argument_list|,
name|testDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/shard"
operator|+
name|aShard
operator|+
literal|"/data"
argument_list|,
name|shardName
argument_list|,
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for leader for shard: "
operator|+
name|shardName
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
operator|(
operator|(
name|SolrDispatchFilter
operator|)
name|jetty1
operator|.
name|getDispatchFilter
argument_list|()
operator|.
name|getFilter
argument_list|()
operator|)
operator|.
name|getCores
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
literal|"collection1"
argument_list|,
name|shardName
argument_list|,
literal|15000
argument_list|)
expr_stmt|;
name|zkStateReader
operator|.
name|updateClusterState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slices
init|=
name|clusterState
operator|.
name|getSlicesMap
argument_list|(
literal|"collection1"
argument_list|)
decl_stmt|;
name|solrClient
operator|=
operator|new
name|CloudSolrServer
argument_list|(
name|zkServer
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"zkHost"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.test.sys.prop1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.test.sys.prop2"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solrcloud.skip.autorecovery"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"jetty.port"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

