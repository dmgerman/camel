begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.xmpp
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|xmpp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|XmppRouteMultipleProducersSingleConsumerTest
specifier|public
class|class
name|XmppRouteMultipleProducersSingleConsumerTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|goodEndpoint
specifier|protected
name|MockEndpoint
name|goodEndpoint
decl_stmt|;
DECL|field|badEndpoint
specifier|protected
name|MockEndpoint
name|badEndpoint
decl_stmt|;
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testProducerGetsEverything ()
specifier|public
name|void
name|testProducerGetsEverything
parameter_list|()
throws|throws
name|Exception
block|{
name|goodEndpoint
operator|=
operator|(
name|MockEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:good"
argument_list|)
expr_stmt|;
name|badEndpoint
operator|=
operator|(
name|MockEndpoint
operator|)
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:bad"
argument_list|)
expr_stmt|;
name|goodEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|badEndpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:toProducer1"
argument_list|,
literal|"From producer"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:toProducer1"
argument_list|,
literal|"From producer"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:toProducer2"
argument_list|,
literal|"From producer1"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:toProducer2"
argument_list|,
literal|"From producer1"
argument_list|)
expr_stmt|;
name|goodEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|badEndpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|//getContext().setTracing(true);
name|from
argument_list|(
literal|"direct:toProducer1"
argument_list|)
operator|.
name|to
argument_list|(
name|getProducer1Uri
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:toProducer2"
argument_list|)
operator|.
name|to
argument_list|(
name|getProducer2Uri
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|getConsumerUri
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
name|getConsumerUri
argument_list|()
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|getProducer1Uri
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:good"
argument_list|)
expr_stmt|;
name|from
argument_list|(
name|getProducer2Uri
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:bad"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getProducer1Uri ()
specifier|protected
name|String
name|getProducer1Uri
parameter_list|()
block|{
return|return
literal|"xmpp://jabber.org:5222/camel_consumer@jabber.org?user=camel_producer&password=secret&serviceName=jabber.org"
return|;
block|}
DECL|method|getProducer2Uri ()
specifier|protected
name|String
name|getProducer2Uri
parameter_list|()
block|{
return|return
literal|"xmpp://jabber.org:5222/camel_consumer@jabber.org?user=camel_producer1&password=secret&serviceName=jabber.org"
return|;
block|}
DECL|method|getConsumerUri ()
specifier|protected
name|String
name|getConsumerUri
parameter_list|()
block|{
return|return
literal|"xmpp://jabber.org:5222/camel_producer@jabber.org?user=camel_consumer&password=secret&serviceName=jabber.org"
return|;
block|}
block|}
end_class

end_unit

