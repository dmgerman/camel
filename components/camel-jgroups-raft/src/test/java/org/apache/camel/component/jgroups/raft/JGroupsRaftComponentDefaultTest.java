begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|utils
operator|.
name|NopStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|JGroupsRaftComponentDefaultTest
specifier|public
class|class
name|JGroupsRaftComponentDefaultTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|CLUSTER_NAME
specifier|static
specifier|final
name|String
name|CLUSTER_NAME
init|=
literal|"JGroupsRaftComponentDefaultTest"
decl_stmt|;
DECL|field|CONFIGURED_ENDPOINT_URI
specifier|static
specifier|final
name|String
name|CONFIGURED_ENDPOINT_URI
init|=
name|String
operator|.
name|format
argument_list|(
literal|"my-default-jgroupsraft:%s?raftId=A"
argument_list|,
name|CLUSTER_NAME
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|JGroupsRaftComponent
name|defaultComponent
init|=
operator|new
name|JGroupsRaftComponent
argument_list|()
decl_stmt|;
name|context
argument_list|()
operator|.
name|addComponent
argument_list|(
literal|"my-default-jgroupsraft"
argument_list|,
name|defaultComponent
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"my-default-jgroupsraft:"
operator|+
name|CLUSTER_NAME
operator|+
literal|"?raftId=A"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:default"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|shouldCreateHandleWithDefaults ()
specifier|public
name|void
name|shouldCreateHandleWithDefaults
parameter_list|()
block|{
name|JGroupsRaftEndpoint
name|endpoint
init|=
name|getMandatoryEndpoint
argument_list|(
name|CONFIGURED_ENDPOINT_URI
argument_list|,
name|JGroupsRaftEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|JGroupsRaftComponent
name|component
init|=
operator|(
name|JGroupsRaftComponent
operator|)
name|endpoint
operator|.
name|getComponent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
operator|.
name|getResolvedRaftHandle
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|endpoint
operator|.
name|getResolvedRaftHandle
argument_list|()
operator|.
name|channel
argument_list|()
operator|.
name|getProtocolStack
argument_list|()
operator|.
name|findProtocol
argument_list|(
literal|"RAFT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|component
operator|.
name|getStateMachine
argument_list|()
operator|instanceof
name|NopStateMachine
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|endpoint
operator|.
name|getStateMachine
argument_list|()
operator|instanceof
name|NopStateMachine
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|component
operator|.
name|getChannelProperties
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|endpoint
operator|.
name|getChannelProperties
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|endpoint
operator|.
name|getRaftId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|endpoint
operator|.
name|getRaftId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

