begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft.cluster
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|utils
operator|.
name|NopStateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cluster
operator|.
name|ClusteredRoutePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|JChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|RaftHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|JGroupsRaftClusteredRoutePolicyTest
specifier|public
class|class
name|JGroupsRaftClusteredRoutePolicyTest
extends|extends
name|JGroupsRaftClusterAbstractTest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JGroupsRaftClusteredRoutePolicyTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|lcc
specifier|private
name|ArrayList
argument_list|<
name|CamelContext
argument_list|>
name|lcc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rn
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|rn
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|JChannel
name|chA
init|=
operator|new
name|JChannel
argument_list|(
literal|"raftABC.xml"
argument_list|)
operator|.
name|name
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|RaftHandle
name|handleA
init|=
operator|new
name|RaftHandle
argument_list|(
name|chA
argument_list|,
operator|new
name|NopStateMachine
argument_list|()
argument_list|)
operator|.
name|raftId
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|CamelContext
name|contextA
init|=
name|createContext
argument_list|(
literal|"A"
argument_list|,
name|handleA
argument_list|)
decl_stmt|;
name|JChannel
name|chB
init|=
operator|new
name|JChannel
argument_list|(
literal|"raftABC.xml"
argument_list|)
operator|.
name|name
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|RaftHandle
name|handleB
init|=
operator|new
name|RaftHandle
argument_list|(
name|chB
argument_list|,
operator|new
name|NopStateMachine
argument_list|()
argument_list|)
operator|.
name|raftId
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|CamelContext
name|contextB
init|=
name|createContext
argument_list|(
literal|"B"
argument_list|,
name|handleB
argument_list|)
decl_stmt|;
name|JChannel
name|chC
init|=
operator|new
name|JChannel
argument_list|(
literal|"raftABC.xml"
argument_list|)
operator|.
name|name
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|RaftHandle
name|handleC
init|=
operator|new
name|RaftHandle
argument_list|(
name|chC
argument_list|,
operator|new
name|NopStateMachine
argument_list|()
argument_list|)
operator|.
name|raftId
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|CamelContext
name|contextC
init|=
name|createContext
argument_list|(
literal|"C"
argument_list|,
name|handleC
argument_list|)
decl_stmt|;
name|lcc
operator|.
name|add
argument_list|(
name|contextA
argument_list|)
expr_stmt|;
name|rn
operator|.
name|add
argument_list|(
literal|"route-A"
argument_list|)
expr_stmt|;
name|lcc
operator|.
name|add
argument_list|(
name|contextB
argument_list|)
expr_stmt|;
name|rn
operator|.
name|add
argument_list|(
literal|"route-B"
argument_list|)
expr_stmt|;
name|lcc
operator|.
name|add
argument_list|(
name|contextC
argument_list|)
expr_stmt|;
name|rn
operator|.
name|add
argument_list|(
literal|"route-C"
argument_list|)
expr_stmt|;
name|contextA
operator|.
name|start
argument_list|()
expr_stmt|;
name|contextB
operator|.
name|start
argument_list|()
expr_stmt|;
name|contextC
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForLeader
argument_list|(
literal|50
argument_list|,
name|handleA
argument_list|,
name|handleB
argument_list|,
name|handleC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countActiveFromEndpoints
argument_list|(
name|lcc
argument_list|,
name|rn
argument_list|)
argument_list|)
expr_stmt|;
name|contextA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|waitForLeader
argument_list|(
literal|50
argument_list|,
name|handleA
argument_list|,
name|handleB
argument_list|,
name|handleC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countActiveFromEndpoints
argument_list|(
name|lcc
argument_list|,
name|rn
argument_list|)
argument_list|)
expr_stmt|;
name|contextB
operator|.
name|stop
argument_list|()
expr_stmt|;
name|chA
operator|=
operator|new
name|JChannel
argument_list|(
literal|"raftABC.xml"
argument_list|)
operator|.
name|name
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|handleA
operator|=
operator|new
name|RaftHandle
argument_list|(
name|chA
argument_list|,
operator|new
name|NopStateMachine
argument_list|()
argument_list|)
operator|.
name|raftId
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|contextA
operator|=
name|createContext
argument_list|(
literal|"A"
argument_list|,
name|handleA
argument_list|)
expr_stmt|;
name|contextA
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForLeader
argument_list|(
literal|50
argument_list|,
name|handleA
argument_list|,
name|handleB
argument_list|,
name|handleC
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countActiveFromEndpoints
argument_list|(
name|lcc
argument_list|,
name|rn
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createContext (String id, RaftHandle rh)
specifier|private
name|CamelContext
name|createContext
parameter_list|(
name|String
name|id
parameter_list|,
name|RaftHandle
name|rh
parameter_list|)
throws|throws
name|Exception
block|{
name|JGroupsRaftClusterService
name|service
init|=
operator|new
name|JGroupsRaftClusterService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|service
operator|.
name|setRaftId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|service
operator|.
name|setRaftHandle
argument_list|(
name|rh
argument_list|)
expr_stmt|;
name|service
operator|.
name|setJgroupsClusterName
argument_list|(
literal|"JGroupsRaftClusteredRoutePolicyTest"
argument_list|)
expr_stmt|;
name|DefaultCamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|disableJMX
argument_list|()
expr_stmt|;
name|context
operator|.
name|setName
argument_list|(
literal|"context-"
operator|+
name|id
argument_list|)
expr_stmt|;
name|context
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|context
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"timer:master?delay=1s&period=1s"
argument_list|)
operator|.
name|routeId
argument_list|(
literal|"route-"
operator|+
name|id
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|ClusteredRoutePolicy
operator|.
name|forNamespace
argument_list|(
literal|"jgr"
argument_list|)
argument_list|)
operator|.
name|log
argument_list|(
literal|"From ${routeId}"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|countActiveFromEndpoints (ArrayList<CamelContext> lcc, ArrayList<String> rn)
specifier|private
name|int
name|countActiveFromEndpoints
parameter_list|(
name|ArrayList
argument_list|<
name|CamelContext
argument_list|>
name|lcc
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|rn
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lcc
operator|.
name|size
argument_list|()
operator|!=
name|rn
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"CamelContext list and Route ids list must have the same number of elements!"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lcc
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ServiceStatus
name|status
init|=
name|lcc
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRouteController
argument_list|()
operator|.
name|getRouteStatus
argument_list|(
name|rn
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ServiceStatus
operator|.
name|Starting
operator|.
name|equals
argument_list|(
name|status
argument_list|)
operator|||
name|ServiceStatus
operator|.
name|Started
operator|.
name|equals
argument_list|(
name|status
argument_list|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

