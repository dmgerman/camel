begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|RaftHandle
import|;
end_import

begin_class
DECL|class|JGroupsRaftAbstractTest
specifier|public
specifier|abstract
class|class
name|JGroupsRaftAbstractTest
extends|extends
name|CamelTestSupport
block|{
DECL|method|checkHeaders (Exchange exchange)
specifier|protected
name|void
name|checkHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_COMMIT_INDEX
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_CURRENT_TERM
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_IS_LEADER
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LAST_APPLIED
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LEADER_ADDRESS
argument_list|,
name|Address
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LOG_SIZE
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LOG_SIZE_BYTE
argument_list|,
name|int
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_RAFT_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForLeader (int attempts, RaftHandle rh, RaftHandle rh2, RaftHandle rh3)
specifier|protected
name|void
name|waitForLeader
parameter_list|(
name|int
name|attempts
parameter_list|,
name|RaftHandle
name|rh
parameter_list|,
name|RaftHandle
name|rh2
parameter_list|,
name|RaftHandle
name|rh3
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|thereIsLeader
init|=
name|rh
operator|.
name|isLeader
argument_list|()
operator|||
name|rh2
operator|.
name|isLeader
argument_list|()
operator|||
name|rh3
operator|.
name|isLeader
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|thereIsLeader
operator|&&
name|attempts
operator|>
literal|0
condition|)
block|{
name|thereIsLeader
operator|=
name|rh
operator|.
name|isLeader
argument_list|()
operator|||
name|rh2
operator|.
name|isLeader
argument_list|()
operator|||
name|rh3
operator|.
name|isLeader
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|attempts
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|attempts
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No leader in time!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

