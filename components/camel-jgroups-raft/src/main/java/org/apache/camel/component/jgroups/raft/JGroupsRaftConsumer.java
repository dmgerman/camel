begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|RaftHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Consumes events from the JGroups-raft RaftHandle ({@code org.jgroups.raft.RaftHandle}). Received events  * are routed to Camel as body and/or headers of {@link org.apache.camel.Exchange} see {@link JGroupsRaftEventType}.  */
end_comment

begin_class
DECL|class|JGroupsRaftConsumer
specifier|public
class|class
name|JGroupsRaftConsumer
extends|extends
name|DefaultConsumer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JGroupsRaftConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|raftHandle
specifier|private
specifier|final
name|RaftHandle
name|raftHandle
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|String
name|clusterName
decl_stmt|;
DECL|field|enableRoleChangeEvents
specifier|private
name|boolean
name|enableRoleChangeEvents
decl_stmt|;
DECL|field|roleListener
specifier|private
specifier|final
name|CamelRoleChangeListener
name|roleListener
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|JGroupsRaftEndpoint
name|endpoint
decl_stmt|;
DECL|method|JGroupsRaftConsumer (JGroupsRaftEndpoint endpoint, Processor processor, RaftHandle raftHandle, String clusterName, boolean enableRoleChangeEvents)
specifier|public
name|JGroupsRaftConsumer
parameter_list|(
name|JGroupsRaftEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|,
name|RaftHandle
name|raftHandle
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|boolean
name|enableRoleChangeEvents
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|raftHandle
operator|=
name|raftHandle
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|enableRoleChangeEvents
operator|=
name|enableRoleChangeEvents
expr_stmt|;
name|this
operator|.
name|roleListener
operator|=
operator|new
name|CamelRoleChangeListener
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|enableRoleChangeEvents
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting roleListener : {} to the cluster: {}."
argument_list|,
name|roleListener
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
name|raftHandle
operator|.
name|addRoleListener
argument_list|(
name|roleListener
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|enableRoleChangeEvents
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing connection to cluster: {} from roleListener: {}."
argument_list|,
name|clusterName
argument_list|,
name|roleListener
argument_list|)
expr_stmt|;
name|raftHandle
operator|.
name|removeRoleListener
argument_list|(
name|roleListener
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

