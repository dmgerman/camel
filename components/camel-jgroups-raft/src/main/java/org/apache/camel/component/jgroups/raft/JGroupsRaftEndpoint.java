begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|JChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|raft
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|RaftHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The jgroups component provides exchange of messages between Camel and JGroups clusters.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.24.0"
argument_list|,
name|scheme
operator|=
literal|"jgroups-raft"
argument_list|,
name|title
operator|=
literal|"JGroups raft"
argument_list|,
name|syntax
operator|=
literal|"jgroup-raft:clusterName"
argument_list|,
name|label
operator|=
literal|"clustering,messaging"
argument_list|)
DECL|class|JGroupsRaftEndpoint
specifier|public
class|class
name|JGroupsRaftEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JGroupsRaftEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|connectCount
specifier|private
name|AtomicInteger
name|connectCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|raftHandle
specifier|private
name|RaftHandle
name|raftHandle
decl_stmt|;
DECL|field|resolvedRaftHandle
specifier|private
name|RaftHandle
name|resolvedRaftHandle
decl_stmt|;
DECL|field|stateMachine
specifier|private
name|StateMachine
name|stateMachine
decl_stmt|;
DECL|field|raftId
specifier|private
name|String
name|raftId
decl_stmt|;
DECL|field|channelProperties
specifier|private
name|String
name|channelProperties
decl_stmt|;
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|clusterName
specifier|private
name|String
name|clusterName
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"consumer"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|enableRoleChangeEvents
specifier|private
name|boolean
name|enableRoleChangeEvents
decl_stmt|;
DECL|method|JGroupsRaftEndpoint (String endpointUri, String clusterName, Component component, String remaining, Map<String, Object> parameters, String raftId, String channelProperties, StateMachine stateMachine, RaftHandle raftHandle)
specifier|public
name|JGroupsRaftEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|String
name|clusterName
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|,
name|String
name|raftId
parameter_list|,
name|String
name|channelProperties
parameter_list|,
name|StateMachine
name|stateMachine
parameter_list|,
name|RaftHandle
name|raftHandle
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|raftId
operator|=
name|raftId
expr_stmt|;
name|this
operator|.
name|channelProperties
operator|=
name|channelProperties
expr_stmt|;
name|this
operator|.
name|stateMachine
operator|=
name|stateMachine
expr_stmt|;
name|this
operator|.
name|raftHandle
operator|=
name|raftHandle
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|JGroupsRaftProducer
argument_list|(
name|this
argument_list|,
name|resolvedRaftHandle
argument_list|,
name|clusterName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|JGroupsRaftConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|resolvedRaftHandle
argument_list|,
name|clusterName
argument_list|,
name|enableRoleChangeEvents
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createExchange ()
specifier|public
name|Exchange
name|createExchange
parameter_list|()
block|{
name|Exchange
name|exchange
init|=
name|super
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|populateJGroupsRaftHeaders
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
DECL|method|populateJGroupsRaftHeaders (Exchange exchange)
specifier|public
name|void
name|populateJGroupsRaftHeaders
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_COMMIT_INDEX
argument_list|,
name|resolvedRaftHandle
operator|.
name|commitIndex
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_CURRENT_TERM
argument_list|,
name|resolvedRaftHandle
operator|.
name|currentTerm
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_IS_LEADER
argument_list|,
name|resolvedRaftHandle
operator|.
name|isLeader
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LAST_APPLIED
argument_list|,
name|resolvedRaftHandle
operator|.
name|lastApplied
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LEADER_ADDRESS
argument_list|,
name|resolvedRaftHandle
operator|.
name|leader
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LOG_SIZE
argument_list|,
name|resolvedRaftHandle
operator|.
name|logSize
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_LOG_SIZE_BYTE
argument_list|,
name|resolvedRaftHandle
operator|.
name|logSizeInBytes
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_RAFT_ID
argument_list|,
name|resolvedRaftHandle
operator|.
name|raftId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Resolving JGroupsraft handle {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|resolvedRaftHandle
operator|=
name|resolveHandle
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing JGroupsraft Channel {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolvedRaftHandle
operator|!=
literal|null
operator|&&
name|resolvedRaftHandle
operator|.
name|channel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resolvedRaftHandle
operator|.
name|channel
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed JGroupsraft Channel {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing Log {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolvedRaftHandle
operator|!=
literal|null
operator|&&
name|resolvedRaftHandle
operator|.
name|log
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resolvedRaftHandle
operator|.
name|log
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed Log Channel {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
DECL|method|resolveHandle ()
specifier|private
name|RaftHandle
name|resolveHandle
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|raftHandle
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Raft Handle resolved as passed by Component: {}"
argument_list|,
name|raftHandle
argument_list|)
expr_stmt|;
return|return
name|raftHandle
return|;
block|}
if|if
condition|(
name|channelProperties
operator|!=
literal|null
operator|&&
operator|!
name|channelProperties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Raft Handle created with configured channelProperties: {} and state machine: {}"
argument_list|,
name|channelProperties
argument_list|,
name|stateMachine
argument_list|)
expr_stmt|;
return|return
operator|new
name|RaftHandle
argument_list|(
operator|new
name|JChannel
argument_list|(
name|channelProperties
argument_list|)
operator|.
name|name
argument_list|(
name|raftId
argument_list|)
argument_list|,
name|stateMachine
argument_list|)
operator|.
name|raftId
argument_list|(
name|raftId
argument_list|)
return|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Raft Handle created with defaults: {}, {},"
argument_list|,
name|JGroupsRaftConstants
operator|.
name|DEFAULT_JGROUPSRAFT_CONFIG
argument_list|,
name|stateMachine
argument_list|)
expr_stmt|;
return|return
operator|new
name|RaftHandle
argument_list|(
operator|new
name|JChannel
argument_list|(
name|JGroupsRaftConstants
operator|.
name|DEFAULT_JGROUPSRAFT_CONFIG
argument_list|)
operator|.
name|name
argument_list|(
name|raftId
argument_list|)
argument_list|,
name|stateMachine
argument_list|)
operator|.
name|raftId
argument_list|(
name|raftId
argument_list|)
return|;
block|}
comment|/**      * Connect shared RaftHandle channel, called by producer and consumer.      * @throws Exception      */
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|Exception
block|{
name|connectCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connecting JGroups-raft Channel {} with cluster name: {}, raftHandle: {} and using config: {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|,
name|clusterName
argument_list|,
name|resolvedRaftHandle
argument_list|,
name|channelProperties
operator|==
literal|null
condition|?
literal|"default"
else|:
name|channelProperties
argument_list|)
expr_stmt|;
name|resolvedRaftHandle
operator|.
name|channel
argument_list|()
operator|.
name|connect
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Disconnect shared RaftHandle channel, called by producer and consumer.      */
DECL|method|disconnect ()
specifier|public
name|void
name|disconnect
parameter_list|()
block|{
if|if
condition|(
name|connectCount
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Disconnecting JGroupsraft Channel {}"
argument_list|,
name|getEndpointUri
argument_list|()
argument_list|)
expr_stmt|;
name|resolvedRaftHandle
operator|.
name|channel
argument_list|()
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getClusterName ()
specifier|public
name|String
name|getClusterName
parameter_list|()
block|{
return|return
name|clusterName
return|;
block|}
comment|/**      * The name of the JGroupsraft cluster the component should connect to.      */
DECL|method|setClusterName (String clusterName)
specifier|public
name|void
name|setClusterName
parameter_list|(
name|String
name|clusterName
parameter_list|)
block|{
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
block|}
DECL|method|isEnableRoleChangeEvents ()
specifier|public
name|boolean
name|isEnableRoleChangeEvents
parameter_list|()
block|{
return|return
name|enableRoleChangeEvents
return|;
block|}
comment|/**      * If set to true, the consumer endpoint will receive roleChange event as well (not just connecting and/or using the state machine).      * By default it is set to false.      */
DECL|method|setEnableRoleChangeEvents (boolean enableRoleChangeEvents)
specifier|public
name|void
name|setEnableRoleChangeEvents
parameter_list|(
name|boolean
name|enableRoleChangeEvents
parameter_list|)
block|{
name|this
operator|.
name|enableRoleChangeEvents
operator|=
name|enableRoleChangeEvents
expr_stmt|;
block|}
DECL|method|getChannelProperties ()
specifier|public
name|String
name|getChannelProperties
parameter_list|()
block|{
return|return
name|channelProperties
return|;
block|}
DECL|method|setChannelProperties (String channelProperties)
specifier|public
name|void
name|setChannelProperties
parameter_list|(
name|String
name|channelProperties
parameter_list|)
block|{
name|this
operator|.
name|channelProperties
operator|=
name|channelProperties
expr_stmt|;
block|}
DECL|method|getRaftId ()
specifier|public
name|String
name|getRaftId
parameter_list|()
block|{
return|return
name|raftId
return|;
block|}
DECL|method|setRaftId (String raftId)
specifier|public
name|void
name|setRaftId
parameter_list|(
name|String
name|raftId
parameter_list|)
block|{
name|this
operator|.
name|raftId
operator|=
name|raftId
expr_stmt|;
block|}
DECL|method|getRaftHandle ()
specifier|public
name|RaftHandle
name|getRaftHandle
parameter_list|()
block|{
return|return
name|raftHandle
return|;
block|}
DECL|method|setRaftHandle (RaftHandle raftHandle)
specifier|public
name|void
name|setRaftHandle
parameter_list|(
name|RaftHandle
name|raftHandle
parameter_list|)
block|{
name|this
operator|.
name|raftHandle
operator|=
name|raftHandle
expr_stmt|;
block|}
DECL|method|getStateMachine ()
specifier|public
name|StateMachine
name|getStateMachine
parameter_list|()
block|{
return|return
name|stateMachine
return|;
block|}
DECL|method|setStateMachine (StateMachine stateMachine)
specifier|public
name|void
name|setStateMachine
parameter_list|(
name|StateMachine
name|stateMachine
parameter_list|)
block|{
name|this
operator|.
name|stateMachine
operator|=
name|stateMachine
expr_stmt|;
block|}
DECL|method|getResolvedRaftHandle ()
specifier|public
name|RaftHandle
name|getResolvedRaftHandle
parameter_list|()
block|{
return|return
name|resolvedRaftHandle
return|;
block|}
block|}
end_class

end_unit

