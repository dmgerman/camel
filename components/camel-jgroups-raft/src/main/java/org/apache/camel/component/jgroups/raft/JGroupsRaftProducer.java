begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|RaftHandle
import|;
end_import

begin_comment
comment|/**  * Call setX methods on JGroups-raft cluster RaftHandle ({@code org.jgroups.raft.RaftHandle}).  */
end_comment

begin_class
DECL|class|JGroupsRaftProducer
specifier|public
class|class
name|JGroupsRaftProducer
extends|extends
name|DefaultProducer
block|{
comment|// Producer settings
DECL|field|endpoint
specifier|private
specifier|final
name|JGroupsRaftEndpoint
name|endpoint
decl_stmt|;
DECL|field|raftHandle
specifier|private
specifier|final
name|RaftHandle
name|raftHandle
decl_stmt|;
DECL|field|clusterName
specifier|private
specifier|final
name|String
name|clusterName
decl_stmt|;
comment|// Constructor
DECL|method|JGroupsRaftProducer (JGroupsRaftEndpoint endpoint, RaftHandle raftHandle, String clusterName)
specifier|public
name|JGroupsRaftProducer
parameter_list|(
name|JGroupsRaftEndpoint
name|endpoint
parameter_list|,
name|RaftHandle
name|raftHandle
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|raftHandle
operator|=
name|raftHandle
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
block|}
comment|// Life cycle callbacks
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|endpoint
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
comment|// Processing logic
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
comment|//TODO: implement possibility to call CompletableFuture<byte[]> setAsync(byte[] buf, int offset, int length);
name|byte
index|[]
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|Integer
name|setOffset
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_SET_OFFSET
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Integer
name|setLength
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_SET_LENGTH
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Long
name|setTimeout
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_SET_TIMEOUT
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|setTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_SET_TIMEUNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|result
decl_stmt|;
if|if
condition|(
name|setOffset
operator|!=
literal|null
operator|&&
name|setLength
operator|!=
literal|null
operator|&&
name|setTimeout
operator|!=
literal|null
operator|&&
name|setTimeUnit
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Calling set(byte[] {}, int {}, int {}, long {}, TimeUnit {}) method on raftHandle."
argument_list|,
name|body
argument_list|,
name|setOffset
argument_list|,
name|setLength
argument_list|,
name|setTimeout
argument_list|,
name|setTimeUnit
argument_list|)
expr_stmt|;
name|result
operator|=
name|raftHandle
operator|.
name|set
argument_list|(
name|body
argument_list|,
name|setOffset
argument_list|,
name|setLength
argument_list|,
name|setTimeout
argument_list|,
name|setTimeUnit
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|setOffset
operator|!=
literal|null
operator|&&
name|setLength
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Calling set(byte[] {}, int {}, int {}) method on raftHandle."
argument_list|,
name|body
argument_list|,
name|setOffset
argument_list|,
name|setLength
argument_list|)
expr_stmt|;
name|result
operator|=
name|raftHandle
operator|.
name|set
argument_list|(
name|body
argument_list|,
name|setOffset
argument_list|,
name|setLength
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Calling set(byte[] {}, int {}, int {} (i.e. body.length)) method on raftHandle."
argument_list|,
name|body
argument_list|,
literal|0
argument_list|,
name|body
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|=
name|raftHandle
operator|.
name|set
argument_list|(
name|body
argument_list|,
literal|0
argument_list|,
name|body
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|endpoint
operator|.
name|populateJGroupsRaftHeaders
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Body is null, cannot call set method on raftHandle."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

