begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|AsyncProcessorConverterHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|raft
operator|.
name|RAFT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|raft
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CamelRoleChangeListener
specifier|public
class|class
name|CamelRoleChangeListener
implements|implements
name|RAFT
operator|.
name|RoleChange
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelRoleChangeListener
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|JGroupsRaftEndpoint
name|endpoint
decl_stmt|;
DECL|field|processor
specifier|private
specifier|final
name|AsyncProcessor
name|processor
decl_stmt|;
DECL|method|CamelRoleChangeListener (JGroupsRaftEndpoint endpoint, Processor processor)
specifier|public
name|CamelRoleChangeListener
parameter_list|(
name|JGroupsRaftEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|endpoint
argument_list|,
literal|"endpoint"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|processor
argument_list|,
literal|"processor"
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|processor
operator|=
name|AsyncProcessorConverterHelper
operator|.
name|convert
argument_list|(
name|processor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|roleChanged (Role role)
specifier|public
name|void
name|roleChanged
parameter_list|(
name|Role
name|role
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"New Role {} received."
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|Leader
case|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_EVENT_TYPE
argument_list|,
name|JGroupsRaftEventType
operator|.
name|LEADER
argument_list|)
expr_stmt|;
name|processExchange
argument_list|(
name|role
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|Follower
case|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_EVENT_TYPE
argument_list|,
name|JGroupsRaftEventType
operator|.
name|FOLLOWER
argument_list|)
expr_stmt|;
name|processExchange
argument_list|(
name|role
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
case|case
name|Candidate
case|:
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|JGroupsRaftConstants
operator|.
name|HEADER_JGROUPSRAFT_EVENT_TYPE
argument_list|,
name|JGroupsRaftEventType
operator|.
name|CANDIDATE
argument_list|)
expr_stmt|;
name|processExchange
argument_list|(
name|role
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|JGroupsRaftException
argument_list|(
literal|"Role ["
operator|+
name|role
operator|+
literal|"] unknown."
argument_list|)
throw|;
block|}
block|}
DECL|method|processExchange (Role role, Exchange exchange)
specifier|private
name|void
name|processExchange
parameter_list|(
name|Role
name|role
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Processing Role: {}"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|exchange
argument_list|,
operator|new
name|AsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|done
parameter_list|(
name|boolean
name|doneSync
parameter_list|)
block|{
comment|// noop
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JGroupsRaftException
argument_list|(
literal|"Error in consumer while dispatching exchange containing role "
operator|+
name|role
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

