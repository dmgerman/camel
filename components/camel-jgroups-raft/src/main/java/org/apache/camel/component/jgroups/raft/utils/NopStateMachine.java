begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.jgroups.raft.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jgroups
operator|.
name|raft
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jgroups
operator|.
name|protocols
operator|.
name|raft
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of JGroups-raft state machine ({@code org.jgroups.protocols.raft.StateMachine}) that dose nothing.  */
end_comment

begin_class
DECL|class|NopStateMachine
specifier|public
class|class
name|NopStateMachine
implements|implements
name|StateMachine
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NopStateMachine
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|apply (byte[] bytes, int offset, int length)
specifier|public
name|byte
index|[]
name|apply
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Called StateMachine.apply(byte[] {}, int {}, int {}) on {}"
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|readContentFrom (DataInput dataInput)
specifier|public
name|void
name|readContentFrom
parameter_list|(
name|DataInput
name|dataInput
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Called StateMachine.readContentFrom(DataInput {}) on {}"
argument_list|,
name|dataInput
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeContentTo (DataOutput dataOutput)
specifier|public
name|void
name|writeContentTo
parameter_list|(
name|DataOutput
name|dataOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Called StateMachine.readContentFrom(DataOutput {}) on {}"
argument_list|,
name|dataOutput
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

