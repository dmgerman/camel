begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.zendesk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|zendesk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_comment
comment|/**  * Component configuration for Zendesk component.  */
end_comment

begin_class
annotation|@
name|UriParams
DECL|class|ZendeskConfiguration
specifier|public
class|class
name|ZendeskConfiguration
block|{
annotation|@
name|UriPath
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|methodName
specifier|private
name|String
name|methodName
decl_stmt|;
annotation|@
name|UriParam
DECL|field|serverUrl
specifier|private
name|String
name|serverUrl
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|oauthToken
specifier|private
name|String
name|oauthToken
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|token
specifier|private
name|String
name|token
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|password
specifier|private
name|String
name|password
decl_stmt|;
comment|/**      * What operation to use      *       * @return the methodName      */
DECL|method|getMethodName ()
specifier|public
name|String
name|getMethodName
parameter_list|()
block|{
return|return
name|methodName
return|;
block|}
comment|/**      * What operation to use      *       * @param methodName      *            the methodName to set      */
DECL|method|setMethodName (String methodName)
specifier|public
name|void
name|setMethodName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
block|}
comment|/**      * The server URL to connect.      *       * @return server URL      */
DECL|method|getServerUrl ()
specifier|public
name|String
name|getServerUrl
parameter_list|()
block|{
return|return
name|serverUrl
return|;
block|}
comment|/**      * The server URL to connect.      *       * @param url server URL      */
DECL|method|setServerUrl (String url)
specifier|public
name|void
name|setServerUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|serverUrl
operator|=
name|url
expr_stmt|;
block|}
comment|/**      * The user name.      *       * @return user name      */
DECL|method|getUsername ()
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|username
return|;
block|}
comment|/**      * The user name.      *       * @param user user name      */
DECL|method|setUsername (String user)
specifier|public
name|void
name|setUsername
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|user
expr_stmt|;
block|}
comment|/**      * The security token.      *       * @return security token      */
DECL|method|getToken ()
specifier|public
name|String
name|getToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
comment|/**      * The security token.      *       * @param token security token      */
DECL|method|setToken (String token)
specifier|public
name|void
name|setToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
comment|/**      * The OAuth token.      * @return OAuth token      */
DECL|method|getOauthToken ()
specifier|public
name|String
name|getOauthToken
parameter_list|()
block|{
return|return
name|oauthToken
return|;
block|}
comment|/**      * The OAuth token.      *       * @param token OAuth token      */
DECL|method|setOauthToken (String token)
specifier|public
name|void
name|setOauthToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|oauthToken
operator|=
name|token
expr_stmt|;
block|}
comment|/**      * The password.      *       * @return password      */
DECL|method|getPassword ()
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      * The password.      * @param password password      */
DECL|method|setPassword (String password)
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ZendeskConfiguration
condition|)
block|{
name|ZendeskConfiguration
name|otherZendeskConf
init|=
operator|(
name|ZendeskConfiguration
operator|)
name|other
decl_stmt|;
return|return
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|methodName
argument_list|,
name|otherZendeskConf
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|serverUrl
argument_list|,
name|otherZendeskConf
operator|.
name|getServerUrl
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|username
argument_list|,
name|otherZendeskConf
operator|.
name|getUsername
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|password
argument_list|,
name|otherZendeskConf
operator|.
name|getPassword
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|token
argument_list|,
name|otherZendeskConf
operator|.
name|getToken
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|equal
argument_list|(
name|oauthToken
argument_list|,
name|otherZendeskConf
operator|.
name|getOauthToken
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"ZendeskConfiguration:[methodName=%s, serverUrl=%s, username=%s, password=%s, token=%s, oauthToken=%s]"
argument_list|,
name|methodName
argument_list|,
name|serverUrl
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|token
argument_list|,
name|oauthToken
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

