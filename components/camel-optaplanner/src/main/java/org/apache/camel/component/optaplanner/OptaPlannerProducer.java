begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.optaplanner
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|optaplanner
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|optaplanner
operator|.
name|core
operator|.
name|api
operator|.
name|domain
operator|.
name|solution
operator|.
name|PlanningSolution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|optaplanner
operator|.
name|core
operator|.
name|api
operator|.
name|domain
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|optaplanner
operator|.
name|core
operator|.
name|api
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|optaplanner
operator|.
name|core
operator|.
name|impl
operator|.
name|solver
operator|.
name|ProblemFactChange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|OptaPlannerProducer
specifier|public
class|class
name|OptaPlannerProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OptaPlannerProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|executor
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|OptaPlannerEndpoint
name|endpoint
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|OptaPlannerConfiguration
name|configuration
decl_stmt|;
DECL|method|OptaPlannerProducer (OptaPlannerEndpoint endpoint, OptaPlannerConfiguration configuration)
specifier|public
name|OptaPlannerProducer
parameter_list|(
name|OptaPlannerEndpoint
name|endpoint
parameter_list|,
name|OptaPlannerConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|configuration
operator|.
name|isAsync
argument_list|()
condition|)
block|{
name|executor
operator|=
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newFixedThreadPool
argument_list|(
name|this
argument_list|,
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
argument_list|,
name|configuration
operator|.
name|getThreadPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|shutdown
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
specifier|synchronized
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|()
decl_stmt|;
specifier|final
name|String
name|solverId
init|=
name|getSolverId
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|/*          * Keep for backward compatibility untill optaplanner version 8.0.0 not          * released After that the code '|| body instanceof Solution' need to be          * removed          */
if|if
condition|(
name|body
operator|.
name|getClass
argument_list|()
operator|.
name|isAnnotationPresent
argument_list|(
name|PlanningSolution
operator|.
name|class
argument_list|)
operator|||
name|body
operator|instanceof
name|Solution
condition|)
block|{
if|if
condition|(
name|isAsync
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Asynchronously solving problem: [{}] with id [{}]"
argument_list|,
name|body
argument_list|,
name|solverId
argument_list|)
expr_stmt|;
specifier|final
name|Solver
argument_list|<
name|Object
argument_list|>
name|solver
init|=
name|endpoint
operator|.
name|getOrCreateSolver
argument_list|(
name|solverId
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|solver
operator|.
name|solve
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Asynchronously solving failed for solverId ({})"
argument_list|,
name|solverId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Synchronously solving problem: [{}] with id [{}]"
argument_list|,
name|body
argument_list|,
name|solverId
argument_list|)
expr_stmt|;
name|Solver
argument_list|<
name|Object
argument_list|>
name|solver
init|=
name|endpoint
operator|.
name|getSolver
argument_list|(
name|solverId
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
block|{
name|solver
operator|=
name|endpoint
operator|.
name|createSolver
argument_list|()
expr_stmt|;
block|}
name|solver
operator|.
name|solve
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|populateResult
argument_list|(
name|exchange
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|body
operator|instanceof
name|ProblemFactChange
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Adding ProblemFactChange to solver: [{}] with id [{}]"
argument_list|,
name|body
argument_list|,
name|solverId
argument_list|)
expr_stmt|;
name|Solver
argument_list|<
name|Object
argument_list|>
name|solver
init|=
name|endpoint
operator|.
name|getOrCreateSolver
argument_list|(
name|solverId
argument_list|)
decl_stmt|;
name|solver
operator|.
name|addProblemFactChange
argument_list|(
operator|(
name|ProblemFactChange
argument_list|<
name|Object
argument_list|>
operator|)
name|body
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAsync
argument_list|(
name|exchange
argument_list|)
condition|)
block|{
while|while
condition|(
operator|!
name|solver
operator|.
name|isEveryProblemFactChangeProcessed
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|OptaPlannerConstants
operator|.
name|IS_EVERY_PROBLEM_FACT_CHANGE_DELAY
argument_list|)
expr_stmt|;
block|}
block|}
name|populateResult
argument_list|(
name|exchange
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Retrieving best score for solver: [{}]"
argument_list|,
name|solverId
argument_list|)
expr_stmt|;
name|Solver
argument_list|<
name|Object
argument_list|>
name|solver
init|=
name|endpoint
operator|.
name|getSolver
argument_list|(
name|solverId
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Solver not found: "
operator|+
name|solverId
argument_list|)
throw|;
block|}
name|populateResult
argument_list|(
name|exchange
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateResult (Exchange exchange, Solver<Object> solver)
specifier|private
name|void
name|populateResult
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Solver
argument_list|<
name|Object
argument_list|>
name|solver
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|solver
operator|.
name|getBestSolution
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|OptaPlannerConstants
operator|.
name|TIME_SPENT
argument_list|,
name|solver
operator|.
name|getTimeMillisSpent
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|OptaPlannerConstants
operator|.
name|IS_EVERY_PROBLEM_FACT_CHANGE_PROCESSED
argument_list|,
name|solver
operator|.
name|isEveryProblemFactChangeProcessed
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|OptaPlannerConstants
operator|.
name|IS_TERMINATE_EARLY
argument_list|,
name|solver
operator|.
name|isTerminateEarly
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|OptaPlannerConstants
operator|.
name|IS_SOLVING
argument_list|,
name|solver
operator|.
name|isSolving
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getSolverId (Exchange exchange)
specifier|private
name|String
name|getSolverId
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|solverId
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|OptaPlannerConstants
operator|.
name|SOLVER_ID
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverId
operator|==
literal|null
condition|)
block|{
name|solverId
operator|=
name|configuration
operator|.
name|getSolverId
argument_list|()
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"SolverId: [{}]"
argument_list|,
name|solverId
argument_list|)
expr_stmt|;
return|return
name|solverId
return|;
block|}
DECL|method|isAsync (Exchange exchange)
specifier|private
name|boolean
name|isAsync
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Boolean
name|isAsync
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|OptaPlannerConstants
operator|.
name|IS_ASYNC
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|isAsync
operator|!=
literal|null
condition|?
name|isAsync
else|:
name|configuration
operator|.
name|isAsync
argument_list|()
return|;
block|}
block|}
end_class

end_unit

