begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.optaplanner
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|optaplanner
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ResourceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|optaplanner
operator|.
name|core
operator|.
name|api
operator|.
name|domain
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|optaplanner
operator|.
name|core
operator|.
name|api
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|optaplanner
operator|.
name|core
operator|.
name|api
operator|.
name|solver
operator|.
name|SolverFactory
import|;
end_import

begin_comment
comment|/**  * OptaPlanner endpoint for Camel  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"optaplanner"
argument_list|)
DECL|class|OptaPlannerEndpoint
specifier|public
class|class
name|OptaPlannerEndpoint
extends|extends
name|ResourceEndpoint
block|{
DECL|field|solverFactory
specifier|private
name|SolverFactory
name|solverFactory
decl_stmt|;
DECL|method|OptaPlannerEndpoint ()
specifier|public
name|OptaPlannerEndpoint
parameter_list|()
block|{     }
DECL|method|OptaPlannerEndpoint (String uri, Component component, String resourceUri)
specifier|public
name|OptaPlannerEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|resourceUri
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|,
name|resourceUri
argument_list|)
expr_stmt|;
block|}
DECL|method|getSolverFactory ()
specifier|public
name|SolverFactory
name|getSolverFactory
parameter_list|()
block|{
return|return
name|solverFactory
return|;
block|}
DECL|method|setSolverFactory (SolverFactory solverFactory)
specifier|public
name|void
name|setSolverFactory
parameter_list|(
name|SolverFactory
name|solverFactory
parameter_list|)
block|{
name|this
operator|.
name|solverFactory
operator|=
name|solverFactory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExchangePattern ()
specifier|public
name|ExchangePattern
name|getExchangePattern
parameter_list|()
block|{
return|return
name|ExchangePattern
operator|.
name|InOut
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
return|return
literal|"optaplanner:"
operator|+
name|getResourceUri
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onExchange (Exchange exchange)
specifier|protected
name|void
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|solverFactory
argument_list|,
literal|"solverFactory"
argument_list|)
expr_stmt|;
name|Solver
name|solver
init|=
name|solverFactory
operator|.
name|buildSolver
argument_list|()
decl_stmt|;
name|Solution
name|planningProblem
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getMandatoryBody
argument_list|(
name|Solution
operator|.
name|class
argument_list|)
decl_stmt|;
name|solver
operator|.
name|solve
argument_list|(
name|planningProblem
argument_list|)
expr_stmt|;
name|Solution
name|bestSolution
init|=
name|solver
operator|.
name|getBestSolution
argument_list|()
decl_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|bestSolution
argument_list|)
expr_stmt|;
comment|// propagate headers and attachments
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

