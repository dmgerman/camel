begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.beanio.csv
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|beanio
operator|.
name|csv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|beanio
operator|.
name|BeanIODataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|CsvTest
specifier|public
class|class
name|CsvTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|FIXED_DATA
specifier|private
specifier|static
specifier|final
name|String
name|FIXED_DATA
init|=
literal|"James,Strachan,22"
operator|+
name|LS
operator|+
literal|"Claus,Ibsen,21"
operator|+
name|LS
decl_stmt|;
DECL|field|verbose
specifier|private
name|boolean
name|verbose
decl_stmt|;
comment|/*     @Test     public void testMarshal() throws Exception {         List<Employee> employees = getEmployees();          MockEndpoint mock = getMockEndpoint("mock:beanio-marshal");         mock.expectedBodiesReceived(FIXED_DATA);          template.sendBody("direct:marshal", employees);          mock.assertIsSatisfied();     } */
annotation|@
name|Test
DECL|method|testUnmarshal ()
specifier|public
name|void
name|testUnmarshal
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|mock
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:beanio-unmarshal"
argument_list|)
decl_stmt|;
name|mock
operator|.
name|expectedMessageCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:unmarshal"
argument_list|,
name|FIXED_DATA
argument_list|)
expr_stmt|;
name|mock
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchanges
init|=
name|mock
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Object
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"received message "
operator|+
name|body
operator|+
literal|" of class "
operator|+
name|body
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Map
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Exchange
name|exchange
range|:
name|exchanges
control|)
block|{
name|Map
name|body
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
name|assertRecord
argument_list|(
name|results
argument_list|,
literal|0
argument_list|,
literal|"James"
argument_list|,
literal|"Strachan"
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|assertRecord
argument_list|(
name|results
argument_list|,
literal|1
argument_list|,
literal|"Claus"
argument_list|,
literal|"Ibsen"
argument_list|,
literal|21
argument_list|)
expr_stmt|;
block|}
DECL|method|assertRecord (List<Map> results, int index, String expectedFirstName, String expectedLastName, int expectedAge)
specifier|protected
specifier|static
name|void
name|assertRecord
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|results
parameter_list|,
name|int
name|index
parameter_list|,
name|String
name|expectedFirstName
parameter_list|,
name|String
name|expectedLastName
parameter_list|,
name|int
name|expectedAge
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Not enough Map messages received: "
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
operator|>
name|index
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
name|results
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No map result found for index "
operator|+
name|index
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|String
name|text
init|=
literal|"bodyAsMap("
operator|+
name|index
operator|+
literal|") "
decl_stmt|;
name|assertEquals
argument_list|(
name|text
operator|+
literal|"firstName"
argument_list|,
name|expectedFirstName
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"firstName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
operator|+
literal|"lastName"
argument_list|,
name|expectedLastName
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"lastName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|text
operator|+
literal|"age"
argument_list|,
name|expectedAge
argument_list|,
name|map
operator|.
name|get
argument_list|(
literal|"age"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
comment|// START SNIPPET: e1
comment|// setup beanio data format using the mapping file, loaded from the classpath
name|DataFormat
name|format
init|=
operator|new
name|BeanIODataFormat
argument_list|(
literal|"org/apache/camel/dataformat/beanio/csv/mappings.xml"
argument_list|,
literal|"stream1"
argument_list|)
decl_stmt|;
comment|// a route which uses the bean io data format to format a CSV data
comment|// to java objects
name|from
argument_list|(
literal|"direct:unmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|format
argument_list|)
comment|// and then split the message body so we get a message for each row
operator|.
name|split
argument_list|(
name|body
argument_list|()
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:beanio-unmarshal"
argument_list|)
expr_stmt|;
comment|// convert list of java objects back to flat format
name|from
argument_list|(
literal|"direct:marshal"
argument_list|)
operator|.
name|marshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:beanio-marshal"
argument_list|)
expr_stmt|;
comment|// END SNIPPET: e1
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

