begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.beanio
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|beanio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|Header
specifier|public
class|class
name|Header
implements|implements
name|BeanIOHeader
block|{
DECL|field|identifier
name|String
name|identifier
decl_stmt|;
DECL|field|recordType
name|String
name|recordType
decl_stmt|;
DECL|field|headerDate
name|Date
name|headerDate
decl_stmt|;
DECL|method|Header ()
specifier|public
name|Header
parameter_list|()
block|{     }
DECL|method|Header (String identifier, Date headerDate, String recordType)
specifier|public
name|Header
parameter_list|(
name|String
name|identifier
parameter_list|,
name|Date
name|headerDate
parameter_list|,
name|String
name|recordType
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
name|this
operator|.
name|headerDate
operator|=
name|headerDate
expr_stmt|;
name|this
operator|.
name|recordType
operator|=
name|recordType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|identifier
operator|!=
literal|null
condition|?
name|identifier
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|recordType
operator|!=
literal|null
condition|?
name|recordType
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|headerDate
operator|!=
literal|null
condition|?
name|headerDate
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|Header
name|record
init|=
operator|(
name|Header
operator|)
name|obj
decl_stmt|;
return|return
name|identifier
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getIdentifier
argument_list|()
argument_list|)
operator|&&
name|recordType
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getRecordType
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TYPE["
operator|+
name|this
operator|.
name|recordType
operator|+
literal|"], IDENTIFIER["
operator|+
name|this
operator|.
name|identifier
operator|+
literal|"]"
return|;
block|}
comment|/**      * @return the identifier      */
DECL|method|getIdentifier ()
specifier|public
name|String
name|getIdentifier
parameter_list|()
block|{
return|return
name|identifier
return|;
block|}
comment|/**      * @param identifier the identifier to set      */
DECL|method|setIdentifier (String identifier)
specifier|public
name|void
name|setIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|this
operator|.
name|identifier
operator|=
name|identifier
expr_stmt|;
block|}
comment|/**      * @return the headerDate      */
DECL|method|getHeaderDate ()
specifier|public
name|Date
name|getHeaderDate
parameter_list|()
block|{
return|return
name|headerDate
return|;
block|}
comment|/**      * @param headerDate the headerDate to set      */
DECL|method|setHeaderDate (Date headerDate)
specifier|public
name|void
name|setHeaderDate
parameter_list|(
name|Date
name|headerDate
parameter_list|)
block|{
name|this
operator|.
name|headerDate
operator|=
name|headerDate
expr_stmt|;
block|}
comment|/**      * @return the recordType      */
DECL|method|getRecordType ()
specifier|public
name|String
name|getRecordType
parameter_list|()
block|{
return|return
name|recordType
return|;
block|}
comment|/**      * @param recordType the recordType to set      */
DECL|method|setRecordType (String recordType)
specifier|public
name|void
name|setRecordType
parameter_list|(
name|String
name|recordType
parameter_list|)
block|{
name|this
operator|.
name|recordType
operator|=
name|recordType
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHeaders ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getHeaders
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|recordType
operator|+
literal|"Date"
argument_list|,
name|headerDate
argument_list|)
expr_stmt|;
return|return
name|headers
return|;
block|}
block|}
end_class

end_unit

