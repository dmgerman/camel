begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.beanio
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|beanio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_class
DECL|class|Employee
specifier|public
class|class
name|Employee
block|{
DECL|field|firstName
specifier|private
name|String
name|firstName
decl_stmt|;
DECL|field|lastName
specifier|private
name|String
name|lastName
decl_stmt|;
DECL|field|title
specifier|private
name|String
name|title
decl_stmt|;
DECL|field|salary
specifier|private
name|int
name|salary
decl_stmt|;
DECL|field|hireDate
specifier|private
name|Date
name|hireDate
decl_stmt|;
DECL|method|Employee ()
specifier|public
name|Employee
parameter_list|()
block|{     }
DECL|method|getFirstName ()
specifier|public
name|String
name|getFirstName
parameter_list|()
block|{
return|return
name|firstName
return|;
block|}
DECL|method|setFirstName (String firstName)
specifier|public
name|void
name|setFirstName
parameter_list|(
name|String
name|firstName
parameter_list|)
block|{
name|this
operator|.
name|firstName
operator|=
name|firstName
expr_stmt|;
block|}
DECL|method|getLastName ()
specifier|public
name|String
name|getLastName
parameter_list|()
block|{
return|return
name|lastName
return|;
block|}
DECL|method|setLastName (String lastName)
specifier|public
name|void
name|setLastName
parameter_list|(
name|String
name|lastName
parameter_list|)
block|{
name|this
operator|.
name|lastName
operator|=
name|lastName
expr_stmt|;
block|}
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
DECL|method|setTitle (String title)
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
block|}
DECL|method|getSalary ()
specifier|public
name|int
name|getSalary
parameter_list|()
block|{
return|return
name|salary
return|;
block|}
DECL|method|setSalary (int salary)
specifier|public
name|void
name|setSalary
parameter_list|(
name|int
name|salary
parameter_list|)
block|{
name|this
operator|.
name|salary
operator|=
name|salary
expr_stmt|;
block|}
DECL|method|getHireDate ()
specifier|public
name|Date
name|getHireDate
parameter_list|()
block|{
return|return
name|hireDate
return|;
block|}
DECL|method|setHireDate (Date hireDate)
specifier|public
name|void
name|setHireDate
parameter_list|(
name|Date
name|hireDate
parameter_list|)
block|{
name|this
operator|.
name|hireDate
operator|=
name|hireDate
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|firstName
operator|!=
literal|null
condition|?
name|firstName
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|lastName
operator|!=
literal|null
condition|?
name|lastName
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|title
operator|!=
literal|null
condition|?
name|title
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|salary
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|hireDate
operator|!=
literal|null
condition|?
name|hireDate
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object object)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|Employee
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Employee
name|e
init|=
operator|(
name|Employee
operator|)
name|object
decl_stmt|;
return|return
name|this
operator|.
name|getFirstName
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getFirstName
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getLastName
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLastName
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getTitle
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getTitle
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getSalary
argument_list|()
operator|==
name|e
operator|.
name|getSalary
argument_list|()
operator|&&
name|this
operator|.
name|getHireDate
argument_list|()
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getHireDate
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

