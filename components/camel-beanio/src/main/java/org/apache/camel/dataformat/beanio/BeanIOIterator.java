begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.beanio
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|beanio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|beanio
operator|.
name|BeanReader
import|;
end_import

begin_class
DECL|class|BeanIOIterator
specifier|public
class|class
name|BeanIOIterator
implements|implements
name|Iterator
argument_list|<
name|Object
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|reader
specifier|private
name|BeanReader
name|reader
decl_stmt|;
DECL|field|next
specifier|private
specifier|transient
name|Object
name|next
decl_stmt|;
DECL|field|forceNext
specifier|private
specifier|transient
name|Object
name|forceNext
decl_stmt|;
DECL|method|BeanIOIterator (BeanReader reader)
specifier|public
name|BeanIOIterator
parameter_list|(
name|BeanReader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|next ()
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Object
name|answer
init|=
name|next
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// after read we may force a next
if|if
condition|(
name|forceNext
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|forceNext
expr_stmt|;
name|forceNext
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|next
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// after read we may force a next
if|if
condition|(
name|forceNext
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|forceNext
expr_stmt|;
name|forceNext
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
comment|// noop
block|}
comment|/**      * Sets a custom object as the next, such as from a custom error handler      */
DECL|method|setNext (Object next)
specifier|public
name|void
name|setNext
parameter_list|(
name|Object
name|next
parameter_list|)
block|{
name|this
operator|.
name|forceNext
operator|=
name|next
expr_stmt|;
block|}
block|}
end_class

end_unit

