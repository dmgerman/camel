begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.beanio
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|beanio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WrappedFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|beanio
operator|.
name|BeanReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|beanio
operator|.
name|StreamFactory
import|;
end_import

begin_class
DECL|class|BeanIOSplitter
specifier|public
class|class
name|BeanIOSplitter
implements|implements
name|Expression
block|{
comment|// TODO: should not reuse dataformat but have its own configuration likely
comment|// TODO: need some way of starting to load the stream factory
DECL|field|dataFormat
specifier|private
name|BeanIODataFormat
name|dataFormat
decl_stmt|;
DECL|method|BeanIOSplitter (BeanIODataFormat dataFormat)
specifier|public
name|BeanIOSplitter
parameter_list|(
name|BeanIODataFormat
name|dataFormat
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|dataFormat
operator|=
name|dataFormat
expr_stmt|;
name|ServiceHelper
operator|.
name|startService
argument_list|(
name|dataFormat
argument_list|)
expr_stmt|;
block|}
DECL|method|evaluate (Exchange exchange)
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|InvalidPayloadException
block|{
name|Message
name|msg
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|Object
name|body
init|=
name|msg
operator|.
name|getBody
argument_list|()
decl_stmt|;
name|StreamFactory
name|sf
init|=
name|dataFormat
operator|.
name|getFactory
argument_list|()
decl_stmt|;
name|BeanReader
name|beanReader
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|body
operator|instanceof
name|WrappedFile
condition|)
block|{
name|body
operator|=
operator|(
operator|(
name|WrappedFile
operator|)
name|body
operator|)
operator|.
name|getFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|body
operator|instanceof
name|File
condition|)
block|{
name|File
name|file
init|=
operator|(
name|File
operator|)
name|body
decl_stmt|;
name|beanReader
operator|=
name|sf
operator|.
name|createReader
argument_list|(
name|dataFormat
operator|.
name|getStreamName
argument_list|()
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|beanReader
operator|==
literal|null
condition|)
block|{
name|Reader
name|reader
init|=
name|msg
operator|.
name|getMandatoryBody
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|beanReader
operator|=
name|sf
operator|.
name|createReader
argument_list|(
name|dataFormat
operator|.
name|getStreamName
argument_list|()
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BeanIOIterator
argument_list|(
name|beanReader
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|evaluate (Exchange exchange, Class<T> type)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|evaluate
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
name|Object
name|result
init|=
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
return|return
name|exchange
operator|.
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|type
argument_list|,
name|exchange
argument_list|,
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidPayloadException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

