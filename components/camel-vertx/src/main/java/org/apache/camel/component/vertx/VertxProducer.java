begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.vertx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|vertx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|vertx
operator|.
name|java
operator|.
name|core
operator|.
name|eventbus
operator|.
name|EventBus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|vertx
operator|.
name|java
operator|.
name|core
operator|.
name|json
operator|.
name|JsonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|vertx
operator|.
name|java
operator|.
name|core
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|VertxProducer
specifier|public
class|class
name|VertxProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VertxProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|private
specifier|final
name|VertxEndpoint
name|endpoint
decl_stmt|;
DECL|method|VertxProducer (VertxEndpoint endpoint)
specifier|public
name|VertxProducer
parameter_list|(
name|VertxEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|EventBus
name|eventBus
init|=
name|endpoint
operator|.
name|getEventBus
argument_list|()
decl_stmt|;
name|String
name|address
init|=
name|endpoint
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|JsonObject
name|jsonObject
init|=
name|in
operator|.
name|getBody
argument_list|(
name|JsonObject
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonObject
operator|!=
literal|null
condition|)
block|{
name|eventBus
operator|.
name|publish
argument_list|(
name|address
argument_list|,
name|jsonObject
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|text
init|=
name|in
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|eventBus
operator|.
name|publish
argument_list|(
name|address
argument_list|,
operator|new
name|JsonObject
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|JsonArray
name|jsonArray
init|=
name|in
operator|.
name|getBody
argument_list|(
name|JsonArray
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonArray
operator|!=
literal|null
condition|)
block|{
name|eventBus
operator|.
name|publish
argument_list|(
name|address
argument_list|,
name|jsonArray
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|InvalidPayloadRuntimeException
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

