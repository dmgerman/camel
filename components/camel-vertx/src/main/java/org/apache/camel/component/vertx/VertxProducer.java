begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.vertx
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|vertx
package|;
end_package

begin_import
import|import
name|io
operator|.
name|vertx
operator|.
name|core
operator|.
name|AsyncResult
import|;
end_import

begin_import
import|import
name|io
operator|.
name|vertx
operator|.
name|core
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|io
operator|.
name|vertx
operator|.
name|core
operator|.
name|eventbus
operator|.
name|EventBus
import|;
end_import

begin_import
import|import
name|io
operator|.
name|vertx
operator|.
name|core
operator|.
name|eventbus
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvalidPayloadRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultAsyncProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|MessageHelper
import|;
end_import

begin_class
DECL|class|VertxProducer
specifier|public
class|class
name|VertxProducer
extends|extends
name|DefaultAsyncProducer
block|{
DECL|method|VertxProducer (VertxEndpoint endpoint)
specifier|public
name|VertxProducer
parameter_list|(
name|VertxEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|VertxEndpoint
name|getEndpoint
parameter_list|()
block|{
return|return
operator|(
name|VertxEndpoint
operator|)
name|super
operator|.
name|getEndpoint
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange, AsyncCallback callback)
specifier|public
name|boolean
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|EventBus
name|eventBus
init|=
name|getEndpoint
argument_list|()
operator|.
name|getEventBus
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventBus
operator|==
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"EventBus is not started or not configured"
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|address
init|=
name|getEndpoint
argument_list|()
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|boolean
name|reply
init|=
name|ExchangeHelper
operator|.
name|isOutCapable
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|boolean
name|pubSub
init|=
name|getEndpoint
argument_list|()
operator|.
name|isPubSub
argument_list|()
decl_stmt|;
name|Object
name|body
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|getBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reply
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending to: {} with body: {}"
argument_list|,
name|address
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|eventBus
operator|.
name|send
argument_list|(
name|address
argument_list|,
name|body
argument_list|,
operator|new
name|CamelReplyHandler
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|pubSub
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Publishing to: {} with body: {}"
argument_list|,
name|address
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|eventBus
operator|.
name|publish
argument_list|(
name|address
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending to: {} with body: {}"
argument_list|,
name|address
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|eventBus
operator|.
name|send
argument_list|(
name|address
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|exchange
operator|.
name|setException
argument_list|(
operator|new
name|InvalidPayloadRuntimeException
argument_list|(
name|exchange
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|class|CamelReplyHandler
specifier|private
specifier|static
specifier|final
class|class
name|CamelReplyHandler
implements|implements
name|Handler
argument_list|<
name|AsyncResult
argument_list|<
name|Message
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|>
block|{
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|method|CamelReplyHandler (Exchange exchange, AsyncCallback callback)
specifier|private
name|CamelReplyHandler
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (AsyncResult<Message<Object>> event)
specifier|public
name|void
name|handle
parameter_list|(
name|AsyncResult
argument_list|<
name|Message
argument_list|<
name|Object
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
try|try
block|{
comment|// preserve headers
name|MessageHelper
operator|.
name|copyHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|exchange
operator|.
name|getOut
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Throwable
name|e
init|=
name|event
operator|.
name|cause
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|event
operator|.
name|result
argument_list|()
operator|.
name|body
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

