begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|model
operator|.
name|Camel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|model
operator|.
name|EndpointLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|model
operator|.
name|Endpoints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|EndpointsTest
specifier|public
class|class
name|EndpointsTest
extends|extends
name|TestSupport
block|{
annotation|@
name|Test
DECL|method|testCamelAsXml ()
specifier|public
name|void
name|testCamelAsXml
parameter_list|()
throws|throws
name|Exception
block|{
name|Camel
name|camel
init|=
name|resource
argument_list|(
literal|"/"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|get
argument_list|(
name|Camel
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertValidCamel
argument_list|(
name|camel
argument_list|)
expr_stmt|;
name|camel
operator|=
name|resource
argument_list|(
literal|"/.xml"
argument_list|)
operator|.
name|get
argument_list|(
name|Camel
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertValidCamel
argument_list|(
name|camel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEndpointsAsXml ()
specifier|public
name|void
name|testEndpointsAsXml
parameter_list|()
throws|throws
name|Exception
block|{
name|Endpoints
name|endpoints
init|=
name|resource
argument_list|(
literal|"endpoints"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|get
argument_list|(
name|Endpoints
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertValidEndpoints
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
name|endpoints
operator|=
name|resource
argument_list|(
literal|"endpoints.xml"
argument_list|)
operator|.
name|get
argument_list|(
name|Endpoints
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertValidEndpoints
argument_list|(
name|endpoints
argument_list|)
expr_stmt|;
block|}
comment|// TODO test as JSON
DECL|method|assertValidCamel (Camel camel)
specifier|protected
name|void
name|assertValidCamel
parameter_list|(
name|Camel
name|camel
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have found camel"
argument_list|,
name|camel
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found: "
operator|+
name|camel
argument_list|)
expr_stmt|;
block|}
DECL|method|assertValidEndpoints (Endpoints endpoints)
specifier|protected
name|void
name|assertValidEndpoints
parameter_list|(
name|Endpoints
name|endpoints
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have found endpoints"
argument_list|,
name|endpoints
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found: "
operator|+
name|endpoints
operator|.
name|getEndpoints
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EndpointLink
argument_list|>
name|list
init|=
name|endpoints
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have received some endpoints!"
argument_list|,
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

