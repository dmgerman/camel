begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.groovy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|groovy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|PredicateBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ValueBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
operator|.
name|PredicateRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
DECL|class|PredicateRendererTestSupport
specifier|public
class|class
name|PredicateRendererTestSupport
extends|extends
name|Assert
block|{
DECL|method|assertMatch (String expectedPredicate, Predicate predicate)
specifier|protected
name|void
name|assertMatch
parameter_list|(
name|String
name|expectedPredicate
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|PredicateRenderer
operator|.
name|render
argument_list|(
name|sb
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedPredicate
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|body ()
specifier|protected
specifier|static
name|ValueBuilder
name|body
parameter_list|()
block|{
return|return
name|Builder
operator|.
name|body
argument_list|()
return|;
block|}
DECL|method|constant (Object value)
specifier|protected
specifier|static
name|ValueBuilder
name|constant
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Builder
operator|.
name|constant
argument_list|(
name|value
argument_list|)
return|;
block|}
DECL|method|header (String name)
specifier|protected
specifier|static
name|ValueBuilder
name|header
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|Builder
operator|.
name|header
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|not (Predicate predicate)
specifier|protected
specifier|static
name|Predicate
name|not
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
return|return
name|PredicateBuilder
operator|.
name|not
argument_list|(
name|predicate
argument_list|)
return|;
block|}
DECL|method|and (Predicate p1, Predicate p2)
specifier|protected
specifier|static
name|Predicate
name|and
parameter_list|(
name|Predicate
name|p1
parameter_list|,
name|Predicate
name|p2
parameter_list|)
block|{
return|return
name|PredicateBuilder
operator|.
name|and
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
DECL|method|or (Predicate p1, Predicate p2)
specifier|protected
specifier|static
name|Predicate
name|or
parameter_list|(
name|Predicate
name|p1
parameter_list|,
name|Predicate
name|p2
parameter_list|)
block|{
return|return
name|PredicateBuilder
operator|.
name|or
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

