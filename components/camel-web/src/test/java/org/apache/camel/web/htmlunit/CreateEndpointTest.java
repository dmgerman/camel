begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.htmlunit
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|htmlunit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|htmlunit
operator|.
name|pages
operator|.
name|EndpointsPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|htmlunit
operator|.
name|pages
operator|.
name|SendMessagePage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|WebElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|By
operator|.
name|xpath
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|lift
operator|.
name|Finders
operator|.
name|links
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|lift
operator|.
name|Matchers
operator|.
name|atLeast
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|openqa
operator|.
name|selenium
operator|.
name|lift
operator|.
name|Matchers
operator|.
name|text
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
DECL|class|CreateEndpointTest
specifier|public
class|class
name|CreateEndpointTest
extends|extends
name|HtmlTestSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CreateEndpointTest
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|newEndpointUri
specifier|protected
name|String
name|newEndpointUri
init|=
literal|"mock:myNewlyCreatedEndpoint"
decl_stmt|;
DECL|field|messageBody
specifier|protected
name|String
name|messageBody
init|=
literal|"hello world!"
decl_stmt|;
DECL|method|testCreateEndpoint ()
specifier|public
name|void
name|testCreateEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|goToRootPage
argument_list|()
expr_stmt|;
name|assertPresenceOf
argument_list|(
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|,
name|links
argument_list|()
operator|.
name|with
argument_list|(
name|text
argument_list|(
name|not
argument_list|(
name|equalTo
argument_list|(
literal|"Images"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO one day we should do this
comment|//clickOn(xpath("//a[text() = 'Endpoints']"));
name|WebElement
name|element
init|=
name|findElement
argument_list|(
name|xpath
argument_list|(
literal|"//a[text() = 'Endpoints']"
argument_list|)
argument_list|)
decl_stmt|;
name|element
operator|.
name|click
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|getTitle
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"Endpoints"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WebElement
argument_list|>
name|endpointLinks
init|=
name|findElements
argument_list|(
name|xpath
argument_list|(
literal|"//a[@class='endpoint']"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should be several endpoint links!"
argument_list|,
name|endpointLinks
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|endpointLinks
operator|.
name|size
argument_list|()
operator|+
literal|" endpoints links!"
argument_list|)
expr_stmt|;
comment|// lets create a new endpoint
operator|new
name|EndpointsPage
argument_list|(
name|getWebDriver
argument_list|()
argument_list|)
operator|.
name|createEndpoint
argument_list|(
name|newEndpointUri
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|getTitle
argument_list|()
argument_list|,
name|containsString
argument_list|(
name|newEndpointUri
argument_list|)
argument_list|)
expr_stmt|;
comment|// now lets send a message to it
name|findElement
argument_list|(
name|xpath
argument_list|(
literal|"//a[@class='send']"
argument_list|)
argument_list|)
operator|.
name|click
argument_list|()
expr_stmt|;
operator|new
name|SendMessagePage
argument_list|(
name|getWebDriver
argument_list|()
argument_list|)
operator|.
name|sendMessage
argument_list|(
name|messageBody
argument_list|)
expr_stmt|;
comment|// now lets view the message
comment|// TODO can we force the last link to be clicked via xpath?
name|findElement
argument_list|(
name|xpath
argument_list|(
literal|"//a[@class='message']"
argument_list|)
argument_list|)
operator|.
name|click
argument_list|()
expr_stmt|;
name|String
name|actualMessage
init|=
name|findElement
argument_list|(
name|xpath
argument_list|(
literal|"//div[@class='message']"
argument_list|)
argument_list|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found message body: "
operator|+
name|actualMessage
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|actualMessage
argument_list|,
name|containsString
argument_list|(
name|messageBody
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Source: "
operator|+
name|getPageSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

