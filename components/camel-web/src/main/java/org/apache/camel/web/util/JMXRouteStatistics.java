begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|ManagedManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Gathers {@link RouteStatistics} from JMX.  *<p/>  * If JMX is disabled then no statistics can be gathered, and<tt>null</tt> is returned.  */
end_comment

begin_class
DECL|class|JMXRouteStatistics
specifier|public
class|class
name|JMXRouteStatistics
implements|implements
name|RouteStatistics
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JMXRouteStatistics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|getRouteStatistic (CamelContext camelContext, String routeID, String attribute)
specifier|public
name|Object
name|getRouteStatistic
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|routeID
parameter_list|,
name|String
name|attribute
parameter_list|)
block|{
comment|// only possible if JMX is enabled
if|if
condition|(
operator|!
operator|(
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|instanceof
name|ManagedManagementStrategy
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|MBeanServer
name|server
init|=
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|String
name|domain
init|=
name|camelContext
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getManagementAgent
argument_list|()
operator|.
name|getMBeanObjectDomainName
argument_list|()
decl_stmt|;
name|ObjectName
name|objName
init|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":type=routes,*"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectName
argument_list|>
name|cacheList
init|=
operator|new
name|LinkedList
argument_list|<
name|ObjectName
argument_list|>
argument_list|(
name|server
operator|.
name|queryNames
argument_list|(
name|objName
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ObjectName
argument_list|>
name|iter
init|=
name|cacheList
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|objName
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|String
name|keyProps
init|=
name|objName
operator|.
name|getCanonicalKeyPropertyListString
argument_list|()
decl_stmt|;
name|ObjectName
name|objectInfoName
init|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":"
operator|+
name|keyProps
argument_list|)
decl_stmt|;
name|String
name|currentRouteID
init|=
operator|(
name|String
operator|)
name|server
operator|.
name|getAttribute
argument_list|(
name|objectInfoName
argument_list|,
literal|"RouteId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRouteID
operator|.
name|equals
argument_list|(
name|routeID
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|server
operator|.
name|getAttribute
argument_list|(
name|objectInfoName
argument_list|,
name|attribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Date
condition|)
block|{
name|DateFormat
name|df
init|=
name|DateFormat
operator|.
name|getDateTimeInstance
argument_list|(
name|DateFormat
operator|.
name|SHORT
argument_list|,
name|DateFormat
operator|.
name|SHORT
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error getting route statistic from JMX. This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

