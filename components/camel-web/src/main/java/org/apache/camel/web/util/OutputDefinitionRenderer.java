begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|WaitForTaskToComplete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|AOPDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DataFormatDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|EnrichDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FinallyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptFromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|MarshalDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|MulticastDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OtherwiseDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OutputDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PipelineDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PolicyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PollEnrichDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RemoveHeaderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RemovePropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetExchangePatternDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SortDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|StopDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThreadsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransactedDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TryDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|UnmarshalDefinition
import|;
end_import

begin_class
DECL|class|OutputDefinitionRenderer
specifier|public
specifier|final
class|class
name|OutputDefinitionRenderer
block|{
DECL|method|OutputDefinitionRenderer ()
specifier|private
name|OutputDefinitionRenderer
parameter_list|()
block|{
comment|// Utility class, no public or protected default constructor
block|}
DECL|method|render (StringBuilder buffer, ProcessorDefinition processor)
specifier|public
specifier|static
name|void
name|render
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|ProcessorDefinition
name|processor
parameter_list|)
block|{
name|OutputDefinition
name|out
init|=
operator|(
name|OutputDefinition
operator|)
name|processor
decl_stmt|;
name|boolean
name|notGlobal
init|=
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|notGlobal
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|out
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|instanceof
name|AOPDefinition
condition|)
block|{
name|renderAop
argument_list|(
name|buffer
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|BeanDefinition
condition|)
block|{
name|renderBean
argument_list|(
name|buffer
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|EnrichDefinition
condition|)
block|{
name|String
name|enrich
init|=
name|out
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|resourceUri
init|=
name|enrich
operator|.
name|substring
argument_list|(
name|enrich
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
operator|+
literal|1
argument_list|,
name|enrich
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|resourceUri
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|FinallyDefinition
condition|)
block|{
name|renderFinally
argument_list|(
name|buffer
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|InterceptDefinition
condition|)
block|{
if|if
condition|(
name|out
operator|instanceof
name|InterceptFromDefinition
condition|)
block|{
name|InterceptFromDefinition
name|interceptFrom
init|=
operator|(
name|InterceptFromDefinition
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|interceptFrom
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|interceptFrom
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|InterceptSendToEndpointDefinition
condition|)
block|{
name|InterceptSendToEndpointDefinition
name|interceptSend
init|=
operator|(
name|InterceptSendToEndpointDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|interceptSend
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|interceptSend
operator|.
name|getSkipSendToOriginalEndpoint
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".skipSendToOriginalEndpoint()"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|MarshalDefinition
condition|)
block|{
name|DataFormatDefinition
name|dataFormat
init|=
operator|(
operator|(
name|MarshalDefinition
operator|)
name|out
operator|)
operator|.
name|getDataFormatType
argument_list|()
decl_stmt|;
name|XmlRootElement
name|xmlRoot
init|=
name|dataFormat
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"()."
argument_list|)
operator|.
name|append
argument_list|(
name|xmlRoot
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|MulticastDefinition
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|OtherwiseDefinition
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|PipelineDefinition
condition|)
block|{
comment|// transformed into simple ToDefinition
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|PolicyDefinition
condition|)
block|{
name|renderPolicy
argument_list|(
name|buffer
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|PollEnrichDefinition
condition|)
block|{
name|renderPollEnrich
argument_list|(
name|buffer
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|ProcessDefinition
condition|)
block|{
name|renderProcess
argument_list|(
name|buffer
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|RemoveHeaderDefinition
condition|)
block|{
name|RemoveHeaderDefinition
name|remove
init|=
operator|(
name|RemoveHeaderDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|remove
operator|.
name|getHeaderName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|RemovePropertyDefinition
condition|)
block|{
name|RemovePropertyDefinition
name|remove
init|=
operator|(
name|RemovePropertyDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|remove
operator|.
name|getPropertyName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|SetExchangePatternDefinition
condition|)
block|{
name|SetExchangePatternDefinition
name|setEP
init|=
operator|(
name|SetExchangePatternDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(ExchangePattern."
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|setEP
operator|.
name|getPattern
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|SortDefinition
condition|)
block|{
name|SortDefinition
name|sort
init|=
operator|(
name|SortDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|renderExpression
argument_list|(
name|buffer
argument_list|,
name|sort
operator|.
name|getExpression
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|StopDefinition
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|ThreadsDefinition
condition|)
block|{
name|renderThreads
argument_list|(
name|buffer
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|TransactedDefinition
condition|)
block|{
name|renderTransacted
argument_list|(
name|buffer
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|TryDefinition
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|UnmarshalDefinition
condition|)
block|{
name|DataFormatDefinition
name|dataFormat
init|=
operator|(
operator|(
name|UnmarshalDefinition
operator|)
name|out
operator|)
operator|.
name|getDataFormatType
argument_list|()
decl_stmt|;
name|XmlRootElement
name|xmlRoot
init|=
name|dataFormat
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"()."
argument_list|)
operator|.
name|append
argument_list|(
name|xmlRoot
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderAop (StringBuilder buffer, OutputDefinition out)
specifier|private
specifier|static
name|void
name|renderAop
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|OutputDefinition
name|out
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|AOPDefinition
name|aop
init|=
operator|(
name|AOPDefinition
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|aop
operator|.
name|getBeforeUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|aop
operator|.
name|getAfterUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".around(\""
argument_list|)
operator|.
name|append
argument_list|(
name|aop
operator|.
name|getBeforeUri
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\", \""
argument_list|)
operator|.
name|append
argument_list|(
name|aop
operator|.
name|getAfterUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aop
operator|.
name|getAfterFinallyUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".aroundFinally(\""
argument_list|)
operator|.
name|append
argument_list|(
name|aop
operator|.
name|getBeforeUri
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\", \""
argument_list|)
operator|.
name|append
argument_list|(
name|aop
operator|.
name|getAfterFinallyUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".before(\""
argument_list|)
operator|.
name|append
argument_list|(
name|aop
operator|.
name|getBeforeUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|aop
operator|.
name|getAfterUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".after(\""
argument_list|)
operator|.
name|append
argument_list|(
name|aop
operator|.
name|getAfterUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aop
operator|.
name|getAfterFinallyUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".afterFinally(\""
argument_list|)
operator|.
name|append
argument_list|(
name|aop
operator|.
name|getAfterFinallyUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderBean (StringBuilder buffer, ProcessorDefinition processor)
specifier|private
specifier|static
name|void
name|renderBean
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|ProcessorDefinition
name|processor
parameter_list|)
block|{
name|BeanDefinition
name|beanDef
init|=
operator|(
name|BeanDefinition
operator|)
name|processor
decl_stmt|;
if|if
condition|(
name|beanDef
operator|.
name|getRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Ref(\""
argument_list|)
operator|.
name|append
argument_list|(
name|beanDef
operator|.
name|getRef
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|beanDef
operator|.
name|getMethod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", \""
argument_list|)
operator|.
name|append
argument_list|(
name|beanDef
operator|.
name|getMethod
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderFinally (StringBuilder buffer, OutputDefinition out)
specifier|private
specifier|static
name|void
name|renderFinally
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|OutputDefinition
name|out
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|FinallyDefinition
name|finallyDef
init|=
operator|(
name|FinallyDefinition
operator|)
name|out
decl_stmt|;
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|branches
init|=
name|finallyDef
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
for|for
control|(
name|ProcessorDefinition
name|branch
range|:
name|branches
control|)
block|{
name|SendDefinitionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|branch
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|".end()"
argument_list|)
expr_stmt|;
block|}
DECL|method|renderPolicy (StringBuilder buffer, OutputDefinition out)
specifier|private
specifier|static
name|void
name|renderPolicy
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|OutputDefinition
name|out
parameter_list|)
block|{
name|PolicyDefinition
name|policy
init|=
operator|(
name|PolicyDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|.
name|getRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|policy
operator|.
name|getRef
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
DECL|method|renderPollEnrich (StringBuilder buffer, OutputDefinition out)
specifier|private
specifier|static
name|void
name|renderPollEnrich
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|OutputDefinition
name|out
parameter_list|)
block|{
name|PollEnrichDefinition
name|pollEnrich
init|=
operator|(
name|PollEnrichDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|pollEnrich
operator|.
name|getResourceUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\", "
argument_list|)
operator|.
name|append
argument_list|(
name|pollEnrich
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pollEnrich
operator|.
name|getAggregationStrategy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", An aggregationStrategy instance here"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
DECL|method|renderProcess (StringBuilder buffer, OutputDefinition out)
specifier|private
specifier|static
name|void
name|renderProcess
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|OutputDefinition
name|out
parameter_list|)
block|{
name|ProcessDefinition
name|process
init|=
operator|(
name|ProcessDefinition
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|process
operator|.
name|getRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Ref(\""
argument_list|)
operator|.
name|append
argument_list|(
name|process
operator|.
name|getRef
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"An inlined processor instance here"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderThreads (StringBuilder buffer, OutputDefinition out)
specifier|private
specifier|static
name|void
name|renderThreads
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|OutputDefinition
name|out
parameter_list|)
block|{
name|ThreadsDefinition
name|threads
init|=
operator|(
name|ThreadsDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|threads
operator|.
name|getPoolSize
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|threads
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|WaitForTaskToComplete
name|wait
init|=
name|threads
operator|.
name|getWaitForTaskToComplete
argument_list|()
decl_stmt|;
if|if
condition|(
name|wait
operator|!=
name|WaitForTaskToComplete
operator|.
name|IfReplyExpected
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".waitForTaskToComplete(WaitForTaskToComplete."
argument_list|)
operator|.
name|append
argument_list|(
name|wait
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderTransacted (StringBuilder buffer, OutputDefinition out)
specifier|private
specifier|static
name|void
name|renderTransacted
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|OutputDefinition
name|out
parameter_list|)
block|{
name|TransactedDefinition
name|transacted
init|=
operator|(
name|TransactedDefinition
operator|)
name|out
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|transacted
operator|.
name|getRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|transacted
operator|.
name|getRef
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

