begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|DeadLetterChannelBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SendDefinition
import|;
end_import

begin_comment
comment|/**  * Render routes in Groovy language  */
end_comment

begin_class
DECL|class|GroovyRenderer
specifier|public
specifier|final
class|class
name|GroovyRenderer
block|{
DECL|field|HEADER
specifier|public
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"import org.apache.camel.language.groovy.GroovyRouteBuilder;\nclass GroovyRoute extends GroovyRouteBuilder {\nvoid configure() {\n"
decl_stmt|;
DECL|field|FOOTER
specifier|public
specifier|static
specifier|final
name|String
name|FOOTER
init|=
literal|"\n}\n}"
decl_stmt|;
DECL|method|GroovyRenderer ()
specifier|private
name|GroovyRenderer
parameter_list|()
block|{
comment|// Utility class, no public or protected default constructor
block|}
comment|/**      * render a RouteDefinition      */
DECL|method|renderRoute (StringBuilder buffer, RouteDefinition route)
specifier|public
specifier|static
name|void
name|renderRoute
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|RouteDefinition
name|route
parameter_list|)
block|{
name|List
argument_list|<
name|FromDefinition
argument_list|>
name|inputs
init|=
name|route
operator|.
name|getInputs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProcessorDefinition
argument_list|>
name|outputs
init|=
name|route
operator|.
name|getOutputs
argument_list|()
decl_stmt|;
comment|// render the error handler
if|if
condition|(
operator|!
operator|(
name|route
operator|.
name|getErrorHandlerBuilder
argument_list|()
operator|instanceof
name|ErrorHandlerBuilderRef
operator|)
condition|)
block|{
if|if
condition|(
name|route
operator|.
name|getErrorHandlerBuilder
argument_list|()
operator|instanceof
name|DeadLetterChannelBuilder
condition|)
block|{
name|DeadLetterChannelBuilder
name|deadLetter
init|=
operator|(
name|DeadLetterChannelBuilder
operator|)
name|route
operator|.
name|getErrorHandlerBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"errorHandler(deadLetterChannel(\""
argument_list|)
operator|.
name|append
argument_list|(
name|deadLetter
operator|.
name|getDeadLetterUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|".maximumRedeliveries("
argument_list|)
operator|.
name|append
argument_list|(
name|deadLetter
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getMaximumRedeliveries
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|".redeliverDelay("
argument_list|)
operator|.
name|append
argument_list|(
name|deadLetter
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|getRedeliverDelay
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|".handled("
argument_list|)
operator|.
name|append
argument_list|(
name|deadLetter
operator|.
name|getHandledPolicy
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// render the global dsl not started with from, like global
comment|// intercept, interceptFrom,interceptSendToEndpoint, onCompletion,
comment|// onException
for|for
control|(
name|ProcessorDefinition
name|processor
range|:
name|outputs
control|)
block|{
if|if
condition|(
name|processor
operator|.
name|getParent
argument_list|()
operator|==
literal|null
operator|&&
operator|!
operator|(
name|processor
operator|instanceof
name|SendDefinition
operator|)
condition|)
block|{
name|ProcessorDefinitionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// render the inputs of the router
name|buffer
operator|.
name|append
argument_list|(
literal|"from("
argument_list|)
expr_stmt|;
for|for
control|(
name|FromDefinition
name|input
range|:
name|inputs
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|input
operator|.
name|getUri
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|input
operator|!=
name|inputs
operator|.
name|get
argument_list|(
name|inputs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
comment|// render some route configurations
if|if
condition|(
name|route
operator|.
name|isTrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|route
operator|.
name|isTrace
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".tracing()"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".noTracing()"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|route
operator|.
name|isStreamCache
argument_list|()
operator|!=
literal|null
operator|&&
name|route
operator|.
name|isStreamCache
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".streamCaching()"
argument_list|)
expr_stmt|;
block|}
comment|// render the outputs of the router
for|for
control|(
name|ProcessorDefinition
name|processor
range|:
name|outputs
control|)
block|{
if|if
condition|(
name|processor
operator|.
name|getParent
argument_list|()
operator|==
name|route
operator|||
name|processor
operator|instanceof
name|SendDefinition
condition|)
block|{
name|ProcessorDefinitionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * render a set of RouteDefinition      */
DECL|method|renderRoutes (StringBuilder buffer, List<RouteDefinition> routes)
specifier|public
specifier|static
name|void
name|renderRoutes
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
parameter_list|)
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routes
control|)
block|{
name|renderRoute
argument_list|(
name|buffer
argument_list|,
name|route
argument_list|)
expr_stmt|;
if|if
condition|(
name|route
operator|!=
name|routes
operator|.
name|get
argument_list|(
name|routes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

