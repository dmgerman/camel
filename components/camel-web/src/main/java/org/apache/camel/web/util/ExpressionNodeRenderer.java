begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ExpressionClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|DelayDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ExpressionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|FilterDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdempotentConsumerDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|LoopDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ProcessorDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RecipientListDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetBodyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetHeaderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetOutHeaderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SetPropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|SplitDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|TransformDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|WhenDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ConstantExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|language
operator|.
name|ExpressionDefinition
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|ExpressionNodeRenderer
specifier|public
class|class
name|ExpressionNodeRenderer
block|{
DECL|method|render (StringBuilder buffer, ProcessorDefinition processor)
specifier|public
specifier|static
name|void
name|render
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|ProcessorDefinition
name|processor
parameter_list|)
block|{
name|ExpressionNode
name|expNode
init|=
operator|(
name|ExpressionNode
operator|)
name|processor
decl_stmt|;
name|ExpressionDefinition
name|expression
init|=
name|expNode
operator|.
name|getExpression
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|expNode
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expNode
operator|instanceof
name|DelayDefinition
condition|)
block|{
name|String
name|delay
init|=
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|delay
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|String
name|delayTime
init|=
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|delayTime
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|FilterDefinition
condition|)
block|{
if|if
condition|(
name|expression
operator|.
name|getPredicate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|PredicateRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|.
name|getLanguage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|IdempotentConsumerDefinition
condition|)
block|{
comment|// TODO improve it
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|LoopDefinition
condition|)
block|{
if|if
condition|(
name|expression
operator|instanceof
name|ConstantExpression
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|expression
operator|.
name|getExpression
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|RecipientListDefinition
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|SetBodyDefinition
condition|)
block|{
name|String
name|expValue
init|=
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|expValue
operator|.
name|startsWith
argument_list|(
literal|"append"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|renderConstant
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|SetHeaderDefinition
condition|)
block|{
name|SetHeaderDefinition
name|set
init|=
operator|(
name|SetHeaderDefinition
operator|)
name|expNode
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|set
operator|.
name|getHeaderName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExpressionRenderer
operator|.
name|renderConstant
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|.
name|getExpressionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|SetOutHeaderDefinition
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"(\"unspported expressions in SetOutHeaderDefinition\")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|SetPropertyDefinition
condition|)
block|{
name|SetPropertyDefinition
name|set
init|=
operator|(
name|SetPropertyDefinition
operator|)
name|expNode
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|set
operator|.
name|getPropertyName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExpressionRenderer
operator|.
name|renderConstant
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|.
name|getExpressionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|SplitDefinition
condition|)
block|{
if|if
condition|(
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|.
name|getExpressionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()."
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
name|SplitDefinition
name|split
init|=
operator|(
name|SplitDefinition
operator|)
name|expNode
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|isStreaming
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".streaming()"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|TransformDefinition
condition|)
block|{
name|String
name|expValue
init|=
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|expValue
operator|.
name|startsWith
argument_list|(
literal|"append"
argument_list|)
operator|||
name|expValue
operator|.
name|startsWith
argument_list|(
literal|"prepend"
argument_list|)
operator|||
name|expValue
operator|.
name|startsWith
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expValue
operator|.
name|startsWith
argument_list|(
literal|"xpath"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"(constant(\""
argument_list|)
operator|.
name|append
argument_list|(
name|expression
operator|.
name|getExpressionValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"))"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|expNode
operator|instanceof
name|WhenDefinition
condition|)
block|{
if|if
condition|(
name|expression
operator|.
name|getPredicate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|PredicateRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
name|expression
operator|.
name|getPredicate
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expression
operator|instanceof
name|ExpressionClause
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|ExpressionRenderer
operator|.
name|render
argument_list|(
name|buffer
argument_list|,
operator|(
name|ExpressionClause
operator|)
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

