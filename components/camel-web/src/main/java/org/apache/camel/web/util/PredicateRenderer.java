begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  * render a predicate  */
end_comment

begin_class
DECL|class|PredicateRenderer
specifier|public
class|class
name|PredicateRenderer
block|{
DECL|method|render (StringBuilder buffer, Predicate predicate)
specifier|public
specifier|static
name|void
name|render
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
block|{
name|String
name|pre
init|=
name|predicate
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|pre
operator|.
name|startsWith
argument_list|(
literal|"not ("
argument_list|)
condition|)
block|{
name|renderNot
argument_list|(
name|buffer
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pre
operator|.
name|contains
argument_list|(
literal|") and ("
argument_list|)
condition|)
block|{
name|renderAnd
argument_list|(
name|buffer
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pre
operator|.
name|contains
argument_list|(
literal|") or ("
argument_list|)
condition|)
block|{
name|renderOr
argument_list|(
name|buffer
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pre
operator|.
name|startsWith
argument_list|(
literal|"in ("
argument_list|)
condition|)
block|{
name|renderIn
argument_list|(
name|buffer
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pre
operator|.
name|contains
argument_list|(
literal|".matches("
argument_list|)
condition|)
block|{
name|renderMatches
argument_list|(
name|buffer
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|render
argument_list|(
name|buffer
argument_list|,
name|pre
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|render (StringBuilder buffer, String predicate)
specifier|public
specifier|static
name|void
name|render
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|predicate
parameter_list|)
block|{
name|String
name|left
init|=
name|predicate
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|predicate
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|operation
init|=
name|predicate
operator|.
name|substring
argument_list|(
name|predicate
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
operator|+
literal|1
argument_list|,
name|predicate
operator|.
name|lastIndexOf
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|right
init|=
name|predicate
operator|.
name|substring
argument_list|(
name|predicate
operator|.
name|lastIndexOf
argument_list|(
literal|" "
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|renderLeft
argument_list|(
name|buffer
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|renderOperation
argument_list|(
name|buffer
argument_list|,
name|operation
argument_list|)
expr_stmt|;
name|renderRight
argument_list|(
name|buffer
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
DECL|method|renderAnd (StringBuilder buffer, String predicate)
specifier|private
specifier|static
name|void
name|renderAnd
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|predicate
parameter_list|)
block|{
comment|// (predicate1 and predicate2)
name|buffer
operator|.
name|append
argument_list|(
literal|"and("
argument_list|)
expr_stmt|;
name|String
name|predicate1
init|=
name|predicate
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|predicate
operator|.
name|indexOf
argument_list|(
literal|") and ("
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|predicate2
init|=
name|predicate
operator|.
name|substring
argument_list|(
name|predicate
operator|.
name|indexOf
argument_list|(
literal|") and ("
argument_list|)
operator|+
literal|7
argument_list|,
name|predicate
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|render
argument_list|(
name|buffer
argument_list|,
name|predicate1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|buffer
argument_list|,
name|predicate2
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
DECL|method|renderIn (StringBuilder buffer, String predicate)
specifier|private
specifier|static
name|void
name|renderIn
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|predicate
parameter_list|)
block|{
name|String
name|predicates
index|[]
init|=
name|predicate
operator|.
name|split
argument_list|(
literal|"in \\(\\[|,\\s+|\\]\\)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|.
name|contains
argument_list|(
literal|"convertToEvaluatedType"
argument_list|)
condition|)
block|{
comment|// valueIn
name|String
name|left
init|=
name|predicate
operator|.
name|substring
argument_list|(
name|predicate
operator|.
name|indexOf
argument_list|(
literal|"in (["
argument_list|)
operator|+
literal|5
argument_list|,
name|predicate
operator|.
name|indexOf
argument_list|(
literal|" == "
argument_list|)
argument_list|)
decl_stmt|;
name|renderLeft
argument_list|(
name|buffer
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|".in("
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pre
range|:
name|predicates
control|)
block|{
if|if
condition|(
name|pre
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|value
init|=
name|pre
operator|.
name|substring
argument_list|(
name|pre
operator|.
name|indexOf
argument_list|(
literal|" == "
argument_list|)
operator|+
literal|4
argument_list|,
name|pre
operator|.
name|indexOf
argument_list|(
literal|".convertToEvaluatedType("
argument_list|)
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|pre
operator|!=
name|predicates
index|[
name|predicates
operator|.
name|length
operator|-
literal|1
index|]
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// predicateIn
name|buffer
operator|.
name|append
argument_list|(
literal|"in("
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pre
range|:
name|predicates
control|)
block|{
if|if
condition|(
name|pre
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|render
argument_list|(
name|buffer
argument_list|,
name|pre
argument_list|)
expr_stmt|;
if|if
condition|(
name|pre
operator|!=
name|predicates
index|[
name|predicates
operator|.
name|length
operator|-
literal|1
index|]
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderLeft (StringBuilder buffer, String left)
specifier|private
specifier|static
name|void
name|renderLeft
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|left
parameter_list|)
block|{
if|if
condition|(
name|left
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
comment|// header(foo) -> header("foo")
name|buffer
operator|.
name|append
argument_list|(
name|left
operator|.
name|replaceAll
argument_list|(
literal|"\\("
argument_list|,
literal|"(\""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\)"
argument_list|,
literal|"\")"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// body -> body()
name|buffer
operator|.
name|append
argument_list|(
name|left
argument_list|)
operator|.
name|append
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderMatches (StringBuilder buffer, String pre)
specifier|private
specifier|static
name|void
name|renderMatches
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|pre
parameter_list|)
block|{
comment|// header(foo).matches('pattern')
name|pre
operator|=
name|pre
operator|.
name|replaceFirst
argument_list|(
literal|"\\("
argument_list|,
literal|"(\""
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"\\)"
argument_list|,
literal|"\")"
argument_list|)
expr_stmt|;
name|pre
operator|=
name|pre
operator|.
name|replaceFirst
argument_list|(
literal|".matches\\('"
argument_list|,
literal|".regex(\""
argument_list|)
operator|.
name|replaceFirst
argument_list|(
literal|"'\\)"
argument_list|,
literal|"\")"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|pre
argument_list|)
expr_stmt|;
block|}
DECL|method|renderNot (StringBuilder buffer, String predicate)
specifier|private
specifier|static
name|void
name|renderNot
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|predicate
parameter_list|)
block|{
comment|// not(predicate)
name|buffer
operator|.
name|append
argument_list|(
literal|"not("
argument_list|)
expr_stmt|;
name|String
name|notPredicate
init|=
name|predicate
operator|.
name|substring
argument_list|(
name|predicate
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|+
literal|1
argument_list|,
name|predicate
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|render
argument_list|(
name|buffer
argument_list|,
name|notPredicate
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
DECL|method|renderOperation (StringBuilder buffer, String operation)
specifier|private
specifier|static
name|void
name|renderOperation
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
comment|// process the operations
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"=="
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isEqualTo"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"!="
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isNotEqualTo"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isLessThan"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"<="
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isLessThanOrEqualTo"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isGreaterThan"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isGreaterThanOrEqualTo"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"contains"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".contains"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"is"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isNull()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"is not"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isNotNull()"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"instanceof"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".isInstanceOf"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"startsWith"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".startsWith"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"endsWith"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".endsWith"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
literal|"matches"
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".regex"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderOr (StringBuilder buffer, String predicate)
specifier|private
specifier|static
name|void
name|renderOr
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|predicate
parameter_list|)
block|{
comment|// (predicate1 or predicate2)
name|buffer
operator|.
name|append
argument_list|(
literal|"or("
argument_list|)
expr_stmt|;
name|String
name|predicate1
init|=
name|predicate
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|predicate
operator|.
name|indexOf
argument_list|(
literal|") or ("
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|predicate2
init|=
name|predicate
operator|.
name|substring
argument_list|(
name|predicate
operator|.
name|indexOf
argument_list|(
literal|") or ("
argument_list|)
operator|+
literal|6
argument_list|,
name|predicate
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|render
argument_list|(
name|buffer
argument_list|,
name|predicate1
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|buffer
argument_list|,
name|predicate2
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
DECL|method|renderRight (StringBuilder buffer, String right)
specifier|private
specifier|static
name|void
name|renderRight
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|String
name|right
parameter_list|)
block|{
if|if
condition|(
name|right
operator|.
name|matches
argument_list|(
literal|"-?\\d+"
argument_list|)
condition|)
block|{
comment|// number -> number
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|right
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|right
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|right
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
comment|// for isNull() and isNotNull()
return|return;
block|}
else|else
block|{
comment|// string -> "string"
name|buffer
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|right
argument_list|)
operator|.
name|append
argument_list|(
literal|"\")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

