begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Predicate
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
DECL|class|PredicateRenderer
specifier|public
class|class
name|PredicateRenderer
block|{
DECL|method|renderPredicate (StringBuilder buffer, Predicate predicate)
specifier|public
specifier|static
name|void
name|renderPredicate
parameter_list|(
name|StringBuilder
name|buffer
parameter_list|,
name|Predicate
name|predicate
parameter_list|)
block|{
name|String
name|pre
init|=
name|predicate
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|pre
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|pre
operator|=
name|pre
operator|.
name|replaceAll
argument_list|(
literal|"\\("
argument_list|,
literal|"(\""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\)"
argument_list|,
literal|"\")"
argument_list|)
expr_stmt|;
name|String
name|rightExp
init|=
name|pre
operator|.
name|substring
argument_list|(
name|pre
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightExp
operator|.
name|startsWith
argument_list|(
literal|"=="
argument_list|)
condition|)
block|{
comment|// replace == with isEqualTo
name|pre
operator|=
name|pre
operator|.
name|replaceFirst
argument_list|(
literal|"\\ == "
argument_list|,
literal|".isEqualTo(\""
argument_list|)
expr_stmt|;
name|pre
operator|+=
literal|"\")"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rightExp
operator|.
name|startsWith
argument_list|(
literal|"is not null"
argument_list|)
condition|)
block|{
name|pre
operator|=
name|pre
operator|.
name|replaceFirst
argument_list|(
literal|"\\ is not null"
argument_list|,
literal|".isNotNull()"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|pre
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tmp
index|[]
init|=
name|pre
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|tmp
index|[
literal|0
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"()."
argument_list|)
operator|.
name|append
argument_list|(
name|tmp
index|[
literal|1
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"(\""
argument_list|)
operator|.
name|append
argument_list|(
name|tmp
index|[
literal|2
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"))"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

