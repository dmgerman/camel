begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_class
DECL|class|UriCharactersEncoder
specifier|public
specifier|final
class|class
name|UriCharactersEncoder
block|{
DECL|field|unsafeCharacters
specifier|private
specifier|static
name|BitSet
name|unsafeCharacters
decl_stmt|;
DECL|field|HEX_DIGITS
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|HEX_DIGITS
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|}
decl_stmt|;
static|static
block|{
name|unsafeCharacters
operator|=
operator|new
name|BitSet
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'~'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'`'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|unsafeCharacters
operator|.
name|set
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
block|}
DECL|method|UriCharactersEncoder ()
specifier|private
name|UriCharactersEncoder
parameter_list|()
block|{
comment|// util class
block|}
DECL|method|encode (String s)
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|n
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
condition|)
block|{
return|return
name|s
return|;
block|}
comment|// First check whether we actually need to encode
name|char
name|chars
index|[]
init|=
name|s
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
control|)
block|{
comment|// just deal with the ascii character
if|if
condition|(
name|chars
index|[
name|i
index|]
operator|>
literal|0
operator|&&
name|chars
index|[
name|i
index|]
operator|<
literal|128
condition|)
block|{
if|if
condition|(
name|unsafeCharacters
operator|.
name|get
argument_list|(
name|chars
index|[
name|i
index|]
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|++
name|i
operator|>=
name|chars
operator|.
name|length
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
comment|// okay there are some unsafe characters so we do need to encode
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|ch
range|:
name|chars
control|)
block|{
if|if
condition|(
name|ch
operator|>
literal|0
operator|&&
name|ch
operator|<
literal|128
operator|&&
name|unsafeCharacters
operator|.
name|get
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|appendEscape
argument_list|(
name|sb
argument_list|,
operator|(
name|byte
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|appendEscape (StringBuilder sb, byte b)
specifier|private
specifier|static
name|void
name|appendEscape
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|HEX_DIGITS
index|[
operator|(
name|b
operator|>>
literal|4
operator|)
operator|&
literal|0x0f
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|HEX_DIGITS
index|[
operator|(
name|b
operator|>>
literal|0
operator|)
operator|&
literal|0x0f
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

