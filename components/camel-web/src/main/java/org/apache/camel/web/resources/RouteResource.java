begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|representation
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|view
operator|.
name|Viewable
import|;
end_import

begin_import
import|import
name|groovy
operator|.
name|lang
operator|.
name|GroovyClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ruby
operator|.
name|RubyCamel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|view
operator|.
name|RouteDotGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|util
operator|.
name|GroovyRenderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jruby
operator|.
name|Main
import|;
end_import

begin_comment
comment|/**  * A single Camel Route which is used to implement one or more  *<a href="http://camel.apache.org/enterprise-integration-patterns.html">Enterprise Integration Paterns</a>  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|RouteResource
specifier|public
class|class
name|RouteResource
extends|extends
name|CamelChildResourceSupport
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RouteResource
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LANGUAGE_XML
specifier|private
specifier|static
specifier|final
name|String
name|LANGUAGE_XML
init|=
literal|"Xml"
decl_stmt|;
DECL|field|LANGUAGE_GROOVY
specifier|private
specifier|static
specifier|final
name|String
name|LANGUAGE_GROOVY
init|=
literal|"Groovy"
decl_stmt|;
DECL|field|LANGUAGE_RUBY
specifier|private
specifier|static
specifier|final
name|String
name|LANGUAGE_RUBY
init|=
literal|"Ruby"
decl_stmt|;
DECL|field|LANGUAGE_SCALA
specifier|private
specifier|static
specifier|final
name|String
name|LANGUAGE_SCALA
init|=
literal|"Scala"
decl_stmt|;
DECL|field|route
specifier|private
name|RouteDefinition
name|route
decl_stmt|;
DECL|field|error
specifier|private
name|String
name|error
init|=
literal|""
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
comment|// what language is used to define this route
DECL|field|language
specifier|private
name|String
name|language
init|=
name|LANGUAGE_XML
decl_stmt|;
DECL|method|RouteResource (RoutesResource routesResource, RouteDefinition route)
specifier|public
name|RouteResource
parameter_list|(
name|RoutesResource
name|routesResource
parameter_list|,
name|RouteDefinition
name|route
parameter_list|)
block|{
name|super
argument_list|(
name|routesResource
operator|.
name|getContextResource
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|route
operator|=
name|route
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|route
operator|.
name|idOrCreate
argument_list|(
name|route
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getNodeIdFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the XML or JSON representation of this route      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_XML
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|getRoute ()
specifier|public
name|RouteDefinition
name|getRoute
parameter_list|()
block|{
return|return
name|route
return|;
block|}
comment|/**      * Returns the XML text      */
DECL|method|getRouteXml ()
specifier|public
name|String
name|getRouteXml
parameter_list|()
throws|throws
name|JAXBException
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Constants
operator|.
name|JAXB_PACKAGES
argument_list|)
decl_stmt|;
name|Marshaller
name|marshaller
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO fix to use "" namespace prefix
comment|// using this
comment|// https://jaxb.dev.java.net/nonav/2.1.10/docs/vendorProperties.html#prefixmapper
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|route
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the content of the route definition class      */
DECL|method|getRouteDefinition ()
specifier|public
name|String
name|getRouteDefinition
parameter_list|()
block|{
if|if
condition|(
name|language
operator|.
name|equalsIgnoreCase
argument_list|(
name|LANGUAGE_XML
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|getRouteXml
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
return|return
literal|"Error on marshal the route definition!"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equalsIgnoreCase
argument_list|(
name|LANGUAGE_GROOVY
argument_list|)
condition|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
operator|new
name|GroovyRenderer
argument_list|()
operator|.
name|renderRoute
argument_list|(
name|buffer
argument_list|,
name|route
argument_list|)
expr_stmt|;
return|return
name|GroovyRenderer
operator|.
name|header
operator|+
name|buffer
operator|.
name|toString
argument_list|()
operator|+
name|GroovyRenderer
operator|.
name|footer
return|;
block|}
else|else
block|{
return|return
literal|"Unsupported language!"
return|;
block|}
block|}
comment|/**      * Returns the Graphviz DOT<a      * href="http://camel.apache.org/visualisation.html">Visualisation</a> of      * this route      */
annotation|@
name|GET
annotation|@
name|Produces
argument_list|(
name|Constants
operator|.
name|DOT_MIMETYPE
argument_list|)
DECL|method|getDot ()
specifier|public
name|String
name|getDot
parameter_list|()
throws|throws
name|IOException
block|{
name|RouteDotGenerator
name|generator
init|=
operator|new
name|RouteDotGenerator
argument_list|(
literal|"/tmp/camel"
argument_list|)
decl_stmt|;
return|return
name|generator
operator|.
name|getRoutesText
argument_list|(
name|getCamelContext
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Allows a route definition to be updated      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|()
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_XML
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|,
name|MediaType
operator|.
name|APPLICATION_JSON
block|}
argument_list|)
DECL|method|postRoute (RouteDefinition routeDefinition)
specifier|public
name|void
name|postRoute
parameter_list|(
name|RouteDefinition
name|routeDefinition
parameter_list|)
throws|throws
name|Exception
block|{
comment|// lets preserve the ID
name|routeDefinition
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// lets install the updated route
name|getCamelContext
argument_list|()
operator|.
name|addRouteDefinitions
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|routeDefinition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allows a routes builder to be updated      */
DECL|method|postRoutes (RouteBuilder builder)
specifier|public
name|void
name|postRoutes
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|)
throws|throws
name|Exception
block|{
comment|// add the route builder into a temporary camel context
name|CamelContext
name|tempContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|tempContext
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
comment|// get all the added routes and add them into current context
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routeDefinitions
init|=
name|tempContext
operator|.
name|getRouteDefinitions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|routeDefinitions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RouteDefinition
name|routeDefinition
init|=
name|routeDefinitions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// set id only for the first route
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|routeDefinition
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// add or update the route
name|getCamelContext
argument_list|()
operator|.
name|addRouteDefinitions
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|routeDefinition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Updates a route definition using form encoded data from a web form      *       * @param formData is the form data POSTed typically from a HTML form with      *            the<code>route</code> field used to encode the XML text of      *            the new route definition      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
DECL|method|postRouteForm (@ontext UriInfo uriInfo, Form formData)
specifier|public
name|Response
name|postRouteForm
parameter_list|(
annotation|@
name|Context
name|UriInfo
name|uriInfo
parameter_list|,
name|Form
name|formData
parameter_list|)
throws|throws
name|URISyntaxException
block|{
comment|// TODO replace the Form class with an injected bean?
name|String
name|language
init|=
name|formData
operator|.
name|getFirst
argument_list|(
literal|"language"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|body
init|=
name|formData
operator|.
name|getFirst
argument_list|(
literal|"route"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|edited
init|=
name|formData
operator|.
name|getFirst
argument_list|(
literal|"edited"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|edited
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
block|{
return|return
name|Response
operator|.
name|seeOther
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/routes"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"new Route is: "
operator|+
name|body
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|body
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|==
literal|null
condition|)
block|{
name|error
operator|=
literal|"No Route submitted!"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equals
argument_list|(
name|LANGUAGE_XML
argument_list|)
condition|)
block|{
return|return
name|parseXml
argument_list|(
name|body
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equals
argument_list|(
name|LANGUAGE_GROOVY
argument_list|)
condition|)
block|{
return|return
name|parseGroovy
argument_list|(
name|body
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equals
argument_list|(
name|LANGUAGE_RUBY
argument_list|)
condition|)
block|{
return|return
name|parseRuby
argument_list|(
name|body
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equals
argument_list|(
name|LANGUAGE_SCALA
argument_list|)
condition|)
block|{
return|return
name|parseScala
argument_list|(
name|body
argument_list|)
return|;
block|}
name|error
operator|=
literal|"Not supproted language!"
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"edit"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * process the route configuration defined in Xml      */
DECL|method|parseXml (String xml)
specifier|private
name|Response
name|parseXml
parameter_list|(
name|String
name|xml
parameter_list|)
block|{
try|try
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Constants
operator|.
name|JAXB_PACKAGES
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|RouteDefinition
condition|)
block|{
name|RouteDefinition
name|routeDefinition
init|=
operator|(
name|RouteDefinition
operator|)
name|value
decl_stmt|;
name|postRoute
argument_list|(
name|routeDefinition
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|seeOther
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/routes"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|error
operator|=
literal|"Posted XML is not a route but is of type "
operator|+
name|ObjectHelper
operator|.
name|className
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|error
operator|=
literal|"Failed to parse XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
operator|=
literal|"Failed to install route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// lets re-render the form
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"edit"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * process the route configuration defined in Groovy class      */
DECL|method|parseGroovy (String route)
specifier|private
name|Response
name|parseGroovy
parameter_list|(
name|String
name|route
parameter_list|)
block|{
try|try
block|{
comment|// store the route definition
comment|// File file = storeRoute(route, LANGUAGE_GROOVY);
comment|// load the definition class into a RouteBuilder instance
name|GroovyClassLoader
name|classLoader
init|=
operator|new
name|GroovyClassLoader
argument_list|()
decl_stmt|;
name|Class
name|clazz
init|=
name|classLoader
operator|.
name|parseClass
argument_list|(
name|route
argument_list|)
decl_stmt|;
name|RouteBuilder
name|builder
init|=
operator|(
name|RouteBuilder
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded builder: "
operator|+
name|builder
argument_list|)
expr_stmt|;
name|postRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|seeOther
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/routes"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to store the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to instantiate the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to instantiate the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to edit the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// lets re-render the form
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"edit"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * process the route configuration defined in Ruby class      */
DECL|method|parseRuby (String route)
specifier|private
name|Response
name|parseRuby
parameter_list|(
name|String
name|route
parameter_list|)
block|{
try|try
block|{
comment|// add the script of addRouteBuilder into ruby script
name|route
operator|+=
literal|"\n RubyCamel.addRouteBuilder(RubyRoute.new)"
expr_stmt|;
comment|// store the route definition
name|File
name|file
init|=
name|storeRoute
argument_list|(
name|route
argument_list|,
name|LANGUAGE_RUBY
argument_list|)
decl_stmt|;
comment|// execute the ruby script, which will store the RouteBuilder
comment|// instances into RubyCamel
name|String
index|[]
name|args
init|=
block|{
name|file
operator|.
name|getAbsolutePath
argument_list|()
block|}
decl_stmt|;
name|Main
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// get the route builders from the RubyCamel and add them into this
comment|// route
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|list
init|=
name|RubyCamel
operator|.
name|getRoutes
argument_list|()
decl_stmt|;
for|for
control|(
name|RouteBuilder
name|builder
range|:
name|list
control|)
block|{
name|postRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|seeOther
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/routes"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to store the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to edit the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// lets re-render the form
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"edit"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * process the route configuration defined in Scala class      */
DECL|method|parseScala (String route)
specifier|private
name|Response
name|parseScala
parameter_list|(
name|String
name|route
parameter_list|)
block|{
try|try
block|{
comment|// store the route definition
name|File
name|file
init|=
name|storeRoute
argument_list|(
name|route
argument_list|,
name|LANGUAGE_SCALA
argument_list|)
decl_stmt|;
comment|// load the definition class
return|return
name|Response
operator|.
name|seeOther
argument_list|(
operator|new
name|URI
argument_list|(
literal|"/routes"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to store the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// e.printStackTrace();
name|error
operator|=
literal|"Failed to edit the route: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|// lets re-render the form
return|return
name|Response
operator|.
name|ok
argument_list|(
operator|new
name|Viewable
argument_list|(
literal|"edit"
argument_list|,
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Stores the route definition class into a file      */
DECL|method|storeRoute (String route, String language)
specifier|private
name|File
name|storeRoute
parameter_list|(
name|String
name|route
parameter_list|,
name|String
name|language
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a temporary file to store the route definition class
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"Route-"
argument_list|,
literal|"."
operator|+
name|language
argument_list|)
decl_stmt|;
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// write the route into the file
name|fw
operator|.
name|write
argument_list|(
name|route
argument_list|)
expr_stmt|;
name|fw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
comment|/**      * Returns the language      */
DECL|method|getLanguage ()
specifier|public
name|String
name|getLanguage
parameter_list|()
block|{
return|return
name|language
return|;
block|}
DECL|method|setLanguage (String language)
specifier|public
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
if|if
condition|(
name|language
operator|.
name|equalsIgnoreCase
argument_list|(
name|LANGUAGE_GROOVY
argument_list|)
condition|)
block|{
name|this
operator|.
name|language
operator|=
name|LANGUAGE_GROOVY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equalsIgnoreCase
argument_list|(
name|LANGUAGE_GROOVY
argument_list|)
condition|)
block|{
name|this
operator|.
name|language
operator|=
name|LANGUAGE_GROOVY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equalsIgnoreCase
argument_list|(
name|LANGUAGE_RUBY
argument_list|)
condition|)
block|{
name|this
operator|.
name|language
operator|=
name|LANGUAGE_RUBY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|language
operator|.
name|equalsIgnoreCase
argument_list|(
name|LANGUAGE_SCALA
argument_list|)
condition|)
block|{
name|this
operator|.
name|language
operator|=
name|LANGUAGE_SCALA
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|language
operator|=
name|LANGUAGE_XML
expr_stmt|;
block|}
block|}
comment|/**      * Looks up an individual route      */
annotation|@
name|Path
argument_list|(
literal|"status"
argument_list|)
DECL|method|getRouteStatus ()
specifier|public
name|RouteStatusResource
name|getRouteStatus
parameter_list|()
block|{
return|return
operator|new
name|RouteStatusResource
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|getError ()
specifier|public
name|String
name|getError
parameter_list|()
block|{
return|return
name|error
return|;
block|}
block|}
end_class

end_unit

