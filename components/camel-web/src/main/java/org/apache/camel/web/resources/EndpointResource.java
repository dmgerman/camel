begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.web.resources
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|resources
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|representation
operator|.
name|Form
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|web
operator|.
name|model
operator|.
name|EndpointLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|BrowsableEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Consumes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A Camel<a href="http://camel.apache.org/endpoint.html">Endpoint</a>  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|EndpointResource
specifier|public
class|class
name|EndpointResource
extends|extends
name|CamelChildResourceSupport
block|{
DECL|field|endpoint
specifier|private
specifier|final
name|Endpoint
name|endpoint
decl_stmt|;
DECL|method|EndpointResource (CamelContextResource contextResource, Endpoint endpoint)
specifier|public
name|EndpointResource
parameter_list|(
name|CamelContextResource
name|contextResource
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|contextResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
DECL|method|getHref ()
specifier|public
name|String
name|getHref
parameter_list|()
block|{
return|return
operator|new
name|EndpointLink
argument_list|(
name|endpoint
argument_list|)
operator|.
name|getHref
argument_list|()
return|;
block|}
DECL|method|getUri ()
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getEndpointUri
argument_list|()
return|;
block|}
DECL|method|getEndpoint ()
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
DECL|method|getBrowsableEndpoint ()
specifier|public
name|BrowsableEndpoint
name|getBrowsableEndpoint
parameter_list|()
block|{
if|if
condition|(
name|endpoint
operator|instanceof
name|BrowsableEndpoint
condition|)
block|{
return|return
operator|(
name|BrowsableEndpoint
operator|)
name|endpoint
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns a single Camel<a href="http://camel.apache.org/exchange.html">message exchange</a> on this endpoint if the endpoint supports      *<a href="http://camel.apache.org/browsableendpoint.html">being browsed</a>      */
annotation|@
name|Path
argument_list|(
literal|"messages/{id}"
argument_list|)
DECL|method|getExchange (@athParamR) String exchangeId)
specifier|public
name|ExchangeResource
name|getExchange
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|String
name|exchangeId
parameter_list|)
block|{
if|if
condition|(
name|endpoint
operator|instanceof
name|BrowsableEndpoint
condition|)
block|{
name|BrowsableEndpoint
name|browsableEndpoint
init|=
operator|(
name|BrowsableEndpoint
operator|)
name|endpoint
decl_stmt|;
name|Exchange
name|exchange
init|=
name|ExchangeHelper
operator|.
name|getExchangeById
argument_list|(
name|browsableEndpoint
operator|.
name|getExchanges
argument_list|()
argument_list|,
name|exchangeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ExchangeResource
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
return|;
block|}
block|}
comment|// should return 404
return|return
literal|null
return|;
block|}
comment|/**      * Posts a<a href="http://camel.apache.org/message.html">message</a> to this Camel endpoint with the payload      * being text, XML or JSON      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_PLAIN
block|,
name|MediaType
operator|.
name|TEXT_HTML
block|,
name|MediaType
operator|.
name|TEXT_XML
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|postMessage (@ontext HttpHeaders headers, final String body)
specifier|public
name|Response
name|postMessage
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
specifier|final
name|String
name|body
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|sendMessage
argument_list|(
name|headers
argument_list|,
name|body
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Posts a<a href="http://camel.apache.org/message.html">message</a> to this Camel endpoint taking the      * form data and extracting the<code>body</code> field as the body of the message.      */
annotation|@
name|POST
annotation|@
name|Consumes
argument_list|(
literal|"application/x-www-form-urlencoded"
argument_list|)
DECL|method|postMessageForm (@ontext HttpHeaders headers, Form formData)
specifier|public
name|Response
name|postMessageForm
parameter_list|(
annotation|@
name|Context
name|HttpHeaders
name|headers
parameter_list|,
name|Form
name|formData
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
name|body
init|=
name|formData
operator|.
name|getFirst
argument_list|(
literal|"body"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|sendMessage
argument_list|(
name|headers
argument_list|,
name|body
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|seeOther
argument_list|(
operator|new
name|URI
argument_list|(
name|getHref
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|sendMessage (final HttpHeaders headers, final String body)
specifier|protected
name|void
name|sendMessage
parameter_list|(
specifier|final
name|HttpHeaders
name|headers
parameter_list|,
specifier|final
name|String
name|body
parameter_list|)
block|{
name|getTemplate
argument_list|()
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|in
init|=
name|exchange
operator|.
name|getIn
argument_list|()
decl_stmt|;
name|in
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
comment|// lets pass in all the HTTP headers
if|if
condition|(
name|headers
operator|!=
literal|null
condition|)
block|{
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestHeaders
init|=
name|headers
operator|.
name|getRequestHeaders
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|entries
init|=
name|requestHeaders
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|values
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
name|in
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|in
operator|.
name|setHeader
argument_list|(
name|key
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

