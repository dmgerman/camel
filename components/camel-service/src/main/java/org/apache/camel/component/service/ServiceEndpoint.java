begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.service
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|DelegateEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|DiscoverableService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|cloud
operator|.
name|DefaultServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_comment
comment|/**  * Represents an endpoint which is registered to a Service Registry such as Consul, Etcd.  */
end_comment

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|description
operator|=
literal|"Managed Service Endpoint"
argument_list|)
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.22.0"
argument_list|,
name|scheme
operator|=
literal|"service"
argument_list|,
name|syntax
operator|=
literal|"service:serviceName:delegateUri"
argument_list|,
name|consumerOnly
operator|=
literal|true
argument_list|,
name|title
operator|=
literal|"Service"
argument_list|,
name|lenientProperties
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"cloud"
argument_list|)
DECL|class|ServiceEndpoint
specifier|public
class|class
name|ServiceEndpoint
extends|extends
name|DefaultEndpoint
implements|implements
name|DelegateEndpoint
block|{
DECL|field|delegateEndpoint
specifier|private
specifier|final
name|Endpoint
name|delegateEndpoint
decl_stmt|;
DECL|field|serviceRegistry
specifier|private
specifier|final
name|ServiceRegistry
name|serviceRegistry
decl_stmt|;
DECL|field|serviceParameters
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceParameters
decl_stmt|;
DECL|field|serviceDefinition
specifier|private
specifier|final
name|ServiceDefinition
name|serviceDefinition
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|description
operator|=
literal|"The endpoint uri to expose as service"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|delegateUri
specifier|private
specifier|final
name|String
name|delegateUri
decl_stmt|;
DECL|method|ServiceEndpoint (String uri, ServiceComponent component, ServiceRegistry serviceRegistry, Map<String, String> serviceParameters, String delegateUri)
specifier|public
name|ServiceEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|ServiceComponent
name|component
parameter_list|,
name|ServiceRegistry
name|serviceRegistry
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceParameters
parameter_list|,
name|String
name|delegateUri
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceRegistry
operator|=
name|serviceRegistry
expr_stmt|;
name|this
operator|.
name|serviceParameters
operator|=
name|serviceParameters
expr_stmt|;
name|this
operator|.
name|delegateUri
operator|=
name|delegateUri
expr_stmt|;
name|this
operator|.
name|delegateEndpoint
operator|=
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|delegateUri
argument_list|)
expr_stmt|;
comment|// The service properties set on uri override parameter provided by a
comment|// an endpoint of type DiscoverableService.
name|this
operator|.
name|serviceDefinition
operator|=
name|computeServiceDefinition
argument_list|(
name|component
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|delegateEndpoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEndpoint ()
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|this
operator|.
name|delegateEndpoint
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The consumer endpoint to expose as a service"
argument_list|,
name|mask
operator|=
literal|true
argument_list|)
DECL|method|getDelegateEndpointUri ()
specifier|public
name|String
name|getDelegateEndpointUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|delegateEndpoint
operator|.
name|getEndpointUri
argument_list|()
return|;
block|}
DECL|method|getServiceDefinition ()
specifier|public
name|ServiceDefinition
name|getServiceDefinition
parameter_list|()
block|{
return|return
name|this
operator|.
name|serviceDefinition
return|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ServiceConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|,
name|serviceRegistry
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|computeServiceDefinition (CamelContext context, Endpoint delegateEndpoint)
specifier|private
name|ServiceDefinition
name|computeServiceDefinition
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|Endpoint
name|delegateEndpoint
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegateEndpoint
operator|instanceof
name|DiscoverableService
condition|)
block|{
name|parameters
operator|.
name|putAll
argument_list|(
operator|(
operator|(
name|DiscoverableService
operator|)
name|delegateEndpoint
operator|)
operator|.
name|getServiceProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|parameters
operator|.
name|putAll
argument_list|(
name|serviceParameters
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|computeIfAbsent
argument_list|(
name|ServiceDefinition
operator|.
name|SERVICE_META_ID
argument_list|,
name|k
lambda|->
name|context
operator|.
name|getUuidGenerator
argument_list|()
operator|.
name|generateUuid
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|DefaultServiceDefinition
operator|.
name|builder
argument_list|()
operator|.
name|from
argument_list|(
name|parameters
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

