begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|xml
operator|.
name|QNameMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|xml
operator|.
name|StaxReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|xml
operator|.
name|StaxWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * A<a href="http://camel.apache.org/data-format.html">data format</a>  * ({@link DataFormat}) using XStream to marshal to and from XML  *  * @version   */
end_comment

begin_class
DECL|class|XStreamDataFormat
specifier|public
class|class
name|XStreamDataFormat
extends|extends
name|AbstractXStreamWrapper
block|{
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
DECL|method|XStreamDataFormat ()
specifier|public
name|XStreamDataFormat
parameter_list|()
block|{     }
DECL|method|XStreamDataFormat (XStream xstream)
specifier|public
name|XStreamDataFormat
parameter_list|(
name|XStream
name|xstream
parameter_list|)
block|{
name|super
argument_list|(
name|xstream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDataFormatName ()
specifier|public
name|String
name|getDataFormatName
parameter_list|()
block|{
return|return
literal|"xstream"
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
annotation|@
name|Override
DECL|method|marshal (Exchange exchange, Object body, OutputStream stream)
specifier|public
name|void
name|marshal
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|marshal
argument_list|(
name|exchange
argument_list|,
name|body
argument_list|,
name|stream
argument_list|)
expr_stmt|;
if|if
condition|(
name|isContentTypeHeader
argument_list|()
condition|)
block|{
if|if
condition|(
name|exchange
operator|.
name|hasOut
argument_list|()
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|Exchange
operator|.
name|CONTENT_TYPE
argument_list|,
literal|"application/xml"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * A factory method which takes a collection of types to be annotated      */
annotation|@
name|Deprecated
DECL|method|processAnnotations (ClassResolver resolver, Iterable<Class<?>> types)
specifier|public
specifier|static
name|XStreamDataFormat
name|processAnnotations
parameter_list|(
name|ClassResolver
name|resolver
parameter_list|,
name|Iterable
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|types
parameter_list|)
block|{
name|XStreamDataFormat
name|answer
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|XStream
name|xstream
init|=
name|answer
operator|.
name|getXStream
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|types
control|)
block|{
name|xstream
operator|.
name|processAnnotations
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/**      * A factory method which takes a number of types to be annotated      */
annotation|@
name|Deprecated
DECL|method|processAnnotations (ClassResolver resolver, Class<?>... types)
specifier|public
specifier|static
name|XStreamDataFormat
name|processAnnotations
parameter_list|(
name|ClassResolver
name|resolver
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|types
parameter_list|)
block|{
name|XStreamDataFormat
name|answer
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|XStream
name|xstream
init|=
name|answer
operator|.
name|getXStream
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
range|:
name|types
control|)
block|{
name|xstream
operator|.
name|processAnnotations
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|// just make sure the exchange property can override the xmlstream encoding setting
DECL|method|updateCharactorEncodingInfo (Exchange exchange)
specifier|protected
name|void
name|updateCharactorEncodingInfo
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|exchange
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|)
operator|==
literal|null
operator|&&
name|encoding
operator|!=
literal|null
condition|)
block|{
name|exchange
operator|.
name|setProperty
argument_list|(
name|Exchange
operator|.
name|CHARSET_NAME
argument_list|,
name|IOHelper
operator|.
name|normalizeCharset
argument_list|(
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createHierarchicalStreamWriter (Exchange exchange, Object body, OutputStream stream)
specifier|protected
name|HierarchicalStreamWriter
name|createHierarchicalStreamWriter
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|body
parameter_list|,
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|updateCharactorEncodingInfo
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|getXstreamDriver
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getXstreamDriver
argument_list|()
operator|.
name|createWriter
argument_list|(
name|stream
argument_list|)
return|;
block|}
name|XMLStreamWriter
name|xmlWriter
init|=
name|getStaxConverter
argument_list|()
operator|.
name|createXMLStreamWriter
argument_list|(
name|stream
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StaxWriter
argument_list|(
operator|new
name|QNameMap
argument_list|()
argument_list|,
name|xmlWriter
argument_list|)
return|;
block|}
DECL|method|createHierarchicalStreamReader (Exchange exchange, InputStream stream)
specifier|protected
name|HierarchicalStreamReader
name|createHierarchicalStreamReader
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InputStream
name|stream
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|updateCharactorEncodingInfo
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|getXstreamDriver
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getXstreamDriver
argument_list|()
operator|.
name|createReader
argument_list|(
name|stream
argument_list|)
return|;
block|}
name|XMLStreamReader
name|xmlReader
init|=
name|getStaxConverter
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
name|stream
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
return|return
operator|new
name|StaxReader
argument_list|(
operator|new
name|QNameMap
argument_list|()
argument_list|,
name|xmlReader
argument_list|)
return|;
block|}
block|}
end_class

end_unit

