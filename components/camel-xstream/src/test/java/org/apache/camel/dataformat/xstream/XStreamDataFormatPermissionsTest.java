begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xstream
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xstream
package|;
end_package

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|security
operator|.
name|ForbiddenClassException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|XStreamDataFormatPermissionsTest
specifier|public
class|class
name|XStreamDataFormatPermissionsTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|XML_PURCHASE_ORDER
specifier|protected
specifier|static
specifier|final
name|String
name|XML_PURCHASE_ORDER
init|=
literal|"<org.apache.camel.dataformat.xstream.PurchaseOrder>"
operator|+
literal|"<name>foo</name>"
operator|+
literal|"<price>10.0</price>"
operator|+
literal|"<amount>1.0</amount>"
operator|+
literal|"</org.apache.camel.dataformat.xstream.PurchaseOrder>"
decl_stmt|;
DECL|field|XML_PURCHASE_ORDERS_LIST
specifier|protected
specifier|static
specifier|final
name|String
name|XML_PURCHASE_ORDERS_LIST
init|=
literal|"<list>"
operator|+
literal|"<org.apache.camel.dataformat.xstream.PurchaseOrder>"
operator|+
literal|"<name>foo</name>"
operator|+
literal|"<price>10.0</price>"
operator|+
literal|"<amount>1.0</amount>"
operator|+
literal|"</org.apache.camel.dataformat.xstream.PurchaseOrder>"
operator|+
literal|"<org.apache.camel.dataformat.xstream.PurchaseOrder>"
operator|+
literal|"<name>bar</name>"
operator|+
literal|"<price>9.0</price>"
operator|+
literal|"<amount>2.0</amount>"
operator|+
literal|"</org.apache.camel.dataformat.xstream.PurchaseOrder>"
operator|+
literal|"</list>"
decl_stmt|;
annotation|@
name|Test
DECL|method|testNone ()
specifier|public
name|void
name|testNone
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail to unmarshall"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenClassException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
DECL|method|testDeny ()
specifier|public
name|void
name|testDeny
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"-org.apache.camel.dataformat.xstream.PurchaseOrder"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail to unmarshall"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenClassException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
DECL|method|testAllow ()
specifier|public
name|void
name|testAllow
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"org.apache.camel.dataformat.xstream.PurchaseOrder"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|po
init|=
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|po
argument_list|)
expr_stmt|;
name|po
operator|=
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDERS_LIST
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|po
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllowAndDeny ()
specifier|public
name|void
name|testAllowAndDeny
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"org.apache.camel.dataformat.xstream.PurchaseOrder,-org.apache.camel.dataformat.xstream.*"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail to unmarshall"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenClassException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
DECL|method|testDenyAndAllowDeny ()
specifier|public
name|void
name|testDenyAndAllowDeny
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"-org.apache.camel.dataformat.xstream.*,org.apache.camel.dataformat.xstream.PurchaseOrder"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|po
init|=
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|po
argument_list|)
expr_stmt|;
name|po
operator|=
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDERS_LIST
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|po
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllowAny ()
specifier|public
name|void
name|testAllowAny
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|po
init|=
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|po
argument_list|)
expr_stmt|;
name|po
operator|=
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDERS_LIST
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|po
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllowAnyAndDeny ()
specifier|public
name|void
name|testAllowAnyAndDeny
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"*,-org.apache.camel.dataformat.xstream.PurchaseOrder"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail to unmarshall"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenClassException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
DECL|method|testDenyAny ()
specifier|public
name|void
name|testDenyAny
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"-*"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail to unmarshall"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenClassException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
DECL|method|testDenyAnyAndAllow ()
specifier|public
name|void
name|testDenyAnyAndAllow
parameter_list|()
block|{
name|XStreamDataFormat
name|xStreamDataFormat
init|=
operator|new
name|XStreamDataFormat
argument_list|()
decl_stmt|;
name|xStreamDataFormat
operator|.
name|setPermissions
argument_list|(
literal|"-*,org.apache.camel.dataformat.xstream.PurchaseOrder"
argument_list|)
expr_stmt|;
name|XStream
name|xStream
init|=
name|xStreamDataFormat
operator|.
name|createXStream
argument_list|(
name|context
operator|.
name|getClassResolver
argument_list|()
argument_list|,
name|context
operator|.
name|getApplicationContextClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|po
init|=
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDER
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|po
argument_list|)
expr_stmt|;
try|try
block|{
name|xStream
operator|.
name|fromXML
argument_list|(
name|XML_PURCHASE_ORDERS_LIST
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should fail to unmarshall"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForbiddenClassException
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
block|}
end_class

end_unit

