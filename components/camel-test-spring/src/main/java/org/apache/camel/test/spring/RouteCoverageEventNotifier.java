begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|CamelEvent
operator|.
name|CamelContextStoppingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|EventNotifierSupport
import|;
end_import

begin_class
DECL|class|RouteCoverageEventNotifier
specifier|public
class|class
name|RouteCoverageEventNotifier
extends|extends
name|EventNotifierSupport
block|{
DECL|field|testClassName
specifier|private
specifier|final
name|String
name|testClassName
decl_stmt|;
DECL|field|testMethodName
specifier|private
specifier|final
name|Function
name|testMethodName
decl_stmt|;
DECL|method|RouteCoverageEventNotifier (String testClassName, Function testMethodName)
specifier|public
name|RouteCoverageEventNotifier
parameter_list|(
name|String
name|testClassName
parameter_list|,
name|Function
name|testMethodName
parameter_list|)
block|{
name|this
operator|.
name|testClassName
operator|=
name|testClassName
expr_stmt|;
name|this
operator|.
name|testMethodName
operator|=
name|testMethodName
expr_stmt|;
name|setIgnoreCamelContextEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setIgnoreExchangeEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isEnabled (CamelEvent event)
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|CamelEvent
name|event
parameter_list|)
block|{
return|return
name|event
operator|instanceof
name|CamelContextStoppingEvent
return|;
block|}
annotation|@
name|Override
DECL|method|notify (CamelEvent event)
specifier|public
name|void
name|notify
parameter_list|(
name|CamelEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|(
operator|(
name|CamelContextStoppingEvent
operator|)
name|event
operator|)
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|String
name|testName
init|=
operator|(
name|String
operator|)
name|testMethodName
operator|.
name|apply
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|RouteCoverageDumper
operator|.
name|dumpRouteCoverage
argument_list|(
name|context
argument_list|,
name|testClassName
argument_list|,
name|testName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

