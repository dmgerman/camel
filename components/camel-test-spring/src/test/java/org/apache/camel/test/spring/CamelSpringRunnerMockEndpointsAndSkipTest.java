begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|seda
operator|.
name|SedaEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptSendToEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|MockEndpointsAndSkip
argument_list|(
literal|"{{mock.skip}}"
argument_list|)
DECL|class|CamelSpringRunnerMockEndpointsAndSkipTest
specifier|public
class|class
name|CamelSpringRunnerMockEndpointsAndSkipTest
extends|extends
name|CamelSpringRunnerPlainTest
block|{
annotation|@
name|EndpointInject
argument_list|(
name|value
operator|=
literal|"mock:seda:context2.seda"
argument_list|,
name|context
operator|=
literal|"camelContext2"
argument_list|)
DECL|field|mock
specifier|protected
name|MockEndpoint
name|mock
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|value
operator|=
literal|"seda:context2.seda"
argument_list|,
name|context
operator|=
literal|"camelContext2"
argument_list|)
DECL|field|original
specifier|private
name|InterceptSendToEndpoint
name|original
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Override
DECL|method|testPositive ()
specifier|public
name|void
name|testPositive
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|ServiceStatus
operator|.
name|Started
argument_list|,
name|camelContext
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ServiceStatus
operator|.
name|Started
argument_list|,
name|camelContext2
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|mockA
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"David"
argument_list|)
expr_stmt|;
name|mockB
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello David"
argument_list|)
expr_stmt|;
name|mock
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello David"
argument_list|)
expr_stmt|;
name|start
operator|.
name|sendBody
argument_list|(
literal|"David"
argument_list|)
expr_stmt|;
name|start2
operator|.
name|sendBody
argument_list|(
literal|"David"
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|camelContext
argument_list|)
expr_stmt|;
name|MockEndpoint
operator|.
name|assertIsSatisfied
argument_list|(
name|camelContext2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Original endpoint was invoked"
argument_list|,
operator|(
operator|(
name|SedaEndpoint
operator|)
name|original
operator|.
name|getOriginalEndpoint
argument_list|()
operator|)
operator|.
name|getExchanges
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

