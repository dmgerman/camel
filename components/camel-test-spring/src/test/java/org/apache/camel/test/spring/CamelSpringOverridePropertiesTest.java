begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.test.spring
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Produce
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|BootstrapWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|CamelSpringRunner
operator|.
name|class
argument_list|)
annotation|@
name|BootstrapWith
argument_list|(
name|CamelTestContextBootstrapper
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|()
comment|// Put here to prevent Spring context caching across tests and test methods since some tests inherit
comment|// from this test and therefore use the same Spring context.  Also because we want to reset the
comment|// Camel context and mock endpoints between test methods automatically.
annotation|@
name|DirtiesContext
argument_list|(
name|classMode
operator|=
name|DirtiesContext
operator|.
name|ClassMode
operator|.
name|AFTER_EACH_TEST_METHOD
argument_list|)
DECL|class|CamelSpringOverridePropertiesTest
specifier|public
class|class
name|CamelSpringOverridePropertiesTest
block|{
annotation|@
name|Produce
argument_list|(
literal|"direct:start"
argument_list|)
DECL|field|start
specifier|private
name|ProducerTemplate
name|start
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:a"
argument_list|)
DECL|field|mockA
specifier|private
name|MockEndpoint
name|mockA
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:test"
argument_list|)
DECL|field|mockTest
specifier|private
name|MockEndpoint
name|mockTest
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:foo"
argument_list|)
DECL|field|mockFoo
specifier|private
name|MockEndpoint
name|mockFoo
decl_stmt|;
annotation|@
name|UseOverridePropertiesWithPropertiesComponent
DECL|method|override ()
specifier|public
specifier|static
name|Properties
name|override
parameter_list|()
block|{
name|Properties
name|answer
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
literal|"cool.end"
argument_list|,
literal|"mock:foo"
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Test
DECL|method|testOverride ()
specifier|public
name|void
name|testOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|mockA
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Camel"
argument_list|)
expr_stmt|;
name|mockTest
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mockFoo
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"Hello Camel"
argument_list|)
expr_stmt|;
name|start
operator|.
name|sendBody
argument_list|(
literal|"Camel"
argument_list|)
expr_stmt|;
name|mockA
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockTest
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockFoo
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

