begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|EntityManagerHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionSynchronizationManager
import|;
end_import

begin_class
DECL|class|EntityManagers
specifier|public
specifier|final
class|class
name|EntityManagers
block|{
DECL|method|EntityManagers ()
specifier|private
name|EntityManagers
parameter_list|()
block|{     }
DECL|method|resolveEntityManager (EntityManagerFactory entityManagerFactory)
specifier|public
specifier|static
name|EntityManager
name|resolveEntityManager
parameter_list|(
name|EntityManagerFactory
name|entityManagerFactory
parameter_list|)
block|{
name|EntityManagerHolder
name|entityManagerHolder
init|=
operator|(
name|EntityManagerHolder
operator|)
name|TransactionSynchronizationManager
operator|.
name|getResource
argument_list|(
name|entityManagerFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityManagerHolder
operator|!=
literal|null
condition|)
block|{
return|return
name|entityManagerHolder
operator|.
name|getEntityManager
argument_list|()
return|;
block|}
return|return
name|entityManagerFactory
operator|.
name|createEntityManager
argument_list|()
return|;
block|}
DECL|method|closeNonTransactionalEntityManager (EntityManager entityManager)
specifier|public
specifier|static
name|void
name|closeNonTransactionalEntityManager
parameter_list|(
name|EntityManager
name|entityManager
parameter_list|)
block|{
name|boolean
name|isTransactional
init|=
name|TransactionSynchronizationManager
operator|.
name|hasResource
argument_list|(
name|entityManager
operator|.
name|getEntityManagerFactory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entityManager
operator|!=
literal|null
operator|&&
name|isTransactional
condition|)
block|{
name|entityManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

