begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|dao
operator|.
name|DataIntegrityViolationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|orm
operator|.
name|jpa
operator|.
name|JpaSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityExistsException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * A base {@link Processor} for working on<a  * href="http://activemq.apache.org/camel/bam.html">BAM</a> which a derived  * class would do the actual persistence such as the {@link JpaBamProcessor}  *  * @version $Revision$  */
end_comment

begin_class
DECL|class|BamProcessorSupport
specifier|public
specifier|abstract
class|class
name|BamProcessorSupport
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Processor
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BamProcessorSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|entityType
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|entityType
decl_stmt|;
DECL|field|primaryKeyType
specifier|private
name|Class
name|primaryKeyType
init|=
name|String
operator|.
name|class
decl_stmt|;
DECL|field|correlationKeyExpression
specifier|private
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|correlationKeyExpression
decl_stmt|;
DECL|field|transactionTemplate
specifier|private
name|TransactionTemplate
name|transactionTemplate
decl_stmt|;
DECL|field|maximumRetries
specifier|private
name|int
name|maximumRetries
init|=
literal|30
decl_stmt|;
DECL|method|getMaximumRetries ()
specifier|public
name|int
name|getMaximumRetries
parameter_list|()
block|{
return|return
name|maximumRetries
return|;
block|}
DECL|method|setMaximumRetries (int maximumRetries)
specifier|public
name|void
name|setMaximumRetries
parameter_list|(
name|int
name|maximumRetries
parameter_list|)
block|{
name|this
operator|.
name|maximumRetries
operator|=
name|maximumRetries
expr_stmt|;
block|}
DECL|method|BamProcessorSupport (TransactionTemplate transactionTemplate, Expression<Exchange> correlationKeyExpression)
specifier|protected
name|BamProcessorSupport
parameter_list|(
name|TransactionTemplate
name|transactionTemplate
parameter_list|,
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|correlationKeyExpression
parameter_list|)
block|{
name|this
operator|.
name|transactionTemplate
operator|=
name|transactionTemplate
expr_stmt|;
name|this
operator|.
name|correlationKeyExpression
operator|=
name|correlationKeyExpression
expr_stmt|;
name|Type
name|type
init|=
name|getClass
argument_list|()
operator|.
name|getGenericSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|parameterizedType
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|Type
index|[]
name|arguments
init|=
name|parameterizedType
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Type
name|argumentType
init|=
name|arguments
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|argumentType
operator|instanceof
name|Class
condition|)
block|{
name|this
operator|.
name|entityType
operator|=
operator|(
name|Class
argument_list|<
name|T
argument_list|>
operator|)
name|argumentType
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|entityType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not infer the entity type!"
argument_list|)
throw|;
block|}
block|}
DECL|method|BamProcessorSupport (TransactionTemplate transactionTemplate, Expression<Exchange> correlationKeyExpression, Class<T> entitytype)
specifier|protected
name|BamProcessorSupport
parameter_list|(
name|TransactionTemplate
name|transactionTemplate
parameter_list|,
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|correlationKeyExpression
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|entitytype
parameter_list|)
block|{
name|this
operator|.
name|transactionTemplate
operator|=
name|transactionTemplate
expr_stmt|;
name|this
operator|.
name|entityType
operator|=
name|entitytype
expr_stmt|;
name|this
operator|.
name|correlationKeyExpression
operator|=
name|correlationKeyExpression
expr_stmt|;
block|}
DECL|method|process (final Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|entity
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|entity
operator|==
literal|null
operator|&&
name|i
operator|<
name|maximumRetries
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retry attempt due to duplicate row: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|entity
operator|=
name|transactionTemplate
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallback
argument_list|()
block|{
specifier|public
name|Object
name|doInTransaction
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
try|try
block|{
name|Object
name|key
init|=
name|getCorrelationKey
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|T
name|entity
init|=
name|loadEntity
argument_list|(
name|exchange
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Correlation key: "
operator|+
name|key
operator|+
literal|" with entity: "
operator|+
name|entity
argument_list|)
expr_stmt|;
block|}
name|processEntity
argument_list|(
name|exchange
argument_list|,
name|entity
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
catch|catch
parameter_list|(
name|JpaSystemException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Likely exception is due to duplicate row in concurrent setting: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt to insert duplicate row due to concurrency issue, so retrying: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
name|retryDueToDuplicate
argument_list|(
name|status
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DataIntegrityViolationException
name|e
parameter_list|)
block|{
name|Throwable
name|throwable
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|throwable
operator|instanceof
name|EntityExistsException
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt to insert duplicate row due to concurrency issue, so retrying: "
operator|+
name|throwable
argument_list|)
expr_stmt|;
return|return
name|retryDueToDuplicate
argument_list|(
name|status
argument_list|)
return|;
block|}
return|return
name|onError
argument_list|(
name|status
argument_list|,
name|throwable
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
name|onError
argument_list|(
name|status
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
DECL|method|getCorrelationKeyExpression ()
specifier|public
name|Expression
argument_list|<
name|Exchange
argument_list|>
name|getCorrelationKeyExpression
parameter_list|()
block|{
return|return
name|correlationKeyExpression
return|;
block|}
DECL|method|getEntityType ()
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|getEntityType
parameter_list|()
block|{
return|return
name|entityType
return|;
block|}
comment|// Implemenation methods
comment|// -----------------------------------------------------------------------
DECL|method|processEntity (Exchange exchange, T entity)
specifier|protected
specifier|abstract
name|void
name|processEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|T
name|entity
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|loadEntity (Exchange exchange, Object key)
specifier|protected
specifier|abstract
name|T
name|loadEntity
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|Object
name|key
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|getKeyType ()
specifier|protected
specifier|abstract
name|Class
name|getKeyType
parameter_list|()
function_decl|;
DECL|method|getCorrelationKey (Exchange exchange)
specifier|protected
name|Object
name|getCorrelationKey
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|NoCorrelationKeyException
block|{
name|Object
name|value
init|=
name|correlationKeyExpression
operator|.
name|evaluate
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Class
name|keyType
init|=
name|getKeyType
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyType
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|ExchangeHelper
operator|.
name|convertToType
argument_list|(
name|exchange
argument_list|,
name|keyType
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoCorrelationKeyException
argument_list|(
name|this
argument_list|,
name|exchange
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
DECL|method|retryDueToDuplicate (TransactionStatus status)
specifier|protected
name|Object
name|retryDueToDuplicate
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
name|status
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|onError (TransactionStatus status, Throwable e)
specifier|protected
name|Object
name|onError
parameter_list|(
name|TransactionStatus
name|status
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|status
operator|.
name|setRollbackOnly
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

