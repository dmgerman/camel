begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.bam.processor
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|model
operator|.
name|ActivityState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|model
operator|.
name|ProcessInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|rules
operator|.
name|ActivityRules
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|bam
operator|.
name|rules
operator|.
name|ProcessRules
import|;
end_import

begin_comment
comment|/**  * @version   */
end_comment

begin_class
DECL|class|ProcessContext
specifier|public
class|class
name|ProcessContext
block|{
DECL|field|exchange
specifier|private
name|Exchange
name|exchange
decl_stmt|;
DECL|field|processRules
specifier|private
name|ProcessRules
name|processRules
decl_stmt|;
DECL|field|activityRules
specifier|private
name|ActivityRules
name|activityRules
decl_stmt|;
DECL|field|processInstance
specifier|private
name|ProcessInstance
name|processInstance
decl_stmt|;
DECL|field|activityState
specifier|private
name|ActivityState
name|activityState
decl_stmt|;
DECL|method|ProcessContext (Exchange exchange, ActivityRules activityRules, ActivityState activityState)
specifier|public
name|ProcessContext
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|ActivityRules
name|activityRules
parameter_list|,
name|ActivityState
name|activityState
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|activityRules
operator|=
name|activityRules
expr_stmt|;
name|this
operator|.
name|activityState
operator|=
name|activityState
expr_stmt|;
name|this
operator|.
name|processRules
operator|=
name|activityRules
operator|.
name|getProcessRules
argument_list|()
expr_stmt|;
name|this
operator|.
name|processInstance
operator|=
name|activityState
operator|.
name|getProcessInstance
argument_list|()
expr_stmt|;
block|}
DECL|method|getActivity ()
specifier|public
name|ActivityRules
name|getActivity
parameter_list|()
block|{
return|return
name|activityRules
return|;
block|}
DECL|method|setActivity (ActivityRules activityRules)
specifier|public
name|void
name|setActivity
parameter_list|(
name|ActivityRules
name|activityRules
parameter_list|)
block|{
name|this
operator|.
name|activityRules
operator|=
name|activityRules
expr_stmt|;
block|}
DECL|method|getActivityState ()
specifier|public
name|ActivityState
name|getActivityState
parameter_list|()
block|{
return|return
name|activityState
return|;
block|}
DECL|method|setActivityState (ActivityState activityState)
specifier|public
name|void
name|setActivityState
parameter_list|(
name|ActivityState
name|activityState
parameter_list|)
block|{
name|this
operator|.
name|activityState
operator|=
name|activityState
expr_stmt|;
block|}
DECL|method|getExchange ()
specifier|public
name|Exchange
name|getExchange
parameter_list|()
block|{
return|return
name|exchange
return|;
block|}
DECL|method|setExchange (Exchange exchange)
specifier|public
name|void
name|setExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
block|}
DECL|method|getProcessDefinition ()
specifier|public
name|ProcessRules
name|getProcessDefinition
parameter_list|()
block|{
return|return
name|processRules
return|;
block|}
DECL|method|setProcessDefinition (ProcessRules processRules)
specifier|public
name|void
name|setProcessDefinition
parameter_list|(
name|ProcessRules
name|processRules
parameter_list|)
block|{
name|this
operator|.
name|processRules
operator|=
name|processRules
expr_stmt|;
block|}
DECL|method|getProcessInstance ()
specifier|public
name|ProcessInstance
name|getProcessInstance
parameter_list|()
block|{
return|return
name|processInstance
return|;
block|}
DECL|method|setProcessInstance (ProcessInstance processInstance)
specifier|public
name|void
name|setProcessInstance
parameter_list|(
name|ProcessInstance
name|processInstance
parameter_list|)
block|{
name|this
operator|.
name|processInstance
operator|=
name|processInstance
expr_stmt|;
block|}
DECL|method|getActivityState (ActivityRules activityRules)
specifier|public
name|ActivityState
name|getActivityState
parameter_list|(
name|ActivityRules
name|activityRules
parameter_list|)
block|{
return|return
name|getProcessInstance
argument_list|()
operator|.
name|getActivityState
argument_list|(
name|activityRules
argument_list|)
return|;
block|}
comment|/**      * Called when the activity is started which may end up creating some timers      * for dependent actions      */
DECL|method|onStarted (ActivityState activityState)
specifier|public
name|void
name|onStarted
parameter_list|(
name|ActivityState
name|activityState
parameter_list|)
block|{
comment|// noop
block|}
comment|/**      * Called when the activity is completed which may end up creating some timers      * for dependent actions      */
DECL|method|onCompleted (ActivityState activityState)
specifier|public
name|void
name|onCompleted
parameter_list|(
name|ActivityState
name|activityState
parameter_list|)
block|{
comment|// noop
block|}
block|}
end_class

end_unit

