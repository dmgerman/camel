begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|processor
operator|.
name|query
operator|.
name|HavingQueryBuilderStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCacheContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|configuration
operator|.
name|cache
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|configuration
operator|.
name|cache
operator|.
name|ConfigurationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|manager
operator|.
name|DefaultCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_class
DECL|class|InfinispanEmbeddedQueryTest
specifier|public
class|class
name|InfinispanEmbeddedQueryTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|basicCacheContainer
specifier|protected
name|BasicCacheContainer
name|basicCacheContainer
decl_stmt|;
DECL|field|queryBuilderStrategy
specifier|protected
name|HavingQueryBuilderStrategy
name|queryBuilderStrategy
init|=
operator|new
name|HavingQueryBuilderStrategy
argument_list|(
name|Book
operator|.
name|class
argument_list|,
literal|"title"
argument_list|,
literal|"Camel"
argument_list|)
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|infinispanConfiguration
init|=
operator|new
name|ConfigurationBuilder
argument_list|()
operator|.
name|indexing
argument_list|()
operator|.
name|enable
argument_list|()
operator|.
name|indexLocalOnly
argument_list|(
literal|true
argument_list|)
operator|.
name|addProperty
argument_list|(
literal|"default.directory_provider"
argument_list|,
literal|"ram"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|basicCacheContainer
operator|=
operator|new
name|DefaultCacheManager
argument_list|(
name|infinispanConfiguration
argument_list|)
expr_stmt|;
name|basicCacheContainer
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|basicCacheContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"cacheContainer"
argument_list|,
name|basicCacheContainer
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"queryBuilderStrategy"
argument_list|,
name|queryBuilderStrategy
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
DECL|method|currentCache ()
specifier|protected
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|currentCache
parameter_list|()
block|{
return|return
name|basicCacheContainer
operator|.
name|getCache
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|findsCacheEntryBasedOnTheValue ()
specifier|public
name|void
name|findsCacheEntryBasedOnTheValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Book
name|camelBook
init|=
operator|new
name|Book
argument_list|(
literal|"1"
argument_list|,
literal|"Camel"
argument_list|,
literal|"123"
argument_list|)
decl_stmt|;
name|Book
name|activeMQBook
init|=
operator|new
name|Book
argument_list|(
literal|"2"
argument_list|,
literal|"ActiveMQ"
argument_list|,
literal|"124"
argument_list|)
decl_stmt|;
name|currentCache
argument_list|()
operator|.
name|put
argument_list|(
name|camelBook
operator|.
name|getId
argument_list|()
argument_list|,
name|camelBook
argument_list|)
expr_stmt|;
name|currentCache
argument_list|()
operator|.
name|put
argument_list|(
name|activeMQBook
operator|.
name|getId
argument_list|()
argument_list|,
name|activeMQBook
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanConstants
operator|.
name|QUERY
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Book
argument_list|>
name|result
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|RESULT
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|camelBook
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"infinispan://localhost?cacheContainer=#cacheContainer&queryBuilderStrategy=#queryBuilderStrategy"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

