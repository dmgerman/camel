begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|search
operator|.
name|annotations
operator|.
name|Analyze
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|search
operator|.
name|annotations
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|search
operator|.
name|annotations
operator|.
name|Indexed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|search
operator|.
name|annotations
operator|.
name|Store
import|;
end_import

begin_class
annotation|@
name|Indexed
DECL|class|Book
specifier|public
class|class
name|Book
implements|implements
name|Serializable
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|title
specifier|private
name|String
name|title
decl_stmt|;
DECL|field|isbn
specifier|private
name|String
name|isbn
decl_stmt|;
DECL|method|Book ()
specifier|public
name|Book
parameter_list|()
block|{     }
DECL|method|Book (String id, String title, String isbn)
specifier|public
name|Book
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|isbn
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
name|this
operator|.
name|isbn
operator|=
name|isbn
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (String id)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Field
argument_list|(
name|store
operator|=
name|Store
operator|.
name|YES
argument_list|,
name|analyze
operator|=
name|Analyze
operator|.
name|NO
argument_list|)
DECL|method|getTitle ()
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|title
return|;
block|}
DECL|method|setTitle (String title)
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|this
operator|.
name|title
operator|=
name|title
expr_stmt|;
block|}
DECL|method|getIsbn ()
specifier|public
name|String
name|getIsbn
parameter_list|()
block|{
return|return
name|isbn
return|;
block|}
DECL|method|setIsbn (String isbn)
specifier|public
name|void
name|setIsbn
parameter_list|(
name|String
name|isbn
parameter_list|)
block|{
name|this
operator|.
name|isbn
operator|=
name|isbn
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Book
name|book
init|=
operator|(
name|Book
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|?
operator|!
name|id
operator|.
name|equals
argument_list|(
name|book
operator|.
name|id
argument_list|)
else|:
name|book
operator|.
name|id
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|isbn
operator|!=
literal|null
condition|?
operator|!
name|isbn
operator|.
name|equals
argument_list|(
name|book
operator|.
name|isbn
argument_list|)
else|:
name|book
operator|.
name|isbn
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|title
operator|!=
literal|null
condition|?
operator|!
name|title
operator|.
name|equals
argument_list|(
name|book
operator|.
name|title
argument_list|)
else|:
name|book
operator|.
name|title
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|id
operator|!=
literal|null
condition|?
name|id
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|title
operator|!=
literal|null
condition|?
name|title
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|isbn
operator|!=
literal|null
condition|?
name|isbn
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

