begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan.policy
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCacheContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|InfinispanRoutePolicyTestBase
specifier|abstract
class|class
name|InfinispanRoutePolicyTestBase
block|{
DECL|field|CACHE_NAME
specifier|private
specifier|final
specifier|static
name|String
name|CACHE_NAME
init|=
literal|"camel-route-policy"
decl_stmt|;
DECL|field|CACHE_KEY
specifier|private
specifier|final
specifier|static
name|String
name|CACHE_KEY
init|=
literal|"route-policy"
decl_stmt|;
DECL|method|createCacheManager ()
specifier|protected
specifier|abstract
name|BasicCacheContainer
name|createCacheManager
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|// *******************************************
comment|//
comment|// *******************************************
annotation|@
name|Test
DECL|method|testLeadership ()
specifier|public
name|void
name|testLeadership
parameter_list|()
throws|throws
name|Exception
block|{
name|BasicCacheContainer
name|cacheManager
init|=
name|createCacheManager
argument_list|()
decl_stmt|;
name|InfinispanRoutePolicy
name|policy1
init|=
name|InfinispanRoutePolicy
operator|.
name|withManager
argument_list|(
name|cacheManager
argument_list|)
decl_stmt|;
name|policy1
operator|.
name|setLockMapName
argument_list|(
name|CACHE_NAME
argument_list|)
expr_stmt|;
name|policy1
operator|.
name|setLockKey
argument_list|(
name|CACHE_KEY
argument_list|)
expr_stmt|;
name|policy1
operator|.
name|setLockValue
argument_list|(
literal|"route1"
argument_list|)
expr_stmt|;
name|InfinispanRoutePolicy
name|policy2
init|=
name|InfinispanRoutePolicy
operator|.
name|withManager
argument_list|(
name|cacheManager
argument_list|)
decl_stmt|;
name|policy2
operator|.
name|setLockMapName
argument_list|(
name|CACHE_NAME
argument_list|)
expr_stmt|;
name|policy2
operator|.
name|setLockKey
argument_list|(
name|CACHE_KEY
argument_list|)
expr_stmt|;
name|policy2
operator|.
name|setLockValue
argument_list|(
literal|"route2"
argument_list|)
expr_stmt|;
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|.
name|addRouteDefinition
argument_list|(
name|RouteDefinition
operator|.
name|fromUri
argument_list|(
literal|"direct:r1"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy1
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:p1"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|&&
operator|!
name|policy1
operator|.
name|isLeader
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|addRouteDefinition
argument_list|(
name|RouteDefinition
operator|.
name|fromUri
argument_list|(
literal|"direct:r2"
argument_list|)
operator|.
name|routePolicy
argument_list|(
name|policy2
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:p2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|policy1
operator|.
name|isLeader
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|policy2
operator|.
name|isLeader
argument_list|()
argument_list|)
expr_stmt|;
name|policy1
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|&&
operator|!
name|policy2
operator|.
name|isLeader
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|policy1
operator|.
name|isLeader
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|policy2
operator|.
name|isLeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ServiceHelper
operator|.
name|stopService
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheManager
operator|!=
literal|null
condition|)
block|{
name|cacheManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

