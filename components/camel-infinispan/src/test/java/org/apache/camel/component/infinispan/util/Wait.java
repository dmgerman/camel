begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|Wait
specifier|public
specifier|final
class|class
name|Wait
block|{
DECL|method|Wait ()
specifier|private
name|Wait
parameter_list|()
block|{     }
DECL|method|waitFor (Condition ec, long timeout)
specifier|public
specifier|static
name|void
name|waitFor
parameter_list|(
name|Condition
name|ec
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|waitFor
argument_list|(
name|ec
argument_list|,
name|timeout
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param ec Condition that has to be met after the timeout      * @param timeout Overall timeout - how long to wait for the condition      * @param loops How many times to check the condition before the timeout expires.      */
DECL|method|waitFor (Condition ec, long timeout, int loops)
specifier|public
specifier|static
name|void
name|waitFor
parameter_list|(
name|Condition
name|ec
parameter_list|,
name|long
name|timeout
parameter_list|,
name|int
name|loops
parameter_list|)
block|{
if|if
condition|(
name|loops
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Number of loops must be positive"
argument_list|)
throw|;
block|}
name|long
name|sleepDuration
init|=
name|timeout
operator|/
name|loops
decl_stmt|;
if|if
condition|(
name|sleepDuration
operator|==
literal|0
condition|)
block|{
name|sleepDuration
operator|=
literal|1
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loops
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ec
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepDuration
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"The condition was not satisfied after "
operator|+
name|timeout
operator|+
literal|" ms"
argument_list|,
name|ec
operator|.
name|isSatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

