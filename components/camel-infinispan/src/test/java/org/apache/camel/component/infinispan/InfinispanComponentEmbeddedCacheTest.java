begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|InfinispanComponentEmbeddedCacheTest
specifier|public
class|class
name|InfinispanComponentEmbeddedCacheTest
extends|extends
name|InfinispanTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:embedded"
argument_list|)
DECL|field|mockEmbedded
specifier|private
name|MockEndpoint
name|mockEmbedded
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:file"
argument_list|)
DECL|field|mockFile
specifier|private
name|MockEndpoint
name|mockFile
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
literal|"mock:external"
argument_list|)
DECL|field|mockExternal
specifier|private
name|MockEndpoint
name|mockExternal
decl_stmt|;
annotation|@
name|Test
DECL|method|sendAndRecieveToEmbededCache ()
specifier|public
name|void
name|sendAndRecieveToEmbededCache
parameter_list|()
throws|throws
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|fluentTemplate
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:embedded"
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|,
literal|"key:"
operator|+
name|i
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|,
literal|"Hey Camel!"
operator|+
name|i
argument_list|)
operator|.
name|send
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|fluentTemplate
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:file"
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|,
literal|"key:"
operator|+
name|i
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|,
literal|"Hey Infinispan!"
operator|+
name|i
argument_list|)
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|0
condition|)
block|{
name|namedCache
argument_list|(
literal|"test"
argument_list|)
operator|.
name|put
argument_list|(
literal|"key:"
operator|+
name|i
argument_list|,
literal|"Hey cache!"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|mockEmbedded
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|mockFile
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
name|mockExternal
operator|.
name|expectedBodiesReceived
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|fluentTemplate
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:embedded-get"
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanConstants
operator|.
name|RESULT_HEADER
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanOperation
operator|.
name|SIZE
argument_list|)
operator|.
name|send
argument_list|()
expr_stmt|;
name|fluentTemplate
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:file-get"
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanConstants
operator|.
name|RESULT_HEADER
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanOperation
operator|.
name|SIZE
argument_list|)
operator|.
name|send
argument_list|()
expr_stmt|;
name|fluentTemplate
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:external"
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanConstants
operator|.
name|RESULT_HEADER
argument_list|)
operator|.
name|withHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanOperation
operator|.
name|SIZE
argument_list|)
operator|.
name|send
argument_list|()
expr_stmt|;
name|mockEmbedded
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockFile
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockExternal
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
block|{
comment|// random order of routes with different endpoints tests are needed for checking of proper containerCache initialization
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:embedded"
argument_list|)
operator|.
name|to
argument_list|(
literal|"infinispan:test"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:file"
argument_list|)
operator|.
name|to
argument_list|(
literal|"infinispan:test?configurationUri=cache-configuration.xml"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:external"
argument_list|)
operator|.
name|to
argument_list|(
literal|"infinispan:test?cacheContainer=#cacheContainer"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:external"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:file-get"
argument_list|)
operator|.
name|to
argument_list|(
literal|"infinispan:test?configurationUri=cache-configuration.xml&operation=GET"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:file"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:embedded-get"
argument_list|)
operator|.
name|to
argument_list|(
literal|"infinispan:test?operation=GET"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:embedded"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

