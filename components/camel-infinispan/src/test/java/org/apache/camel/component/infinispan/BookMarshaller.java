begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|protostream
operator|.
name|MessageMarshaller
import|;
end_import

begin_class
DECL|class|BookMarshaller
specifier|public
class|class
name|BookMarshaller
implements|implements
name|MessageMarshaller
argument_list|<
name|Book
argument_list|>
block|{
annotation|@
name|Override
DECL|method|getTypeName ()
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"org.apache.camel.component.infinispan.Book"
return|;
block|}
annotation|@
name|Override
DECL|method|getJavaClass ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Book
argument_list|>
name|getJavaClass
parameter_list|()
block|{
return|return
name|Book
operator|.
name|class
return|;
block|}
annotation|@
name|Override
DECL|method|readFrom (ProtoStreamReader reader)
specifier|public
name|Book
name|readFrom
parameter_list|(
name|ProtoStreamReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|reader
operator|.
name|readString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|title
init|=
name|reader
operator|.
name|readString
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|String
name|isbn
init|=
name|reader
operator|.
name|readString
argument_list|(
literal|"isbn"
argument_list|)
decl_stmt|;
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|book
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|book
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|book
operator|.
name|setIsbn
argument_list|(
name|isbn
argument_list|)
expr_stmt|;
return|return
name|book
return|;
block|}
annotation|@
name|Override
DECL|method|writeTo (ProtoStreamWriter writer, Book book)
specifier|public
name|void
name|writeTo
parameter_list|(
name|ProtoStreamWriter
name|writer
parameter_list|,
name|Book
name|book
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeString
argument_list|(
literal|"id"
argument_list|,
name|book
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeString
argument_list|(
literal|"title"
argument_list|,
name|book
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeString
argument_list|(
literal|"isbn"
argument_list|,
name|book
operator|.
name|getIsbn
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

