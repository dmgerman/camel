begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|processor
operator|.
name|query
operator|.
name|HavingQueryBuilderStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|JndiRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|RemoteCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|configuration
operator|.
name|ConfigurationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|marshall
operator|.
name|ProtoStreamMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|util
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|protostream
operator|.
name|SerializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_class
annotation|@
name|Ignore
argument_list|(
name|value
operator|=
literal|"Run with standalone Infinispan server that has indexing enabled. "
operator|+
literal|"Also you need jboss-client.jar on the classpath to register book.protobin over JMX"
argument_list|)
DECL|class|InfinispanRemoteQueryTest
specifier|public
class|class
name|InfinispanRemoteQueryTest
extends|extends
name|CamelTestSupport
block|{
DECL|field|BOOK_PROTOBIN
specifier|public
specifier|static
specifier|final
name|String
name|BOOK_PROTOBIN
init|=
literal|"/book.protobin"
decl_stmt|;
DECL|field|SERVER_URL
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_URL
init|=
literal|"127.0.0.1"
decl_stmt|;
DECL|field|queryBuilderStrategy
specifier|protected
name|HavingQueryBuilderStrategy
name|queryBuilderStrategy
decl_stmt|;
DECL|field|cacheContainer
specifier|protected
name|RemoteCacheManager
name|cacheContainer
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|ConfigurationBuilder
argument_list|()
operator|.
name|addServers
argument_list|(
name|SERVER_URL
argument_list|)
operator|.
name|marshaller
argument_list|(
operator|new
name|ProtoStreamMarshaller
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|cacheContainer
operator|=
operator|new
name|RemoteCacheManager
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|queryBuilderStrategy
operator|=
operator|new
name|HavingQueryBuilderStrategy
argument_list|(
name|Book
operator|.
name|class
argument_list|,
literal|"title"
argument_list|,
literal|"Camel"
argument_list|)
expr_stmt|;
name|SerializationContext
name|srcCtx
init|=
name|ProtoStreamMarshaller
operator|.
name|getSerializationContext
argument_list|(
name|cacheContainer
argument_list|)
decl_stmt|;
name|srcCtx
operator|.
name|registerProtofile
argument_list|(
name|BOOK_PROTOBIN
argument_list|)
expr_stmt|;
name|srcCtx
operator|.
name|registerMarshaller
argument_list|(
name|Book
operator|.
name|class
argument_list|,
operator|new
name|BookMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|updateServerSchema
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRegistry ()
specifier|protected
name|JndiRegistry
name|createRegistry
parameter_list|()
throws|throws
name|Exception
block|{
name|JndiRegistry
name|registry
init|=
name|super
operator|.
name|createRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"cacheContainer"
argument_list|,
name|cacheContainer
argument_list|)
expr_stmt|;
name|registry
operator|.
name|bind
argument_list|(
literal|"queryBuilderStrategy"
argument_list|,
name|queryBuilderStrategy
argument_list|)
expr_stmt|;
return|return
name|registry
return|;
block|}
annotation|@
name|Test
DECL|method|findsCacheEntryBasedOnTheValue ()
specifier|public
name|void
name|findsCacheEntryBasedOnTheValue
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Book
name|camelBook
init|=
operator|new
name|Book
argument_list|(
literal|"1"
argument_list|,
literal|"Camel"
argument_list|,
literal|"123"
argument_list|)
decl_stmt|;
specifier|final
name|Book
name|activeMQBook
init|=
operator|new
name|Book
argument_list|(
literal|"2"
argument_list|,
literal|"ActiveMQ"
argument_list|,
literal|"124"
argument_list|)
decl_stmt|;
name|Exchange
name|request
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|,
name|camelBook
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|,
name|camelBook
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|,
name|activeMQBook
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|,
name|activeMQBook
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|request
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|InfinispanConstants
operator|.
name|QUERY
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Book
argument_list|>
name|result
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|RESULT
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|exchange
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|is
argument_list|(
name|camelBook
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"infinispan://localhost?cacheContainer=#cacheContainer&queryBuilderStrategy=#queryBuilderStrategy"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|updateServerSchema ()
specifier|private
name|void
name|updateServerSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXServiceURL
name|serviceURL
init|=
operator|new
name|JMXServiceURL
argument_list|(
literal|"service:jmx:remoting-jmx://"
operator|+
name|SERVER_URL
operator|+
literal|":"
operator|+
literal|"9999"
argument_list|)
decl_stmt|;
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|serviceURL
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|mBeanServerConnection
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|byte
index|[]
name|descriptor
init|=
name|readClasspathResource
argument_list|(
name|BOOK_PROTOBIN
argument_list|)
decl_stmt|;
name|ObjectName
name|objName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"jboss.infinispan:type=RemoteQuery,name=\"local\",component=ProtobufMetadataManager"
argument_list|)
decl_stmt|;
name|mBeanServerConnection
operator|.
name|invoke
argument_list|(
name|objName
argument_list|,
literal|"registerProtofile"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|descriptor
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|byte
index|[]
operator|.
expr|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|readClasspathResource (String classPathResource)
specifier|private
name|byte
index|[]
name|readClasspathResource
parameter_list|(
name|String
name|classPathResource
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|classPathResource
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Util
operator|.
name|readStream
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

