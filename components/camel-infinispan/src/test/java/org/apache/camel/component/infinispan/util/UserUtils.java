begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|protostream
operator|.
name|sampledomain
operator|.
name|User
import|;
end_import

begin_class
DECL|class|UserUtils
specifier|public
specifier|final
class|class
name|UserUtils
block|{
DECL|field|USERS
specifier|public
specifier|static
specifier|final
name|User
index|[]
name|USERS
init|=
operator|new
name|User
index|[]
block|{
name|createUser
argument_list|(
literal|"nameA"
argument_list|,
literal|"surnameA"
argument_list|)
block|,
name|createUser
argument_list|(
literal|"nameA"
argument_list|,
literal|"surnameB"
argument_list|)
block|,
name|createUser
argument_list|(
literal|"nameB"
argument_list|,
literal|"surnameB"
argument_list|)
block|}
decl_stmt|;
DECL|field|CQ_USERS
specifier|public
specifier|static
specifier|final
name|User
index|[]
name|CQ_USERS
init|=
operator|new
name|User
index|[]
block|{
name|createUser
argument_list|(
literal|"CQ01"
argument_list|,
literal|"surname01"
argument_list|)
block|,
name|createUser
argument_list|(
literal|"CQ02"
argument_list|,
literal|"surname01"
argument_list|)
block|,
name|createUser
argument_list|(
literal|"NQ03"
argument_list|,
literal|"surname03"
argument_list|)
block|,
name|createUser
argument_list|(
literal|"NQ04"
argument_list|,
literal|"surname04"
argument_list|)
block|}
decl_stmt|;
DECL|method|UserUtils ()
specifier|private
name|UserUtils
parameter_list|()
block|{     }
DECL|method|createKey (User user)
specifier|public
specifier|static
name|String
name|createKey
parameter_list|(
name|User
name|user
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s+%s"
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|,
name|user
operator|.
name|getSurname
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createUser (String name, String surname)
specifier|public
specifier|static
name|User
name|createUser
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|surname
parameter_list|)
block|{
name|User
name|user
init|=
operator|new
name|User
argument_list|()
decl_stmt|;
name|user
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|user
operator|.
name|setSurname
argument_list|(
name|surname
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
DECL|method|eq (String str1, String str2)
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
if|if
condition|(
name|str1
operator|==
literal|null
condition|)
block|{
return|return
name|str2
operator|==
literal|null
return|;
block|}
else|else
block|{
return|return
name|str1
operator|.
name|equals
argument_list|(
name|str2
argument_list|)
return|;
block|}
block|}
DECL|method|eq (User user, String name, String surname)
specifier|public
specifier|static
name|boolean
name|eq
parameter_list|(
name|User
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|surname
parameter_list|)
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|user
operator|.
name|getSurname
argument_list|()
argument_list|,
name|surname
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|hasUser (List<User> users, String name, String surname)
specifier|public
specifier|static
name|boolean
name|hasUser
parameter_list|(
name|List
argument_list|<
name|User
argument_list|>
name|users
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|surname
parameter_list|)
block|{
if|if
condition|(
name|users
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|user
argument_list|,
name|name
argument_list|,
name|surname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

