begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|distribution
operator|.
name|MagicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|test
operator|.
name|fwk
operator|.
name|TestResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|InfinispanClusteredConsumerTest
specifier|public
class|class
name|InfinispanClusteredConsumerTest
extends|extends
name|InfinispanClusterTestSupport
block|{
DECL|field|WAIT_TIMEOUT
specifier|private
specifier|static
specifier|final
name|long
name|WAIT_TIMEOUT
init|=
literal|5000
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:resultCreated"
argument_list|)
DECL|field|mockResultCreatedEvents
specifier|private
name|MockEndpoint
name|mockResultCreatedEvents
decl_stmt|;
annotation|@
name|EndpointInject
argument_list|(
name|uri
operator|=
literal|"mock:resultExpired"
argument_list|)
DECL|field|mockResultExpiredEvents
specifier|private
name|MockEndpoint
name|mockResultExpiredEvents
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass ()
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
name|TestResourceTracker
operator|.
name|testStarted
argument_list|(
name|InfinispanClusteredConsumerTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass ()
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|TestResourceTracker
operator|.
name|testFinished
argument_list|(
name|InfinispanClusteredConsumerTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|consumerReceivedPostEntryCreatedEventNotifications ()
specifier|public
name|void
name|consumerReceivedPostEntryCreatedEventNotifications
parameter_list|()
throws|throws
name|Exception
block|{
name|MagicKey
name|key
init|=
operator|new
name|MagicKey
argument_list|(
name|defaultCache
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|mockResultCreatedEvents
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|EVENT_TYPE
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"CACHE_ENTRY_CREATED"
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|IS_PRE
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|CACHE_NAME
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|defaultCache
argument_list|(
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|consumerReceivedExpirationEventNotifications ()
specifier|public
name|void
name|consumerReceivedExpirationEventNotifications
parameter_list|()
throws|throws
name|Exception
block|{
name|MagicKey
name|key
init|=
operator|new
name|MagicKey
argument_list|(
name|defaultCache
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|mockResultCreatedEvents
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockResultExpiredEvents
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|EVENT_TYPE
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"CACHE_ENTRY_CREATED"
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|IS_PRE
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|CACHE_NAME
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mockResultExpiredEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|EVENT_TYPE
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|"CACHE_ENTRY_EXPIRED"
argument_list|)
expr_stmt|;
name|mockResultExpiredEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|IS_PRE
argument_list|)
operator|.
name|isEqualTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mockResultExpiredEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|CACHE_NAME
argument_list|)
operator|.
name|isNotNull
argument_list|()
expr_stmt|;
name|mockResultExpiredEvents
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|outHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|injectTimeService
argument_list|()
expr_stmt|;
name|defaultCache
argument_list|(
literal|1
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
literal|"value"
argument_list|,
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|ts0
operator|.
name|advance
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
name|ts1
operator|.
name|advance
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|defaultCache
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|mockResultCreatedEvents
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockResultExpiredEvents
operator|.
name|assertIsSatisfied
argument_list|(
name|WAIT_TIMEOUT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"infinispan://localhost?cacheContainer=#cacheContainer&clustered=true&eventTypes=CACHE_ENTRY_CREATED"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultCreated"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"infinispan://localhost?cacheContainer=#cacheContainer&clustered=true&eventTypes=CACHE_ENTRY_EXPIRED"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:resultExpired"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

