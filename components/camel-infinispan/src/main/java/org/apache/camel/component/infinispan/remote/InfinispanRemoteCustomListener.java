begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanCustomListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryCreated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryExpired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryModified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryRemoved
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheFailover
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryCreatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryCustomEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryModifiedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientEvent
import|;
end_import

begin_comment
comment|/**  * This class is supposed to be extended by users and annotated with @ClientListener  * and passed to the consumer endpoint through the 'customListener' parameter.  */
end_comment

begin_class
DECL|class|InfinispanRemoteCustomListener
specifier|public
specifier|abstract
class|class
name|InfinispanRemoteCustomListener
extends|extends
name|InfinispanCustomListener
block|{
DECL|method|InfinispanRemoteCustomListener ()
specifier|public
name|InfinispanRemoteCustomListener
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ClientCacheEntryCreated
annotation|@
name|ClientCacheEntryModified
annotation|@
name|ClientCacheEntryRemoved
annotation|@
name|ClientCacheEntryExpired
annotation|@
name|ClientCacheFailover
DECL|method|processClientEvent (ClientEvent event)
specifier|public
name|void
name|processClientEvent
parameter_list|(
name|ClientEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|isAccepted
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|infinispanConsumer
operator|.
name|processEvent
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|cacheName
argument_list|,
name|getKey
argument_list|(
name|event
argument_list|)
argument_list|,
name|getEventData
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getKey (ClientEvent event)
specifier|private
name|Object
name|getKey
parameter_list|(
name|ClientEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|ClientCacheEntryCreatedEvent
condition|)
block|{
return|return
operator|(
operator|(
name|ClientCacheEntryCreatedEvent
argument_list|<
name|?
argument_list|>
operator|)
name|event
operator|)
operator|.
name|getKey
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ClientCacheEntryModifiedEvent
condition|)
block|{
return|return
operator|(
operator|(
name|ClientCacheEntryModifiedEvent
argument_list|<
name|?
argument_list|>
operator|)
name|event
operator|)
operator|.
name|getKey
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|ClientCacheEntryRemovedEvent
condition|)
block|{
return|return
operator|(
operator|(
name|ClientCacheEntryRemovedEvent
argument_list|<
name|?
argument_list|>
operator|)
name|event
operator|)
operator|.
name|getKey
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|getEventData (ClientEvent e)
specifier|private
name|Object
name|getEventData
parameter_list|(
name|ClientEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ClientCacheEntryCustomEvent
condition|)
block|{
return|return
operator|(
operator|(
name|ClientCacheEntryCustomEvent
argument_list|<
name|?
argument_list|>
operator|)
name|e
operator|)
operator|.
name|getEventData
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

