begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryCreated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryExpired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryModified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheEntryRemoved
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientCacheFailover
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|annotation
operator|.
name|ClientListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryCreatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryExpiredEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryModifiedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheEntryRemovedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|event
operator|.
name|ClientCacheFailoverEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|ClientListener
DECL|class|InfinispanRemoteEventListener
specifier|public
class|class
name|InfinispanRemoteEventListener
extends|extends
name|InfinispanEventListener
block|{
DECL|field|logger
specifier|private
specifier|final
specifier|transient
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|InfinispanRemoteEventListener (InfinispanConsumer infinispanConsumer, Set<String> eventTypes)
specifier|public
name|InfinispanRemoteEventListener
parameter_list|(
name|InfinispanConsumer
name|infinispanConsumer
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|eventTypes
parameter_list|)
block|{
name|super
argument_list|(
name|infinispanConsumer
argument_list|,
name|eventTypes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ClientCacheEntryCreated
DECL|method|processEvent (ClientCacheEntryCreatedEvent<Object> event)
specifier|public
name|void
name|processEvent
parameter_list|(
name|ClientCacheEntryCreatedEvent
argument_list|<
name|Object
argument_list|>
name|event
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Received ClientEvent [{}]"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|dispatch
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|cacheName
argument_list|,
name|event
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ClientCacheEntryModified
DECL|method|processEvent (ClientCacheEntryModifiedEvent<Object> event)
specifier|public
name|void
name|processEvent
parameter_list|(
name|ClientCacheEntryModifiedEvent
argument_list|<
name|Object
argument_list|>
name|event
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Received ClientEvent [{}]"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|dispatch
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|cacheName
argument_list|,
name|event
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ClientCacheEntryRemoved
DECL|method|processEvent (ClientCacheEntryRemovedEvent<Object> event)
specifier|public
name|void
name|processEvent
parameter_list|(
name|ClientCacheEntryRemovedEvent
argument_list|<
name|Object
argument_list|>
name|event
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Received ClientEvent [{}]"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|dispatch
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|cacheName
argument_list|,
name|event
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ClientCacheFailover
DECL|method|processEvent (ClientCacheFailoverEvent event)
specifier|public
name|void
name|processEvent
parameter_list|(
name|ClientCacheFailoverEvent
name|event
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Received ClientEvent [{}]"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|dispatch
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|cacheName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ClientCacheEntryExpired
DECL|method|processEvent (ClientCacheEntryExpiredEvent<Object> event)
specifier|public
name|void
name|processEvent
parameter_list|(
name|ClientCacheEntryExpiredEvent
argument_list|<
name|Object
argument_list|>
name|event
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Received ClientEvent [{}]"
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|dispatch
argument_list|(
name|event
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|,
name|cacheName
argument_list|,
name|event
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|dispatch (String eventType, boolean isPre, String cacheName, Object key)
specifier|private
name|void
name|dispatch
parameter_list|(
name|String
name|eventType
parameter_list|,
name|boolean
name|isPre
parameter_list|,
name|String
name|cacheName
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|isAccepted
argument_list|(
name|eventType
argument_list|)
condition|)
block|{
name|infinispanConsumer
operator|.
name|processEvent
argument_list|(
name|eventType
argument_list|,
name|isPre
argument_list|,
name|cacheName
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

