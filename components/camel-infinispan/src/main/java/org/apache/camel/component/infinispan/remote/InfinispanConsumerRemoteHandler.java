begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan.remote
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|remote
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanConsumerHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|RemoteCache
import|;
end_import

begin_class
DECL|class|InfinispanConsumerRemoteHandler
specifier|public
specifier|final
class|class
name|InfinispanConsumerRemoteHandler
implements|implements
name|InfinispanConsumerHandler
block|{
DECL|field|INSTANCE
specifier|public
specifier|static
specifier|final
name|InfinispanConsumerHandler
name|INSTANCE
init|=
operator|new
name|InfinispanConsumerRemoteHandler
argument_list|()
decl_stmt|;
DECL|method|InfinispanConsumerRemoteHandler ()
specifier|private
name|InfinispanConsumerRemoteHandler
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|start (InfinispanConsumer consumer)
specifier|public
name|InfinispanEventListener
name|start
parameter_list|(
name|InfinispanConsumer
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|consumer
operator|.
name|getConfiguration
argument_list|()
operator|.
name|isSync
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Sync listeners not supported for remote caches."
argument_list|)
throw|;
block|}
name|RemoteCache
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|remoteCache
init|=
name|InfinispanUtil
operator|.
name|asRemote
argument_list|(
name|consumer
operator|.
name|getCache
argument_list|()
argument_list|)
decl_stmt|;
name|InfinispanConfiguration
name|configuration
init|=
name|consumer
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|InfinispanEventListener
name|listener
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|hasCustomListener
argument_list|()
condition|)
block|{
name|listener
operator|=
name|configuration
operator|.
name|getCustomListener
argument_list|()
expr_stmt|;
name|listener
operator|.
name|setInfinispanConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|=
operator|new
name|InfinispanRemoteEventListener
argument_list|(
name|consumer
argument_list|,
name|configuration
operator|.
name|getEventTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|remoteCache
operator|.
name|addClientListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setCacheName
argument_list|(
name|remoteCache
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|listener
return|;
block|}
annotation|@
name|Override
DECL|method|stop (InfinispanConsumer consumer)
specifier|public
name|void
name|stop
parameter_list|(
name|InfinispanConsumer
name|consumer
parameter_list|)
block|{
name|InfinispanUtil
operator|.
name|asRemote
argument_list|(
name|consumer
operator|.
name|getCache
argument_list|()
argument_list|)
operator|.
name|removeClientListener
argument_list|(
name|consumer
operator|.
name|getListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

