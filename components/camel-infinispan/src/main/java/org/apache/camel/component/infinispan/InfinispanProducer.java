begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|InvokeOnHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|remote
operator|.
name|InfinispanRemoteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|HeaderSelectorProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|query
operator|.
name|dsl
operator|.
name|Query
import|;
end_import

begin_class
DECL|class|InfinispanProducer
specifier|public
class|class
name|InfinispanProducer
extends|extends
name|HeaderSelectorProducer
block|{
DECL|field|cacheName
specifier|private
specifier|final
name|String
name|cacheName
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|InfinispanConfiguration
name|configuration
decl_stmt|;
DECL|field|manager
specifier|private
specifier|final
name|InfinispanManager
name|manager
decl_stmt|;
DECL|method|InfinispanProducer (InfinispanEndpoint endpoint, String cacheName, InfinispanConfiguration configuration)
specifier|public
name|InfinispanProducer
parameter_list|(
name|InfinispanEndpoint
name|endpoint
parameter_list|,
name|String
name|cacheName
parameter_list|,
name|InfinispanConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
parameter_list|()
lambda|->
name|configuration
operator|.
name|getOperationOrDefault
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheName
operator|=
name|cacheName
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|manager
operator|=
operator|new
name|InfinispanManager
argument_list|(
name|endpoint
operator|.
name|getCamelContext
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|manager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|manager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
comment|// ************************************
comment|// Operations
comment|// ************************************
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"PUT"
argument_list|)
DECL|method|onPut (Message message)
name|void
name|onPut
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"PUTASYNC"
argument_list|)
DECL|method|onPutAsync (Message message)
name|void
name|onPutAsync
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Object
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"PUTALL"
argument_list|)
DECL|method|onPutAll (Message message)
name|void
name|onPutAll
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAP
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
name|cache
operator|.
name|putAll
argument_list|(
name|map
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|.
name|putAll
argument_list|(
name|map
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cache
operator|.
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"PUTALLASYNC"
argument_list|)
DECL|method|onPutAllAsync (Message message)
name|void
name|onPutAllAsync
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAP
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putAllAsync
argument_list|(
name|map
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAllAsync
argument_list|(
name|map
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAllAsync
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"PUTIFABSENT"
argument_list|)
DECL|method|onPutIfAbsent (Message message)
name|void
name|onPutIfAbsent
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"PUTIFABSENTASYNC"
argument_list|)
DECL|method|onPutIfAbsentAsync (Message message)
name|void
name|onPutIfAbsentAsync
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Object
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putIfAbsentAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsentAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsentAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"GET"
argument_list|)
DECL|method|onGet (Message message)
name|void
name|onGet
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|cache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"GETORDEFAULT"
argument_list|)
DECL|method|onGetOrDefault (Message message)
name|void
name|onGetOrDefault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|defaultValue
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|DEFAULT_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|cache
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"CONTAINSKEY"
argument_list|)
DECL|method|onContainsKey (Message message)
name|void
name|onContainsKey
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|cache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"CONTAINSVALUE"
argument_list|)
DECL|method|onContainsValue (Message message)
name|void
name|onContainsValue
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|cache
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"REMOVE"
argument_list|)
DECL|method|onRemove (Message message)
name|void
name|onRemove
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|remove
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"REMOVEASYNC"
argument_list|)
DECL|method|onRemoveAsync (Message message)
name|void
name|onRemoveAsync
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Object
argument_list|>
name|resultRemoveAsyncKey
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|resultRemoveAsyncKeyValue
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|resultRemoveAsyncKey
operator|=
name|cache
operator|.
name|removeAsync
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultRemoveAsyncKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultRemoveAsyncKeyValue
operator|=
name|cache
operator|.
name|removeAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultRemoveAsyncKeyValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"REPLACE"
argument_list|)
DECL|method|onReplace (Message message)
name|void
name|onReplace
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|oldValue
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OLD_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"REPLACEASYNC"
argument_list|)
DECL|method|onReplaceAsync (Message message)
name|void
name|onReplaceAsync
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|value
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|oldValue
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OLD_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Object
argument_list|>
name|resultWithNewValue
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Boolean
argument_list|>
name|resultWithNewAndOldValue
decl_stmt|;
if|if
condition|(
name|hasLifespan
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|timeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMaxIdleTime
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeUnit
name|maxIdleTimeUnit
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|TimeUnit
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|resultWithNewValue
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultWithNewValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultWithNewAndOldValue
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|,
name|maxIdle
argument_list|,
name|maxIdleTimeUnit
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultWithNewAndOldValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|resultWithNewValue
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultWithNewValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultWithNewAndOldValue
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|,
name|lifespan
argument_list|,
name|timeUnit
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultWithNewAndOldValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|resultWithNewValue
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultWithNewValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultWithNewAndOldValue
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|key
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|resultWithNewAndOldValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"SIZE"
argument_list|)
DECL|method|onSize (Message message)
name|void
name|onSize
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|cache
operator|.
name|size
argument_list|()
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"CLEAR"
argument_list|)
DECL|method|onClear (Message message)
name|void
name|onClear
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"CLEARASYNC"
argument_list|)
DECL|method|onCLearAsync (Message message)
name|void
name|onCLearAsync
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|result
init|=
name|cache
operator|.
name|clearAsync
argument_list|()
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"QUERY"
argument_list|)
DECL|method|onQuery (Message message)
name|void
name|onQuery
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
if|if
condition|(
name|InfinispanUtil
operator|.
name|isRemote
argument_list|(
name|cache
argument_list|)
condition|)
block|{
specifier|final
name|Query
name|query
init|=
name|InfinispanRemoteOperation
operator|.
name|buildQuery
argument_list|(
name|configuration
argument_list|,
name|cache
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|setResult
argument_list|(
name|message
argument_list|,
name|query
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Query is supported on remote cache only"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"STATS"
argument_list|)
DECL|method|onStats (Message message)
name|void
name|onStats
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|InfinispanUtil
operator|.
name|asAdvanced
argument_list|(
name|cache
argument_list|)
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"COMPUTE"
argument_list|)
DECL|method|onCompute (Message message)
name|void
name|onCompute
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|result
init|=
name|cache
operator|.
name|compute
argument_list|(
name|key
argument_list|,
name|configuration
operator|.
name|getRemappingFunction
argument_list|()
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InvokeOnHeader
argument_list|(
literal|"COMPUTEASYNC"
argument_list|)
DECL|method|onComputeAsync (Message message)
name|void
name|onComputeAsync
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
init|=
name|manager
operator|.
name|getCache
argument_list|(
name|message
argument_list|,
name|this
operator|.
name|cacheName
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
decl_stmt|;
specifier|final
name|CompletableFuture
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|cache
operator|.
name|computeAsync
argument_list|(
name|key
argument_list|,
name|configuration
operator|.
name|getRemappingFunction
argument_list|()
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|message
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// ************************************
comment|// Helpers
comment|// ************************************
DECL|method|hasLifespan (Message message)
specifier|private
name|boolean
name|hasLifespan
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|!
name|InfinispanUtil
operator|.
name|isHeaderEmpty
argument_list|(
name|message
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|InfinispanUtil
operator|.
name|isHeaderEmpty
argument_list|(
name|message
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
return|;
block|}
DECL|method|hasMaxIdleTime (Message message)
specifier|private
name|boolean
name|hasMaxIdleTime
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|!
name|InfinispanUtil
operator|.
name|isHeaderEmpty
argument_list|(
name|message
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|InfinispanUtil
operator|.
name|isHeaderEmpty
argument_list|(
name|message
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
return|;
block|}
DECL|method|setResult (Message message, Object result)
specifier|private
name|void
name|setResult
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
name|String
name|resultHeader
init|=
name|message
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|RESULT_HEADER
argument_list|,
name|configuration
operator|::
name|getResultHeader
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultHeader
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setHeader
argument_list|(
name|resultHeader
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

