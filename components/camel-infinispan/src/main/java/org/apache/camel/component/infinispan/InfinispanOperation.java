begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|remote
operator|.
name|InfinispanRemoteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|util
operator|.
name|concurrent
operator|.
name|NotifyingFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|query
operator|.
name|dsl
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
operator|.
name|InfinispanUtil
operator|.
name|isInHeaderEmpty
import|;
end_import

begin_class
DECL|class|InfinispanOperation
specifier|public
specifier|final
class|class
name|InfinispanOperation
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InfinispanOperation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|InfinispanOperation ()
specifier|private
name|InfinispanOperation
parameter_list|()
block|{     }
DECL|method|process (Exchange exchange, InfinispanConfiguration configuration, BasicCache<Object, Object> cache)
specifier|public
specifier|static
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|)
block|{
name|Operation
name|operation
init|=
name|getOperation
argument_list|(
name|exchange
argument_list|,
name|configuration
argument_list|)
decl_stmt|;
name|operation
operator|.
name|execute
argument_list|(
name|configuration
argument_list|,
name|cache
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|method|getOperation (Exchange exchange, InfinispanConfiguration configuration)
specifier|private
specifier|static
name|Operation
name|getOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|InfinispanConfiguration
name|configuration
parameter_list|)
block|{
name|String
name|operation
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|hasCommand
argument_list|()
condition|)
block|{
name|operation
operator|=
name|InfinispanConstants
operator|.
name|OPERATION
operator|+
name|configuration
operator|.
name|getCommand
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|operation
operator|=
name|InfinispanConstants
operator|.
name|PUT
expr_stmt|;
block|}
block|}
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Operation: [{}]"
argument_list|,
name|operation
argument_list|)
expr_stmt|;
return|return
name|Operation
operator|.
name|valueOf
argument_list|(
name|operation
operator|.
name|substring
argument_list|(
name|InfinispanConstants
operator|.
name|OPERATION
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
DECL|enum|Operation
specifier|private
enum|enum
name|Operation
block|{
DECL|enumConstant|PUT
name|PUT
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|put
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|put
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|put
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|PUTASYNC
block|}
block|,
name|PUTASYNC
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|NotifyingFuture
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|PUTALL
block|}
block|,
name|PUTALL
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|cache
operator|.
name|putAll
argument_list|(
name|getMap
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache
operator|.
name|putAll
argument_list|(
name|getMap
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cache
operator|.
name|putAll
argument_list|(
name|getMap
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enumConstant|PUTALLASYNC
block|}
block|,
name|PUTALLASYNC
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|NotifyingFuture
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putAllAsync
argument_list|(
name|getMap
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAllAsync
argument_list|(
name|getMap
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putAllAsync
argument_list|(
name|getMap
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|PUTIFABSENT
block|}
block|,
name|PUTIFABSENT
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsent
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|PUTIFABSENTASYNC
block|}
block|,
name|PUTIFABSENTASYNC
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|NotifyingFuture
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|result
operator|=
name|cache
operator|.
name|putIfAbsentAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsentAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|putIfAbsentAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|GET
block|}
block|,
name|GET
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|setResult
argument_list|(
name|cache
operator|.
name|get
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|)
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|CONTAINSKEY
block|}
block|,
name|CONTAINSKEY
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|setResult
argument_list|(
name|cache
operator|.
name|containsKey
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|)
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|CONTAINSVALUE
block|}
block|,
name|CONTAINSVALUE
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|result
init|=
name|cache
operator|.
name|containsValue
argument_list|(
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
decl_stmt|;
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|REMOVE
block|}
block|,
name|REMOVE
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|remove
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|remove
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|REMOVEASYNC
block|}
block|,
name|REMOVEASYNC
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|NotifyingFuture
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|removeAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|removeAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|REPLACE
block|}
block|,
name|REPLACE
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replace
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|REPLACEASYNC
block|}
block|,
name|REPLACEASYNC
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|NotifyingFuture
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
condition|)
block|{
name|cache
operator|=
name|InfinispanUtil
operator|.
name|ignoreReturnValuesCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|lifespan
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|timeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|LIFESPAN_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|)
operator|&&
operator|!
name|isInHeaderEmpty
argument_list|(
name|exchange
argument_list|,
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|)
condition|)
block|{
name|long
name|maxIdle
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME
argument_list|,
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|maxIdleTimeUnit
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAX_IDLE_TIME_UNIT
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|,
name|maxIdle
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|maxIdleTimeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|lifespan
argument_list|,
name|TimeUnit
operator|.
name|valueOf
argument_list|(
name|timeUnit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|cache
operator|.
name|replaceAsync
argument_list|(
name|getKey
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getOldValue
argument_list|(
name|exchange
argument_list|)
argument_list|,
name|getValue
argument_list|(
name|exchange
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setResult
argument_list|(
name|result
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|SIZE
block|}
block|,
name|SIZE
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|setResult
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|CLEAR
block|}
block|,
name|CLEAR
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|enumConstant|CLEARASYNC
block|}
block|,
name|CLEARASYNC
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|setResult
argument_list|(
name|cache
operator|.
name|clearAsync
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
DECL|enumConstant|QUERY
block|}
block|,
name|QUERY
block|{
annotation|@
name|Override
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|Query
name|query
init|=
name|getQuery
argument_list|(
name|configuration
argument_list|,
name|cache
argument_list|,
name|exchange
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|setResult
argument_list|(
name|query
operator|.
name|list
argument_list|()
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
block|;
DECL|method|setResult (Object result, Exchange exchange)
name|void
name|setResult
parameter_list|(
name|Object
name|result
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|InfinispanConstants
operator|.
name|RESULT
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getKey (Exchange exchange)
name|Object
name|getKey
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|KEY
argument_list|)
return|;
block|}
DECL|method|getValue (Exchange exchange)
name|Object
name|getValue
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|VALUE
argument_list|)
return|;
block|}
DECL|method|getOldValue (Exchange exchange)
name|Object
name|getOldValue
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|OLD_VALUE
argument_list|)
return|;
block|}
DECL|method|getMap (Exchange exchange)
name|Map
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|getMap
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|MAP
argument_list|)
return|;
block|}
DECL|method|getQuery (InfinispanConfiguration configuration, BasicCache<Object, Object> cache, Exchange exchange)
name|Query
name|getQuery
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
block|{
if|if
condition|(
name|InfinispanUtil
operator|.
name|isRemote
argument_list|(
name|cache
argument_list|)
condition|)
block|{
return|return
name|InfinispanRemoteOperation
operator|.
name|buildQuery
argument_list|(
name|configuration
argument_list|,
name|cache
argument_list|,
name|exchange
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|execute (InfinispanConfiguration configuration, BasicCache<Object, Object> cache, Exchange exchange)
specifier|abstract
name|void
name|execute
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|,
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
parameter_list|,
name|Exchange
name|exchange
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

