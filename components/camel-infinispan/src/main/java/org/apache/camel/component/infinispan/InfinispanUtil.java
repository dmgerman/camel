begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ResourceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|AdvancedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|RemoteCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|RemoteCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCacheContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|context
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|manager
operator|.
name|EmbeddedCacheManager
import|;
end_import

begin_class
DECL|class|InfinispanUtil
specifier|public
specifier|final
class|class
name|InfinispanUtil
block|{
DECL|method|InfinispanUtil ()
specifier|private
name|InfinispanUtil
parameter_list|()
block|{     }
DECL|method|isEmbedded (BasicCacheContainer container)
specifier|public
specifier|static
name|boolean
name|isEmbedded
parameter_list|(
name|BasicCacheContainer
name|container
parameter_list|)
block|{
try|try
block|{
return|return
name|container
operator|instanceof
name|EmbeddedCacheManager
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isEmbedded (BasicCache<K, V> cache)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|isEmbedded
parameter_list|(
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
try|try
block|{
return|return
name|cache
operator|instanceof
name|Cache
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|isRemote (BasicCacheContainer container)
specifier|public
specifier|static
name|boolean
name|isRemote
parameter_list|(
name|BasicCacheContainer
name|container
parameter_list|)
block|{
try|try
block|{
return|return
name|container
operator|instanceof
name|RemoteCacheManager
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|asRemote (BasicCacheContainer container)
specifier|public
specifier|static
name|RemoteCacheManager
name|asRemote
parameter_list|(
name|BasicCacheContainer
name|container
parameter_list|)
block|{
return|return
name|RemoteCacheManager
operator|.
name|class
operator|.
name|cast
argument_list|(
name|container
argument_list|)
return|;
block|}
DECL|method|isRemote (BasicCache<K, V> cache)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|boolean
name|isRemote
parameter_list|(
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
try|try
block|{
return|return
name|cache
operator|instanceof
name|RemoteCache
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|asEmbedded (BasicCache<K, V> cache)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|asEmbedded
parameter_list|(
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
return|return
name|Cache
operator|.
name|class
operator|.
name|cast
argument_list|(
name|cache
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|asRemote (BasicCache<K, V> cache)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|RemoteCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|asRemote
parameter_list|(
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
return|return
name|RemoteCache
operator|.
name|class
operator|.
name|cast
argument_list|(
name|cache
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|asAdvanced (BasicCache<K, V> cache)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|AdvancedCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|asAdvanced
parameter_list|(
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
return|return
name|Cache
operator|.
name|class
operator|.
name|cast
argument_list|(
name|cache
argument_list|)
operator|.
name|getAdvancedCache
argument_list|()
return|;
block|}
DECL|method|ignoreReturnValuesCache (BasicCache<K, V> cache)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|ignoreReturnValuesCache
parameter_list|(
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
parameter_list|)
block|{
if|if
condition|(
name|isEmbedded
argument_list|(
name|cache
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|Cache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|cache
operator|)
operator|.
name|getAdvancedCache
argument_list|()
operator|.
name|withFlags
argument_list|(
name|Flag
operator|.
name|IGNORE_RETURN_VALUES
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cache
return|;
block|}
block|}
DECL|method|isInHeaderEmpty (Exchange exchange, String header)
specifier|public
specifier|static
name|boolean
name|isInHeaderEmpty
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|String
name|header
parameter_list|)
block|{
return|return
name|isHeaderEmpty
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
argument_list|,
name|header
argument_list|)
return|;
block|}
DECL|method|isHeaderEmpty (Message message, String header)
specifier|public
specifier|static
name|boolean
name|isHeaderEmpty
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|header
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|message
operator|.
name|getHeader
argument_list|(
name|header
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getCache (BasicCacheContainer cacheContainer, String cacheName)
specifier|public
specifier|static
name|BasicCache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getCache
parameter_list|(
name|BasicCacheContainer
name|cacheContainer
parameter_list|,
name|String
name|cacheName
parameter_list|)
block|{
return|return
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|cacheName
argument_list|)
condition|?
name|cacheContainer
operator|.
name|getCache
argument_list|()
else|:
name|cacheContainer
operator|.
name|getCache
argument_list|(
name|cacheName
argument_list|)
return|;
block|}
DECL|method|loadProperties (CamelContext camelContext, String uri)
specifier|public
specifier|static
name|Properties
name|loadProperties
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|ResourceHelper
operator|.
name|resolveMandatoryResourceAsInputStream
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|)
init|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|uri
argument_list|)
init|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Cannot find resource: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

