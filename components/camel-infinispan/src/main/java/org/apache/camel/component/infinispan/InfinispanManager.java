begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.infinispan
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|infinispan
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|cache
operator|.
name|impl
operator|.
name|DecoratedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|RemoteCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|client
operator|.
name|hotrod
operator|.
name|configuration
operator|.
name|ConfigurationBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|commons
operator|.
name|api
operator|.
name|BasicCacheContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|infinispan
operator|.
name|manager
operator|.
name|DefaultCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|InfinispanManager
specifier|public
class|class
name|InfinispanManager
implements|implements
name|Service
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InfinispanManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|final
name|InfinispanConfiguration
name|configuration
decl_stmt|;
DECL|field|camelContext
specifier|private
specifier|final
name|CamelContext
name|camelContext
decl_stmt|;
DECL|field|cacheContainer
specifier|private
name|BasicCacheContainer
name|cacheContainer
decl_stmt|;
DECL|field|isManagedCacheContainer
specifier|private
name|boolean
name|isManagedCacheContainer
decl_stmt|;
DECL|method|InfinispanManager ()
specifier|public
name|InfinispanManager
parameter_list|()
block|{
name|this
operator|.
name|camelContext
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
operator|new
name|InfinispanConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|configuration
operator|.
name|setCacheContainer
argument_list|(
operator|new
name|DefaultCacheManager
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|InfinispanManager (InfinispanConfiguration configuration)
specifier|public
name|InfinispanManager
parameter_list|(
name|InfinispanConfiguration
name|configuration
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
DECL|method|InfinispanManager (CamelContext camelContext, InfinispanConfiguration configuration)
specifier|public
name|InfinispanManager
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|InfinispanConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|cacheContainer
operator|=
name|configuration
operator|.
name|getCacheContainer
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheContainer
operator|==
literal|null
condition|)
block|{
name|ConfigurationBuilder
name|builder
init|=
operator|new
name|ConfigurationBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|classLoader
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|configuration
operator|.
name|getConfigurationUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|uri
operator|=
name|camelContext
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|InfinispanUtil
operator|.
name|loadProperties
argument_list|(
name|camelContext
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getConfigurationProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|putAll
argument_list|(
name|configuration
operator|.
name|getConfigurationProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|withProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addServers
argument_list|(
name|configuration
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cacheContainer
operator|=
operator|new
name|RemoteCacheManager
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|isManagedCacheContainer
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isManagedCacheContainer
condition|)
block|{
name|cacheContainer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCacheContainer ()
specifier|public
name|BasicCacheContainer
name|getCacheContainer
parameter_list|()
block|{
return|return
name|cacheContainer
return|;
block|}
DECL|method|isCacheContainerEmbedded ()
specifier|public
name|boolean
name|isCacheContainerEmbedded
parameter_list|()
block|{
return|return
name|InfinispanUtil
operator|.
name|isEmbedded
argument_list|(
name|cacheContainer
argument_list|)
return|;
block|}
DECL|method|isCacheContainerRemote ()
specifier|public
name|boolean
name|isCacheContainerRemote
parameter_list|()
block|{
return|return
name|InfinispanUtil
operator|.
name|isRemote
argument_list|(
name|cacheContainer
argument_list|)
return|;
block|}
DECL|method|getCache ()
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getCache
parameter_list|()
block|{
return|return
name|getCache
argument_list|(
name|configuration
operator|.
name|getCacheName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCache (Exchange exchange)
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getCache
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
return|return
name|getCache
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|InfinispanConstants
operator|.
name|CACHE_NAME
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getCache (String cacheName)
specifier|public
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|getCache
parameter_list|(
name|String
name|cacheName
parameter_list|)
block|{
if|if
condition|(
name|cacheName
operator|==
literal|null
condition|)
block|{
name|cacheName
operator|=
name|configuration
operator|.
name|getCacheName
argument_list|()
expr_stmt|;
block|}
name|LOGGER
operator|.
name|trace
argument_list|(
literal|"Cache[{}]"
argument_list|,
name|cacheName
argument_list|)
expr_stmt|;
name|BasicCache
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|cache
init|=
name|InfinispanUtil
operator|.
name|getCache
argument_list|(
name|cacheContainer
argument_list|,
name|cacheName
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|hasFlags
argument_list|()
operator|&&
name|InfinispanUtil
operator|.
name|isEmbedded
argument_list|(
name|cache
argument_list|)
condition|)
block|{
name|cache
operator|=
operator|new
name|DecoratedCache
argument_list|(
name|InfinispanUtil
operator|.
name|asAdvanced
argument_list|(
name|cache
argument_list|)
argument_list|,
name|configuration
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
block|}
end_class

end_unit

