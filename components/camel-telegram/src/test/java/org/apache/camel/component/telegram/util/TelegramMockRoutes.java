begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TelegramMockRoutes
specifier|public
class|class
name|TelegramMockRoutes
extends|extends
name|RouteBuilder
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TelegramMockRoutes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|mocks
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MockProcessor
argument_list|<
name|?
argument_list|>
argument_list|>
name|mocks
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|TelegramMockRoutes (int port)
specifier|public
name|TelegramMockRoutes
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|addEndpoint (String path, String method, Class<?> returnType, String... responseBodies)
specifier|public
name|TelegramMockRoutes
name|addEndpoint
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
parameter_list|,
name|String
modifier|...
name|responseBodies
parameter_list|)
block|{
name|this
operator|.
name|mocks
operator|.
name|put
argument_list|(
name|path
argument_list|,
operator|new
name|MockProcessor
argument_list|<>
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
name|returnType
argument_list|,
name|responseBodies
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|mocks
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|en
lambda|->
block|{
name|from
argument_list|(
literal|"netty-http:http://localhost:"
operator|+
name|port
operator|+
literal|"/botmock-token/"
operator|+
name|en
operator|.
name|getKey
argument_list|()
operator|+
literal|"?httpMethodRestrict="
operator|+
name|en
operator|.
name|getValue
argument_list|()
operator|.
name|method
argument_list|)
operator|.
name|process
argument_list|(
name|en
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|MockProcessor
specifier|public
specifier|static
class|class
name|MockProcessor
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Processor
block|{
DECL|field|method
specifier|private
specifier|final
name|String
name|method
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|recordedMessages
specifier|private
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|recordedMessages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|responseBodies
specifier|private
specifier|final
name|String
index|[]
name|responseBodies
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|returnType
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
decl_stmt|;
DECL|method|MockProcessor (String method, String path, Class<T> returnType, String... responseBodies)
specifier|public
name|MockProcessor
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|path
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|returnType
parameter_list|,
name|String
modifier|...
name|responseBodies
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|returnType
operator|=
name|returnType
expr_stmt|;
name|this
operator|.
name|responseBodies
operator|=
name|responseBodies
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
specifier|final
name|Message
name|m
init|=
name|exchange
operator|.
name|getMessage
argument_list|()
decl_stmt|;
specifier|final
name|int
name|responseIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|recordedMessages
operator|.
name|size
argument_list|()
argument_list|,
name|responseBodies
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnType
operator|==
name|byte
index|[]
operator|.
name|class
condition|)
block|{
name|recordedMessages
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|m
operator|.
name|getBody
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|rawBody
init|=
name|m
operator|.
name|getBody
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Recording {} {} body {}"
argument_list|,
name|method
argument_list|,
name|path
argument_list|,
name|rawBody
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|T
name|body
init|=
name|returnType
operator|!=
name|String
operator|.
name|class
condition|?
operator|(
name|T
operator|)
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|readValue
argument_list|(
name|rawBody
argument_list|,
name|returnType
argument_list|)
else|:
operator|(
name|T
operator|)
name|rawBody
decl_stmt|;
name|recordedMessages
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|responseBodies
index|[
name|responseIndex
index|]
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|m
operator|.
name|setBody
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|m
operator|.
name|setHeader
argument_list|(
literal|"Content-Length"
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|m
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/json; charset=UTF-8"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|clearRecordedMessages ()
specifier|public
name|void
name|clearRecordedMessages
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|recordedMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRecordedMessages ()
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getRecordedMessages
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|recordedMessages
argument_list|)
return|;
block|}
block|}
DECL|method|awaitRecordedMessages (int count, long timeoutMillis)
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|awaitRecordedMessages
parameter_list|(
name|int
name|count
parameter_list|,
name|long
name|timeoutMillis
parameter_list|)
block|{
return|return
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
name|timeoutMillis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|getRecordedMessages
argument_list|()
argument_list|,
name|msgs
lambda|->
name|msgs
operator|.
name|size
argument_list|()
operator|>=
name|count
argument_list|)
return|;
block|}
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getMock (String path)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|MockProcessor
argument_list|<
name|T
argument_list|>
name|getMock
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
operator|(
name|MockProcessor
argument_list|<
name|T
argument_list|>
operator|)
name|mocks
operator|.
name|get
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

