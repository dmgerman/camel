begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|WebhookInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|WebhookResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramMockRoutes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramMockRoutes
operator|.
name|MockProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|Dsl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|awaitility
operator|.
name|Awaitility
operator|.
name|waitAtMost
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNotEquals
import|;
end_import

begin_comment
comment|/**  * Tests a producer that sends media information.  */
end_comment

begin_class
DECL|class|TelegramWebhookRegistrationTest
specifier|public
class|class
name|TelegramWebhookRegistrationTest
extends|extends
name|TelegramTestSupport
block|{
annotation|@
name|Test
DECL|method|testAutomaticRegistration ()
specifier|public
name|void
name|testAutomaticRegistration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|WebhookInfo
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"setWebhook"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|DefaultCamelContext
name|mockContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
init|)
block|{
name|mockContext
operator|.
name|addRoutes
argument_list|(
name|getMockRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|mockContext
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/* Make sure the Telegram mock API is up and running */
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Response
name|testResponse
init|=
name|Dsl
operator|.
name|asyncHttpClient
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/botmock-token/getTest"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|testResponse
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|200
return|;
block|}
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:telegram"
argument_list|)
operator|.
name|to
argument_list|(
literal|"telegram:bots?authorizationToken=mock-token"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"webhook:telegram:bots?authorizationToken=mock-token"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|{
specifier|final
name|List
argument_list|<
name|WebhookInfo
argument_list|>
name|recordedMessages
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recordedMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|""
argument_list|,
name|recordedMessages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|context
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|{
specifier|final
name|List
argument_list|<
name|WebhookInfo
argument_list|>
name|recordedMessages
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recordedMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|recordedMessages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testNoRegistration ()
specifier|public
name|void
name|testNoRegistration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|WebhookInfo
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"setWebhook"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|DefaultCamelContext
name|mockContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
init|)
block|{
name|mockContext
operator|.
name|addRoutes
argument_list|(
name|getMockRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|mockContext
operator|.
name|start
argument_list|()
expr_stmt|;
comment|/* Make sure the Telegram mock API is up and running */
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|atMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Response
name|testResponse
init|=
name|Dsl
operator|.
name|asyncHttpClient
argument_list|()
operator|.
name|prepareGet
argument_list|(
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/botmock-token/getTest"
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|testResponse
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|200
return|;
block|}
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"webhook:telegram:bots?authorizationToken=mock-token&webhookAutoRegister=false"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:endpoint"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|pollDelay
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|mockProcessor
operator|.
name|getRecordedMessages
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|context
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|waitAtMost
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|context
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
name|ServiceStatus
operator|.
name|Stopped
argument_list|)
expr_stmt|;
name|Awaitility
operator|.
name|await
argument_list|()
operator|.
name|pollDelay
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|until
argument_list|(
parameter_list|()
lambda|->
name|mockProcessor
operator|.
name|getRecordedMessages
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createMockRoutes ()
specifier|protected
name|TelegramMockRoutes
name|createMockRoutes
parameter_list|()
block|{
specifier|final
name|WebhookResult
name|result
init|=
operator|new
name|WebhookResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setOk
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|setResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|TelegramMockRoutes
argument_list|(
name|port
argument_list|)
operator|.
name|addEndpoint
argument_list|(
literal|"getTest"
argument_list|,
literal|"GET"
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"running"
argument_list|)
operator|.
name|addEndpoint
argument_list|(
literal|"setWebhook"
argument_list|,
literal|"POST"
argument_list|,
name|WebhookInfo
operator|.
name|class
argument_list|,
name|TelegramTestUtil
operator|.
name|serialize
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isUseRouteBuilder ()
specifier|public
name|boolean
name|isUseRouteBuilder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

