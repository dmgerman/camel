begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram.util
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|UpdateResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * Utility functions for telegram tests.  */
end_comment

begin_class
DECL|class|TelegramTestUtil
specifier|public
specifier|final
class|class
name|TelegramTestUtil
block|{
DECL|method|TelegramTestUtil ()
specifier|private
name|TelegramTestUtil
parameter_list|()
block|{     }
comment|/**      * Creates a sample image.      *      * @param imageIOType the image-io code of the image type (eg. PNG, JPG)      * @return a sample image      * @throws IOException if anything goes wrong      */
DECL|method|createSampleImage (String imageIOType)
specifier|public
specifier|static
name|byte
index|[]
name|createSampleImage
parameter_list|(
name|String
name|imageIOType
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|img
decl_stmt|;
if|if
condition|(
name|imageIOType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"png"
argument_list|)
condition|)
block|{
name|img
operator|=
name|readBytesFromStream
argument_list|(
name|TelegramTestUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/attachments/sample.png"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|imageIOType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jpg"
argument_list|)
condition|)
block|{
name|img
operator|=
name|readBytesFromStream
argument_list|(
name|TelegramTestUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/attachments/sample.jpg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown format "
operator|+
name|imageIOType
argument_list|)
throw|;
block|}
return|return
name|img
return|;
block|}
DECL|method|readBytesFromStream (InputStream in)
specifier|private
specifier|static
name|byte
index|[]
name|readBytesFromStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|IOHelper
operator|.
name|DEFAULT_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|IOHelper
operator|.
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
DECL|method|createSampleAudio ()
specifier|public
specifier|static
name|byte
index|[]
name|createSampleAudio
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|audio
init|=
name|readBytesFromStream
argument_list|(
name|TelegramTestUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/attachments/sample.mp3"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|audio
return|;
block|}
DECL|method|createSampleVideo ()
specifier|public
specifier|static
name|byte
index|[]
name|createSampleVideo
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|video
init|=
name|readBytesFromStream
argument_list|(
name|TelegramTestUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/attachments/sample.mp4"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|video
return|;
block|}
DECL|method|createSampleDocument ()
specifier|public
specifier|static
name|byte
index|[]
name|createSampleDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|document
init|=
name|readBytesFromStream
argument_list|(
name|TelegramTestUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/attachments/sample.txt"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|document
return|;
block|}
DECL|method|stringResource (String path)
specifier|public
specifier|static
name|String
name|stringResource
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
init|(
name|Reader
name|r
init|=
operator|new
name|InputStreamReader
argument_list|(
name|TelegramTestUtil
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|path
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
return|return
name|IOHelper
operator|.
name|toString
argument_list|(
name|r
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|serialize (Object result)
specifier|public
specifier|static
name|String
name|serialize
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|ObjectMapper
argument_list|()
operator|.
name|writeValueAsString
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

