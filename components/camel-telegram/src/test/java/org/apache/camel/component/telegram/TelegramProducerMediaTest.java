begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|EndpointInject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|OutgoingTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramMockRoutes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramMockRoutes
operator|.
name|MockProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests a producer that sends media information.  */
end_comment

begin_class
DECL|class|TelegramProducerMediaTest
specifier|public
class|class
name|TelegramProducerMediaTest
extends|extends
name|TelegramTestSupport
block|{
annotation|@
name|EndpointInject
argument_list|(
literal|"direct:telegram"
argument_list|)
DECL|field|endpoint
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
annotation|@
name|Test
DECL|method|testRouteWithPngImage ()
specifier|public
name|void
name|testRouteWithPngImage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|byte
index|[]
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendPhoto"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TITLE_CAPTION
argument_list|,
literal|"Photo"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|PHOTO_PNG
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|image
init|=
name|TelegramTestUtil
operator|.
name|createSampleImage
argument_list|(
literal|"PNG"
argument_list|)
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
comment|/* message contains a multipart body */
specifier|final
name|byte
index|[]
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"chat_id"
argument_list|,
literal|"my-id"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|message
argument_list|,
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|assertMultipartFilename
argument_list|(
name|message
argument_list|,
literal|"photo"
argument_list|,
literal|"photo.png"
argument_list|)
expr_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"caption"
argument_list|,
literal|"Photo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithJpgImage ()
specifier|public
name|void
name|testRouteWithJpgImage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|byte
index|[]
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendPhoto"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TITLE_CAPTION
argument_list|,
literal|"Photo"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|PHOTO_JPG
argument_list|)
expr_stmt|;
comment|// without using
comment|// .name()
name|byte
index|[]
name|image
init|=
name|TelegramTestUtil
operator|.
name|createSampleImage
argument_list|(
literal|"JPG"
argument_list|)
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"chat_id"
argument_list|,
literal|"my-id"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|message
argument_list|,
name|image
argument_list|)
argument_list|)
expr_stmt|;
name|assertMultipartFilename
argument_list|(
name|message
argument_list|,
literal|"photo"
argument_list|,
literal|"photo.jpg"
argument_list|)
expr_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"caption"
argument_list|,
literal|"Photo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithAudio ()
specifier|public
name|void
name|testRouteWithAudio
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|byte
index|[]
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendAudio"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TITLE_CAPTION
argument_list|,
literal|"Audio"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|AUDIO
argument_list|)
expr_stmt|;
name|byte
index|[]
name|audio
init|=
name|TelegramTestUtil
operator|.
name|createSampleAudio
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|audio
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"chat_id"
argument_list|,
literal|"my-id"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|message
argument_list|,
name|audio
argument_list|)
argument_list|)
expr_stmt|;
name|assertMultipartFilename
argument_list|(
name|message
argument_list|,
literal|"audio"
argument_list|,
literal|"audio.mp3"
argument_list|)
expr_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"title"
argument_list|,
literal|"Audio"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithVideo ()
specifier|public
name|void
name|testRouteWithVideo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|byte
index|[]
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendVideo"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TITLE_CAPTION
argument_list|,
literal|"Video"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|VIDEO
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|video
init|=
name|TelegramTestUtil
operator|.
name|createSampleVideo
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|video
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"chat_id"
argument_list|,
literal|"my-id"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|message
argument_list|,
name|video
argument_list|)
argument_list|)
expr_stmt|;
name|assertMultipartFilename
argument_list|(
name|message
argument_list|,
literal|"video"
argument_list|,
literal|"video.mp4"
argument_list|)
expr_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"caption"
argument_list|,
literal|"Video"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithDocument ()
specifier|public
name|void
name|testRouteWithDocument
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|byte
index|[]
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendDocument"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TITLE_CAPTION
argument_list|,
literal|"Document"
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|byte
index|[]
name|document
init|=
name|TelegramTestUtil
operator|.
name|createSampleDocument
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"chat_id"
argument_list|,
literal|"my-id"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|message
argument_list|,
name|document
argument_list|)
argument_list|)
expr_stmt|;
name|assertMultipartFilename
argument_list|(
name|message
argument_list|,
literal|"document"
argument_list|,
literal|"file"
argument_list|)
expr_stmt|;
name|assertMultipartText
argument_list|(
name|message
argument_list|,
literal|"caption"
argument_list|,
literal|"Document"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithText ()
specifier|public
name|void
name|testRouteWithText
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|OutgoingTextMessage
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendMessage"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|TEXT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|OutgoingTextMessage
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my-id"
argument_list|,
name|message
operator|.
name|getChatId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
operator|.
name|getParseMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithTextAndCustomKeyBoard ()
specifier|public
name|void
name|testRouteWithTextAndCustomKeyBoard
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|OutgoingTextMessage
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendMessage"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|OutgoingTextMessage
name|msg
init|=
operator|new
name|OutgoingTextMessage
operator|.
name|Builder
argument_list|()
operator|.
name|text
argument_list|(
literal|"Hello"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|withInlineKeyboardContainingTwoRows
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|OutgoingTextMessage
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my-id"
argument_list|,
name|message
operator|.
name|getChatId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|message
operator|.
name|getReplyKeyboardMarkup
argument_list|()
operator|.
name|getKeyboard
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|message
operator|.
name|getReplyKeyboardMarkup
argument_list|()
operator|.
name|getOneTimeKeyboard
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
operator|.
name|getParseMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithTextHtml ()
specifier|public
name|void
name|testRouteWithTextHtml
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|OutgoingTextMessage
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendMessage"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|TEXT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_PARSE_MODE
argument_list|,
name|TelegramParseMode
operator|.
name|HTML
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|OutgoingTextMessage
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my-id"
argument_list|,
name|message
operator|.
name|getChatId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HTML"
argument_list|,
name|message
operator|.
name|getParseMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRouteWithTextMarkdown ()
specifier|public
name|void
name|testRouteWithTextMarkdown
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MockProcessor
argument_list|<
name|OutgoingTextMessage
argument_list|>
name|mockProcessor
init|=
name|getMockRoutes
argument_list|()
operator|.
name|getMock
argument_list|(
literal|"sendMessage"
argument_list|)
decl_stmt|;
name|mockProcessor
operator|.
name|clearRecordedMessages
argument_list|()
expr_stmt|;
name|Exchange
name|ex
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_MEDIA_TYPE
argument_list|,
name|TelegramMediaType
operator|.
name|TEXT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|TelegramConstants
operator|.
name|TELEGRAM_PARSE_MODE
argument_list|,
name|TelegramParseMode
operator|.
name|MARKDOWN
argument_list|)
expr_stmt|;
name|ex
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|template
operator|.
name|send
argument_list|(
name|endpoint
argument_list|,
name|ex
argument_list|)
expr_stmt|;
specifier|final
name|OutgoingTextMessage
name|message
init|=
name|mockProcessor
operator|.
name|awaitRecordedMessages
argument_list|(
literal|1
argument_list|,
literal|5000
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my-id"
argument_list|,
name|message
operator|.
name|getChatId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Markdown"
argument_list|,
name|message
operator|.
name|getParseMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilders ()
specifier|protected
name|RoutesBuilder
index|[]
name|createRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RoutesBuilder
index|[]
block|{
name|getMockRoutes
argument_list|()
block|,
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:telegram"
argument_list|)
operator|.
name|to
argument_list|(
literal|"telegram:bots?authorizationToken=mock-token&chatId=my-id"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
unit|}      @
name|Override
DECL|method|createMockRoutes ()
specifier|protected
name|TelegramMockRoutes
name|createMockRoutes
parameter_list|()
block|{
return|return
operator|new
name|TelegramMockRoutes
argument_list|(
name|port
argument_list|)
operator|.
name|addEndpoint
argument_list|(
literal|"sendPhoto"
argument_list|,
literal|"POST"
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|TelegramTestUtil
operator|.
name|stringResource
argument_list|(
literal|"messages/send-photo.json"
argument_list|)
argument_list|)
operator|.
name|addEndpoint
argument_list|(
literal|"sendAudio"
argument_list|,
literal|"POST"
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|TelegramTestUtil
operator|.
name|stringResource
argument_list|(
literal|"messages/send-audio.json"
argument_list|)
argument_list|)
operator|.
name|addEndpoint
argument_list|(
literal|"sendVideo"
argument_list|,
literal|"POST"
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|TelegramTestUtil
operator|.
name|stringResource
argument_list|(
literal|"messages/send-video.json"
argument_list|)
argument_list|)
operator|.
name|addEndpoint
argument_list|(
literal|"sendDocument"
argument_list|,
literal|"POST"
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|TelegramTestUtil
operator|.
name|stringResource
argument_list|(
literal|"messages/send-document.json"
argument_list|)
argument_list|)
operator|.
name|addEndpoint
argument_list|(
literal|"sendMessage"
argument_list|,
literal|"POST"
argument_list|,
name|OutgoingTextMessage
operator|.
name|class
argument_list|,
name|TelegramTestUtil
operator|.
name|stringResource
argument_list|(
literal|"messages/send-message.json"
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|assertMultipartFilename (byte[] message, String name, String filename)
specifier|static
name|void
name|assertMultipartFilename
parameter_list|(
name|byte
index|[]
name|message
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|message
argument_list|,
operator|(
literal|"name=\""
operator|+
name|name
operator|+
literal|"\"; filename=\""
operator|+
name|filename
operator|+
literal|"\""
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|assertMultipartText (byte[] message, String key, String value)
specifier|static
name|void
name|assertMultipartText
parameter_list|(
name|byte
index|[]
name|message
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|contains
argument_list|(
name|message
argument_list|,
operator|(
literal|"name=\""
operator|+
name|key
operator|+
literal|"\"\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\n"
operator|+
name|value
operator|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|contains (byte[] array, byte[] target)
specifier|static
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|array
parameter_list|,
name|byte
index|[]
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|OUTER_FOR
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
operator|-
name|target
operator|.
name|length
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|target
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|array
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|target
index|[
name|j
index|]
condition|)
block|{
continue|continue
name|OUTER_FOR
continue|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

unit|}
end_unit

