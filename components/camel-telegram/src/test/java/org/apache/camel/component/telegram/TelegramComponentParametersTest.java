begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests the usage of defaults in the component configuration  */
end_comment

begin_class
DECL|class|TelegramComponentParametersTest
specifier|public
class|class
name|TelegramComponentParametersTest
extends|extends
name|TelegramTestSupport
block|{
annotation|@
name|Test
DECL|method|testDefaultsAndOverrides ()
specifier|public
name|void
name|testDefaultsAndOverrides
parameter_list|()
throws|throws
name|Exception
block|{
name|TelegramComponent
name|component
init|=
operator|(
name|TelegramComponent
operator|)
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|"telegram"
argument_list|)
decl_stmt|;
name|component
operator|.
name|setAuthorizationToken
argument_list|(
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|TelegramEndpoint
name|ep1
init|=
operator|(
name|TelegramEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"telegram:bots"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DEFAULT"
argument_list|,
name|ep1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|)
expr_stmt|;
name|TelegramEndpoint
name|ep2
init|=
operator|(
name|TelegramEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"telegram:bots/CUSTOM"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CUSTOM"
argument_list|,
name|ep2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|)
expr_stmt|;
name|TelegramEndpoint
name|ep3
init|=
operator|(
name|TelegramEndpoint
operator|)
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"telegram:bots/ANOTHER?chatId=123"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ANOTHER"
argument_list|,
name|ep3
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testNonDefaultConfig ()
specifier|public
name|void
name|testNonDefaultConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|TelegramComponent
name|component
init|=
operator|(
name|TelegramComponent
operator|)
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|"telegram"
argument_list|)
decl_stmt|;
name|component
operator|.
name|setAuthorizationToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"telegram:bots"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testWrongURI1 ()
specifier|public
name|void
name|testWrongURI1
parameter_list|()
throws|throws
name|Exception
block|{
name|TelegramComponent
name|component
init|=
operator|(
name|TelegramComponent
operator|)
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|"telegram"
argument_list|)
decl_stmt|;
name|component
operator|.
name|setAuthorizationToken
argument_list|(
literal|"ANY"
argument_list|)
expr_stmt|;
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"telegram:bots/ "
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testWrongURI2 ()
specifier|public
name|void
name|testWrongURI2
parameter_list|()
throws|throws
name|Exception
block|{
name|TelegramComponent
name|component
init|=
operator|(
name|TelegramComponent
operator|)
name|context
argument_list|()
operator|.
name|getComponent
argument_list|(
literal|"telegram"
argument_list|)
decl_stmt|;
name|component
operator|.
name|setAuthorizationToken
argument_list|(
literal|"ANY"
argument_list|)
expr_stmt|;
name|component
operator|.
name|createEndpoint
argument_list|(
literal|"telegram:bots/token/s"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

