begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|AsyncHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|AsyncHttpClientConfig
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
literal|"telegram"
argument_list|)
DECL|class|TelegramComponent
specifier|public
class|class
name|TelegramComponent
extends|extends
name|DefaultComponent
block|{
DECL|field|BOT_API_DEFAULT_URL
specifier|public
specifier|static
specifier|final
name|String
name|BOT_API_DEFAULT_URL
init|=
literal|"https://api.telegram.org"
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"security"
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|authorizationToken
specifier|private
name|String
name|authorizationToken
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|client
specifier|private
name|AsyncHttpClient
name|client
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|clientConfig
specifier|private
name|AsyncHttpClientConfig
name|clientConfig
decl_stmt|;
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
name|BOT_API_DEFAULT_URL
argument_list|,
name|description
operator|=
literal|"Can be used to set an alternative base URI, e.g. when you want to test the component against a mock Telegram API"
argument_list|)
DECL|field|baseUri
specifier|private
name|String
name|baseUri
init|=
name|BOT_API_DEFAULT_URL
decl_stmt|;
DECL|method|TelegramComponent ()
specifier|public
name|TelegramComponent
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|createEndpoint (String uri, String remaining, Map<String, Object> parameters)
specifier|protected
name|Endpoint
name|createEndpoint
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|remaining
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|TelegramConfiguration
name|configuration
init|=
operator|new
name|TelegramConfiguration
argument_list|()
decl_stmt|;
comment|// ignore trailing slash
if|if
condition|(
name|remaining
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|remaining
operator|=
name|remaining
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|remaining
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|configuration
operator|.
name|setType
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|remaining
operator|.
name|equals
argument_list|(
name|TelegramConfiguration
operator|.
name|ENDPOINT_TYPE_BOTS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported endpoint type for uri "
operator|+
name|uri
operator|+
literal|", remaining "
operator|+
name|remaining
argument_list|)
throw|;
block|}
if|if
condition|(
name|configuration
operator|.
name|getBaseUri
argument_list|()
operator|==
literal|null
condition|)
block|{
name|configuration
operator|.
name|setBaseUri
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
block|}
name|TelegramEndpoint
name|endpoint
init|=
operator|new
name|TelegramEndpoint
argument_list|(
name|uri
argument_list|,
name|this
argument_list|,
name|configuration
argument_list|,
name|client
argument_list|,
name|clientConfig
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|setAuthorizationToken
argument_list|(
name|authorizationToken
argument_list|)
expr_stmt|;
name|setProperties
argument_list|(
name|endpoint
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|endpoint
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getAuthorizationToken
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"AuthorizationToken must be configured on either component or endpoint for telegram: "
operator|+
name|uri
argument_list|)
throw|;
block|}
return|return
name|endpoint
return|;
block|}
DECL|method|getAuthorizationToken ()
specifier|public
name|String
name|getAuthorizationToken
parameter_list|()
block|{
return|return
name|authorizationToken
return|;
block|}
comment|/**      * The default Telegram authorization token to be used when the information is not provided in the endpoints.      */
DECL|method|setAuthorizationToken (String authorizationToken)
specifier|public
name|void
name|setAuthorizationToken
parameter_list|(
name|String
name|authorizationToken
parameter_list|)
block|{
name|this
operator|.
name|authorizationToken
operator|=
name|authorizationToken
expr_stmt|;
block|}
DECL|method|getClient ()
specifier|public
name|AsyncHttpClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
comment|/**      * To use a custom {@link AsyncHttpClient}      */
DECL|method|setClient (AsyncHttpClient client)
specifier|public
name|void
name|setClient
parameter_list|(
name|AsyncHttpClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
DECL|method|getClientConfig ()
specifier|public
name|AsyncHttpClientConfig
name|getClientConfig
parameter_list|()
block|{
return|return
name|clientConfig
return|;
block|}
comment|/**      * To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance.      */
DECL|method|setClientConfig (AsyncHttpClientConfig clientConfig)
specifier|public
name|void
name|setClientConfig
parameter_list|(
name|AsyncHttpClientConfig
name|clientConfig
parameter_list|)
block|{
name|this
operator|.
name|clientConfig
operator|=
name|clientConfig
expr_stmt|;
block|}
DECL|method|getBaseUri ()
specifier|public
name|String
name|getBaseUri
parameter_list|()
block|{
return|return
name|baseUri
return|;
block|}
comment|/**      * Set an alternative base URI, e.g. when you want to test the component against a mock Telegram API.      */
DECL|method|setBaseUri (String telegramBaseUri)
specifier|public
name|void
name|setBaseUri
parameter_list|(
name|String
name|telegramBaseUri
parameter_list|)
block|{
name|this
operator|.
name|baseUri
operator|=
name|telegramBaseUri
expr_stmt|;
block|}
block|}
end_class

end_unit

