begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram.service
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonProcessingException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|handler
operator|.
name|codec
operator|.
name|http
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|TelegramService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|EditMessageLiveLocationMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|MessageResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|OutgoingAudioMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|OutgoingDocumentMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|OutgoingMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|OutgoingPhotoMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|OutgoingTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|OutgoingVideoMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|SendLocationMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|SendVenueMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|StopMessageLiveLocationMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|UpdateResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|WebhookInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|WebhookResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|GZIPHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|AsyncHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|HttpResponseBodyPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|HttpResponseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|RequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|request
operator|.
name|body
operator|.
name|multipart
operator|.
name|ByteArrayPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|request
operator|.
name|body
operator|.
name|multipart
operator|.
name|StringPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|asynchttpclient
operator|.
name|util
operator|.
name|HttpUtils
operator|.
name|extractContentTypeCharsetAttribute
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|asynchttpclient
operator|.
name|util
operator|.
name|MiscUtils
operator|.
name|withDefault
import|;
end_import

begin_comment
comment|/**  * Adapts the {@code RestBotAPI} to the {@code TelegramService} interface.  */
end_comment

begin_class
DECL|class|TelegramServiceRestBotAPIAdapter
specifier|public
class|class
name|TelegramServiceRestBotAPIAdapter
implements|implements
name|TelegramService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TelegramServiceRestBotAPIAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|handlers
specifier|private
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|OutgoingMessageHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|handlers
decl_stmt|;
DECL|field|asyncHttpClient
specifier|private
specifier|final
name|AsyncHttpClient
name|asyncHttpClient
decl_stmt|;
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|baseUri
specifier|private
specifier|final
name|String
name|baseUri
decl_stmt|;
DECL|method|TelegramServiceRestBotAPIAdapter (AsyncHttpClient asyncHttpClient, int bufferSize, String telegramBaseUri, String authorizationToken)
specifier|public
name|TelegramServiceRestBotAPIAdapter
parameter_list|(
name|AsyncHttpClient
name|asyncHttpClient
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|String
name|telegramBaseUri
parameter_list|,
name|String
name|authorizationToken
parameter_list|)
block|{
name|this
operator|.
name|asyncHttpClient
operator|=
name|asyncHttpClient
expr_stmt|;
name|this
operator|.
name|baseUri
operator|=
name|telegramBaseUri
operator|+
literal|"/bot"
operator|+
name|authorizationToken
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|OutgoingMessageHandler
argument_list|<
name|?
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|OutgoingTextMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingPlainMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/sendMessage"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|OutgoingPhotoMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingPhotoMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|OutgoingAudioMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingAudioMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|OutgoingVideoMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingVideoMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|OutgoingDocumentMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingDocumentMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|SendLocationMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingPlainMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/sendLocation"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|EditMessageLiveLocationMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingPlainMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/editMessageLiveLocation"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|StopMessageLiveLocationMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingPlainMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/stopMessageLiveLocation"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
name|SendVenueMessage
operator|.
name|class
argument_list|,
operator|new
name|OutgoingPlainMessageHandler
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/sendVenue"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|handlers
operator|=
name|m
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUpdates (Long offset, Integer limit, Integer timeoutSeconds)
specifier|public
name|UpdateResult
name|getUpdates
parameter_list|(
name|Long
name|offset
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|Integer
name|timeoutSeconds
parameter_list|)
block|{
specifier|final
name|String
name|uri
init|=
name|baseUri
operator|+
literal|"/getUpdates"
decl_stmt|;
specifier|final
name|RequestBuilder
name|request
init|=
operator|new
name|RequestBuilder
argument_list|(
literal|"GET"
argument_list|)
operator|.
name|setUrl
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addQueryParam
argument_list|(
literal|"offset"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addQueryParam
argument_list|(
literal|"limit"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeoutSeconds
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addQueryParam
argument_list|(
literal|"timeout"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|timeoutSeconds
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sendSyncRequest
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|,
name|UpdateResult
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|sendSyncRequest (final Request request, Class<T> resultType)
parameter_list|<
name|T
parameter_list|>
name|T
name|sendSyncRequest
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|resultType
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Response
name|response
init|=
name|asyncHttpClient
operator|.
name|executeRequest
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|response
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|>=
literal|200
operator|&&
name|code
operator|<
literal|300
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|responseBody
init|=
name|response
operator|.
name|getResponseBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Received body for {} {}: {}"
argument_list|,
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|request
operator|.
name|getUrl
argument_list|()
argument_list|,
name|responseBody
argument_list|)
expr_stmt|;
block|}
return|return
name|mapper
operator|.
name|readValue
argument_list|(
name|responseBody
argument_list|,
name|resultType
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not parse the response from "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getUrl
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getUrl
argument_list|()
operator|+
literal|": "
operator|+
name|response
operator|.
name|getStatusCode
argument_list|()
operator|+
literal|" "
operator|+
name|response
operator|.
name|getStatusText
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not request "
operator|+
name|request
operator|.
name|getMethod
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getUrl
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|setWebhook (String url)
specifier|public
name|boolean
name|setWebhook
parameter_list|(
name|String
name|url
parameter_list|)
block|{
specifier|final
name|String
name|uri
init|=
name|baseUri
operator|+
literal|"/setWebhook"
decl_stmt|;
specifier|final
name|RequestBuilder
name|request
init|=
operator|new
name|RequestBuilder
argument_list|(
literal|"POST"
argument_list|)
operator|.
name|setUrl
argument_list|(
name|uri
argument_list|)
decl_stmt|;
specifier|final
name|WebhookInfo
name|message
init|=
operator|new
name|WebhookInfo
argument_list|(
name|url
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|request
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not serialize "
operator|+
name|message
argument_list|)
throw|;
block|}
name|WebhookResult
name|res
init|=
name|sendSyncRequest
argument_list|(
name|request
operator|.
name|build
argument_list|()
argument_list|,
name|WebhookResult
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|res
operator|.
name|isOk
argument_list|()
operator|&&
name|res
operator|.
name|isResult
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|removeWebhook ()
specifier|public
name|boolean
name|removeWebhook
parameter_list|()
block|{
return|return
name|setWebhook
argument_list|(
literal|""
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|sendMessage (Exchange exchange, AsyncCallback callback, OutgoingMessage message)
specifier|public
name|void
name|sendMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|,
name|OutgoingMessage
name|message
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|OutgoingMessageHandler
argument_list|<
name|OutgoingMessage
argument_list|>
name|handler
init|=
operator|(
name|OutgoingMessageHandler
argument_list|<
name|OutgoingMessage
argument_list|>
operator|)
name|handlers
operator|.
name|get
argument_list|(
name|message
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported message type "
operator|+
operator|(
name|message
operator|!=
literal|null
condition|?
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
operator|)
argument_list|)
throw|;
block|}
name|handler
operator|.
name|sendMessage
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
DECL|class|OutgoingPlainMessageHandler
specifier|static
class|class
name|OutgoingPlainMessageHandler
extends|extends
name|OutgoingMessageHandler
argument_list|<
name|OutgoingMessage
argument_list|>
block|{
DECL|method|OutgoingPlainMessageHandler (AsyncHttpClient asyncHttpClient, int bufferSize, ObjectMapper mapper, String uri)
specifier|public
name|OutgoingPlainMessageHandler
parameter_list|(
name|AsyncHttpClient
name|asyncHttpClient
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|uri
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBody (RequestBuilder builder, OutgoingMessage message)
specifier|protected
name|void
name|addBody
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|OutgoingMessage
name|message
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|body
init|=
name|mapper
operator|.
name|writeValueAsString
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"sending "
operator|+
name|body
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JsonProcessingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not serialize "
operator|+
name|message
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|OutgoingAudioMessageHandler
specifier|static
class|class
name|OutgoingAudioMessageHandler
extends|extends
name|OutgoingMessageHandler
argument_list|<
name|OutgoingAudioMessage
argument_list|>
block|{
DECL|method|OutgoingAudioMessageHandler (AsyncHttpClient asyncHttpClient, int bufferSize, ObjectMapper mapper, String baseUri)
specifier|public
name|OutgoingAudioMessageHandler
parameter_list|(
name|AsyncHttpClient
name|asyncHttpClient
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|,
name|String
name|baseUri
parameter_list|)
block|{
name|super
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/sendAudio"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBody (RequestBuilder builder, OutgoingAudioMessage message)
specifier|protected
name|void
name|addBody
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|OutgoingAudioMessage
name|message
parameter_list|)
block|{
name|fillCommonMediaParts
argument_list|(
name|builder
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|buildMediaPart
argument_list|(
name|builder
argument_list|,
literal|"audio"
argument_list|,
name|message
operator|.
name|getFilenameWithExtension
argument_list|()
argument_list|,
name|message
operator|.
name|getAudio
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"title"
argument_list|,
name|message
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"duration"
argument_list|,
name|message
operator|.
name|getDurationSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"performer"
argument_list|,
name|message
operator|.
name|getPerformer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OutgoingVideoMessageHandler
specifier|static
class|class
name|OutgoingVideoMessageHandler
extends|extends
name|OutgoingMessageHandler
argument_list|<
name|OutgoingVideoMessage
argument_list|>
block|{
DECL|method|OutgoingVideoMessageHandler (AsyncHttpClient asyncHttpClient, int bufferSize, ObjectMapper mapper, String baseUri)
specifier|public
name|OutgoingVideoMessageHandler
parameter_list|(
name|AsyncHttpClient
name|asyncHttpClient
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|,
name|String
name|baseUri
parameter_list|)
block|{
name|super
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/sendVideo"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBody (RequestBuilder builder, OutgoingVideoMessage message)
specifier|protected
name|void
name|addBody
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|OutgoingVideoMessage
name|message
parameter_list|)
block|{
name|fillCommonMediaParts
argument_list|(
name|builder
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|buildMediaPart
argument_list|(
name|builder
argument_list|,
literal|"video"
argument_list|,
name|message
operator|.
name|getFilenameWithExtension
argument_list|()
argument_list|,
name|message
operator|.
name|getVideo
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"caption"
argument_list|,
name|message
operator|.
name|getCaption
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"duration"
argument_list|,
name|message
operator|.
name|getDurationSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"width"
argument_list|,
name|message
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"height"
argument_list|,
name|message
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OutgoingDocumentMessageHandler
specifier|static
class|class
name|OutgoingDocumentMessageHandler
extends|extends
name|OutgoingMessageHandler
argument_list|<
name|OutgoingDocumentMessage
argument_list|>
block|{
DECL|method|OutgoingDocumentMessageHandler (AsyncHttpClient asyncHttpClient, int bufferSize, ObjectMapper mapper, String baseUri)
specifier|public
name|OutgoingDocumentMessageHandler
parameter_list|(
name|AsyncHttpClient
name|asyncHttpClient
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|,
name|String
name|baseUri
parameter_list|)
block|{
name|super
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/sendDocument"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBody (RequestBuilder builder, OutgoingDocumentMessage message)
specifier|protected
name|void
name|addBody
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|OutgoingDocumentMessage
name|message
parameter_list|)
block|{
name|fillCommonMediaParts
argument_list|(
name|builder
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|buildMediaPart
argument_list|(
name|builder
argument_list|,
literal|"document"
argument_list|,
name|message
operator|.
name|getFilenameWithExtension
argument_list|()
argument_list|,
name|message
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"caption"
argument_list|,
name|message
operator|.
name|getCaption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OutgoingPhotoMessageHandler
specifier|static
class|class
name|OutgoingPhotoMessageHandler
extends|extends
name|OutgoingMessageHandler
argument_list|<
name|OutgoingPhotoMessage
argument_list|>
block|{
DECL|method|OutgoingPhotoMessageHandler (AsyncHttpClient asyncHttpClient, int bufferSize, ObjectMapper mapper, String baseUri)
specifier|public
name|OutgoingPhotoMessageHandler
parameter_list|(
name|AsyncHttpClient
name|asyncHttpClient
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|,
name|String
name|baseUri
parameter_list|)
block|{
name|super
argument_list|(
name|asyncHttpClient
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|,
name|baseUri
operator|+
literal|"/sendPhoto"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addBody (RequestBuilder builder, OutgoingPhotoMessage message)
specifier|protected
name|void
name|addBody
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|OutgoingPhotoMessage
name|message
parameter_list|)
block|{
name|fillCommonMediaParts
argument_list|(
name|builder
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|buildMediaPart
argument_list|(
name|builder
argument_list|,
literal|"photo"
argument_list|,
name|message
operator|.
name|getFilenameWithExtension
argument_list|()
argument_list|,
name|message
operator|.
name|getPhoto
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"caption"
argument_list|,
name|message
operator|.
name|getCaption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OutgoingMessageHandler
specifier|abstract
specifier|static
class|class
name|OutgoingMessageHandler
parameter_list|<
name|T
extends|extends
name|OutgoingMessage
parameter_list|>
block|{
DECL|field|mapper
specifier|protected
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|asyncHttpClient
specifier|private
specifier|final
name|AsyncHttpClient
name|asyncHttpClient
decl_stmt|;
DECL|field|bufferSize
specifier|private
specifier|final
name|int
name|bufferSize
decl_stmt|;
DECL|field|contentType
specifier|private
specifier|final
name|String
name|contentType
decl_stmt|;
DECL|field|uri
specifier|private
specifier|final
name|String
name|uri
decl_stmt|;
DECL|method|OutgoingMessageHandler (AsyncHttpClient asyncHttpClient, int bufferSize, ObjectMapper mapper, String uri, String contentType)
specifier|public
name|OutgoingMessageHandler
parameter_list|(
name|AsyncHttpClient
name|asyncHttpClient
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|this
operator|.
name|asyncHttpClient
operator|=
name|asyncHttpClient
expr_stmt|;
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|contentType
operator|=
name|contentType
expr_stmt|;
block|}
DECL|method|sendMessage (Exchange exchange, AsyncCallback callback, T message)
specifier|public
name|void
name|sendMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|,
name|T
name|message
parameter_list|)
block|{
specifier|final
name|RequestBuilder
name|builder
init|=
operator|new
name|RequestBuilder
argument_list|(
literal|"POST"
argument_list|)
operator|.
name|setUrl
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|addBody
argument_list|(
name|builder
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|asyncHttpClient
operator|.
name|executeRequest
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|TelegramAsyncHandler
argument_list|(
name|exchange
argument_list|,
name|callback
argument_list|,
name|uri
argument_list|,
name|bufferSize
argument_list|,
name|mapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addBody (RequestBuilder builder, T message)
specifier|protected
specifier|abstract
name|void
name|addBody
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|T
name|message
parameter_list|)
function_decl|;
DECL|method|fillCommonMediaParts (RequestBuilder builder, OutgoingMessage message)
specifier|protected
name|void
name|fillCommonMediaParts
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|OutgoingMessage
name|message
parameter_list|)
block|{
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"chat_id"
argument_list|,
name|message
operator|.
name|getChatId
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"reply_to_message_id"
argument_list|,
name|message
operator|.
name|getReplyToMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|buildTextPart
argument_list|(
name|builder
argument_list|,
literal|"disable_notification"
argument_list|,
name|message
operator|.
name|getDisableNotification
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|buildTextPart (RequestBuilder builder, String name, Object value)
specifier|protected
name|void
name|buildTextPart
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addBodyPart
argument_list|(
operator|new
name|StringPart
argument_list|(
name|name
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
literal|"text/plain"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildMediaPart (RequestBuilder builder, String name, String fileNameWithExtension, byte[] value)
specifier|protected
name|void
name|buildMediaPart
parameter_list|(
name|RequestBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|fileNameWithExtension
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|builder
operator|.
name|addBodyPart
argument_list|(
operator|new
name|ByteArrayPart
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
literal|"application/octet-stream"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|,
name|fileNameWithExtension
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TelegramAsyncHandler
specifier|private
specifier|static
specifier|final
class|class
name|TelegramAsyncHandler
implements|implements
name|AsyncHandler
argument_list|<
name|Exchange
argument_list|>
block|{
DECL|field|exchange
specifier|private
specifier|final
name|Exchange
name|exchange
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
name|callback
decl_stmt|;
DECL|field|url
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
DECL|field|os
specifier|private
specifier|final
name|ByteArrayOutputStream
name|os
decl_stmt|;
DECL|field|mapper
specifier|private
specifier|final
name|ObjectMapper
name|mapper
decl_stmt|;
DECL|field|statusCode
specifier|private
name|int
name|statusCode
decl_stmt|;
DECL|field|statusText
specifier|private
name|String
name|statusText
decl_stmt|;
DECL|field|contentType
specifier|private
name|String
name|contentType
decl_stmt|;
DECL|field|contentEncoding
specifier|private
name|String
name|contentEncoding
decl_stmt|;
DECL|field|charset
specifier|private
name|Charset
name|charset
decl_stmt|;
DECL|method|TelegramAsyncHandler (Exchange exchange, AsyncCallback callback, String url, int bufferSize, ObjectMapper mapper)
specifier|private
name|TelegramAsyncHandler
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|AsyncCallback
name|callback
parameter_list|,
name|String
name|url
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|ObjectMapper
name|mapper
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|exchange
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|os
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapper
operator|=
name|mapper
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onThrowable (Throwable t)
specifier|public
name|void
name|onThrowable
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} onThrowable {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|setException
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onCompleted ()
specifier|public
name|Exchange
name|onCompleted
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} onCompleted"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// copy from output stream to input stream
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|success
init|=
name|statusCode
operator|>=
literal|200
operator|&&
name|statusCode
operator|<
literal|300
decl_stmt|;
try|try
init|(
name|InputStream
name|maybeGzStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
init|;
name|InputStream
name|is
operator|=
name|GZIPHelper
operator|.
name|uncompressGzip
argument_list|(
name|contentEncoding
argument_list|,
name|maybeGzStream
argument_list|)
init|;
name|Reader
name|r
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|charset
argument_list|)
init|)
block|{
if|if
condition|(
name|success
condition|)
block|{
specifier|final
name|Object
name|result
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
specifier|final
name|String
name|body
init|=
name|IOHelper
operator|.
name|toString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Received body for {}: {}"
argument_list|,
name|url
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|result
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|body
argument_list|,
name|MessageResult
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|mapper
operator|.
name|readValue
argument_list|(
name|r
argument_list|,
name|MessageResult
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|exchange
operator|.
name|getMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|url
operator|+
literal|" responded: "
operator|+
name|statusCode
operator|+
literal|" "
operator|+
name|statusText
operator|+
literal|" "
operator|+
name|IOHelper
operator|.
name|toString
argument_list|(
name|r
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not parse the response from "
operator|+
name|url
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exchange
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// signal we are done
name|callback
operator|.
name|done
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AhcAsyncHandler for exchangeId: "
operator|+
name|exchange
operator|.
name|getExchangeId
argument_list|()
operator|+
literal|" -> "
operator|+
name|url
return|;
block|}
annotation|@
name|Override
DECL|method|onBodyPartReceived (HttpResponseBodyPart bodyPart)
specifier|public
name|State
name|onBodyPartReceived
parameter_list|(
name|HttpResponseBodyPart
name|bodyPart
parameter_list|)
throws|throws
name|Exception
block|{
comment|// write body parts to stream, which we will bind to the Camel Exchange in onComplete
name|os
operator|.
name|write
argument_list|(
name|bodyPart
operator|.
name|getBodyPartBytes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} onBodyPartReceived {} bytes"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|bodyPart
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|State
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
DECL|method|onStatusReceived (HttpResponseStatus responseStatus)
specifier|public
name|State
name|onStatusReceived
parameter_list|(
name|HttpResponseStatus
name|responseStatus
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"{} onStatusReceived {}"
argument_list|,
name|exchange
operator|.
name|getExchangeId
argument_list|()
argument_list|,
name|responseStatus
argument_list|)
expr_stmt|;
block|}
name|statusCode
operator|=
name|responseStatus
operator|.
name|getStatusCode
argument_list|()
expr_stmt|;
name|statusText
operator|=
name|responseStatus
operator|.
name|getStatusText
argument_list|()
expr_stmt|;
return|return
name|State
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
DECL|method|onHeadersReceived (HttpHeaders headers)
specifier|public
name|State
name|onHeadersReceived
parameter_list|(
name|HttpHeaders
name|headers
parameter_list|)
throws|throws
name|Exception
block|{
name|contentEncoding
operator|=
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Encoding"
argument_list|)
expr_stmt|;
name|contentType
operator|=
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
expr_stmt|;
name|charset
operator|=
name|withDefault
argument_list|(
name|extractContentTypeCharsetAttribute
argument_list|(
name|contentType
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
return|return
name|State
operator|.
name|CONTINUE
return|;
block|}
block|}
block|}
end_class

end_unit

