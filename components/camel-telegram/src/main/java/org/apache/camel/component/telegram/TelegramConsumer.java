begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|Update
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|UpdateResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledPollConsumer
import|;
end_import

begin_comment
comment|/**  * A polling consumer that reads messages from a chat using the Telegram bot API.  */
end_comment

begin_class
DECL|class|TelegramConsumer
specifier|public
class|class
name|TelegramConsumer
extends|extends
name|ScheduledPollConsumer
block|{
DECL|field|endpoint
specifier|private
name|TelegramEndpoint
name|endpoint
decl_stmt|;
comment|/**      * Holds the current offset, used for retrieving incremental updates.      */
DECL|field|offset
specifier|private
specifier|volatile
name|Long
name|offset
decl_stmt|;
DECL|method|TelegramConsumer (TelegramEndpoint endpoint, Processor processor)
specifier|public
name|TelegramConsumer
parameter_list|(
name|TelegramEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|poll ()
specifier|protected
name|int
name|poll
parameter_list|()
throws|throws
name|Exception
block|{
name|TelegramConfiguration
name|config
init|=
name|endpoint
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TelegramService
name|service
init|=
name|TelegramServiceProvider
operator|.
name|get
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Polling Telegram service to get updates"
argument_list|)
expr_stmt|;
name|UpdateResult
name|updateResult
init|=
name|service
operator|.
name|getUpdates
argument_list|(
name|config
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|,
name|offset
argument_list|,
name|config
operator|.
name|getLimit
argument_list|()
argument_list|,
name|config
operator|.
name|getTimeout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateResult
operator|.
name|getUpdates
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// to simplify processing
name|updateResult
operator|.
name|setUpdates
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|updateResult
operator|.
name|isOk
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The server was unable to process the request. Response was "
operator|+
name|updateResult
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Update
argument_list|>
name|updates
init|=
name|updateResult
operator|.
name|getUpdates
argument_list|()
decl_stmt|;
if|if
condition|(
name|updates
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Received {} updates from Telegram service"
argument_list|,
name|updates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No updates received from Telegram service"
argument_list|)
expr_stmt|;
block|}
name|processUpdates
argument_list|(
name|updates
argument_list|)
expr_stmt|;
comment|// update offset to prevent retrieving the same data again
name|updateOffset
argument_list|(
name|updates
argument_list|)
expr_stmt|;
return|return
name|updates
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|processUpdates (List<Update> updates)
specifier|private
name|void
name|processUpdates
parameter_list|(
name|List
argument_list|<
name|Update
argument_list|>
name|updates
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Update
name|update
range|:
name|updates
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Received update from Telegram service: {}"
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|(
name|update
argument_list|)
decl_stmt|;
name|getProcessor
argument_list|()
operator|.
name|process
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateOffset (List<Update> updates)
specifier|private
name|void
name|updateOffset
parameter_list|(
name|List
argument_list|<
name|Update
argument_list|>
name|updates
parameter_list|)
block|{
name|OptionalLong
name|ol
init|=
name|updates
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|Update
operator|::
name|getUpdateId
argument_list|)
operator|.
name|max
argument_list|()
decl_stmt|;
if|if
condition|(
name|ol
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|this
operator|.
name|offset
operator|=
name|ol
operator|.
name|getAsLong
argument_list|()
operator|+
literal|1
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Next Telegram offset will be {}"
argument_list|,
name|this
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

