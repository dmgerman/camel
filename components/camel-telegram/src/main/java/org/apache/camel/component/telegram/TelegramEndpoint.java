begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|Update
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|webhook
operator|.
name|WebhookCapableEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|webhook
operator|.
name|WebhookConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledPollEndpoint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramMessageHelper
operator|.
name|populateExchange
import|;
end_import

begin_comment
comment|/**  * The telegram component provides access to the<a href="https://core.telegram.org/bots/api">Telegram Bot API</a>.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.18.0"
argument_list|,
name|scheme
operator|=
literal|"telegram"
argument_list|,
name|title
operator|=
literal|"Telegram"
argument_list|,
name|syntax
operator|=
literal|"telegram:type/authorizationToken"
argument_list|,
name|label
operator|=
literal|"chat"
argument_list|)
DECL|class|TelegramEndpoint
specifier|public
class|class
name|TelegramEndpoint
extends|extends
name|ScheduledPollEndpoint
implements|implements
name|WebhookCapableEndpoint
block|{
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|TelegramConfiguration
name|configuration
decl_stmt|;
DECL|field|webhookConfiguration
specifier|private
name|WebhookConfiguration
name|webhookConfiguration
decl_stmt|;
DECL|method|TelegramEndpoint (String endpointUri, Component component, TelegramConfiguration configuration)
specifier|public
name|TelegramEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|TelegramConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|TelegramProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|TelegramConsumer
name|consumer
init|=
operator|new
name|TelegramConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
DECL|method|createExchange (Update update)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|Update
name|update
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|super
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|populateExchange
argument_list|(
name|exchange
argument_list|,
name|update
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
annotation|@
name|Override
DECL|method|createWebhookHandler (Processor next)
specifier|public
name|Processor
name|createWebhookHandler
parameter_list|(
name|Processor
name|next
parameter_list|)
block|{
return|return
operator|new
name|TelegramWebhookProcessor
argument_list|(
name|next
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|registerWebhook ()
specifier|public
name|void
name|registerWebhook
parameter_list|()
throws|throws
name|Exception
block|{
name|TelegramService
name|service
init|=
name|TelegramServiceProvider
operator|.
name|get
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|service
operator|.
name|setWebhook
argument_list|(
name|configuration
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|,
name|webhookConfiguration
operator|.
name|computeFullExternalUrl
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"The Telegram API refused to register a webhook"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|unregisterWebhook ()
specifier|public
name|void
name|unregisterWebhook
parameter_list|()
throws|throws
name|Exception
block|{
name|TelegramService
name|service
init|=
name|TelegramServiceProvider
operator|.
name|get
argument_list|()
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|service
operator|.
name|removeWebhook
argument_list|(
name|configuration
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"The Telegram API refused to unregister the webhook"
argument_list|)
throw|;
block|}
block|}
DECL|method|getWebhookConfiguration ()
specifier|public
name|WebhookConfiguration
name|getWebhookConfiguration
parameter_list|()
block|{
return|return
name|webhookConfiguration
return|;
block|}
annotation|@
name|Override
DECL|method|setWebhookConfiguration (WebhookConfiguration webhookConfiguration)
specifier|public
name|void
name|setWebhookConfiguration
parameter_list|(
name|WebhookConfiguration
name|webhookConfiguration
parameter_list|)
block|{
name|this
operator|.
name|webhookConfiguration
operator|=
name|webhookConfiguration
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWebhookMethods ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getWebhookMethods
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"POST"
argument_list|)
return|;
block|}
DECL|method|getConfiguration ()
specifier|public
name|TelegramConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
DECL|method|setConfiguration (TelegramConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|TelegramConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
block|}
end_class

end_unit

