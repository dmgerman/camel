begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.telegram
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|model
operator|.
name|Update
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|service
operator|.
name|TelegramServiceRestBotAPIAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|webhook
operator|.
name|WebhookCapableEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|webhook
operator|.
name|WebhookConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ScheduledPollEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|AsyncHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|AsyncHttpClientConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|DefaultAsyncHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|DefaultAsyncHttpClientConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asynchttpclient
operator|.
name|proxy
operator|.
name|ProxyServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|telegram
operator|.
name|util
operator|.
name|TelegramMessageHelper
operator|.
name|populateExchange
import|;
end_import

begin_comment
comment|/**  * The telegram component provides access to the<a href="https://core.telegram.org/bots/api">Telegram Bot API</a>.  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"2.18.0"
argument_list|,
name|scheme
operator|=
literal|"telegram"
argument_list|,
name|title
operator|=
literal|"Telegram"
argument_list|,
name|syntax
operator|=
literal|"telegram:type"
argument_list|,
name|label
operator|=
literal|"chat"
argument_list|)
DECL|class|TelegramEndpoint
specifier|public
class|class
name|TelegramEndpoint
extends|extends
name|ScheduledPollEndpoint
implements|implements
name|WebhookCapableEndpoint
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TelegramEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UriParam
DECL|field|configuration
specifier|private
name|TelegramConfiguration
name|configuration
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|)
DECL|field|clientConfig
specifier|private
name|AsyncHttpClientConfig
name|clientConfig
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"advanced"
argument_list|,
name|defaultValue
operator|=
literal|""
operator|+
operator|(
literal|4
operator|*
literal|1024
expr|)
block|)
DECL|field|bufferSize
specifier|private
name|int
name|bufferSize
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
end_class

begin_decl_stmt
DECL|field|webhookConfiguration
specifier|private
name|WebhookConfiguration
name|webhookConfiguration
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|client
specifier|private
name|AsyncHttpClient
name|client
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|telegramService
specifier|private
name|TelegramService
name|telegramService
decl_stmt|;
end_decl_stmt

begin_constructor
DECL|method|TelegramEndpoint ( String endpointUri, Component component, TelegramConfiguration configuration, AsyncHttpClient client, AsyncHttpClientConfig clientConfig)
specifier|public
name|TelegramEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|TelegramConfiguration
name|configuration
parameter_list|,
name|AsyncHttpClient
name|client
parameter_list|,
name|AsyncHttpClientConfig
name|clientConfig
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|clientConfig
operator|=
name|clientConfig
expr_stmt|;
block|}
end_constructor

begin_function
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|client
operator|==
literal|null
condition|)
block|{
name|DefaultAsyncHttpClientConfig
operator|.
name|Builder
name|builder
init|=
name|clientConfig
operator|!=
literal|null
condition|?
operator|new
name|DefaultAsyncHttpClientConfig
operator|.
name|Builder
argument_list|(
name|clientConfig
argument_list|)
else|:
operator|new
name|DefaultAsyncHttpClientConfig
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getProxyHost
argument_list|()
argument_list|)
operator|&&
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|configuration
operator|.
name|getProxyPort
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setup http proxy host:{} port:{} for TelegramService"
argument_list|,
name|configuration
operator|.
name|getProxyHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getProxyPort
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProxyServer
argument_list|(
operator|new
name|ProxyServer
operator|.
name|Builder
argument_list|(
name|configuration
operator|.
name|getProxyHost
argument_list|()
argument_list|,
name|configuration
operator|.
name|getProxyPort
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AsyncHttpClientConfig
name|config
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|=
operator|new
name|DefaultAsyncHttpClient
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|telegramService
operator|==
literal|null
condition|)
block|{
name|telegramService
operator|=
operator|new
name|TelegramServiceRestBotAPIAdapter
argument_list|(
name|client
argument_list|,
name|bufferSize
argument_list|,
name|configuration
operator|.
name|getBaseUri
argument_list|()
argument_list|,
name|configuration
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
comment|// ensure client is closed when stopping
if|if
condition|(
name|client
operator|!=
literal|null
operator|&&
operator|!
name|client
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|client
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|TelegramProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|TelegramConsumer
name|consumer
init|=
operator|new
name|TelegramConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
end_function

begin_function
DECL|method|createExchange (Update update)
specifier|public
name|Exchange
name|createExchange
parameter_list|(
name|Update
name|update
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|super
operator|.
name|createExchange
argument_list|()
decl_stmt|;
name|populateExchange
argument_list|(
name|exchange
argument_list|,
name|update
argument_list|)
expr_stmt|;
return|return
name|exchange
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|createWebhookHandler (Processor next)
specifier|public
name|Processor
name|createWebhookHandler
parameter_list|(
name|Processor
name|next
parameter_list|)
block|{
return|return
operator|new
name|TelegramWebhookProcessor
argument_list|(
name|next
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|registerWebhook ()
specifier|public
name|void
name|registerWebhook
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|telegramService
operator|.
name|setWebhook
argument_list|(
name|webhookConfiguration
operator|.
name|computeFullExternalUrl
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"The Telegram API refused to register a webhook"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|unregisterWebhook ()
specifier|public
name|void
name|unregisterWebhook
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|telegramService
operator|.
name|removeWebhook
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"The Telegram API refused to unregister the webhook"
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|getWebhookConfiguration ()
specifier|public
name|WebhookConfiguration
name|getWebhookConfiguration
parameter_list|()
block|{
return|return
name|webhookConfiguration
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|setWebhookConfiguration (WebhookConfiguration webhookConfiguration)
specifier|public
name|void
name|setWebhookConfiguration
parameter_list|(
name|WebhookConfiguration
name|webhookConfiguration
parameter_list|)
block|{
name|this
operator|.
name|webhookConfiguration
operator|=
name|webhookConfiguration
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getWebhookMethods ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getWebhookMethods
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"POST"
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getConfiguration ()
specifier|public
name|TelegramConfiguration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
end_function

begin_function
DECL|method|setConfiguration (TelegramConfiguration configuration)
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|TelegramConfiguration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getTelegramService ()
specifier|public
name|TelegramService
name|getTelegramService
parameter_list|()
block|{
return|return
name|telegramService
return|;
block|}
end_function

begin_function
DECL|method|getClient ()
specifier|public
name|AsyncHttpClient
name|getClient
parameter_list|()
block|{
return|return
name|client
return|;
block|}
end_function

begin_comment
comment|/**      * To use a custom {@link AsyncHttpClient}      */
end_comment

begin_function
DECL|method|setClient (AsyncHttpClient client)
specifier|public
name|void
name|setClient
parameter_list|(
name|AsyncHttpClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getClientConfig ()
specifier|public
name|AsyncHttpClientConfig
name|getClientConfig
parameter_list|()
block|{
return|return
name|clientConfig
return|;
block|}
end_function

begin_comment
comment|/**      * To configure the AsyncHttpClient to use a custom com.ning.http.client.AsyncHttpClientConfig instance.      */
end_comment

begin_function
DECL|method|setClientConfig (AsyncHttpClientConfig clientConfig)
specifier|public
name|void
name|setClientConfig
parameter_list|(
name|AsyncHttpClientConfig
name|clientConfig
parameter_list|)
block|{
name|this
operator|.
name|clientConfig
operator|=
name|clientConfig
expr_stmt|;
block|}
end_function

begin_function
DECL|method|getBufferSize ()
specifier|public
name|int
name|getBufferSize
parameter_list|()
block|{
return|return
name|bufferSize
return|;
block|}
end_function

begin_comment
comment|/**      * The initial in-memory buffer size used when transferring data between Camel and AHC Client.      */
end_comment

begin_function
DECL|method|setBufferSize (int bufferSize)
specifier|public
name|void
name|setBufferSize
parameter_list|(
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|bufferSize
operator|=
name|bufferSize
expr_stmt|;
block|}
end_function

unit|}
end_unit

