begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|playground
package|package
name|playground
package|;
end_package

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|OkHttpClient
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|sse
operator|.
name|EventSource
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|sse
operator|.
name|EventSourceListener
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|sse
operator|.
name|EventSources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|ExponentialBackOffStrategy
import|;
end_import

begin_class
DECL|class|OkHTTP
specifier|public
class|class
name|OkHTTP
block|{
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|String
name|url
init|=
literal|"https://bot.sapp.ir/NQcJlsDAviBNaUWPQpLZS3UkUbfiY316QpULBvpZze1aJ4r_RkhQaV9pC0IqRfOl4rBG2TbJc1n2jD4zsIrSirDcb1x_i5wsRQFsNE6s_tS7YMX2kyIYycLI2g6mXbyXB4YBaD-dSWSnPUxV/getMessage"
decl_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
operator|.
name|Builder
argument_list|()
operator|.
name|url
argument_list|(
name|url
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|OkHttpClient
name|client
init|=
operator|new
name|OkHttpClient
operator|.
name|Builder
argument_list|()
operator|.
name|writeTimeout
argument_list|(
name|Duration
operator|.
name|ZERO
argument_list|)
operator|.
name|readTimeout
argument_list|(
name|Duration
operator|.
name|ZERO
argument_list|)
operator|.
name|connectTimeout
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|callTimeout
argument_list|(
name|Duration
operator|.
name|ZERO
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ExponentialBackOffStrategy
name|backOffStrategy
init|=
operator|new
name|ExponentialBackOffStrategy
argument_list|(
literal|1000l
argument_list|,
literal|2l
argument_list|,
literal|3600_000L
argument_list|)
decl_stmt|;
name|ReconnectableEventSourceListener
name|connection
init|=
operator|new
name|ReconnectableEventSourceListener
argument_list|(
name|client
argument_list|,
name|request
argument_list|,
literal|10
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|onBeforeConnect
parameter_list|()
block|{
try|try
block|{
name|backOffStrategy
operator|.
name|waitBeforeRetry
argument_list|(
name|connectionRetry
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
DECL|class|ReconnectableEventSourceListener
specifier|static
class|class
name|ReconnectableEventSourceListener
extends|extends
name|EventSourceListener
block|{
DECL|field|client
name|OkHttpClient
name|client
decl_stmt|;
DECL|field|maxConnectionRetry
specifier|final
name|int
name|maxConnectionRetry
decl_stmt|;
DECL|field|connectionRetry
name|int
name|connectionRetry
init|=
literal|0
decl_stmt|;
DECL|field|request
name|Request
name|request
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|EventSource
operator|.
name|Factory
name|factory
decl_stmt|;
DECL|method|ReconnectableEventSourceListener (OkHttpClient client,Request request ,int maxConnectionRetry)
specifier|public
name|ReconnectableEventSourceListener
parameter_list|(
name|OkHttpClient
name|client
parameter_list|,
name|Request
name|request
parameter_list|,
name|int
name|maxConnectionRetry
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|maxConnectionRetry
operator|=
name|maxConnectionRetry
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|factory
operator|=
name|EventSources
operator|.
name|createFactory
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|onBeforeConnect
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|maxConnectionRetry
operator|>=
name|connectionRetry
operator|||
name|maxConnectionRetry
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|connectionRetry
argument_list|)
expr_stmt|;
name|factory
operator|.
name|newEventSource
argument_list|(
name|request
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onBeforeConnect ()
specifier|protected
name|boolean
name|onBeforeConnect
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onOpen (EventSource eventSource, Response response)
specifier|public
name|void
name|onOpen
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"OPEN"
argument_list|)
expr_stmt|;
name|connectionRetry
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClosed (EventSource eventSource)
specifier|public
name|void
name|onClosed
parameter_list|(
name|EventSource
name|eventSource
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"CLOSED"
argument_list|)
expr_stmt|;
name|connectionRetry
operator|++
expr_stmt|;
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (EventSource eventSource, Throwable t, Response response)
specifier|public
name|void
name|onFailure
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|eventSource
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FAILURE      "
operator|+
name|eventSource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|connectionRetry
operator|++
expr_stmt|;
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

