begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.soroushbot.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MultiQueueWithTopicThreadPoolTest
specifier|public
class|class
name|MultiQueueWithTopicThreadPoolTest
block|{
annotation|@
name|Test
DECL|method|singleThreadSuccessful ()
specifier|public
name|void
name|singleThreadSuccessful
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LinkedBlockingQueue
argument_list|<
name|Integer
argument_list|>
name|finalResultsOrder
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|capacity
init|=
literal|10
decl_stmt|;
name|Integer
index|[]
name|results
init|=
operator|new
name|Integer
index|[
name|capacity
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|MultiQueueWithTopicThreadPool
name|pool
init|=
operator|new
name|MultiQueueWithTopicThreadPool
argument_list|(
literal|1
argument_list|,
name|capacity
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|pool
operator|.
name|execute
argument_list|(
name|i
operator|%
literal|2
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|capacity
operator|-
name|finalI
operator|)
operator|*
literal|100
argument_list|)
expr_stmt|;
name|finalResultsOrder
operator|.
name|add
argument_list|(
name|finalI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|capacity
operator|*
operator|(
name|capacity
operator|+
literal|2
operator|)
operator|*
literal|100
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// wait enough time for all task to be done
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"order of thread that executed is not what is expected"
argument_list|,
name|results
argument_list|,
name|finalResultsOrder
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|singleThreadPoolSizeExceeded ()
specifier|public
name|void
name|singleThreadPoolSizeExceeded
parameter_list|()
block|{
name|int
name|capacity
init|=
literal|10
decl_stmt|;
name|MultiQueueWithTopicThreadPool
name|pool
init|=
operator|new
name|MultiQueueWithTopicThreadPool
argument_list|(
literal|1
argument_list|,
name|capacity
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
operator|+
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|pool
operator|.
name|execute
argument_list|(
name|i
operator|%
literal|3
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multiThreadEndOrderSuccessful ()
specifier|public
name|void
name|multiThreadEndOrderSuccessful
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LinkedBlockingQueue
argument_list|<
name|Integer
argument_list|>
name|finalResultsOrder
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|totalJobs
init|=
literal|9
decl_stmt|;
name|Integer
index|[]
name|results
init|=
operator|new
name|Integer
index|[
name|totalJobs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalJobs
operator|/
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|/**               0 1 2 3 4 5 6 7 8               0 3 6 1 4 7 2 5 8<- start order should be this              */
name|results
index|[
name|i
index|]
operator|=
name|i
operator|*
literal|3
expr_stmt|;
name|results
index|[
name|i
operator|+
literal|3
index|]
operator|=
literal|3
operator|*
name|i
operator|+
literal|1
expr_stmt|;
name|results
index|[
name|i
operator|+
literal|6
index|]
operator|=
literal|3
operator|*
name|i
operator|+
literal|2
expr_stmt|;
block|}
name|MultiQueueWithTopicThreadPool
name|pool
init|=
operator|new
name|MultiQueueWithTopicThreadPool
argument_list|(
literal|3
argument_list|,
name|totalJobs
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalJobs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|pool
operator|.
name|execute
argument_list|(
name|i
operator|%
literal|3
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|int
name|mod3
init|=
name|finalI
operator|%
literal|3
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|mod3
operator|==
literal|0
condition|?
literal|1
else|:
name|mod3
operator|==
literal|1
condition|?
literal|4
else|:
literal|13
operator|)
operator|*
literal|10
argument_list|)
expr_stmt|;
name|finalResultsOrder
operator|.
name|add
argument_list|(
name|finalI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|130
operator|*
literal|3
operator|+
literal|500
argument_list|)
expr_stmt|;
comment|// wait enough time for all task to be done
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"order of thread that executed is not what is expected"
argument_list|,
name|results
argument_list|,
name|finalResultsOrder
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|multiThreadStartOrderSuccessful ()
specifier|public
name|void
name|multiThreadStartOrderSuccessful
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LinkedBlockingQueue
argument_list|<
name|Integer
argument_list|>
name|finalResultsOrder
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|totalJobs
init|=
literal|9
decl_stmt|;
name|Integer
index|[]
name|expectedResults
init|=
operator|new
name|Integer
index|[
name|totalJobs
index|]
decl_stmt|;
name|expectedResults
index|[
literal|3
index|]
operator|=
literal|3
expr_stmt|;
name|expectedResults
index|[
literal|4
index|]
operator|=
literal|6
expr_stmt|;
name|expectedResults
index|[
literal|5
index|]
operator|=
literal|4
expr_stmt|;
name|expectedResults
index|[
literal|6
index|]
operator|=
literal|7
expr_stmt|;
name|expectedResults
index|[
literal|7
index|]
operator|=
literal|5
expr_stmt|;
name|expectedResults
index|[
literal|8
index|]
operator|=
literal|8
expr_stmt|;
name|MultiQueueWithTopicThreadPool
name|pool
init|=
operator|new
name|MultiQueueWithTopicThreadPool
argument_list|(
literal|3
argument_list|,
name|totalJobs
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalJobs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|finalI
init|=
name|i
decl_stmt|;
name|pool
operator|.
name|execute
argument_list|(
name|i
operator|%
literal|3
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|int
name|mod3
init|=
name|finalI
operator|%
literal|3
decl_stmt|;
name|finalResultsOrder
operator|.
name|add
argument_list|(
name|finalI
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|mod3
operator|==
literal|0
condition|?
literal|1
else|:
name|mod3
operator|==
literal|1
condition|?
literal|4
else|:
literal|13
operator|)
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|130
operator|*
literal|3
operator|+
literal|100
argument_list|)
expr_stmt|;
comment|// wait enough time for all task to be done
name|Object
index|[]
name|finalResultsOrderList
init|=
name|finalResultsOrder
operator|.
name|toArray
argument_list|()
decl_stmt|;
comment|//order of first three job is not fully determined so we set them to null
name|finalResultsOrderList
index|[
literal|0
index|]
operator|=
name|finalResultsOrderList
index|[
literal|1
index|]
operator|=
name|finalResultsOrderList
index|[
literal|2
index|]
operator|=
literal|null
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"order of thread that executed is not what is expected"
argument_list|,
name|expectedResults
argument_list|,
name|finalResultsOrderList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|multiThreadPoolSizeExceeded ()
specifier|public
name|void
name|multiThreadPoolSizeExceeded
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|LinkedBlockingQueue
argument_list|<
name|Integer
argument_list|>
name|finalResultsOrder
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|capacity
init|=
literal|3
decl_stmt|;
name|int
name|poolSize
init|=
literal|3
decl_stmt|;
name|MultiQueueWithTopicThreadPool
name|pool
init|=
operator|new
name|MultiQueueWithTopicThreadPool
argument_list|(
name|poolSize
argument_list|,
name|capacity
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|capacity
operator|+
literal|1
operator|)
operator|*
name|poolSize
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|pool
operator|.
name|execute
argument_list|(
name|i
operator|%
name|poolSize
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

