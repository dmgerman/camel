begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.soroushbot.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_class
DECL|class|SoroushMockServer
specifier|public
class|class
name|SoroushMockServer
extends|extends
name|Thread
block|{
DECL|field|jettyServer
specifier|private
name|Server
name|jettyServer
decl_stmt|;
DECL|field|port
specifier|private
name|Integer
name|port
init|=
literal|8080
decl_stmt|;
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|ServletContextHandler
name|context
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|context
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|==
literal|null
condition|)
block|{
name|port
operator|=
literal|0
expr_stmt|;
block|}
name|jettyServer
operator|=
operator|new
name|Server
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|jettyServer
operator|.
name|setHandler
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|ServletHolder
name|jerseyServlet
init|=
name|context
operator|.
name|addServlet
argument_list|(
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|servlet
operator|.
name|ServletContainer
operator|.
name|class
argument_list|,
literal|"/*"
argument_list|)
decl_stmt|;
name|jerseyServlet
operator|.
name|setInitOrder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Tells the Jersey Servlet which REST service/class to load.
name|jerseyServlet
operator|.
name|setInitParameter
argument_list|(
literal|"jersey.config.server.provider.classnames"
argument_list|,
name|SoroushBotWS
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|jerseyServlet
operator|.
name|setInitParameter
argument_list|(
literal|"javax.ws.rs.Application"
argument_list|,
name|SoroushBotApplication
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jettyServer
operator|.
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|jettyServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|port
operator|=
name|jettyServer
operator|.
name|getURI
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPort ()
specifier|public
name|Integer
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (Integer port)
specifier|public
name|void
name|setPort
parameter_list|(
name|Integer
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
block|}
end_class

end_unit

