begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.soroushbot.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|OkHttpClient
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|sse
operator|.
name|EventSource
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|sse
operator|.
name|EventSourceListener
import|;
end_import

begin_import
import|import
name|okhttp3
operator|.
name|sse
operator|.
name|EventSources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|SoroushAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|SoroushMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|service
operator|.
name|SoroushService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultConsumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|ordinal
import|;
end_import

begin_comment
comment|/**  * this component handle logic for getting message from Soroush server and for each message  * it calls abstract function {@link SoroushBotAbstractConsumer#sendExchange(Exchange)}  * each subclass should handle how it will start the processing of the exchange  */
end_comment

begin_class
DECL|class|SoroushBotAbstractConsumer
specifier|public
specifier|abstract
class|class
name|SoroushBotAbstractConsumer
extends|extends
name|DefaultConsumer
implements|implements
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownPrepared
block|{
DECL|field|endpoint
name|SoroushBotEndpoint
name|endpoint
decl_stmt|;
comment|/**      * {@link ObjectMapper} for parse message JSON      */
DECL|field|objectMapper
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|field|shutdown
name|boolean
name|shutdown
decl_stmt|;
DECL|field|lastMessageReceived
name|long
name|lastMessageReceived
decl_stmt|;
DECL|field|connection
specifier|private
name|ReconnectableEventSourceListener
name|connection
decl_stmt|;
DECL|method|SoroushBotAbstractConsumer (SoroushBotEndpoint endpoint, Processor processor)
specifier|public
name|SoroushBotAbstractConsumer
parameter_list|(
name|SoroushBotEndpoint
name|endpoint
parameter_list|,
name|Processor
name|processor
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|processor
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|public
name|void
name|doStart
parameter_list|()
block|{
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|handleExceptionThrownWhileCreatingOrProcessingExchange (Exchange exchange, SoroushMessage soroushMessage, Exception ex)
specifier|protected
specifier|final
name|void
name|handleExceptionThrownWhileCreatingOrProcessingExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|,
name|SoroushMessage
name|soroushMessage
parameter_list|,
name|Exception
name|ex
parameter_list|)
block|{
comment|//set originalMessage property to the created soroushMessage to let  Error Handler access the message
name|exchange
operator|.
name|setProperty
argument_list|(
literal|"OriginalMessage"
argument_list|,
name|soroushMessage
argument_list|)
expr_stmt|;
comment|//use this instead of handleException() to manually set the exchange.
name|getExceptionHandler
argument_list|()
operator|.
name|handleException
argument_list|(
literal|"message can not be processed due to :"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|exchange
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|/**      * handle how processing of the exchange should be started      *      * @param exchange      */
DECL|method|sendExchange (Exchange exchange)
specifier|protected
specifier|abstract
name|void
name|sendExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|run ()
specifier|private
name|void
name|run
parameter_list|()
block|{
name|lastMessageReceived
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Request
name|request
init|=
operator|new
name|Request
operator|.
name|Builder
argument_list|()
operator|.
name|url
argument_list|(
name|SoroushService
operator|.
name|get
argument_list|()
operator|.
name|generateUrl
argument_list|(
name|endpoint
operator|.
name|getAuthorizationToken
argument_list|()
argument_list|,
name|SoroushAction
operator|.
name|getMessage
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OkHttpClient
name|client
init|=
operator|new
name|OkHttpClient
operator|.
name|Builder
argument_list|()
operator|.
name|connectTimeout
argument_list|(
name|endpoint
operator|.
name|getConnectionTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|writeTimeout
argument_list|(
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|readTimeout
argument_list|(
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|connection
operator|=
operator|new
name|ReconnectableEventSourceListener
argument_list|(
name|client
argument_list|,
name|request
argument_list|,
name|endpoint
operator|.
name|getMaxConnectionRetry
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|onBeforeConnect
parameter_list|()
block|{
name|int
name|connectionRetry
init|=
name|getConnectionRetry
argument_list|()
decl_stmt|;
try|try
block|{
name|endpoint
operator|.
name|waitBeforeRetry
argument_list|(
name|connectionRetry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|shutdown
condition|)
block|{
if|if
condition|(
name|connectionRetry
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"connecting to getMessage from soroush"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"connection is closed. retrying for the "
operator|+
name|ordinal
argument_list|(
name|connectionRetry
argument_list|)
operator|+
literal|" time(s)... "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|!
name|shutdown
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|super
operator|.
name|onOpen
argument_list|(
name|eventSource
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"connection established"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|handleClose
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|boolean
name|manuallyClosed
parameter_list|)
block|{
if|if
condition|(
operator|!
name|manuallyClosed
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"connection got closed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"manually reconnecting to ensure we have live connection"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|handleFailure
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|boolean
name|manuallyClosed
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
operator|!
name|manuallyClosed
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"connection failed due to following error"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"manually reconnecting to ensure we have live connection"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|endpoint
operator|.
name|createExchange
argument_list|()
decl_stmt|;
try|try
block|{
name|SoroushMessage
name|soroushMessage
init|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|data
argument_list|,
name|SoroushMessage
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setBody
argument_list|(
name|soroushMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"event data is: "
operator|+
name|data
argument_list|)
expr_stmt|;
block|}
comment|// if autoDownload is true, download the resource if provided in the message
if|if
condition|(
name|endpoint
operator|.
name|isAutoDownload
argument_list|()
condition|)
block|{
name|endpoint
operator|.
name|handleDownloadFiles
argument_list|(
name|soroushMessage
argument_list|)
expr_stmt|;
block|}
comment|//let each subclass decide how to start processing of each exchange
name|sendExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|handleExceptionThrownWhileCreatingOrProcessingExchange
argument_list|(
name|exchange
argument_list|,
name|soroushMessage
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"can not parse data due to following error"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFinishProcess
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"max connection retry reached! we are closing the endpoint!"
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|endpoint
operator|.
name|getCamelContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|newSingleThreadScheduledExecutor
argument_list|(
name|this
argument_list|,
literal|"health check"
argument_list|)
operator|.
name|scheduleAtFixedRate
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|lastMessageReceived
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|endpoint
operator|.
name|getReconnectIdleConnectionTimeout
argument_list|()
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
name|endpoint
operator|.
name|getReconnectIdleConnectionTimeout
argument_list|()
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareShutdown (boolean suspendOnly, boolean forced)
specifier|public
name|void
name|prepareShutdown
parameter_list|(
name|boolean
name|suspendOnly
parameter_list|,
name|boolean
name|forced
parameter_list|)
block|{
if|if
condition|(
operator|!
name|suspendOnly
condition|)
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
DECL|class|ReconnectableEventSourceListener
class|class
name|ReconnectableEventSourceListener
extends|extends
name|EventSourceListener
block|{
DECL|field|manuallyClosed
specifier|private
name|boolean
name|manuallyClosed
decl_stmt|;
DECL|field|client
specifier|private
name|OkHttpClient
name|client
decl_stmt|;
DECL|field|maxConnectionRetry
specifier|private
specifier|final
name|int
name|maxConnectionRetry
decl_stmt|;
DECL|field|connectionRetry
specifier|private
name|int
name|connectionRetry
decl_stmt|;
DECL|field|request
specifier|private
name|Request
name|request
decl_stmt|;
DECL|field|factory
specifier|private
specifier|final
name|EventSource
operator|.
name|Factory
name|factory
decl_stmt|;
DECL|field|eventSource
specifier|private
name|EventSource
name|eventSource
decl_stmt|;
DECL|method|ReconnectableEventSourceListener (OkHttpClient client, Request request, int maxConnectionRetry)
specifier|public
name|ReconnectableEventSourceListener
parameter_list|(
name|OkHttpClient
name|client
parameter_list|,
name|Request
name|request
parameter_list|,
name|int
name|maxConnectionRetry
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|maxConnectionRetry
operator|=
name|maxConnectionRetry
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|factory
operator|=
name|EventSources
operator|.
name|createFactory
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
DECL|method|reconnect ()
specifier|public
name|void
name|reconnect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|manuallyClosed
condition|)
block|{
name|connectionRetry
operator|++
expr_stmt|;
block|}
else|else
block|{
name|manuallyClosed
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|eventSource
operator|!=
literal|null
condition|)
block|{
name|eventSource
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
name|connect
argument_list|()
expr_stmt|;
block|}
DECL|method|connect ()
specifier|public
name|void
name|connect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|onBeforeConnect
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|maxConnectionRetry
operator|>=
name|connectionRetry
operator|||
name|maxConnectionRetry
operator|<
literal|0
condition|)
block|{
name|eventSource
operator|=
name|factory
operator|.
name|newEventSource
argument_list|(
name|request
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onFinishProcess
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|manuallyClosed
operator|=
literal|true
expr_stmt|;
name|eventSource
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
DECL|method|onFinishProcess ()
specifier|public
name|void
name|onFinishProcess
parameter_list|()
block|{     }
DECL|method|onBeforeConnect ()
specifier|protected
name|boolean
name|onBeforeConnect
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onOpen (EventSource eventSource, Response response)
specifier|public
name|void
name|onOpen
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
name|connectionRetry
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClosed (EventSource eventSource)
specifier|public
specifier|final
name|void
name|onClosed
parameter_list|(
name|EventSource
name|eventSource
parameter_list|)
block|{
if|if
condition|(
name|handleClose
argument_list|(
name|eventSource
argument_list|,
name|manuallyClosed
argument_list|)
condition|)
block|{
name|reconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleClose (EventSource eventSource, boolean manuallyClosed)
specifier|protected
name|boolean
name|handleClose
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|boolean
name|manuallyClosed
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onFailure (EventSource eventSource, Throwable t, Response response)
specifier|public
specifier|final
name|void
name|onFailure
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|handleFailure
argument_list|(
name|eventSource
argument_list|,
name|manuallyClosed
argument_list|,
name|t
argument_list|,
name|response
argument_list|)
condition|)
block|{
name|reconnect
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|handleFailure (EventSource eventSource, boolean manuallyClosed, Throwable t, Response response)
specifier|protected
name|boolean
name|handleFailure
parameter_list|(
name|EventSource
name|eventSource
parameter_list|,
name|boolean
name|manuallyClosed
parameter_list|,
name|Throwable
name|t
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
DECL|method|getConnectionRetry ()
specifier|public
name|int
name|getConnectionRetry
parameter_list|()
block|{
return|return
name|connectionRetry
return|;
block|}
block|}
end_class

end_unit

