begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.soroushbot.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|WebTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Producer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|SoroushMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|response
operator|.
name|UploadFileResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|service
operator|.
name|SoroushService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|BackOffStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|ExponentialBackOffStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|FixedBackOffStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|LinearBackOffStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|MaximumConnectionRetryReachedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|SoroushException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|media
operator|.
name|multipart
operator|.
name|MultiPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|media
operator|.
name|multipart
operator|.
name|file
operator|.
name|StreamDataBodyPart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * this class represents Soroush Endpoint, it is also a bean containing the configuration of the Endpoint  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|firstVersion
operator|=
literal|"3.0"
argument_list|,
name|scheme
operator|=
literal|"soroush"
argument_list|,
name|title
operator|=
literal|"SoroushBot"
argument_list|,
name|syntax
operator|=
literal|"soroush:<endpoint>[/authorizationToken][?options]"
argument_list|,
name|label
operator|=
literal|"chat"
argument_list|)
DECL|class|SoroushBotEndpoint
specifier|public
class|class
name|SoroushBotEndpoint
extends|extends
name|DefaultEndpoint
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SoroushBotEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|name
operator|=
literal|"endpoint"
argument_list|,
name|enums
operator|=
literal|"Endpoint"
argument_list|,
name|javaType
operator|=
literal|"Endpoint"
argument_list|,
name|description
operator|=
literal|"The endpoint type. it support `getMessage` as consumer and `sendMessage`,`uploadFile`,`downloadFile` as producer"
argument_list|)
annotation|@
name|Metadata
argument_list|(
name|required
operator|=
literal|true
argument_list|)
DECL|field|type
name|Endpoint
name|type
decl_stmt|;
annotation|@
name|UriPath
argument_list|(
name|label
operator|=
literal|"global,security"
argument_list|,
name|description
operator|=
literal|"The authorization token for using"
operator|+
literal|" the bot (ask the @mrbot) e.g. 9yDv09nqKvP9CkBGKNmKQHir1dj2qLpN-YWa8hP7Rm3LK\"\n"
operator|+
literal|"            + \"3MqQXYdXZIA5W4e0agPiUb-3eUKX69ozUNdY9yZBMlJiwnlksslkjWjsxcARo5cYtDnKTElig0xa\"\n"
operator|+
literal|"            + \"e1Cjt1Bexz2cw-t6cJ7t1f "
argument_list|)
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global,security"
argument_list|,
name|description
operator|=
literal|"The authorization token for using"
operator|+
literal|" the bot. if uri path does not contain authorization token, this token will be used."
argument_list|,
name|secret
operator|=
literal|true
argument_list|)
DECL|field|authorizationToken
name|String
name|authorizationToken
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global"
argument_list|,
name|description
operator|=
literal|"Connection timeout in ms when connecting to soroush API"
argument_list|,
name|defaultValue
operator|=
literal|"30000"
argument_list|)
DECL|field|connectionTimeout
name|Integer
name|connectionTimeout
init|=
literal|30000
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global"
argument_list|,
name|description
operator|=
literal|"Maximum connection retry when fail to connect to soroush API, if the quota is reached,"
operator|+
literal|" `MaximumConnectionRetryReachedException` is thrown for that message."
argument_list|,
name|defaultValue
operator|=
literal|"4"
argument_list|)
DECL|field|maxConnectionRetry
name|Integer
name|maxConnectionRetry
init|=
literal|4
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"getMessage,consumer"
argument_list|,
name|description
operator|=
literal|"Number of Thread created by consumer in the route."
operator|+
literal|" if you use this method for parallelism, it is guaranteed that messages from same user always execute in the same"
operator|+
literal|" thread and therefore messages from the same user are processed sequentially"
argument_list|,
name|defaultValue
operator|=
literal|"1"
argument_list|,
name|defaultValueNote
operator|=
literal|"using SoroushBotSingleThreadConsumer"
argument_list|)
DECL|field|concurrentConsumers
name|Integer
name|concurrentConsumers
init|=
literal|1
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"getMessage,consumer"
argument_list|,
name|description
operator|=
literal|"Maximum capacity of each queue when `concurrentConsumers` is greater than 1."
operator|+
literal|" if a queue become full, every message that should go to that queue will be dropped. If `bridgeErrorHandler`"
operator|+
literal|" is set to `true`, an exchange with `CongestionException` is directed to ErrorHandler. You can then processed the"
operator|+
literal|" error using `onException(CongestionException.class)` route"
argument_list|,
name|defaultValue
operator|=
literal|"0"
argument_list|,
name|defaultValueNote
operator|=
literal|"infinite capacity"
argument_list|)
DECL|field|queueCapacityPerThread
name|Integer
name|queueCapacityPerThread
init|=
literal|0
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"sendMessage"
argument_list|,
name|description
operator|=
literal|"Automatically upload attachments when a message goes to the sendMessage endpoint "
operator|+
literal|"and the `SoroushMessage.file` (`SoroushMessage.thumbnail`) has been set and `SoroushMessage.fileUrl`(`SoroushMessage.thumbnailUrl`) is null"
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|autoUploadFile
name|Boolean
name|autoUploadFile
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"sendMessage,uploadFile"
argument_list|,
name|description
operator|=
literal|"Force to  upload `SoroushMessage.file`(`SoroushMessage.thumbnail`) if exists, even if the "
operator|+
literal|"`SoroushMessage.fileUrl`(`SoroushMessage.thumbnailUrl`) is not null in the message"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|forceUpload
name|Boolean
name|forceUpload
init|=
literal|false
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"getMessage,downloadFile"
argument_list|,
name|description
operator|=
literal|"If true, when downloading an attached file, thumbnail will be downloaded if provided in the message."
operator|+
literal|" Otherwise, only the file will be downloaded "
argument_list|,
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|downloadThumbnail
name|Boolean
name|downloadThumbnail
init|=
literal|true
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"downloadFile"
argument_list|,
name|description
operator|=
literal|"Force to download `SoroushMessage.fileUrl`(`SoroushMessage.thumbnailUrl`)"
operator|+
literal|" if exists, even if the `SoroushMessage.file`(`SoroushMessage.thumbnail`) was not null in that message"
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|forceDownload
name|Boolean
name|forceDownload
init|=
literal|false
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"getMessage"
argument_list|,
name|description
operator|=
literal|"Automatically download `SoroushMessage.fileUrl` and `SoroushMessage.thumbnailUrl` "
operator|+
literal|"if exists for the message and store them in `SoroushMessage.file` and `SoroushMessage.thumbnail` field "
argument_list|,
name|defaultValue
operator|=
literal|"false"
argument_list|)
DECL|field|autoDownload
name|Boolean
name|autoDownload
init|=
literal|false
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global"
argument_list|,
name|description
operator|=
literal|"Waiting time before retry failed request (Millisecond)."
operator|+
literal|" If backOffStrategy is not Fixed this is the based value for computing back off waiting time."
operator|+
literal|" the first retry is always happen immediately after failure and retryWaitingTime do not apply to the first retry."
argument_list|,
name|defaultValue
operator|=
literal|"1000"
argument_list|)
DECL|field|retryWaitingTime
name|Long
name|retryWaitingTime
init|=
literal|1000L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global"
argument_list|,
name|description
operator|=
literal|"The strategy to backoff in case of connection failure. Currently 3 strategies are supported:"
operator|+
literal|" 1. `Exponential` (default): It multiply `retryWaitingTime` by `retryExponentialCoefficient` after each connection failure."
operator|+
literal|" 2. `Linear`: It increase `retryWaitingTime` by `retryLinearIncrement` after each connection failure."
operator|+
literal|" 3. `Fixed`: Always use `retryWaitingTime` as the time between retries."
argument_list|,
name|defaultValue
operator|=
literal|"Exponential"
argument_list|)
DECL|field|backOffStrategy
name|String
name|backOffStrategy
init|=
literal|"Exponential"
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global"
argument_list|,
name|description
operator|=
literal|"Coefficient to compute back off time when using `Exponential` Back Off strategy"
argument_list|,
name|defaultValue
operator|=
literal|"2"
argument_list|)
DECL|field|retryExponentialCoefficient
name|Long
name|retryExponentialCoefficient
init|=
literal|2L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global"
argument_list|,
name|description
operator|=
literal|"The amount of time (in millisecond) which adds to waiting time when using `Linear` back off strategy"
argument_list|,
name|defaultValue
operator|=
literal|"10000"
argument_list|)
DECL|field|retryLinearIncrement
name|Long
name|retryLinearIncrement
init|=
literal|10000L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"global"
argument_list|,
name|description
operator|=
literal|"Maximum amount of time (in millisecond) a thread wait before retrying failed request."
argument_list|,
name|defaultValue
operator|=
literal|"3600000"
argument_list|)
DECL|field|maxRetryWaitingTime
name|Long
name|maxRetryWaitingTime
init|=
literal|3600000L
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|label
operator|=
literal|"getMessage"
argument_list|,
name|description
operator|=
literal|"The timeout in millisecond to reconnect the existing getMessage connection"
operator|+
literal|" to ensure that the connection is always live and does not dead without notifying the bot. this value should not be changed."
argument_list|,
name|defaultValue
operator|=
literal|"300000"
argument_list|)
DECL|field|reconnectIdleConnectionTimeout
specifier|private
name|long
name|reconnectIdleConnectionTimeout
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**      * lazy instance of {@link WebTarget} to used for uploading file to soroush Server, since the url is always the same, we reuse this WebTarget for all requests      */
DECL|field|uploadFileTarget
specifier|private
name|WebTarget
name|uploadFileTarget
decl_stmt|;
comment|/**      * lazy instance of webTarget to used for send message to soroush Server, since the url is always the same, we reuse this WebTarget for all requests      */
DECL|field|sendMessageTarget
specifier|private
name|WebTarget
name|sendMessageTarget
decl_stmt|;
DECL|field|backOffStrategyHelper
specifier|private
name|BackOffStrategy
name|backOffStrategyHelper
decl_stmt|;
DECL|method|SoroushBotEndpoint (String endpointUri, SoroushBotComponent component)
specifier|public
name|SoroushBotEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|SoroushBotComponent
name|component
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return supported Soroush endpoint as string to display in error.      */
DECL|method|getSupportedEndpointAsString ()
specifier|private
name|String
name|getSupportedEndpointAsString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|String
operator|.
name|join
argument_list|(
literal|", "
argument_list|,
name|getSupportedEndpoint
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Endpoint
operator|::
name|value
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**      * @return supported Soroush endpoint by this component which is all Soroush Bot API      */
DECL|method|getSupportedEndpoint ()
specifier|private
name|List
argument_list|<
name|Endpoint
argument_list|>
name|getSupportedEndpoint
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Endpoint
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Sets the remaining configuration parameters available in the URI.      *      * @param remaining                 the URI part after the scheme      * @param defaultAuthorizationToken the default authorization token to use if not present in the URI      * @param uri                       full uri      */
DECL|method|updatePathConfiguration (String remaining, String defaultAuthorizationToken, String uri)
name|void
name|updatePathConfiguration
parameter_list|(
name|String
name|remaining
parameter_list|,
name|String
name|defaultAuthorizationToken
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pathParts
decl_stmt|;
if|if
condition|(
name|remaining
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected URI format. Expected soroush://"
operator|+
name|getSupportedEndpointAsString
argument_list|()
operator|+
literal|"[/<authorizationToken>][?options]', found "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|pathParts
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|remaining
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pathParts
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|pathParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pathParts
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pathParts
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|||
name|pathParts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected URI format. Expected soroush://"
operator|+
name|getSupportedEndpointAsString
argument_list|()
operator|+
literal|"[/<authorizationToken>][?options]', found "
operator|+
name|uri
argument_list|)
throw|;
block|}
for|for
control|(
name|Endpoint
name|supported
range|:
name|getSupportedEndpoint
argument_list|()
control|)
block|{
if|if
condition|(
name|supported
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
name|pathParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|supported
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected URI format. Expected soroush://"
operator|+
name|getSupportedEndpointAsString
argument_list|()
operator|+
literal|"[/<authorizationToken>][?options]', found "
operator|+
name|uri
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|authorizationToken
operator|==
literal|null
condition|)
block|{
name|String
name|authorizationToken
init|=
name|defaultAuthorizationToken
decl_stmt|;
if|if
condition|(
name|pathParts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|authorizationToken
operator|=
name|pathParts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|authorizationToken
operator|=
name|authorizationToken
expr_stmt|;
block|}
if|if
condition|(
name|authorizationToken
operator|==
literal|null
operator|||
name|authorizationToken
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The authorization token must be provided and cannot be empty"
argument_list|)
throw|;
block|}
block|}
comment|/**      * check and fix invalid value in uri parameter.      */
DECL|method|normalizeConfiguration ()
name|void
name|normalizeConfiguration
parameter_list|()
block|{
if|if
condition|(
name|connectionTimeout
operator|==
literal|null
condition|)
block|{
name|connectionTimeout
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|maxConnectionRetry
operator|==
literal|null
condition|)
block|{
name|maxConnectionRetry
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|reconnectIdleConnectionTimeout
operator|<=
literal|0
condition|)
block|{
name|reconnectIdleConnectionTimeout
operator|=
literal|5
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
block|}
name|connectionTimeout
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
name|maxConnectionRetry
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|maxConnectionRetry
argument_list|)
expr_stmt|;
name|retryExponentialCoefficient
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|retryExponentialCoefficient
argument_list|)
expr_stmt|;
name|retryLinearIncrement
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|retryLinearIncrement
argument_list|)
expr_stmt|;
if|if
condition|(
name|backOffStrategy
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"fixed"
argument_list|)
condition|)
block|{
name|backOffStrategyHelper
operator|=
operator|new
name|FixedBackOffStrategy
argument_list|(
name|retryWaitingTime
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|backOffStrategy
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"linear"
argument_list|)
condition|)
block|{
name|backOffStrategyHelper
operator|=
operator|new
name|LinearBackOffStrategy
argument_list|(
name|retryWaitingTime
argument_list|,
name|retryLinearIncrement
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|backOffStrategyHelper
operator|=
operator|new
name|ExponentialBackOffStrategy
argument_list|(
name|retryWaitingTime
argument_list|,
name|retryExponentialCoefficient
argument_list|,
name|maxRetryWaitingTime
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * create producer based on uri {@link Endpoint}      *      * @return created producer      */
annotation|@
name|Override
DECL|method|createProducer ()
specifier|public
name|Producer
name|createProducer
parameter_list|()
block|{
if|if
condition|(
name|type
operator|==
name|Endpoint
operator|.
name|sendMessage
condition|)
block|{
return|return
operator|new
name|SoroushBotSendMessageProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Endpoint
operator|.
name|uploadFile
condition|)
block|{
return|return
operator|new
name|SoroushBotUploadFileProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|Endpoint
operator|.
name|downloadFile
condition|)
block|{
return|return
operator|new
name|SoroushBotDownloadFileProducer
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"only ["
operator|+
name|Endpoint
operator|.
name|sendMessage
operator|+
literal|", "
operator|+
name|Endpoint
operator|.
name|downloadFile
operator|+
literal|", "
operator|+
name|Endpoint
operator|.
name|uploadFile
operator|+
literal|"] supported for producer(from) and process"
argument_list|)
throw|;
block|}
block|}
comment|/**      * create consumer based on concurrentConsumers value,      * if concurrentConsumers is greater than 1,      * we use {@link SoroushBotMultiThreadConsumer} that use a thread pool in order to process exchanges.      * the consumer use multiple queue to ensure that every message from a same user      * goes to the same thread and therefore every message from the same user will be processed in the order of arrival time.      *<p>      * if concurrentConsumers is lower than 2 then we use {@link SoroushBotSingleThreadConsumer} that process all received message      * in the order of their arrival time.      *      * @param processor processor      * @return consumer      */
annotation|@
name|Override
DECL|method|createConsumer (Processor processor)
specifier|public
name|Consumer
name|createConsumer
parameter_list|(
name|Processor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|Consumer
name|consumer
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|Endpoint
operator|.
name|getMessage
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"only "
operator|+
name|Endpoint
operator|.
name|getMessage
operator|+
literal|" support for consumer(from)"
argument_list|)
throw|;
block|}
if|if
condition|(
name|concurrentConsumers
operator|<
literal|2
condition|)
block|{
name|consumer
operator|=
operator|new
name|SoroushBotSingleThreadConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
else|else
block|{
name|consumer
operator|=
operator|new
name|SoroushBotMultiThreadConsumer
argument_list|(
name|this
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
comment|//configure consumer using method available by DefaultConsumer
name|configureConsumer
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
return|return
name|consumer
return|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * create a {@link WebTarget} that could be used to download file from soroush based on {@link SoroushBotEndpoint#authorizationToken},      * {@link SoroushBotEndpoint#connectionTimeout} and {@code fileUrl} (fileId)      *      * @param fileUrl fileId to download      * @return WebTarget      */
DECL|method|getDownloadFileTarget (String fileUrl)
specifier|private
name|WebTarget
name|getDownloadFileTarget
parameter_list|(
name|String
name|fileUrl
parameter_list|)
block|{
return|return
name|SoroushService
operator|.
name|get
argument_list|()
operator|.
name|createDownloadFileTarget
argument_list|(
name|authorizationToken
argument_list|,
name|fileUrl
argument_list|,
name|connectionTimeout
argument_list|)
return|;
block|}
comment|/**      * return the lazily created instance of {@link SoroushBotEndpoint#uploadFileTarget} to used for uploading file to soroush.      *      * @return WebTarget      */
DECL|method|getUploadFileTarget ()
specifier|private
name|WebTarget
name|getUploadFileTarget
parameter_list|()
block|{
if|if
condition|(
name|uploadFileTarget
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|uploadFileTarget
operator|==
literal|null
condition|)
block|{
name|uploadFileTarget
operator|=
name|SoroushService
operator|.
name|get
argument_list|()
operator|.
name|createUploadFileTarget
argument_list|(
name|authorizationToken
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|uploadFileTarget
return|;
block|}
comment|/**      * return the lazily created instance of {@link SoroushBotEndpoint#sendMessageTarget} to used for sending message to soroush.      *      * @return WebTarget      */
DECL|method|getSendMessageTarget ()
name|WebTarget
name|getSendMessageTarget
parameter_list|()
block|{
if|if
condition|(
name|sendMessageTarget
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|sendMessageTarget
operator|==
literal|null
condition|)
block|{
name|sendMessageTarget
operator|=
name|SoroushService
operator|.
name|get
argument_list|()
operator|.
name|createSendMessageTarget
argument_list|(
name|authorizationToken
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sendMessageTarget
return|;
block|}
DECL|method|getType ()
specifier|public
name|Endpoint
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (Endpoint type)
specifier|public
name|void
name|setType
parameter_list|(
name|Endpoint
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
DECL|method|getAuthorizationToken ()
specifier|public
name|String
name|getAuthorizationToken
parameter_list|()
block|{
return|return
name|authorizationToken
return|;
block|}
DECL|method|setAuthorizationToken (String authorizationToken)
specifier|public
name|void
name|setAuthorizationToken
parameter_list|(
name|String
name|authorizationToken
parameter_list|)
block|{
name|this
operator|.
name|authorizationToken
operator|=
name|authorizationToken
expr_stmt|;
block|}
DECL|method|getConnectionTimeout ()
specifier|public
name|Integer
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
DECL|method|setConnectionTimeout (Integer connectionTimeout)
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|Integer
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
DECL|method|getMaxConnectionRetry ()
specifier|public
name|Integer
name|getMaxConnectionRetry
parameter_list|()
block|{
return|return
name|maxConnectionRetry
return|;
block|}
DECL|method|setMaxConnectionRetry (Integer maxConnectionRetry)
specifier|public
name|void
name|setMaxConnectionRetry
parameter_list|(
name|Integer
name|maxConnectionRetry
parameter_list|)
block|{
name|this
operator|.
name|maxConnectionRetry
operator|=
name|maxConnectionRetry
expr_stmt|;
block|}
DECL|method|getConcurrentConsumers ()
specifier|public
name|Integer
name|getConcurrentConsumers
parameter_list|()
block|{
return|return
name|concurrentConsumers
return|;
block|}
DECL|method|setConcurrentConsumers (Integer concurrentConsumers)
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|Integer
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
DECL|method|getQueueCapacityPerThread ()
specifier|public
name|Integer
name|getQueueCapacityPerThread
parameter_list|()
block|{
return|return
name|queueCapacityPerThread
return|;
block|}
DECL|method|setQueueCapacityPerThread (Integer queueCapacityPerThread)
specifier|public
name|void
name|setQueueCapacityPerThread
parameter_list|(
name|Integer
name|queueCapacityPerThread
parameter_list|)
block|{
name|this
operator|.
name|queueCapacityPerThread
operator|=
name|queueCapacityPerThread
expr_stmt|;
block|}
DECL|method|getAutoUploadFile ()
specifier|public
name|Boolean
name|getAutoUploadFile
parameter_list|()
block|{
return|return
name|autoUploadFile
return|;
block|}
DECL|method|setAutoUploadFile (Boolean autoUploadFile)
specifier|public
name|void
name|setAutoUploadFile
parameter_list|(
name|Boolean
name|autoUploadFile
parameter_list|)
block|{
name|this
operator|.
name|autoUploadFile
operator|=
name|autoUploadFile
expr_stmt|;
block|}
DECL|method|getForceUpload ()
specifier|public
name|Boolean
name|getForceUpload
parameter_list|()
block|{
return|return
name|forceUpload
return|;
block|}
DECL|method|setForceUpload (Boolean forceUpload)
specifier|public
name|void
name|setForceUpload
parameter_list|(
name|Boolean
name|forceUpload
parameter_list|)
block|{
name|this
operator|.
name|forceUpload
operator|=
name|forceUpload
expr_stmt|;
block|}
DECL|method|getDownloadThumbnail ()
specifier|public
name|Boolean
name|getDownloadThumbnail
parameter_list|()
block|{
return|return
name|downloadThumbnail
return|;
block|}
DECL|method|setDownloadThumbnail (Boolean downloadThumbnail)
specifier|public
name|void
name|setDownloadThumbnail
parameter_list|(
name|Boolean
name|downloadThumbnail
parameter_list|)
block|{
name|this
operator|.
name|downloadThumbnail
operator|=
name|downloadThumbnail
expr_stmt|;
block|}
DECL|method|getRetryWaitingTime ()
specifier|public
name|Long
name|getRetryWaitingTime
parameter_list|()
block|{
return|return
name|retryWaitingTime
return|;
block|}
DECL|method|setRetryWaitingTime (Long retryWaitingTime)
specifier|public
name|void
name|setRetryWaitingTime
parameter_list|(
name|Long
name|retryWaitingTime
parameter_list|)
block|{
name|this
operator|.
name|retryWaitingTime
operator|=
name|retryWaitingTime
expr_stmt|;
block|}
DECL|method|getBackOffStrategy ()
specifier|public
name|String
name|getBackOffStrategy
parameter_list|()
block|{
return|return
name|backOffStrategy
return|;
block|}
DECL|method|setBackOffStrategy (String backOffStrategy)
specifier|public
name|void
name|setBackOffStrategy
parameter_list|(
name|String
name|backOffStrategy
parameter_list|)
block|{
name|this
operator|.
name|backOffStrategy
operator|=
name|backOffStrategy
expr_stmt|;
block|}
DECL|method|getRetryExponentialCoefficient ()
specifier|public
name|Long
name|getRetryExponentialCoefficient
parameter_list|()
block|{
return|return
name|retryExponentialCoefficient
return|;
block|}
DECL|method|getReconnectIdleConnectionTimeout ()
specifier|public
name|Long
name|getReconnectIdleConnectionTimeout
parameter_list|()
block|{
return|return
name|reconnectIdleConnectionTimeout
return|;
block|}
DECL|method|setReconnectIdleConnectionTimeout (Long reconnectIdleConnectionTimeout)
specifier|public
name|void
name|setReconnectIdleConnectionTimeout
parameter_list|(
name|Long
name|reconnectIdleConnectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|reconnectIdleConnectionTimeout
operator|=
name|reconnectIdleConnectionTimeout
expr_stmt|;
block|}
DECL|method|setRetryExponentialCoefficient (Long retryExponentialCoefficient)
specifier|public
name|void
name|setRetryExponentialCoefficient
parameter_list|(
name|Long
name|retryExponentialCoefficient
parameter_list|)
block|{
name|this
operator|.
name|retryExponentialCoefficient
operator|=
name|retryExponentialCoefficient
expr_stmt|;
block|}
DECL|method|getRetryLinearIncrement ()
specifier|public
name|Long
name|getRetryLinearIncrement
parameter_list|()
block|{
return|return
name|retryLinearIncrement
return|;
block|}
DECL|method|setRetryLinearIncrement (Long retryLinearIncrement)
specifier|public
name|void
name|setRetryLinearIncrement
parameter_list|(
name|Long
name|retryLinearIncrement
parameter_list|)
block|{
name|this
operator|.
name|retryLinearIncrement
operator|=
name|retryLinearIncrement
expr_stmt|;
block|}
DECL|method|getMaxRetryWaitingTime ()
specifier|public
name|Long
name|getMaxRetryWaitingTime
parameter_list|()
block|{
return|return
name|maxRetryWaitingTime
return|;
block|}
DECL|method|setMaxRetryWaitingTime (Long maxRetryWaitingTime)
specifier|public
name|void
name|setMaxRetryWaitingTime
parameter_list|(
name|Long
name|maxRetryWaitingTime
parameter_list|)
block|{
name|this
operator|.
name|maxRetryWaitingTime
operator|=
name|maxRetryWaitingTime
expr_stmt|;
block|}
DECL|method|getForceDownload ()
specifier|public
name|Boolean
name|getForceDownload
parameter_list|()
block|{
return|return
name|forceDownload
return|;
block|}
DECL|method|setForceDownload (Boolean forceDownload)
specifier|public
name|void
name|setForceDownload
parameter_list|(
name|Boolean
name|forceDownload
parameter_list|)
block|{
name|this
operator|.
name|forceDownload
operator|=
name|forceDownload
expr_stmt|;
block|}
DECL|method|getAutoDownload ()
specifier|public
name|Boolean
name|getAutoDownload
parameter_list|()
block|{
return|return
name|autoDownload
return|;
block|}
DECL|method|setAutoDownload (Boolean autoDownload)
specifier|public
name|void
name|setAutoDownload
parameter_list|(
name|Boolean
name|autoDownload
parameter_list|)
block|{
name|this
operator|.
name|autoDownload
operator|=
name|autoDownload
expr_stmt|;
block|}
comment|/**      * try to upload an inputStream to server      *      * @param inputStream      * @param message      * @param fileType      */
DECL|method|uploadToServer (InputStream inputStream, SoroushMessage message, String fileType)
specifier|private
name|UploadFileResponse
name|uploadToServer
parameter_list|(
name|InputStream
name|inputStream
parameter_list|,
name|SoroushMessage
name|message
parameter_list|,
name|String
name|fileType
parameter_list|)
throws|throws
name|SoroushException
throws|,
name|InterruptedException
block|{
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
name|response
decl_stmt|;
comment|//this for handle connection retry if sending request failed.
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<=
name|maxConnectionRetry
condition|;
name|count
operator|++
control|)
block|{
name|waitBeforeRetry
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|MultiPart
name|multipart
init|=
operator|new
name|MultiPart
argument_list|()
decl_stmt|;
name|multipart
operator|.
name|setMediaType
argument_list|(
name|MediaType
operator|.
name|MULTIPART_FORM_DATA_TYPE
argument_list|)
expr_stmt|;
name|multipart
operator|.
name|bodyPart
argument_list|(
operator|new
name|StreamDataBodyPart
argument_list|(
literal|"file"
argument_list|,
name|inputStream
argument_list|,
literal|null
argument_list|,
name|MediaType
operator|.
name|APPLICATION_OCTET_STREAM_TYPE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"try to upload "
operator|+
name|fileType
operator|+
literal|" for the "
operator|+
name|StringUtils
operator|.
name|ordinal
argument_list|(
name|count
operator|+
literal|1
argument_list|)
operator|+
literal|" time for message:"
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|getUploadFileTarget
argument_list|()
operator|.
name|request
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|multipart
argument_list|,
name|multipart
operator|.
name|getMediaType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|SoroushService
operator|.
name|get
argument_list|()
operator|.
name|assertSuccessful
argument_list|(
name|response
argument_list|,
name|UploadFileResponse
operator|.
name|class
argument_list|,
name|message
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ProcessingException
name|ex
parameter_list|)
block|{
comment|//if maximum connection retry reached, abort sending the request.
if|if
condition|(
name|count
operator|==
name|maxConnectionRetry
condition|)
block|{
throw|throw
operator|new
name|MaximumConnectionRetryReachedException
argument_list|(
literal|"uploading "
operator|+
name|fileType
operator|+
literal|" for message "
operator|+
name|message
operator|+
literal|" failed. Maximum retry limit reached!"
operator|+
literal|" aborting upload file and send message"
argument_list|,
name|ex
argument_list|,
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"uploading "
operator|+
name|fileType
operator|+
literal|" for message "
operator|+
name|message
operator|+
literal|" failed"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|error
argument_list|(
literal|"should never reach this line of code because maxConnectionRetry is greater than -1 and at least the above for must execute single time and"
argument_list|)
expr_stmt|;
comment|//for backup
throw|throw
operator|new
name|MaximumConnectionRetryReachedException
argument_list|(
literal|"uploading "
operator|+
name|fileType
operator|+
literal|" for message "
operator|+
name|message
operator|+
literal|" failed. Maximum retry limit reached! aborting "
operator|+
literal|"upload file and send message"
argument_list|,
name|message
argument_list|)
throw|;
block|}
comment|/**      * check if {@link SoroushMessage#file} or {@link SoroushMessage#thumbnail} is populated and upload them to the server.      * after that it set {@link SoroushMessage#fileUrl} and {@link SoroushMessage#thumbnailUrl} to appropriate value      *      * @param message      * @throws SoroushException if soroush reject the file      */
DECL|method|handleFileUpload (SoroushMessage message)
name|void
name|handleFileUpload
parameter_list|(
name|SoroushMessage
name|message
parameter_list|)
throws|throws
name|SoroushException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"try to upload file(s) to server if exists for message:"
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|file
init|=
name|message
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
operator|(
name|message
operator|.
name|getFileUrl
argument_list|()
operator|==
literal|null
operator|||
name|forceUpload
operator|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"uploading file to server for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|UploadFileResponse
name|response
init|=
name|uploadToServer
argument_list|(
name|file
argument_list|,
name|message
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setFileUrl
argument_list|(
name|response
operator|.
name|getFileUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"uploaded file url is: "
operator|+
name|response
operator|.
name|getFileUrl
argument_list|()
operator|+
literal|" for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|InputStream
name|thumbnail
init|=
name|message
operator|.
name|getThumbnail
argument_list|()
decl_stmt|;
if|if
condition|(
name|thumbnail
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getThumbnailUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"uploading thumbnail to server for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|UploadFileResponse
name|response
init|=
name|uploadToServer
argument_list|(
name|thumbnail
argument_list|,
name|message
argument_list|,
literal|"thumbnail"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setThumbnailUrl
argument_list|(
name|response
operator|.
name|getFileUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"uploaded thumbnail url is: "
operator|+
name|response
operator|.
name|getFileUrl
argument_list|()
operator|+
literal|" for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * check whether {@link SoroushMessage#fileUrl}({@link SoroushMessage#thumbnailUrl}) is null or not, and download the resource if it is not null      * this function only set {@link SoroushMessage#file} to {@link InputStream} get from {@link Response#readEntity(Class)} )}      * and does not store the resource in file.      *      * @param message      * @throws SoroushException if the file does not exists on soroush or soroush reject the request      */
DECL|method|handleDownloadFiles (SoroushMessage message)
specifier|public
name|void
name|handleDownloadFiles
parameter_list|(
name|SoroushMessage
name|message
parameter_list|)
throws|throws
name|SoroushException
block|{
if|if
condition|(
name|message
operator|.
name|getFileUrl
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|message
operator|.
name|getFile
argument_list|()
operator|==
literal|null
operator|||
name|forceDownload
operator|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"downloading file from server for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|inputStream
init|=
name|downloadFromServer
argument_list|(
name|message
operator|.
name|getFileUrl
argument_list|()
argument_list|,
name|message
argument_list|,
literal|"file"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setFile
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"file successfully downloaded for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|downloadThumbnail
operator|&&
name|message
operator|.
name|getThumbnailUrl
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|message
operator|.
name|getThumbnail
argument_list|()
operator|==
literal|null
operator|||
name|forceDownload
operator|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"downloading thumbnail from server for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|inputStream
init|=
name|downloadFromServer
argument_list|(
name|message
operator|.
name|getThumbnailUrl
argument_list|()
argument_list|,
name|message
argument_list|,
literal|"thumbnail"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setThumbnail
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"thumbnail successfully downloaded for message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * download the resource stored with the key {@code fileUrl} from Soroush Server.      * other parameters are used only for logging.      *      * @param fileUrl      * @param message      * @param type      * @return      * @throws SoroushException if soroush reject the request      */
DECL|method|downloadFromServer (String fileUrl, SoroushMessage message, String type)
specifier|private
name|InputStream
name|downloadFromServer
parameter_list|(
name|String
name|fileUrl
parameter_list|,
name|SoroushMessage
name|message
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|SoroushException
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxConnectionRetry
condition|;
name|i
operator|++
control|)
block|{
name|WebTarget
name|target
init|=
name|getDownloadFileTarget
argument_list|(
name|fileUrl
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"retry downloading "
operator|+
name|type
operator|+
literal|": "
operator|+
name|fileUrl
operator|+
literal|" for the "
operator|+
name|StringUtils
operator|.
name|ordinal
argument_list|(
name|i
argument_list|)
operator|+
literal|" time"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"try to download "
operator|+
name|type
operator|+
literal|": "
operator|+
name|fileUrl
operator|+
literal|" with url: "
operator|+
name|target
operator|.
name|getUri
argument_list|()
operator|+
literal|"\nfor message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|response
operator|=
name|target
operator|.
name|request
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
return|return
name|SoroushService
operator|.
name|get
argument_list|()
operator|.
name|assertSuccessful
argument_list|(
name|response
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
name|message
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ProcessingException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
name|maxConnectionRetry
condition|)
block|{
throw|throw
operator|new
name|MaximumConnectionRetryReachedException
argument_list|(
literal|"maximum connection retry reached for "
operator|+
name|type
operator|+
literal|": "
operator|+
name|fileUrl
argument_list|,
name|ex
argument_list|,
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"can not download "
operator|+
name|type
operator|+
literal|": "
operator|+
name|fileUrl
operator|+
literal|" from soroush. Response code is"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//should never reach this line
name|log
operator|.
name|error
argument_list|(
literal|"should never reach this line. An exception should have been thrown by catch block for target.request().get"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MaximumConnectionRetryReachedException
argument_list|(
literal|"can not upload "
operator|+
name|type
operator|+
literal|": "
operator|+
name|fileUrl
operator|+
literal|" response:"
operator|+
operator|(
operator|(
name|response
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|response
operator|.
name|getStatus
argument_list|()
operator|)
argument_list|,
name|message
argument_list|)
throw|;
block|}
DECL|method|waitBeforeRetry (int retryCount)
specifier|public
name|void
name|waitBeforeRetry
parameter_list|(
name|int
name|retryCount
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|backOffStrategyHelper
operator|.
name|waitBeforeRetry
argument_list|(
name|retryCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

