begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.soroushbot.service
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|WebTarget
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|SoroushAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|SoroushMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|response
operator|.
name|SoroushResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|SoroushException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|client
operator|.
name|ClientProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|glassfish
operator|.
name|jersey
operator|.
name|media
operator|.
name|multipart
operator|.
name|MultiPartFeature
import|;
end_import

begin_comment
comment|/**  * singleton class that allows interacting with the Soroush server to exchange messages.  */
end_comment

begin_class
DECL|class|SoroushService
specifier|public
specifier|final
class|class
name|SoroushService
block|{
DECL|field|URL
specifier|private
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"https://bot.sapp.ir"
decl_stmt|;
DECL|field|soroushService
specifier|private
specifier|static
name|SoroushService
name|soroushService
decl_stmt|;
comment|/**      * allow Soroush server to be mocked for testing,      * during testing soroush service will be connected to the alternativeUrl if provided      */
DECL|field|alternativeUrl
specifier|private
name|String
name|alternativeUrl
decl_stmt|;
DECL|method|SoroushService ()
specifier|private
name|SoroushService
parameter_list|()
block|{     }
comment|/**      * @return soroush server instance.      */
DECL|method|get ()
specifier|public
specifier|static
name|SoroushService
name|get
parameter_list|()
block|{
if|if
condition|(
name|soroushService
operator|!=
literal|null
condition|)
block|{
return|return
name|soroushService
return|;
block|}
synchronized|synchronized
init|(
name|SoroushService
operator|.
name|class
init|)
block|{
if|if
condition|(
name|soroushService
operator|!=
literal|null
condition|)
block|{
return|return
name|soroushService
return|;
block|}
name|soroushService
operator|=
operator|new
name|SoroushService
argument_list|()
expr_stmt|;
return|return
name|soroushService
return|;
block|}
block|}
comment|/**      * create fully qualified URL, given the token, endpoint and fileId if needed.      *      * @param token      * @param type      * @param fileId      * @return      */
DECL|method|generateUrl (String token, SoroushAction type, String fileId)
specifier|public
name|String
name|generateUrl
parameter_list|(
name|String
name|token
parameter_list|,
name|SoroushAction
name|type
parameter_list|,
name|String
name|fileId
parameter_list|)
block|{
return|return
name|getCurrentUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|token
operator|+
literal|"/"
operator|+
name|type
operator|.
name|value
argument_list|()
operator|+
operator|(
name|fileId
operator|!=
literal|null
condition|?
literal|"/"
operator|+
name|fileId
else|:
literal|""
operator|)
return|;
block|}
DECL|method|getCurrentUrl ()
specifier|private
name|String
name|getCurrentUrl
parameter_list|()
block|{
if|if
condition|(
name|alternativeUrl
operator|!=
literal|null
condition|)
block|{
return|return
name|alternativeUrl
return|;
block|}
return|return
name|URL
return|;
block|}
comment|/**      * create {@link WebTarget } for uploading file to server      *      * @param token      * @param timeOut      * @return      */
DECL|method|createUploadFileTarget (String token, Integer timeOut)
specifier|public
name|WebTarget
name|createUploadFileTarget
parameter_list|(
name|String
name|token
parameter_list|,
name|Integer
name|timeOut
parameter_list|)
block|{
return|return
name|ClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|property
argument_list|(
name|ClientProperties
operator|.
name|CONNECT_TIMEOUT
argument_list|,
name|timeOut
argument_list|)
operator|.
name|register
argument_list|(
name|MultiPartFeature
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|target
argument_list|(
name|generateUrl
argument_list|(
name|token
argument_list|,
name|SoroushAction
operator|.
name|uploadFile
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * create {@link WebTarget } for sending message to server      *      * @param token      * @param timeOut      * @return      */
DECL|method|createSendMessageTarget (String token, Integer timeOut)
specifier|public
name|WebTarget
name|createSendMessageTarget
parameter_list|(
name|String
name|token
parameter_list|,
name|Integer
name|timeOut
parameter_list|)
block|{
return|return
name|ClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|property
argument_list|(
name|ClientProperties
operator|.
name|CONNECT_TIMEOUT
argument_list|,
name|timeOut
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|target
argument_list|(
name|generateUrl
argument_list|(
name|token
argument_list|,
name|SoroushAction
operator|.
name|sendMessage
argument_list|,
literal|null
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * create {@link WebTarget } for downloading file from server      *      * @param token      * @param fileId      * @param timeOut      * @return      */
DECL|method|createDownloadFileTarget (String token, String fileId, Integer timeOut)
specifier|public
name|WebTarget
name|createDownloadFileTarget
parameter_list|(
name|String
name|token
parameter_list|,
name|String
name|fileId
parameter_list|,
name|Integer
name|timeOut
parameter_list|)
block|{
return|return
name|ClientBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|property
argument_list|(
name|ClientProperties
operator|.
name|CONNECT_TIMEOUT
argument_list|,
name|timeOut
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|target
argument_list|(
name|generateUrl
argument_list|(
name|token
argument_list|,
name|SoroushAction
operator|.
name|downloadFile
argument_list|,
name|fileId
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * check if the response is successfully sent to soroush, by default it assumes that the response type is SoroushResponse      *      * @param response the response      * @param soroushMessage the message that we are checking its success, only for logging purpose      * @return SoroushResponse      * @throws IOException      if can not connect to soroush server      * @throws SoroushException if soroush reject the response      */
DECL|method|assertSuccessful (Response response, SoroushMessage soroushMessage)
specifier|public
name|SoroushResponse
name|assertSuccessful
parameter_list|(
name|Response
name|response
parameter_list|,
name|SoroushMessage
name|soroushMessage
parameter_list|)
throws|throws
name|IOException
throws|,
name|SoroushException
block|{
return|return
name|assertSuccessful
argument_list|(
name|response
argument_list|,
name|SoroushResponse
operator|.
name|class
argument_list|,
name|soroushMessage
argument_list|)
return|;
block|}
comment|/**      * throw IOException      * if the exception is instance of SoroushException it indicates that the soroush does not accept the message      * and therefore resending the request will never be succeed      *      * @param<T>          the class that we expect the response should be of this type      * @param response the response      * @param responseType expecting response type from soroush      * @param soroushMessage the message that we are checking its success, only for logging purpose      * @throws IOException      if sending message to soroush server is not successful      * @throws SoroushException if soroush reject the response with an error code      */
DECL|method|assertSuccessful (Response response, Class<T> responseType, SoroushMessage soroushMessage)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|assertSuccessful
parameter_list|(
name|Response
name|response
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|responseType
parameter_list|,
name|SoroushMessage
name|soroushMessage
parameter_list|)
throws|throws
name|IOException
throws|,
name|SoroushException
block|{
name|int
name|status
init|=
name|response
operator|.
name|getStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|503
operator|||
name|status
operator|==
literal|429
operator|||
name|status
operator|==
literal|301
condition|)
block|{
name|String
name|message
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"code: "
operator|+
name|status
operator|+
literal|" message:"
operator|+
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|status
operator|>=
literal|300
condition|)
block|{
throw|throw
operator|new
name|SoroushException
argument_list|(
name|soroushMessage
argument_list|,
literal|null
argument_list|,
name|status
argument_list|,
name|response
operator|.
name|readEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|SoroushResponse
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|responseType
argument_list|)
condition|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|SoroushResponse
argument_list|>
name|soroushResponseType
init|=
name|responseType
operator|.
name|asSubclass
argument_list|(
name|SoroushResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|SoroushResponse
name|soroushResponse
init|=
name|response
operator|.
name|readEntity
argument_list|(
name|soroushResponseType
argument_list|)
decl_stmt|;
if|if
condition|(
name|soroushResponse
operator|.
name|getResultCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
name|String
name|body
init|=
name|soroushResponse
operator|.
name|toString
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SoroushException
argument_list|(
name|soroushMessage
argument_list|,
name|soroushResponse
argument_list|,
name|status
argument_list|,
name|body
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|soroushResponse
return|;
block|}
else|else
block|{
return|return
name|response
operator|.
name|readEntity
argument_list|(
name|responseType
argument_list|)
return|;
block|}
block|}
comment|/**      * set {@code alternativeUrl} that should be used for testing      *      * @param alternativeUrl      */
DECL|method|setAlternativeUrl (String alternativeUrl)
specifier|public
name|void
name|setAlternativeUrl
parameter_list|(
name|String
name|alternativeUrl
parameter_list|)
block|{
name|this
operator|.
name|alternativeUrl
operator|=
name|alternativeUrl
expr_stmt|;
block|}
block|}
end_class

end_unit

