begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.soroushbot.component
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|client
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|models
operator|.
name|SoroushMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|service
operator|.
name|SoroushService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|MaximumConnectionRetryReachedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|SoroushException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
operator|.
name|StringUtils
operator|.
name|ordinal
import|;
end_import

begin_comment
comment|/**  * this Producer is responsible for URIs of type {@link Endpoint#sendMessage}  * to send message to SoroushAPI.  * it will be instantiated for URIs like "soroush:sendMessage/[token]  */
end_comment

begin_class
DECL|class|SoroushBotSendMessageProducer
specifier|public
class|class
name|SoroushBotSendMessageProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SoroushBotSendMessageProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
name|SoroushBotEndpoint
name|endpoint
decl_stmt|;
DECL|field|objectMapper
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|method|SoroushBotSendMessageProducer (SoroushBotEndpoint endpoint)
specifier|public
name|SoroushBotSendMessageProducer
parameter_list|(
name|SoroushBotEndpoint
name|endpoint
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|SoroushMessage
name|message
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|(
name|SoroushMessage
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// if autoUploadFile is true try to upload files inside the message
if|if
condition|(
name|endpoint
operator|.
name|autoUploadFile
condition|)
block|{
name|endpoint
operator|.
name|handleFileUpload
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|sendMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws MaximumConnectionRetryReachedException if can not connect to soroush after retry {@link SoroushBotEndpoint#maxConnectionRetry} times      * @throws SoroushException                       if soroush response code wasn't 200      */
DECL|method|sendMessage (SoroushMessage message)
specifier|private
name|void
name|sendMessage
parameter_list|(
name|SoroushMessage
name|message
parameter_list|)
throws|throws
name|SoroushException
throws|,
name|MaximumConnectionRetryReachedException
throws|,
name|InterruptedException
block|{
name|Response
name|response
decl_stmt|;
comment|// this for is responsible to handle maximum connection retry.
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<=
name|endpoint
operator|.
name|maxConnectionRetry
condition|;
name|count
operator|++
control|)
block|{
name|endpoint
operator|.
name|waitBeforeRetry
argument_list|(
name|count
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"sending message for "
operator|+
name|ordinal
argument_list|(
name|count
operator|+
literal|1
argument_list|)
operator|+
literal|" time(s). message:"
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|endpoint
operator|.
name|getSendMessageTarget
argument_list|()
operator|.
name|request
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
operator|.
name|post
argument_list|(
name|Entity
operator|.
name|entity
argument_list|(
name|objectMapper
operator|.
name|writeValueAsString
argument_list|(
name|message
argument_list|)
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|SoroushService
operator|.
name|get
argument_list|()
operator|.
name|assertSuccessful
argument_list|(
name|response
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|ProcessingException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
name|endpoint
operator|.
name|maxConnectionRetry
condition|)
block|{
throw|throw
operator|new
name|MaximumConnectionRetryReachedException
argument_list|(
literal|"failed to send message. maximum retry limit reached. aborting... message: "
operator|+
name|message
argument_list|,
name|ex
argument_list|,
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"failed to send message: "
operator|+
name|message
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

