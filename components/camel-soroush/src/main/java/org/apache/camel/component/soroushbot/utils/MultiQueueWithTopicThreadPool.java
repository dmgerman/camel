begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.soroushbot.utils
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|soroushbot
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * a simple thread pool that send each job to a thread based on the jobs topic,  */
end_comment

begin_class
DECL|class|MultiQueueWithTopicThreadPool
specifier|public
class|class
name|MultiQueueWithTopicThreadPool
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultiQueueWithTopicThreadPool
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|shutdown
specifier|private
name|boolean
name|shutdown
decl_stmt|;
comment|//default is false
DECL|field|poolSize
specifier|private
name|int
name|poolSize
decl_stmt|;
DECL|field|workers
specifier|private
name|List
argument_list|<
name|PoolWorker
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MultiQueueWithTopicThreadPool (int poolSize, int capacity, String namePrefix)
specifier|public
name|MultiQueueWithTopicThreadPool
parameter_list|(
name|int
name|poolSize
parameter_list|,
name|int
name|capacity
parameter_list|,
name|String
name|namePrefix
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"creating MultiQueueWithTopicThreadPool with size "
operator|+
name|poolSize
operator|+
literal|" and capacity of each queue is set to "
operator|+
name|capacity
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|poolSize
operator|=
name|poolSize
expr_stmt|;
comment|//create a pool of thread and start them
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|poolSize
condition|;
name|i
operator|++
control|)
block|{
name|PoolWorker
name|e
init|=
operator|new
name|PoolWorker
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
name|workers
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|start
argument_list|()
expr_stmt|;
name|e
operator|.
name|setName
argument_list|(
name|namePrefix
operator|+
literal|" #"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * add the runnable into corresponding queue and it when it reach to the head of queue      * the queue is decided based on {@code topic}. if topic is instance of Integer,      * it uses (topic%poolSize) to determine corresponding queue otherwise it uses      * (topic.hashCode()%poolsize) do determine corresponding queue.      *      * @param topic    tasks are organized between threads based on this parameter      * @param runnable the task that should be executed      * @throws IllegalStateException if the {@code runnable} cannot be added at this      *                               time due to queue capacity restrictions      */
DECL|method|execute (Object topic, Runnable runnable)
specifier|public
name|void
name|execute
parameter_list|(
name|Object
name|topic
parameter_list|,
name|Runnable
name|runnable
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"pool has been shutdown"
argument_list|)
throw|;
block|}
name|int
name|selectedQueue
decl_stmt|;
if|if
condition|(
name|topic
operator|instanceof
name|Integer
condition|)
block|{
name|selectedQueue
operator|=
operator|(
operator|(
name|Integer
operator|)
name|topic
operator|)
operator|%
name|poolSize
expr_stmt|;
block|}
else|else
block|{
name|selectedQueue
operator|=
name|topic
operator|.
name|hashCode
argument_list|()
operator|%
name|poolSize
expr_stmt|;
block|}
name|PoolWorker
name|poolWorker
init|=
name|workers
operator|.
name|get
argument_list|(
name|selectedQueue
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|poolWorker
init|)
block|{
name|poolWorker
operator|.
name|enqueue
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**  * Each PoolWorker is a thread that when it is idle, it pick the head from its and  * execute it.  */
end_comment

begin_class
DECL|class|PoolWorker
class|class
name|PoolWorker
extends|extends
name|Thread
block|{
DECL|field|log
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PoolWorker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|queue
specifier|final
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
decl_stmt|;
DECL|method|PoolWorker (int capacity)
specifier|public
name|PoolWorker
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
comment|// if capacity<=0 then the queue capacity should be {@link Integer#MAX_VALUE}
if|if
condition|(
name|capacity
operator|>
literal|0
condition|)
block|{
name|queue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * ad new runnable to queue and notify corresponding thread to execute newly added      * runnable if the thread is idle.      *      * @param r a runnable to execute by this threadPool      */
DECL|method|enqueue (Runnable r)
specifier|public
name|void
name|enqueue
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queue
init|)
block|{
name|queue
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|queue
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Runnable
name|task
decl_stmt|;
synchronized|synchronized
init|(
name|queue
init|)
block|{
comment|// while queue is empty wait for queue to become populated
while|while
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|queue
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"An interrupt occurred while queue is waiting: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|//interrupt current thread to prevent the interrupt being swallowed.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
comment|//poll next task as we know it is exists in the queue
name|task
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
comment|//double check!
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
try|try
block|{
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|//catch RuntimeException that may thrown in the task
name|log
operator|.
name|error
argument_list|(
literal|"Thread pool is interrupted due to an issue: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

