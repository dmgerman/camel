begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.chunk
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|chunk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|x5
operator|.
name|template
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|x5
operator|.
name|template
operator|.
name|Theme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|ResourceEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UriParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ExchangeHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|chunk
operator|.
name|ChunkConstants
operator|.
name|CHUNK_ENDPOINT_URI_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|chunk
operator|.
name|ChunkConstants
operator|.
name|CHUNK_LAYER_SEPARATOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|chunk
operator|.
name|ChunkConstants
operator|.
name|CHUNK_RESOURCE_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|chunk
operator|.
name|ChunkConstants
operator|.
name|CHUNK_TEMPLATE
import|;
end_import

begin_comment
comment|/**  * Represents a Camel Chunk endpoint  */
end_comment

begin_class
annotation|@
name|UriEndpoint
argument_list|(
name|scheme
operator|=
literal|"chunk"
argument_list|,
name|label
operator|=
literal|"templating"
argument_list|)
DECL|class|ChunkEndpoint
specifier|public
class|class
name|ChunkEndpoint
extends|extends
name|ResourceEndpoint
block|{
DECL|field|theme
specifier|private
name|Theme
name|theme
decl_stmt|;
DECL|field|chunk
specifier|private
name|Chunk
name|chunk
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Define the encoding of the body"
argument_list|)
DECL|field|encoding
specifier|private
name|String
name|encoding
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Define the themes folder to scan"
argument_list|)
DECL|field|themeFolder
specifier|private
name|String
name|themeFolder
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Define the themes subfolder to scan"
argument_list|)
DECL|field|themeSubfolder
specifier|private
name|String
name|themeSubfolder
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Define the theme layer to elaborate"
argument_list|)
DECL|field|themeLayer
specifier|private
name|String
name|themeLayer
decl_stmt|;
annotation|@
name|UriParam
argument_list|(
name|description
operator|=
literal|"Define the file extension of the template"
argument_list|)
DECL|field|extension
specifier|private
name|String
name|extension
decl_stmt|;
DECL|method|ChunkEndpoint ()
specifier|public
name|ChunkEndpoint
parameter_list|()
block|{     }
DECL|method|ChunkEndpoint (String endpointUri, Component component, String resourceUri)
specifier|public
name|ChunkEndpoint
parameter_list|(
name|String
name|endpointUri
parameter_list|,
name|Component
name|component
parameter_list|,
name|String
name|resourceUri
parameter_list|)
block|{
name|super
argument_list|(
name|endpointUri
argument_list|,
name|component
argument_list|,
name|resourceUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getExchangePattern ()
specifier|public
name|ExchangePattern
name|getExchangePattern
parameter_list|()
block|{
return|return
name|ExchangePattern
operator|.
name|InOut
return|;
block|}
annotation|@
name|Override
DECL|method|createEndpointUri ()
specifier|protected
name|String
name|createEndpointUri
parameter_list|()
block|{
return|return
name|CHUNK_ENDPOINT_URI_PREFIX
operator|+
name|getResourceUri
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clearContentCache ()
specifier|public
name|void
name|clearContentCache
parameter_list|()
block|{
name|this
operator|.
name|chunk
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|clearContentCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onExchange (Exchange exchange)
specifier|protected
name|void
name|onExchange
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|fromTemplate
init|=
literal|false
decl_stmt|;
name|String
name|newResourceUri
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CHUNK_RESOURCE_URI
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|theme
operator|==
literal|null
condition|)
block|{
name|theme
operator|=
name|getOrCreateTheme
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|newResourceUri
operator|==
literal|null
condition|)
block|{
name|String
name|newTemplate
init|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|CHUNK_TEMPLATE
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Chunk
name|newChunk
decl_stmt|;
if|if
condition|(
name|newTemplate
operator|==
literal|null
condition|)
block|{
name|fromTemplate
operator|=
literal|false
expr_stmt|;
name|newChunk
operator|=
name|getOrCreateChunk
argument_list|(
name|theme
argument_list|,
name|fromTemplate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fromTemplate
operator|=
literal|true
expr_stmt|;
name|newChunk
operator|=
name|createChunk
argument_list|(
operator|new
name|StringReader
argument_list|(
name|newTemplate
argument_list|)
argument_list|,
name|theme
argument_list|,
name|fromTemplate
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|CHUNK_TEMPLATE
argument_list|)
expr_stmt|;
block|}
comment|// Execute Chunk
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variableMap
init|=
name|ExchangeHelper
operator|.
name|createVariableMap
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|newChunk
operator|.
name|putAll
argument_list|(
name|variableMap
argument_list|)
expr_stmt|;
name|newChunk
operator|.
name|render
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Fill out message
name|Message
name|out
init|=
name|exchange
operator|.
name|getOut
argument_list|()
decl_stmt|;
name|out
operator|.
name|setBody
argument_list|(
name|newChunk
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|setAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|removeHeader
argument_list|(
name|ChunkConstants
operator|.
name|CHUNK_RESOURCE_URI
argument_list|)
expr_stmt|;
name|ChunkEndpoint
name|newEndpoint
init|=
name|getCamelContext
argument_list|()
operator|.
name|getEndpoint
argument_list|(
name|CHUNK_ENDPOINT_URI_PREFIX
operator|+
name|newResourceUri
argument_list|,
name|ChunkEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|newEndpoint
operator|.
name|onExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Create a Chunk template      *      * @param resourceReader Reader used to get template      * @param Theme The theme      * @return Chunk      */
DECL|method|createChunk (Reader resourceReader, Theme theme, boolean fromTemplate)
specifier|private
name|Chunk
name|createChunk
parameter_list|(
name|Reader
name|resourceReader
parameter_list|,
name|Theme
name|theme
parameter_list|,
name|boolean
name|fromTemplate
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|oldcl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ClassLoader
name|apcl
init|=
name|getCamelContext
argument_list|()
operator|.
name|getApplicationContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|apcl
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|apcl
argument_list|)
expr_stmt|;
block|}
name|Chunk
name|newChunk
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromTemplate
condition|)
block|{
name|newChunk
operator|=
name|theme
operator|.
name|makeChunk
argument_list|()
expr_stmt|;
name|String
name|targetString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|resourceReader
argument_list|)
decl_stmt|;
name|newChunk
operator|.
name|append
argument_list|(
name|targetString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|targetString
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|resourceReader
argument_list|)
decl_stmt|;
name|newChunk
operator|=
name|theme
operator|.
name|makeChunk
argument_list|(
name|targetString
argument_list|)
expr_stmt|;
block|}
return|return
name|newChunk
return|;
block|}
finally|finally
block|{
name|resourceReader
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldcl
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|oldcl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getOrCreateChunk (Theme theme, boolean fromTemplate)
specifier|private
name|Chunk
name|getOrCreateChunk
parameter_list|(
name|Theme
name|theme
parameter_list|,
name|boolean
name|fromTemplate
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|chunk
operator|==
literal|null
condition|)
block|{
name|chunk
operator|=
name|createChunk
argument_list|(
operator|new
name|StringReader
argument_list|(
name|getResourceUriExtended
argument_list|()
argument_list|)
argument_list|,
name|theme
argument_list|,
name|fromTemplate
argument_list|)
expr_stmt|;
block|}
return|return
name|chunk
return|;
block|}
DECL|method|getOrCreateTheme ()
specifier|private
name|Theme
name|getOrCreateTheme
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|theme
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|themeFolder
operator|==
literal|null
operator|&&
name|themeSubfolder
operator|==
literal|null
condition|)
block|{
name|theme
operator|=
operator|new
name|Theme
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|themeFolder
operator|!=
literal|null
operator|&&
name|themeSubfolder
operator|==
literal|null
condition|)
block|{
name|ClassLoader
name|apcl
init|=
name|getCamelContext
argument_list|()
operator|.
name|getApplicationContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|apcl
operator|.
name|getResource
argument_list|(
name|themeFolder
argument_list|)
decl_stmt|;
name|theme
operator|=
operator|new
name|Theme
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ClassLoader
name|apcl
init|=
name|getCamelContext
argument_list|()
operator|.
name|getApplicationContextClassLoader
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|apcl
operator|.
name|getResource
argument_list|(
name|themeFolder
argument_list|)
decl_stmt|;
name|theme
operator|=
operator|new
name|Theme
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|,
name|themeSubfolder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|theme
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|theme
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceUri ()
specifier|public
name|String
name|getResourceUri
parameter_list|()
block|{
name|String
name|uri
init|=
name|super
operator|.
name|getResourceUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
operator|&&
operator|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|uri
operator|.
name|startsWith
argument_list|(
literal|"\\"
argument_list|)
operator|)
condition|)
block|{
return|return
name|uri
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|uri
return|;
block|}
block|}
DECL|method|getResourceUriExtended ()
specifier|private
name|String
name|getResourceUriExtended
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|themeLayer
operator|==
literal|null
condition|?
name|getResourceUri
argument_list|()
else|:
name|getResourceUri
argument_list|()
operator|+
name|CHUNK_LAYER_SEPARATOR
operator|+
name|themeLayer
return|;
block|}
DECL|method|getEncoding ()
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|encoding
return|;
block|}
DECL|method|setEncoding (String encoding)
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
block|}
DECL|method|getThemeFolder ()
specifier|public
name|String
name|getThemeFolder
parameter_list|()
block|{
return|return
name|themeFolder
return|;
block|}
DECL|method|setThemeFolder (String themeFolder)
specifier|public
name|void
name|setThemeFolder
parameter_list|(
name|String
name|themeFolder
parameter_list|)
block|{
name|this
operator|.
name|themeFolder
operator|=
name|themeFolder
expr_stmt|;
block|}
DECL|method|getThemeSubfolder ()
specifier|public
name|String
name|getThemeSubfolder
parameter_list|()
block|{
return|return
name|themeSubfolder
return|;
block|}
DECL|method|setThemeSubfolder (String themeSubfolder)
specifier|public
name|void
name|setThemeSubfolder
parameter_list|(
name|String
name|themeSubfolder
parameter_list|)
block|{
name|this
operator|.
name|themeSubfolder
operator|=
name|themeSubfolder
expr_stmt|;
block|}
DECL|method|getThemeLayer ()
specifier|public
name|String
name|getThemeLayer
parameter_list|()
block|{
return|return
name|themeLayer
return|;
block|}
DECL|method|setThemeLayer (String themeLayer)
specifier|public
name|void
name|setThemeLayer
parameter_list|(
name|String
name|themeLayer
parameter_list|)
block|{
name|this
operator|.
name|themeLayer
operator|=
name|themeLayer
expr_stmt|;
block|}
DECL|method|getExtension ()
specifier|public
name|String
name|getExtension
parameter_list|()
block|{
return|return
name|extension
return|;
block|}
DECL|method|setExtension (String extension)
specifier|public
name|void
name|setExtension
parameter_list|(
name|String
name|extension
parameter_list|)
block|{
name|this
operator|.
name|extension
operator|=
name|extension
expr_stmt|;
block|}
block|}
end_class

end_unit

