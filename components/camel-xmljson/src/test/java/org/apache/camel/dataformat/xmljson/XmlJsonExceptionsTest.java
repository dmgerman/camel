begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmljson
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmljson
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for exception cases in the XML JSON data format  */
end_comment

begin_class
DECL|class|XmlJsonExceptionsTest
specifier|public
class|class
name|XmlJsonExceptionsTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testMalformedXML ()
specifier|public
name|void
name|testMalformedXML
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|in
init|=
literal|"<noRoot>abc</noRoot><noRoot>abc</noRoot>"
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:json"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockException
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mockException
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"JSONException expected"
argument_list|,
name|JSONException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchs
init|=
name|mockException
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one exchange was expected in mock:exception"
argument_list|,
literal|1
argument_list|,
name|exchs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|exchs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Exception expected"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JSONException expected"
argument_list|,
name|JSONException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMalformedJson ()
specifier|public
name|void
name|testMalformedJson
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|in
init|=
literal|"{ \"a\": 123, \"b\": true, \"c\": true2 }"
decl_stmt|;
name|MockEndpoint
name|mockXML
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:xml"
argument_list|)
decl_stmt|;
name|mockXML
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockException
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mockException
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:unmarshal"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"JSONException expected"
argument_list|,
name|JSONException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchs
init|=
name|mockException
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one exchange was expected in mock:exception"
argument_list|,
literal|1
argument_list|,
name|exchs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|exchs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Exception expected"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JSONException expected"
argument_list|,
name|JSONException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSendJsonToXML ()
specifier|public
name|void
name|testSendJsonToXML
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|in
init|=
literal|"{ \"a\": 123, \"b\": true, \"c\": true2 }"
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:xml"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockException
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:exception"
argument_list|)
decl_stmt|;
name|mockException
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:unmarshal"
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CamelExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"JSONException expected"
argument_list|,
name|JSONException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Exchange
argument_list|>
name|exchs
init|=
name|mockException
operator|.
name|getExchanges
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one exchange was expected in mock:exception"
argument_list|,
literal|1
argument_list|,
name|exchs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
operator|(
name|Exception
operator|)
name|exchs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProperty
argument_list|(
name|Exchange
operator|.
name|EXCEPTION_CAUGHT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Exception expected"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JSONException expected"
argument_list|,
name|JSONException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlJsonDataFormat
name|format
init|=
operator|new
name|XmlJsonDataFormat
argument_list|()
decl_stmt|;
name|onException
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
operator|.
name|handled
argument_list|(
literal|false
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:exception"
argument_list|)
expr_stmt|;
comment|// from XML to JSON
name|from
argument_list|(
literal|"direct:marshal"
argument_list|)
operator|.
name|marshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:json"
argument_list|)
expr_stmt|;
comment|// from JSON to XML
name|from
argument_list|(
literal|"direct:unmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:xml"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

