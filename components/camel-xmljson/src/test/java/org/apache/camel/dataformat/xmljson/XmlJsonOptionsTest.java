begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmljson
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmljson
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|json
operator|.
name|JSONSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testing options to the XML JSON data format  */
end_comment

begin_class
DECL|class|XmlJsonOptionsTest
specifier|public
class|class
name|XmlJsonOptionsTest
extends|extends
name|AbstractJsonTestSupport
block|{
annotation|@
name|Test
DECL|method|testSomeOptionsToJSON ()
specifier|public
name|void
name|testSomeOptionsToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage1.xml"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:json"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|Object
name|json
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|String
name|jsonString
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|JSONSerializer
operator|.
name|toJSON
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"JSON must contain 1 top-level element"
argument_list|,
literal|1
argument_list|,
name|obj
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Top-level element must be named root"
argument_list|,
name|obj
operator|.
name|has
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testXmlWithTypeAttributesToJSON ()
specifier|public
name|void
name|testXmlWithTypeAttributesToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage4.xml"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:json"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|Object
name|json
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|String
name|jsonString
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|JSONSerializer
operator|.
name|toJSON
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"JSON must contain 1 top-level element"
argument_list|,
literal|1
argument_list|,
name|obj
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Top-level element must be named root"
argument_list|,
name|obj
operator|.
name|has
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSomeOptionsToXML ()
specifier|public
name|void
name|testSomeOptionsToXML
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage1.json"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockXML
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:xml"
argument_list|)
decl_stmt|;
name|mockXML
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
name|marshalled
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:unmarshal"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|marshalled
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The XML document doesn't carry newRoot as the root name"
argument_list|,
literal|"newRoot"
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// with expandable properties, array elements are converted to XML as a
comment|// sequence of repetitive XML elements with the local name equal to the
comment|// JSON key
comment|// for example: { number: [1,2,3] }, normally converted to:
comment|//<number><e>1</e><e>2</e><e>3</e></number> (where e can be modified by
comment|// setting elementName)
comment|// would be converted to
comment|//<number>1</number><number>2</number><number>3</number>, if number is
comment|// set as an expandable property
name|assertEquals
argument_list|(
literal|"The number of direct child elements of newRoot with tag d (expandable property) is not 3"
argument_list|,
literal|3
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"d"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The number of direct child elements of newRoot with tag e (expandable property) is not 3"
argument_list|,
literal|3
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"e"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNamespacesDropped ()
specifier|public
name|void
name|testNamespacesDropped
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage2-namespaces.xml"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:json"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|Object
name|json
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|String
name|jsonString
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|JSONSerializer
operator|.
name|toJSON
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"JSON must contain 1 top-level element"
argument_list|,
literal|1
argument_list|,
name|obj
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Top-level element must be named root"
argument_list|,
name|obj
operator|.
name|has
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that no child of the top-level element has a colon in its key,
comment|// which would denote that
comment|// a namespace prefix exists
for|for
control|(
name|Object
name|key
range|:
name|obj
operator|.
name|getJSONObject
argument_list|(
literal|"root"
argument_list|)
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertFalse
argument_list|(
literal|"A key contains a colon"
argument_list|,
operator|(
operator|(
name|String
operator|)
name|key
operator|)
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mockJSON
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomNamespaceMappings ()
specifier|public
name|void
name|testCustomNamespaceMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage2-namespaces.json"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockXML
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:xmlNS"
argument_list|)
decl_stmt|;
name|mockXML
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
name|marshalled
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:unmarshalNS"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|marshalled
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Element surname must be qualified in the default namespace"
argument_list|,
literal|"http://camel.apache.org/default"
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"surname"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root element must be qualified in the default namespace"
argument_list|,
literal|"http://camel.apache.org/default"
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Element surname must have namespace attributes"
argument_list|,
literal|2
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"surname"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributes
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root element must have namespace attributes"
argument_list|,
literal|2
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypeHintsToJSON ()
specifier|public
name|void
name|testTypeHintsToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage5-typeHints.xml"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:jsonTypeHints"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|Object
name|json
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:marshalTypeHints"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|String
name|jsonString
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|JSONSerializer
operator|.
name|toJSON
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.a must be number"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|obj
operator|.
name|getJSONObject
argument_list|(
literal|"root"
argument_list|)
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.b must be boolean"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|obj
operator|.
name|getJSONObject
argument_list|(
literal|"root"
argument_list|)
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypeHintsToXML ()
specifier|public
name|void
name|testTypeHintsToXML
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage5-typeHints.json"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockXML
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:xmlTypeHints"
argument_list|)
decl_stmt|;
name|mockXML
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
name|marshalled
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:unmarshalTypeHints"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|marshalled
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Element a should exists"
argument_list|,
literal|1
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Element a should have attribute type"
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Element a should have attribute type with value number"
argument_list|,
literal|"number"
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"a"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Element b should have attribute type with value boolean"
argument_list|,
literal|"boolean"
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"b"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"type"
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPrefixedTypeHintsToJSON ()
specifier|public
name|void
name|testPrefixedTypeHintsToJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage6-prefixedTypeHints.xml"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:jsonPrefixedTypeHints"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|Object
name|json
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:marshalPrefixedTypeHints"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|String
name|jsonString
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|JSONSerializer
operator|.
name|toJSON
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.a must be number"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|obj
operator|.
name|getJSONObject
argument_list|(
literal|"root"
argument_list|)
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.b must be boolean"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|obj
operator|.
name|getJSONObject
argument_list|(
literal|"root"
argument_list|)
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|XmlJsonDataFormat
name|format
init|=
operator|new
name|XmlJsonDataFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|format
operator|.
name|setForceTopLevelObject
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setTrimSpaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRootName
argument_list|(
literal|"newRoot"
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSkipNamespaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setRemoveNamespacePrefixes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|format
operator|.
name|setExpandableProperties
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
comment|// from XML to JSON
name|from
argument_list|(
literal|"direct:marshal"
argument_list|)
operator|.
name|marshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:json"
argument_list|)
expr_stmt|;
comment|// from JSON to XML
name|from
argument_list|(
literal|"direct:unmarshal"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|format
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:xml"
argument_list|)
expr_stmt|;
name|XmlJsonDataFormat
name|namespacesFormat
init|=
operator|new
name|XmlJsonDataFormat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XmlJsonDataFormat
operator|.
name|NamespacesPerElementMapping
argument_list|>
name|namespaces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
operator|new
name|XmlJsonDataFormat
operator|.
name|NamespacesPerElementMapping
argument_list|(
literal|""
argument_list|,
literal|"|ns1|http://camel.apache.org/test1||http://camel.apache.org/default|"
argument_list|)
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
operator|new
name|XmlJsonDataFormat
operator|.
name|NamespacesPerElementMapping
argument_list|(
literal|"surname"
argument_list|,
literal|"|ns2|http://camel.apache.org/personalData|ns3|http://camel.apache.org/personalData2|"
argument_list|)
argument_list|)
expr_stmt|;
name|namespacesFormat
operator|.
name|setNamespaceMappings
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|namespacesFormat
operator|.
name|setTrimSpaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// from XML to JSON
name|from
argument_list|(
literal|"direct:marshalNS"
argument_list|)
operator|.
name|marshal
argument_list|(
name|namespacesFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:jsonNS"
argument_list|)
expr_stmt|;
comment|// from JSON to XML
name|from
argument_list|(
literal|"direct:unmarshalNS"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|namespacesFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:xmlNS"
argument_list|)
expr_stmt|;
name|XmlJsonDataFormat
name|typeHintsFormat
init|=
operator|new
name|XmlJsonDataFormat
argument_list|()
decl_stmt|;
name|typeHintsFormat
operator|.
name|setForceTopLevelObject
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|typeHintsFormat
operator|.
name|setTypeHints
argument_list|(
literal|"YES"
argument_list|)
expr_stmt|;
comment|// from XML to JSON
name|from
argument_list|(
literal|"direct:marshalTypeHints"
argument_list|)
operator|.
name|marshal
argument_list|(
name|typeHintsFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:jsonTypeHints"
argument_list|)
expr_stmt|;
comment|// from JSON to XML
name|from
argument_list|(
literal|"direct:unmarshalTypeHints"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|typeHintsFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:xmlTypeHints"
argument_list|)
expr_stmt|;
name|XmlJsonDataFormat
name|prefixedTypeHintsFormat
init|=
operator|new
name|XmlJsonDataFormat
argument_list|()
decl_stmt|;
name|prefixedTypeHintsFormat
operator|.
name|setForceTopLevelObject
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prefixedTypeHintsFormat
operator|.
name|setTypeHints
argument_list|(
literal|"WITH_PREFIX"
argument_list|)
expr_stmt|;
comment|// from XML to JSON
name|from
argument_list|(
literal|"direct:marshalPrefixedTypeHints"
argument_list|)
operator|.
name|marshal
argument_list|(
name|prefixedTypeHintsFormat
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:jsonPrefixedTypeHints"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

