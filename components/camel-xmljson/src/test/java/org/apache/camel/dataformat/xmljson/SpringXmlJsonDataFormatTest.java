begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.xmljson
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|xmljson
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|json
operator|.
name|JSONSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelSpringTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_comment
comment|/**  * Test the Spring DSL  */
end_comment

begin_class
DECL|class|SpringXmlJsonDataFormatTest
specifier|public
class|class
name|SpringXmlJsonDataFormatTest
extends|extends
name|CamelSpringTestSupport
block|{
annotation|@
name|Test
DECL|method|testMarshalAndUnmarshal ()
specifier|public
name|void
name|testMarshalAndUnmarshal
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage1.xml"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockJSON
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:json"
argument_list|)
decl_stmt|;
name|mockJSON
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|MockEndpoint
name|mockXML
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:xml"
argument_list|)
decl_stmt|;
name|mockXML
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
name|json
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:marshal"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|String
name|jsonString
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|json
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|(
name|JSONObject
operator|)
name|JSONSerializer
operator|.
name|toJSON
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"JSONObject doesn't contain 7 keys"
argument_list|,
literal|7
argument_list|,
name|obj
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:unmarshal"
argument_list|,
name|jsonString
argument_list|)
expr_stmt|;
name|mockJSON
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|mockXML
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSomeOptionsToXML ()
specifier|public
name|void
name|testSomeOptionsToXML
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|inStream
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/testMessage1.json"
argument_list|)
decl_stmt|;
name|String
name|in
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|inStream
argument_list|)
decl_stmt|;
name|MockEndpoint
name|mockXML
init|=
name|getMockEndpoint
argument_list|(
literal|"mock:xmlWithOptions"
argument_list|)
decl_stmt|;
name|mockXML
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|message
argument_list|(
literal|0
argument_list|)
operator|.
name|body
argument_list|()
operator|.
name|isInstanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|Object
name|marshalled
init|=
name|template
operator|.
name|requestBody
argument_list|(
literal|"direct:unmarshalWithOptions"
argument_list|,
name|in
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|context
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|marshalled
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The XML document doesn't carry newRoot as the root name"
argument_list|,
literal|"newRoot"
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// with expandable properties, array elements are converted to XML as a
comment|// sequence of repetitive XML elements with the local name equal to the
comment|// JSON key
comment|// for example: { number: [1,2,3] }, normally converted to:
comment|//<number><e>1</e><e>2</e><e>3</e></number> (where e can be modified by
comment|// setting elementName)
comment|// would be converted to
comment|//<number>1</number><number>2</number><number>3</number>, if number is
comment|// set as an expandable property
name|assertEquals
argument_list|(
literal|"The number of direct child elements of newRoot with tag d (expandable property) is not 3"
argument_list|,
literal|3
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"d"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The number of direct child elements of newRoot with tag e (expandable property) is not 3"
argument_list|,
literal|3
argument_list|,
name|document
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getElementsByTagName
argument_list|(
literal|"e"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|mockXML
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createApplicationContext ()
specifier|protected
name|AbstractXmlApplicationContext
name|createApplicationContext
parameter_list|()
block|{
return|return
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
literal|"org/apache/camel/dataformat/xmljson/SpringXmlJsonDataFormatTest.xml"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

