begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.cloud.zookeeper.support
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|zookeeper
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|NIOServerCnxnFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|ZooKeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|persistence
operator|.
name|FileTxnSnapLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|SocketUtils
import|;
end_import

begin_class
DECL|class|ZookeeperServer
specifier|public
class|class
name|ZookeeperServer
block|{
DECL|field|connectionFactory
specifier|private
name|NIOServerCnxnFactory
name|connectionFactory
decl_stmt|;
DECL|field|zkServer
specifier|private
name|ZooKeeperServer
name|zkServer
decl_stmt|;
DECL|method|ZookeeperServer (File root)
specifier|public
name|ZookeeperServer
parameter_list|(
name|File
name|root
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|zkServer
operator|=
operator|new
name|ZooKeeperServer
argument_list|()
expr_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"log"
argument_list|)
decl_stmt|;
name|File
name|snapDir
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
literal|"data"
argument_list|)
decl_stmt|;
name|FileTxnSnapLog
name|ftxn
init|=
operator|new
name|FileTxnSnapLog
argument_list|(
name|dataDir
argument_list|,
name|snapDir
argument_list|)
decl_stmt|;
name|zkServer
operator|.
name|setTxnLogFactory
argument_list|(
name|ftxn
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|setTickTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|NIOServerCnxnFactory
argument_list|()
expr_stmt|;
name|connectionFactory
operator|.
name|configure
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|SocketUtils
operator|.
name|findAvailableTcpPort
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|startup
argument_list|(
name|zkServer
argument_list|)
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|connectionFactory
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|connectionFactory
operator|.
name|join
argument_list|()
expr_stmt|;
name|zkServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
while|while
condition|(
name|zkServer
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|zkServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|connectString ()
specifier|public
name|String
name|connectString
parameter_list|()
block|{
return|return
literal|"localhost:"
operator|+
name|connectionFactory
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

