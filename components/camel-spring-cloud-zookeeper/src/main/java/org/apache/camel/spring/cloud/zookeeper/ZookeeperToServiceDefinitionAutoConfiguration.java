begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.cloud.zookeeper
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|zookeeper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
operator|.
name|GroupCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|CamelSpringCloudServiceLoadBalancerAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureBefore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|cloud
operator|.
name|zookeeper
operator|.
name|ConditionalOnZookeeperEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|cloud
operator|.
name|zookeeper
operator|.
name|discovery
operator|.
name|ZookeeperServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|convert
operator|.
name|converter
operator|.
name|Converter
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|AutoConfigureBefore
argument_list|(
name|CamelSpringCloudServiceLoadBalancerAutoConfiguration
operator|.
name|class
argument_list|)
annotation|@
name|ConditionalOnZookeeperEnabled
annotation|@
name|Conditional
argument_list|(
name|ZookeeperToServiceDefinitionAutoConfiguration
operator|.
name|Condition
operator|.
name|class
argument_list|)
DECL|class|ZookeeperToServiceDefinitionAutoConfiguration
specifier|public
class|class
name|ZookeeperToServiceDefinitionAutoConfiguration
block|{
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"zookeeper-server-to-service-definition"
argument_list|)
DECL|method|zookeeperServerToServiceDefinition ()
specifier|public
name|Converter
argument_list|<
name|ZookeeperServer
argument_list|,
name|ServiceDefinition
argument_list|>
name|zookeeperServerToServiceDefinition
parameter_list|()
block|{
return|return
operator|new
name|ZookeeperServerToServiceDefinition
argument_list|()
return|;
block|}
comment|// *******************************
comment|// Condition
comment|// *******************************
DECL|class|Condition
specifier|public
specifier|static
class|class
name|Condition
extends|extends
name|GroupCondition
block|{
DECL|method|Condition ()
specifier|public
name|Condition
parameter_list|()
block|{
name|super
argument_list|(
literal|"camel.cloud"
argument_list|,
literal|"camel.cloud.zookeeper"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

