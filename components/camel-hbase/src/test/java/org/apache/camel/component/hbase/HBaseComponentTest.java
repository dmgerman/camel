begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hbase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HBaseComponentTest
specifier|public
class|class
name|HBaseComponentTest
block|{
annotation|@
name|Test
DECL|method|testHBaseConfigurationClassLoaderSetToAppContextClassLoader ()
specifier|public
name|void
name|testHBaseConfigurationClassLoaderSetToAppContextClassLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|expectedClassLoader
init|=
name|HBaseComponentTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|CamelContext
name|camelContext
init|=
operator|new
name|DefaultCamelContext
argument_list|()
decl_stmt|;
name|camelContext
operator|.
name|setApplicationContextClassLoader
argument_list|(
name|expectedClassLoader
argument_list|)
expr_stmt|;
name|HBaseComponent
name|component
init|=
operator|new
name|HBaseComponent
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|component
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|component
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|ClassLoader
name|actualClassLoader
init|=
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|expectedClassLoader
argument_list|,
name|actualClassLoader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHBaseConfigurationClassLoaderNotOverridden ()
specifier|public
name|void
name|testHBaseConfigurationClassLoaderNotOverridden
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|expectedClassLoader
init|=
name|HBaseComponentTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setClassLoader
argument_list|(
name|expectedClassLoader
argument_list|)
expr_stmt|;
name|HBaseComponent
name|component
init|=
operator|new
name|HBaseComponent
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|component
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
try|try
block|{
name|component
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected because the ClassLoader we set is not the correct one, but it's safe to ignore here
block|}
name|component
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|ClassLoader
name|actualClassLoader
init|=
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|expectedClassLoader
argument_list|,
name|actualClassLoader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHBaseConfigurationClassLoaderSetToDefault ()
specifier|public
name|void
name|testHBaseConfigurationClassLoaderSetToDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|expectedClassLoader
init|=
name|HBaseConfiguration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|HBaseComponent
name|component
init|=
operator|new
name|HBaseComponent
argument_list|(
operator|new
name|DefaultCamelContext
argument_list|()
argument_list|)
decl_stmt|;
name|component
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|component
operator|.
name|doStop
argument_list|()
expr_stmt|;
name|ClassLoader
name|actualClassLoader
init|=
name|component
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertSame
argument_list|(
name|expectedClassLoader
argument_list|,
name|actualClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

