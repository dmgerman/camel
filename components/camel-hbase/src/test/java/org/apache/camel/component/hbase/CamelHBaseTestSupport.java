begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hbase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CamelHBaseTestSupport
specifier|public
specifier|abstract
class|class
name|CamelHBaseTestSupport
extends|extends
name|CamelTestSupport
block|{
comment|//The hbase testing utility has special requirements on the umask.
comment|//We hold this value to check if the minicluster has properly started and tests can be run.
DECL|field|systemReady
specifier|protected
specifier|static
name|Boolean
name|systemReady
init|=
literal|true
decl_stmt|;
DECL|field|hbaseUtil
specifier|protected
specifier|static
name|HBaseTestingUtility
name|hbaseUtil
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
DECL|field|numServers
specifier|protected
specifier|static
name|int
name|numServers
init|=
literal|1
decl_stmt|;
DECL|field|PERSON_TABLE
specifier|protected
specifier|static
specifier|final
name|String
name|PERSON_TABLE
init|=
literal|"person"
decl_stmt|;
DECL|field|INFO_FAMILY
specifier|protected
specifier|static
specifier|final
name|String
name|INFO_FAMILY
init|=
literal|"info"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelHBaseTestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|key
specifier|protected
name|String
index|[]
name|key
init|=
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
decl_stmt|;
DECL|field|family
specifier|protected
specifier|final
name|String
index|[]
name|family
init|=
block|{
literal|"info"
block|,
literal|"birthdate"
block|,
literal|"address"
block|}
decl_stmt|;
DECL|field|column
specifier|protected
specifier|final
name|String
index|[]
index|[]
name|column
init|=
block|{
block|{
literal|"id"
block|,
literal|"firstName"
block|,
literal|"lastName"
block|}
block|,
block|{
literal|"day"
block|,
literal|"month"
block|,
literal|"year"
block|}
block|,
block|{
literal|"street"
block|,
literal|"number"
block|,
literal|"zip"
block|}
block|}
decl_stmt|;
comment|//body[row][family][column]
DECL|field|body
specifier|protected
specifier|final
name|String
index|[]
index|[]
index|[]
name|body
init|=
block|{
block|{
block|{
literal|"1"
block|,
literal|"Ioannis"
block|,
literal|"Canellos"
block|}
block|,
block|{
literal|"09"
block|,
literal|"03"
block|,
literal|"1980"
block|}
block|,
block|{
literal|"Awesome Street"
block|,
literal|"23"
block|,
literal|"15344"
block|}
block|}
block|,
block|{
block|{
literal|"2"
block|,
literal|"John"
block|,
literal|"Dow"
block|}
block|,
block|{
literal|"01"
block|,
literal|"01"
block|,
literal|"1979"
block|}
block|,
block|{
literal|"Unknown Street"
block|,
literal|"1"
block|,
literal|"1010"
block|}
block|}
block|,
block|{
block|{
literal|"3"
block|,
literal|"Christian"
block|,
literal|"Mueller"
block|}
block|,
block|{
literal|"09"
block|,
literal|"01"
block|,
literal|"1979"
block|}
block|,
block|{
literal|"Another Unknown Street"
block|,
literal|"14"
block|,
literal|"2020"
block|}
block|}
block|}
decl_stmt|;
DECL|field|families
specifier|protected
specifier|final
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|family
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
block|,
name|family
index|[
literal|1
index|]
operator|.
name|getBytes
argument_list|()
block|,
name|family
index|[
literal|2
index|]
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|hbaseUtil
operator|.
name|startMiniCluster
argument_list|(
name|numServers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"couldn't start HBase cluster. Test is not started, but passed!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|systemReady
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|tearDownClass ()
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
name|hbaseUtil
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
try|try
block|{
name|hbaseUtil
operator|.
name|createTable
argument_list|(
name|HBaseHelper
operator|.
name|getHBaseFieldAsBytes
argument_list|(
name|PERSON_TABLE
argument_list|)
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|ex
parameter_list|)
block|{
comment|//Ignore if table exists
block|}
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
name|hbaseUtil
operator|.
name|deleteTable
argument_list|(
name|PERSON_TABLE
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createCamelContext ()
specifier|public
name|CamelContext
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelContext
name|context
init|=
operator|new
name|DefaultCamelContext
argument_list|(
name|createRegistry
argument_list|()
argument_list|)
decl_stmt|;
comment|// configure hbase component
name|HBaseComponent
name|component
init|=
name|context
operator|.
name|getComponent
argument_list|(
literal|"hbase"
argument_list|,
name|HBaseComponent
operator|.
name|class
argument_list|)
decl_stmt|;
name|component
operator|.
name|setConfiguration
argument_list|(
name|hbaseUtil
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|putMultipleRows ()
specifier|protected
name|void
name|putMultipleRows
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|configuration
init|=
name|hbaseUtil
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|PERSON_TABLE
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|key
operator|.
name|length
condition|;
name|r
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|key
index|[
name|r
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|family
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|body
index|[
name|r
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

