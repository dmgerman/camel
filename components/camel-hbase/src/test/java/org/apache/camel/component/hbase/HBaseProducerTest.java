begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hbase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|HBaseProducerTest
specifier|public
class|class
name|HBaseProducerTest
extends|extends
name|CamelHBaseTestSupport
block|{
annotation|@
name|Test
DECL|method|testPut ()
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|()
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|()
argument_list|,
name|body
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|PUT
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|hbaseUtil
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|PERSON_TABLE
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|key
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultValue
init|=
name|result
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|body
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndGet ()
specifier|public
name|void
name|testPutAndGet
parameter_list|()
throws|throws
name|Exception
block|{
name|testPut
argument_list|()
expr_stmt|;
if|if
condition|(
name|systemReady
condition|)
block|{
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|()
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|body
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndGetWithModel ()
specifier|public
name|void
name|testPutAndGetWithModel
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|PUT
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|key
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|fam
init|=
literal|0
init|;
name|fam
operator|<
name|family
operator|.
name|length
condition|;
name|fam
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|column
index|[
name|fam
index|]
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|(
name|index
argument_list|)
argument_list|,
name|key
index|[
name|row
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|(
name|index
argument_list|)
argument_list|,
name|family
index|[
name|fam
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|(
name|index
argument_list|)
argument_list|,
name|column
index|[
name|fam
index|]
index|[
name|col
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
name|index
operator|++
argument_list|)
argument_list|,
name|body
index|[
name|row
index|]
index|[
name|fam
index|]
index|[
name|col
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start-with-model"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|()
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|GET
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|body
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|1
index|]
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|body
index|[
literal|0
index|]
index|[
literal|1
index|]
index|[
literal|2
index|]
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutMultiRows ()
specifier|public
name|void
name|testPutMultiRows
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|PUT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|key
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|,
name|key
index|[
name|row
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|,
name|body
index|[
name|row
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|hbaseUtil
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Table
name|bar
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|PERSON_TABLE
argument_list|)
argument_list|)
decl_stmt|;
comment|//Check row 1
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|key
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|key
index|[
name|row
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|bar
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultValue
init|=
name|result
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|body
index|[
name|row
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndGetMultiRows ()
specifier|public
name|void
name|testPutAndGetMultiRows
parameter_list|()
throws|throws
name|Exception
block|{
name|testPutMultiRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|systemReady
condition|)
block|{
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|GET
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|key
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|,
name|key
index|[
name|row
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|key
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|body
index|[
name|row
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
name|row
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPutMultiColumns ()
specifier|public
name|void
name|testPutMultiColumns
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|PUT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|column
index|[
literal|0
index|]
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|,
name|column
index|[
literal|0
index|]
index|[
name|col
index|]
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|,
name|body
index|[
literal|0
index|]
index|[
name|col
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|hbaseUtil
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Table
name|bar
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|PERSON_TABLE
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|column
index|[
literal|0
index|]
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|key
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
name|col
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|bar
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|resultValue
init|=
name|result
operator|.
name|value
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|body
index|[
literal|0
index|]
index|[
name|col
index|]
index|[
literal|0
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
block|}
name|IOHelper
operator|.
name|close
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndGetMultiColumns ()
specifier|public
name|void
name|testPutAndGetMultiColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|testPutMultiColumns
argument_list|()
expr_stmt|;
if|if
condition|(
name|systemReady
condition|)
block|{
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|GET
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|column
index|[
literal|0
index|]
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|,
name|column
index|[
literal|0
index|]
index|[
name|col
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|column
index|[
literal|0
index|]
operator|.
name|length
condition|;
name|col
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|body
index|[
literal|0
index|]
index|[
name|col
index|]
index|[
literal|0
index|]
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
name|col
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndGetAndDeleteMultiRows ()
specifier|public
name|void
name|testPutAndGetAndDeleteMultiRows
parameter_list|()
throws|throws
name|Exception
block|{
name|testPutMultiRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|systemReady
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|()
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:start"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|GET
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|()
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|,
name|key
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|body
index|[
literal|1
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutMultiRowsAndMaxScan ()
specifier|public
name|void
name|testPutMultiRowsAndMaxScan
parameter_list|()
throws|throws
name|Exception
block|{
name|testPutMultiRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|systemReady
condition|)
block|{
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:maxScan"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|result1
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|result2
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
comment|// as we use maxResults=2 we only get 2 results back
name|Object
name|result3
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result3
argument_list|,
literal|"Should only get 2 results back"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|bodies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|body
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|body
index|[
literal|1
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bodies
operator|.
name|contains
argument_list|(
name|result1
argument_list|)
operator|&&
name|bodies
operator|.
name|contains
argument_list|(
name|result2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutMultiRowsAndScan ()
specifier|public
name|void
name|testPutMultiRowsAndScan
parameter_list|()
throws|throws
name|Exception
block|{
name|testPutMultiRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|systemReady
condition|)
block|{
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:scan"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|result1
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|result2
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|result3
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|bodies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|body
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|body
index|[
literal|1
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|body
index|[
literal|2
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bodies
operator|.
name|contains
argument_list|(
name|result1
argument_list|)
operator|&&
name|bodies
operator|.
name|contains
argument_list|(
name|result2
argument_list|)
operator|&&
name|bodies
operator|.
name|contains
argument_list|(
name|result3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutMultiRowsAndScanWithStop ()
specifier|public
name|void
name|testPutMultiRowsAndScanWithStop
parameter_list|()
throws|throws
name|Exception
block|{
name|testPutMultiRows
argument_list|()
expr_stmt|;
if|if
condition|(
name|systemReady
condition|)
block|{
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:scan"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
name|family
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
name|column
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseConstants
operator|.
name|FROM_ROW
argument_list|,
name|key
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseConstants
operator|.
name|STOP_ROW
argument_list|,
name|key
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Object
name|result1
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|result2
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|result3
init|=
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|bodies
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|body
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|body
index|[
literal|1
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|body
index|[
literal|2
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bodies
operator|.
name|contains
argument_list|(
name|result1
argument_list|)
operator|&&
operator|!
name|bodies
operator|.
name|contains
argument_list|(
name|result2
argument_list|)
operator|&&
operator|!
name|bodies
operator|.
name|contains
argument_list|(
name|result3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPutAndScan ()
specifier|public
name|void
name|testPutAndScan
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|systemReady
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseConstants
operator|.
name|OPERATION
argument_list|,
name|HBaseConstants
operator|.
name|PUT
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|()
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
literal|"info"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|()
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeaders
argument_list|(
literal|"direct:start"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
name|hbaseUtil
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Table
name|bar
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|PERSON_TABLE
argument_list|)
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
literal|"1"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
literal|"info"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"id"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|bar
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"3"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|result
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|close
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|Exchange
name|resp
init|=
name|template
operator|.
name|request
argument_list|(
literal|"direct:scan"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|,
literal|"info"
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_ROW_ID
operator|.
name|asHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"info"
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_FAMILY
operator|.
name|asHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_QUALIFIER
operator|.
name|asHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|resp
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
name|HBaseAttribute
operator|.
name|HBASE_VALUE
operator|.
name|asHeader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Factory method which derived classes can use to create a {@link org.apache.camel.builder.RouteBuilder}      * to define the routes for testing      */
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:start"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hbase://"
operator|+
name|PERSON_TABLE
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:start-with-model"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hbase://"
operator|+
name|PERSON_TABLE
operator|+
literal|"?row.family=info&row.qualifier=firstName&row.family2=birthdate&row.qualifier2=year"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:scan"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hbase://"
operator|+
name|PERSON_TABLE
operator|+
literal|"?operation="
operator|+
name|HBaseConstants
operator|.
name|SCAN
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:maxScan"
argument_list|)
operator|.
name|to
argument_list|(
literal|"hbase://"
operator|+
name|PERSON_TABLE
operator|+
literal|"?operation="
operator|+
name|HBaseConstants
operator|.
name|SCAN
operator|+
literal|"&maxResults=2"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

