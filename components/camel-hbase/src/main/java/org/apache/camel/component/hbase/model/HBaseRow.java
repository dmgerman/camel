begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hbase.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hbase
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"row"
argument_list|)
DECL|class|HBaseRow
specifier|public
class|class
name|HBaseRow
implements|implements
name|Cloneable
block|{
DECL|field|id
specifier|private
name|Object
name|id
decl_stmt|;
comment|//The row type can be optionally specified for Gets and Scan, to specify how the byte[] read will be converted.
DECL|field|rowType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|rowType
init|=
name|String
operator|.
name|class
decl_stmt|;
DECL|field|cells
specifier|private
name|Set
argument_list|<
name|HBaseCell
argument_list|>
name|cells
decl_stmt|;
DECL|field|timestamp
specifier|private
name|long
name|timestamp
decl_stmt|;
DECL|method|HBaseRow ()
specifier|public
name|HBaseRow
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<
name|HBaseCell
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|HBaseRow (Set<HBaseCell> cells)
specifier|public
name|HBaseRow
parameter_list|(
name|Set
argument_list|<
name|HBaseCell
argument_list|>
name|cells
parameter_list|)
block|{
name|this
operator|.
name|cells
operator|=
name|cells
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|Object
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (Object id)
specifier|public
name|void
name|setId
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"type"
argument_list|)
DECL|method|getRowType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getRowType
parameter_list|()
block|{
return|return
name|rowType
return|;
block|}
DECL|method|setRowType (Class<?> rowType)
specifier|public
name|void
name|setRowType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|rowType
parameter_list|)
block|{
name|this
operator|.
name|rowType
operator|=
name|rowType
expr_stmt|;
block|}
DECL|method|getCells ()
specifier|public
name|Set
argument_list|<
name|HBaseCell
argument_list|>
name|getCells
parameter_list|()
block|{
return|return
name|cells
return|;
block|}
DECL|method|setCells (Set<HBaseCell> cells)
specifier|public
name|void
name|setCells
parameter_list|(
name|Set
argument_list|<
name|HBaseCell
argument_list|>
name|cells
parameter_list|)
block|{
name|this
operator|.
name|cells
operator|=
name|cells
expr_stmt|;
block|}
DECL|method|isEmpty ()
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|cells
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|cells
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getTimestamp ()
specifier|public
name|long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|setTimestamp (long timestamp)
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
DECL|method|apply (HBaseRow modelRow)
specifier|public
name|void
name|apply
parameter_list|(
name|HBaseRow
name|modelRow
parameter_list|)
block|{
if|if
condition|(
name|modelRow
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rowType
operator|==
literal|null
operator|&&
name|modelRow
operator|.
name|getRowType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rowType
operator|=
name|modelRow
operator|.
name|getRowType
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|HBaseCell
name|modelCell
range|:
name|modelRow
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|getCells
argument_list|()
operator|.
name|contains
argument_list|(
name|modelCell
argument_list|)
condition|)
block|{
name|HBaseCell
name|cell
init|=
operator|new
name|HBaseCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setFamily
argument_list|(
name|modelCell
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setQualifier
argument_list|(
name|modelCell
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setValueType
argument_list|(
name|modelCell
operator|.
name|getValueType
argument_list|()
argument_list|)
expr_stmt|;
name|getCells
argument_list|()
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

