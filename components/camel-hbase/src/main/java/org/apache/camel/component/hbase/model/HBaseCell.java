begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hbase.model
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hbase
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_comment
comment|/**  * A simplified representation of HBase KeyValue objects, which uses the actual Objects instead of byte arrays.  * It is used in order to abstract the conversion strategy from CellMappingStrategy.  * It is also used as a template to specify which will be the columns returned in gets, scans etc.  */
end_comment

begin_class
DECL|class|HBaseCell
specifier|public
class|class
name|HBaseCell
block|{
DECL|field|family
specifier|private
name|String
name|family
decl_stmt|;
DECL|field|qualifier
specifier|private
name|String
name|qualifier
decl_stmt|;
DECL|field|value
specifier|private
name|Object
name|value
decl_stmt|;
DECL|field|timestamp
specifier|private
name|Long
name|timestamp
decl_stmt|;
comment|//The value type can be optionally specified for Gets and Scan, to specify how the byte[] read will be converted.
DECL|field|valueType
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
init|=
name|String
operator|.
name|class
decl_stmt|;
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HBaseCell=[family="
operator|+
name|family
operator|+
literal|", qualifier="
operator|+
name|qualifier
operator|+
literal|", value="
operator|+
name|value
operator|+
literal|", valueType="
operator|+
name|valueType
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"family"
argument_list|)
DECL|method|getFamily ()
specifier|public
name|String
name|getFamily
parameter_list|()
block|{
return|return
name|family
return|;
block|}
DECL|method|setFamily (String family)
specifier|public
name|void
name|setFamily
parameter_list|(
name|String
name|family
parameter_list|)
block|{
name|this
operator|.
name|family
operator|=
name|family
expr_stmt|;
block|}
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"qualifier"
argument_list|)
DECL|method|getQualifier ()
specifier|public
name|String
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier
return|;
block|}
DECL|method|setQualifier (String qualifier)
specifier|public
name|void
name|setQualifier
parameter_list|(
name|String
name|qualifier
parameter_list|)
block|{
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue (Object value)
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"type"
argument_list|)
DECL|method|getValueType ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getValueType
parameter_list|()
block|{
return|return
name|valueType
return|;
block|}
DECL|method|setValueType (Class<?> valueType)
specifier|public
name|void
name|setValueType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|valueType
parameter_list|)
block|{
if|if
condition|(
name|valueType
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Value type can not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|valueType
operator|=
name|valueType
expr_stmt|;
block|}
DECL|method|getTimestamp ()
specifier|public
name|Long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|setTimestamp (Long timestamp)
specifier|public
name|void
name|setTimestamp
parameter_list|(
name|Long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|HBaseCell
name|hBaseCell
init|=
operator|(
name|HBaseCell
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|family
operator|!=
literal|null
condition|?
operator|!
name|family
operator|.
name|equals
argument_list|(
name|hBaseCell
operator|.
name|family
argument_list|)
else|:
name|hBaseCell
operator|.
name|family
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|?
operator|!
name|qualifier
operator|.
name|equals
argument_list|(
name|hBaseCell
operator|.
name|qualifier
argument_list|)
else|:
name|hBaseCell
operator|.
name|qualifier
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|?
operator|!
name|timestamp
operator|.
name|equals
argument_list|(
name|hBaseCell
operator|.
name|timestamp
argument_list|)
else|:
name|hBaseCell
operator|.
name|timestamp
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|?
operator|!
name|value
operator|.
name|equals
argument_list|(
name|hBaseCell
operator|.
name|value
argument_list|)
else|:
name|hBaseCell
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|valueType
operator|!=
literal|null
condition|?
operator|!
name|valueType
operator|.
name|equals
argument_list|(
name|hBaseCell
operator|.
name|valueType
argument_list|)
else|:
name|hBaseCell
operator|.
name|valueType
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|family
operator|!=
literal|null
condition|?
name|family
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|qualifier
operator|!=
literal|null
condition|?
name|qualifier
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|timestamp
operator|!=
literal|null
condition|?
name|timestamp
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|valueType
operator|!=
literal|null
condition|?
name|valueType
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

