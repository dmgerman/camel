begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.hbase
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|hbase
package|;
end_package

begin_enum
DECL|enum|HbaseAttribute
specifier|public
enum|enum
name|HbaseAttribute
block|{
DECL|enumConstant|HBASE_ROW_ID
name|HBASE_ROW_ID
argument_list|(
literal|"CamelHBaseRowId"
argument_list|)
block|,
DECL|enumConstant|HBASE_ROW_TYPE
name|HBASE_ROW_TYPE
argument_list|(
literal|"CamelHBaseRowType"
argument_list|)
block|,
DECL|enumConstant|HBASE_MARKED_ROW_ID
name|HBASE_MARKED_ROW_ID
argument_list|(
literal|"CamelHBaseMarkedRowId"
argument_list|)
block|,
DECL|enumConstant|HBASE_FAMILY
name|HBASE_FAMILY
argument_list|(
literal|"CamelHBaseFamily"
argument_list|)
block|,
DECL|enumConstant|HBASE_QUALIFIER
name|HBASE_QUALIFIER
argument_list|(
literal|"CamelHBaseQualifier"
argument_list|)
block|,
DECL|enumConstant|HBASE_VALUE
name|HBASE_VALUE
argument_list|(
literal|"CamelHBaseValue"
argument_list|)
block|,
DECL|enumConstant|HBASE_VALUE_TYPE
name|HBASE_VALUE_TYPE
argument_list|(
literal|"CamelHBaseValueType"
argument_list|)
block|;
DECL|field|value
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
DECL|method|HbaseAttribute (String value)
specifier|private
name|HbaseAttribute
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|asHeader (int i)
specifier|public
name|String
name|asHeader
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
return|return
name|value
operator|+
name|i
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
DECL|method|asHeader ()
specifier|public
name|String
name|asHeader
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|asOption ()
specifier|public
name|String
name|asOption
parameter_list|()
block|{
name|String
name|normalizedValue
init|=
name|value
operator|.
name|replaceAll
argument_list|(
literal|"CamelHBase"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
name|normalizedValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
name|normalizedValue
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|asOption (int i)
specifier|public
name|String
name|asOption
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|String
name|option
init|=
name|asOption
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
return|return
name|option
operator|+
name|i
return|;
block|}
else|else
block|{
return|return
name|option
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
end_enum

end_unit

