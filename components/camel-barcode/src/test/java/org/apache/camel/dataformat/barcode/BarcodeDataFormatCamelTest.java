begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.dataformat.barcode
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|dataformat
operator|.
name|barcode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|zxing
operator|.
name|BarcodeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|DataFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class tests all Camel dependend cases for {@link BarcodeDataFormat}.   *   */
end_comment

begin_class
DECL|class|BarcodeDataFormatCamelTest
specifier|public
class|class
name|BarcodeDataFormatCamelTest
extends|extends
name|BarcodeTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BarcodeDataFormatCamelTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// clean directory
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
operator|||
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"cannot delete files from directory '%s', because path is not a directory, or it doesn't exist."
argument_list|,
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deleting files from "
operator|+
name|PATH
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"deleting %s"
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * tests barcode (QR-Code) generation and reading.      *       * @throws Exception       */
annotation|@
name|Test
DECL|method|testDefaultQRCode ()
specifier|public
name|void
name|testDefaultQRCode
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|.
name|expectedBodiesReceived
argument_list|(
name|MSG
argument_list|)
expr_stmt|;
name|image
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:code1"
argument_list|,
name|MSG
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkImage
argument_list|(
name|image
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
name|BarcodeImageType
operator|.
name|PNG
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * tests barcode (QR-Code) generation with modified size and reading.      *       * @throws Exception       */
annotation|@
name|Test
DECL|method|testQRCodeWithModifiedSize ()
specifier|public
name|void
name|testQRCodeWithModifiedSize
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|.
name|expectedBodiesReceived
argument_list|(
name|MSG
argument_list|)
expr_stmt|;
name|image
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:code2"
argument_list|,
name|MSG
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkImage
argument_list|(
name|image
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|,
name|BarcodeImageType
operator|.
name|PNG
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * tests barcode (QR-Code) generation with modified image type and reading.      *       * @throws Exception       */
annotation|@
name|Test
DECL|method|testQRCodeWithJPEGType ()
specifier|public
name|void
name|testQRCodeWithJPEGType
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|.
name|expectedBodiesReceived
argument_list|(
name|MSG
argument_list|)
expr_stmt|;
name|image
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:code3"
argument_list|,
name|MSG
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkImage
argument_list|(
name|image
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|"JPEG"
argument_list|)
expr_stmt|;
block|}
comment|/**      * tests barcode (PDF-417) with modiefied size and image taype generation and reading.      *       * @throws Exception       */
annotation|@
name|Test
DECL|method|testPDF417CodeWidthModifiedSizeAndImageType ()
specifier|public
name|void
name|testPDF417CodeWidthModifiedSizeAndImageType
parameter_list|()
throws|throws
name|Exception
block|{
name|out
operator|.
name|expectedBodiesReceived
argument_list|(
name|MSG
argument_list|)
expr_stmt|;
name|image
operator|.
name|expectedMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:code4"
argument_list|,
name|MSG
argument_list|)
expr_stmt|;
name|assertMockEndpointsSatisfied
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkImage
argument_list|(
name|image
argument_list|,
literal|"JPEG"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// QR-Code default
name|DataFormat
name|code1
init|=
operator|new
name|BarcodeDataFormat
argument_list|()
decl_stmt|;
name|from
argument_list|(
literal|"direct:code1"
argument_list|)
operator|.
name|marshal
argument_list|(
name|code1
argument_list|)
operator|.
name|to
argument_list|(
name|FILE_ENDPOINT
argument_list|)
expr_stmt|;
comment|// QR-Code with modified size
name|DataFormat
name|code2
init|=
operator|new
name|BarcodeDataFormat
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:code2"
argument_list|)
operator|.
name|marshal
argument_list|(
name|code2
argument_list|)
operator|.
name|to
argument_list|(
name|FILE_ENDPOINT
argument_list|)
expr_stmt|;
comment|// QR-Code with JPEG type
name|DataFormat
name|code3
init|=
operator|new
name|BarcodeDataFormat
argument_list|(
name|BarcodeImageType
operator|.
name|JPG
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:code3"
argument_list|)
operator|.
name|marshal
argument_list|(
name|code3
argument_list|)
operator|.
name|to
argument_list|(
name|FILE_ENDPOINT
argument_list|)
expr_stmt|;
comment|// PDF-417 code with modified size and image type
name|DataFormat
name|code4
init|=
operator|new
name|BarcodeDataFormat
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
name|BarcodeImageType
operator|.
name|JPG
argument_list|,
name|BarcodeFormat
operator|.
name|PDF_417
argument_list|)
decl_stmt|;
name|from
argument_list|(
literal|"direct:code4"
argument_list|)
operator|.
name|marshal
argument_list|(
name|code4
argument_list|)
operator|.
name|to
argument_list|(
name|FILE_ENDPOINT
argument_list|)
expr_stmt|;
comment|// generic file read --->
comment|//
comment|// read file and route it
name|from
argument_list|(
name|FILE_ENDPOINT
operator|+
literal|"?noop=true"
argument_list|)
operator|.
name|multicast
argument_list|()
operator|.
name|to
argument_list|(
literal|"direct:marshall"
argument_list|,
literal|"mock:image"
argument_list|)
expr_stmt|;
comment|// get the message from code
name|from
argument_list|(
literal|"direct:marshall"
argument_list|)
operator|.
name|unmarshal
argument_list|(
name|code1
argument_list|)
comment|// for unmarshalling, the instance doesn't matter
operator|.
name|to
argument_list|(
literal|"log:OUT"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:out"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

