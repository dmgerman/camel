begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.cloud.servicecall
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|servicecall
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ExchangePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|remote
operator|.
name|AbstractServiceCallProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|remote
operator|.
name|DefaultServiceCallProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|remote
operator|.
name|ServiceCallConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|remote
operator|.
name|ServiceCallDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RouteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServerListStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|cloud
operator|.
name|client
operator|.
name|loadbalancer
operator|.
name|LoadBalancerClient
import|;
end_import

begin_class
DECL|class|CamelCloudServiceCallProcessorFactory
specifier|public
class|class
name|CamelCloudServiceCallProcessorFactory
extends|extends
name|AbstractServiceCallProcessorFactory
block|{
annotation|@
name|Override
DECL|method|createProcessor (RouteContext routeContext, ServiceCallDefinition definition)
specifier|protected
name|Processor
name|createProcessor
parameter_list|(
name|RouteContext
name|routeContext
parameter_list|,
name|ServiceCallDefinition
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|definition
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|ExchangePattern
name|mep
init|=
name|definition
operator|.
name|getPattern
argument_list|()
decl_stmt|;
name|CamelContext
name|camelContext
init|=
name|routeContext
operator|.
name|getCamelContext
argument_list|()
decl_stmt|;
name|ServiceCallConfigurationDefinition
name|config
init|=
name|definition
operator|.
name|getServiceCallConfiguration
argument_list|()
decl_stmt|;
name|ServiceCallConfigurationDefinition
name|configRef
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|getServiceCallConfigurationRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// lookup in registry first
name|configRef
operator|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|definition
operator|.
name|getServiceCallConfigurationRef
argument_list|()
argument_list|,
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|configRef
operator|==
literal|null
condition|)
block|{
comment|// and fallback as service configuration
name|camelContext
operator|.
name|getServiceCallConfiguration
argument_list|(
name|definition
operator|.
name|getServiceCallConfigurationRef
argument_list|()
argument_list|,
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if no configuration explicit configured then use default
if|if
condition|(
name|config
operator|==
literal|null
operator|&&
name|configRef
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|camelContext
operator|.
name|getServiceCallConfiguration
argument_list|(
literal|null
argument_list|,
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
comment|// if no default then try to find if there configuration in the registry of the given type
name|Set
argument_list|<
name|ServiceCallConfigurationDefinition
argument_list|>
name|set
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|ServiceCallConfigurationDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|config
operator|=
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
comment|//if (config == null&& configRef == null) {
comment|//    throw new IllegalStateException("The ServiceCall: " + definition + " must be configured before it can be used.");
comment|//}
name|String
name|component
init|=
name|definition
operator|.
name|getComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
condition|)
block|{
name|component
operator|=
name|config
operator|!=
literal|null
condition|?
name|config
operator|.
name|getComponent
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|component
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|component
operator|=
name|configRef
operator|.
name|getComponent
argument_list|()
expr_stmt|;
block|}
block|}
comment|// lookup the load balancer to use (configured on EIP takes precedence vs configured on configuration)
name|Object
name|lb
init|=
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|,
name|definition
argument_list|,
name|config
argument_list|,
name|configRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Load balancer must be provided"
argument_list|)
throw|;
block|}
if|if
condition|(
name|lb
operator|instanceof
name|LoadBalancerClient
condition|)
block|{
return|return
operator|new
name|CamelCloudServiceCallProcessor
argument_list|(
name|name
argument_list|,
name|uri
argument_list|,
name|component
argument_list|,
name|mep
argument_list|,
operator|(
name|LoadBalancerClient
operator|)
name|lb
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|lb
operator|instanceof
name|ServiceCallLoadBalancer
condition|)
block|{
name|ServiceCallServerListStrategy
argument_list|<
name|ServiceCallServer
argument_list|>
name|sl
init|=
name|retrieveServerListStrategy
argument_list|(
name|camelContext
argument_list|,
name|definition
argument_list|,
name|config
argument_list|,
name|configRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Server list strategy must be provided"
argument_list|)
throw|;
block|}
name|DefaultServiceCallProcessor
argument_list|<
name|ServiceCallServer
argument_list|>
name|processor
init|=
operator|new
name|DefaultServiceCallProcessor
argument_list|<>
argument_list|(
name|name
argument_list|,
name|component
argument_list|,
name|uri
argument_list|,
name|mep
argument_list|)
decl_stmt|;
name|processor
operator|.
name|setLoadBalancer
argument_list|(
operator|(
name|ServiceCallLoadBalancer
argument_list|<
name|ServiceCallServer
argument_list|>
operator|)
name|lb
argument_list|)
expr_stmt|;
name|processor
operator|.
name|setServerListStrategy
argument_list|(
name|sl
argument_list|)
expr_stmt|;
return|return
name|processor
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to configure ServiceCall: LoadBalancer should be an instance of LoadBalancerClient or ServiceCallLoadBalancer, got "
operator|+
name|lb
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// *************************************************************************
comment|// Load Balancer
comment|// *************************************************************************
DECL|method|retrieveLoadBalancer ( CamelContext camelContext, ServiceCallDefinition definition, ServiceCallConfigurationDefinition config, ServiceCallConfigurationDefinition configRef)
specifier|private
name|Object
name|retrieveLoadBalancer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ServiceCallDefinition
name|definition
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|,
name|ServiceCallConfigurationDefinition
name|configRef
parameter_list|)
block|{
comment|// lookup the load balancer to use (configured on EIP takes precedence vs configured on configuration)
name|Object
name|lb
init|=
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|,
name|definition
operator|::
name|getLoadBalancer
argument_list|,
name|definition
operator|::
name|getLoadBalancerRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|,
name|config
operator|::
name|getLoadBalancer
argument_list|,
name|config
operator|::
name|getLoadBalancerRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|retrieveLoadBalancer
argument_list|(
name|camelContext
argument_list|,
name|configRef
operator|::
name|getLoadBalancer
argument_list|,
name|configRef
operator|::
name|getLoadBalancerRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lb
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|LoadBalancerClient
argument_list|>
name|set
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|LoadBalancerClient
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|lb
operator|=
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|lb
return|;
block|}
DECL|method|retrieveLoadBalancer ( CamelContext camelContext, Supplier<Object> loadBalancerSupplier, Supplier<String> loadBalancerRefSupplier)
specifier|private
name|Object
name|retrieveLoadBalancer
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Supplier
argument_list|<
name|Object
argument_list|>
name|loadBalancerSupplier
parameter_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
name|loadBalancerRefSupplier
parameter_list|)
block|{
name|Object
name|lb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loadBalancerSupplier
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|loadBalancerSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lb
operator|==
literal|null
operator|&&
name|loadBalancerRefSupplier
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|loadBalancerRefSupplier
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|lb
operator|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ref
argument_list|,
name|LoadBalancerClient
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
operator|&&
name|lb
operator|==
literal|null
condition|)
block|{
name|lb
operator|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ref
argument_list|,
name|ServiceCallLoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lb
return|;
block|}
comment|// *************************************************************************
comment|// Server List
comment|// *************************************************************************
DECL|method|retrieveServerListStrategy ( CamelContext camelContext, ServiceCallDefinition definition, ServiceCallConfigurationDefinition config, ServiceCallConfigurationDefinition configRef)
specifier|private
name|ServiceCallServerListStrategy
name|retrieveServerListStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|ServiceCallDefinition
name|definition
parameter_list|,
name|ServiceCallConfigurationDefinition
name|config
parameter_list|,
name|ServiceCallConfigurationDefinition
name|configRef
parameter_list|)
block|{
comment|// lookup the server list strategy to use (configured on EIP takes precedence vs configured on configuration)
name|ServiceCallServerListStrategy
name|sl
init|=
name|retrieveServerListStrategy
argument_list|(
name|camelContext
argument_list|,
name|definition
operator|::
name|getServerListStrategy
argument_list|,
name|definition
operator|::
name|getServerListStrategyRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
literal|null
operator|&&
name|config
operator|!=
literal|null
condition|)
block|{
name|sl
operator|=
name|retrieveServerListStrategy
argument_list|(
name|camelContext
argument_list|,
name|config
operator|::
name|getServerListStrategy
argument_list|,
name|config
operator|::
name|getServerListStrategyRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sl
operator|==
literal|null
operator|&&
name|configRef
operator|!=
literal|null
condition|)
block|{
name|sl
operator|=
name|retrieveServerListStrategy
argument_list|(
name|camelContext
argument_list|,
name|configRef
operator|::
name|getServerListStrategy
argument_list|,
name|configRef
operator|::
name|getServerListStrategyRef
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sl
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ServiceCallServerListStrategy
argument_list|>
name|set
init|=
name|camelContext
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByType
argument_list|(
name|ServiceCallServerListStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sl
operator|=
name|set
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|sl
return|;
block|}
DECL|method|retrieveServerListStrategy ( CamelContext camelContext, Supplier<ServiceCallServerListStrategy> serverListSupplier, Supplier<String> serverListSupplierRef)
specifier|private
name|ServiceCallServerListStrategy
name|retrieveServerListStrategy
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|,
name|Supplier
argument_list|<
name|ServiceCallServerListStrategy
argument_list|>
name|serverListSupplier
parameter_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
name|serverListSupplierRef
parameter_list|)
block|{
name|ServiceCallServerListStrategy
name|sl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|serverListSupplier
operator|!=
literal|null
condition|)
block|{
name|sl
operator|=
name|serverListSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sl
operator|==
literal|null
operator|&&
name|serverListSupplierRef
operator|!=
literal|null
condition|)
block|{
name|String
name|ref
init|=
name|serverListSupplierRef
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|sl
operator|=
name|CamelContextHelper
operator|.
name|lookup
argument_list|(
name|camelContext
argument_list|,
name|ref
argument_list|,
name|ServiceCallServerListStrategy
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sl
return|;
block|}
block|}
end_class

end_unit

