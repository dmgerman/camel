begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.cloud.servicecall
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|servicecall
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|remote
operator|.
name|RoundRobinServiceCallLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ServiceCallServerListStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|CamelAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|boot
operator|.
name|util
operator|.
name|GroupCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
operator|.
name|CamelCloudAutoConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|AutoConfigureAfter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|autoconfigure
operator|.
name|condition
operator|.
name|ConditionalOnBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|cloud
operator|.
name|client
operator|.
name|discovery
operator|.
name|DiscoveryClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Lazy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|annotation
operator|.
name|Order
import|;
end_import

begin_class
annotation|@
name|Configuration
annotation|@
name|ConditionalOnBean
argument_list|(
name|CamelCloudAutoConfiguration
operator|.
name|class
argument_list|)
DECL|class|CamelCloudServiceCallAutoConfiguration
specifier|public
class|class
name|CamelCloudServiceCallAutoConfiguration
block|{
comment|// ******************************************
comment|// ServiceCall - ServerListStrategy
comment|// ******************************************
annotation|@
name|Lazy
annotation|@
name|Scope
argument_list|(
literal|"prototype"
argument_list|)
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"server-list-strategy"
argument_list|)
annotation|@
name|ConditionalOnBean
argument_list|(
name|DiscoveryClient
operator|.
name|class
argument_list|)
annotation|@
name|Conditional
argument_list|(
name|CamelCloudServiceCallAutoConfiguration
operator|.
name|ServerListStrategyCondition
operator|.
name|class
argument_list|)
DECL|method|serverListStrategy (List<DiscoveryClient> clients)
specifier|public
name|ServiceCallServerListStrategy
name|serverListStrategy
parameter_list|(
name|List
argument_list|<
name|DiscoveryClient
argument_list|>
name|clients
parameter_list|)
block|{
return|return
operator|new
name|CamelCloudServiceCallServerListStrategy
argument_list|(
name|clients
argument_list|)
return|;
block|}
DECL|class|ServerListStrategyCondition
specifier|public
specifier|static
class|class
name|ServerListStrategyCondition
extends|extends
name|GroupCondition
block|{
DECL|method|ServerListStrategyCondition ()
specifier|public
name|ServerListStrategyCondition
parameter_list|()
block|{
name|super
argument_list|(
literal|"camel.cloud.servicecall"
argument_list|,
literal|"camel.cloud.servicecall.server-list-strategy"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ******************************************
comment|// ServiceCall - Load Balancer
comment|// ******************************************
annotation|@
name|Lazy
annotation|@
name|Scope
argument_list|(
literal|"prototype"
argument_list|)
annotation|@
name|Order
argument_list|(
literal|1
argument_list|)
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"round-robin-load-balancer"
argument_list|)
annotation|@
name|Conditional
argument_list|(
name|CamelCloudServiceCallAutoConfiguration
operator|.
name|LoadBalancerCondition
operator|.
name|class
argument_list|)
DECL|method|roundRobinLoadBalancer ()
specifier|public
name|ServiceCallLoadBalancer
argument_list|<
name|ServiceCallServer
argument_list|>
name|roundRobinLoadBalancer
parameter_list|()
block|{
return|return
operator|new
name|RoundRobinServiceCallLoadBalancer
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Lazy
annotation|@
name|Scope
argument_list|(
literal|"prototype"
argument_list|)
annotation|@
name|Order
argument_list|(
literal|2
argument_list|)
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"random-load-balancer"
argument_list|)
annotation|@
name|Conditional
argument_list|(
name|CamelCloudServiceCallAutoConfiguration
operator|.
name|LoadBalancerCondition
operator|.
name|class
argument_list|)
DECL|method|randomLoadBalancer ()
specifier|public
name|ServiceCallLoadBalancer
argument_list|<
name|ServiceCallServer
argument_list|>
name|randomLoadBalancer
parameter_list|()
block|{
return|return
operator|new
name|RoundRobinServiceCallLoadBalancer
argument_list|<>
argument_list|()
return|;
block|}
DECL|class|LoadBalancerCondition
specifier|public
specifier|static
class|class
name|LoadBalancerCondition
extends|extends
name|GroupCondition
block|{
DECL|method|LoadBalancerCondition ()
specifier|public
name|LoadBalancerCondition
parameter_list|()
block|{
name|super
argument_list|(
literal|"camel.cloud.servicecall"
argument_list|,
literal|"camel.cloud.servicecall.load-balancer"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

