begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.spring.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spring
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|cloud
operator|.
name|ServiceLoadBalancerFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|service
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|cloud
operator|.
name|client
operator|.
name|loadbalancer
operator|.
name|LoadBalancerClient
import|;
end_import

begin_class
DECL|class|CamelSpringCloudServiceLoadBalancer
specifier|public
class|class
name|CamelSpringCloudServiceLoadBalancer
extends|extends
name|ServiceSupport
implements|implements
name|CamelContextAware
implements|,
name|ServiceLoadBalancer
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelSpringCloudServiceLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|loadBalancerClient
specifier|private
specifier|final
name|LoadBalancerClient
name|loadBalancerClient
decl_stmt|;
DECL|field|loadBalancer
specifier|private
specifier|final
name|ServiceLoadBalancer
name|loadBalancer
decl_stmt|;
DECL|field|camelContext
specifier|private
name|CamelContext
name|camelContext
decl_stmt|;
DECL|method|CamelSpringCloudServiceLoadBalancer (LoadBalancerClient loadBalancerClient, Optional<LoadBalancerClientAdapter> clientAdapter)
specifier|public
name|CamelSpringCloudServiceLoadBalancer
parameter_list|(
name|LoadBalancerClient
name|loadBalancerClient
parameter_list|,
name|Optional
argument_list|<
name|LoadBalancerClientAdapter
argument_list|>
name|clientAdapter
parameter_list|)
block|{
name|this
operator|.
name|loadBalancerClient
operator|=
name|loadBalancerClient
expr_stmt|;
name|this
operator|.
name|loadBalancer
operator|=
name|clientAdapter
operator|.
name|orElseGet
argument_list|(
name|DefaultLoadBalancerClientAdapter
operator|::
operator|new
argument_list|)
operator|.
name|adapt
argument_list|(
name|loadBalancerClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCamelContext ()
specifier|public
name|CamelContext
name|getCamelContext
parameter_list|()
block|{
return|return
name|camelContext
return|;
block|}
annotation|@
name|Override
DECL|method|setCamelContext (CamelContext camelContext)
specifier|public
name|void
name|setCamelContext
parameter_list|(
name|CamelContext
name|camelContext
parameter_list|)
block|{
name|this
operator|.
name|camelContext
operator|=
name|camelContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|camelContext
argument_list|,
literal|"camelContext"
argument_list|)
expr_stmt|;
name|ObjectHelper
operator|.
name|notNull
argument_list|(
name|loadBalancerClient
argument_list|,
literal|"loadBalancerClient"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"ServiceCall is using cloud load balancer of type: {}"
argument_list|,
name|loadBalancerClient
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
DECL|method|process (String serviceName, ServiceLoadBalancerFunction<T> function)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|process
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|ServiceLoadBalancerFunction
argument_list|<
name|T
argument_list|>
name|function
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|loadBalancer
operator|.
name|process
argument_list|(
name|serviceName
argument_list|,
name|function
argument_list|)
return|;
block|}
comment|// *******************************
comment|//
comment|// *******************************
annotation|@
name|FunctionalInterface
DECL|interface|LoadBalancerClientAdapter
specifier|public
interface|interface
name|LoadBalancerClientAdapter
block|{
DECL|method|adapt (LoadBalancerClient client)
name|ServiceLoadBalancer
name|adapt
parameter_list|(
name|LoadBalancerClient
name|client
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

