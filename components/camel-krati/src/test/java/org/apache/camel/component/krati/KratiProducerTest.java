begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.krati
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|krati
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|mock
operator|.
name|MockEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|KratiProducerTest
specifier|public
class|class
name|KratiProducerTest
extends|extends
name|CamelTestSupport
block|{
annotation|@
name|Test
DECL|method|testPut ()
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|Exception
block|{
name|MockEndpoint
name|endpoint
init|=
name|context
operator|.
name|getEndpoint
argument_list|(
literal|"mock:results"
argument_list|,
name|MockEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|endpoint
operator|.
name|expectedMessageCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST1"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST2"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST3"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|endpoint
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutAndGet ()
specifier|public
name|void
name|testPutAndGet
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST1"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST2"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST3"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:get"
argument_list|,
literal|null
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"3"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ValueObject
argument_list|(
literal|"TEST3"
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutAndGetPreserveHeaders ()
specifier|public
name|void
name|testPutAndGetPreserveHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST1"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST2"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
operator|new
name|ValueObject
argument_list|(
literal|"TEST3"
argument_list|)
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|Exchange
name|out
init|=
name|template
operator|.
name|send
argument_list|(
literal|"direct:get"
argument_list|,
operator|new
name|Processor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
literal|"foo"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KEY
argument_list|,
operator|new
name|KeyObject
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123
argument_list|,
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ValueObject
argument_list|(
literal|"TEST3"
argument_list|)
argument_list|,
name|out
operator|.
name|getOut
argument_list|()
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutDeleteAndGet ()
specifier|public
name|void
name|testPutDeleteAndGet
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
literal|"TEST1"
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
literal|"TEST2"
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
literal|"TEST3"
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:delete"
argument_list|,
literal|null
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:get"
argument_list|,
literal|null
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"4"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPutDeleteAllAndGet ()
specifier|public
name|void
name|testPutDeleteAllAndGet
parameter_list|()
throws|throws
name|Exception
block|{
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
literal|"TEST1"
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
literal|"TEST2"
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|template
operator|.
name|sendBodyAndHeader
argument_list|(
literal|"direct:put"
argument_list|,
literal|"TEST3"
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:deleteall"
argument_list|,
literal|null
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:get"
argument_list|,
literal|null
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:get"
argument_list|,
literal|null
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|template
operator|.
name|requestBodyAndHeader
argument_list|(
literal|"direct:get"
argument_list|,
literal|null
argument_list|,
name|KratiConstants
operator|.
name|KEY
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createRouteBuilder ()
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
block|{
name|from
argument_list|(
literal|"direct:put"
argument_list|)
operator|.
name|to
argument_list|(
literal|"krati:target/test/producertest"
argument_list|)
operator|.
name|to
argument_list|(
literal|"mock:results"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:get"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION
argument_list|,
name|constant
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_GET
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"krati:target/test/producertest"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:delete"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION
argument_list|,
name|constant
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_DELETE
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"krati:target/test/producertest"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:deleteall"
argument_list|)
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION
argument_list|,
name|constant
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_DELETEALL
argument_list|)
argument_list|)
operator|.
name|to
argument_list|(
literal|"krati:target/test/producertest"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

