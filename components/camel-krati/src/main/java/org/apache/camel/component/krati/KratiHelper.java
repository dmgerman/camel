begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.krati
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|krati
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|core
operator|.
name|StoreConfig
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|core
operator|.
name|segment
operator|.
name|SegmentFactory
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|io
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|store
operator|.
name|DataSet
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|store
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|store
operator|.
name|DynamicDataSet
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|store
operator|.
name|DynamicDataStore
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|store
operator|.
name|SerializableObjectStore
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|util
operator|.
name|HashFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RuntimeCamelException
import|;
end_import

begin_class
DECL|class|KratiHelper
specifier|public
specifier|final
class|class
name|KratiHelper
block|{
DECL|method|KratiHelper ()
specifier|private
name|KratiHelper
parameter_list|()
block|{
comment|//Utillity Class
block|}
comment|/**      * Creates a {@link krati.store.SerializableObjectStore} with the given parameters.      *      * @param path            The directory which the store will use.      * @param initialCapacity      * @param segmentFileSize      * @param segmentFactory  The segment factory, defaults to {@link krati.core.segment.ChannelSegmentFactory}.      * @param hashFunction    The hash function, defaults to {@link krati.util.FnvHashFunction}.      * @param keySerializer   The serializer used for keys, defaults to {@link org.apache.camel.component.krati.serializer.KratiDefaultSerializer}.      * @param valueSerializer The serializer used for values,defaults to {@link org.apache.camel.component.krati.serializer.KratiDefaultSerializer}.      * @return      */
DECL|method|createDataStore (String path, int initialCapacity, int segmentFileSize, SegmentFactory segmentFactory, HashFunction<byte[]> hashFunction, Serializer<K> keySerializer, Serializer<V> valueSerializer)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|DataStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|createDataStore
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|int
name|segmentFileSize
parameter_list|,
name|SegmentFactory
name|segmentFactory
parameter_list|,
name|HashFunction
argument_list|<
name|byte
index|[]
argument_list|>
name|hashFunction
parameter_list|,
name|Serializer
argument_list|<
name|K
argument_list|>
name|keySerializer
parameter_list|,
name|Serializer
argument_list|<
name|V
argument_list|>
name|valueSerializer
parameter_list|)
block|{
name|DataStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|homeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|StoreConfig
name|storeConfig
init|=
operator|new
name|StoreConfig
argument_list|(
name|homeDir
argument_list|,
name|initialCapacity
argument_list|)
decl_stmt|;
name|storeConfig
operator|.
name|setSegmentFactory
argument_list|(
name|segmentFactory
argument_list|)
expr_stmt|;
name|storeConfig
operator|.
name|setHashFunction
argument_list|(
name|hashFunction
argument_list|)
expr_stmt|;
name|storeConfig
operator|.
name|setSegmentFileSizeMB
argument_list|(
name|segmentFileSize
argument_list|)
expr_stmt|;
name|DataStore
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|dynamicDataStore
init|=
operator|new
name|DynamicDataStore
argument_list|(
name|storeConfig
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|SerializableObjectStore
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|dynamicDataStore
argument_list|,
name|keySerializer
argument_list|,
name|valueSerializer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to create Krati DataStore."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Creates a {@link krati.store.DynamicDataSet} with the given parameters.      *      * @param path            The directory which the set will use.      * @param initialCapacity      * @param segmentFactory  The segment factory, defaults to {@link krati.core.segment.ChannelSegmentFactory}.      * @return      */
DECL|method|createDataSet (String path, int initialCapacity, SegmentFactory segmentFactory)
specifier|public
specifier|static
name|DataSet
argument_list|<
name|byte
index|[]
argument_list|>
name|createDataSet
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|initialCapacity
parameter_list|,
name|SegmentFactory
name|segmentFactory
parameter_list|)
block|{
name|DataSet
argument_list|<
name|byte
index|[]
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|File
name|homeDir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|homeDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|new
name|DynamicDataSet
argument_list|(
name|homeDir
argument_list|,
name|initialCapacity
argument_list|,
name|segmentFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeCamelException
argument_list|(
literal|"Failed to create Krati DataSet. This exception is ignored."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

