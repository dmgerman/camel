begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.krati
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|krati
package|;
end_package

begin_import
import|import
name|krati
operator|.
name|store
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Krati producer.  */
end_comment

begin_class
DECL|class|KratiProducer
specifier|public
class|class
name|KratiProducer
extends|extends
name|DefaultProducer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KratiProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|endpoint
specifier|protected
specifier|final
name|KratiEndpoint
name|endpoint
decl_stmt|;
DECL|field|dataStore
specifier|protected
specifier|final
name|DataStore
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|dataStore
decl_stmt|;
DECL|method|KratiProducer (KratiEndpoint endpoint, DataStore<Object, Object> dataStore)
specifier|public
name|KratiProducer
parameter_list|(
name|KratiEndpoint
name|endpoint
parameter_list|,
name|DataStore
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|dataStore
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|)
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|dataStore
operator|=
name|dataStore
expr_stmt|;
block|}
DECL|method|process (Exchange exchange)
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|operation
init|=
name|getOperation
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|Object
name|key
init|=
name|getKey
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing {} operation on '[{}]'"
argument_list|,
name|operation
argument_list|,
name|exchange
argument_list|)
expr_stmt|;
if|if
condition|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_GET
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|&&
name|key
operator|!=
literal|null
condition|)
block|{
comment|// preserve headers and attachments
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setBody
argument_list|(
name|dataStore
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_DELETE
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
operator|&&
name|key
operator|!=
literal|null
condition|)
block|{
name|boolean
name|status
decl_stmt|;
synchronized|synchronized
init|(
name|dataStore
init|)
block|{
name|status
operator|=
name|dataStore
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|dataStore
operator|.
name|persist
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|status
condition|)
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_STATUS
argument_list|,
name|KratiConstants
operator|.
name|KRATI_OPERATION_SUCESSFUL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_STATUS
argument_list|,
name|KratiConstants
operator|.
name|KRATI_OPERATION_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_DELETEALL
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
try|try
block|{
name|dataStore
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeaders
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setAttachments
argument_list|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getAttachments
argument_list|()
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_STATUS
argument_list|,
name|KratiConstants
operator|.
name|KRATI_OPERATION_SUCESSFUL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error clearing all entries from store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// This is not so good to ignore exceptions, the end user have not access the exception, and cannot use Camel error handling
name|exchange
operator|.
name|getOut
argument_list|()
operator|.
name|setHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION_STATUS
argument_list|,
name|KratiConstants
operator|.
name|KRATI_OPERATION_FAILURE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Object
name|value
init|=
name|getValue
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
comment|//Its required to have only one thread putting stuff there at any given time per store.
synchronized|synchronized
init|(
name|endpoint
operator|.
name|getPath
argument_list|()
operator|.
name|intern
argument_list|()
init|)
block|{
name|dataStore
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Retrieves the operation from the URI or from the exchange headers. The header will take precedence over the URI.      */
DECL|method|getOperation (Exchange exchange)
specifier|public
name|String
name|getOperation
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|String
name|operation
init|=
operator|(
operator|(
name|KratiEndpoint
operator|)
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|operation
operator|=
operator|(
name|String
operator|)
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KratiConstants
operator|.
name|KRATI_OPERATION
argument_list|)
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
comment|/**      * Retrieves the key from the URI or from the exchange headers. The header will take precedence over the URI.      */
DECL|method|getKey (Exchange exchange)
specifier|public
name|Object
name|getKey
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|key
init|=
operator|(
operator|(
name|KratiEndpoint
operator|)
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KratiConstants
operator|.
name|KEY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KratiConstants
operator|.
name|KEY
argument_list|)
expr_stmt|;
block|}
return|return
name|key
return|;
block|}
comment|/**      * Retrieves the value from the URI or from the exchange headers/body. The header/body will take precedence over the URI.      */
DECL|method|getValue (Exchange exchange)
specifier|public
name|Object
name|getValue
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|KratiEndpoint
operator|)
name|getEndpoint
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KratiConstants
operator|.
name|VALUE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getHeader
argument_list|(
name|KratiConstants
operator|.
name|VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|exchange
operator|.
name|getIn
argument_list|()
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

