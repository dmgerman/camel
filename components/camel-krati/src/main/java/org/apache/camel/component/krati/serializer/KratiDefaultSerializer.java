begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.krati.serializer
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|krati
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|io
operator|.
name|SerializationException
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|io
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|KratiDefaultSerializer
specifier|public
class|class
name|KratiDefaultSerializer
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
implements|implements
name|Serializer
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KratiDefaultSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Serialize an object into a byte array.      *      * @param object - an object to be serialized by this Serializer.      * @return a byte array which is the raw representation of an object.      */
DECL|method|serialize (T object)
specifier|public
name|byte
index|[]
name|serialize
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|SerializationException
block|{
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|result
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while serializing object. Null will be used."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|oos
argument_list|,
name|baos
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Deserialize an object from its raw bytes generated by {{@link #serialize(Object)}.      *      * @param binary - the raw bytes from which an object is constructed.      * @return an object constructed from the raw bytes.      * @throws SerializationException if the object cannot be constructed from the raw bytes.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|deserialize (byte[] binary)
specifier|public
name|T
name|deserialize
parameter_list|(
name|byte
index|[]
name|binary
parameter_list|)
throws|throws
name|SerializationException
block|{
name|T
name|result
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|ois
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|binary
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|binary
argument_list|)
decl_stmt|;
specifier|final
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|bais
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|resolveClass
parameter_list|(
name|ObjectStreamClass
name|desc
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|classLoader
operator|.
name|loadClass
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
return|return
name|super
operator|.
name|resolveClass
argument_list|(
name|desc
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|result
operator|=
operator|(
name|T
operator|)
name|ois
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while deserializing object. Null will be used."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not find class while deserializing object. Null will be used."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOHelper
operator|.
name|close
argument_list|(
name|ois
argument_list|,
name|bais
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

