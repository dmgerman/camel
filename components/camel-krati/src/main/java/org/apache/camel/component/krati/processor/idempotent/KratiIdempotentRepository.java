begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.krati.processor.idempotent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|krati
operator|.
name|processor
operator|.
name|idempotent
package|;
end_package

begin_import
import|import
name|krati
operator|.
name|core
operator|.
name|segment
operator|.
name|ChannelSegmentFactory
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|core
operator|.
name|segment
operator|.
name|SegmentFactory
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|io
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|krati
operator|.
name|store
operator|.
name|DataSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|api
operator|.
name|management
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|krati
operator|.
name|KratiHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|krati
operator|.
name|serializer
operator|.
name|KratiDefaultSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|IdempotentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|support
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|KratiIdempotentRepository
specifier|public
class|class
name|KratiIdempotentRepository
extends|extends
name|ServiceSupport
implements|implements
name|IdempotentRepository
argument_list|<
name|String
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KratiHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|repositoryPath
specifier|private
name|String
name|repositoryPath
decl_stmt|;
DECL|field|dataSet
specifier|private
name|DataSet
name|dataSet
decl_stmt|;
DECL|field|initialCapacity
specifier|private
name|int
name|initialCapacity
init|=
literal|100
decl_stmt|;
DECL|field|serializer
specifier|private
name|Serializer
name|serializer
init|=
operator|new
name|KratiDefaultSerializer
argument_list|()
decl_stmt|;
DECL|field|segmentFactory
specifier|private
name|SegmentFactory
name|segmentFactory
init|=
operator|new
name|ChannelSegmentFactory
argument_list|()
decl_stmt|;
DECL|method|KratiIdempotentRepository (String repositoryPath)
specifier|public
name|KratiIdempotentRepository
parameter_list|(
name|String
name|repositoryPath
parameter_list|)
block|{
name|this
operator|.
name|repositoryPath
operator|=
name|repositoryPath
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Adds the key to the store"
argument_list|)
DECL|method|add (String s)
specifier|public
name|boolean
name|add
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|dataSet
init|)
block|{
if|if
condition|(
name|dataSet
operator|.
name|has
argument_list|(
name|bytes
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|dataSet
operator|.
name|add
argument_list|(
name|serializer
operator|.
name|serialize
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error adding item to krati idempotent repository. This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Does the store contain the given key"
argument_list|)
DECL|method|contains (String s)
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|dataSet
operator|.
name|has
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error adding item to krati idempotent repository. This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"Does the store contain the given key"
argument_list|)
DECL|method|remove (String s)
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|serializer
operator|.
name|serialize
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|dataSet
operator|.
name|delete
argument_list|(
name|bytes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error adding item to krati idempotent repository. This exception is ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|confirm (String s)
specifier|public
name|boolean
name|confirm
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|doStart ()
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dataSet
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|dataSet
operator|=
name|KratiHelper
operator|.
name|createDataSet
argument_list|(
name|repositoryPath
argument_list|,
name|initialCapacity
argument_list|,
name|segmentFactory
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doStop ()
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|dataSet
operator|!=
literal|null
operator|&&
name|dataSet
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|this
operator|.
name|dataSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getRepositoryPath ()
specifier|public
name|String
name|getRepositoryPath
parameter_list|()
block|{
return|return
name|repositoryPath
return|;
block|}
DECL|method|setRepositoryPath (String repositoryPath)
specifier|public
name|void
name|setRepositoryPath
parameter_list|(
name|String
name|repositoryPath
parameter_list|)
block|{
name|this
operator|.
name|repositoryPath
operator|=
name|repositoryPath
expr_stmt|;
block|}
DECL|method|getDataSet ()
specifier|public
name|DataSet
name|getDataSet
parameter_list|()
block|{
return|return
name|dataSet
return|;
block|}
DECL|method|setDataSet (DataSet dataSet)
specifier|public
name|void
name|setDataSet
parameter_list|(
name|DataSet
name|dataSet
parameter_list|)
block|{
name|this
operator|.
name|dataSet
operator|=
name|dataSet
expr_stmt|;
block|}
DECL|method|getInitialCapacity ()
specifier|public
name|int
name|getInitialCapacity
parameter_list|()
block|{
return|return
name|initialCapacity
return|;
block|}
DECL|method|setInitialCapacity (int initialCapacity)
specifier|public
name|void
name|setInitialCapacity
parameter_list|(
name|int
name|initialCapacity
parameter_list|)
block|{
name|this
operator|.
name|initialCapacity
operator|=
name|initialCapacity
expr_stmt|;
block|}
DECL|method|getSerializer ()
specifier|public
name|Serializer
name|getSerializer
parameter_list|()
block|{
return|return
name|serializer
return|;
block|}
DECL|method|setSerializer (Serializer serializer)
specifier|public
name|void
name|setSerializer
parameter_list|(
name|Serializer
name|serializer
parameter_list|)
block|{
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
block|}
DECL|method|getSegmentFactory ()
specifier|public
name|SegmentFactory
name|getSegmentFactory
parameter_list|()
block|{
return|return
name|segmentFactory
return|;
block|}
DECL|method|setSegmentFactory (SegmentFactory segmentFactory)
specifier|public
name|void
name|setSegmentFactory
parameter_list|(
name|SegmentFactory
name|segmentFactory
parameter_list|)
block|{
name|this
operator|.
name|segmentFactory
operator|=
name|segmentFactory
expr_stmt|;
block|}
block|}
end_class

end_unit

