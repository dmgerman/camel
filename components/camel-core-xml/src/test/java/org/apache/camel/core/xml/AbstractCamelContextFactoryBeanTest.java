begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultFactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultPackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|converter
operator|.
name|DefaultTypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementNameStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RuntimeEndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ReflectionInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|Invocation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_class
DECL|class|AbstractCamelContextFactoryBeanTest
specifier|public
class|class
name|AbstractCamelContextFactoryBeanTest
block|{
comment|// any properties (abstract methods in AbstractCamelContextFactoryBean that
comment|// return String and receive no arguments) that do not support property
comment|// placeholders
DECL|field|propertiesThatAreNotPlaceholdered
name|Set
argument_list|<
name|String
argument_list|>
name|propertiesThatAreNotPlaceholdered
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"{{getErrorHandlerRef}}"
argument_list|)
decl_stmt|;
DECL|field|typeConverter
name|TypeConverter
name|typeConverter
init|=
operator|new
name|DefaultTypeConverter
argument_list|(
operator|new
name|DefaultPackageScanClassResolver
argument_list|()
argument_list|,
operator|new
name|ReflectionInjector
argument_list|()
argument_list|,
operator|new
name|DefaultFactoryFinder
argument_list|(
operator|new
name|DefaultClassResolver
argument_list|()
argument_list|,
literal|"META-INF/services/org/apache/camel/"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// properties that should return value that can be converted to boolean
DECL|field|valuesThatReturnBoolean
name|Set
argument_list|<
name|String
argument_list|>
name|valuesThatReturnBoolean
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|asList
argument_list|(
literal|"{{getStreamCache}}"
argument_list|,
literal|"{{getTrace}}"
argument_list|,
literal|"{{getMessageHistory}}"
argument_list|,
literal|"{{getLogMask}}"
argument_list|,
literal|"{{getLogExhaustedMessageBody}}"
argument_list|,
literal|"{{getHandleFault}}"
argument_list|,
literal|"{{getAutoStartup}}"
argument_list|,
literal|"{{getUseMDCLogging}}"
argument_list|,
literal|"{{getUseDataType}}"
argument_list|,
literal|"{{getUseBreadcrumb}}"
argument_list|,
literal|"{{getAllowUseOriginalMessage}}"
argument_list|)
argument_list|)
decl_stmt|;
comment|// properties that should return value that can be converted to long
DECL|field|valuesThatReturnLong
name|Set
argument_list|<
name|String
argument_list|>
name|valuesThatReturnLong
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|asList
argument_list|(
literal|"{{getDelayer}}"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|AbstractCamelContextFactoryBeanTest ()
specifier|public
name|AbstractCamelContextFactoryBeanTest
parameter_list|()
throws|throws
name|Exception
block|{
operator|(
operator|(
name|Service
operator|)
name|typeConverter
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldSupportPropertyPlaceholdersOnAllProperties ()
specifier|public
name|void
name|shouldSupportPropertyPlaceholdersOnAllProperties
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|Invocation
argument_list|>
name|invocations
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ModelCamelContext
name|context
init|=
name|mock
argument_list|(
name|ModelCamelContext
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|invocationListeners
argument_list|(
name|i
lambda|->
name|invocations
operator|.
name|add
argument_list|(
operator|(
name|Invocation
operator|)
name|i
operator|.
name|getInvocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// program the property resolution in context mock
name|when
argument_list|(
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
specifier|final
name|String
name|placeholder
init|=
name|invocation
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// we receive the argument and check if the method should return a
comment|// value that can be converted to boolean
if|if
condition|(
name|valuesThatReturnBoolean
operator|.
name|contains
argument_list|(
name|placeholder
argument_list|)
operator|||
name|placeholder
operator|.
name|endsWith
argument_list|(
literal|"Enabled}}"
argument_list|)
condition|)
block|{
return|return
literal|"true"
return|;
block|}
comment|// or long
if|if
condition|(
name|valuesThatReturnLong
operator|.
name|contains
argument_list|(
name|placeholder
argument_list|)
condition|)
block|{
return|return
literal|"1"
return|;
block|}
comment|// else is just plain string
return|return
literal|"string"
return|;
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getTypeConverter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|typeConverter
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getRuntimeEndpointRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|RuntimeEndpointRegistry
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getManagementNameStrategy
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ManagementNameStrategy
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|ExecutorServiceManager
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|AbstractCamelContextFactoryBean
argument_list|<
name|ModelCamelContext
argument_list|>
name|factory
init|=
name|mock
argument_list|(
name|AbstractCamelContextFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|factory
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|factory
argument_list|)
operator|.
name|initCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPropertiesToBeResolved
init|=
name|propertiesToBeResolved
argument_list|(
name|factory
argument_list|)
decl_stmt|;
comment|// method under test
name|factory
operator|.
name|initCamelContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// we want to capture the arguments initCamelContext tried to resolve
comment|// and check if it tried to resolve all placeholders we expected
specifier|final
name|ArgumentCaptor
argument_list|<
name|String
argument_list|>
name|capturedPlaceholders
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|context
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|capturedPlaceholders
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
comment|// removes any properties that are not using property placeholders
name|expectedPropertiesToBeResolved
operator|.
name|removeAll
argument_list|(
name|propertiesThatAreNotPlaceholdered
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|capturedPlaceholders
operator|.
name|getAllValues
argument_list|()
argument_list|)
operator|.
name|as
argument_list|(
literal|"The expectation is that all abstract getter methods that return Strings should support property "
operator|+
literal|"placeholders, and that for those will delegate to CamelContext::resolvePropertyPlaceholders, "
operator|+
literal|"we captured all placeholders that tried to resolve and found differences"
argument_list|)
operator|.
name|containsAll
argument_list|(
name|expectedPropertiesToBeResolved
argument_list|)
expr_stmt|;
block|}
DECL|method|propertiesToBeResolved (final AbstractCamelContextFactoryBean<ModelCamelContext> factory)
name|Set
argument_list|<
name|String
argument_list|>
name|propertiesToBeResolved
parameter_list|(
specifier|final
name|AbstractCamelContextFactoryBean
argument_list|<
name|ModelCamelContext
argument_list|>
name|factory
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPropertiesToBeResolved
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// looks at all abstract methods in AbstractCamelContextFactoryBean that
comment|// do have no declared parameters and programs the mock to return
comment|// "{{methodName}}" on calling that method, this happens when
comment|// AbstractCamelContextFactoryBean::initContext invokes the programmed
comment|// mock, so the returned collection will be empty until initContext
comment|// invokes the mocked method
name|stream
argument_list|(
name|AbstractCamelContextFactoryBean
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
argument_list|)
operator|.
name|forEach
argument_list|(
name|m
lambda|->
block|{
lambda|try
block|{
name|when
argument_list|(
name|m
operator|.
name|invoke
argument_list|(
name|factory
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
specifier|final
name|Method
name|method
init|=
name|invocation
operator|.
name|getMethod
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|String
operator|.
name|class
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|placeholder
init|=
literal|"{{"
operator|+
name|name
operator|+
literal|"}}"
decl_stmt|;
name|expectedPropertiesToBeResolved
operator|.
name|add
argument_list|(
name|placeholder
argument_list|)
expr_stmt|;
return|return
name|placeholder
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
name|ignored
parameter_list|)
block|{
comment|// ignored
block|}
block|}
block|)
class|;
end_class

begin_return
return|return
name|expectedPropertiesToBeResolved
return|;
end_return

begin_function
unit|}      static
DECL|method|shouldProvidePropertyPlaceholderSupport (final Method method)
name|boolean
name|shouldProvidePropertyPlaceholderSupport
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|)
block|{
comment|// all abstract getter methods that return String are possibly returning
comment|// strings that contain property placeholders
specifier|final
name|boolean
name|isAbstract
init|=
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|method
operator|.
name|getModifiers
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isGetter
init|=
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|method
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isCompatibleReturnType
init|=
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|returnType
argument_list|)
decl_stmt|;
return|return
name|isAbstract
operator|&&
name|isGetter
operator|&&
name|isCompatibleReturnType
return|;
block|}
end_function

unit|}
end_unit

