begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlTransient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ManagementStatisticsLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|RoutesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRoute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ShutdownRunningTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|TypeConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|ErrorHandlerBuilderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|properties
operator|.
name|PropertiesResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementLifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|DefaultManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|management
operator|.
name|ManagedManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ContextScanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdentifiedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptFromDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|InterceptSendToEndpointDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ModelCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnCompletionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|OnExceptionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PackageScanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|PropertiesDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RestContextRefDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteBuilderDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteContextRefDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|RouteDefinitionHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|ThreadPoolProfileDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|dataformat
operator|.
name|DataFormatsDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestConfigurationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|rest
operator|.
name|RestDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|BacklogTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|HandleFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|TraceFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|AsyncProcessorAwaitManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Debugger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EventNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ExecutorServiceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|FactoryFinderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InflightRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|InterceptStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|LifecycleStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementNamingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ManagementStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ModelJAXBContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|NodeIdFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanClassResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|PackageScanFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RoutePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|RuntimeEndpointRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ShutdownStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|StreamCachingStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|ThreadPoolProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UnitOfWorkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|UuidGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|CamelContextHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A factory to create and initialize a  * {@link CamelContext} and install routes either explicitly configured  * or found by searching the classpath for Java classes which extend  * {@link org.apache.camel.builder.RouteBuilder}.  *  * @version   */
end_comment

begin_class
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|AbstractCamelContextFactoryBean
specifier|public
specifier|abstract
class|class
name|AbstractCamelContextFactoryBean
parameter_list|<
name|T
extends|extends
name|ModelCamelContext
parameter_list|>
extends|extends
name|IdentifiedType
implements|implements
name|RouteContainer
implements|,
name|RestContainer
block|{
comment|/**      * JVM system property to control lazy loading of type converters.      */
DECL|field|LAZY_LOAD_TYPE_CONVERTERS
specifier|public
specifier|static
specifier|final
name|String
name|LAZY_LOAD_TYPE_CONVERTERS
init|=
literal|"CamelLazyLoadTypeConverters"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractCamelContextFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|builders
specifier|private
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<
name|RoutesBuilder
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|contextClassLoaderOnStart
specifier|private
name|ClassLoader
name|contextClassLoaderOnStart
decl_stmt|;
annotation|@
name|XmlTransient
DECL|field|routesSetupDone
specifier|private
specifier|final
name|AtomicBoolean
name|routesSetupDone
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
DECL|method|AbstractCamelContextFactoryBean ()
specifier|public
name|AbstractCamelContextFactoryBean
parameter_list|()
block|{
comment|// Keep track of the class loader for when we actually do start things up
name|contextClassLoaderOnStart
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
block|}
DECL|method|getObject ()
specifier|public
name|T
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getContext
argument_list|()
return|;
block|}
DECL|method|getObjectType ()
specifier|public
specifier|abstract
name|Class
argument_list|<
name|T
argument_list|>
name|getObjectType
parameter_list|()
function_decl|;
DECL|method|isSingleton ()
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|getContextClassLoaderOnStart ()
specifier|public
name|ClassLoader
name|getContextClassLoaderOnStart
parameter_list|()
block|{
return|return
name|contextClassLoaderOnStart
return|;
block|}
DECL|method|afterPropertiesSet ()
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ObjectHelper
operator|.
name|isEmpty
argument_list|(
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Id must be set"
argument_list|)
throw|;
block|}
comment|// set the package scan resolver as soon as possible
name|PackageScanClassResolver
name|packageResolver
init|=
name|getBeanForType
argument_list|(
name|PackageScanClassResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|packageResolver
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom PackageScanClassResolver: {}"
argument_list|,
name|packageResolver
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setPackageScanClassResolver
argument_list|(
name|packageResolver
argument_list|)
expr_stmt|;
block|}
comment|// then set custom properties
if|if
condition|(
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|setProperties
argument_list|(
name|getProperties
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// and enable lazy loading of type converters if applicable
name|initLazyLoadTypeConverters
argument_list|()
expr_stmt|;
name|setupCustomServices
argument_list|()
expr_stmt|;
comment|// set the custom registry if defined
name|initCustomRegistry
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup property placeholder so we got it as early as possible
name|initPropertyPlaceholder
argument_list|()
expr_stmt|;
comment|// setup JMX agent at first
name|initJMXAgent
argument_list|()
expr_stmt|;
name|Tracer
name|tracer
init|=
name|getBeanForType
argument_list|(
name|Tracer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tracer
operator|!=
literal|null
condition|)
block|{
comment|// use formatter if there is a TraceFormatter bean defined
name|TraceFormatter
name|formatter
init|=
name|getBeanForType
argument_list|(
name|TraceFormatter
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|formatter
operator|!=
literal|null
condition|)
block|{
name|tracer
operator|.
name|setFormatter
argument_list|(
name|formatter
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom Tracer: {}"
argument_list|,
name|tracer
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|tracer
argument_list|)
expr_stmt|;
block|}
name|BacklogTracer
name|backlogTracer
init|=
name|getBeanForType
argument_list|(
name|BacklogTracer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|backlogTracer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom BacklogTracer: {}"
argument_list|,
name|backlogTracer
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|backlogTracer
argument_list|)
expr_stmt|;
block|}
name|HandleFault
name|handleFault
init|=
name|getBeanForType
argument_list|(
name|HandleFault
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|handleFault
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom HandleFault: {}"
argument_list|,
name|handleFault
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|handleFault
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Delayer
name|delayer
init|=
name|getBeanForType
argument_list|(
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|processor
operator|.
name|interceptor
operator|.
name|Delayer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|delayer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom Delayer: {}"
argument_list|,
name|delayer
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|delayer
argument_list|)
expr_stmt|;
block|}
name|InflightRepository
name|inflightRepository
init|=
name|getBeanForType
argument_list|(
name|InflightRepository
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|inflightRepository
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom InflightRepository: {}"
argument_list|,
name|inflightRepository
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setInflightRepository
argument_list|(
name|inflightRepository
argument_list|)
expr_stmt|;
block|}
name|AsyncProcessorAwaitManager
name|asyncProcessorAwaitManager
init|=
name|getBeanForType
argument_list|(
name|AsyncProcessorAwaitManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncProcessorAwaitManager
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom AsyncProcessorAwaitManager: {}"
argument_list|,
name|asyncProcessorAwaitManager
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setAsyncProcessorAwaitManager
argument_list|(
name|asyncProcessorAwaitManager
argument_list|)
expr_stmt|;
block|}
name|ManagementStrategy
name|managementStrategy
init|=
name|getBeanForType
argument_list|(
name|ManagementStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|managementStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ManagementStrategy: {}"
argument_list|,
name|managementStrategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setManagementStrategy
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
block|}
name|ManagementNamingStrategy
name|managementNamingStrategy
init|=
name|getBeanForType
argument_list|(
name|ManagementNamingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|managementNamingStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ManagementNamingStrategy: {}"
argument_list|,
name|managementNamingStrategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setManagementNamingStrategy
argument_list|(
name|managementNamingStrategy
argument_list|)
expr_stmt|;
block|}
name|EventFactory
name|eventFactory
init|=
name|getBeanForType
argument_list|(
name|EventFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EventFactory: {}"
argument_list|,
name|eventFactory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|setEventFactory
argument_list|(
name|eventFactory
argument_list|)
expr_stmt|;
block|}
name|UnitOfWorkFactory
name|unitOfWorkFactory
init|=
name|getBeanForType
argument_list|(
name|UnitOfWorkFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|unitOfWorkFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom UnitOfWorkFactory: {}"
argument_list|,
name|unitOfWorkFactory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setUnitOfWorkFactory
argument_list|(
name|unitOfWorkFactory
argument_list|)
expr_stmt|;
block|}
name|RuntimeEndpointRegistry
name|runtimeEndpointRegistry
init|=
name|getBeanForType
argument_list|(
name|RuntimeEndpointRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|runtimeEndpointRegistry
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom RuntimeEndpointRegistry: {}"
argument_list|,
name|runtimeEndpointRegistry
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setRuntimeEndpointRegistry
argument_list|(
name|runtimeEndpointRegistry
argument_list|)
expr_stmt|;
block|}
comment|// custom type converters defined as<bean>s
name|Map
argument_list|<
name|String
argument_list|,
name|TypeConverters
argument_list|>
name|typeConverters
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|TypeConverters
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeConverters
operator|!=
literal|null
operator|&&
operator|!
name|typeConverters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|TypeConverters
argument_list|>
name|entry
range|:
name|typeConverters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TypeConverters
name|converter
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding custom TypeConverters with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|converter
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getTypeConverterRegistry
argument_list|()
operator|.
name|addTypeConverters
argument_list|(
name|converter
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the event notifier strategies if defined
name|Map
argument_list|<
name|String
argument_list|,
name|EventNotifier
argument_list|>
name|eventNotifiers
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|EventNotifier
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventNotifiers
operator|!=
literal|null
operator|&&
operator|!
name|eventNotifiers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|EventNotifier
argument_list|>
name|entry
range|:
name|eventNotifiers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EventNotifier
name|notifier
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|getEventNotifiers
argument_list|()
operator|.
name|contains
argument_list|(
name|notifier
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EventNotifier with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|notifier
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getManagementStrategy
argument_list|()
operator|.
name|addEventNotifier
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set endpoint strategies if defined
name|Map
argument_list|<
name|String
argument_list|,
name|EndpointStrategy
argument_list|>
name|endpointStrategies
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|EndpointStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|endpointStrategies
operator|!=
literal|null
operator|&&
operator|!
name|endpointStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|EndpointStrategy
argument_list|>
name|entry
range|:
name|endpointStrategies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EndpointStrategy
name|strategy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom EndpointStrategy with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addRegisterEndpointCallback
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
comment|// shutdown
name|ShutdownStrategy
name|shutdownStrategy
init|=
name|getBeanForType
argument_list|(
name|ShutdownStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|shutdownStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ShutdownStrategy: "
operator|+
name|shutdownStrategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setShutdownStrategy
argument_list|(
name|shutdownStrategy
argument_list|)
expr_stmt|;
block|}
comment|// add global interceptors
name|Map
argument_list|<
name|String
argument_list|,
name|InterceptStrategy
argument_list|>
name|interceptStrategies
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|InterceptStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|interceptStrategies
operator|!=
literal|null
operator|&&
operator|!
name|interceptStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|InterceptStrategy
argument_list|>
name|entry
range|:
name|interceptStrategies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InterceptStrategy
name|strategy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|getContext
argument_list|()
operator|.
name|getInterceptStrategies
argument_list|()
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom InterceptStrategy with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addInterceptStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// set the lifecycle strategy if defined
name|Map
argument_list|<
name|String
argument_list|,
name|LifecycleStrategy
argument_list|>
name|lifecycleStrategies
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|LifecycleStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|lifecycleStrategies
operator|!=
literal|null
operator|&&
operator|!
name|lifecycleStrategies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|LifecycleStrategy
argument_list|>
name|entry
range|:
name|lifecycleStrategies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LifecycleStrategy
name|strategy
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
operator|!
name|getContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|contains
argument_list|(
name|strategy
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom LifecycleStrategy with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|strategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addLifecycleStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add route policy factories
name|Map
argument_list|<
name|String
argument_list|,
name|RoutePolicyFactory
argument_list|>
name|routePolicyFactories
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|RoutePolicyFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|routePolicyFactories
operator|!=
literal|null
operator|&&
operator|!
name|routePolicyFactories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|RoutePolicyFactory
argument_list|>
name|entry
range|:
name|routePolicyFactories
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RoutePolicyFactory
name|factory
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom RoutePolicyFactory with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addRoutePolicyFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set the default thread pool profile if defined
name|initThreadPoolProfiles
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set the application context and camelContext for the beanPostProcessor
name|initBeanPostProcessor
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// init camel context
name|initCamelContext
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// init stream caching strategy
name|initStreamCachingStrategy
argument_list|()
expr_stmt|;
block|}
comment|/**      * Setup all the routes which must be done prior starting {@link CamelContext}.      */
DECL|method|setupRoutes ()
specifier|protected
name|void
name|setupRoutes
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|routesSetupDone
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting up routes"
argument_list|)
expr_stmt|;
comment|// mark that we are setting up routes
name|getContext
argument_list|()
operator|.
name|setupRoutes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// must init route refs before we prepare the routes below
name|initRouteRefs
argument_list|()
expr_stmt|;
comment|// must init rest refs before we add the rests
name|initRestRefs
argument_list|()
expr_stmt|;
comment|// and add the rests
name|getContext
argument_list|()
operator|.
name|addRestDefinitions
argument_list|(
name|getRests
argument_list|()
argument_list|)
expr_stmt|;
comment|// convert rests into routes so we reuse routes for runtime
for|for
control|(
name|RestDefinition
name|rest
range|:
name|getRests
argument_list|()
control|)
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|routes
init|=
name|rest
operator|.
name|asRouteDefinition
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RouteDefinition
name|route
range|:
name|routes
control|)
block|{
name|getRoutes
argument_list|()
operator|.
name|add
argument_list|(
name|route
argument_list|)
expr_stmt|;
block|}
block|}
comment|// do special preparation for some concepts such as interceptors and policies
comment|// this is needed as JAXB does not build exactly the same model definition as Spring DSL would do
comment|// using route builders. So we have here a little custom code to fix the JAXB gaps
name|prepareRoutes
argument_list|()
expr_stmt|;
comment|// and add the routes
name|getContext
argument_list|()
operator|.
name|addRouteDefinitions
argument_list|(
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found JAXB created routes: {}"
argument_list|,
name|getRoutes
argument_list|()
argument_list|)
expr_stmt|;
name|findRouteBuilders
argument_list|()
expr_stmt|;
name|installRoutes
argument_list|()
expr_stmt|;
comment|// and we are now finished setting up the routes
name|getContext
argument_list|()
operator|.
name|setupRoutes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Do special preparation for some concepts such as interceptors and policies      * this is needed as JAXB does not build exactly the same model definition as Spring DSL would do      * using route builders. So we have here a little custom code to fix the JAXB gaps      */
DECL|method|prepareRoutes ()
specifier|private
name|void
name|prepareRoutes
parameter_list|()
block|{
for|for
control|(
name|RouteDefinition
name|route
range|:
name|getRoutes
argument_list|()
control|)
block|{
comment|// sanity check first as the route is created using XML
name|RouteDefinitionHelper
operator|.
name|sanityCheckRoute
argument_list|(
name|route
argument_list|)
expr_stmt|;
comment|// leverage logic from route definition helper to prepare the route
name|RouteDefinitionHelper
operator|.
name|prepareRoute
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|route
argument_list|,
name|getOnExceptions
argument_list|()
argument_list|,
name|getIntercepts
argument_list|()
argument_list|,
name|getInterceptFroms
argument_list|()
argument_list|,
name|getInterceptSendToEndpoints
argument_list|()
argument_list|,
name|getOnCompletions
argument_list|()
argument_list|)
expr_stmt|;
comment|// mark the route as prepared now
name|route
operator|.
name|markPrepared
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initCustomRegistry (T context)
specifier|protected
specifier|abstract
name|void
name|initCustomRegistry
parameter_list|(
name|T
name|context
parameter_list|)
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|initLazyLoadTypeConverters ()
specifier|protected
name|void
name|initLazyLoadTypeConverters
parameter_list|()
block|{
if|if
condition|(
name|getLazyLoadTypeConverters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|setLazyLoadTypeConverters
argument_list|(
name|getLazyLoadTypeConverters
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|LAZY_LOAD_TYPE_CONVERTERS
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// suppose a JVM property to control it so we can use that for example for unit testing
comment|// to speedup testing by enabling lazy loading of type converters
name|String
name|lazy
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|LAZY_LOAD_TYPE_CONVERTERS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|lazy
argument_list|)
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|setLazyLoadTypeConverters
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|lazy
argument_list|)
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|setLazyLoadTypeConverters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"System property with key "
operator|+
name|LAZY_LOAD_TYPE_CONVERTERS
operator|+
literal|" has unknown value: "
operator|+
name|lazy
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|initJMXAgent ()
specifier|protected
name|void
name|initJMXAgent
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelJMXAgentDefinition
name|camelJMXAgent
init|=
name|getCamelJMXAgent
argument_list|()
decl_stmt|;
name|boolean
name|disabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|camelJMXAgent
operator|!=
literal|null
condition|)
block|{
name|disabled
operator|=
name|camelJMXAgent
operator|.
name|getDisabled
argument_list|()
operator|!=
literal|null
operator|&&
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|disabled
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMXAgent disabled"
argument_list|)
expr_stmt|;
comment|// clear the existing lifecycle strategies define by the DefaultCamelContext constructor
name|getContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// no need to add a lifecycle strategy as we do not need one as JMX is disabled
name|getContext
argument_list|()
operator|.
name|setManagementStrategy
argument_list|(
operator|new
name|DefaultManagementStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|camelJMXAgent
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"JMXAgent enabled: {}"
argument_list|,
name|camelJMXAgent
argument_list|)
expr_stmt|;
name|DefaultManagementAgent
name|agent
init|=
operator|new
name|DefaultManagementAgent
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|camelJMXAgent
operator|.
name|getConnectorPort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setConnectorPort
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getConnectorPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getCreateConnector
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setCreateConnector
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getCreateConnector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getMbeanObjectDomainName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setMBeanObjectDomainName
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getMbeanObjectDomainName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getMbeanServerDefaultDomain
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setMBeanServerDefaultDomain
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getMbeanServerDefaultDomain
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getRegistryPort
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setRegistryPort
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getRegistryPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getServiceUrlPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setServiceUrlPath
argument_list|(
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getServiceUrlPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getUsePlatformMBeanServer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setUsePlatformMBeanServer
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getUsePlatformMBeanServer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getOnlyRegisterProcessorWithCustomId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setOnlyRegisterProcessorWithCustomId
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getOnlyRegisterProcessorWithCustomId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getRegisterAlways
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setRegisterAlways
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getRegisterAlways
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getRegisterNewRoutes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setRegisterNewRoutes
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getRegisterNewRoutes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getIncludeHostName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setIncludeHostName
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getIncludeHostName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getMask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setMask
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getMask
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getLoadStatisticsEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setLoadStatisticsEnabled
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getLoadStatisticsEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getEndpointRuntimeStatisticsEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|agent
operator|.
name|setEndpointRuntimeStatisticsEnabled
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getEndpointRuntimeStatisticsEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|camelJMXAgent
operator|.
name|getStatisticsLevel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|level
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|camelJMXAgent
operator|.
name|getStatisticsLevel
argument_list|()
argument_list|)
decl_stmt|;
name|ManagementStatisticsLevel
name|msLevel
init|=
name|getContext
argument_list|()
operator|.
name|getTypeConverter
argument_list|()
operator|.
name|mandatoryConvertTo
argument_list|(
name|ManagementStatisticsLevel
operator|.
name|class
argument_list|,
name|level
argument_list|)
decl_stmt|;
name|agent
operator|.
name|setStatisticsLevel
argument_list|(
name|msLevel
argument_list|)
expr_stmt|;
block|}
name|ManagementStrategy
name|managementStrategy
init|=
operator|new
name|ManagedManagementStrategy
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|agent
argument_list|)
decl_stmt|;
name|getContext
argument_list|()
operator|.
name|setManagementStrategy
argument_list|(
name|managementStrategy
argument_list|)
expr_stmt|;
comment|// clear the existing lifecycle strategies define by the DefaultCamelContext constructor
name|getContext
argument_list|()
operator|.
name|getLifecycleStrategies
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addLifecycleStrategy
argument_list|(
operator|new
name|DefaultManagementLifecycleStrategy
argument_list|(
name|getContext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initStreamCachingStrategy ()
specifier|protected
name|void
name|initStreamCachingStrategy
parameter_list|()
throws|throws
name|Exception
block|{
name|CamelStreamCachingStrategyDefinition
name|streamCaching
init|=
name|getCamelStreamCachingStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamCaching
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Boolean
name|enabled
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getEnabled
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enabled
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
name|String
name|spoolDirectory
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getSpoolDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|spoolDirectory
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolDirectory
argument_list|(
name|spoolDirectory
argument_list|)
expr_stmt|;
block|}
name|Long
name|spoolThreshold
init|=
name|CamelContextHelper
operator|.
name|parseLong
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getSpoolThreshold
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|spoolThreshold
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolThreshold
argument_list|(
name|spoolThreshold
argument_list|)
expr_stmt|;
block|}
name|Integer
name|spoolUsedHeap
init|=
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getSpoolUsedHeapMemoryThreshold
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|spoolUsedHeap
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolUsedHeapMemoryThreshold
argument_list|(
name|spoolUsedHeap
argument_list|)
expr_stmt|;
block|}
name|String
name|limit
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getSpoolUsedHeapMemoryLimit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|StreamCachingStrategy
operator|.
name|SpoolUsedHeapMemoryLimit
name|ul
init|=
name|CamelContextHelper
operator|.
name|mandatoryConvertTo
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|StreamCachingStrategy
operator|.
name|SpoolUsedHeapMemoryLimit
operator|.
name|class
argument_list|,
name|limit
argument_list|)
decl_stmt|;
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolUsedHeapMemoryLimit
argument_list|(
name|ul
argument_list|)
expr_stmt|;
block|}
name|String
name|spoolChiper
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getSpoolChiper
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|spoolChiper
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setSpoolChiper
argument_list|(
name|spoolChiper
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|remove
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getRemoveSpoolDirectoryWhenStopping
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|remove
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setRemoveSpoolDirectoryWhenStopping
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|statisticsEnabled
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getStatisticsEnabled
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|statisticsEnabled
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|getStatistics
argument_list|()
operator|.
name|setStatisticsEnabled
argument_list|(
name|statisticsEnabled
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|anySpoolRules
init|=
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getAnySpoolRules
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|anySpoolRules
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|setAnySpoolRules
argument_list|(
name|anySpoolRules
argument_list|)
expr_stmt|;
block|}
name|String
name|spoolRules
init|=
name|CamelContextHelper
operator|.
name|parseText
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|streamCaching
operator|.
name|getAnySpoolRules
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|spoolRules
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|ObjectHelper
operator|.
name|createIterator
argument_list|(
name|spoolRules
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StreamCachingStrategy
operator|.
name|SpoolRule
name|rule
init|=
name|getContext
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|lookupByNameAndType
argument_list|(
name|name
argument_list|,
name|StreamCachingStrategy
operator|.
name|SpoolRule
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|!=
literal|null
condition|)
block|{
name|getContext
argument_list|()
operator|.
name|getStreamCachingStrategy
argument_list|()
operator|.
name|addSpoolRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|initPropertyPlaceholder ()
specifier|protected
name|void
name|initPropertyPlaceholder
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getCamelPropertyPlaceholder
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CamelPropertyPlaceholderDefinition
name|def
init|=
name|getCamelPropertyPlaceholder
argument_list|()
decl_stmt|;
name|PropertiesComponent
name|pc
init|=
operator|new
name|PropertiesComponent
argument_list|()
decl_stmt|;
name|pc
operator|.
name|setLocation
argument_list|(
name|def
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setEncoding
argument_list|(
name|def
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|isCache
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setCache
argument_list|(
name|def
operator|.
name|isCache
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|def
operator|.
name|isIgnoreMissingLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setIgnoreMissingLocation
argument_list|(
name|def
operator|.
name|isIgnoreMissingLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if using a custom resolver
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|def
operator|.
name|getPropertiesResolverRef
argument_list|()
argument_list|)
condition|)
block|{
name|PropertiesResolver
name|resolver
init|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|def
operator|.
name|getPropertiesResolverRef
argument_list|()
argument_list|,
name|PropertiesResolver
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setPropertiesResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
comment|// if using a custom parser
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|def
operator|.
name|getPropertiesParserRef
argument_list|()
argument_list|)
condition|)
block|{
name|PropertiesParser
name|parser
init|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|def
operator|.
name|getPropertiesParserRef
argument_list|()
argument_list|,
name|PropertiesParser
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|setPropertiesParser
argument_list|(
name|parser
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setPropertyPrefix
argument_list|(
name|def
operator|.
name|getPropertyPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setPropertySuffix
argument_list|(
name|def
operator|.
name|getPropertySuffix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|isFallbackToUnaugmentedProperty
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pc
operator|.
name|setFallbackToUnaugmentedProperty
argument_list|(
name|def
operator|.
name|isFallbackToUnaugmentedProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pc
operator|.
name|setPrefixToken
argument_list|(
name|def
operator|.
name|getPrefixToken
argument_list|()
argument_list|)
expr_stmt|;
name|pc
operator|.
name|setSuffixToken
argument_list|(
name|def
operator|.
name|getSuffixToken
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|getFunctions
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|def
operator|.
name|getFunctions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CamelPropertyPlaceholderFunctionDefinition
name|function
range|:
name|def
operator|.
name|getFunctions
argument_list|()
control|)
block|{
name|String
name|ref
init|=
name|function
operator|.
name|getRef
argument_list|()
decl_stmt|;
name|PropertiesFunction
name|pf
init|=
name|CamelContextHelper
operator|.
name|mandatoryLookup
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|ref
argument_list|,
name|PropertiesFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|pc
operator|.
name|addFunction
argument_list|(
name|pf
argument_list|)
expr_stmt|;
block|}
block|}
comment|// register the properties component
name|getContext
argument_list|()
operator|.
name|addComponent
argument_list|(
literal|"properties"
argument_list|,
name|pc
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initRouteRefs ()
specifier|protected
name|void
name|initRouteRefs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add route refs to existing routes
if|if
condition|(
name|getRouteRefs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouteContextRefDefinition
name|ref
range|:
name|getRouteRefs
argument_list|()
control|)
block|{
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|defs
init|=
name|ref
operator|.
name|lookupRoutes
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RouteDefinition
name|def
range|:
name|defs
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding route from {} -> {}"
argument_list|,
name|ref
argument_list|,
name|def
argument_list|)
expr_stmt|;
comment|// add in top as they are most likely to be common/shared
comment|// which you may want to start first
name|getRoutes
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|initRestRefs ()
specifier|protected
name|void
name|initRestRefs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add rest refs to existing rests
if|if
condition|(
name|getRestRefs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RestContextRefDefinition
name|ref
range|:
name|getRestRefs
argument_list|()
control|)
block|{
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|defs
init|=
name|ref
operator|.
name|lookupRests
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RestDefinition
name|def
range|:
name|defs
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding rest from {} -> {}"
argument_list|,
name|ref
argument_list|,
name|def
argument_list|)
expr_stmt|;
comment|// add in top as they are most likely to be common/shared
comment|// which you may want to start first
name|getRests
argument_list|()
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getBeanForType (Class<S> clazz)
specifier|protected
specifier|abstract
parameter_list|<
name|S
parameter_list|>
name|S
name|getBeanForType
parameter_list|(
name|Class
argument_list|<
name|S
argument_list|>
name|clazz
parameter_list|)
function_decl|;
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|routesSetupDone
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
DECL|method|getContext ()
specifier|public
name|T
name|getContext
parameter_list|()
block|{
return|return
name|getContext
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|getContext (boolean create)
specifier|public
specifier|abstract
name|T
name|getContext
parameter_list|(
name|boolean
name|create
parameter_list|)
function_decl|;
DECL|method|getRoutes ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RouteDefinition
argument_list|>
name|getRoutes
parameter_list|()
function_decl|;
DECL|method|getRests ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RestDefinition
argument_list|>
name|getRests
parameter_list|()
function_decl|;
DECL|method|getRestConfiguration ()
specifier|public
specifier|abstract
name|RestConfigurationDefinition
name|getRestConfiguration
parameter_list|()
function_decl|;
DECL|method|getEndpoints ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|?
extends|extends
name|AbstractCamelEndpointFactoryBean
argument_list|>
name|getEndpoints
parameter_list|()
function_decl|;
DECL|method|getRedeliveryPolicies ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|?
extends|extends
name|AbstractCamelRedeliveryPolicyFactoryBean
argument_list|>
name|getRedeliveryPolicies
parameter_list|()
function_decl|;
DECL|method|getIntercepts ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|InterceptDefinition
argument_list|>
name|getIntercepts
parameter_list|()
function_decl|;
DECL|method|getInterceptFroms ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|InterceptFromDefinition
argument_list|>
name|getInterceptFroms
parameter_list|()
function_decl|;
DECL|method|getInterceptSendToEndpoints ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|InterceptSendToEndpointDefinition
argument_list|>
name|getInterceptSendToEndpoints
parameter_list|()
function_decl|;
DECL|method|getProperties ()
specifier|public
specifier|abstract
name|PropertiesDefinition
name|getProperties
parameter_list|()
function_decl|;
DECL|method|getPackages ()
specifier|public
specifier|abstract
name|String
index|[]
name|getPackages
parameter_list|()
function_decl|;
DECL|method|getPackageScan ()
specifier|public
specifier|abstract
name|PackageScanDefinition
name|getPackageScan
parameter_list|()
function_decl|;
DECL|method|setPackageScan (PackageScanDefinition packageScan)
specifier|public
specifier|abstract
name|void
name|setPackageScan
parameter_list|(
name|PackageScanDefinition
name|packageScan
parameter_list|)
function_decl|;
DECL|method|getContextScan ()
specifier|public
specifier|abstract
name|ContextScanDefinition
name|getContextScan
parameter_list|()
function_decl|;
DECL|method|setContextScan (ContextScanDefinition contextScan)
specifier|public
specifier|abstract
name|void
name|setContextScan
parameter_list|(
name|ContextScanDefinition
name|contextScan
parameter_list|)
function_decl|;
DECL|method|getCamelPropertyPlaceholder ()
specifier|public
specifier|abstract
name|CamelPropertyPlaceholderDefinition
name|getCamelPropertyPlaceholder
parameter_list|()
function_decl|;
DECL|method|getTrace ()
specifier|public
specifier|abstract
name|String
name|getTrace
parameter_list|()
function_decl|;
DECL|method|getMessageHistory ()
specifier|public
specifier|abstract
name|String
name|getMessageHistory
parameter_list|()
function_decl|;
DECL|method|getStreamCache ()
specifier|public
specifier|abstract
name|String
name|getStreamCache
parameter_list|()
function_decl|;
DECL|method|getDelayer ()
specifier|public
specifier|abstract
name|String
name|getDelayer
parameter_list|()
function_decl|;
DECL|method|getHandleFault ()
specifier|public
specifier|abstract
name|String
name|getHandleFault
parameter_list|()
function_decl|;
DECL|method|getAutoStartup ()
specifier|public
specifier|abstract
name|String
name|getAutoStartup
parameter_list|()
function_decl|;
DECL|method|getUseMDCLogging ()
specifier|public
specifier|abstract
name|String
name|getUseMDCLogging
parameter_list|()
function_decl|;
DECL|method|getUseBreadcrumb ()
specifier|public
specifier|abstract
name|String
name|getUseBreadcrumb
parameter_list|()
function_decl|;
DECL|method|getAllowUseOriginalMessage ()
specifier|public
specifier|abstract
name|String
name|getAllowUseOriginalMessage
parameter_list|()
function_decl|;
DECL|method|getRuntimeEndpointRegistryEnabled ()
specifier|public
specifier|abstract
name|String
name|getRuntimeEndpointRegistryEnabled
parameter_list|()
function_decl|;
DECL|method|getManagementNamePattern ()
specifier|public
specifier|abstract
name|String
name|getManagementNamePattern
parameter_list|()
function_decl|;
DECL|method|getThreadNamePattern ()
specifier|public
specifier|abstract
name|String
name|getThreadNamePattern
parameter_list|()
function_decl|;
comment|/**      * @deprecated this option is no longer supported, will be removed in a future Camel release.      */
annotation|@
name|Deprecated
DECL|method|getLazyLoadTypeConverters ()
specifier|public
specifier|abstract
name|Boolean
name|getLazyLoadTypeConverters
parameter_list|()
function_decl|;
DECL|method|getTypeConverterStatisticsEnabled ()
specifier|public
specifier|abstract
name|Boolean
name|getTypeConverterStatisticsEnabled
parameter_list|()
function_decl|;
DECL|method|getCamelJMXAgent ()
specifier|public
specifier|abstract
name|CamelJMXAgentDefinition
name|getCamelJMXAgent
parameter_list|()
function_decl|;
DECL|method|getCamelStreamCachingStrategy ()
specifier|public
specifier|abstract
name|CamelStreamCachingStrategyDefinition
name|getCamelStreamCachingStrategy
parameter_list|()
function_decl|;
DECL|method|getBuilderRefs ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RouteBuilderDefinition
argument_list|>
name|getBuilderRefs
parameter_list|()
function_decl|;
DECL|method|getRouteRefs ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RouteContextRefDefinition
argument_list|>
name|getRouteRefs
parameter_list|()
function_decl|;
DECL|method|getRestRefs ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|RestContextRefDefinition
argument_list|>
name|getRestRefs
parameter_list|()
function_decl|;
DECL|method|getErrorHandlerRef ()
specifier|public
specifier|abstract
name|String
name|getErrorHandlerRef
parameter_list|()
function_decl|;
DECL|method|getDataFormats ()
specifier|public
specifier|abstract
name|DataFormatsDefinition
name|getDataFormats
parameter_list|()
function_decl|;
DECL|method|getOnExceptions ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|OnExceptionDefinition
argument_list|>
name|getOnExceptions
parameter_list|()
function_decl|;
DECL|method|getOnCompletions ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|OnCompletionDefinition
argument_list|>
name|getOnCompletions
parameter_list|()
function_decl|;
DECL|method|getShutdownRoute ()
specifier|public
specifier|abstract
name|ShutdownRoute
name|getShutdownRoute
parameter_list|()
function_decl|;
DECL|method|getShutdownRunningTask ()
specifier|public
specifier|abstract
name|ShutdownRunningTask
name|getShutdownRunningTask
parameter_list|()
function_decl|;
DECL|method|getThreadPoolProfiles ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ThreadPoolProfileDefinition
argument_list|>
name|getThreadPoolProfiles
parameter_list|()
function_decl|;
DECL|method|getDependsOn ()
specifier|public
specifier|abstract
name|String
name|getDependsOn
parameter_list|()
function_decl|;
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * Initializes the context      *      * @param ctx the context      * @throws Exception is thrown if error occurred      */
DECL|method|initCamelContext (T ctx)
specifier|protected
name|void
name|initCamelContext
parameter_list|(
name|T
name|ctx
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|getStreamCache
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setStreamCaching
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getStreamCache
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getTrace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setTracing
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getTrace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getMessageHistory
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setMessageHistory
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getMessageHistory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDelayer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setDelayer
argument_list|(
name|CamelContextHelper
operator|.
name|parseLong
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getDelayer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getHandleFault
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setHandleFault
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getHandleFault
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getErrorHandlerRef
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setErrorHandlerBuilder
argument_list|(
operator|new
name|ErrorHandlerBuilderRef
argument_list|(
name|getErrorHandlerRef
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getAutoStartup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setAutoStartup
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getAutoStartup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getUseMDCLogging
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setUseMDCLogging
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getUseMDCLogging
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getUseBreadcrumb
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setUseBreadcrumb
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getUseBreadcrumb
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getAllowUseOriginalMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setAllowUseOriginalMessage
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getAllowUseOriginalMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRuntimeEndpointRegistryEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|getRuntimeEndpointRegistry
argument_list|()
operator|.
name|setEnabled
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|getRuntimeEndpointRegistryEnabled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getManagementNamePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|getManagementNameStrategy
argument_list|()
operator|.
name|setNamePattern
argument_list|(
name|getManagementNamePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getThreadNamePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|setThreadNamePattern
argument_list|(
name|getThreadNamePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getShutdownRoute
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setShutdownRoute
argument_list|(
name|getShutdownRoute
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getShutdownRunningTask
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setShutdownRunningTask
argument_list|(
name|getShutdownRunningTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getDataFormats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setDataFormats
argument_list|(
name|getDataFormats
argument_list|()
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getTypeConverterStatisticsEnabled
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setTypeConverterStatisticsEnabled
argument_list|(
name|getTypeConverterStatisticsEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getRestConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|setRestConfiguration
argument_list|(
name|getRestConfiguration
argument_list|()
operator|.
name|asRestConfiguration
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initThreadPoolProfiles (T context)
specifier|protected
name|void
name|initThreadPoolProfiles
parameter_list|(
name|T
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|defaultIds
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// lookup and use custom profiles from the registry
name|Map
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
name|profiles
init|=
name|context
operator|.
name|getRegistry
argument_list|()
operator|.
name|findByTypeWithName
argument_list|(
name|ThreadPoolProfile
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|profiles
operator|!=
literal|null
operator|&&
operator|!
name|profiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ThreadPoolProfile
argument_list|>
name|entry
range|:
name|profiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ThreadPoolProfile
name|profile
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// do not add if already added, for instance a tracer that is also an InterceptStrategy class
if|if
condition|(
name|profile
operator|.
name|isDefaultProfile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom default ThreadPoolProfile with id: {} and implementation: {}"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|setDefaultThreadPoolProfile
argument_list|(
name|profile
argument_list|)
expr_stmt|;
name|defaultIds
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|registerThreadPoolProfile
argument_list|(
name|profile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// use custom profiles defined in the CamelContext
if|if
condition|(
name|getThreadPoolProfiles
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getThreadPoolProfiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ThreadPoolProfileDefinition
name|definition
range|:
name|getThreadPoolProfiles
argument_list|()
control|)
block|{
if|if
condition|(
name|definition
operator|.
name|isDefaultProfile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom default ThreadPoolProfile with id: {} and implementation: {}"
argument_list|,
name|definition
operator|.
name|getId
argument_list|()
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|setDefaultThreadPoolProfile
argument_list|(
name|asThreadPoolProfile
argument_list|(
name|context
argument_list|,
name|definition
argument_list|)
argument_list|)
expr_stmt|;
name|defaultIds
operator|.
name|add
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|registerThreadPoolProfile
argument_list|(
name|asThreadPoolProfile
argument_list|(
name|context
argument_list|,
name|definition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// validate at most one is defined
if|if
condition|(
name|defaultIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only exactly one default ThreadPoolProfile is allowed, was "
operator|+
name|defaultIds
operator|.
name|size
argument_list|()
operator|+
literal|" ids: "
operator|+
name|defaultIds
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a {@link ThreadPoolProfile} instance based on the definition.      *      * @param context    the camel context      * @return           the profile      * @throws Exception is thrown if error creating the profile      */
DECL|method|asThreadPoolProfile (CamelContext context, ThreadPoolProfileDefinition definition)
specifier|private
name|ThreadPoolProfile
name|asThreadPoolProfile
parameter_list|(
name|CamelContext
name|context
parameter_list|,
name|ThreadPoolProfileDefinition
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
name|ThreadPoolProfile
name|answer
init|=
operator|new
name|ThreadPoolProfile
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setId
argument_list|(
name|definition
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDefaultProfile
argument_list|(
name|definition
operator|.
name|getDefaultProfile
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPoolSize
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|getPoolSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMaxPoolSize
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|getMaxPoolSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setKeepAliveTime
argument_list|(
name|CamelContextHelper
operator|.
name|parseLong
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|getKeepAliveTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setMaxQueueSize
argument_list|(
name|CamelContextHelper
operator|.
name|parseInteger
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|getMaxQueueSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAllowCoreThreadTimeOut
argument_list|(
name|CamelContextHelper
operator|.
name|parseBoolean
argument_list|(
name|context
argument_list|,
name|definition
operator|.
name|getAllowCoreThreadTimeOut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setRejectedPolicy
argument_list|(
name|definition
operator|.
name|getRejectedPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setTimeUnit
argument_list|(
name|definition
operator|.
name|getTimeUnit
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
DECL|method|initBeanPostProcessor (T context)
specifier|protected
specifier|abstract
name|void
name|initBeanPostProcessor
parameter_list|(
name|T
name|context
parameter_list|)
function_decl|;
comment|/**      * Strategy to install all available routes into the context      */
DECL|method|installRoutes ()
specifier|protected
name|void
name|installRoutes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RouteBuilder
argument_list|>
name|builders
init|=
operator|new
name|ArrayList
argument_list|<
name|RouteBuilder
argument_list|>
argument_list|()
decl_stmt|;
comment|// lets add RoutesBuilder's added from references
if|if
condition|(
name|getBuilderRefs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RouteBuilderDefinition
name|builderRef
range|:
name|getBuilderRefs
argument_list|()
control|)
block|{
name|RoutesBuilder
name|routes
init|=
name|builderRef
operator|.
name|createRoutes
argument_list|(
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|routes
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|builders
operator|.
name|add
argument_list|(
name|routes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CamelException
argument_list|(
literal|"Cannot find any routes with this RouteBuilder reference: "
operator|+
name|builderRef
argument_list|)
throw|;
block|}
block|}
block|}
comment|// install already configured routes
for|for
control|(
name|RoutesBuilder
name|routeBuilder
range|:
name|this
operator|.
name|builders
control|)
block|{
name|getContext
argument_list|()
operator|.
name|addRoutes
argument_list|(
name|routeBuilder
argument_list|)
expr_stmt|;
block|}
comment|// install builders
for|for
control|(
name|RouteBuilder
name|builder
range|:
name|builders
control|)
block|{
comment|// Inject the annotated resource
name|postProcessBeforeInit
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|addRoutes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|postProcessBeforeInit (RouteBuilder builder)
specifier|protected
specifier|abstract
name|void
name|postProcessBeforeInit
parameter_list|(
name|RouteBuilder
name|builder
parameter_list|)
function_decl|;
comment|/**      * Strategy method to try find {@link org.apache.camel.builder.RouteBuilder} instances on the classpath      */
DECL|method|findRouteBuilders ()
specifier|protected
name|void
name|findRouteBuilders
parameter_list|()
throws|throws
name|Exception
block|{
comment|// package scan
name|addPackageElementContentsToScanDefinition
argument_list|()
expr_stmt|;
name|PackageScanDefinition
name|packageScanDef
init|=
name|getPackageScan
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageScanDef
operator|!=
literal|null
operator|&&
name|packageScanDef
operator|.
name|getPackages
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// use package scan filter
name|PatternBasedPackageScanFilter
name|filter
init|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
decl_stmt|;
comment|// support property placeholders in include and exclude
for|for
control|(
name|String
name|include
range|:
name|packageScanDef
operator|.
name|getIncludes
argument_list|()
control|)
block|{
name|include
operator|=
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|include
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addIncludePattern
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|exclude
range|:
name|packageScanDef
operator|.
name|getExcludes
argument_list|()
control|)
block|{
name|exclude
operator|=
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|exclude
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addExcludePattern
argument_list|(
name|exclude
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|normalized
init|=
name|normalizePackages
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|packageScanDef
operator|.
name|getPackages
argument_list|()
argument_list|)
decl_stmt|;
name|findRouteBuildersByPackageScan
argument_list|(
name|normalized
argument_list|,
name|filter
argument_list|,
name|builders
argument_list|)
expr_stmt|;
block|}
comment|// context scan
name|ContextScanDefinition
name|contextScanDef
init|=
name|getContextScan
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextScanDef
operator|!=
literal|null
condition|)
block|{
comment|// use package scan filter
name|PatternBasedPackageScanFilter
name|filter
init|=
operator|new
name|PatternBasedPackageScanFilter
argument_list|()
decl_stmt|;
comment|// support property placeholders in include and exclude
for|for
control|(
name|String
name|include
range|:
name|contextScanDef
operator|.
name|getIncludes
argument_list|()
control|)
block|{
name|include
operator|=
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|include
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addIncludePattern
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|exclude
range|:
name|contextScanDef
operator|.
name|getExcludes
argument_list|()
control|)
block|{
name|exclude
operator|=
name|getContext
argument_list|()
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|exclude
argument_list|)
expr_stmt|;
name|filter
operator|.
name|addExcludePattern
argument_list|(
name|exclude
argument_list|)
expr_stmt|;
block|}
comment|// lets be false by default, to skip prototype beans
name|boolean
name|includeNonSingletons
init|=
name|contextScanDef
operator|.
name|getIncludeNonSingletons
argument_list|()
operator|!=
literal|null
condition|?
name|contextScanDef
operator|.
name|getIncludeNonSingletons
argument_list|()
else|:
literal|false
decl_stmt|;
name|findRouteBuildersByContextScan
argument_list|(
name|filter
argument_list|,
name|includeNonSingletons
argument_list|,
name|builders
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findRouteBuildersByPackageScan (String[] packages, PackageScanFilter filter, List<RoutesBuilder> builders)
specifier|protected
specifier|abstract
name|void
name|findRouteBuildersByPackageScan
parameter_list|(
name|String
index|[]
name|packages
parameter_list|,
name|PackageScanFilter
name|filter
parameter_list|,
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|findRouteBuildersByContextScan (PackageScanFilter filter, boolean includeNonSingletons, List<RoutesBuilder> builders)
specifier|protected
specifier|abstract
name|void
name|findRouteBuildersByContextScan
parameter_list|(
name|PackageScanFilter
name|filter
parameter_list|,
name|boolean
name|includeNonSingletons
parameter_list|,
name|List
argument_list|<
name|RoutesBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|addPackageElementContentsToScanDefinition ()
specifier|private
name|void
name|addPackageElementContentsToScanDefinition
parameter_list|()
block|{
name|PackageScanDefinition
name|packageScanDef
init|=
name|getPackageScan
argument_list|()
decl_stmt|;
if|if
condition|(
name|getPackages
argument_list|()
operator|!=
literal|null
operator|&&
name|getPackages
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|packageScanDef
operator|==
literal|null
condition|)
block|{
name|packageScanDef
operator|=
operator|new
name|PackageScanDefinition
argument_list|()
expr_stmt|;
name|setPackageScan
argument_list|(
name|packageScanDef
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|pkg
range|:
name|getPackages
argument_list|()
control|)
block|{
name|packageScanDef
operator|.
name|getPackages
argument_list|()
operator|.
name|add
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|normalizePackages (T context, List<String> unnormalized)
specifier|private
name|String
index|[]
name|normalizePackages
parameter_list|(
name|T
name|context
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|unnormalized
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|packages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|unnormalized
control|)
block|{
comment|// it may use property placeholders
name|name
operator|=
name|context
operator|.
name|resolvePropertyPlaceholders
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|name
operator|=
name|ObjectHelper
operator|.
name|normalizeClassName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using package: {} to scan for RouteBuilder classes"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|packages
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|packages
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|packages
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|setupCustomServices ()
specifier|private
name|void
name|setupCustomServices
parameter_list|()
block|{
name|ModelJAXBContextFactory
name|modelJAXBContextFactory
init|=
name|getBeanForType
argument_list|(
name|ModelJAXBContextFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modelJAXBContextFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ModelJAXBContextFactory: {}"
argument_list|,
name|modelJAXBContextFactory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setModelJAXBContextFactory
argument_list|(
name|modelJAXBContextFactory
argument_list|)
expr_stmt|;
block|}
name|ClassResolver
name|classResolver
init|=
name|getBeanForType
argument_list|(
name|ClassResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|classResolver
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ClassResolver: {}"
argument_list|,
name|classResolver
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setClassResolver
argument_list|(
name|classResolver
argument_list|)
expr_stmt|;
block|}
name|FactoryFinderResolver
name|factoryFinderResolver
init|=
name|getBeanForType
argument_list|(
name|FactoryFinderResolver
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryFinderResolver
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom FactoryFinderResolver: {}"
argument_list|,
name|factoryFinderResolver
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setFactoryFinderResolver
argument_list|(
name|factoryFinderResolver
argument_list|)
expr_stmt|;
block|}
name|ExecutorServiceManager
name|executorServiceStrategy
init|=
name|getBeanForType
argument_list|(
name|ExecutorServiceManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|executorServiceStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ExecutorServiceStrategy: {}"
argument_list|,
name|executorServiceStrategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setExecutorServiceManager
argument_list|(
name|executorServiceStrategy
argument_list|)
expr_stmt|;
block|}
name|ThreadPoolFactory
name|threadPoolFactory
init|=
name|getBeanForType
argument_list|(
name|ThreadPoolFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadPoolFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ThreadPoolFactory: {}"
argument_list|,
name|threadPoolFactory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|getExecutorServiceManager
argument_list|()
operator|.
name|setThreadPoolFactory
argument_list|(
name|threadPoolFactory
argument_list|)
expr_stmt|;
block|}
name|ProcessorFactory
name|processorFactory
init|=
name|getBeanForType
argument_list|(
name|ProcessorFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|processorFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom ProcessorFactory: {}"
argument_list|,
name|processorFactory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setProcessorFactory
argument_list|(
name|processorFactory
argument_list|)
expr_stmt|;
block|}
name|Debugger
name|debugger
init|=
name|getBeanForType
argument_list|(
name|Debugger
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|debugger
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom Debugger: {}"
argument_list|,
name|debugger
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setDebugger
argument_list|(
name|debugger
argument_list|)
expr_stmt|;
block|}
name|UuidGenerator
name|uuidGenerator
init|=
name|getBeanForType
argument_list|(
name|UuidGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuidGenerator
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom UuidGenerator: {}"
argument_list|,
name|uuidGenerator
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setUuidGenerator
argument_list|(
name|uuidGenerator
argument_list|)
expr_stmt|;
block|}
name|NodeIdFactory
name|nodeIdFactory
init|=
name|getBeanForType
argument_list|(
name|NodeIdFactory
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeIdFactory
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom NodeIdFactory: {}"
argument_list|,
name|nodeIdFactory
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setNodeIdFactory
argument_list|(
name|nodeIdFactory
argument_list|)
expr_stmt|;
block|}
name|StreamCachingStrategy
name|streamCachingStrategy
init|=
name|getBeanForType
argument_list|(
name|StreamCachingStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|streamCachingStrategy
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using custom StreamCachingStrategy: {}"
argument_list|,
name|streamCachingStrategy
argument_list|)
expr_stmt|;
name|getContext
argument_list|()
operator|.
name|setStreamCachingStrategy
argument_list|(
name|streamCachingStrategy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

