begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.core.xml
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|core
operator|.
name|xml
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|model
operator|.
name|IdentifiedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|Metadata
import|;
end_import

begin_comment
comment|/**  * To proxy a service call using a interface  *  * @version   */
end_comment

begin_class
annotation|@
name|Metadata
argument_list|(
name|label
operator|=
literal|"spring,configuration"
argument_list|)
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"proxy"
argument_list|)
DECL|class|CamelProxyFactoryDefinition
specifier|public
class|class
name|CamelProxyFactoryDefinition
extends|extends
name|IdentifiedType
block|{
annotation|@
name|XmlAttribute
DECL|field|serviceUrl
specifier|private
name|String
name|serviceUrl
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Deprecated
DECL|field|serviceRef
specifier|private
name|String
name|serviceRef
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|serviceInterface
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|serviceInterface
decl_stmt|;
annotation|@
name|XmlAttribute
DECL|field|camelContextId
specifier|private
name|String
name|camelContextId
decl_stmt|;
annotation|@
name|XmlAttribute
annotation|@
name|Metadata
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
DECL|field|binding
specifier|private
name|Boolean
name|binding
decl_stmt|;
DECL|method|getServiceUrl ()
specifier|public
name|String
name|getServiceUrl
parameter_list|()
block|{
return|return
name|serviceUrl
return|;
block|}
comment|/**      * The camel endpoint uri used to send the message to when calling the service from the interface.      */
DECL|method|setServiceUrl (String serviceUrl)
specifier|public
name|void
name|setServiceUrl
parameter_list|(
name|String
name|serviceUrl
parameter_list|)
block|{
name|this
operator|.
name|serviceUrl
operator|=
name|serviceUrl
expr_stmt|;
block|}
DECL|method|getServiceRef ()
specifier|public
name|String
name|getServiceRef
parameter_list|()
block|{
return|return
name|serviceRef
return|;
block|}
comment|/**      * The camel endpoint reference used to send the message to when calling the service from the interface.      *      * @deprecated use serviceUrl instead with the ref endpoint.      */
DECL|method|setServiceRef (String serviceRef)
specifier|public
name|void
name|setServiceRef
parameter_list|(
name|String
name|serviceRef
parameter_list|)
block|{
name|this
operator|.
name|serviceRef
operator|=
name|serviceRef
expr_stmt|;
block|}
DECL|method|getServiceInterface ()
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getServiceInterface
parameter_list|()
block|{
return|return
name|serviceInterface
return|;
block|}
comment|/**      * Java interfaces to use as facade for the service to be proxied      */
DECL|method|setServiceInterface (Class<?> serviceInterface)
specifier|public
name|void
name|setServiceInterface
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|serviceInterface
parameter_list|)
block|{
name|this
operator|.
name|serviceInterface
operator|=
name|serviceInterface
expr_stmt|;
block|}
DECL|method|getCamelContextId ()
specifier|public
name|String
name|getCamelContextId
parameter_list|()
block|{
return|return
name|camelContextId
return|;
block|}
comment|/**      * The id of the CamelContext to use, if there is multiple CamelContext in the same JVM.      */
DECL|method|setCamelContextId (String camelContextId)
specifier|public
name|void
name|setCamelContextId
parameter_list|(
name|String
name|camelContextId
parameter_list|)
block|{
name|this
operator|.
name|camelContextId
operator|=
name|camelContextId
expr_stmt|;
block|}
DECL|method|getBinding ()
specifier|public
name|Boolean
name|getBinding
parameter_list|()
block|{
return|return
name|binding
return|;
block|}
comment|/**      * Camel parameter binding is enabled by default, which will use binding information from the method signature      * parameters to bind to the Exchange/Message with the following annotations.      * If disabled then a {@link org.apache.camel.component.bean.CamelInvocationHandler} is used.      */
DECL|method|setBinding (Boolean binding)
specifier|public
name|void
name|setBinding
parameter_list|(
name|Boolean
name|binding
parameter_list|)
block|{
name|this
operator|.
name|binding
operator|=
name|binding
expr_stmt|;
block|}
block|}
end_class

end_unit

