begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.redis.processor.idempotent
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|redis
operator|.
name|processor
operator|.
name|idempotent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|core
operator|.
name|RedisTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|data
operator|.
name|redis
operator|.
name|core
operator|.
name|SetOperations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|RedisIdempotentRepositoryTest
specifier|public
class|class
name|RedisIdempotentRepositoryTest
block|{
DECL|field|REPOSITORY
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY
init|=
literal|"testRepository"
decl_stmt|;
DECL|field|KEY
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
literal|"KEY"
decl_stmt|;
DECL|field|redisTemplate
specifier|private
name|RedisTemplate
name|redisTemplate
decl_stmt|;
DECL|field|setOperations
specifier|private
name|SetOperations
name|setOperations
decl_stmt|;
DECL|field|idempotentRepository
specifier|private
name|RedisIdempotentRepository
name|idempotentRepository
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|redisTemplate
operator|=
name|mock
argument_list|(
name|RedisTemplate
operator|.
name|class
argument_list|)
expr_stmt|;
name|setOperations
operator|=
name|mock
argument_list|(
name|SetOperations
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|redisTemplate
operator|.
name|opsForSet
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|setOperations
argument_list|)
expr_stmt|;
name|idempotentRepository
operator|=
name|RedisIdempotentRepository
operator|.
name|redisIdempotentRepository
argument_list|(
name|redisTemplate
argument_list|,
name|REPOSITORY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldAddKey ()
specifier|public
name|void
name|shouldAddKey
parameter_list|()
block|{
name|idempotentRepository
operator|.
name|add
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|setOperations
argument_list|)
operator|.
name|add
argument_list|(
name|REPOSITORY
argument_list|,
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shoulCheckForMembers ()
specifier|public
name|void
name|shoulCheckForMembers
parameter_list|()
block|{
name|idempotentRepository
operator|.
name|contains
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|setOperations
argument_list|)
operator|.
name|isMember
argument_list|(
name|REPOSITORY
argument_list|,
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldRemoveKey ()
specifier|public
name|void
name|shouldRemoveKey
parameter_list|()
block|{
name|idempotentRepository
operator|.
name|remove
argument_list|(
name|KEY
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|setOperations
argument_list|)
operator|.
name|remove
argument_list|(
name|REPOSITORY
argument_list|,
name|KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|shouldReturnProcessorName ()
specifier|public
name|void
name|shouldReturnProcessorName
parameter_list|()
block|{
name|String
name|processorName
init|=
name|idempotentRepository
operator|.
name|getProcessorName
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|processorName
argument_list|,
name|is
argument_list|(
name|REPOSITORY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

