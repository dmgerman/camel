begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.camel.component.webhook
package|package
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|webhook
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * A {@code WebhookCapableEndpoint} is a special kind of endpoint that is able to operate in webhook mode if required.  *<p>  * The interface defines methods for registering/unregistering webhooks as well as callback methods for the webhook workflow.  */
end_comment

begin_interface
DECL|interface|WebhookCapableEndpoint
specifier|public
interface|interface
name|WebhookCapableEndpoint
extends|extends
name|Endpoint
block|{
comment|/**      * Creates a processor for the webhook that is responsible for receiving all messages sent to the webhook.      *<p>      * The processor should distinguish handshakes from standard calls and forward relevant data to      * the downstream processor after transformation. Data forwarded to the downstream processor should be of the same      * type as data generated by the corresponding polling consumer.      *      * @param next the downstream processor.      * @return the webhook route processor      */
DECL|method|createWebhookHandler (Processor next)
name|Processor
name|createWebhookHandler
parameter_list|(
name|Processor
name|next
parameter_list|)
function_decl|;
comment|/**      * Register the webhook at the remote site using endpoint specific instruction.      *<p>      * Additional configuration is injected into the endpoint using the      * {@link WebhookCapableEndpoint#setWebhookConfiguration(WebhookConfiguration)} method.      *      * @throws Exception if something goes wrong during the registration.      */
DECL|method|registerWebhook ()
name|void
name|registerWebhook
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Unregister the webhook at the remote site using endpoint specific instruction.      *<p>      * Additional configuration is injected into the endpoint using the      * {@link WebhookCapableEndpoint#setWebhookConfiguration(WebhookConfiguration)} method.      *      * @throws Exception if something goes wrong during the un-registration.      */
DECL|method|unregisterWebhook ()
name|void
name|unregisterWebhook
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Used by the workflow manager to inject webhook configuration options.      *      * @param webhookConfiguration the webhook configuration options.      */
DECL|method|setWebhookConfiguration (WebhookConfiguration webhookConfiguration)
name|void
name|setWebhookConfiguration
parameter_list|(
name|WebhookConfiguration
name|webhookConfiguration
parameter_list|)
function_decl|;
comment|/**      * Used by the endpoint to enlist the HTTP methods it's able to handle.      * Usually only "POST" is used, but some webhook providers require multiple verbs in the handshake phase.      *      * @return the HTTP methods supported by the endpoint      */
DECL|method|getWebhookMethods ()
name|List
argument_list|<
name|String
argument_list|>
name|getWebhookMethods
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

